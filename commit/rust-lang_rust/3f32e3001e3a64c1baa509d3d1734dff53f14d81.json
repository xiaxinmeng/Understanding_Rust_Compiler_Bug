{"sha": "3f32e3001e3a64c1baa509d3d1734dff53f14d81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMzJlMzAwMWUzYTY0YzFiYWE1MDlkM2QxNzM0ZGZmNTNmMTRkODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-11T17:45:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-11T17:45:49Z"}, "message": "Auto merge of #69062 - Dylan-DPC:rollup-7wpjpqu, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #66498 (Remove unused feature gates)\n - #68816 (Tweak borrow error on `FnMut` when `Fn` is expected)\n - #68824 (Enable Control Flow Guard in rustbuild)\n - #69022 (traits: preallocate 2 Vecs of known initial size)\n - #69031 (Use `dyn Trait` more in tests)\n - #69044 (Don't run coherence twice for future-compat lints)\n - #69047 (Don't rustfmt check the vendor directory.)\n - #69055 (Clean up E0307 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "974d1a01dbefdf82b9a50f6d9875712eac3f7015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974d1a01dbefdf82b9a50f6d9875712eac3f7015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f32e3001e3a64c1baa509d3d1734dff53f14d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f32e3001e3a64c1baa509d3d1734dff53f14d81", "html_url": "https://github.com/rust-lang/rust/commit/3f32e3001e3a64c1baa509d3d1734dff53f14d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f32e3001e3a64c1baa509d3d1734dff53f14d81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e0a2c50d063bd7eb79aa55d16cd5fee715c280", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e0a2c50d063bd7eb79aa55d16cd5fee715c280", "html_url": "https://github.com/rust-lang/rust/commit/95e0a2c50d063bd7eb79aa55d16cd5fee715c280"}, {"sha": "82a366ad860b6f0eed639dd103995e6cee1585c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a366ad860b6f0eed639dd103995e6cee1585c7", "html_url": "https://github.com/rust-lang/rust/commit/82a366ad860b6f0eed639dd103995e6cee1585c7"}], "stats": {"total": 908, "additions": 533, "deletions": 375}, "files": [{"sha": "9b7327ea69e0b1663f3c83b5ed6f9f0bacf36ed0", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -444,6 +444,10 @@\n # Use LLVM libunwind as the implementation for Rust's unwinder.\n #llvm-libunwind = false\n \n+# Enable Windows Control Flow Guard checks in the standard library.\n+# This only applies from stage 1 onwards, and only for Windows targets.\n+#control-flow-guard = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "8f4c901fb9740919dae8d6b72a8e122a97250317", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -7,6 +7,7 @@ merge_derives = false\n # tidy only checks files which are not ignored, each entry follows gitignore style\n ignore = [\n     \"build\",\n+    \"/vendor/\",\n \n     # tests for now are not formatted, as they are sometimes pretty-printing constrained\n     # (and generally rustfmt can move around comments in UI-testing incompatible ways)"}, {"sha": "e4b57cddfb891e86e1ed005d0e996216e230010f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1135,6 +1135,20 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n+        // If Control Flow Guard is enabled, pass the `control_flow_guard=checks` flag to rustc\n+        // when compiling the standard library, since this might be linked into the final outputs\n+        // produced by rustc. Since this mitigation is only available on Windows, only enable it\n+        // for the standard library in case the compiler is run on a non-Windows platform.\n+        // This is not needed for stage 0 artifacts because these will only be used for building\n+        // the stage 1 compiler.\n+        if cfg!(windows)\n+            && mode == Mode::Std\n+            && self.config.control_flow_guard\n+            && compiler.stage >= 1\n+        {\n+            rustflags.arg(\"-Zcontrol_flow_guard=checks\");\n+        }\n+\n         // For `cargo doc` invocations, make rustdoc print the Rust version into the docs\n         cargo.env(\"RUSTDOC_CRATE_VERSION\", self.rust_version());\n "}, {"sha": "214d572329ec6c5b16f598f29a6ce815b70d56a9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -116,6 +116,7 @@ pub struct Config {\n     pub targets: Vec<Interned<String>>,\n     pub local_rebuild: bool,\n     pub jemalloc: bool,\n+    pub control_flow_guard: bool,\n \n     // dist misc\n     pub dist_sign_folder: Option<PathBuf>,\n@@ -333,6 +334,7 @@ struct Rust {\n     jemalloc: Option<bool>,\n     test_compare_mode: Option<bool>,\n     llvm_libunwind: Option<bool>,\n+    control_flow_guard: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -580,6 +582,7 @@ impl Config {\n             set(&mut config.rust_verify_llvm_ir, rust.verify_llvm_ir);\n             config.rust_thin_lto_import_instr_limit = rust.thin_lto_import_instr_limit;\n             set(&mut config.rust_remap_debuginfo, rust.remap_debuginfo);\n+            set(&mut config.control_flow_guard, rust.control_flow_guard);\n \n             if let Some(ref backends) = rust.codegen_backends {\n                 config.rust_codegen_backends ="}, {"sha": "1fdd5d13e7fe7998fc14749dcd9219b77bacc746", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -60,6 +60,7 @@ def v(*args):\n o(\"lldb\", \"rust.lldb\", \"build lldb\")\n o(\"missing-tools\", \"dist.missing-tools\", \"allow failures when building tools\")\n o(\"use-libcxx\", \"llvm.use-libcxx\", \"build LLVM with libc++\")\n+o(\"control-flow-guard\", \"rust.control-flow-guard\", \"Enable Control Flow Guard\")\n \n o(\"cflags\", \"llvm.cflags\", \"build LLVM with these extra compiler flags\")\n o(\"cxxflags\", \"llvm.cxxflags\", \"build LLVM with these extra compiler flags\")"}, {"sha": "a476d25f10214116918d3447ea9f60cab8966280", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -103,7 +103,6 @@\n //! More documentation can be found in each respective module below, and you can\n //! also check out the `src/bootstrap/README.md` file for more information.\n \n-#![feature(core_intrinsics)]\n #![feature(drain_filter)]\n \n use std::cell::{Cell, RefCell};"}, {"sha": "f871df46250bad569081a30e083ef0df778d2067", "filename": "src/doc/unstable-book/src/compiler-flags/control-flow-guard.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -0,0 +1,34 @@\n+# `control_flow_guard`\n+\n+The tracking issue for this feature is: [#68793](https://github.com/rust-lang/rust/issues/68793).\n+\n+------------------------\n+\n+The `-Zcontrol_flow_guard=checks` compiler flag enables the Windows [Control Flow Guard][cfguard-docs] platform security feature. When enabled, the compiler outputs a list of valid indirect call targets, and inserts runtime checks on all indirect jump instructions to ensure that the destination is in the list of valid call targets.\n+\n+[cfguard-docs]: https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\n+\n+For testing purposes, the `-Zcontrol_flow_guard=nochecks` compiler flag can be used to emit only the list of valid call targets, but not the runtime checks.\n+\n+It is strongly recommended to also enable Control Flow Guard checks in all linked libraries, including the standard library. \n+\n+To enable Control Flow Guard in the standard library, you can use the [cargo `-Zbuild-std` functionality][build-std] to recompile the standard library with the same configuration options as the main program. \n+\n+[build-std]: https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\n+\n+For example:\n+```cmd\n+rustup toolchain install --force nightly\n+rustup component add rust-src\n+SET RUSTFLAGS=-Zcontrol_flow_guard=checks\n+cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n+```\n+\n+```PowerShell\n+rustup toolchain install --force nightly\n+rustup component add rust-src\n+$Env:RUSTFLAGS = \"-Zcontrol_flow_guard=checks\"\n+cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc\n+```\n+\n+Alternatively, if you are building the standard library from source, you can set `control-flow-guard = true` in the config.toml file."}, {"sha": "ceac68704d2b010c136af2f4466761f779b4560e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -27,7 +27,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(arbitrary_self_types)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n@@ -39,21 +38,15 @@\n #![feature(marker_trait_attr)]\n #![feature(extern_types)]\n #![feature(nll)]\n-#![feature(optin_builtin_traits)]\n #![feature(option_expect_none)]\n #![feature(range_is_empty)]\n #![feature(specialization)]\n-#![feature(unboxed_closures)]\n-#![feature(thread_local)]\n-#![feature(trace_macros)]\n #![feature(trusted_len)]\n #![feature(vec_remove_item)]\n #![feature(stmt_expr_attributes)]\n-#![feature(integer_atomics)]\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n-#![feature(log_syntax)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(hash_raw_entry)]"}, {"sha": "17337ff0c92a6756f65257dd521bde805f830d6e", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -3472,7 +3472,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // that order.\n         let predicates = tcx.predicates_of(def_id);\n         assert_eq!(predicates.parent, None);\n-        let mut obligations = Vec::new();\n+        let mut obligations = Vec::with_capacity(predicates.predicates.len());\n         for (predicate, _) in predicates.predicates {\n             let predicate = normalize_with_depth_to(\n                 self,"}, {"sha": "e09bcdcbc628ea8d2f5e9b244031359318907e05", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -86,10 +86,10 @@ impl<'tcx> Children {\n                 impl_def_id, simplified_self, possible_sibling,\n             );\n \n-            let overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {\n-                // Found overlap, but no specialization; error out.\n+            let create_overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {\n                 let trait_ref = overlap.impl_header.trait_ref.unwrap();\n                 let self_ty = trait_ref.self_ty();\n+\n                 OverlapError {\n                     with_impl: possible_sibling,\n                     trait_desc: trait_ref.print_only_trait_path().to_string(),\n@@ -106,21 +106,49 @@ impl<'tcx> Children {\n                 }\n             };\n \n-            let allowed_to_overlap =\n-                tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling);\n+            let report_overlap_error = |overlap: traits::coherence::OverlapResult<'_>,\n+                                        last_lint: &mut _| {\n+                // Found overlap, but no specialization; error out or report future-compat warning.\n+\n+                // Do we *still* get overlap if we disable the future-incompatible modes?\n+                let should_err = traits::overlapping_impls(\n+                    tcx,\n+                    possible_sibling,\n+                    impl_def_id,\n+                    traits::SkipLeakCheck::default(),\n+                    |_| true,\n+                    || false,\n+                );\n+\n+                let error = create_overlap_error(overlap);\n+\n+                if should_err {\n+                    Err(error)\n+                } else {\n+                    *last_lint = Some(FutureCompatOverlapError {\n+                        error,\n+                        kind: FutureCompatOverlapErrorKind::LeakCheck,\n+                    });\n+\n+                    Ok((false, false))\n+                }\n+            };\n \n+            let last_lint_mut = &mut last_lint;\n             let (le, ge) = traits::overlapping_impls(\n                 tcx,\n                 possible_sibling,\n                 impl_def_id,\n-                traits::SkipLeakCheck::default(),\n+                traits::SkipLeakCheck::Yes,\n                 |overlap| {\n-                    if let Some(overlap_kind) = &allowed_to_overlap {\n+                    if let Some(overlap_kind) =\n+                        tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling)\n+                    {\n                         match overlap_kind {\n                             ty::ImplOverlapKind::Permitted { marker: _ } => {}\n                             ty::ImplOverlapKind::Issue33140 => {\n-                                last_lint = Some(FutureCompatOverlapError {\n-                                    error: overlap_error(overlap),\n+                                *last_lint_mut = Some(FutureCompatOverlapError {\n+                                    error: create_overlap_error(overlap),\n                                     kind: FutureCompatOverlapErrorKind::Issue33140,\n                                 });\n                             }\n@@ -132,7 +160,11 @@ impl<'tcx> Children {\n                     let le = tcx.specializes((impl_def_id, possible_sibling));\n                     let ge = tcx.specializes((possible_sibling, impl_def_id));\n \n-                    if le == ge { Err(overlap_error(overlap)) } else { Ok((le, ge)) }\n+                    if le == ge {\n+                        report_overlap_error(overlap, last_lint_mut)\n+                    } else {\n+                        Ok((le, ge))\n+                    }\n                 },\n                 || Ok((false, false)),\n             )?;\n@@ -153,27 +185,8 @@ impl<'tcx> Children {\n \n                 replace_children.push(possible_sibling);\n             } else {\n-                if let None = allowed_to_overlap {\n-                    // Do future-compat checks for overlap.\n-\n-                    if last_lint.is_none() {\n-                        traits::overlapping_impls(\n-                            tcx,\n-                            possible_sibling,\n-                            impl_def_id,\n-                            traits::SkipLeakCheck::Yes,\n-                            |overlap| {\n-                                last_lint = Some(FutureCompatOverlapError {\n-                                    error: overlap_error(overlap),\n-                                    kind: FutureCompatOverlapErrorKind::LeakCheck,\n-                                });\n-                            },\n-                            || (),\n-                        );\n-                    }\n-                }\n-\n-                // no overlap (error bailed already via ?)\n+                // Either there's no overlap, or the overlap was already reported by\n+                // `overlap_error`.\n             }\n         }\n "}, {"sha": "48721ec04e7fdbe666b21fa84d8d81c6dceaf67f", "filename": "src/librustc/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fwf.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -143,14 +143,15 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let cause = self.cause(traits::MiscObligation);\n         let infcx = &mut self.infcx;\n         let param_env = self.param_env;\n-        let mut obligations = Vec::new();\n-        self.out.iter().inspect(|pred| assert!(!pred.has_escaping_bound_vars())).for_each(|pred| {\n+        let mut obligations = Vec::with_capacity(self.out.len());\n+        for pred in &self.out {\n+            assert!(!pred.has_escaping_bound_vars());\n             let mut selcx = traits::SelectionContext::new(infcx);\n             let i = obligations.len();\n             let value =\n                 traits::normalize_to(&mut selcx, param_env, cause.clone(), pred, &mut obligations);\n             obligations.insert(i, value);\n-        });\n+        }\n         obligations\n     }\n "}, {"sha": "98a3e695fa0797bddf7fa4bcb8fbb554a0ee21a4", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -6,18 +6,11 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n-#![feature(libc)]\n #![feature(nll)]\n-#![feature(optin_builtin_traits)]\n-#![feature(concat_idents)]\n-#![feature(link_args)]\n-#![feature(static_nobundle)]\n #![feature(trusted_len)]\n #![recursion_limit = \"256\"]\n \n@@ -196,7 +189,7 @@ unsafe impl Sync for LlvmCodegenBackend {}\n \n impl LlvmCodegenBackend {\n     pub fn new() -> Box<dyn CodegenBackend> {\n-        box LlvmCodegenBackend(())\n+        Box::new(LlvmCodegenBackend(()))\n     }\n }\n \n@@ -245,7 +238,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n-        box metadata::LlvmMetadataLoader\n+        Box::new(metadata::LlvmMetadataLoader)\n     }\n \n     fn provide(&self, providers: &mut ty::query::Providers<'_>) {\n@@ -262,12 +255,12 @@ impl CodegenBackend for LlvmCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        box rustc_codegen_ssa::base::codegen_crate(\n+        Box::new(rustc_codegen_ssa::base::codegen_crate(\n             LlvmCodegenBackend(()),\n             tcx,\n             metadata,\n             need_metadata_module,\n-        )\n+        ))\n     }\n \n     fn join_codegen("}, {"sha": "0f30c2c020de75a225356a567d6d1be386435ffc", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -22,10 +22,11 @@ impl MetadataLoader for LlvmMetadataLoader {\n         // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n         // internally to read the file. We also avoid even using a memcpy by\n         // just keeping the archive along while the metadata is in use.\n-        let archive = ArchiveRO::open(filename).map(|ar| OwningRef::new(box ar)).map_err(|e| {\n-            debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n-            format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n-        })?;\n+        let archive =\n+            ArchiveRO::open(filename).map(|ar| OwningRef::new(Box::new(ar))).map_err(|e| {\n+                debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n+                format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n+            })?;\n         let buf: OwningRef<_, [u8]> = archive.try_map(|ar| {\n             ar.iter()\n                 .filter_map(|s| s.ok())\n@@ -44,9 +45,10 @@ impl MetadataLoader for LlvmMetadataLoader {\n             let buf = path_to_c_string(filename);\n             let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr())\n                 .ok_or_else(|| format!(\"error reading library: '{}'\", filename.display()))?;\n-            let of = ObjectFile::new(mb).map(|of| OwningRef::new(box of)).ok_or_else(|| {\n-                format!(\"provided path not an object file: '{}'\", filename.display())\n-            })?;\n+            let of =\n+                ObjectFile::new(mb).map(|of| OwningRef::new(Box::new(of))).ok_or_else(|| {\n+                    format!(\"provided path not an object file: '{}'\", filename.display())\n+                })?;\n             let buf = of.try_map(|of| search_meta_section(of, target, filename))?;\n             Ok(rustc_erase_owner!(buf))\n         }"}, {"sha": "a2bb39b9e401935d222c16bd79d66ba8bce67777", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,10 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n-#![feature(core_intrinsics)]\n-#![feature(libc)]\n-#![feature(stmt_expr_attributes)]\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]"}, {"sha": "38906bbaef8104f07fcf152e030ec1bc690ad9b8", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -3,10 +3,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(arbitrary_self_types)]\n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n-#![feature(core_intrinsics)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(in_band_lifetimes)]"}, {"sha": "13792a0c890c4bc8e6587b429d353f98cc38ff23", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -12,19 +12,16 @@\n #![feature(generators)]\n #![feature(generator_trait)]\n #![feature(fn_traits)]\n-#![feature(unsize)]\n #![feature(specialization)]\n #![feature(optin_builtin_traits)]\n #![feature(nll)]\n #![feature(allow_internal_unstable)]\n #![feature(hash_raw_entry)]\n #![feature(stmt_expr_attributes)]\n #![feature(core_intrinsics)]\n-#![feature(integer_atomics)]\n #![feature(test)]\n #![feature(associated_type_bounds)]\n #![feature(thread_id_value)]\n-#![cfg_attr(unix, feature(libc))]\n #![allow(rustc::default_hash_types)]\n \n #[macro_use]"}, {"sha": "52c63994985348126aef97322073ab56507daf06", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -5,12 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(box_syntax)]\n-#![cfg_attr(unix, feature(libc))]\n #![feature(nll)]\n-#![feature(set_stdio)]\n-#![feature(no_debug)]\n-#![feature(integer_atomics)]\n #![recursion_limit = \"256\"]\n \n pub extern crate getopts;"}, {"sha": "52707b93acc8674a546fd9e73dc83706027302b1", "filename": "src/librustc_error_codes/error_codes/E0307.md", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,5 +1,19 @@\n-This error indicates that the `self` parameter in a method has an invalid\n-\"receiver type\".\n+The `self` parameter in a method has an invalid \"receiver type\".\n+\n+Erroneous code example:\n+\n+```compile_fail,E0307\n+struct Foo;\n+struct Bar;\n+\n+trait Trait {\n+    fn foo(&self);\n+}\n+\n+impl Trait for Foo {\n+    fn foo(self: &Bar) {}\n+}\n+```\n \n Methods take a special first parameter, of which there are three variants:\n `self`, `&self`, and `&mut self`. These are syntactic sugar for\n@@ -36,7 +50,7 @@ impl Trait for Foo {\n }\n ```\n \n-E0307 will be emitted by the compiler when using an invalid receiver type,\n+This error will be emitted by the compiler when using an invalid receiver type,\n like in the following example:\n \n ```compile_fail,E0307"}, {"sha": "594e813def8a90b72ebad42caa3903655c9bedb7", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -4,9 +4,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(unix, feature(libc))]\n #![feature(nll)]\n-#![feature(optin_builtin_traits)]\n \n pub use emitter::ColorConfig;\n "}, {"sha": "ca824fde7efc1156eefba0a1170a6329c3fdaa5a", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -3,7 +3,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(specialization)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "ba1e2216ca805df35d394e3ed443c83b9483e8b0", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -2,10 +2,8 @@\n #![feature(box_syntax)]\n #![feature(set_stdio)]\n #![feature(nll)]\n-#![feature(arbitrary_self_types)]\n #![feature(generator_trait)]\n #![feature(generators)]\n-#![cfg_attr(unix, feature(libc))]\n #![recursion_limit = \"256\"]\n \n #[cfg(unix)]"}, {"sha": "2204e104803b32d49a49b9ed7be92ca7adf5da86", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -28,7 +28,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(test, feature(test))]\n #![feature(bool_to_option)]\n-#![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]"}, {"sha": "d4cc3c32616ac02a88e808eeb9e0a57833af26c7", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,15 +1,11 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n-#![feature(box_patterns)]\n #![feature(core_intrinsics)]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n-#![feature(libc)]\n #![feature(nll)]\n #![feature(proc_macro_internals)]\n-#![feature(proc_macro_quote)]\n-#![feature(rustc_private)]\n #![feature(specialization)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]"}, {"sha": "d91f6edc9800c3063c3e13ad83fcc704227e488e", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 97, "deletions": 6, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -10,7 +10,7 @@ use rustc_span::Span;\n use crate::borrow_check::diagnostics::BorrowedContentSource;\n use crate::borrow_check::MirBorrowckCtxt;\n use crate::util::collect_writes::FindAssignments;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum AccessKind {\n@@ -412,11 +412,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 projection: [ProjectionElem::Deref],\n                 // FIXME document what is this 1 magic number about\n             } if local == Local::new(1) && !self.upvars.is_empty() => {\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_help(\n-                    self.body.span,\n-                    \"consider changing this to accept closures that implement `FnMut`\",\n-                );\n+                self.expected_fn_found_fn_mut_call(&mut err, span, act);\n             }\n \n             PlaceRef { local: _, projection: [.., ProjectionElem::Deref] } => {\n@@ -448,6 +444,101 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         err.buffer(&mut self.errors_buffer);\n     }\n+\n+    /// Targetted error when encountering an `FnMut` closure where an `Fn` closure was expected.\n+    fn expected_fn_found_fn_mut_call(&self, err: &mut DiagnosticBuilder<'_>, sp: Span, act: &str) {\n+        err.span_label(sp, format!(\"cannot {}\", act));\n+\n+        let hir = self.infcx.tcx.hir();\n+        let closure_id = hir.as_local_hir_id(self.mir_def_id).unwrap();\n+        let fn_call_id = hir.get_parent_node(closure_id);\n+        let node = hir.get(fn_call_id);\n+        let item_id = hir.get_parent_item(fn_call_id);\n+        let mut look_at_return = true;\n+        // If we can detect the expression to be an `fn` call where the closure was an argument,\n+        // we point at the `fn` definition argument...\n+        match node {\n+            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Call(func, args), .. }) => {\n+                let arg_pos = args\n+                    .iter()\n+                    .enumerate()\n+                    .filter(|(_, arg)| arg.span == self.body.span)\n+                    .map(|(pos, _)| pos)\n+                    .next();\n+                let def_id = hir.local_def_id(item_id);\n+                let tables = self.infcx.tcx.typeck_tables_of(def_id);\n+                if let Some(ty::FnDef(def_id, _)) =\n+                    tables.node_type_opt(func.hir_id).as_ref().map(|ty| &ty.kind)\n+                {\n+                    let arg = match hir.get_if_local(*def_id) {\n+                        Some(hir::Node::Item(hir::Item {\n+                            ident,\n+                            kind: hir::ItemKind::Fn(sig, ..),\n+                            ..\n+                        }))\n+                        | Some(hir::Node::TraitItem(hir::TraitItem {\n+                            ident,\n+                            kind: hir::TraitItemKind::Method(sig, _),\n+                            ..\n+                        }))\n+                        | Some(hir::Node::ImplItem(hir::ImplItem {\n+                            ident,\n+                            kind: hir::ImplItemKind::Method(sig, _),\n+                            ..\n+                        })) => Some(\n+                            arg_pos\n+                                .and_then(|pos| {\n+                                    sig.decl.inputs.get(\n+                                        pos + if sig.decl.implicit_self.has_implicit_self() {\n+                                            1\n+                                        } else {\n+                                            0\n+                                        },\n+                                    )\n+                                })\n+                                .map(|arg| arg.span)\n+                                .unwrap_or(ident.span),\n+                        ),\n+                        _ => None,\n+                    };\n+                    if let Some(span) = arg {\n+                        err.span_label(span, \"change this to accept `FnMut` instead of `Fn`\");\n+                        err.span_label(func.span, \"expects `Fn` instead of `FnMut`\");\n+                        if self.infcx.tcx.sess.source_map().is_multiline(self.body.span) {\n+                            err.span_label(self.body.span, \"in this closure\");\n+                        }\n+                        look_at_return = false;\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        if look_at_return && hir.get_return_block(closure_id).is_some() {\n+            // ...otherwise we are probably in the tail expression of the function, point at the\n+            // return type.\n+            match hir.get(hir.get_parent_item(fn_call_id)) {\n+                hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(sig, ..), .. })\n+                | hir::Node::TraitItem(hir::TraitItem {\n+                    ident,\n+                    kind: hir::TraitItemKind::Method(sig, _),\n+                    ..\n+                })\n+                | hir::Node::ImplItem(hir::ImplItem {\n+                    ident,\n+                    kind: hir::ImplItemKind::Method(sig, _),\n+                    ..\n+                }) => {\n+                    err.span_label(ident.span, \"\");\n+                    err.span_label(\n+                        sig.decl.output.span(),\n+                        \"change this to return `FnMut` instead of `Fn`\",\n+                    );\n+                    err.span_label(self.body.span, \"in this closure\");\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n }\n \n fn suggest_ampmut_self<'tcx>("}, {"sha": "4f1b90e34cf003d34e4ae7c06ada312f418351f5", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -6,21 +6,15 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n-#![feature(inner_deref)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(core_intrinsics)]\n-#![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]\n #![feature(iter_order_by)]\n #![feature(never_type)]\n #![feature(specialization)]\n-#![feature(try_trait)]\n-#![feature(unicode_internals)]\n-#![feature(slice_concat_ext)]\n #![feature(trusted_len)]\n #![feature(try_blocks)]\n #![feature(associated_type_bounds)]"}, {"sha": "2e63c3e1706053b10a8c62a1ea9ad4f3fcef27ad", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -9,7 +9,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![feature(label_break_value)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "8f00b76001f044a6729725f9afbc23b13ac8329a", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -8,9 +8,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n-#![feature(rustc_attrs)]\n #![feature(specialization)]\n-#![feature(step_trait)]\n \n use rustc_data_structures::AtomicRef;\n use rustc_macros::HashStable_Generic;"}, {"sha": "71150e74f70d45ddab3dd30cc73acac71ee4223d", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -8,7 +8,6 @@\n //! LLVM.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(box_syntax)]\n #![feature(bool_to_option)]\n #![feature(nll)]\n "}, {"sha": "474868f0dd6c417feb3742454e0818645c970003", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -58,10 +58,8 @@ This API is completely unstable and subject to change.\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![allow(non_camel_case_types)]\n #![feature(bool_to_option)]\n-#![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(exhaustive_patterns)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(try_blocks)]"}, {"sha": "4e0a2d9427431778ce821fb4185670e6c742c9cb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -3,19 +3,15 @@\n     html_playground_url = \"https://play.rust-lang.org/\"\n )]\n #![feature(rustc_private)]\n-#![feature(arbitrary_self_types)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(set_stdio)]\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n-#![feature(drain_filter)]\n #![feature(never_type)]\n-#![feature(unicode_internals)]\n #![recursion_limit = \"256\"]\n \n extern crate env_logger;"}, {"sha": "b990e71bef0dd722aab3fe557c1fb18eae58916e", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -10,7 +10,6 @@ Core encoding and decoding interfaces.\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![feature(box_syntax)]\n-#![feature(core_intrinsics)]\n #![feature(specialization)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "62e27bcf1643f5ca1d8b7913155960ed1e3baa99", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -18,7 +18,10 @@ fn main() {\n         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n \n         let mut z = 0;\n-        let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+        let _h = to_fn_mut(|| {\n+            set(&mut z);\n+            to_fn(|| z = 42); //~ ERROR cannot assign\n+        });\n     }\n \n     // By-value captures\n@@ -33,3 +36,19 @@ fn main() {\n         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n     }\n }\n+\n+fn foo() -> Box<dyn Fn() -> usize> {\n+    let mut x = 0;\n+    Box::new(move || {\n+        x += 1; //~ ERROR cannot assign\n+        x\n+    })\n+}\n+\n+fn bar() -> impl Fn() -> usize {\n+    let mut x = 0;\n+    move || {\n+        x += 1; //~ ERROR cannot assign\n+        x\n+    }\n+}"}, {"sha": "3046b047d00f6eea0268cdbfd02472ab24bf2490", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 70, "deletions": 49, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,76 +1,97 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _f = to_fn(|| x = 42);\n-   |                           ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n-   |\n-LL |         let _f = to_fn(|| x = 42);\n-   |                        ^^^^^^^^^\n+   |                  -----    ^^^^^^ cannot assign\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:31\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _g = to_fn(|| set(&mut y));\n-   |                               ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n-   |\n-LL |         let _g = to_fn(|| set(&mut y));\n-   |                        ^^^^^^^^^^^^^^\n+   |                  -----        ^^^^^^ cannot borrow as mutable\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n-   |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n-   |                                                       ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n-   |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n-   |                                                    ^^^^^^^^^\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:23:22\n+   |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n+LL |             to_fn(|| z = 42);\n+   |             -----    ^^^^^^ cannot assign\n+   |             |\n+   |             expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n-   |\n-LL |         let _f = to_fn(move || x = 42);\n-   |                                ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:30:32\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _f = to_fn(move || x = 42);\n-   |                        ^^^^^^^^^^^^^^\n+   |                  -----         ^^^^^^ cannot assign\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:36\n-   |\n-LL |         let _g = to_fn(move || set(&mut y));\n-   |                                    ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:33:36\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _g = to_fn(move || set(&mut y));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n+   |                  -----             ^^^^^^ cannot borrow as mutable\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:36:65\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                                 ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n-   |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                         ^^^^^^^^^^^^^^\n+   |                                                   -----         ^^^^^^ cannot assign\n+   |                                                   |\n+   |                                                   expects `Fn` instead of `FnMut`\n+\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:43:9\n+   |\n+LL |   fn foo() -> Box<dyn Fn() -> usize> {\n+   |      ---      ---------------------- change this to return `FnMut` instead of `Fn`\n+LL |       let mut x = 0;\n+LL |       Box::new(move || {\n+   |  ______________-\n+LL | |         x += 1;\n+   | |         ^^^^^^ cannot assign\n+LL | |         x\n+LL | |     })\n+   | |_____- in this closure\n+\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:51:9\n+   |\n+LL |   fn bar() -> impl Fn() -> usize {\n+   |      ---      ------------------ change this to return `FnMut` instead of `Fn`\n+LL |       let mut x = 0;\n+LL | /     move || {\n+LL | |         x += 1;\n+   | |         ^^^^^^ cannot assign\n+LL | |         x\n+LL | |     }\n+   | |_____- in this closure\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "44dde0fd80b0da01157c3e323868d75e0b4ba16a", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -27,32 +27,32 @@ LL |     f();\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-raw-address-of-mutability.rs:29:17\n    |\n-LL |         let y = &raw mut x;\n-   |                 ^^^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-raw-address-of-mutability.rs:28:21\n-   |\n+LL |   fn make_fn<F: Fn()>(f: F) -> F { f }\n+   |                          - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       let f = make_fn(|| {\n-   |  _____________________^\n+   |  _____________-------_-\n+   | |             |\n+   | |             expects `Fn` instead of `FnMut`\n LL | |         let y = &raw mut x;\n+   | |                 ^^^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-raw-address-of-mutability.rs:37:17\n    |\n-LL |         let y = &raw mut x;\n-   |                 ^^^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-raw-address-of-mutability.rs:36:21\n-   |\n+LL |   fn make_fn<F: Fn()>(f: F) -> F { f }\n+   |                          - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       let f = make_fn(move || {\n-   |  _____________________^\n+   |  _____________-------_-\n+   | |             |\n+   | |             expects `Fn` instead of `FnMut`\n LL | |         let y = &raw mut x;\n+   | |                 ^^^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5361ebe3916d712d5170d6ff8a6899a2ce487dfc", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -119,146 +119,146 @@ LL |     &mut (*f()).0;\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:40:9\n    |\n-LL |         x = (1,);\n-   |         ^^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n+   | |         ^^^^^^^^ cannot assign\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:41:9\n    |\n-LL |         x.0 = 1;\n-   |         ^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n+   | |         ^^^^^^^ cannot assign\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:42:9\n    |\n-LL |         &mut x;\n-   |         ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n+   | |         ^^^^^^ cannot borrow as mutable\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:43:9\n    |\n-LL |         &mut x.0;\n-   |         ^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n+   | |         ^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:46:9\n    |\n-LL |         x = (1,);\n-   |         ^^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n+   | |         ^^^^^^^^ cannot assign\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:47:9\n    |\n-LL |         x.0 = 1;\n-   |         ^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n+   | |         ^^^^^^^ cannot assign\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:48:9\n    |\n-LL |         &mut x;\n-   |         ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n+   | |         ^^^^^^ cannot borrow as mutable\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:49:9\n    |\n-LL |         &mut x.0;\n-   |         ^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n+   | |         ^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:54:5"}, {"sha": "3eb8e0ec182881c4cbaace481293ae85f1a5a82b", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:357:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:355:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}, {"sha": "0e427b9cf318f1b5802eddd0391e7d673d524cfd", "filename": "src/test/ui/fn/fn-closure-mutable-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,11 +1,11 @@\n-pub fn bar<F: Fn()>(_f: F) {}\n+pub fn bar<F: Fn()>(_f: F) {} //~ NOTE change this to accept `FnMut` instead of `Fn`\n \n pub fn foo() {\n     let mut x = 0;\n     bar(move || x = 1);\n     //~^ ERROR cannot assign to `x`, as it is a captured variable in a `Fn` closure\n     //~| NOTE cannot assign\n-    //~| HELP consider changing this to accept closures that implement `FnMut`\n+    //~| NOTE expects `Fn` instead of `FnMut`\n }\n \n fn main() {}"}, {"sha": "d23c363ae1582182ab8f30b6a9df41f7d3573aaa", "filename": "src/test/ui/fn/fn-closure-mutable-capture.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,14 +1,13 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/fn-closure-mutable-capture.rs:5:17\n    |\n+LL | pub fn bar<F: Fn()>(_f: F) {}\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |     bar(move || x = 1);\n-   |                 ^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/fn-closure-mutable-capture.rs:5:9\n-   |\n-LL |     bar(move || x = 1);\n-   |         ^^^^^^^^^^^^^\n+   |     ---         ^^^^^ cannot assign\n+   |     |\n+   |     expects `Fn` instead of `FnMut`\n \n error: aborting due to previous error\n "}, {"sha": "0567beab9b9c8a6f5e4eaa01968b7543fbffc58d", "filename": "src/test/ui/hygiene/assoc_ty_bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -12,8 +12,8 @@ trait Derived: Base {\n }\n \n macro mac() {\n-    type A = Base<AssocTy = u8>;\n-    type B = Derived<AssocTy = u8>;\n+    type A = dyn Base<AssocTy = u8>;\n+    type B = dyn Derived<AssocTy = u8>;\n \n     impl Base for u8 {\n         type AssocTy = u8;"}, {"sha": "84c7106e89016b39f4938b9a50594d6f03135b53", "filename": "src/test/ui/issues/issue-21600.stderr", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,34 +1,33 @@\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:14:20\n    |\n+LL | fn call_it<F>(f: F) where F: Fn() { f(); }\n+   |                  - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         call_it(|| x.gen_mut());\n-   |                    ^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/issue-21600.rs:14:17\n-   |\n-LL |         call_it(|| x.gen_mut());\n-   |                 ^^^^^^^^^^^^^^\n+   |         -------    ^ cannot borrow as mutable\n+   |         |\n+   |         expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:14:17\n    |\n-LL |         call_it(|| x.gen_mut());\n-   |                 ^^ - mutable borrow occurs due to use of `x` in closure\n-   |                 |\n-   |                 cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/issue-21600.rs:12:13\n-   |\n+LL |   fn call_it<F>(f: F) where F: Fn() { f(); }\n+   |                    - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       call_it(|| {\n-   |  _____________^\n+   |  _____-------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         call_it(|| x.gen());\n LL | |         call_it(|| x.gen_mut());\n+   | |                 ^^ - mutable borrow occurs due to use of `x` in closure\n+   | |                 |\n+   | |                 cannot borrow as mutable\n LL | |\n LL | |\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd5f32ef4f5818ada0ebca63c9fea0f43ef8ec7b", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -37,36 +37,36 @@ LL |         x = 1;\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:27:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |          x = 1;}\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:26:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |          x = 1;}\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:31:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |     x = 1;});\n-   |     - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:30:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |     x = 1;});\n-   | |___________^\n+   | |_____-_____- in this closure\n+   |       |\n+   |       mutable borrow occurs due to use of `x` in closure\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/closure-captures.rs:39:10\n@@ -80,19 +80,19 @@ LL |          x = 1;}\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:38:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |          x = 1;}\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:37:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |          x = 1;}\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/closure-captures.rs:43:5\n@@ -106,53 +106,53 @@ LL |     x = 1;});\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:42:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |     x = 1;});\n-   |     - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:41:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |     x = 1;});\n-   | |___________^\n+   | |_____-_____- in this closure\n+   |       |\n+   |       mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:48:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |         *x = 1;});\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:47:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |         *x = 1;});\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:51:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |         *x = 1;});\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:50:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |         *x = 1;});\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error: aborting due to 12 previous errors\n "}, {"sha": "b9c526f5156ba1eb8ba3301896f8492c785c67a2", "filename": "src/test/ui/privacy/associated-item-privacy-type-binding.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.rs?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -8,19 +8,19 @@ mod priv_trait {\n     pub trait PubTr: PrivTr {}\n \n     pub macro mac1() {\n-        let _: Box<PubTr<AssocTy = u8>>;\n+        let _: Box<dyn PubTr<AssocTy = u8>>;\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n         //~| ERROR trait `priv_trait::PrivTr` is private\n-        type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n+        type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n     }\n     pub macro mac2() {\n-        let _: Box<PrivTr<AssocTy = u8>>;\n+        let _: Box<dyn PrivTr<AssocTy = u8>>;\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n         //~| ERROR trait `priv_trait::PrivTr` is private\n-        type InSignatureTy1 = Box<PrivTr<AssocTy = u8>>;\n+        type InSignatureTy1 = Box<dyn PrivTr<AssocTy = u8>>;\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n         trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n@@ -41,15 +41,15 @@ mod priv_parent_substs {\n     pub trait PubTr: PubTrWithParam<Priv> {}\n \n     pub macro mac() {\n-        let _: Box<PubTrWithParam<AssocTy = u8>>;\n+        let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n         //~| ERROR type `priv_parent_substs::Priv` is private\n-        let _: Box<PubTr<AssocTy = u8>>;\n+        let _: Box<dyn PubTr<AssocTy = u8>>;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n         //~| ERROR type `priv_parent_substs::Priv` is private\n-        pub type InSignatureTy1 = Box<PubTrWithParam<AssocTy = u8>>;\n+        pub type InSignatureTy1 = Box<dyn PubTrWithParam<AssocTy = u8>>;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n-        pub type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n+        pub type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n         //~^ ERROR type `priv_parent_substs::Priv` is private\n         trait InSignatureTr1: PubTrWithParam<AssocTy = u8> {}\n         //~^ ERROR type `priv_parent_substs::Priv` is private"}, {"sha": "fd8b8cf0db652d2f6baefd894fedcefb590d2c29", "filename": "src/test/ui/privacy/associated-item-privacy-type-binding.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,7 +1,7 @@\n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:13\n    |\n-LL |         let _: Box<PubTr<AssocTy = u8>>;\n+LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n    |             ^\n ...\n LL |     priv_trait::mac1!();\n@@ -12,8 +12,8 @@ LL |     priv_trait::mac1!();\n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:16\n    |\n-LL |         let _: Box<PubTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -23,8 +23,8 @@ LL |     priv_trait::mac1!();\n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:14:31\n    |\n-LL |         type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -45,7 +45,7 @@ LL |     priv_trait::mac1!();\n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:13\n    |\n-LL |         let _: Box<PrivTr<AssocTy = u8>>;\n+LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n    |             ^\n ...\n LL |     priv_trait::mac2!();\n@@ -56,8 +56,8 @@ LL |     priv_trait::mac2!();\n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:16\n    |\n-LL |         let _: Box<PrivTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -67,8 +67,8 @@ LL |     priv_trait::mac2!();\n error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:23:31\n    |\n-LL |         type InSignatureTy1 = Box<PrivTr<AssocTy = u8>>;\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         type InSignatureTy1 = Box<dyn PrivTr<AssocTy = u8>>;\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -89,7 +89,7 @@ LL |     priv_trait::mac2!();\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:13\n    |\n-LL |         let _: Box<PubTrWithParam<AssocTy = u8>>;\n+LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n    |             ^\n ...\n LL |     priv_parent_substs::mac!();\n@@ -100,8 +100,8 @@ LL |     priv_parent_substs::mac!();\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:16\n    |\n-LL |         let _: Box<PubTrWithParam<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -111,7 +111,7 @@ LL |     priv_parent_substs::mac!();\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:13\n    |\n-LL |         let _: Box<PubTr<AssocTy = u8>>;\n+LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n    |             ^\n ...\n LL |     priv_parent_substs::mac!();\n@@ -122,8 +122,8 @@ LL |     priv_parent_substs::mac!();\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:16\n    |\n-LL |         let _: Box<PubTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -133,8 +133,8 @@ LL |     priv_parent_substs::mac!();\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:50:35\n    |\n-LL |         pub type InSignatureTy1 = Box<PubTrWithParam<AssocTy = u8>>;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         pub type InSignatureTy1 = Box<dyn PubTrWithParam<AssocTy = u8>>;\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -144,8 +144,8 @@ LL |     priv_parent_substs::mac!();\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:52:35\n    |\n-LL |         pub type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         pub type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "48ec620d92ea7429dfe9cd072174bee2a72453b8", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -28,17 +28,17 @@ LL |         n += 1;\n error[E0594]: cannot assign to `n`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutate-upvar.rs:53:9\n    |\n-LL |         n += 1;\n-   |         ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/unboxed-closures-mutate-upvar.rs:52:23\n-   |\n+LL |   fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                          - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       let mut f = to_fn(move || {\n-   |  _______________________^\n+   |  _________________-----_-\n+   | |                 |\n+   | |                 expects `Fn` instead of `FnMut`\n LL | |         n += 1;\n+   | |         ^^^^^^ cannot assign\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to 4 previous errors\n "}, {"sha": "80e84fb7cad3f8e54b60366462951bccaf061091", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutated-upvar-from-fn-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f32e3001e3a64c1baa509d3d1734dff53f14d81/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr?ref=3f32e3001e3a64c1baa509d3d1734dff53f14d81", "patch": "@@ -1,18 +1,18 @@\n error[E0594]: cannot assign to `counter`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutated-upvar-from-fn-closure.rs:11:9\n    |\n-LL |         counter += 1;\n-   |         ^^^^^^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/unboxed-closures-mutated-upvar-from-fn-closure.rs:10:10\n-   |\n+LL |   fn call<F>(f: F) where F : Fn() {\n+   |                 - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       call(|| {\n-   |  __________^\n+   |  _____----_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         counter += 1;\n+   | |         ^^^^^^^^^^^^ cannot assign\n LL | |\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to previous error\n "}]}