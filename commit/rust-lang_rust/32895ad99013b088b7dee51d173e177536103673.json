{"sha": "32895ad99013b088b7dee51d173e177536103673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyODk1YWQ5OTAxM2IwODhiN2RlZTUxZDE3M2UxNzc1MzYxMDM2NzM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-15T23:40:22Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-16T18:43:35Z"}, "message": "Switch to using the rustc driver in the bootstrap process.", "tree": {"sha": "2318d685ddf5679d7abf16e7d1b30f97ab80fa3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2318d685ddf5679d7abf16e7d1b30f97ab80fa3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32895ad99013b088b7dee51d173e177536103673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32895ad99013b088b7dee51d173e177536103673", "html_url": "https://github.com/rust-lang/rust/commit/32895ad99013b088b7dee51d173e177536103673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32895ad99013b088b7dee51d173e177536103673/comments", "author": null, "committer": null, "parents": [{"sha": "02c0501a6185da2d3bfce2be1b2bc02abbd36bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c0501a6185da2d3bfce2be1b2bc02abbd36bb9", "html_url": "https://github.com/rust-lang/rust/commit/02c0501a6185da2d3bfce2be1b2bc02abbd36bb9"}], "stats": {"total": 120, "additions": 33, "deletions": 87}, "files": [{"sha": "9c471ee2aaedc60c3e78bf989ec31517ecc7c1d5", "filename": "Makefile.in", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32895ad99013b088b7dee51d173e177536103673/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/32895ad99013b088b7dee51d173e177536103673/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=32895ad99013b088b7dee51d173e177536103673", "patch": "@@ -44,7 +44,6 @@ endif\n CFG_RUNTIME :=$(call CFG_LIB_NAME,rustrt)\n CFG_RUSTLLVM :=$(call CFG_LIB_NAME,rustllvm)\n CFG_STDLIB :=$(call CFG_LIB_NAME,std)\n-CFG_RUSTCLIB :=$(call CFG_LIB_NAME,rustc)\n \n # version-string calculation\n CFG_GIT_DIR := $(CFG_SRC_DIR).git\n@@ -107,12 +106,15 @@ VPATH := $(S)doc $(S)src\n \n # Compilers we build, we now know how to run.\n STAGE0 := $(Q)$(call CFG_RUN_TARG,stage0,\\\n-                stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage1)\n-STAGE1 := $(Q)$(call CFG_RUN_TARG,stage1, \\\n+                stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage0)\n+STAGE1 := $(Q)$(call CFG_RUN_TARG,stage0, \\\n                 $(CFG_VALGRIND_COMPILE) stage1/rustc$(X) \\\n-                $(CFG_RUSTC_FLAGS) -L stage2)\n-STAGE2 := $(Q)$(call CFG_RUN_TARG,stage2, \\\n+                $(CFG_RUSTC_FLAGS) -L stage1)\n+STAGE2 := $(Q)$(call CFG_RUN_TARG,stage1, \\\n                 $(CFG_VALGRIND_COMPILE) stage2/rustc$(X) \\\n+                $(CFG_RUSTC_FLAGS) -L stage2)\n+STAGE3 := $(Q)$(call CFG_RUN_TARG,stage2, \\\n+                $(CFG_VALGRIND_COMPILE) stage3/rustc$(X) \\\n                 $(CFG_RUSTC_FLAGS) -L stage3)\n \n # \"Source\" files we generate in builddir along the way.\n@@ -146,9 +148,9 @@ COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/comp/, \\\n ######################################################################\n \n LREQ := rt/$(CFG_RUNTIME) rustllvm/$(CFG_RUSTLLVM)\n-SREQ0 := stage0/rustc$(X) $(LREQ) rt/main.o stage1/glue.o stage1/$(CFG_STDLIB)\n-SREQ1 := stage1/rustc$(X) $(LREQ) rt/main.o stage2/glue.o stage2/$(CFG_STDLIB)\n-SREQ2 := stage2/rustc$(X) $(LREQ) rt/main.o stage3/glue.o stage3/$(CFG_STDLIB)\n+SREQ0 := stage0/rustc$(X) $(LREQ) rt/main.o stage0/glue.o stage0/$(CFG_STDLIB)\n+SREQ1 := stage1/rustc$(X) $(LREQ) rt/main.o stage1/glue.o stage1/$(CFG_STDLIB)\n+SREQ2 := stage2/rustc$(X) $(LREQ) rt/main.o stage2/glue.o stage2/$(CFG_STDLIB)\n \n \n ######################################################################"}, {"sha": "566d9b0d657a953c95c1f85d88d268f6579118f8", "filename": "mk/fuzzer.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32895ad99013b088b7dee51d173e177536103673/mk%2Ffuzzer.mk", "raw_url": "https://github.com/rust-lang/rust/raw/32895ad99013b088b7dee51d173e177536103673/mk%2Ffuzzer.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ffuzzer.mk?ref=32895ad99013b088b7dee51d173e177536103673", "patch": "@@ -5,8 +5,7 @@\n FUZZER_CRATE := $(S)src/fuzzer/fuzzer.rc\n FUZZER_INPUTS := $(wildcard $(addprefix $(S)src/fuzzer/, *.rs))\n \n-stage2/fuzzer.o: $(FUZZER_CRATE) $(FUZZER_INPUTS) $(SREQ1) \\\n-\t\tstage2/$(CFG_RUSTCLIB)\n+stage2/fuzzer.o: $(FUZZER_CRATE) $(FUZZER_INPUTS) $(SREQ1)\n \t@$(call E, compile: $@)\n \t$(STAGE1) -c -o $@ $<\n "}, {"sha": "a481058f48106d3586f8234394274203bbc0662f", "filename": "mk/stage1.mk", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/32895ad99013b088b7dee51d173e177536103673/mk%2Fstage1.mk", "raw_url": "https://github.com/rust-lang/rust/raw/32895ad99013b088b7dee51d173e177536103673/mk%2Fstage1.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage1.mk?ref=32895ad99013b088b7dee51d173e177536103673", "patch": "@@ -1,31 +1,13 @@\n-stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage0/rustc$(X) stage0/$(CFG_STDLIB) stage0/intrinsics.bc \\\n+stage1/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+              stage1/rustc$(X) stage0/$(CFG_STDLIB) stage1/intrinsics.bc \\\n               $(LREQ) $(MKFILES)\n-\t@$(call E, compile: $@)\n-\t$(STAGE0) -c --shared -o $@ $<\n+\t@$(call E, compile_and_link: $@)\n+\t$(STAGE1)  --shared -o $@ $<\n \n-stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n-\t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage1/glue.o $(CFG_GCCISH_LINK_FLAGS) \\\n-        -o $@ $< -Lstage1 -Lrt -lrustrt\n-\n-stage1/librustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ0)\n-\t@$(call E, compile: $@)\n-\t$(STAGE0) -c --shared -o $@ $<\n-\n-stage1/$(CFG_RUSTCLIB): stage1/librustc.o stage1/glue.o\n-\t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage1/glue.o $(CFG_GCCISH_LINK_FLAGS) \\\n-\t-o $@ $< -Lstage1 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd\n-\n-stage1/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ0)\n-\t@$(call E, compile: $@)\n-\t$(STAGE0) -c -o $@ $<\n-\n-stage1/glue.o: stage0/rustc$(X) stage0/$(CFG_STDLIB) stage0/intrinsics.bc \\\n+stage1/glue.o: stage1/rustc$(X) stage0/$(CFG_STDLIB) stage0/intrinsics.bc \\\n                $(LREQ) $(MKFILES)\n \t@$(call E, generate: $@)\n-\t$(STAGE0) -c -o $@ --glue\n+\t$(STAGE1) -c -o $@ --glue\n \n stage1/intrinsics.bc:\t$(INTRINSICS_BC)\n \t@$(call E, cp: $@)\n@@ -41,11 +23,6 @@ stage1/%.o: stage1/%.s\n \t@$(call E, assemble [gcc]: $@)\n \t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n \n-stage1/%$(X): stage1/%.o  $(SREQ0)\n-\t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage1/glue.o -o $@ $< \\\n-      -Lstage1 -Lrustllvm -Lrt rt/main.o -lrustrt -lrustllvm -lstd -lm\n-\t@# dsymutil sometimes fails or prints a warning, but the\n-\t@# program still runs.  Since it simplifies debugging other\n-\t@# programs, I\\'ll live with the noise.\n-\t-$(Q)$(CFG_DSYMUTIL) $@\n+stage1/%$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ0)\n+\t@$(call E, compile_and_link: $@)\n+\t$(STAGE0) -o $@ $<"}, {"sha": "20443142067bfb6978bdda5472188a40ce61ce56", "filename": "mk/stage2.mk", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/32895ad99013b088b7dee51d173e177536103673/mk%2Fstage2.mk", "raw_url": "https://github.com/rust-lang/rust/raw/32895ad99013b088b7dee51d173e177536103673/mk%2Fstage2.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage2.mk?ref=32895ad99013b088b7dee51d173e177536103673", "patch": "@@ -1,31 +1,13 @@\n-stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage1/rustc$(X) stage1/$(CFG_STDLIB) stage1/intrinsics.bc \\\n+stage2/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+              stage2/rustc$(X) stage1/$(CFG_STDLIB) stage2/intrinsics.bc \\\n               $(LREQ) $(MKFILES)\n-\t@$(call E, compile: $@)\n-\t$(STAGE1) -c --shared -o $@ $<\n+\t@$(call E, compile_and_link: $@)\n+\t$(STAGE2)  --shared -o $@ $<\n \n-stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n-\t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage2/glue.o $(CFG_GCCISH_LINK_FLAGS) -o \\\n-        $@ $< -Lstage2 -Lrt -lrustrt\n-\n-stage2/librustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n-\t@$(call E, compile: $@)\n-\t$(STAGE1) -c --shared -o $@ $<\n-\n-stage2/$(CFG_RUSTCLIB): stage2/librustc.o stage2/glue.o\n-\t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage2/glue.o $(CFG_GCCISH_LINK_FLAGS) \\\n-\t-o $@ $< -Lstage2 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd\n-\n-stage2/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n-\t@$(call E, compile: $@)\n-\t$(STAGE1) -c -o $@ $<\n-\n-stage2/glue.o: stage1/rustc$(X) stage1/$(CFG_STDLIB) stage1/intrinsics.bc \\\n+stage2/glue.o: stage2/rustc$(X) stage1/$(CFG_STDLIB) stage1/intrinsics.bc \\\n                rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE1) -c -o $@ --glue\n+\t$(STAGE2) -c -o $@ --glue\n \n stage2/intrinsics.bc:\t$(INTRINSICS_BC)\n \t@$(call E, cp: $@)\n@@ -41,11 +23,6 @@ stage2/%.o: stage2/%.s\n \t@$(call E, assemble [gcc]: $@)\n \t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n \n-stage2/%$(X): stage2/%.o  $(SREQ1)\n-\t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage2/glue.o -o $@ $< \\\n-      -Lstage2 -Lrustllvm -Lrt rt/main.o -lrustrt -lrustllvm -lstd -lm\n-\t@# dsymutil sometimes fails or prints a warning, but the\n-\t@# program still runs.  Since it simplifies debugging other\n-\t@# programs, I\\'ll live with the noise.\n-\t-$(Q)$(CFG_DSYMUTIL) $@\n+stage2/%$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n+\t@$(call E, compile_and_link: $@)\n+\t$(STAGE1) -o $@ $<"}, {"sha": "9f7c819ae11c64d86aebb5be93fe53504fd7e7e6", "filename": "mk/stage3.mk", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/32895ad99013b088b7dee51d173e177536103673/mk%2Fstage3.mk", "raw_url": "https://github.com/rust-lang/rust/raw/32895ad99013b088b7dee51d173e177536103673/mk%2Fstage3.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage3.mk?ref=32895ad99013b088b7dee51d173e177536103673", "patch": "@@ -1,22 +1,13 @@\n stage3/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage2/rustc$(X) stage2/$(CFG_STDLIB) stage2/intrinsics.bc \\\n+              stage3/rustc$(X) stage2/$(CFG_STDLIB) stage3/intrinsics.bc \\\n               $(LREQ) $(MKFILES)\n \t@$(call E, compile_and_link: $@)\n-\t$(STAGE2)  --shared -o $@ $<\n+\t$(STAGE3)  --shared -o $@ $<\n \n-stage3/librustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ2)\n-\t@$(call E, compile: $@)\n-\t$(STAGE2) -c --shared -o $@ $<\n-\n-stage3/$(CFG_RUSTCLIB): stage2/librustc.o stage2/glue.o\n-\t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage2/glue.o $(CFG_GCCISH_LINK_FLAGS) \\\n-\t-o $@ $< -Lstage2 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd\n-\n-stage3/glue.o: stage2/rustc$(X) stage2/$(CFG_STDLIB) stage2/intrinsics.bc \\\n+stage3/glue.o: stage3/rustc$(X) stage2/$(CFG_STDLIB) stage3/intrinsics.bc \\\n                rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE2) -c -o $@ --glue\n+\t$(STAGE3) -c -o $@ --glue\n \n stage3/intrinsics.bc:\t$(INTRINSICS_BC)\n \t@$(call E, cp: $@)"}]}