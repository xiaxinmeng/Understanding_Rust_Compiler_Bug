{"sha": "2797b2a5ca9c3cc38ff904c409e37ea19c42aa10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTdiMmE1Y2E5YzNjYzM4ZmY5MDRjNDA5ZTM3ZWExOWM0MmFhMTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-30T13:00:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-02T09:31:25Z"}, "message": "remove register_reads\n\nThe reads will occur naturally as the HIR/MIR is fetched from the\ntracked tables, and this winds up adding reads to the hir of foreign\ndef-ids somehow.", "tree": {"sha": "9991a5d158ab228cad6f4fd3c7edf3b73e169e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9991a5d158ab228cad6f4fd3c7edf3b73e169e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2797b2a5ca9c3cc38ff904c409e37ea19c42aa10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2797b2a5ca9c3cc38ff904c409e37ea19c42aa10", "html_url": "https://github.com/rust-lang/rust/commit/2797b2a5ca9c3cc38ff904c409e37ea19c42aa10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2797b2a5ca9c3cc38ff904c409e37ea19c42aa10/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "html_url": "https://github.com/rust-lang/rust/commit/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e"}], "stats": {"total": 42, "additions": 0, "deletions": 42}, "files": [{"sha": "0ee4c031adccae61e11af4ed9fc313c6dc3e8ef4", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2797b2a5ca9c3cc38ff904c409e37ea19c42aa10/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2797b2a5ca9c3cc38ff904c409e37ea19c42aa10/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=2797b2a5ca9c3cc38ff904c409e37ea19c42aa10", "patch": "@@ -83,8 +83,6 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         // that the incoming edges to a particular fn are from a\n         // particular set.\n \n-        self.register_reads(ccx);\n-\n         match *self {\n             TransItem::Static(node_id) => {\n                 let def_id = ccx.tcx().map.local_def_id(node_id);\n@@ -120,46 +118,6 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                ccx.codegen_unit().name());\n     }\n \n-    /// If necessary, creates a subtask for trans'ing a particular item and registers reads on\n-    /// `TypeckItemBody` and `Hir`.\n-    fn register_reads(&self, ccx: &CrateContext<'a, 'tcx>) {\n-        let tcx = ccx.tcx();\n-        let def_id = match *self {\n-            TransItem::Static(node_id) => {\n-                tcx.map.local_def_id(node_id)\n-            }\n-            TransItem::Fn(instance) => {\n-                if let Some(node) = tcx.map.as_local_node_id(instance.def) {\n-                    if let hir_map::Node::NodeItem(_) = tcx.map.get(node) {\n-                        // This already is a \"real\" item\n-                        instance.def\n-                    } else {\n-                        // Get the enclosing item and register a read on it\n-                        tcx.map.get_parent_did(node)\n-                    }\n-                } else {\n-                    // Translating an inlined item from another crate? Don't track anything.\n-                    return;\n-                }\n-            }\n-            TransItem::DropGlue(_) => {\n-                // Nothing to track for drop glue\n-                return;\n-            }\n-        };\n-\n-        tcx.dep_graph.with_task(DepNode::TransCrateItem(def_id), || {\n-            tcx.dep_graph.read(DepNode::Hir(def_id));\n-\n-            // We are going to be accessing various tables\n-            // generated by TypeckItemBody; we also assume\n-            // that the body passes type check. These tables\n-            // are not individually tracked, so just register\n-            // a read here.\n-            tcx.dep_graph.read(DepNode::TypeckItemBody(def_id));\n-        });\n-    }\n-\n     pub fn predefine(&self,\n                      ccx: &CrateContext<'a, 'tcx>,\n                      linkage: llvm::Linkage) {"}]}