{"sha": "85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZGYyMDdlY2MzYTdiOGI3MTUwZTJiNjVjNjdlZWMzYTIzYjdjODE=", "commit": {"author": {"name": "Victor Ding", "email": "victording@google.com", "date": "2019-12-02T09:53:01Z"}, "committer": {"name": "Victor Ding", "email": "victording@google.com", "date": "2019-12-02T10:04:44Z"}, "message": "Use Module::print() instead of a PrintModulePass\n\nllvm::Module has a print() method. It is unnecessary to create a\npass just for the purpose of printing LLVM IR.", "tree": {"sha": "29213a1e7182bfb262566a83af5ff2e8c4202b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29213a1e7182bfb262566a83af5ff2e8c4202b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "html_url": "https://github.com/rust-lang/rust/commit/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81/comments", "author": null, "committer": null, "parents": [{"sha": "f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c81e0a986e4285d3d0fd781a1bd475753eb12c", "html_url": "https://github.com/rust-lang/rust/commit/f5c81e0a986e4285d3d0fd781a1bd475753eb12c"}], "stats": {"total": 59, "additions": 9, "deletions": 50}, "files": [{"sha": "187063b866ac6e68ddcadc7cefb9ea32af3eea5a", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "patch": "@@ -587,14 +587,11 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                     cursor.position() as size_t\n                 }\n \n-                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    let result =\n-                        llvm::LLVMRustPrintModule(cpm, llmod, out_c.as_ptr(), demangle_callback);\n-                    llvm::LLVMDisposePassManager(cpm);\n-                    result.into_result().map_err(|()| {\n-                        let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n-                        llvm_err(diag_handler, &msg)\n-                    })\n+                let result =\n+                    llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n+                result.into_result().map_err(|()| {\n+                    let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n+                    llvm_err(diag_handler, &msg)\n                 })?;\n             }\n "}, {"sha": "762c821de4d519e465977415b9b6b83a16e4994d", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "patch": "@@ -1726,8 +1726,7 @@ extern \"C\" {\n                                    Output: *const c_char,\n                                    FileType: FileType)\n                                    -> LLVMRustResult;\n-    pub fn LLVMRustPrintModule(PM: &PassManager<'a>,\n-                               M: &'a Module,\n+    pub fn LLVMRustPrintModule(M: &'a Module,\n                                Output: *const c_char,\n                                Demangle: extern fn(*const c_char,\n                                                    size_t,"}, {"sha": "40823422c2710600c179d7add9977028f2b89204", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/85df207ecc3a7b8b7150e2b65c67eec3a23b7c81/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=85df207ecc3a7b8b7150e2b65c67eec3a23b7c81", "patch": "@@ -660,46 +660,11 @@ class RustAssemblyAnnotationWriter : public AssemblyAnnotationWriter {\n   }\n };\n \n-class RustPrintModulePass : public ModulePass {\n-  raw_ostream* OS;\n-  DemangleFn Demangle;\n-public:\n-  static char ID;\n-  RustPrintModulePass() : ModulePass(ID), OS(nullptr), Demangle(nullptr) {}\n-  RustPrintModulePass(raw_ostream &OS, DemangleFn Demangle)\n-      : ModulePass(ID), OS(&OS), Demangle(Demangle) {}\n-\n-  bool runOnModule(Module &M) override {\n-    RustAssemblyAnnotationWriter AW(Demangle);\n-\n-    M.print(*OS, &AW, false);\n-\n-    return false;\n-  }\n-\n-  void getAnalysisUsage(AnalysisUsage &AU) const override {\n-    AU.setPreservesAll();\n-  }\n-\n-  static StringRef name() { return \"RustPrintModulePass\"; }\n-};\n-\n } // namespace\n \n-namespace llvm {\n-  void initializeRustPrintModulePassPass(PassRegistry&);\n-}\n-\n-char RustPrintModulePass::ID = 0;\n-INITIALIZE_PASS(RustPrintModulePass, \"print-rust-module\",\n-                \"Print rust module to stderr\", false, false)\n-\n extern \"C\" LLVMRustResult\n-LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n-                    const char *Path, DemangleFn Demangle) {\n-  llvm::legacy::PassManager *PM = unwrap<llvm::legacy::PassManager>(PMR);\n+LLVMRustPrintModule(LLVMModuleRef M, const char *Path, DemangleFn Demangle) {\n   std::string ErrorInfo;\n-\n   std::error_code EC;\n   raw_fd_ostream OS(Path, EC, sys::fs::F_None);\n   if (EC)\n@@ -709,11 +674,9 @@ LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n     return LLVMRustResult::Failure;\n   }\n \n+  RustAssemblyAnnotationWriter AAW(Demangle);\n   formatted_raw_ostream FOS(OS);\n-\n-  PM->add(new RustPrintModulePass(FOS, Demangle));\n-\n-  PM->run(*unwrap(M));\n+  unwrap(M)->print(FOS, &AAW);\n \n   return LLVMRustResult::Success;\n }"}]}