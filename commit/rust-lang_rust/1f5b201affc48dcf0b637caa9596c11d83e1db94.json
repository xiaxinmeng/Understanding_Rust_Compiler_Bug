{"sha": "1f5b201affc48dcf0b637caa9596c11d83e1db94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNWIyMDFhZmZjNDhkY2YwYjYzN2NhYTk1OTZjMTFkODNlMWRiOTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-10T20:29:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-14T20:26:39Z"}, "message": "Remove NOTE/HELP annotations from UI tests", "tree": {"sha": "eb7044df493bdd2882ee0051003e796202e6f5b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb7044df493bdd2882ee0051003e796202e6f5b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5b201affc48dcf0b637caa9596c11d83e1db94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5b201affc48dcf0b637caa9596c11d83e1db94", "html_url": "https://github.com/rust-lang/rust/commit/1f5b201affc48dcf0b637caa9596c11d83e1db94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5b201affc48dcf0b637caa9596c11d83e1db94/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "html_url": "https://github.com/rust-lang/rust/commit/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576"}], "stats": {"total": 4570, "additions": 1756, "deletions": 2814}, "files": [{"sha": "48918b996ef5989aa9e9b67d10a805295fea5d26", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -39,12 +39,7 @@ impl Bar for usize {\n fn make_foo() {\n     let x = Box::new(5usize) as Box<Foo>;\n     //~^ ERROR E0038\n-    //~| NOTE method `foo` has a non-standard `self` type\n-    //~| NOTE the trait `Foo` cannot be made into an object\n     //~| ERROR E0038\n-    //~| NOTE method `foo` has a non-standard `self` type\n-    //~| NOTE the trait `Foo` cannot be made into an object\n-    //~| NOTE requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<Foo>>`\n }\n \n fn make_bar() {"}, {"sha": "49084e01a15dbb42d7583ac8e2ad6c21cdd6ebae", "filename": "src/test/ui/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -23,12 +23,11 @@ fn foo(x: isize) { println!(\"{}\", x); }\n           target_arch = \"aarch64\"))]\n pub fn main() {\n     let x: isize;\n-    x = 1; //~ NOTE first assignment\n+    x = 1;\n     foo(x);\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n         //~^ ERROR cannot assign twice to immutable variable `x`\n-        //~| NOTE cannot assign twice to immutable\n     }\n     foo(x);\n }"}, {"sha": "cf5486fec5f93d1fe4fa05d59fa7979c64ae84f2", "filename": "src/test/ui/asm-out-assign-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/asm-out-assign-imm.rs:29:9\n    |\n-26 |     x = 1; //~ NOTE first assignment\n+26 |     x = 1;\n    |     ----- first assignment to `x`\n ...\n 29 |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));"}, {"sha": "77653b27fb53874cb0268f38d8684450a9b31eb2", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,12 +15,8 @@ trait Foo {\n \n \n impl<'a> Foo for &'a () {\n-//~^ NOTE the lifetime 'a as defined\n     const NAME: &'a str = \"unit\";\n     //~^ ERROR mismatched types [E0308]\n-    //~| NOTE lifetime mismatch\n-    //~| NOTE expected type `&'static str`\n-    //~| NOTE ...does not necessarily outlive the static lifetime\n }\n \n fn main() {}"}, {"sha": "a7aee9b19f1a1e7c0f80e8c9bb739000fb585554", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n-  --> $DIR/associated-const-impl-wrong-lifetime.rs:19:5\n+  --> $DIR/associated-const-impl-wrong-lifetime.rs:18:5\n    |\n-19 |     const NAME: &'a str = \"unit\";\n+18 |     const NAME: &'a str = \"unit\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&'static str`\n@@ -10,12 +10,9 @@ note: the lifetime 'a as defined on the impl at 17:1...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:17:1\n    |\n 17 | / impl<'a> Foo for &'a () {\n-18 | | //~^ NOTE the lifetime 'a as defined\n-19 | |     const NAME: &'a str = \"unit\";\n-20 | |     //~^ ERROR mismatched types [E0308]\n-...  |\n-23 | |     //~| NOTE ...does not necessarily outlive the static lifetime\n-24 | | }\n+18 | |     const NAME: &'a str = \"unit\";\n+19 | |     //~^ ERROR mismatched types [E0308]\n+20 | | }\n    | |_^\n    = note: ...does not necessarily outlive the static lifetime\n "}, {"sha": "240dfd160974b06e55ec64b9f00670a9acb3b088", "filename": "src/test/ui/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,15 +10,14 @@\n \n \n trait Foo {\n-    const BAR: u32; //~ NOTE type in trait\n+    const BAR: u32;\n }\n \n struct SignedBar;\n \n impl Foo for SignedBar {\n     const BAR: i32 = -1;\n     //~^ ERROR implemented const `BAR` has an incompatible type for trait [E0326]\n-    //~| NOTE expected u32, found i32\n }\n \n fn main() {}"}, {"sha": "a2afe905cb505525fcde4c0dd8fada6e0e1a42a8", "filename": "src/test/ui/associated-const-impl-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0326]: implemented const `BAR` has an incompatible type for trait\n   --> $DIR/associated-const-impl-wrong-type.rs:19:16\n    |\n-13 |     const BAR: u32; //~ NOTE type in trait\n+13 |     const BAR: u32;\n    |                --- type in trait\n ...\n 19 |     const BAR: i32 = -1;"}, {"sha": "5536566c61992607bdeb9f4a566398501d27f842", "filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,18 +13,12 @@\n \n pub trait Vehicle {\n     type Color;\n-    //~^ NOTE ambiguous `Color` from `Vehicle`\n-    //~| NOTE ambiguous `Color` from `Vehicle`\n-    //~| NOTE ambiguous `Color` from `Vehicle`\n \n     fn go(&self) {  }\n }\n \n pub trait Box {\n     type Color;\n-    //~^ NOTE ambiguous `Color` from `Box`\n-    //~| NOTE ambiguous `Color` from `Box`\n-    //~| NOTE ambiguous `Color` from `Box`\n     //\n     fn mail(&self) {  }\n }\n@@ -34,19 +28,15 @@ pub trait BoxCar : Box + Vehicle {\n \n fn dent<C:BoxCar>(c: C, color: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n-    //~| NOTE ambiguous associated type `Color`\n }\n \n fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n     //~| ERROR the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n-    //~| NOTE ambiguous associated type `Color`\n-    //~| NOTE missing associated type `Color` value\n }\n \n fn paint<C:BoxCar>(c: C, d: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n-    //~| NOTE ambiguous associated type `Color`\n }\n \n pub fn main() { }"}, {"sha": "6215c1dc089d26b9bc62d03baf4c988cfa2527e4", "filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,43 +1,43 @@\n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:35:32\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:29:32\n    |\n 15 |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n-24 |     type Color;\n+21 |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-35 | fn dent<C:BoxCar>(c: C, color: C::Color) {\n+29 | fn dent<C:BoxCar>(c: C, color: C::Color) {\n    |                                ^^^^^^^^ ambiguous associated type `Color`\n \n error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:40:33\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:33:33\n    |\n 15 |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n-24 |     type Color;\n+21 |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-40 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+33 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n    |                                 ^^^^^^^^^^^ ambiguous associated type `Color`\n \n error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:40:26\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:33:26\n    |\n-40 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+33 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n    |                          ^^^^^^^^^^^^^^^^^^^ missing associated type `Color` value\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:47:29\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:38:29\n    |\n 15 |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n-24 |     type Color;\n+21 |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-47 | fn paint<C:BoxCar>(c: C, d: C::Color) {\n+38 | fn paint<C:BoxCar>(c: C, d: C::Color) {\n    |                             ^^^^^^^^ ambiguous associated type `Color`\n \n error: aborting due to 4 previous errors"}, {"sha": "75b60aa8d10b7b392033577ec1c78cb197b1969f", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -32,5 +32,4 @@ fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n     //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n-    //~| NOTE the trait `Add<A>` is not implemented for `()`\n }"}, {"sha": "becbc27138b770e700d524844357252c7c017c95", "filename": "src/test/ui/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,21 +15,15 @@ trait Get {\n \n fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n //~^ ERROR ambiguous associated type\n-//~| NOTE ambiguous associated type\n-//~| NOTE specify the type using the syntax `<Type as Get>::Value`\n \n trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n-    //~| NOTE ambiguous associated type\n-    //~| NOTE specify the type using the syntax `<Type as Grab>::Value`\n }\n \n type X = std::ops::Deref::Target;\n //~^ ERROR ambiguous associated type\n-//~| NOTE ambiguous associated type\n-//~| NOTE specify the type using the syntax `<Type as std::ops::Deref>::Target`\n \n fn main() {\n }"}, {"sha": "b0196234bda04a756d883912043c624f5307b16c", "filename": "src/test/ui/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,17 +7,17 @@ error[E0223]: ambiguous associated type\n    = note: specify the type using the syntax `<Type as Get>::Value`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/associated-types-in-ambiguous-context.rs:29:10\n+  --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n    |\n-29 | type X = std::ops::Deref::Target;\n+25 | type X = std::ops::Deref::Target;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<Type as std::ops::Deref>::Target`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/associated-types-in-ambiguous-context.rs:23:23\n+  --> $DIR/associated-types-in-ambiguous-context.rs:21:23\n    |\n-23 |     fn grab(&self) -> Grab::Value;\n+21 |     fn grab(&self) -> Grab::Value;\n    |                       ^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<Type as Grab>::Value`"}, {"sha": "82f5c49eeb7ae520d81ccd85cdce3e14e01794df", "filename": "src/test/ui/augmented-assignments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,7 +22,6 @@ fn main() {\n     let mut x = Int(1);\n     x   //~ error: use of moved value: `x`\n     //~^ value used here after move\n-    //~| note: move occurs because `x` has type `Int`\n     +=\n     x;  //~ value moved here\n "}, {"sha": "0367270d16676a7c9fc2ee0fc7b82bfee0b9a0e7", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,10 @@\n error[E0596]: cannot borrow immutable local variable `y` as mutable\n-  --> $DIR/augmented-assignments.rs:31:5\n+  --> $DIR/augmented-assignments.rs:30:5\n    |\n-29 |     let y = Int(2);\n+28 |     let y = Int(2);\n    |         - consider changing this to `mut y`\n-30 |     //~^ consider changing this to `mut y`\n-31 |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+29 |     //~^ consider changing this to `mut y`\n+30 |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `x`\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `x`\n 23 |     x   //~ error: use of moved value: `x`\n    |     ^ value used here after move\n ...\n-27 |     x;  //~ value moved here\n+26 |     x;  //~ value moved here\n    |     - value moved here\n    |\n    = note: move occurs because `x` has type `Int`, which does not implement the `Copy` trait"}, {"sha": "8b31be911b89a53b696405cf29de687fd296720e", "filename": "src/test/ui/binary-op-on-double-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,8 +13,6 @@ fn main() {\n     let vr = v.iter().filter(|x| {\n         x % 2 == 0\n         //~^ ERROR binary operation `%` cannot be applied to type `&&{integer}`\n-        //~| NOTE this is a reference to a type that `%` can be applied to\n-        //~| NOTE an implementation of `std::ops::Rem` might be missing for `&&{integer}`\n     });\n     println!(\"{:?}\", vr);\n }"}, {"sha": "38f9a552e1b04c4026b154a80713bfdb04752689", "filename": "src/test/ui/blind-item-item-shadow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod foo { pub mod foo {  } } //~ NOTE previous definition of the module `foo` here\n+mod foo { pub mod foo {  } }\n \n use foo::foo;\n //~^ ERROR the name `foo` is defined multiple times\n //~| `foo` reimported here\n-//~| NOTE `foo` must be defined only once in the type namespace of this module\n \n fn main() {}"}, {"sha": "b9f3e742c66f477ed284a0df3a3da0b594ced222", "filename": "src/test/ui/blind-item-item-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0255]: the name `foo` is defined multiple times\n   --> $DIR/blind-item-item-shadow.rs:13:5\n    |\n-11 | mod foo { pub mod foo {  } } //~ NOTE previous definition of the module `foo` here\n+11 | mod foo { pub mod foo {  } }\n    | ---------------------------- previous definition of the module `foo` here\n 12 | \n 13 | use foo::foo;"}, {"sha": "0d4deb3c8041b2a72cdce0e5b06ea815e063a8a6", "filename": "src/test/ui/block-result/consider-removing-last-semi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,12 +10,12 @@\n \n fn f() -> String {  //~ ERROR mismatched types\n     0u8;\n-    \"bla\".to_string();  //~ HELP consider removing this semicolon\n+    \"bla\".to_string();\n }\n \n fn g() -> String {  //~ ERROR mismatched types\n     \"this won't work\".to_string();\n-    \"removeme\".to_string(); //~ HELP consider removing this semicolon\n+    \"removeme\".to_string();\n }\n \n fn main() {}"}, {"sha": "453f3879f4ba25e5a4043f8708f511a138c5aaf2", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n 11 |   fn f() -> String {  //~ ERROR mismatched types\n    |  __________________^\n 12 | |     0u8;\n-13 | |     \"bla\".to_string();  //~ HELP consider removing this semicolon\n+13 | |     \"bla\".to_string();\n    | |                      - help: consider removing this semicolon\n 14 | | }\n    | |_^ expected struct `std::string::String`, found ()\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n 16 |   fn g() -> String {  //~ ERROR mismatched types\n    |  __________________^\n 17 | |     \"this won't work\".to_string();\n-18 | |     \"removeme\".to_string(); //~ HELP consider removing this semicolon\n+18 | |     \"removeme\".to_string();\n    | |                           - help: consider removing this semicolon\n 19 | | }\n    | |_^ expected struct `std::string::String`, found ()"}, {"sha": "bc3936582aae9011ebcf34628b6d7ad6043e70f0", "filename": "src/test/ui/block-result/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,7 +11,7 @@\n fn blah() -> i32 { //~ ERROR mismatched types\n     1\n \n-    ; //~ HELP consider removing this semicolon\n+    ;\n }\n \n fn main() { }"}, {"sha": "946d18048944f0749a554e08e7b6bede2601d56e", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |  __________________^\n 12 | |     1\n 13 | |\n-14 | |     ; //~ HELP consider removing this semicolon\n+14 | |     ;\n    | |     - help: consider removing this semicolon\n 15 | | }\n    | |_^ expected i32, found ()"}, {"sha": "36520301f552dd605cf708dd130aebf71845e453", "filename": "src/test/ui/block-result/issue-13428.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,12 +15,12 @@ fn foo() -> String {  //~ ERROR mismatched types\n             \"world\")\n     // Put the trailing semicolon on its own line to test that the\n     // note message gets the offending semicolon exactly\n-    ;   //~ HELP consider removing this semicolon\n+    ;\n }\n \n fn bar() -> String {  //~ ERROR mismatched types\n     \"foobar\".to_string()\n-    ;   //~ HELP consider removing this semicolon\n+    ;\n }\n \n pub fn main() {}"}, {"sha": "22bbb2aadf61c790be86c0b056ca4ccaf2a7cf63", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error[E0308]: mismatched types\n 15 | |             \"world\")\n 16 | |     // Put the trailing semicolon on its own line to test that the\n 17 | |     // note message gets the offending semicolon exactly\n-18 | |     ;   //~ HELP consider removing this semicolon\n+18 | |     ;\n    | |     - help: consider removing this semicolon\n 19 | | }\n    | |_^ expected struct `std::string::String`, found ()\n@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n 21 |   fn bar() -> String {  //~ ERROR mismatched types\n    |  ____________________^\n 22 | |     \"foobar\".to_string()\n-23 | |     ;   //~ HELP consider removing this semicolon\n+23 | |     ;\n    | |     - help: consider removing this semicolon\n 24 | | }\n    | |_^ expected struct `std::string::String`, found ()"}, {"sha": "46536cc85750c67bbb980aebfcac320aedc97608", "filename": "src/test/ui/bogus-tag.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,14 +10,12 @@\n \n \n enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n-//~^ NOTE variant `hsl` not found here\n \n fn main() {\n     let red: color = color::rgb(255, 0, 0);\n     match red {\n       color::rgb(r, g, b) => { println!(\"rgb\"); }\n       color::hsl(h, s, l) => { println!(\"hsl\"); }\n       //~^ ERROR no variant\n-      //~| NOTE variant not found in `color`\n     }\n }"}, {"sha": "49dedcd07427959893d3c0d1cd11cde4547af3aa", "filename": "src/test/ui/bogus-tag.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,10 @@\n error[E0599]: no variant named `hsl` found for type `color` in the current scope\n-  --> $DIR/bogus-tag.rs:19:7\n+  --> $DIR/bogus-tag.rs:18:7\n    |\n 12 | enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n    | ---------- variant `hsl` not found here\n ...\n-19 |       color::hsl(h, s, l) => { println!(\"hsl\"); }\n+18 |       color::hsl(h, s, l) => { println!(\"hsl\"); }\n    |       ^^^^^^^^^^^^^^^^^^^ variant not found in `color`\n \n error: aborting due to previous error"}, {"sha": "75bf6bce04b396caf622938672dba1c5031872d9", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -60,7 +60,6 @@ fn borrow_after_move() {\n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n-    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n     //~| move out of\n@@ -69,15 +68,12 @@ fn move_after_borrow() {\n fn copy_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n-    //~^ NOTE use of borrowed `a.x`\n }\n \n fn move_after_mut_borrow() {\n     let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n-    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n     //~| move out of\n@@ -86,27 +82,22 @@ fn move_after_mut_borrow() {\n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    //~^ NOTE mutable borrow occurs here (via `a.x`)\n     let _y = &a.y; //~ ERROR cannot borrow\n     //~^ immutable borrow occurs here (via `a.y`)\n }\n-//~^ NOTE mutable borrow ends here\n \n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n-    //~^ NOTE immutable borrow occurs here (via `a.x`)\n     let _y = &mut a.y; //~ ERROR cannot borrow\n     //~^ mutable borrow occurs here (via `a.y`)\n }\n-//~^ NOTE immutable borrow ends here\n \n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -115,7 +106,6 @@ fn move_after_move_nested() {\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -124,7 +114,6 @@ fn borrow_after_move_nested() {\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = &a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -140,15 +129,12 @@ fn move_after_borrow_nested() {\n fn copy_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n-    //~^ NOTE use of borrowed `a.x.x`\n }\n \n fn move_after_mut_borrow_nested() {\n     let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n-    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n     //~| move out of\n@@ -161,7 +147,6 @@ fn borrow_after_mut_borrow_nested() {\n     let _y = &a.y; //~ ERROR cannot borrow\n     //~^ immutable borrow occurs here\n }\n-//~^ NOTE mutable borrow ends here\n \n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n@@ -170,7 +155,6 @@ fn mut_borrow_after_borrow_nested() {\n     let _y = &mut a.y; //~ ERROR cannot borrow\n     //~^ mutable borrow occurs here\n }\n-//~^ NOTE immutable borrow ends here\n \n fn main() {\n     copy_after_move();"}, {"sha": "88e8490843d3134ea613af090fe164e3bf8eea98", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.stderr", "status": "modified", "additions": 56, "deletions": 63, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -32,138 +32,131 @@ error[E0382]: use of moved value: `a`\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:64:9\n+  --> $DIR/borrowck-box-insensitivity.rs:63:9\n    |\n 62 |     let _x = &a.x;\n    |               --- borrow of `a.x` occurs here\n-63 |     //~^ NOTE borrow of `a.x` occurs here\n-64 |     let _y = a.y;\n+63 |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n error[E0503]: cannot use `a.y` because it was mutably borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:73:9\n+  --> $DIR/borrowck-box-insensitivity.rs:71:9\n    |\n-71 |     let _x = &mut a.x;\n+70 |     let _x = &mut a.x;\n    |                   --- borrow of `a.x` occurs here\n-72 |     //~^ NOTE borrow of `a.x` occurs here\n-73 |     let _y = a.y; //~ ERROR cannot use\n+71 |     let _y = a.y; //~ ERROR cannot use\n    |         ^^ use of borrowed `a.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:81:9\n+  --> $DIR/borrowck-box-insensitivity.rs:77:9\n    |\n-79 |     let _x = &mut a.x;\n+76 |     let _x = &mut a.x;\n    |                   --- borrow of `a.x` occurs here\n-80 |     //~^ NOTE borrow of `a.x` occurs here\n-81 |     let _y = a.y;\n+77 |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also borrowed as mutable (via `a.x`)\n-  --> $DIR/borrowck-box-insensitivity.rs:90:15\n+  --> $DIR/borrowck-box-insensitivity.rs:85:15\n    |\n-88 |     let _x = &mut a.x;\n+84 |     let _x = &mut a.x;\n    |                   --- mutable borrow occurs here (via `a.x`)\n-89 |     //~^ NOTE mutable borrow occurs here (via `a.x`)\n-90 |     let _y = &a.y; //~ ERROR cannot borrow\n+85 |     let _y = &a.y; //~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here (via `a.y`)\n-91 |     //~^ immutable borrow occurs here (via `a.y`)\n-92 | }\n+86 |     //~^ immutable borrow occurs here (via `a.y`)\n+87 | }\n    | - mutable borrow ends here\n \n error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borrowed as immutable (via `a.x`)\n-   --> $DIR/borrowck-box-insensitivity.rs:99:19\n-    |\n-97  |     let _x = &a.x;\n-    |               --- immutable borrow occurs here (via `a.x`)\n-98  |     //~^ NOTE immutable borrow occurs here (via `a.x`)\n-99  |     let _y = &mut a.y; //~ ERROR cannot borrow\n-    |                   ^^^ mutable borrow occurs here (via `a.y`)\n-100 |     //~^ mutable borrow occurs here (via `a.y`)\n-101 | }\n-    | - immutable borrow ends here\n+  --> $DIR/borrowck-box-insensitivity.rs:92:19\n+   |\n+91 |     let _x = &a.x;\n+   |               --- immutable borrow occurs here (via `a.x`)\n+92 |     let _y = &mut a.y; //~ ERROR cannot borrow\n+   |                   ^^^ mutable borrow occurs here (via `a.y`)\n+93 |     //~^ mutable borrow occurs here (via `a.y`)\n+94 | }\n+   | - immutable borrow ends here\n \n error[E0382]: use of collaterally moved value: `a.y`\n-   --> $DIR/borrowck-box-insensitivity.rs:108:9\n+   --> $DIR/borrowck-box-insensitivity.rs:100:9\n     |\n-106 |     let _x = a.x.x;\n+98  |     let _x = a.x.x;\n     |         -- value moved here\n-107 |     //~^ value moved here\n-108 |     let _y = a.y; //~ ERROR use of collaterally moved\n+99  |     //~^ value moved here\n+100 |     let _y = a.y; //~ ERROR use of collaterally moved\n     |         ^^ value used here after move\n     |\n     = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of collaterally moved value: `a.y`\n-   --> $DIR/borrowck-box-insensitivity.rs:117:9\n+   --> $DIR/borrowck-box-insensitivity.rs:108:9\n     |\n-115 |     let _x = a.x.x;\n+106 |     let _x = a.x.x;\n     |         -- value moved here\n-116 |     //~^ value moved here\n-117 |     let _y = a.y; //~ ERROR use of collaterally moved\n+107 |     //~^ value moved here\n+108 |     let _y = a.y; //~ ERROR use of collaterally moved\n     |         ^^ value used here after move\n     |\n     = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of collaterally moved value: `a.y`\n-   --> $DIR/borrowck-box-insensitivity.rs:126:15\n+   --> $DIR/borrowck-box-insensitivity.rs:116:15\n     |\n-124 |     let _x = a.x.x;\n+114 |     let _x = a.x.x;\n     |         -- value moved here\n-125 |     //~^ value moved here\n-126 |     let _y = &a.y; //~ ERROR use of collaterally moved\n+115 |     //~^ value moved here\n+116 |     let _y = &a.y; //~ ERROR use of collaterally moved\n     |               ^^^ value used here after move\n     |\n     = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n-   --> $DIR/borrowck-box-insensitivity.rs:135:9\n+   --> $DIR/borrowck-box-insensitivity.rs:124:9\n     |\n-133 |     let _x = &a.x.x;\n+122 |     let _x = &a.x.x;\n     |               ----- borrow of `a.x.x` occurs here\n-134 |     //~^ borrow of `a.x.x` occurs here\n-135 |     let _y = a.y;\n+123 |     //~^ borrow of `a.x.x` occurs here\n+124 |     let _y = a.y;\n     |         ^^ move out of `a.y` occurs here\n \n error[E0503]: cannot use `a.y` because it was mutably borrowed\n-   --> $DIR/borrowck-box-insensitivity.rs:144:9\n+   --> $DIR/borrowck-box-insensitivity.rs:132:9\n     |\n-142 |     let _x = &mut a.x.x;\n+131 |     let _x = &mut a.x.x;\n     |                   ----- borrow of `a.x.x` occurs here\n-143 |     //~^ NOTE borrow of `a.x.x` occurs here\n-144 |     let _y = a.y; //~ ERROR cannot use\n+132 |     let _y = a.y; //~ ERROR cannot use\n     |         ^^ use of borrowed `a.x.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n-   --> $DIR/borrowck-box-insensitivity.rs:152:9\n+   --> $DIR/borrowck-box-insensitivity.rs:138:9\n     |\n-150 |     let _x = &mut a.x.x;\n+137 |     let _x = &mut a.x.x;\n     |                   ----- borrow of `a.x.x` occurs here\n-151 |     //~^ NOTE borrow of `a.x.x` occurs here\n-152 |     let _y = a.y;\n+138 |     let _y = a.y;\n     |         ^^ move out of `a.y` occurs here\n \n error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed as mutable\n-   --> $DIR/borrowck-box-insensitivity.rs:161:15\n+   --> $DIR/borrowck-box-insensitivity.rs:147:15\n     |\n-159 |     let _x = &mut a.x.x;\n+145 |     let _x = &mut a.x.x;\n     |                   ----- mutable borrow occurs here\n-160 |     //~^ mutable borrow occurs here\n-161 |     let _y = &a.y; //~ ERROR cannot borrow\n+146 |     //~^ mutable borrow occurs here\n+147 |     let _y = &a.y; //~ ERROR cannot borrow\n     |               ^^^ immutable borrow occurs here\n-162 |     //~^ immutable borrow occurs here\n-163 | }\n+148 |     //~^ immutable borrow occurs here\n+149 | }\n     | - mutable borrow ends here\n \n error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as immutable\n-   --> $DIR/borrowck-box-insensitivity.rs:170:19\n+   --> $DIR/borrowck-box-insensitivity.rs:155:19\n     |\n-168 |     let _x = &a.x.x;\n+153 |     let _x = &a.x.x;\n     |               ----- immutable borrow occurs here\n-169 |     //~^ immutable borrow occurs here\n-170 |     let _y = &mut a.y; //~ ERROR cannot borrow\n+154 |     //~^ immutable borrow occurs here\n+155 |     let _y = &mut a.y; //~ ERROR cannot borrow\n     |                   ^^^ mutable borrow occurs here\n-171 |     //~^ mutable borrow occurs here\n-172 | }\n+156 |     //~^ mutable borrow occurs here\n+157 | }\n     | - immutable borrow ends here\n \n error: aborting due to 16 previous errors"}, {"sha": "87e40df7663baacabd7c522321104fc0e7c82a61", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,6 +22,4 @@ fn main() {\n     let mut books = vec![1,2,3];\n     spawn(|| books.push(4));\n     //~^ ERROR E0373\n-    //~| NOTE `books` is borrowed here\n-    //~| NOTE may outlive borrowed value `books`\n }"}, {"sha": "67700be890b1faa8a9c9090fdb0ea8382ddfd854", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -20,8 +20,6 @@ fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n     let mut books = vec![1,2,3];\n     Box::new(|| books.push(4))\n     //~^ ERROR E0373\n-    //~| NOTE `books` is borrowed here\n-    //~| NOTE may outlive borrowed value `books`\n }\n \n fn main() { }"}, {"sha": "16b0e8638de3916bb720e9e8ebb5f3a751d42cdd", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,9 +11,8 @@\n // check that borrowck looks inside consts/statics\n \n static FN : &'static (Fn() -> (Box<Fn()->Box<i32>>) + Sync) = &|| {\n-    let x = Box::new(0); //~ NOTE captured outer variable\n+    let x = Box::new(0);\n     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n-    //~^ NOTE cannot move out of captured outer variable\n };\n \n fn main() {"}, {"sha": "6e47c46cdec946a9dfdde6163fa3e9c50071cc32", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n-14 |     let x = Box::new(0); //~ NOTE captured outer variable\n+14 |     let x = Box::new(0);\n    |         - captured outer variable\n 15 |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured outer variable in an `Fn` closure"}, {"sha": "e0491159a687ebf24b50ff350378d0fdbc7095f3", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -20,9 +20,9 @@ fn blah() {\n     let f = &Foo::Foo1(box 1, box 2);\n     match *f {             //~ ERROR cannot move out of\n                            //~| cannot move out\n-        Foo::Foo1(num1,         //~ NOTE to prevent move\n-                  num2) => (),  //~ NOTE and here\n-        Foo::Foo2(num) => (),   //~ NOTE and here\n+        Foo::Foo1(num1,\n+                  num2) => (),\n+        Foo::Foo2(num) => (),\n         Foo::Foo3 => ()\n     }\n }\n@@ -39,8 +39,8 @@ fn move_in_match() {\n     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n         //~| cannot move out of here\n-            f: _s,  //~ NOTE to prevent move\n-            g: _t   //~ NOTE and here\n+            f: _s,\n+            g: _t\n         } => {}\n     }\n }\n@@ -56,7 +56,7 @@ fn blah2() {\n     let a = &A { a: box 1 };\n     match a.a {           //~ ERROR cannot move out of\n                           //~| cannot move out\n-        n => {            //~ NOTE to prevent move\n+        n => {\n             free(n)\n         }\n     }"}, {"sha": "c16c80345d5136ef32afeaf6a4bfaff0bae7c1a5", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -4,21 +4,21 @@ error[E0507]: cannot move out of borrowed content\n 21 |     match *f {             //~ ERROR cannot move out of\n    |           ^^ cannot move out of borrowed content\n 22 |                            //~| cannot move out\n-23 |         Foo::Foo1(num1,         //~ NOTE to prevent move\n+23 |         Foo::Foo1(num1,\n    |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n-24 |                   num2) => (),  //~ NOTE and here\n+24 |                   num2) => (),\n    |                   ---- ...and here (use `ref num2` or `ref mut num2`)\n-25 |         Foo::Foo2(num) => (),   //~ NOTE and here\n+25 |         Foo::Foo2(num) => (),\n    |                   --- ...and here (use `ref num` or `ref mut num`)\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:40:9\n    |\n 40 | /         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n 41 | |         //~| cannot move out of here\n-42 | |             f: _s,  //~ NOTE to prevent move\n+42 | |             f: _s,\n    | |                -- hint: to prevent move, use `ref _s` or `ref mut _s`\n-43 | |             g: _t   //~ NOTE and here\n+43 | |             g: _t\n    | |                -- ...and here (use `ref _t` or `ref mut _t`)\n 44 | |         } => {}\n    | |_________^ cannot move out of here\n@@ -29,7 +29,7 @@ error[E0507]: cannot move out of borrowed content\n 57 |     match a.a {           //~ ERROR cannot move out of\n    |           ^ cannot move out of borrowed content\n 58 |                           //~| cannot move out\n-59 |         n => {            //~ NOTE to prevent move\n+59 |         n => {\n    |         - hint: to prevent move, use `ref n` or `ref mut n`\n \n error: aborting due to 3 previous errors"}, {"sha": "938ce3f2cb880d1316964afb30d15fb1a3eba1d2", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -32,7 +32,6 @@ pub fn main() {\n                 //~| cannot move out\n                 //~| to prevent move\n                   Foo { string: b }] => {\n-                    //~^ NOTE and here\n                 }\n                 _ => {\n                     unreachable!();"}, {"sha": "a6553160557e433dace0d71fae72f1eb505c817a", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,7 +17,6 @@ fn main() {\n     let z = &x; //~ ERROR cannot borrow\n     //~^ immutable borrow occurs here\n }\n-//~^ NOTE mutable borrow ends here\n \n fn foo() {\n     match true {\n@@ -29,7 +28,6 @@ fn foo() {\n             let z = &mut x; //~ ERROR cannot borrow\n             //~^ mutable borrow occurs here\n         }\n-     //~^ NOTE immutable borrow ends here\n         false => ()\n     }\n }\n@@ -43,5 +41,4 @@ fn bar() {\n         let z = &mut x; //~ ERROR cannot borrow\n         //~^ second mutable borrow occurs here\n     };\n- //~^ NOTE first borrow ends here\n }"}, {"sha": "fb6917141fc973e364696bfa0dcd1c4c4918f9e8", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,27 +11,27 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    | - mutable borrow ends here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-report-with-custom-diagnostic.rs:29:26\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:28:26\n    |\n-27 |             let y = &x;\n+26 |             let y = &x;\n    |                      - immutable borrow occurs here\n-28 |             //~^ immutable borrow occurs here\n-29 |             let z = &mut x; //~ ERROR cannot borrow\n+27 |             //~^ immutable borrow occurs here\n+28 |             let z = &mut x; //~ ERROR cannot borrow\n    |                          ^ mutable borrow occurs here\n-30 |             //~^ mutable borrow occurs here\n-31 |         }\n+29 |             //~^ mutable borrow occurs here\n+30 |         }\n    |         - immutable borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-report-with-custom-diagnostic.rs:43:22\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:41:22\n    |\n-41 |         let y = &mut x;\n+39 |         let y = &mut x;\n    |                      - first mutable borrow occurs here\n-42 |         //~^ first mutable borrow occurs here\n-43 |         let z = &mut x; //~ ERROR cannot borrow\n+40 |         //~^ first mutable borrow occurs here\n+41 |         let z = &mut x; //~ ERROR cannot borrow\n    |                      ^ second mutable borrow occurs here\n-44 |         //~^ second mutable borrow occurs here\n-45 |     };\n+42 |         //~^ second mutable borrow occurs here\n+43 |     };\n    |     - first borrow ends here\n \n error: aborting due to 3 previous errors"}, {"sha": "07b268f1a4b015a44dd4f5aa5d6b16c99f4b053b", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -63,7 +63,7 @@ fn d() {\n     match vec {\n         &mut [ //~ ERROR cannot move out\n         //~^ cannot move out\n-         _b] => {} //~ NOTE to prevent move\n+         _b] => {}\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n@@ -76,9 +76,6 @@ fn e() {\n     match vec {\n         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n         //~| cannot move out\n-        //~| NOTE to prevent move\n-        //~| NOTE and here\n-        //~| NOTE and here\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out"}, {"sha": "899ffb446b96b85496d644d3a13ff353c3ea053a", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -44,7 +44,7 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n 64 |           &mut [ //~ ERROR cannot move out\n    |  ______________^\n 65 | |         //~^ cannot move out\n-66 | |          _b] => {} //~ NOTE to prevent move\n+66 | |          _b] => {}\n    | |__________--^ cannot move out of here\n    |            |\n    |            hint: to prevent move, use `ref _b` or `ref mut _b`\n@@ -70,9 +70,9 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n    |              cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:84:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:81:13\n    |\n-84 |     let a = vec[0]; //~ ERROR cannot move out\n+81 |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here"}, {"sha": "cd9f1636c3f4dbe9a065d7f36f8d6266014df6d3", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,10 +16,9 @@ fn call<F>(f: F) where F : Fn() {\n }\n \n fn main() {\n-    let y = vec![format!(\"World\")];  //~ NOTE captured outer variable\n+    let y = vec![format!(\"World\")];\n     call(|| {\n         y.into_iter();\n         //~^ ERROR cannot move out of captured outer variable in an `Fn` closure\n-        //~| NOTE cannot move out of\n     });\n }"}, {"sha": "6aa0846f53e262a82bf1a52ea0cbe9db4b3eee3c", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n-19 |     let y = vec![format!(\"World\")];  //~ NOTE captured outer variable\n+19 |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n 20 |     call(|| {\n 21 |         y.into_iter();"}, {"sha": "68e26c23e443253c6376bf4b0f3e6d84d4846f6a", "filename": "src/test/ui/cast-as-bool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-as-bool.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let u = 5 as bool;\n     //~^ ERROR cannot cast as `bool`\n-    //~| HELP compare with zero instead\n }"}, {"sha": "0dac707688d6657abc7803b01595bd5ec876cffd", "filename": "src/test/ui/cast-rfc0401-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,5 +15,4 @@\n fn main() {\n     let _ = 3 as bool;\n     //~^ ERROR cannot cast as `bool`\n-    //~| HELP compare with zero\n }"}, {"sha": "80a2998f3cddfd5f34c5308cb289a5095e15fbd5", "filename": "src/test/ui/changing-crates.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fchanging-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fchanging-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchanging-crates.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,7 +17,5 @@\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~| NOTE: the following crate versions were found\n-//~| NOTE: perhaps that crate needs to be recompiled\n \n fn main() {}"}, {"sha": "9daa76d858ffb0eb677c3c88d06fbbd71e1f0908", "filename": "src/test/ui/closure_context/issue-42065.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,13 +14,10 @@ fn main() {\n     let dict: HashMap<i32, i32> = HashMap::new();\n     let debug_dump_dict = || {\n         for (key, value) in dict {\n-            //~^ NOTE closure cannot be invoked more than once\n             println!(\"{:?} - {:?}\", key, value);\n         }\n     };\n     debug_dump_dict();\n-    //~^ NOTE: value moved here\n     debug_dump_dict();\n     //~^ ERROR use of moved value: `debug_dump_dict`\n-    //~| NOTE value used here after move\n }"}, {"sha": "c195940ade6fa931275e620ca43d705acba29257", "filename": "src/test/ui/closure_context/issue-42065.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,9 @@\n error[E0382]: use of moved value: `debug_dump_dict`\n-  --> $DIR/issue-42065.rs:23:5\n+  --> $DIR/issue-42065.rs:21:5\n    |\n-21 |     debug_dump_dict();\n+20 |     debug_dump_dict();\n    |     --------------- value moved here\n-22 |     //~^ NOTE: value moved here\n-23 |     debug_dump_dict();\n+21 |     debug_dump_dict();\n    |     ^^^^^^^^^^^^^^^ value used here after move\n    |\n note: closure cannot be invoked more than once because it moves the variable `dict` out of its environment"}, {"sha": "51f43d27c34d20ad5c38127823f600fad416109a", "filename": "src/test/ui/coherence-impls-copy.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -28,36 +28,22 @@ impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//~| NOTE impl doesn't use types inside crate\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n \n impl Copy for &'static NotSync {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n \n impl Copy for [MyType] {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n-//~| NOTE impl doesn't use types inside crate\n \n impl Copy for &'static [NotSync] {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE type is not a structure or enumeration\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-//~| NOTE impl doesn't use types inside crate\n-//~| NOTE the impl does not reference any types defined in this crate\n-//~| NOTE define and implement a trait or new type instead\n \n fn main() {\n }"}, {"sha": "e5e91df771fdc224a74eb08157236553077224c3", "filename": "src/test/ui/coherence-impls-copy.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,51 +5,51 @@ error[E0206]: the trait `Copy` may not be implemented for this type\n    |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:34:15\n+  --> $DIR/coherence-impls-copy.rs:33:15\n    |\n-34 | impl Copy for (MyType, MyType) {}\n+33 | impl Copy for (MyType, MyType) {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:42:15\n+  --> $DIR/coherence-impls-copy.rs:37:15\n    |\n-42 | impl Copy for &'static NotSync {}\n+37 | impl Copy for &'static NotSync {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:46:15\n+  --> $DIR/coherence-impls-copy.rs:40:15\n    |\n-46 | impl Copy for [MyType] {}\n+40 | impl Copy for [MyType] {}\n    |               ^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:54:15\n+  --> $DIR/coherence-impls-copy.rs:44:15\n    |\n-54 | impl Copy for &'static [NotSync] {}\n+44 | impl Copy for &'static [NotSync] {}\n    |               ^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:34:1\n+  --> $DIR/coherence-impls-copy.rs:33:1\n    |\n-34 | impl Copy for (MyType, MyType) {}\n+33 | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:46:1\n+  --> $DIR/coherence-impls-copy.rs:40:1\n    |\n-46 | impl Copy for [MyType] {}\n+40 | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:54:1\n+  --> $DIR/coherence-impls-copy.rs:44:1\n    |\n-54 | impl Copy for &'static [NotSync] {}\n+44 | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate"}, {"sha": "fd6e1d339f383847fd3f2ecfb3afda4bdb69fb20", "filename": "src/test/ui/coherence-overlap-downstream-inherent.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,17 +16,12 @@ pub trait Sugar {}\n pub trait Fruit {}\n impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `dummy`\n impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n-//~^ NOTE other definition for `dummy`\n \n trait Bar<X> {}\n struct A<T, X>(T, X);\n impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `f`\n-//~| NOTE downstream crates may implement trait `Bar<_>` for type `i32`\n impl<X> A<i32, X> { fn f(&self) {} }\n-//~^ NOTE other definition for `f`\n \n fn main() {}"}, {"sha": "aca6800deb5ccb291b38c6aa1744e1273f730e34", "filename": "src/test/ui/coherence-overlap-downstream-inherent.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -3,17 +3,17 @@ error[E0592]: duplicate definitions with name `dummy`\n    |\n 17 | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n    |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n-20 | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+18 | //~^ ERROR E0592\n+19 | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n    |                          ------------------- other definition for `dummy`\n \n error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlap-downstream-inherent.rs:25:38\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:23:38\n    |\n-25 | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+23 | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n    |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-...\n-29 | impl<X> A<i32, X> { fn f(&self) {} }\n+24 | //~^ ERROR E0592\n+25 | impl<X> A<i32, X> { fn f(&self) {} }\n    |                     -------------- other definition for `f`\n    |\n    = note: downstream crates may implement trait `Bar<_>` for type `i32`"}, {"sha": "63898ef9a20a7f7fb62784440748abd4a763c2be", "filename": "src/test/ui/coherence-overlap-downstream.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,18 +15,13 @@ pub trait Sugar {}\n pub trait Fruit {}\n pub trait Sweet {}\n impl<T:Sugar> Sweet for T { }\n-//~^ NOTE first implementation here\n impl<T:Fruit> Sweet for T { }\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation\n \n pub trait Foo<X> {}\n pub trait Bar<X> {}\n impl<X, T> Foo<X> for T where T: Bar<X> {}\n-//~^ NOTE first implementation here\n impl<X> Foo<X> for i32 {}\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation for `i32`\n-//~| NOTE downstream crates may implement trait `Bar<_>` for type `i32`\n \n fn main() { }"}, {"sha": "8a3ef97fd5564b90de27f4152ffab62c5108125e", "filename": "src/test/ui/coherence-overlap-downstream.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,19 +1,17 @@\n error[E0119]: conflicting implementations of trait `Sweet`:\n-  --> $DIR/coherence-overlap-downstream.rs:19:1\n+  --> $DIR/coherence-overlap-downstream.rs:18:1\n    |\n 17 | impl<T:Sugar> Sweet for T { }\n    | ----------------------------- first implementation here\n-18 | //~^ NOTE first implementation here\n-19 | impl<T:Fruit> Sweet for T { }\n+18 | impl<T:Fruit> Sweet for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n-  --> $DIR/coherence-overlap-downstream.rs:27:1\n+  --> $DIR/coherence-overlap-downstream.rs:24:1\n    |\n-25 | impl<X, T> Foo<X> for T where T: Bar<X> {}\n+23 | impl<X, T> Foo<X> for T where T: Bar<X> {}\n    | ------------------------------------------ first implementation here\n-26 | //~^ NOTE first implementation here\n-27 | impl<X> Foo<X> for i32 {}\n+24 | impl<X> Foo<X> for i32 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n    = note: downstream crates may implement trait `Bar<_>` for type `i32`"}, {"sha": "94a7bdbc69e41bc735ba1bb0180414748c0d01dc", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,9 +18,6 @@ struct Cake<X>(X);\n \n impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `dummy`\n-//~| NOTE downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n-//~^ NOTE other definition for `dummy`\n \n fn main() { }"}, {"sha": "24d9b26fe9d62b95d6d1ff3dc4169d26a038da4e", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -3,8 +3,8 @@ error[E0592]: duplicate definitions with name `dummy`\n    |\n 19 | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n    |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n-23 | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+20 | //~^ ERROR E0592\n+21 | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n    |                              ------------------- other definition for `dummy`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`"}, {"sha": "3cd184b9be9c6acba2ce9ba86e63d86c8e4bd259", "filename": "src/test/ui/coherence-overlap-issue-23516.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,10 +15,7 @@\n pub trait Sugar { fn dummy(&self) { } }\n pub trait Sweet { fn dummy(&self) { } }\n impl<T:Sugar> Sweet for T { }\n-//~^ NOTE first implementation here\n impl<U:Sugar> Sweet for Box<U> { }\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation for `std::boxed::Box<_>`\n-//~| NOTE downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n \n fn main() { }"}, {"sha": "8e107e06a9e04460af65fc8113c56323e5027331", "filename": "src/test/ui/coherence-overlap-issue-23516.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,9 @@\n error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n-  --> $DIR/coherence-overlap-issue-23516.rs:19:1\n+  --> $DIR/coherence-overlap-issue-23516.rs:18:1\n    |\n 17 | impl<T:Sugar> Sweet for T { }\n    | ----------------------------- first implementation here\n-18 | //~^ NOTE first implementation here\n-19 | impl<U:Sugar> Sweet for Box<U> { }\n+18 | impl<U:Sugar> Sweet for Box<U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`"}, {"sha": "a5a6a88a128bedb727bae02e4ab047158e25a2a5", "filename": "src/test/ui/coherence-overlap-upstream-inherent.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -20,9 +20,6 @@ use coherence_lib::Remote;\n struct A<X>(X);\n impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n //~^ ERROR E0592\n-//~| NOTE duplicate definitions for `dummy`\n-//~| NOTE upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16`\n impl A<i16> { fn dummy(&self) { } }\n-//~^ NOTE other definition for `dummy`\n \n fn main() {}"}, {"sha": "db32bcb81c6eed394cb4596abc16436dcdc1a468", "filename": "src/test/ui/coherence-overlap-upstream-inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -3,8 +3,8 @@ error[E0592]: duplicate definitions with name `dummy`\n    |\n 21 | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n    |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-...\n-25 | impl A<i16> { fn dummy(&self) { } }\n+22 | //~^ ERROR E0592\n+23 | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |\n    = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions"}, {"sha": "f772848cb5869fa57c1717a1702247f370fb7612", "filename": "src/test/ui/coherence-overlap-upstream.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,10 +19,7 @@ use coherence_lib::Remote;\n \n trait Foo {}\n impl<T> Foo for T where T: Remote {}\n-//~^ NOTE first implementation here\n impl Foo for i16 {}\n //~^ ERROR E0119\n-//~| NOTE conflicting implementation for `i16`\n-//~| NOTE upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16`\n \n fn main() {}"}, {"sha": "48961572b72ca48858ad80419ad2d20f25f1444f", "filename": "src/test/ui/coherence-overlap-upstream.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,9 @@\n error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n-  --> $DIR/coherence-overlap-upstream.rs:23:1\n+  --> $DIR/coherence-overlap-upstream.rs:22:1\n    |\n 21 | impl<T> Foo for T where T: Remote {}\n    | ------------------------------------ first implementation here\n-22 | //~^ NOTE first implementation here\n-23 | impl Foo for i16 {}\n+22 | impl Foo for i16 {}\n    | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n    |\n    = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions"}, {"sha": "fa15f3e87c6947a4083579f9fe5d27afacf227d3", "filename": "src/test/ui/const-deref-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,6 +12,5 @@\n \n fn main() {\n     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n-                    //~| NOTE dereference of raw pointer in constant\n     println!(\"{}\", C);\n }"}, {"sha": "6b7f631ff4c8d2e3cdd354f28baf011af34e54c5", "filename": "src/test/ui/const-eval-overflow-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -24,7 +24,7 @@ const NEG_NEG_128: i8 = -NEG_128;\n \n fn main() {\n     match -128i8 {\n-        NEG_NEG_128 => println!(\"A\"), //~ NOTE for pattern here\n+        NEG_NEG_128 => println!(\"A\"),\n         _ => println!(\"B\"),\n     }\n }"}, {"sha": "a9d29d0107192d9863c4d35b415557ee7b0cb8f0", "filename": "src/test/ui/const-eval-overflow-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error[E0080]: constant evaluation error\n note: for pattern here\n   --> $DIR/const-eval-overflow-2.rs:27:9\n    |\n-27 |         NEG_NEG_128 => println!(\"A\"), //~ NOTE for pattern here\n+27 |         NEG_NEG_128 => println!(\"A\"),\n    |         ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "4423fdec33a85d800a9b248a4004f5ac20d0ec76", "filename": "src/test/ui/const-eval-overflow-4.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,9 +22,7 @@ use std::{u8, u16, u32, u64, usize};\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1i8) as usize]\n     //~^ ERROR constant evaluation error\n-    //~^^ NOTE attempt to add with overflow\n     //~| WARNING constant evaluation error\n-    //~| NOTE on by default\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {\n@@ -34,4 +32,3 @@ fn main() {\n fn foo<T:fmt::Debug>(x: T) {\n     println!(\"{:?}\", x);\n }\n-"}, {"sha": "f0fa1c0b9b47d6b69b21c62bd9ce67da24ea846b", "filename": "src/test/ui/const-eval-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-span.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,7 +19,6 @@ enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n     //~| expected isize, found struct `S`\n-    //~| NOTE expected type `isize`\n     //~|         found type `S`\n }\n "}, {"sha": "ac1c2fe5432dedf6b6bac401447761afc8aac1aa", "filename": "src/test/ui/const-fn-error.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -24,7 +24,6 @@ const fn f(x: usize) -> usize {\n \n #[allow(unused_variables)]\n fn main() {\n-    let a : [i32; f(X)]; //~ NOTE for constant expression here\n-    //~| WARNING constant evaluation error: non-constant path\n-    //~| on by default\n+    let a : [i32; f(X)];\n+    //~^ WARNING constant evaluation error: non-constant path\n }"}, {"sha": "f86b94a4c74fd95baf82e7053f7f1c1cb28308f0", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error[E0080]: constant evaluation error\n note: for constant expression here\n   --> $DIR/const-fn-error.rs:26:13\n    |\n-26 |     let a : [i32; f(X)]; //~ NOTE for constant expression here\n+26 |     let a : [i32; f(X)];\n    |             ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "4e1fa6bd186eca106e81ec3dfd9790a1021ff034", "filename": "src/test/ui/const-fn-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,7 +22,6 @@ trait Foo {\n impl Foo for u32 {\n     const fn f() -> u32 { 22 }\n     //~^ ERROR trait fns cannot be declared const\n-    //~| NOTE trait fns cannot be const\n }\n \n fn main() { }"}, {"sha": "1877929173d46cbb13efe8aeab5a3d79e87d1d6b", "filename": "src/test/ui/const-fn-not-in-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,10 +16,8 @@\n trait Foo {\n     const fn f() -> u32;\n     //~^ ERROR trait fns cannot be declared const\n-    //~| NOTE trait fns cannot be const\n     const fn g() -> u32 { 0 }\n     //~^ ERROR trait fns cannot be declared const\n-    //~| NOTE trait fns cannot be const\n }\n \n fn main() { }"}, {"sha": "d23bf3b411b28411cb4ec8ad4d6e4e7509d54f2e", "filename": "src/test/ui/const-fn-not-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,9 +5,9 @@ error[E0379]: trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/const-fn-not-in-trait.rs:20:5\n+  --> $DIR/const-fn-not-in-trait.rs:19:5\n    |\n-20 |     const fn g() -> u32 { 0 }\n+19 |     const fn g() -> u32 { 0 }\n    |     ^^^^^ trait fns cannot be const\n \n error: aborting due to 2 previous errors"}, {"sha": "0fd49bec159920bd80d87883bac1a30936c9e1df", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,5 +22,4 @@ const LEN: usize = ONE - TWO;\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n-    //~^ NOTE for constant expression here\n }"}, {"sha": "263c0bdc64c6f40208930ef2a0a3c5b02235efc8", "filename": "src/test/ui/const-pattern-not-const-evaluable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -34,7 +34,7 @@ const GOO: Cake = foo();\n \n fn main() {\n     match BlackForest {\n-        FOO => println!(\"hi\"), //~ NOTE: for pattern here\n+        FOO => println!(\"hi\"),\n         GOO => println!(\"meh\"),\n         WORKS => println!(\"m\u00f6p\"),\n         _ => println!(\"bye\"),"}, {"sha": "5441937e4dd60c8788d327c65d143ee11c2f3cc3", "filename": "src/test/ui/const-pattern-not-const-evaluable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error[E0080]: constant evaluation error\n note: for pattern here\n   --> $DIR/const-pattern-not-const-evaluable.rs:37:9\n    |\n-37 |         FOO => println!(\"hi\"), //~ NOTE: for pattern here\n+37 |         FOO => println!(\"hi\"),\n    |         ^^^\n \n error: aborting due to previous error"}, {"sha": "c6ce34b60ca770d11733b2fd88914429ab352b87", "filename": "src/test/ui/const-unsized.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,23 +12,15 @@ use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n static STATIC_BAR: str = *\"bar\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE does not have a constant size known at compile-time\n-//~| NOTE constant expressions must have a statically known size\n \n fn main() {\n     println!(\"{:?} {:?} {:?} {:?}\", &CONST_0, &CONST_FOO, &STATIC_1, &STATIC_BAR);"}, {"sha": "ba948643a37b0fc472bb9d8d62b0b3aa78dea36a", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,27 +8,27 @@ error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: st\n    = note: constant expressions must have a statically known size\n \n error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n-  --> $DIR/const-unsized.rs:18:24\n+  --> $DIR/const-unsized.rs:16:24\n    |\n-18 | const CONST_FOO: str = *\"foo\";\n+16 | const CONST_FOO: str = *\"foo\";\n    |                        ^^^^^^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: constant expressions must have a statically known size\n \n error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n-  --> $DIR/const-unsized.rs:23:31\n+  --> $DIR/const-unsized.rs:19:31\n    |\n-23 | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n+19 | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n    = note: constant expressions must have a statically known size\n \n error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n-  --> $DIR/const-unsized.rs:28:26\n+  --> $DIR/const-unsized.rs:22:26\n    |\n-28 | static STATIC_BAR: str = *\"bar\";\n+22 | static STATIC_BAR: str = *\"bar\";\n    |                          ^^^^^^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "c3b0276bcf9cba078af046eaf9515c84d901f72f", "filename": "src/test/ui/cycle-trait-supertrait-indirect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,16 +12,13 @@\n // a direct participant in the cycle.\n \n trait A: B {\n-    //~^ NOTE the cycle begins when computing the supertraits of `B`...\n }\n \n trait B: C {\n-    //~^ NOTE ...which then requires computing the supertraits of `C`...\n }\n \n trait C: B { }\n     //~^ ERROR unsupported cyclic reference\n     //~| cyclic reference\n-    //~| NOTE ...which then again requires computing the supertraits of `B`, completing the cycle\n \n fn main() { }"}, {"sha": "107644037a9caac62dfde589335872fe253551f8", "filename": "src/test/ui/cycle-trait-supertrait-indirect.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0391]: unsupported cyclic reference between types/traits detected\n-  --> $DIR/cycle-trait-supertrait-indirect.rs:22:1\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:20:1\n    |\n-22 | trait C: B { }\n+20 | trait C: B { }\n    | ^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when computing the supertraits of `B`...\n@@ -10,9 +10,9 @@ note: the cycle begins when computing the supertraits of `B`...\n 14 | trait A: B {\n    | ^^^^^^^^^^\n note: ...which then requires computing the supertraits of `C`...\n-  --> $DIR/cycle-trait-supertrait-indirect.rs:18:1\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:17:1\n    |\n-18 | trait B: C {\n+17 | trait B: C {\n    | ^^^^^^^^^^\n    = note: ...which then again requires computing the supertraits of `B`, completing the cycle.\n "}, {"sha": "dce80698dea396d92202f52ee39bcf5737703def", "filename": "src/test/ui/deprecated-macro_escape-inner.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecated-macro_escape-inner.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,7 +12,6 @@\n \n mod foo {\n     #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n-    //~^ HELP consider an outer attribute\n }\n \n fn main() {"}, {"sha": "7d79c48c06ae2a789da006b3ebd8bbb5198cdefd", "filename": "src/test/ui/derived-errors/issue-31997-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -29,7 +29,6 @@ fn main() {\n \n     let mut map = HashMap::new();\n     //~^ ERROR E0433\n-    //~| NOTE Use of undeclared type or module `HashMap`\n \n     for line in input.lines() {\n         let line = line.unwrap();"}, {"sha": "9f77e77d158cd08c9d18528cec41ee96edfe88c9", "filename": "src/test/ui/discrim-overflow-2.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -25,8 +25,6 @@ fn f_i8() {\n         Ok = i8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 127i8\n-              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n }\n \n@@ -36,8 +34,6 @@ fn f_u8() {\n         Ok = u8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 255u8\n-              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n }\n \n@@ -47,8 +43,6 @@ fn f_i16() {\n         Ok = i16::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 32767i16\n-              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n }\n \n@@ -58,8 +52,6 @@ fn f_u16() {\n         Ok = u16::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 65535u16\n-              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n }\n \n@@ -69,8 +61,6 @@ fn f_i32() {\n         Ok = i32::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 2147483647i32\n-              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n }\n \n@@ -80,8 +70,6 @@ fn f_u32() {\n         Ok = u32::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 4294967295u32\n-              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n }\n \n@@ -91,8 +79,6 @@ fn f_i64() {\n         Ok = i64::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 9223372036854775807i64\n-              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n }\n \n@@ -102,8 +88,6 @@ fn f_u64() {\n         Ok = u64::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 18446744073709551615u64\n-              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n }\n "}, {"sha": "660110cd73715ff2e7ac9d60f279e883d36a05b6", "filename": "src/test/ui/discrim-overflow-2.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,60 +7,60 @@ error[E0370]: enum discriminant overflowed\n    = note: explicitly set `OhNo = -128i8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:38:9\n+  --> $DIR/discrim-overflow-2.rs:36:9\n    |\n-38 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+36 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 255u8\n    |\n    = note: explicitly set `OhNo = 0u8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:49:9\n+  --> $DIR/discrim-overflow-2.rs:45:9\n    |\n-49 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+45 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 32767i16\n    |\n    = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:60:9\n+  --> $DIR/discrim-overflow-2.rs:54:9\n    |\n-60 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+54 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 65535u16\n    |\n    = note: explicitly set `OhNo = 0u16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:71:9\n+  --> $DIR/discrim-overflow-2.rs:63:9\n    |\n-71 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+63 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 2147483647i32\n    |\n    = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:82:9\n+  --> $DIR/discrim-overflow-2.rs:72:9\n    |\n-82 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+72 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 4294967295u32\n    |\n    = note: explicitly set `OhNo = 0u32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:93:9\n+  --> $DIR/discrim-overflow-2.rs:81:9\n    |\n-93 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+81 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 9223372036854775807i64\n    |\n    = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-   --> $DIR/discrim-overflow-2.rs:104:9\n-    |\n-104 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-    |         ^^^^ overflowed on value after 18446744073709551615u64\n-    |\n-    = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+  --> $DIR/discrim-overflow-2.rs:90:9\n+   |\n+90 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 18446744073709551615u64\n+   |\n+   = note: explicitly set `OhNo = 0u64` if that is desired outcome\n \n error: aborting due to 8 previous errors\n "}, {"sha": "0b31d9f97f174274dc56dca788fa2028ed3f6b88", "filename": "src/test/ui/discrim-overflow.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -23,8 +23,6 @@ fn f_i8() {\n         Ok = i8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 127i8\n-              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -36,8 +34,6 @@ fn f_u8() {\n         Ok = u8::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 255u8\n-              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -49,8 +45,6 @@ fn f_i16() {\n         Ok = i16::MAX - 1,\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-              //~| NOTE overflowed on value after 32767i16\n-              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -63,7 +57,6 @@ fn f_u16() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 65535u16\n-              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -76,7 +69,6 @@ fn f_i32() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 2147483647i32\n-              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -89,7 +81,6 @@ fn f_u32() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 4294967295u32\n-              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -102,7 +93,6 @@ fn f_i64() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 9223372036854775807i64\n-              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -115,7 +105,6 @@ fn f_u64() {\n         Ok2,\n         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n               //~| overflowed on value after 18446744073709551615u64\n-              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n \n     let x = A::Ok;"}, {"sha": "733810006d74af143fe0074271098ffd65573b48", "filename": "src/test/ui/discrim-overflow.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,57 +7,57 @@ error[E0370]: enum discriminant overflowed\n    = note: explicitly set `OhNo = -128i8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:38:9\n+  --> $DIR/discrim-overflow.rs:36:9\n    |\n-38 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+36 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 255u8\n    |\n    = note: explicitly set `OhNo = 0u8` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:51:9\n+  --> $DIR/discrim-overflow.rs:47:9\n    |\n-51 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+47 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 32767i16\n    |\n    = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:64:9\n+  --> $DIR/discrim-overflow.rs:58:9\n    |\n-64 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+58 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 65535u16\n    |\n    = note: explicitly set `OhNo = 0u16` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:77:9\n+  --> $DIR/discrim-overflow.rs:70:9\n    |\n-77 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+70 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 2147483647i32\n    |\n    = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:90:9\n+  --> $DIR/discrim-overflow.rs:82:9\n    |\n-90 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+82 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n    |         ^^^^ overflowed on value after 4294967295u32\n    |\n    = note: explicitly set `OhNo = 0u32` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-   --> $DIR/discrim-overflow.rs:103:9\n-    |\n-103 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n-    |         ^^^^ overflowed on value after 9223372036854775807i64\n-    |\n-    = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n+  --> $DIR/discrim-overflow.rs:94:9\n+   |\n+94 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 9223372036854775807i64\n+   |\n+   = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-   --> $DIR/discrim-overflow.rs:116:9\n+   --> $DIR/discrim-overflow.rs:106:9\n     |\n-116 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+106 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n     |         ^^^^ overflowed on value after 18446744073709551615u64\n     |\n     = note: explicitly set `OhNo = 0u64` if that is desired outcome"}, {"sha": "154c9bebb0feab94c748c7d94dce1f1cdb9bfb6e", "filename": "src/test/ui/double-import.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdouble-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdouble-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,9 +19,7 @@ mod sub2 {\n     pub fn foo() {} // implementation 2\n }\n \n-use sub1::foo; //~ NOTE previous import of the value `foo` here\n+use sub1::foo;\n use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n-               //~| NOTE `foo` reimported here\n-               //~| NOTE `foo` must be defined only once in the value namespace of this module\n \n fn main() {}"}, {"sha": "fcd3f2696f200122d19bd51677572e20aecd1190", "filename": "src/test/ui/double-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdouble-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fdouble-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0252]: the name `foo` is defined multiple times\n   --> $DIR/double-import.rs:23:5\n    |\n-22 | use sub1::foo; //~ NOTE previous import of the value `foo` here\n+22 | use sub1::foo;\n    |     --------- previous import of the value `foo` here\n 23 | use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n    |     ^^^^^^^^^ `foo` reimported here"}, {"sha": "d874a43d53d793ab11a94b947745d1c8bf915457", "filename": "src/test/ui/duplicate-check-macro-exports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,10 +10,9 @@\n \n #![feature(use_extern_macros)]\n \n-pub use std::panic; //~ NOTE previous macro export here\n+pub use std::panic;\n \n #[macro_export]\n macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n-//~| NOTE `panic` already exported\n \n fn main() {}"}, {"sha": "4e7176f351888d3fcb66ac7d75197445fd06df8b", "filename": "src/test/ui/duplicate-check-macro-exports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error: a macro named `panic` has already been exported\n note: previous macro export here\n   --> $DIR/duplicate-check-macro-exports.rs:13:9\n    |\n-13 | pub use std::panic; //~ NOTE previous macro export here\n+13 | pub use std::panic;\n    |         ^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "c33960193b0526b2b677ed5606cb832779294dbb", "filename": "src/test/ui/empty-struct-unit-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -25,9 +25,7 @@ fn main() {\n     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n     let e4 = E::Empty4();\n     //~^ ERROR expected function, found `E::Empty4` [E0618]\n-    //~| HELP did you mean to write `E::Empty4`?\n     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n     let xe4 = XE::XEmpty4();\n     //~^ ERROR expected function, found `XE::XEmpty4` [E0618]\n-    //~| HELP did you mean to write `XE::XEmpty4`?\n }"}, {"sha": "3ce63ed9f423bfd46d61c2b8185f39648bef0f3f", "filename": "src/test/ui/empty-struct-unit-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -24,15 +24,15 @@ note: defined here\n    |     ^^^^^^\n \n error[E0618]: expected function, found `empty_struct::XEmpty2`\n-  --> $DIR/empty-struct-unit-expr.rs:29:15\n+  --> $DIR/empty-struct-unit-expr.rs:28:15\n    |\n-29 |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+28 |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n    |               ^^^^^^^^^\n \n error[E0618]: expected function, found `XE::XEmpty4`\n-  --> $DIR/empty-struct-unit-expr.rs:30:15\n+  --> $DIR/empty-struct-unit-expr.rs:29:15\n    |\n-30 |     let xe4 = XE::XEmpty4();\n+29 |     let xe4 = XE::XEmpty4();\n    |               ^^^^^^^^^^^^^\n    |\n    = help: did you mean to write `XE::XEmpty4`?"}, {"sha": "9b6c8712f69b22fd69f2d8384f36e0c44dce90f2", "filename": "src/test/ui/enum-and-module-in-same-scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo { //~ NOTE previous definition of the type `Foo` here\n+enum Foo {\n     X\n }\n \n mod Foo { //~ ERROR the name `Foo` is defined multiple times\n-          //~| NOTE `Foo` redefined here\n-          //~| NOTE `Foo` must be defined only once in the type namespace of this module\n     pub static X: isize = 42;\n     fn f() { f() } // Check that this does not result in a resolution error\n }"}, {"sha": "723e13f41093c76d65896453c6c1ce31c01a46a8", "filename": "src/test/ui/enum-and-module-in-same-scope.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,17 +1,15 @@\n error[E0428]: the name `Foo` is defined multiple times\n   --> $DIR/enum-and-module-in-same-scope.rs:15:1\n    |\n-11 | / enum Foo { //~ NOTE previous definition of the type `Foo` here\n+11 | / enum Foo {\n 12 | |     X\n 13 | | }\n    | |_- previous definition of the type `Foo` here\n 14 | \n 15 | / mod Foo { //~ ERROR the name `Foo` is defined multiple times\n-16 | |           //~| NOTE `Foo` redefined here\n-17 | |           //~| NOTE `Foo` must be defined only once in the type namespace of this module\n-18 | |     pub static X: isize = 42;\n-19 | |     fn f() { f() } // Check that this does not result in a resolution error\n-20 | | }\n+16 | |     pub static X: isize = 42;\n+17 | |     fn f() { f() } // Check that this does not result in a resolution error\n+18 | | }\n    | |_^ `Foo` redefined here\n    |\n    = note: `Foo` must be defined only once in the type namespace of this module"}, {"sha": "0802963ad228ffccbca5c6f10a01b817c5d9d94d", "filename": "src/test/ui/fat-ptr-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,14 +18,12 @@ fn main() {\n     let q = a.as_ptr();\n \n     a as usize; //~ ERROR casting\n-    //~^ HELP cast through a raw pointer first\n     a as isize; //~ ERROR casting\n     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n     b as usize; //~ ERROR non-primitive cast\n     p as usize;\n     //~^ ERROR casting\n-    //~^^ HELP cast through a thin pointer\n \n     // #22955\n     q as *const [i32]; //~ ERROR cannot cast"}, {"sha": "35a97749e0024f3a23c7b8b4f6fff7ede41ce593", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,55 +7,55 @@ error[E0606]: casting `&[i32]` as `usize` is invalid\n    = help: cast through a raw pointer first\n \n error[E0606]: casting `&[i32]` as `isize` is invalid\n-  --> $DIR/fat-ptr-cast.rs:22:5\n+  --> $DIR/fat-ptr-cast.rs:21:5\n    |\n-22 |     a as isize; //~ ERROR casting\n+21 |     a as isize; //~ ERROR casting\n    |     ^^^^^^^^^^\n \n error[E0606]: casting `&[i32]` as `i16` is invalid\n-  --> $DIR/fat-ptr-cast.rs:23:5\n+  --> $DIR/fat-ptr-cast.rs:22:5\n    |\n-23 |     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n+22 |     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n    |     ^^^^^^^^\n \n error[E0606]: casting `&[i32]` as `u32` is invalid\n-  --> $DIR/fat-ptr-cast.rs:24:5\n+  --> $DIR/fat-ptr-cast.rs:23:5\n    |\n-24 |     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n+23 |     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n    |     ^^^^^^^^\n \n error[E0605]: non-primitive cast: `std::boxed::Box<[i32]>` as `usize`\n-  --> $DIR/fat-ptr-cast.rs:25:5\n+  --> $DIR/fat-ptr-cast.rs:24:5\n    |\n-25 |     b as usize; //~ ERROR non-primitive cast\n+24 |     b as usize; //~ ERROR non-primitive cast\n    |     ^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n error[E0606]: casting `*const [i32]` as `usize` is invalid\n-  --> $DIR/fat-ptr-cast.rs:26:5\n+  --> $DIR/fat-ptr-cast.rs:25:5\n    |\n-26 |     p as usize;\n+25 |     p as usize;\n    |     ^^^^^^^^^^\n    |\n    = help: cast through a thin pointer first\n \n error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]`\n-  --> $DIR/fat-ptr-cast.rs:31:5\n+  --> $DIR/fat-ptr-cast.rs:29:5\n    |\n-31 |     q as *const [i32]; //~ ERROR cannot cast\n+29 |     q as *const [i32]; //~ ERROR cannot cast\n    |     ^^^^^^^^^^^^^^^^^\n \n error[E0606]: casting `usize` as `*mut Trait + 'static` is invalid\n-  --> $DIR/fat-ptr-cast.rs:34:37\n+  --> $DIR/fat-ptr-cast.rs:32:37\n    |\n-34 |     let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n+32 |     let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n    |                                     ^^^^^^^^^^^\n \n error[E0606]: casting `usize` as `*const str` is invalid\n-  --> $DIR/fat-ptr-cast.rs:35:32\n+  --> $DIR/fat-ptr-cast.rs:33:32\n    |\n-35 |     let mut fail: *const str = 0 as *const str; //~ ERROR casting\n+33 |     let mut fail: *const str = 0 as *const str; //~ ERROR casting\n    |                                ^^^^^^^^^^^^^^^\n \n error: aborting due to 9 previous errors"}, {"sha": "4cb34c8274d8d9d5cdbc1075f15ec390029f467e", "filename": "src/test/ui/feature-gate-decl_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,6 +11,5 @@\n #![allow(unused_macros)]\n \n macro m() {} //~ ERROR `macro` is experimental (see issue #39412)\n-//~| HELP add #![feature(decl_macro)] to the crate attributes to enable\n \n fn main() {}"}, {"sha": "ace9fe9ab2759154178ebca58c182d15902947a1", "filename": "src/test/ui/feature-gate-may-dangle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,6 +17,5 @@\n struct Pt<A>(A);\n impl<#[may_dangle] A> Drop for Pt<A> {\n     //~^ ERROR may_dangle has unstable semantics and may be removed in the future\n-    //~| HELP add #![feature(dropck_eyepatch)] to the crate attributes to enable\n     fn drop(&mut self) { }\n }"}, {"sha": "f5753f1c7fbe1bdda05f826a13d46d677e7850cc", "filename": "src/test/ui/feature-gate-repr128.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,7 +10,6 @@\n \n #[repr(u128)]\n enum A { //~ ERROR repr with 128-bit type is unstable\n-    //~| HELP: add #![feature(repr128)]\n     A(u64)\n }\n "}, {"sha": "c59964887b58f92a30409d62263bca95d92eea62", "filename": "src/test/ui/feature-gate-repr128.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -2,9 +2,8 @@ error: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-repr128.rs:12:1\n    |\n 12 | / enum A { //~ ERROR repr with 128-bit type is unstable\n-13 | |     //~| HELP: add #![feature(repr128)]\n-14 | |     A(u64)\n-15 | | }\n+13 | |     A(u64)\n+14 | | }\n    | |_^\n    |\n    = help: add #![feature(repr128)] to the crate attributes to enable"}, {"sha": "c873fa676008d9905e8fc496b717302760961502", "filename": "src/test/ui/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,5 +18,4 @@ struct Vec<T, A = Heap>(\n fn main() {\n     let _: Vec;\n     //~^ ERROR wrong number of type arguments: expected at least 1, found 0 [E0243]\n-    //~| NOTE expected at least 1 type argument\n }"}, {"sha": "0d1b1943ca2203df062fd91a7b7cecb61acf2d36", "filename": "src/test/ui/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,5 +18,4 @@ struct Vec<T, A = Heap>(\n fn main() {\n     let _: Vec<isize, Heap, bool>;\n     //~^ ERROR wrong number of type arguments: expected at most 2, found 3 [E0244]\n-    //~| NOTE expected at most 2 type arguments\n }"}, {"sha": "331fdc444ca5a23893cd64df68ea24d0986ff6e2", "filename": "src/test/ui/if-let-arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-let-arm-types.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         //~| expected type `()`\n         //~| found type `{integer}`\n         ()\n-    } else {                //~ NOTE: `if let` arm with an incompatible type\n+    } else {\n         1\n     };\n }"}, {"sha": "fb8e00bfa94eae76d558f9e1bed5a01de2e81e23", "filename": "src/test/ui/if-let-arm-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-let-arm-types.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,7 +15,7 @@ error[E0308]: `if let` arms have incompatible types\n note: `if let` arm with an incompatible type\n   --> $DIR/if-let-arm-types.rs:17:12\n    |\n-17 |       } else {                //~ NOTE: `if let` arm with an incompatible type\n+17 |       } else {\n    |  ____________^\n 18 | |         1\n 19 | |     };"}, {"sha": "884991407512f5cf17faf5ab15b327a97b627c1e", "filename": "src/test/ui/impl-duplicate-methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,10 +11,9 @@\n struct Foo;\n \n impl Foo {\n-    fn orange(&self) {} //~ NOTE previous definition of `orange` here\n+    fn orange(&self) {}\n     fn orange(&self) {}\n     //~^ ERROR duplicate definition\n-    //~| NOTE duplicate definition\n }\n \n fn main() {}"}, {"sha": "73d470cc29e563c0e077cea2c9254060ae032e78", "filename": "src/test/ui/impl-duplicate-methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0201]: duplicate definitions with name `orange`:\n   --> $DIR/impl-duplicate-methods.rs:15:5\n    |\n-14 |     fn orange(&self) {} //~ NOTE previous definition of `orange` here\n+14 |     fn orange(&self) {}\n    |     ------------------- previous definition of `orange` here\n 15 |     fn orange(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^ duplicate definition"}, {"sha": "705390e3b969c7625be0d7d863073436e9339fce", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -26,17 +26,9 @@ fn send<T: Send>(_: T) {}\n fn main() {\n     send(before());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-    //~| NOTE required because it appears within the type `[closure\n-    //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-    //~| NOTE required by `send`\n \n     send(after());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-    //~| NOTE required because it appears within the type `[closure\n-    //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-    //~| NOTE required by `send`\n }\n \n // Deferred path, main has to wait until typeck finishes,\n@@ -52,17 +44,12 @@ fn after() -> impl Fn(i32) {\n fn cycle1() -> impl Clone {\n     //~^ ERROR unsupported cyclic reference between types/traits detected\n     //~| cyclic reference\n-    //~| NOTE the cycle begins when processing `cycle1`...\n-    //~| NOTE ...which then requires processing `cycle1::{{impl-Trait}}`...\n-    //~| NOTE ...which then again requires processing `cycle1`, completing the cycle.\n     send(cycle2().clone());\n \n     Rc::new(Cell::new(5))\n }\n \n fn cycle2() -> impl Clone {\n-    //~^ NOTE ...which then requires processing `cycle2::{{impl-Trait}}`...\n-    //~| NOTE ...which then requires processing `cycle2`...\n     send(cycle1().clone());\n \n     Rc::new(String::from(\"foo\"))"}, {"sha": "ffd6a3fe4ffb1fbc240b137bbd6d3bdb39eb6f05", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,41 +10,41 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = note: required by `send`\n \n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n-  --> $DIR/auto-trait-leak.rs:34:5\n+  --> $DIR/auto-trait-leak.rs:30:5\n    |\n-34 |     send(after());\n+30 |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:46:5: 46:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:38:5: 38:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n    = note: required by `send`\n \n error[E0391]: unsupported cyclic reference between types/traits detected\n-  --> $DIR/auto-trait-leak.rs:52:1\n+  --> $DIR/auto-trait-leak.rs:44:1\n    |\n-52 | fn cycle1() -> impl Clone {\n+44 | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:52:1\n+  --> $DIR/auto-trait-leak.rs:44:1\n    |\n-52 | fn cycle1() -> impl Clone {\n+44 | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which then requires processing `cycle2::{{impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:63:16\n+  --> $DIR/auto-trait-leak.rs:52:16\n    |\n-63 | fn cycle2() -> impl Clone {\n+52 | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which then requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:63:1\n+  --> $DIR/auto-trait-leak.rs:52:1\n    |\n-63 | fn cycle2() -> impl Clone {\n+52 | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which then requires processing `cycle1::{{impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:52:16\n+  --> $DIR/auto-trait-leak.rs:44:16\n    |\n-52 | fn cycle1() -> impl Clone {\n+44 | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    = note: ...which then again requires processing `cycle1`, completing the cycle.\n "}, {"sha": "79d487493e877b05f84cc32f7c0689b4c06b00f3", "filename": "src/test/ui/impl-trait/issue-21659-show-relevant-trait-impls-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-21659-show-relevant-trait-impls-3.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -29,5 +29,4 @@ fn main() {\n \n     f1.foo(1usize);\n     //~^ error: method named `foo` found for type `Bar` in the current scope\n-    //~| help: items from traits can only be used if the trait is implemented and in scope\n }"}, {"sha": "28028922e3286236617165026d8095a94e0c7927", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,5 +18,4 @@ fn foo<F>(f: F) where F: FnMut(Foo) {}\n fn main() {\n     foo(|s| s.is_empty());\n     //~^ ERROR no method named `is_empty` found\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n }"}, {"sha": "07c0e6f529f3cef18dfbadc11700251f3dc10adc", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,12 +11,7 @@\n // aux-build:no_method_suggested_traits.rs\n extern crate no_method_suggested_traits;\n \n-struct Foo; //~ HELP perhaps add a `use` for it\n-//~^ HELP perhaps add a `use` for it\n-//~| HELP perhaps add a `use` for it\n-//~| HELP perhaps add a `use` for it\n-//~| HELP perhaps add a `use` for one of them\n-//~| HELP perhaps add a `use` for one of them\n+struct Foo;\n enum Bar { X }\n \n mod foo {\n@@ -44,57 +39,41 @@ fn main() {\n \n     'a'.method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&'a')).method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n \n     1i32.method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is in scope\n \n     Foo.method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     1u64.method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     no_method_suggested_traits::Foo.method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     no_method_suggested_traits::Bar::X.method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     Foo.method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     Bar::X.method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n     //~^ ERROR no method named\n-    //~| HELP items from traits can only be used if the trait is implemented and in scope\n \n     // should have no help:\n     1_usize.method3(); //~ ERROR no method named"}, {"sha": "4517f09d07c32c608ed4f3f15fd136f7de6a7aac", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `method` found for type `u32` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:38:10\n+  --> $DIR/no-method-suggested-traits.rs:33:10\n    |\n-38 |     1u32.method();\n+33 |     1u32.method();\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -17,9 +17,9 @@ help: the following traits are implemented but not in scope, perhaps add a `use`\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&u32>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:41:44\n+  --> $DIR/no-method-suggested-traits.rs:36:44\n    |\n-41 |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n+36 |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -35,9 +35,9 @@ help: the following traits are implemented but not in scope, perhaps add a `use`\n    |\n \n error[E0599]: no method named `method` found for type `char` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:45:9\n+  --> $DIR/no-method-suggested-traits.rs:40:9\n    |\n-45 |     'a'.method();\n+40 |     'a'.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -47,9 +47,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&char>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:48:43\n+  --> $DIR/no-method-suggested-traits.rs:42:43\n    |\n-48 |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n+42 |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n    |                                           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -59,9 +59,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `i32` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:52:10\n+  --> $DIR/no-method-suggested-traits.rs:45:10\n    |\n-52 |     1i32.method();\n+45 |     1i32.method();\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -71,9 +71,9 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&i32>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:55:44\n+  --> $DIR/no-method-suggested-traits.rs:47:44\n    |\n-55 |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n+47 |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -83,12 +83,12 @@ help: the following trait is implemented but not in scope, perhaps add a `use` f\n    |\n \n error[E0599]: no method named `method` found for type `Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:59:9\n+  --> $DIR/no-method-suggested-traits.rs:50:9\n    |\n-14 | struct Foo; //~ HELP perhaps add a `use` for it\n+14 | struct Foo;\n    | ----------- method `method` not found for this\n ...\n-59 |     Foo.method();\n+50 |     Foo.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -101,9 +101,9 @@ error[E0599]: no method named `method` found for type `Foo` in the current scope\n            candidate #6: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:62:43\n+  --> $DIR/no-method-suggested-traits.rs:52:43\n    |\n-62 |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n+52 |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n    |                                           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -116,146 +116,146 @@ error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::box\n            candidate #6: `no_method_suggested_traits::Reexported`\n \n error[E0599]: no method named `method2` found for type `u64` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:66:10\n+  --> $DIR/no-method-suggested-traits.rs:55:10\n    |\n-66 |     1u64.method2();\n+55 |     1u64.method2();\n    |          ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&u64>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:69:44\n+  --> $DIR/no-method-suggested-traits.rs:57:44\n    |\n-69 |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n+57 |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n    |                                            ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:73:37\n+  --> $DIR/no-method-suggested-traits.rs:60:37\n    |\n-73 |     no_method_suggested_traits::Foo.method2();\n+60 |     no_method_suggested_traits::Foo.method2();\n    |                                     ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:76:71\n+  --> $DIR/no-method-suggested-traits.rs:62:71\n    |\n-76 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n+62 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n    |                                                                       ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Bar` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:79:40\n+  --> $DIR/no-method-suggested-traits.rs:64:40\n    |\n-79 |     no_method_suggested_traits::Bar::X.method2();\n+64 |     no_method_suggested_traits::Bar::X.method2();\n    |                                        ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:82:74\n+  --> $DIR/no-method-suggested-traits.rs:66:74\n    |\n-82 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n+66 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n    |                                                                          ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n error[E0599]: no method named `method3` found for type `Foo` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:86:9\n+  --> $DIR/no-method-suggested-traits.rs:69:9\n    |\n-14 | struct Foo; //~ HELP perhaps add a `use` for it\n+14 | struct Foo;\n    | ----------- method `method3` not found for this\n ...\n-86 |     Foo.method3();\n+69 |     Foo.method3();\n    |         ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:89:43\n+  --> $DIR/no-method-suggested-traits.rs:71:43\n    |\n-89 |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n+71 |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n    |                                           ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `Bar` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:92:12\n+  --> $DIR/no-method-suggested-traits.rs:73:12\n    |\n-20 | enum Bar { X }\n+15 | enum Bar { X }\n    | -------- method `method3` not found for this\n ...\n-92 |     Bar::X.method3();\n+73 |     Bar::X.method3();\n    |            ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Bar>>` in the current scope\n-  --> $DIR/no-method-suggested-traits.rs:95:46\n+  --> $DIR/no-method-suggested-traits.rs:75:46\n    |\n-95 |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n+75 |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n    |                                              ^^^^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n error[E0599]: no method named `method3` found for type `usize` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:100:13\n-    |\n-100 |     1_usize.method3(); //~ ERROR no method named\n-    |             ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:79:13\n+   |\n+79 |     1_usize.method3(); //~ ERROR no method named\n+   |             ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&usize>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:101:47\n-    |\n-101 |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR no method named\n-    |                                               ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:80:47\n+   |\n+80 |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR no method named\n+   |                                               ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Foo` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:102:37\n-    |\n-102 |     no_method_suggested_traits::Foo.method3();  //~ ERROR no method named\n-    |                                     ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:81:37\n+   |\n+81 |     no_method_suggested_traits::Foo.method3();  //~ ERROR no method named\n+   |                                     ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:103:71\n-    |\n-103 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n-    |                                                                       ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:82:71\n+   |\n+82 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n+   |                                                                       ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Bar` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:105:40\n-    |\n-105 |     no_method_suggested_traits::Bar::X.method3();  //~ ERROR no method named\n-    |                                        ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:84:40\n+   |\n+84 |     no_method_suggested_traits::Bar::X.method3();  //~ ERROR no method named\n+   |                                        ^^^^^^^\n \n error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n-   --> $DIR/no-method-suggested-traits.rs:106:74\n-    |\n-106 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n-    |                                                                          ^^^^^^^\n+  --> $DIR/no-method-suggested-traits.rs:85:74\n+   |\n+85 |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();\n+   |                                                                          ^^^^^^^\n \n error: aborting due to 24 previous errors\n "}, {"sha": "23401db21d89063643045ccf10d4fcac92783807", "filename": "src/test/ui/impl-unused-rps-in-assoc-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,7 +19,6 @@ trait Fun {\n struct Holder { x: String }\n \n impl<'a> Fun for Holder { //~ ERROR E0207\n-                          //~| NOTE unconstrained lifetime parameter\n     type Output = &'a str;\n     fn call<'b>(&'b self) -> &'b str {\n         &self.x[..]"}, {"sha": "dd2dcbe2e68085804943bfef944f1142225baa75", "filename": "src/test/ui/imports/duplicate.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -21,10 +21,8 @@ mod c {\n }\n \n mod d {\n-    use a::foo; //~ NOTE previous import of the value `foo` here\n+    use a::foo;\n     use a::foo; //~ ERROR the name `foo` is defined multiple times\n-                //~| NOTE `foo` reimported here\n-                //~| NOTE `foo` must be defined only once in the value namespace of this module\n }\n \n mod e {\n@@ -33,37 +31,31 @@ mod e {\n }\n \n mod f {\n-    pub use a::*; //~ NOTE `foo` could refer to the name imported here\n-    pub use b::*; //~ NOTE `foo` could also refer to the name imported here\n+    pub use a::*;\n+    pub use b::*;\n }\n \n mod g {\n-    pub use a::*; //~ NOTE `foo` could refer to the name imported here\n-    pub use f::*; //~ NOTE `foo` could also refer to the name imported here\n+    pub use a::*;\n+    pub use f::*;\n }\n \n fn main() {\n     e::foo();\n     f::foo(); //~ ERROR `foo` is ambiguous\n-              //~| NOTE consider adding an explicit import of `foo` to disambiguate\n     g::foo(); //~ ERROR `foo` is ambiguous\n-              //~| NOTE consider adding an explicit import of `foo` to disambiguate\n }\n \n mod ambiguous_module_errors {\n     pub mod m1 { pub use super::m1 as foo; }\n     pub mod m2 { pub use super::m2 as foo; }\n \n-    use self::m1::*; //~ NOTE\n-                     //~| NOTE\n-    use self::m2::*; //~ NOTE\n-                     //~| NOTE\n+    use self::m1::*;\n+    use self::m2::*;\n \n     use self::foo::bar; //~ ERROR `foo` is ambiguous\n-                        //~| NOTE\n \n     fn f() {\n         foo::bar(); //~ ERROR `foo` is ambiguous\n-                    //~| NOTE\n     }\n }"}, {"sha": "30f2f517115f49ad83381ac6c212ff8acf1a3adf", "filename": "src/test/ui/imports/duplicate.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0252]: the name `foo` is defined multiple times\n   --> $DIR/duplicate.rs:25:9\n    |\n-24 |     use a::foo; //~ NOTE previous import of the value `foo` here\n+24 |     use a::foo;\n    |         ------ previous import of the value `foo` here\n 25 |     use a::foo; //~ ERROR the name `foo` is defined multiple times\n    |         ^^^^^^ `foo` reimported here\n@@ -13,74 +13,74 @@ help: You can use `as` to change the binding name of the import\n    |         ^^^^^^^^^^^^^^^^^^\n \n error: `foo` is ambiguous\n-  --> $DIR/duplicate.rs:62:9\n+  --> $DIR/duplicate.rs:56:9\n    |\n-62 |     use self::foo::bar; //~ ERROR `foo` is ambiguous\n+56 |     use self::foo::bar; //~ ERROR `foo` is ambiguous\n    |         ^^^^^^^^^^^^^^\n    |\n note: `foo` could refer to the name imported here\n-  --> $DIR/duplicate.rs:57:9\n+  --> $DIR/duplicate.rs:53:9\n    |\n-57 |     use self::m1::*; //~ NOTE\n+53 |     use self::m1::*;\n    |         ^^^^^^^^^^^\n note: `foo` could also refer to the name imported here\n-  --> $DIR/duplicate.rs:59:9\n+  --> $DIR/duplicate.rs:54:9\n    |\n-59 |     use self::m2::*; //~ NOTE\n+54 |     use self::m2::*;\n    |         ^^^^^^^^^^^\n    = note: consider adding an explicit import of `foo` to disambiguate\n \n error: `foo` is ambiguous\n-  --> $DIR/duplicate.rs:47:5\n+  --> $DIR/duplicate.rs:45:5\n    |\n-47 |     f::foo(); //~ ERROR `foo` is ambiguous\n+45 |     f::foo(); //~ ERROR `foo` is ambiguous\n    |     ^^^^^^\n    |\n note: `foo` could refer to the name imported here\n-  --> $DIR/duplicate.rs:36:13\n+  --> $DIR/duplicate.rs:34:13\n    |\n-36 |     pub use a::*; //~ NOTE `foo` could refer to the name imported here\n+34 |     pub use a::*;\n    |             ^^^^\n note: `foo` could also refer to the name imported here\n-  --> $DIR/duplicate.rs:37:13\n+  --> $DIR/duplicate.rs:35:13\n    |\n-37 |     pub use b::*; //~ NOTE `foo` could also refer to the name imported here\n+35 |     pub use b::*;\n    |             ^^^^\n    = note: consider adding an explicit import of `foo` to disambiguate\n \n error: `foo` is ambiguous\n-  --> $DIR/duplicate.rs:49:5\n+  --> $DIR/duplicate.rs:46:5\n    |\n-49 |     g::foo(); //~ ERROR `foo` is ambiguous\n+46 |     g::foo(); //~ ERROR `foo` is ambiguous\n    |     ^^^^^^\n    |\n note: `foo` could refer to the name imported here\n-  --> $DIR/duplicate.rs:41:13\n+  --> $DIR/duplicate.rs:39:13\n    |\n-41 |     pub use a::*; //~ NOTE `foo` could refer to the name imported here\n+39 |     pub use a::*;\n    |             ^^^^\n note: `foo` could also refer to the name imported here\n-  --> $DIR/duplicate.rs:42:13\n+  --> $DIR/duplicate.rs:40:13\n    |\n-42 |     pub use f::*; //~ NOTE `foo` could also refer to the name imported here\n+40 |     pub use f::*;\n    |             ^^^^\n    = note: consider adding an explicit import of `foo` to disambiguate\n \n error: `foo` is ambiguous\n-  --> $DIR/duplicate.rs:66:9\n+  --> $DIR/duplicate.rs:59:9\n    |\n-66 |         foo::bar(); //~ ERROR `foo` is ambiguous\n+59 |         foo::bar(); //~ ERROR `foo` is ambiguous\n    |         ^^^^^^^^\n    |\n note: `foo` could refer to the name imported here\n-  --> $DIR/duplicate.rs:57:9\n+  --> $DIR/duplicate.rs:53:9\n    |\n-57 |     use self::m1::*; //~ NOTE\n+53 |     use self::m1::*;\n    |         ^^^^^^^^^^^\n note: `foo` could also refer to the name imported here\n-  --> $DIR/duplicate.rs:59:9\n+  --> $DIR/duplicate.rs:54:9\n    |\n-59 |     use self::m2::*; //~ NOTE\n+54 |     use self::m2::*;\n    |         ^^^^^^^^^^^\n    = note: consider adding an explicit import of `foo` to disambiguate\n "}, {"sha": "88a6e1c0d92e66283fd6a2d365f5150002e163ed", "filename": "src/test/ui/imports/macro-paths.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -21,20 +21,18 @@ mod foo {\n }\n \n fn f() {\n-    use foo::*; //~ NOTE could also refer to the name imported here\n+    use foo::*;\n     bar::m! { //~ ERROR ambiguous\n-              //~| NOTE macro-expanded items do not shadow when used in a macro invocation path\n-        mod bar { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+        mod bar { pub use two_macros::m; }\n     }\n }\n \n-pub mod baz { //~ NOTE could also refer to the name defined here\n+pub mod baz {\n     pub use two_macros::m;\n }\n \n fn g() {\n     baz::m! { //~ ERROR ambiguous\n-              //~| NOTE macro-expanded items do not shadow when used in a macro invocation path\n-        mod baz { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+        mod baz { pub use two_macros::m; }\n     }\n }"}, {"sha": "91b0b9756dad93066c1ea1e9a19e8aa0f4f9e8b6", "filename": "src/test/ui/imports/macro-paths.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,34 +5,34 @@ error: `bar` is ambiguous\n    |     ^^^^^^\n    |\n note: `bar` could refer to the name defined here\n-  --> $DIR/macro-paths.rs:27:9\n+  --> $DIR/macro-paths.rs:26:9\n    |\n-27 |         mod bar { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+26 |         mod bar { pub use two_macros::m; }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `bar` could also refer to the name imported here\n   --> $DIR/macro-paths.rs:24:9\n    |\n-24 |     use foo::*; //~ NOTE could also refer to the name imported here\n+24 |     use foo::*;\n    |         ^^^^^^\n    = note: macro-expanded items do not shadow when used in a macro invocation path\n \n error: `baz` is ambiguous\n-  --> $DIR/macro-paths.rs:36:5\n+  --> $DIR/macro-paths.rs:35:5\n    |\n-36 |     baz::m! { //~ ERROR ambiguous\n+35 |     baz::m! { //~ ERROR ambiguous\n    |     ^^^^^^\n    |\n note: `baz` could refer to the name defined here\n-  --> $DIR/macro-paths.rs:38:9\n+  --> $DIR/macro-paths.rs:36:9\n    |\n-38 |         mod baz { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+36 |         mod baz { pub use two_macros::m; }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `baz` could also refer to the name defined here\n-  --> $DIR/macro-paths.rs:31:1\n+  --> $DIR/macro-paths.rs:30:1\n    |\n-31 | / pub mod baz { //~ NOTE could also refer to the name defined here\n-32 | |     pub use two_macros::m;\n-33 | | }\n+30 | / pub mod baz {\n+31 | |     pub use two_macros::m;\n+32 | | }\n    | |_^\n    = note: macro-expanded items do not shadow when used in a macro invocation path\n "}, {"sha": "98577d73ee0f6008f5a95d64cc715ce1a1a31149", "filename": "src/test/ui/imports/macros.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -24,30 +24,28 @@ mod m1 {\n }\n \n mod m2 {\n-    use two_macros::*; //~ NOTE could also refer\n+    use two_macros::*;\n     m! { //~ ERROR ambiguous\n-         //~| NOTE macro-expanded macro imports do not shadow\n-        use foo::m; //~ NOTE could refer to the name imported here\n+        use foo::m;\n     }\n }\n \n mod m3 {\n-    use two_macros::m; //~ NOTE could also refer\n+    use two_macros::m;\n     fn f() {\n         use two_macros::n as m; // This shadows the above import\n         m!();\n     }\n \n     fn g() {\n         m! { //~ ERROR ambiguous\n-             //~| NOTE macro-expanded macro imports do not shadow\n-            use two_macros::n as m; //~ NOTE could refer to the name imported here\n+            use two_macros::n as m;\n         }\n     }\n }\n \n mod m4 {\n-    macro_rules! m { () => {} } //~ NOTE could refer to the macro defined here\n-    use two_macros::m; //~ NOTE could also refer to the macro imported here\n+    macro_rules! m { () => {} }\n+    use two_macros::m;\n     m!(); //~ ERROR ambiguous\n }"}, {"sha": "0b67613eb14b63efe6306df2ff7e6249ad69ade3", "filename": "src/test/ui/imports/macros.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,18 +1,18 @@\n error: `m` is ambiguous\n-  --> $DIR/macros.rs:52:5\n+  --> $DIR/macros.rs:50:5\n    |\n-52 |     m!(); //~ ERROR ambiguous\n+50 |     m!(); //~ ERROR ambiguous\n    |     ^\n    |\n note: `m` could refer to the macro defined here\n-  --> $DIR/macros.rs:50:5\n+  --> $DIR/macros.rs:48:5\n    |\n-50 |     macro_rules! m { () => {} } //~ NOTE could refer to the macro defined here\n+48 |     macro_rules! m { () => {} }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: `m` could also refer to the macro imported here\n-  --> $DIR/macros.rs:51:9\n+  --> $DIR/macros.rs:49:9\n    |\n-51 |     use two_macros::m; //~ NOTE could also refer to the macro imported here\n+49 |     use two_macros::m;\n    |         ^^^^^^^^^^^^^\n \n error: `m` is ambiguous\n@@ -22,32 +22,32 @@ error: `m` is ambiguous\n    |     ^\n    |\n note: `m` could refer to the name imported here\n-  --> $DIR/macros.rs:30:13\n+  --> $DIR/macros.rs:29:13\n    |\n-30 |         use foo::m; //~ NOTE could refer to the name imported here\n+29 |         use foo::m;\n    |             ^^^^^^\n note: `m` could also refer to the name imported here\n   --> $DIR/macros.rs:27:9\n    |\n-27 |     use two_macros::*; //~ NOTE could also refer\n+27 |     use two_macros::*;\n    |         ^^^^^^^^^^^^^\n    = note: macro-expanded macro imports do not shadow\n \n error: `m` is ambiguous\n-  --> $DIR/macros.rs:42:9\n+  --> $DIR/macros.rs:41:9\n    |\n-42 |         m! { //~ ERROR ambiguous\n+41 |         m! { //~ ERROR ambiguous\n    |         ^\n    |\n note: `m` could refer to the name imported here\n-  --> $DIR/macros.rs:44:17\n+  --> $DIR/macros.rs:42:17\n    |\n-44 |             use two_macros::n as m; //~ NOTE could refer to the name imported here\n+42 |             use two_macros::n as m;\n    |                 ^^^^^^^^^^^^^^^^^^\n note: `m` could also refer to the name imported here\n-  --> $DIR/macros.rs:35:9\n+  --> $DIR/macros.rs:34:9\n    |\n-35 |     use two_macros::m; //~ NOTE could also refer\n+34 |     use two_macros::m;\n    |         ^^^^^^^^^^^^^\n    = note: macro-expanded macro imports do not shadow\n "}, {"sha": "f94fc3633e341819ebbb7e1f8a5bd857c8d47f54", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,13 +16,11 @@ mod bar {\n     struct Foo;\n \n     mod baz {\n-        use *; //~ NOTE `Foo` could refer to the name imported here\n-        use bar::*; //~ NOTE `Foo` could also refer to the name imported here\n+        use *;\n+        use bar::*;\n         fn f(_: Foo) {}\n         //~^ ERROR `Foo` is ambiguous\n         //~| WARN hard error in a future release\n-        //~| NOTE see issue #38260\n-        //~| NOTE #[deny(legacy_imports)] on by default\n     }\n }\n "}, {"sha": "1fec73112721d08ba1c1a1f5e520dfe00b11bbe2", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,9 +1,9 @@\n error: `Foo` is ambiguous\n   --> $DIR/rfc-1560-warning-cycle.rs:21:17\n    |\n-19 |         use *; //~ NOTE `Foo` could refer to the name imported here\n+19 |         use *;\n    |             - `Foo` could refer to the name imported here\n-20 |         use bar::*; //~ NOTE `Foo` could also refer to the name imported here\n+20 |         use bar::*;\n    |             ------ `Foo` could also refer to the name imported here\n 21 |         fn f(_: Foo) {}\n    |                 ^^^"}, {"sha": "93de136c4051d6875345c8e420cd38e9048961d7", "filename": "src/test/ui/imports/shadow_builtin_macros.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -23,17 +23,13 @@ mod m1 {\n }\n \n mod m2 {\n-    use foo::*; //~ NOTE `panic` could refer to the name imported here\n+    use foo::*;\n     fn f() { panic!(); } //~ ERROR ambiguous\n-    //~| NOTE `panic` is also a builtin macro\n-    //~| NOTE consider adding an explicit import of `panic` to disambiguate\n }\n \n mod m3 {\n-    ::two_macros::m!(use foo::panic;); //~ NOTE `panic` could refer to the name imported here\n+    ::two_macros::m!(use foo::panic;);\n     fn f() { panic!(); } //~ ERROR ambiguous\n-    //~| NOTE `panic` is also a builtin macro\n-    //~| NOTE macro-expanded macro imports do not shadow\n }\n \n mod m4 {\n@@ -44,14 +40,12 @@ mod m4 {\n mod m5 {\n     macro_rules! m { () => {\n         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n-        //~| NOTE macro-expanded `macro_rules!`s may not shadow existing macros\n     } }\n-    m!(); //~ NOTE in this expansion\n-    //~| NOTE in this expansion\n+    m!();\n     panic!();\n }\n \n-#[macro_use(n)] //~ NOTE `n` could also refer to the name imported here\n+#[macro_use(n)]\n extern crate two_macros;\n mod bar {\n     pub use two_macros::m as n;\n@@ -63,9 +57,8 @@ mod m6 {\n }\n \n mod m7 {\n-    use bar::*; //~ NOTE `n` could refer to the name imported here\n+    use bar::*;\n     n!(); //~ ERROR ambiguous\n-    //~| NOTE consider adding an explicit import of `n` to disambiguate\n }\n \n fn main() {}"}, {"sha": "853ed98c30d4dce672bc10ba3eb0ee8b272d8375", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,10 @@\n error: `panic` is already in scope\n-  --> $DIR/shadow_builtin_macros.rs:46:9\n+  --> $DIR/shadow_builtin_macros.rs:42:9\n    |\n-46 |         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n+42 |         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-49 |     m!(); //~ NOTE in this expansion\n+43 |     } }\n+44 |     m!();\n    |     ----- in this macro invocation\n    |\n    = note: macro-expanded `macro_rules!`s may not shadow existing macros (see RFC 1560)\n@@ -18,40 +18,40 @@ error: `panic` is ambiguous\n note: `panic` could refer to the name imported here\n   --> $DIR/shadow_builtin_macros.rs:26:9\n    |\n-26 |     use foo::*; //~ NOTE `panic` could refer to the name imported here\n+26 |     use foo::*;\n    |         ^^^^^^\n    = note: `panic` is also a builtin macro\n    = note: consider adding an explicit import of `panic` to disambiguate\n \n error: `panic` is ambiguous\n-  --> $DIR/shadow_builtin_macros.rs:34:14\n+  --> $DIR/shadow_builtin_macros.rs:32:14\n    |\n-34 |     fn f() { panic!(); } //~ ERROR ambiguous\n+32 |     fn f() { panic!(); } //~ ERROR ambiguous\n    |              ^^^^^\n    |\n note: `panic` could refer to the name imported here\n-  --> $DIR/shadow_builtin_macros.rs:33:26\n+  --> $DIR/shadow_builtin_macros.rs:31:26\n    |\n-33 |     ::two_macros::m!(use foo::panic;); //~ NOTE `panic` could refer to the name imported here\n+31 |     ::two_macros::m!(use foo::panic;);\n    |                          ^^^^^^^^^^\n    = note: `panic` is also a builtin macro\n    = note: macro-expanded macro imports do not shadow\n \n error: `n` is ambiguous\n-  --> $DIR/shadow_builtin_macros.rs:67:5\n+  --> $DIR/shadow_builtin_macros.rs:61:5\n    |\n-67 |     n!(); //~ ERROR ambiguous\n+61 |     n!(); //~ ERROR ambiguous\n    |     ^\n    |\n note: `n` could refer to the name imported here\n-  --> $DIR/shadow_builtin_macros.rs:66:9\n+  --> $DIR/shadow_builtin_macros.rs:60:9\n    |\n-66 |     use bar::*; //~ NOTE `n` could refer to the name imported here\n+60 |     use bar::*;\n    |         ^^^^^^\n note: `n` could also refer to the name imported here\n-  --> $DIR/shadow_builtin_macros.rs:54:13\n+  --> $DIR/shadow_builtin_macros.rs:48:13\n    |\n-54 | #[macro_use(n)] //~ NOTE `n` could also refer to the name imported here\n+48 | #[macro_use(n)]\n    |             ^\n    = note: consider adding an explicit import of `n` to disambiguate\n "}, {"sha": "330a9213bc71dbf2a5a296110777fa749a141129", "filename": "src/test/ui/impossible_range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,9 +19,7 @@ pub fn main() {\n     0..1;\n \n     ..=; //~ERROR inclusive range with no end\n-         //~^HELP bounded at the end\n     0..=; //~ERROR inclusive range with no end\n-          //~^HELP bounded at the end\n     ..=1;\n     0..=1;\n }"}, {"sha": "75c6d859621ab7d12a145c7c4f1fb9193e838512", "filename": "src/test/ui/impossible_range.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,9 +7,9 @@ error[E0586]: inclusive range with no end\n    = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:23:9\n+  --> $DIR/impossible_range.rs:22:9\n    |\n-23 |     0..=; //~ERROR inclusive range with no end\n+22 |     0..=; //~ERROR inclusive range with no end\n    |         ^\n    |\n    = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)"}, {"sha": "4a64d6c4cc5181c1300e3a21def17e018e1e991a", "filename": "src/test/ui/index-help.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Findex-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Findex-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let x = vec![1];\n     x[0i32]; //~ ERROR E0277\n-             //~| NOTE vector indices are of type `usize` or ranges of `usize`\n }"}, {"sha": "4ab4a8b579abc2f532159607f45d9b54780c400b", "filename": "src/test/ui/issue-10969.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-10969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-10969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10969.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn func(i: i32) { //~NOTE defined here\n+fn func(i: i32) {\n     i(); //~ERROR expected function, found `i32`\n }\n fn main() {\n-    let i = 0i32; //~NOTE defined here\n+    let i = 0i32;\n     i(); //~ERROR expected function, found `i32`\n }"}, {"sha": "8aea63e0bbdaa3f0656d98f929a8c32405c05917", "filename": "src/test/ui/issue-10969.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-10969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-10969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10969.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error[E0618]: expected function, found `i32`\n note: defined here\n   --> $DIR/issue-10969.rs:11:9\n    |\n-11 | fn func(i: i32) { //~NOTE defined here\n+11 | fn func(i: i32) {\n    |         ^\n \n error[E0618]: expected function, found `i32`\n@@ -19,7 +19,7 @@ error[E0618]: expected function, found `i32`\n note: defined here\n   --> $DIR/issue-10969.rs:15:9\n    |\n-15 |     let i = 0i32; //~NOTE defined here\n+15 |     let i = 0i32;\n    |         ^\n \n error: aborting due to 2 previous errors"}, {"sha": "503fa64751274e027a3ce6c67ed72ed8be6cc56c", "filename": "src/test/ui/issue-11004.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11004.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,9 +15,7 @@ struct A { x: i32, y: f64 }\n #[cfg(not(works))]\n unsafe fn access(n:*mut A) -> (i32, f64) {\n     let x : i32 = n.x; //~ no field `x` on type `*mut A`\n-                       //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).x`\n     let y : f64 = n.y; //~ no field `y` on type `*mut A`\n-                       //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).y`\n     (x, y)\n }\n "}, {"sha": "9b8c3df7d59c4d5620251aaf2b0a9ac2c4e0d5f3", "filename": "src/test/ui/issue-11004.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11004.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,9 +7,9 @@ error[E0609]: no field `x` on type `*mut A`\n    = note: `n` is a native pointer; perhaps you need to deref with `(*n).x`\n \n error[E0609]: no field `y` on type `*mut A`\n-  --> $DIR/issue-11004.rs:19:21\n+  --> $DIR/issue-11004.rs:18:21\n    |\n-19 |     let y : f64 = n.y; //~ no field `y` on type `*mut A`\n+18 |     let y : f64 = n.y; //~ no field `y` on type `*mut A`\n    |                     ^\n    |\n    = note: `n` is a native pointer; perhaps you need to deref with `(*n).y`"}, {"sha": "20636ed1ea9e0ddd355ef56f93c0a44627c9628a", "filename": "src/test/ui/issue-11319.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11319.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     //~| expected bool, found ()\n         Some(5) => false,\n         Some(2) => true,\n-        None    => (), //~ NOTE match arm with an incompatible type\n+        None    => (),\n         _       => true\n     }\n }"}, {"sha": "b5db112797f22cda5850ea819fd151730d3f2cc8", "filename": "src/test/ui/issue-11319.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11319.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,7 +15,7 @@ error[E0308]: match arms have incompatible types\n note: match arm with an incompatible type\n   --> $DIR/issue-11319.rs:19:20\n    |\n-19 |         None    => (), //~ NOTE match arm with an incompatible type\n+19 |         None    => (),\n    |                    ^^\n \n error: aborting due to previous error"}, {"sha": "c429b73bc9544bf3cdb7a2111a2a0357472cad42", "filename": "src/test/ui/issue-12187-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-1.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,6 +15,4 @@ fn new<T>() -> &'static T {\n fn main() {\n     let &v = new();\n     //~^ ERROR type annotations needed [E0282]\n-    //~| NOTE cannot infer type for `_`\n-    //~| NOTE consider giving the pattern a type\n }"}, {"sha": "733f597e7ac4a750179f502d7957c711a5667f33", "filename": "src/test/ui/issue-12187-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,6 +15,4 @@ fn new<'r, T>() -> &'r T {\n fn main() {\n     let &v = new();\n     //~^ ERROR type annotations needed [E0282]\n-    //~| NOTE cannot infer type for `_`\n-    //~| NOTE consider giving the pattern a type\n }"}, {"sha": "e1335c7d558e11d2d1284ed81164a99f0b346645", "filename": "src/test/ui/issue-12511.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12511.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,14 +9,11 @@\n // except according to those terms.\n \n trait t1 : t2 {\n-//~^ NOTE the cycle begins when computing the supertraits of `t1`...\n-//~| NOTE ...which then requires computing the supertraits of `t2`...\n }\n \n trait t2 : t1 {\n //~^ ERROR unsupported cyclic reference between types/traits detected\n //~| cyclic reference\n-//~| NOTE ...which then again requires computing the supertraits of `t1`, completing the cycle\n }\n \n fn main() { }"}, {"sha": "cbf005a70b028ee2270c082ca029e0b3e608ba3f", "filename": "src/test/ui/issue-12511.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12511.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0391]: unsupported cyclic reference between types/traits detected\n-  --> $DIR/issue-12511.rs:16:1\n+  --> $DIR/issue-12511.rs:14:1\n    |\n-16 | trait t2 : t1 {\n+14 | trait t2 : t1 {\n    | ^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when computing the supertraits of `t1`..."}, {"sha": "dbcf9998ad937c6956ff6f7e89141306ef48d92c", "filename": "src/test/ui/issue-13058.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13058.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -35,5 +35,4 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n fn main() {\n     check((3, 5));\n //~^ ERROR mismatched types\n-//~| HELP consider borrowing here\n }"}, {"sha": "449de26769ff318f7522bc6f996db2432bcca05a", "filename": "src/test/ui/issue-14092.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-14092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-14092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-14092.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,6 +10,5 @@\n \n fn fn1(0: Box) {}\n         //~^ ERROR wrong number of type arguments: expected 1, found 0 [E0243]\n-        //~| NOTE expected 1 type argument\n \n fn main() {}"}, {"sha": "6356ea81660df87d84f6e329fb8e203590c8993f", "filename": "src/test/ui/issue-15260.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15260.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,28 +14,22 @@ struct Foo {\n \n fn main() {\n     let Foo {\n-        a: _, //~ NOTE first use of `a`\n+        a: _,\n         a: _\n         //~^ ERROR field `a` bound multiple times in the pattern\n-        //~| NOTE multiple uses of `a` in pattern\n     } = Foo { a: 29 };\n \n     let Foo {\n-        a, //~ NOTE first use of `a`\n+        a,\n         a: _\n         //~^ ERROR field `a` bound multiple times in the pattern\n-        //~| NOTE multiple uses of `a` in pattern\n     } = Foo { a: 29 };\n \n     let Foo {\n         a,\n-        //~^ NOTE first use of `a`\n-        //~| NOTE first use of `a`\n         a: _,\n         //~^ ERROR field `a` bound multiple times in the pattern\n-        //~| NOTE multiple uses of `a` in pattern\n         a: x\n         //~^ ERROR field `a` bound multiple times in the pattern\n-        //~| NOTE multiple uses of `a` in pattern\n     } = Foo { a: 29 };\n }"}, {"sha": "aca2fa5ed041385c46b286a2d5c3c5771a170e8e", "filename": "src/test/ui/issue-15260.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15260.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,35 +1,34 @@\n error[E0025]: field `a` bound multiple times in the pattern\n   --> $DIR/issue-15260.rs:18:9\n    |\n-17 |         a: _, //~ NOTE first use of `a`\n+17 |         a: _,\n    |         ---- first use of `a`\n 18 |         a: _\n    |         ^^^^ multiple uses of `a` in pattern\n \n error[E0025]: field `a` bound multiple times in the pattern\n-  --> $DIR/issue-15260.rs:25:9\n+  --> $DIR/issue-15260.rs:24:9\n    |\n-24 |         a, //~ NOTE first use of `a`\n+23 |         a,\n    |         - first use of `a`\n-25 |         a: _\n+24 |         a: _\n    |         ^^^^ multiple uses of `a` in pattern\n \n error[E0025]: field `a` bound multiple times in the pattern\n-  --> $DIR/issue-15260.rs:34:9\n+  --> $DIR/issue-15260.rs:30:9\n    |\n-31 |         a,\n+29 |         a,\n    |         - first use of `a`\n-...\n-34 |         a: _,\n+30 |         a: _,\n    |         ^^^^ multiple uses of `a` in pattern\n \n error[E0025]: field `a` bound multiple times in the pattern\n-  --> $DIR/issue-15260.rs:37:9\n+  --> $DIR/issue-15260.rs:32:9\n    |\n-31 |         a,\n+29 |         a,\n    |         - first use of `a`\n ...\n-37 |         a: x\n+32 |         a: x\n    |         ^^^^ multiple uses of `a` in pattern\n \n error: aborting due to 4 previous errors"}, {"sha": "85214bd86336ca057166953dacfebfe91d011ef9", "filename": "src/test/ui/issue-15524.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15524.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,20 +12,14 @@ const N: isize = 1;\n \n enum Foo {\n     A = 1,\n-    //~^ NOTE first use of `1isize`\n-    //~| NOTE first use of `1isize`\n-    //~| NOTE first use of `1isize`\n     B = 1,\n     //~^ ERROR discriminant value `1isize` already exists\n-    //~| NOTE enum already has `1isize`\n     C = 0,\n     D,\n     //~^ ERROR discriminant value `1isize` already exists\n-    //~| NOTE enum already has `1isize`\n \n     E = N,\n     //~^ ERROR discriminant value `1isize` already exists\n-    //~| NOTE enum already has `1isize`\n \n }\n "}, {"sha": "9c77752be2022f2b707dc5276ab04d73fd32ac68", "filename": "src/test/ui/issue-15524.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15524.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-15524.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15524.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,28 +1,27 @@\n error[E0081]: discriminant value `1isize` already exists\n-  --> $DIR/issue-15524.rs:18:9\n+  --> $DIR/issue-15524.rs:15:9\n    |\n 14 |     A = 1,\n    |         - first use of `1isize`\n-...\n-18 |     B = 1,\n+15 |     B = 1,\n    |         ^ enum already has `1isize`\n \n error[E0081]: discriminant value `1isize` already exists\n-  --> $DIR/issue-15524.rs:22:5\n+  --> $DIR/issue-15524.rs:18:5\n    |\n 14 |     A = 1,\n    |         - first use of `1isize`\n ...\n-22 |     D,\n+18 |     D,\n    |     ^ enum already has `1isize`\n \n error[E0081]: discriminant value `1isize` already exists\n-  --> $DIR/issue-15524.rs:26:9\n+  --> $DIR/issue-15524.rs:21:9\n    |\n 14 |     A = 1,\n    |         - first use of `1isize`\n ...\n-26 |     E = N,\n+21 |     E = N,\n    |         ^ enum already has `1isize`\n \n error: aborting due to 3 previous errors"}, {"sha": "242327e93ce1bdec4580adaaaf74f24cde5ec52a", "filename": "src/test/ui/issue-17263.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,14 +16,8 @@ fn main() {\n     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n     //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n-    //~| NOTE first mutable borrow occurs here (via `x.a`)\n-    //~| NOTE second mutable borrow occurs here (via `x.b`)\n \n     let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n     let (c, d) = (&mut foo.a, &foo.b);\n     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n-    //~| NOTE mutable borrow occurs here (via `foo.a`)\n-    //~| NOTE immutable borrow occurs here (via `foo.b`)\n }\n-//~^ NOTE first borrow ends here\n-//~^^ NOTE mutable borrow ends here"}, {"sha": "a762c0876b55a30f01b66e9f552370b42ff351ca", "filename": "src/test/ui/issue-17263.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -6,18 +6,18 @@ error[E0499]: cannot borrow `x` (via `x.b`) as mutable more than once at a time\n    |                        |\n    |                        first mutable borrow occurs here (via `x.a`)\n ...\n-27 | }\n+23 | }\n    | - first borrow ends here\n \n error[E0502]: cannot borrow `foo` (via `foo.b`) as immutable because `foo` is also borrowed as mutable (via `foo.a`)\n-  --> $DIR/issue-17263.rs:23:32\n+  --> $DIR/issue-17263.rs:21:32\n    |\n-23 |     let (c, d) = (&mut foo.a, &foo.b);\n+21 |     let (c, d) = (&mut foo.a, &foo.b);\n    |                        -----   ^^^^^ immutable borrow occurs here (via `foo.b`)\n    |                        |\n    |                        mutable borrow occurs here (via `foo.a`)\n-...\n-27 | }\n+22 |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+23 | }\n    | - mutable borrow ends here\n \n error: aborting due to 2 previous errors"}, {"sha": "c7b077014616c725793202a48b7b3cf415834337", "filename": "src/test/ui/issue-17441.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,17 +11,13 @@\n fn main() {\n     let _foo = &[1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n-    //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n \n     let _bar = Box::new(1_usize) as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n-    //~^^ HELP try casting to a `Box` instead\n \n     let _baz = 1_usize as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `usize` as `std::fmt::Debug`\n-    //~^^ HELP consider using a box or reference as appropriate\n \n     let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`\n-    //~^^ HELP consider using a box or reference as appropriate\n }"}, {"sha": "593507a5d4510f467290fe8bd4d96337841ea3bc", "filename": "src/test/ui/issue-17441.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,35 +11,35 @@ help: consider using an implicit coercion to `&[usize]` instead\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n-  --> $DIR/issue-17441.rs:16:16\n+  --> $DIR/issue-17441.rs:15:16\n    |\n-16 |     let _bar = Box::new(1_usize) as std::fmt::Debug;\n+15 |     let _bar = Box::new(1_usize) as std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^^---------------\n    |                                     |\n    |                                     help: try casting to a `Box` instead: `Box<std::fmt::Debug>`\n \n error[E0620]: cast to unsized type: `usize` as `std::fmt::Debug`\n-  --> $DIR/issue-17441.rs:20:16\n+  --> $DIR/issue-17441.rs:18:16\n    |\n-20 |     let _baz = 1_usize as std::fmt::Debug;\n+18 |     let _baz = 1_usize as std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider using a box or reference as appropriate\n-  --> $DIR/issue-17441.rs:20:16\n+  --> $DIR/issue-17441.rs:18:16\n    |\n-20 |     let _baz = 1_usize as std::fmt::Debug;\n+18 |     let _baz = 1_usize as std::fmt::Debug;\n    |                ^^^^^^^\n \n error[E0620]: cast to unsized type: `[usize; 2]` as `[usize]`\n-  --> $DIR/issue-17441.rs:24:17\n+  --> $DIR/issue-17441.rs:21:17\n    |\n-24 |     let _quux = [1_usize, 2] as [usize];\n+21 |     let _quux = [1_usize, 2] as [usize];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider using a box or reference as appropriate\n-  --> $DIR/issue-17441.rs:24:17\n+  --> $DIR/issue-17441.rs:21:17\n    |\n-24 |     let _quux = [1_usize, 2] as [usize];\n+21 |     let _quux = [1_usize, 2] as [usize];\n    |                 ^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors"}, {"sha": "2ee4a66882ba91cfc083204147cf97979ff2c48b", "filename": "src/test/ui/issue-17954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-17954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -4,7 +4,7 @@ error[E0597]: borrowed value does not live long enough\n 17 |     let a = &FOO;\n    |              ^^^ does not live long enough\n ...\n-25 | } //~ temporary value only lives until here\n+24 | } //~ temporary value only lives until here\n    | - temporary value only lives until here\n    |\n    = note: borrowed value must be valid for the static lifetime..."}, {"sha": "2cad4a3175f4df648fbf773538db6ca957393f4b", "filename": "src/test/ui/issue-18183.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-18183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-18183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18183.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n pub struct Foo<Bar=Bar>(Bar); //~ ERROR E0128\n-                              //~| NOTE defaulted type parameters cannot be forward declared\n pub struct Baz(Foo);\n fn main() {}"}, {"sha": "c6f60f1cbba86c96c376fac02a6e80ff95e880cb", "filename": "src/test/ui/issue-18819.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18819.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,12 +19,10 @@ impl Foo for X {\n }\n \n fn print_x(_: &Foo<Item=bool>, extra: &str) {\n-    //~^ NOTE defined here\n     println!(\"{}\", extra);\n }\n \n fn main() {\n     print_x(X);\n     //~^ ERROR E0061\n-    //~| NOTE expected 2 parameters\n }"}, {"sha": "25623668e37abb9d3918aa94307dcedd82480c41", "filename": "src/test/ui/issue-18819.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18819.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,13 +1,12 @@\n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/issue-18819.rs:27:13\n+  --> $DIR/issue-18819.rs:26:13\n    |\n 21 | / fn print_x(_: &Foo<Item=bool>, extra: &str) {\n-22 | |     //~^ NOTE defined here\n-23 | |     println!(\"{}\", extra);\n-24 | | }\n+22 | |     println!(\"{}\", extra);\n+23 | | }\n    | |_- defined here\n ...\n-27 |       print_x(X);\n+26 |       print_x(X);\n    |               ^ expected 2 parameters\n \n error: aborting due to previous error"}, {"sha": "2032f23e6a30e0feb33e0c151c0e2ba5853e32b5", "filename": "src/test/ui/issue-19100.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19100.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -26,12 +26,10 @@ impl Foo {\n             &\n Bar if true\n //~^ WARN pattern binding `Bar` is named the same as one of the variants of the type `Foo`\n-//~^^ HELP to match on a variant, consider making the path in the pattern qualified: `Foo::Bar`\n => println!(\"bar\"),\n             &\n Baz if false\n //~^ WARN pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n-//~^^ HELP to match on a variant, consider making the path in the pattern qualified: `Foo::Baz`\n => println!(\"baz\"),\n _ => ()\n         }"}, {"sha": "a567e86cfdb86b60185d7acb7c8e0fb56200efac", "filename": "src/test/ui/issue-19100.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19100.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,9 +7,9 @@ warning[E0170]: pattern binding `Bar` is named the same as one of the variants o\n    = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Foo::Bar`\n \n warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n-  --> $DIR/issue-19100.rs:32:1\n+  --> $DIR/issue-19100.rs:31:1\n    |\n-32 | Baz if false\n+31 | Baz if false\n    | ^^^\n    |\n    = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Foo::Baz`"}, {"sha": "30eea2efd150ed98ff946aabfa41df8d26caedab", "filename": "src/test/ui/issue-19498.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19498.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,19 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use self::A; //~ NOTE previous import of the module `A` here\n-use self::B; //~ NOTE previous import of the module `B` here\n+use self::A;\n+use self::B;\n mod A {} //~ ERROR the name `A` is defined multiple times\n //~| `A` redefined here\n-//~| NOTE `A` must be defined only once in the type namespace of this module\n pub mod B {} //~ ERROR the name `B` is defined multiple times\n //~| `B` redefined here\n-//~| NOTE `B` must be defined only once in the type namespace of this module\n mod C {\n-    use C::D; //~ NOTE previous import of the module `D` here\n+    use C::D;\n     mod D {} //~ ERROR the name `D` is defined multiple times\n     //~| `D` redefined here\n-    //~| NOTE `D` must be defined only once in the type namespace of this module\n }\n \n fn main() {}"}, {"sha": "e7a308eacfe789bcdfa9658b2398a702d4f8cd69", "filename": "src/test/ui/issue-19498.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19498.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,45 +1,45 @@\n error[E0255]: the name `A` is defined multiple times\n   --> $DIR/issue-19498.rs:13:1\n    |\n-11 | use self::A; //~ NOTE previous import of the module `A` here\n+11 | use self::A;\n    |     ------- previous import of the module `A` here\n-12 | use self::B; //~ NOTE previous import of the module `B` here\n+12 | use self::B;\n 13 | mod A {} //~ ERROR the name `A` is defined multiple times\n    | ^^^^^^^^ `A` redefined here\n    |\n    = note: `A` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use self::A as OtherA; //~ NOTE previous import of the module `A` here\n+11 | use self::A as OtherA;\n    |     ^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `B` is defined multiple times\n-  --> $DIR/issue-19498.rs:16:1\n+  --> $DIR/issue-19498.rs:15:1\n    |\n-12 | use self::B; //~ NOTE previous import of the module `B` here\n+12 | use self::B;\n    |     ------- previous import of the module `B` here\n ...\n-16 | pub mod B {} //~ ERROR the name `B` is defined multiple times\n+15 | pub mod B {} //~ ERROR the name `B` is defined multiple times\n    | ^^^^^^^^^^^^ `B` redefined here\n    |\n    = note: `B` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-12 | use self::B as OtherB; //~ NOTE previous import of the module `B` here\n+12 | use self::B as OtherB;\n    |     ^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `D` is defined multiple times\n-  --> $DIR/issue-19498.rs:21:5\n+  --> $DIR/issue-19498.rs:19:5\n    |\n-20 |     use C::D; //~ NOTE previous import of the module `D` here\n+18 |     use C::D;\n    |         ---- previous import of the module `D` here\n-21 |     mod D {} //~ ERROR the name `D` is defined multiple times\n+19 |     mod D {} //~ ERROR the name `D` is defined multiple times\n    |     ^^^^^^^^ `D` redefined here\n    |\n    = note: `D` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-20 |     use C::D as OtherD; //~ NOTE previous import of the module `D` here\n+18 |     use C::D as OtherD;\n    |         ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "377aef2f7d7d5ea95573b524a6a0586ab3396b04", "filename": "src/test/ui/issue-19707.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19707.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,9 +11,7 @@\n #![allow(dead_code)]\n \n type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n-//~^ HELP the signature does not say whether it is borrowed from argument 1 or argument 2\n \n fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {} //~ ERROR missing lifetime specifier\n-//~^ HELP the signature does not say whether it is borrowed from argument 1 or argument 2\n \n fn main() {}"}, {"sha": "b4d4f6f1bbf8b580321b0f39981b88c2990754ab", "filename": "src/test/ui/issue-19707.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19707.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,9 +7,9 @@ error[E0106]: missing lifetime specifier\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-19707.rs:16:27\n+  --> $DIR/issue-19707.rs:15:27\n    |\n-16 | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {} //~ ERROR missing lifetime specifier\n+15 | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {} //~ ERROR missing lifetime specifier\n    |                           ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2"}, {"sha": "a8350fe0986c044c4241a01aef05f53d78022bc9", "filename": "src/test/ui/issue-19922.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-19922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19922.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,6 +15,4 @@ enum Homura {\n fn main() {\n     let homura = Homura::Akemi { kaname: () };\n     //~^ ERROR variant `Homura::Akemi` has no field named `kaname`\n-    //~| NOTE `Homura::Akemi` does not have this field\n-    //~| NOTE available fields are: `madoka`\n }"}, {"sha": "0a4e7c8ee6bdd11bc981b4f1d8fc4d114632b0b4", "filename": "src/test/ui/issue-20692.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-20692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-20692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20692.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,14 +13,9 @@ trait Array: Sized {}\n fn f<T: Array>(x: &T) {\n     let _ = x\n     //~^ ERROR `Array` cannot be made into an object\n-    //~| NOTE the trait cannot require that `Self : Sized`\n-    //~| NOTE requirements on the impl of `std::ops::CoerceUnsized<&Array>`\n-    //~| NOTE the trait `Array` cannot be made into an object\n     as\n     &Array;\n     //~^ ERROR `Array` cannot be made into an object\n-    //~| NOTE the trait cannot require that `Self : Sized`\n-    //~| NOTE the trait `Array` cannot be made into an object\n }\n \n fn main() {}"}, {"sha": "2a5ddd1b6118fe3723312945adbecbd585ee70c3", "filename": "src/test/ui/issue-20692.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20692.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `Array` cannot be made into an object\n-  --> $DIR/issue-20692.rs:20:5\n+  --> $DIR/issue-20692.rs:17:5\n    |\n-20 |     &Array;\n+17 |     &Array;\n    |     ^^^^^^ the trait `Array` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`"}, {"sha": "da1669bc913f840706b9bc7995ad17d0ea5247fc", "filename": "src/test/ui/issue-21546.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21546.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,66 +12,48 @@\n \n #[allow(non_snake_case)]\n mod Foo { }\n-//~^ NOTE previous definition of the module `Foo` here\n \n #[allow(dead_code)]\n struct Foo;\n //~^ ERROR the name `Foo` is defined multiple times\n-//~| NOTE `Foo` redefined here\n-//~| NOTE `Foo` must be defined only once in the type namespace of this module\n \n #[allow(non_snake_case)]\n mod Bar { }\n-//~^ NOTE previous definition of the module `Bar` here\n \n #[allow(dead_code)]\n struct Bar(i32);\n //~^ ERROR the name `Bar` is defined multiple times\n-//~| NOTE `Bar` redefined here\n-//~| NOTE `Bar` must be defined only once in the type namespace of this module\n \n \n #[allow(dead_code)]\n struct Baz(i32);\n-//~^ NOTE previous definition of the type `Baz` here\n \n #[allow(non_snake_case)]\n mod Baz { }\n //~^ ERROR the name `Baz` is defined multiple times\n-//~| NOTE `Baz` redefined here\n-//~| NOTE `Baz` must be defined only once in the type namespace of this module\n \n \n #[allow(dead_code)]\n struct Qux { x: bool }\n-//~^ NOTE previous definition of the type `Qux` here\n \n #[allow(non_snake_case)]\n mod Qux { }\n //~^ ERROR the name `Qux` is defined multiple times\n-//~| NOTE `Qux` redefined here\n-//~| NOTE `Qux` must be defined only once in the type namespace of this module\n \n \n #[allow(dead_code)]\n struct Quux;\n-//~^ NOTE previous definition of the type `Quux` here\n \n #[allow(non_snake_case)]\n mod Quux { }\n //~^ ERROR the name `Quux` is defined multiple times\n-//~| NOTE `Quux` redefined here\n-//~| NOTE `Quux` must be defined only once in the type namespace of this module\n \n \n #[allow(dead_code)]\n enum Corge { A, B }\n-//~^ NOTE previous definition of the type `Corge` here\n \n #[allow(non_snake_case)]\n mod Corge { }\n //~^ ERROR the name `Corge` is defined multiple times\n-//~| NOTE `Corge` redefined here\n-//~| NOTE `Corge` must be defined only once in the type namespace of this module\n \n fn main() { }"}, {"sha": "9ec8dcdd83a57ad256145ce7d2b1d4ee9e8acac3", "filename": "src/test/ui/issue-21546.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21546.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,65 +1,65 @@\n error[E0428]: the name `Foo` is defined multiple times\n-  --> $DIR/issue-21546.rs:18:1\n+  --> $DIR/issue-21546.rs:17:1\n    |\n 14 | mod Foo { }\n    | ----------- previous definition of the module `Foo` here\n ...\n-18 | struct Foo;\n+17 | struct Foo;\n    | ^^^^^^^^^^^ `Foo` redefined here\n    |\n    = note: `Foo` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `Bar` is defined multiple times\n-  --> $DIR/issue-21546.rs:28:1\n+  --> $DIR/issue-21546.rs:24:1\n    |\n-24 | mod Bar { }\n+21 | mod Bar { }\n    | ----------- previous definition of the module `Bar` here\n ...\n-28 | struct Bar(i32);\n+24 | struct Bar(i32);\n    | ^^^^^^^^^^^^^^^^ `Bar` redefined here\n    |\n    = note: `Bar` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `Baz` is defined multiple times\n-  --> $DIR/issue-21546.rs:39:1\n+  --> $DIR/issue-21546.rs:32:1\n    |\n-35 | struct Baz(i32);\n+29 | struct Baz(i32);\n    | ---------------- previous definition of the type `Baz` here\n ...\n-39 | mod Baz { }\n+32 | mod Baz { }\n    | ^^^^^^^^^^^ `Baz` redefined here\n    |\n    = note: `Baz` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `Qux` is defined multiple times\n-  --> $DIR/issue-21546.rs:50:1\n+  --> $DIR/issue-21546.rs:40:1\n    |\n-46 | struct Qux { x: bool }\n+37 | struct Qux { x: bool }\n    | ---------------------- previous definition of the type `Qux` here\n ...\n-50 | mod Qux { }\n+40 | mod Qux { }\n    | ^^^^^^^^^^^ `Qux` redefined here\n    |\n    = note: `Qux` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `Quux` is defined multiple times\n-  --> $DIR/issue-21546.rs:61:1\n+  --> $DIR/issue-21546.rs:48:1\n    |\n-57 | struct Quux;\n+45 | struct Quux;\n    | ------------ previous definition of the type `Quux` here\n ...\n-61 | mod Quux { }\n+48 | mod Quux { }\n    | ^^^^^^^^^^^^ `Quux` redefined here\n    |\n    = note: `Quux` must be defined only once in the type namespace of this module\n \n error[E0428]: the name `Corge` is defined multiple times\n-  --> $DIR/issue-21546.rs:72:1\n+  --> $DIR/issue-21546.rs:56:1\n    |\n-68 | enum Corge { A, B }\n+53 | enum Corge { A, B }\n    | ------------------- previous definition of the type `Corge` here\n ...\n-72 | mod Corge { }\n+56 | mod Corge { }\n    | ^^^^^^^^^^^^^ `Corge` redefined here\n    |\n    = note: `Corge` must be defined only once in the type namespace of this module"}, {"sha": "e4dfad2433c14c54acc7a0e9dfe26d6ab7db69d1", "filename": "src/test/ui/issue-21600.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21600.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,10 +19,9 @@ impl A {\n \n fn main() {\n     let mut x = A;\n-    call_it(|| {    //~ HELP consider changing this to accept closures that implement `FnMut`\n+    call_it(|| {\n         call_it(|| x.gen());\n         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n         //~^ ERROR cannot borrow data mutably in a captured outer\n-        //~| HELP consider changing this closure to take self by mutable reference\n     });\n }"}, {"sha": "e177e8ede6263e8c1d2aeb230b049fce82f2e731", "filename": "src/test/ui/issue-21600.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21600.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,13 +7,12 @@ error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn`\n help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/issue-21600.rs:22:13\n    |\n-22 |       call_it(|| {    //~ HELP consider changing this to accept closures that implement `FnMut`\n+22 |       call_it(|| {\n    |  _____________^\n 23 | |         call_it(|| x.gen());\n 24 | |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n 25 | |         //~^ ERROR cannot borrow data mutably in a captured outer\n-26 | |         //~| HELP consider changing this closure to take self by mutable reference\n-27 | |     });\n+26 | |     });\n    | |_____^\n \n error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure"}, {"sha": "f9328a58d09359e9f4faeea2a3630357a965a459", "filename": "src/test/ui/issue-21950.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21950.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,8 +16,5 @@ fn main() {\n     let x = &10 as\n             &Add;\n             //~^ ERROR E0393\n-            //~| NOTE missing reference to `RHS`\n-            //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n             //~| ERROR E0191\n-            //~| NOTE missing associated type `Output` value\n }"}, {"sha": "4613c5977fd7f9b886074114e3b636d6f0091387", "filename": "src/test/ui/issue-22370.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22370.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,7 +14,5 @@ trait A<T=Self> {}\n \n fn f(a: &A) {}\n //~^ ERROR E0393\n-//~| NOTE missing reference to `T`\n-//~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n \n fn main() {}"}, {"sha": "b1c636f2ef6458b1c31a4fd5369bb5184098a8eb", "filename": "src/test/ui/issue-22560.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22560.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,15 +14,9 @@ use std::ops::{Add, Sub};\n \n type Test = Add +\n             //~^ ERROR E0393\n-            //~| NOTE missing reference to `RHS`\n-            //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n             //~| ERROR E0191\n-            //~| NOTE missing associated type `Output` value\n             Sub;\n             //~^ ERROR E0393\n-            //~| NOTE missing reference to `RHS`\n-            //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n             //~| ERROR E0225\n-            //~| NOTE non-auto additional trait\n \n fn main() { }"}, {"sha": "1c594cb6cb8589f54e634585a80d924dfd9c77cb", "filename": "src/test/ui/issue-22560.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22560.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,17 +7,17 @@ error[E0393]: the type parameter `RHS` must be explicitly specified\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `RHS` must be explicitly specified\n-  --> $DIR/issue-22560.rs:21:13\n+  --> $DIR/issue-22560.rs:18:13\n    |\n-21 |             Sub;\n+18 |             Sub;\n    |             ^^^ missing reference to `RHS`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/issue-22560.rs:21:13\n+  --> $DIR/issue-22560.rs:18:13\n    |\n-21 |             Sub;\n+18 |             Sub;\n    |             ^^^ non-auto additional trait\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n@@ -26,11 +26,8 @@ error[E0191]: the value of the associated type `Output` (from the trait `std::op\n 15 |   type Test = Add +\n    |  _____________^\n 16 | |             //~^ ERROR E0393\n-17 | |             //~| NOTE missing reference to `RHS`\n-18 | |             //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n-19 | |             //~| ERROR E0191\n-20 | |             //~| NOTE missing associated type `Output` value\n-21 | |             Sub;\n+17 | |             //~| ERROR E0191\n+18 | |             Sub;\n    | |_______________^ missing associated type `Output` value\n \n error: aborting due to 4 previous errors"}, {"sha": "4aa2571cad0cc9418709407687ff5ba9ac19056d", "filename": "src/test/ui/issue-22886.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22886.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22886.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22886.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -21,7 +21,6 @@ fn crash_please() {\n struct Newtype(Option<Box<usize>>);\n \n impl<'a> Iterator for Newtype { //~ ERROR E0207\n-                                //~| NOTE unconstrained lifetime parameter\n     type Item = &'a Box<usize>;\n \n     fn next(&mut self) -> Option<&Box<usize>> {"}, {"sha": "e887c7760d693ac5c883fe1e7cb52eecb35dfaf1", "filename": "src/test/ui/issue-22933-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22933-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Delicious { //~ NOTE variant `PIE` not found here\n+enum Delicious {\n     Pie      = 0x1,\n     Apple    = 0x2,\n     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n     //~^ ERROR no variant named `PIE` found for type `Delicious`\n-    //~| NOTE variant not found in `Delicious`\n }\n \n fn main() {}"}, {"sha": "8853d43408c006fbdbf85e1de4ddc47d028e00b6", "filename": "src/test/ui/issue-22933-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22933-2.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no variant named `PIE` found for type `Delicious` in the current scope\n   --> $DIR/issue-22933-2.rs:14:44\n    |\n-11 | enum Delicious { //~ NOTE variant `PIE` not found here\n+11 | enum Delicious {\n    | -------------- variant `PIE` not found here\n ...\n 14 |     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,"}, {"sha": "1a9bb4c29f3e0183ad2f0a6a0cf45e5dd44f0214", "filename": "src/test/ui/issue-23041.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23041.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,5 +14,4 @@ fn main()\n     fn bar(x:i32) ->i32 { 3*x };\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n-                                  //~| NOTE cannot infer type for `_`\n }"}, {"sha": "17e5317b9fe4937ff5b33a9ca3767d98191cebfc", "filename": "src/test/ui/issue-23173.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23173.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,11 +9,7 @@\n // except according to those terms.\n \n enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n-//~^ NOTE variant `Homura` not found here\n struct Struct {\n-    //~^ NOTE function or associated item `method` not found for this\n-    //~| NOTE function or associated item `method` not found for this\n-    //~| NOTE associated item `Assoc` not found for this\n     a: usize,\n }\n \n@@ -22,14 +18,10 @@ fn use_token(token: &Token) { unimplemented!() }\n fn main() {\n     use_token(&Token::Homura);\n     //~^ ERROR no variant named `Homura`\n-    //~| NOTE variant not found in `Token`\n     Struct::method();\n     //~^ ERROR no function or associated item named `method` found for type\n-    //~| NOTE function or associated item not found in `Struct`\n     Struct::method;\n     //~^ ERROR no function or associated item named `method` found for type\n-    //~| NOTE function or associated item not found in `Struct`\n     Struct::Assoc;\n     //~^ ERROR no associated item named `Assoc` found for type `Struct` in\n-    //~| NOTE associated item not found in `Struct`\n }"}, {"sha": "38a22257ff843ff9d56531725daa02f7ac078b3d", "filename": "src/test/ui/issue-23173.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23173.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,37 +1,37 @@\n error[E0599]: no variant named `Homura` found for type `Token` in the current scope\n-  --> $DIR/issue-23173.rs:23:16\n+  --> $DIR/issue-23173.rs:19:16\n    |\n 11 | enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n    | ---------- variant `Homura` not found here\n ...\n-23 |     use_token(&Token::Homura);\n+19 |     use_token(&Token::Homura);\n    |                ^^^^^^^^^^^^^ variant not found in `Token`\n \n error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n-  --> $DIR/issue-23173.rs:26:5\n+  --> $DIR/issue-23173.rs:21:5\n    |\n-13 | struct Struct {\n+12 | struct Struct {\n    | ------------- function or associated item `method` not found for this\n ...\n-26 |     Struct::method();\n+21 |     Struct::method();\n    |     ^^^^^^^^^^^^^^ function or associated item not found in `Struct`\n \n error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n-  --> $DIR/issue-23173.rs:29:5\n+  --> $DIR/issue-23173.rs:23:5\n    |\n-13 | struct Struct {\n+12 | struct Struct {\n    | ------------- function or associated item `method` not found for this\n ...\n-29 |     Struct::method;\n+23 |     Struct::method;\n    |     ^^^^^^^^^^^^^^ function or associated item not found in `Struct`\n \n error[E0599]: no associated item named `Assoc` found for type `Struct` in the current scope\n-  --> $DIR/issue-23173.rs:32:5\n+  --> $DIR/issue-23173.rs:25:5\n    |\n-13 | struct Struct {\n+12 | struct Struct {\n    | ------------- associated item `Assoc` not found for this\n ...\n-32 |     Struct::Assoc;\n+25 |     Struct::Assoc;\n    |     ^^^^^^^^^^^^^ associated item not found in `Struct`\n \n error: aborting due to 4 previous errors"}, {"sha": "dc51adf42aad246da2f5ffe4909f183e75fecf74", "filename": "src/test/ui/issue-23217.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub enum SomeEnum { //~ NOTE variant `A` not found here\n+pub enum SomeEnum {\n     B = SomeEnum::A,\n     //~^ ERROR no variant named `A` found for type `SomeEnum`\n-    //~| NOTE variant not found in `SomeEnum`\n }\n \n fn main() {}"}, {"sha": "eae6c2de9c5659399d85240fd835c8cb7074f4e7", "filename": "src/test/ui/issue-23217.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no variant named `A` found for type `SomeEnum` in the current scope\n   --> $DIR/issue-23217.rs:12:9\n    |\n-11 | pub enum SomeEnum { //~ NOTE variant `A` not found here\n+11 | pub enum SomeEnum {\n    | ----------------- variant `A` not found here\n 12 |     B = SomeEnum::A,\n    |         ^^^^^^^^^^^ variant not found in `SomeEnum`"}, {"sha": "2d93ab0c30c8f9c093a76067d5e7d3cad504ede7", "filename": "src/test/ui/issue-23302.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,21 +12,17 @@\n // the appropriate error (rather than, say, blowing the stack).\n enum X {\n     A = X::A as isize, //~ ERROR E0265\n-                       //~^ NOTE recursion not allowed in constant\n }\n \n // Since `Y::B` here defaults to `Y::A+1`, this is also a\n // recursive definition.\n enum Y {\n     A = Y::B as isize, //~ ERROR E0265\n-                       //~^ NOTE recursion not allowed in constant\n     B,\n }\n \n const A: i32 = B; //~ ERROR E0265\n-                  //~^ NOTE recursion not allowed in constant\n \n const B: i32 = A; //~ ERROR E0265\n-                  //~^ NOTE recursion not allowed in constant\n \n fn main() { }"}, {"sha": "4e93809fac3741cc925a8d46c914a0f095aaca65", "filename": "src/test/ui/issue-23302.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,21 +5,21 @@ error[E0265]: recursive constant\n    |         ^^^^^^^^^^^^^ recursion not allowed in constant\n \n error[E0265]: recursive constant\n-  --> $DIR/issue-23302.rs:21:9\n+  --> $DIR/issue-23302.rs:20:9\n    |\n-21 |     A = Y::B as isize, //~ ERROR E0265\n+20 |     A = Y::B as isize, //~ ERROR E0265\n    |         ^^^^^^^^^^^^^ recursion not allowed in constant\n \n error[E0265]: recursive constant\n-  --> $DIR/issue-23302.rs:26:1\n+  --> $DIR/issue-23302.rs:24:1\n    |\n-26 | const A: i32 = B; //~ ERROR E0265\n+24 | const A: i32 = B; //~ ERROR E0265\n    | ^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n \n error[E0265]: recursive constant\n-  --> $DIR/issue-23302.rs:29:1\n+  --> $DIR/issue-23302.rs:26:1\n    |\n-29 | const B: i32 = A; //~ ERROR E0265\n+26 | const B: i32 = A; //~ ERROR E0265\n    | ^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n \n error: aborting due to 4 previous errors"}, {"sha": "4ed44154c4748ce51514dc0201904507127a0a2d", "filename": "src/test/ui/issue-23543.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23543.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,7 +16,6 @@ pub trait D {\n     fn f<T>(self)\n         where T<Bogus = Foo>: A;\n         //~^ ERROR associated type bindings are not allowed here [E0229]\n-        //~| NOTE associated type not allowed here\n }\n \n fn main() {}"}, {"sha": "1d7c2187045ea28efdfe5925b5214437cc863a55", "filename": "src/test/ui/issue-23544.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23544.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,7 +14,6 @@ pub trait D {\n     fn f<T>(self)\n         where T<Bogus = Self::AlsoBogus>: A;\n         //~^ ERROR associated type bindings are not allowed here [E0229]\n-        //~| NOTE associated type not allowed here\n }\n \n fn main() {}"}, {"sha": "7b72e5689ba4d5b2fd0069a668c93ef4f0ba464d", "filename": "src/test/ui/issue-23716.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23716.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n static foo: i32 = 0;\n-//~^ NOTE a static `foo` is defined here\n \n fn bar(foo: i32) {}\n //~^ ERROR function parameters cannot shadow statics\n@@ -20,7 +19,6 @@ mod submod {\n }\n \n use self::submod::answer;\n-//~^ NOTE a static `answer` is imported here\n \n fn question(answer: i32) {}\n //~^ ERROR function parameters cannot shadow statics"}, {"sha": "2db67c7ec00dd17545a70f2d7a666f2863c079e0", "filename": "src/test/ui/issue-23716.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-23716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23716.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,19 +1,19 @@\n error[E0530]: function parameters cannot shadow statics\n-  --> $DIR/issue-23716.rs:14:8\n+  --> $DIR/issue-23716.rs:13:8\n    |\n 11 | static foo: i32 = 0;\n    | -------------------- a static `foo` is defined here\n-...\n-14 | fn bar(foo: i32) {}\n+12 | \n+13 | fn bar(foo: i32) {}\n    |        ^^^ cannot be named the same as a static\n \n error[E0530]: function parameters cannot shadow statics\n-  --> $DIR/issue-23716.rs:25:13\n+  --> $DIR/issue-23716.rs:23:13\n    |\n-22 | use self::submod::answer;\n+21 | use self::submod::answer;\n    |     -------------------- a static `answer` is imported here\n-...\n-25 | fn question(answer: i32) {}\n+22 | \n+23 | fn question(answer: i32) {}\n    |             ^^^^^^ cannot be named the same as a static\n \n error: aborting due to 2 previous errors"}, {"sha": "94ac17de4c0d05ff7b367d14c07db2f801defef2", "filename": "src/test/ui/issue-24036.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24036.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,26 +12,15 @@ fn closure_to_loc() {\n     let mut x = |c| c + 1;\n     x = |c| c + 1;\n     //~^ ERROR mismatched types\n-    //~| NOTE no two closures, even if identical, have the same type\n-    //~| HELP consider boxing your closure and/or using it as a trait object\n-    //~| expected closure, found a different closure\n-    //~| expected type `[closure\n-    //~| found type `[closure\n }\n \n fn closure_from_match() {\n     let x = match 1usize {\n+    //~^ ERROR match arms have incompatible types\n         1 => |c| c + 1,\n         2 => |c| c - 1,\n-        //~^ NOTE match arm with an incompatible type\n         _ => |c| c - 1\n     };\n-    //~^^^^^^ ERROR match arms have incompatible types\n-    //~| NOTE no two closures, even if identical, have the same type\n-    //~| HELP consider boxing your closure and/or using it as a trait object\n-    //~| expected closure, found a different closure\n-    //~| expected type `[closure\n-    //~| found type `[closure\n }\n \n fn main() { }"}, {"sha": "1a70e90c0cc15aabc9eba16f2dd8897176b229c8", "filename": "src/test/ui/issue-24036.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24036.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,45 +18,45 @@ help: consider boxing your closure and/or using it as a trait object\n    |         ^^^^^^^^^\n \n error[E0308]: match arms have incompatible types\n-  --> $DIR/issue-24036.rs:23:13\n+  --> $DIR/issue-24036.rs:18:13\n    |\n-23 |       let x = match 1usize {\n+18 |       let x = match 1usize {\n    |  _____________^\n-24 | |         1 => |c| c + 1,\n-25 | |         2 => |c| c - 1,\n-26 | |         //~^ NOTE match arm with an incompatible type\n-27 | |         _ => |c| c - 1\n-28 | |     };\n+19 | |     //~^ ERROR match arms have incompatible types\n+20 | |         1 => |c| c + 1,\n+21 | |         2 => |c| c - 1,\n+22 | |         _ => |c| c - 1\n+23 | |     };\n    | |_____^ expected closure, found a different closure\n    |\n-   = note: expected type `[closure@$DIR/issue-24036.rs:24:14: 24:23]`\n-              found type `[closure@$DIR/issue-24036.rs:25:14: 25:23]`\n+   = note: expected type `[closure@$DIR/issue-24036.rs:20:14: 20:23]`\n+              found type `[closure@$DIR/issue-24036.rs:21:14: 21:23]`\n note: no two closures, even if identical, have the same type\n-  --> $DIR/issue-24036.rs:23:13\n+  --> $DIR/issue-24036.rs:18:13\n    |\n-23 |       let x = match 1usize {\n+18 |       let x = match 1usize {\n    |  _____________^\n-24 | |         1 => |c| c + 1,\n-25 | |         2 => |c| c - 1,\n-26 | |         //~^ NOTE match arm with an incompatible type\n-27 | |         _ => |c| c - 1\n-28 | |     };\n+19 | |     //~^ ERROR match arms have incompatible types\n+20 | |         1 => |c| c + 1,\n+21 | |         2 => |c| c - 1,\n+22 | |         _ => |c| c - 1\n+23 | |     };\n    | |_____^\n help: consider boxing your closure and/or using it as a trait object\n-  --> $DIR/issue-24036.rs:23:13\n+  --> $DIR/issue-24036.rs:18:13\n    |\n-23 |       let x = match 1usize {\n+18 |       let x = match 1usize {\n    |  _____________^\n-24 | |         1 => |c| c + 1,\n-25 | |         2 => |c| c - 1,\n-26 | |         //~^ NOTE match arm with an incompatible type\n-27 | |         _ => |c| c - 1\n-28 | |     };\n+19 | |     //~^ ERROR match arms have incompatible types\n+20 | |         1 => |c| c + 1,\n+21 | |         2 => |c| c - 1,\n+22 | |         _ => |c| c - 1\n+23 | |     };\n    | |_____^\n note: match arm with an incompatible type\n-  --> $DIR/issue-24036.rs:25:14\n+  --> $DIR/issue-24036.rs:21:14\n    |\n-25 |         2 => |c| c - 1,\n+21 |         2 => |c| c - 1,\n    |              ^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "16530c509f28c97d7d0d53ed721cb334657f248e", "filename": "src/test/ui/issue-24081.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24081.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,26 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ops::Add; //~ NOTE previous import of the trait `Add` here\n-use std::ops::Sub; //~ NOTE previous import of the trait `Sub` here\n-use std::ops::Mul; //~ NOTE previous import of the trait `Mul` here\n-use std::ops::Div; //~ NOTE previous import of the trait `Div` here\n-use std::ops::Rem; //~ NOTE previous import of the trait `Rem` here\n+use std::ops::Add;\n+use std::ops::Sub;\n+use std::ops::Mul;\n+use std::ops::Div;\n+use std::ops::Rem;\n \n type Add = bool; //~ ERROR the name `Add` is defined multiple times\n //~| `Add` redefined here\n-//~| NOTE `Add` must be defined only once in the type namespace of this module\n struct Sub { x: f32 } //~ ERROR the name `Sub` is defined multiple times\n //~| `Sub` redefined here\n-//~| NOTE `Sub` must be defined only once in the type namespace of this module\n enum Mul { A, B } //~ ERROR the name `Mul` is defined multiple times\n //~| `Mul` redefined here\n-//~| NOTE `Mul` must be defined only once in the type namespace of this module\n mod Div { } //~ ERROR the name `Div` is defined multiple times\n //~| `Div` redefined here\n-//~| NOTE `Div` must be defined only once in the type namespace of this module\n trait Rem {  } //~ ERROR the name `Rem` is defined multiple times\n //~| `Rem` redefined here\n-//~| NOTE `Rem` must be defined only once in the type namespace of this module\n \n fn main() {}"}, {"sha": "37a2fba3852c2db8e80fdedb1bf84b7948c1dfef", "filename": "src/test/ui/issue-24081.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24081.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0255]: the name `Add` is defined multiple times\n   --> $DIR/issue-24081.rs:17:1\n    |\n-11 | use std::ops::Add; //~ NOTE previous import of the trait `Add` here\n+11 | use std::ops::Add;\n    |     ------------- previous import of the trait `Add` here\n ...\n 17 | type Add = bool; //~ ERROR the name `Add` is defined multiple times\n@@ -10,67 +10,67 @@ error[E0255]: the name `Add` is defined multiple times\n    = note: `Add` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use std::ops::Add as OtherAdd; //~ NOTE previous import of the trait `Add` here\n+11 | use std::ops::Add as OtherAdd;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Sub` is defined multiple times\n-  --> $DIR/issue-24081.rs:20:1\n+  --> $DIR/issue-24081.rs:19:1\n    |\n-12 | use std::ops::Sub; //~ NOTE previous import of the trait `Sub` here\n+12 | use std::ops::Sub;\n    |     ------------- previous import of the trait `Sub` here\n ...\n-20 | struct Sub { x: f32 } //~ ERROR the name `Sub` is defined multiple times\n+19 | struct Sub { x: f32 } //~ ERROR the name `Sub` is defined multiple times\n    | ^^^^^^^^^^^^^^^^^^^^^ `Sub` redefined here\n    |\n    = note: `Sub` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-12 | use std::ops::Sub as OtherSub; //~ NOTE previous import of the trait `Sub` here\n+12 | use std::ops::Sub as OtherSub;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Mul` is defined multiple times\n-  --> $DIR/issue-24081.rs:23:1\n+  --> $DIR/issue-24081.rs:21:1\n    |\n-13 | use std::ops::Mul; //~ NOTE previous import of the trait `Mul` here\n+13 | use std::ops::Mul;\n    |     ------------- previous import of the trait `Mul` here\n ...\n-23 | enum Mul { A, B } //~ ERROR the name `Mul` is defined multiple times\n+21 | enum Mul { A, B } //~ ERROR the name `Mul` is defined multiple times\n    | ^^^^^^^^^^^^^^^^^ `Mul` redefined here\n    |\n    = note: `Mul` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-13 | use std::ops::Mul as OtherMul; //~ NOTE previous import of the trait `Mul` here\n+13 | use std::ops::Mul as OtherMul;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Div` is defined multiple times\n-  --> $DIR/issue-24081.rs:26:1\n+  --> $DIR/issue-24081.rs:23:1\n    |\n-14 | use std::ops::Div; //~ NOTE previous import of the trait `Div` here\n+14 | use std::ops::Div;\n    |     ------------- previous import of the trait `Div` here\n ...\n-26 | mod Div { } //~ ERROR the name `Div` is defined multiple times\n+23 | mod Div { } //~ ERROR the name `Div` is defined multiple times\n    | ^^^^^^^^^^^ `Div` redefined here\n    |\n    = note: `Div` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-14 | use std::ops::Div as OtherDiv; //~ NOTE previous import of the trait `Div` here\n+14 | use std::ops::Div as OtherDiv;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Rem` is defined multiple times\n-  --> $DIR/issue-24081.rs:29:1\n+  --> $DIR/issue-24081.rs:25:1\n    |\n-15 | use std::ops::Rem; //~ NOTE previous import of the trait `Rem` here\n+15 | use std::ops::Rem;\n    |     ------------- previous import of the trait `Rem` here\n ...\n-29 | trait Rem {  } //~ ERROR the name `Rem` is defined multiple times\n+25 | trait Rem {  } //~ ERROR the name `Rem` is defined multiple times\n    | ^^^^^^^^^^^^^^ `Rem` redefined here\n    |\n    = note: `Rem` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-15 | use std::ops::Rem as OtherRem; //~ NOTE previous import of the trait `Rem` here\n+15 | use std::ops::Rem as OtherRem;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors"}, {"sha": "8e9f675b5752cc806d820cfa8d65aeea838da016", "filename": "src/test/ui/issue-24424.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-24424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24424.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,6 +13,5 @@ trait Trait0<'l0>  {}\n \n impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n //~^ ERROR type annotations required: cannot resolve `T0: Trait0<'l0>`\n-//~^^ NOTE required by `Trait0`\n \n fn main() {}"}, {"sha": "aa941bc5691304d45f0c654c9c1fc2627733a9d3", "filename": "src/test/ui/issue-25385.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25385.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,7 +17,6 @@ macro_rules! foo {\n fn main() {\n     let a = 1i32;\n     foo!(a);\n-    //~^ NOTE in this expansion of foo!\n \n     foo!(1i32.foo());\n     //~^ ERROR no method named `foo` found for type `i32` in the current scope"}, {"sha": "467cfc53388bc2e98881f6202592081d31845890", "filename": "src/test/ui/issue-25385.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25385.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25385.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25385.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,9 +8,9 @@ error[E0599]: no method named `foo` found for type `i32` in the current scope\n    |     -------- in this macro invocation\n \n error[E0599]: no method named `foo` found for type `i32` in the current scope\n-  --> $DIR/issue-25385.rs:22:15\n+  --> $DIR/issue-25385.rs:21:15\n    |\n-22 |     foo!(1i32.foo());\n+21 |     foo!(1i32.foo());\n    |               ^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "4f3d29216e443628bf51dacdc326cbb7ed7161d1", "filename": "src/test/ui/issue-25793.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,7 +12,6 @@ macro_rules! width(\n     ($this:expr) => {\n         $this.width.unwrap()\n         //~^ ERROR cannot use `self.width` because it was mutably borrowed\n-        //~| NOTE use of borrowed `*self`\n     }\n );\n \n@@ -27,8 +26,6 @@ impl HasInfo {\n \n     fn get_other(&mut self) -> usize {\n         self.get_size(width!(self))\n-        //~^ NOTE in this expansion of width!\n-        //~| NOTE borrow of `*self` occurs here\n     }\n }\n "}, {"sha": "914cc6fc42677e14ceb9e80d1f8b37066fd8e5f1", "filename": "src/test/ui/issue-25793.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25793.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25793.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `self.width` because it was mutably borrowed\n 13 |         $this.width.unwrap()\n    |         ^^^^^^^^^^^ use of borrowed `*self`\n ...\n-29 |         self.get_size(width!(self))\n+28 |         self.get_size(width!(self))\n    |         ----          ------------ in this macro invocation\n    |         |\n    |         borrow of `*self` occurs here"}, {"sha": "00e1279d58a0eb850233acdd9967d7b975e6cb31", "filename": "src/test/ui/issue-25826.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25826.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,6 +12,5 @@ fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = id::<u8> as *const () < id::<u16> as *const ();\n     //~^ ERROR raw pointers cannot be compared in constants [E0395]\n-    //~^^ NOTE comparing raw pointers in static\n     println!(\"{}\", A);\n }"}, {"sha": "2dad23514403b97929716d47e9c0522c7b95e817", "filename": "src/test/ui/issue-26056.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26056.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26056.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26056.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -29,6 +29,4 @@ fn main() {\n     let _ = &()\n         as &Map<Key=u32,MapValue=u32>;\n     //~^ ERROR E0038\n-    //~| NOTE the trait cannot use `Self` as a type parameter\n-    //~| NOTE the trait `Map` cannot be made into an object\n }"}, {"sha": "3489a2ca9be1517f920ee2a2c008512acc4d87d5", "filename": "src/test/ui/issue-26093.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26093.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,11 +12,9 @@ macro_rules! not_an_lvalue {\n     ($thing:expr) => {\n         $thing = 42;\n         //~^ ERROR invalid left-hand side expression\n-        //~^^ NOTE left-hand of expression not valid\n     }\n }\n \n fn main() {\n     not_an_lvalue!(99);\n-    //~^ NOTE in this expansion of not_an_lvalue!\n }"}, {"sha": "c2b81b2ce43fdd70a568ae4a4c398ac66d1344eb", "filename": "src/test/ui/issue-26093.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26093.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -4,7 +4,7 @@ error[E0070]: invalid left-hand side expression\n 13 |         $thing = 42;\n    |         ^^^^^^^^^^^ left-hand of expression not valid\n ...\n-20 |     not_an_lvalue!(99);\n+19 |     not_an_lvalue!(99);\n    |     ------------------- in this macro invocation\n \n error: aborting due to previous error"}, {"sha": "9b25eb72f3d466efc4aeb5e0f52226d827ef21c0", "filename": "src/test/ui/issue-26472.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26472.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -20,5 +20,4 @@ fn main() {\n     let s = sub::S::new();\n     let v = s.len;\n     //~^ ERROR field `len` of struct `sub::S` is private\n-    //~| NOTE a method `len` also exists, perhaps you wish to call it\n }"}, {"sha": "85a10588975e5f33f1f7f41bb678434cc3b7e2d7", "filename": "src/test/ui/issue-26638.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26638.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,16 +10,11 @@\n \n fn parse_type(iter: Box<Iterator<Item=&str>+'static>) -> &str { iter.next() }\n //~^ ERROR missing lifetime specifier [E0106]\n-//~^^ HELP 2 lifetimes\n \n fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n //~^ ERROR missing lifetime specifier [E0106]\n-//~^^ HELP lifetime cannot be derived\n-//~^^^ HELP consider giving it an explicit bounded or 'static lifetime\n \n fn parse_type_3() -> &str { unimplemented!() }\n //~^ ERROR missing lifetime specifier [E0106]\n-//~^^ HELP no value for it to be borrowed from\n-//~^^^ HELP consider giving it a 'static lifetime\n \n fn main() {}"}, {"sha": "3b124ff406350d12defd78a997bc57154bdc71ea", "filename": "src/test/ui/issue-26638.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26638.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,18 +7,18 @@ error[E0106]: missing lifetime specifier\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-26638.rs:15:40\n+  --> $DIR/issue-26638.rs:14:40\n    |\n-15 | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n+14 | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n    |                                        ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n    = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-26638.rs:20:22\n+  --> $DIR/issue-26638.rs:17:22\n    |\n-20 | fn parse_type_3() -> &str { unimplemented!() }\n+17 | fn parse_type_3() -> &str { unimplemented!() }\n    |                      ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from"}, {"sha": "24ef7cb74c852a1cdde0096c90c5c83d50ed67d8", "filename": "src/test/ui/issue-26886.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26886.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26886.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26886.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::sync::{self, Arc}; //~ NOTE previous import of the type `Arc` here\n-                            //~^ NOTE previous import of the module `sync` here\n+use std::sync::{self, Arc};\n use std::sync::Arc; //~ ERROR the name `Arc` is defined multiple times\n-                    //~| NOTE `Arc` reimported here\n                     //~| `Arc` must be defined only once in the type namespace of this module\n use std::sync; //~ ERROR the name `sync` is defined multiple times\n-               //~| NOTE `sync` reimported here\n                //~| `sync` must be defined only once in the type namespace of this module\n \n fn main() {"}, {"sha": "cb2eca87068f813e555a954509c5965d6a28b027", "filename": "src/test/ui/issue-26886.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-26886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26886.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,31 +1,30 @@\n error[E0252]: the name `Arc` is defined multiple times\n-  --> $DIR/issue-26886.rs:13:5\n+  --> $DIR/issue-26886.rs:12:5\n    |\n-11 | use std::sync::{self, Arc}; //~ NOTE previous import of the type `Arc` here\n+11 | use std::sync::{self, Arc};\n    |                       --- previous import of the type `Arc` here\n-12 |                             //~^ NOTE previous import of the module `sync` here\n-13 | use std::sync::Arc; //~ ERROR the name `Arc` is defined multiple times\n+12 | use std::sync::Arc; //~ ERROR the name `Arc` is defined multiple times\n    |     ^^^^^^^^^^^^^^ `Arc` reimported here\n    |\n    = note: `Arc` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-13 | use std::sync::Arc as OtherArc; //~ ERROR the name `Arc` is defined multiple times\n+12 | use std::sync::Arc as OtherArc; //~ ERROR the name `Arc` is defined multiple times\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0252]: the name `sync` is defined multiple times\n-  --> $DIR/issue-26886.rs:16:5\n+  --> $DIR/issue-26886.rs:14:5\n    |\n-11 | use std::sync::{self, Arc}; //~ NOTE previous import of the type `Arc` here\n+11 | use std::sync::{self, Arc};\n    |                 ---- previous import of the module `sync` here\n ...\n-16 | use std::sync; //~ ERROR the name `sync` is defined multiple times\n+14 | use std::sync; //~ ERROR the name `sync` is defined multiple times\n    |     ^^^^^^^^^ `sync` reimported here\n    |\n    = note: `sync` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-16 | use std::sync as Othersync; //~ ERROR the name `sync` is defined multiple times\n+14 | use std::sync as Othersync; //~ ERROR the name `sync` is defined multiple times\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "d9dc3458a4a2c0ed68da7bf87a1a769e595df94b", "filename": "src/test/ui/issue-27842.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27842.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,11 +13,9 @@ fn main() {\n     // the case where we show a suggestion\n     let _ = tup[0];\n     //~^ ERROR cannot index into a value of type\n-    //~| HELP to access tuple elements, use\n \n     // the case where we show just a general hint\n     let i = 0_usize;\n     let _ = tup[i];\n     //~^ ERROR cannot index into a value of type\n-    //~| HELP to access tuple elements, use tuple indexing syntax (e.g. `tuple.0`)\n }"}, {"sha": "2e3b20e43ff04324cb3d90afd5f4fc14f0f10b89", "filename": "src/test/ui/issue-27842.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27842.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27842.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27842.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,9 +5,9 @@ error[E0608]: cannot index into a value of type `({integer}, {integer}, {integer\n    |             ^^^^^^ help: to access tuple elements, use: `tup.0`\n \n error[E0608]: cannot index into a value of type `({integer}, {integer}, {integer})`\n-  --> $DIR/issue-27842.rs:20:13\n+  --> $DIR/issue-27842.rs:19:13\n    |\n-20 |     let _ = tup[i];\n+19 |     let _ = tup[i];\n    |             ^^^^^^\n    |\n    = help: to access tuple elements, use tuple indexing syntax (e.g. `tuple.0`)"}, {"sha": "2234aede00df4fe69ba69204dca139a3c40b7de8", "filename": "src/test/ui/issue-27942.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27942.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,18 +11,12 @@\n pub trait Resources<'a> {}\n \n pub trait Buffer<'a, R: Resources<'a>> {\n-    //~^ NOTE the lifetime 'a as defined on the trait at 13:1...\n-    //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the trait\n \n     fn select(&self) -> BufferViewHandle<R>;\n     //~^ ERROR mismatched types\n     //~| lifetime mismatch\n-    //~| NOTE expected type `Resources<'_>`\n-    //~| NOTE ...does not necessarily outlive the anonymous lifetime #1 defined on the method body\n     //~| ERROR mismatched types\n     //~| lifetime mismatch\n-    //~| NOTE expected type `Resources<'_>`\n-    //~| NOTE the anonymous lifetime #1 defined on the method body at 17:5...\n }\n \n pub struct BufferViewHandle<'a, R: 'a+Resources<'a>>(&'a R);"}, {"sha": "b580b8e73137b134e5d43df72fe13e9003a3a70d", "filename": "src/test/ui/issue-27942.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27942.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,32 +1,32 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-27942.rs:17:5\n+  --> $DIR/issue-27942.rs:15:5\n    |\n-17 |     fn select(&self) -> BufferViewHandle<R>;\n+15 |     fn select(&self) -> BufferViewHandle<R>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the anonymous lifetime #1 defined on the method body at 17:5...\n-  --> $DIR/issue-27942.rs:17:5\n+note: the anonymous lifetime #1 defined on the method body at 15:5...\n+  --> $DIR/issue-27942.rs:15:5\n    |\n-17 |     fn select(&self) -> BufferViewHandle<R>;\n+15 |     fn select(&self) -> BufferViewHandle<R>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime 'a as defined on the trait at 13:1\n   --> $DIR/issue-27942.rs:13:1\n    |\n 13 | / pub trait Buffer<'a, R: Resources<'a>> {\n-14 | |     //~^ NOTE the lifetime 'a as defined on the trait at 13:1...\n-15 | |     //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the trait\n-16 | |\n+14 | |\n+15 | |     fn select(&self) -> BufferViewHandle<R>;\n+16 | |     //~^ ERROR mismatched types\n ...  |\n-25 | |     //~| NOTE the anonymous lifetime #1 defined on the method body at 17:5...\n-26 | | }\n+19 | |     //~| lifetime mismatch\n+20 | | }\n    | |_^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-27942.rs:17:5\n+  --> $DIR/issue-27942.rs:15:5\n    |\n-17 |     fn select(&self) -> BufferViewHandle<R>;\n+15 |     fn select(&self) -> BufferViewHandle<R>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Resources<'_>`\n@@ -35,17 +35,17 @@ note: the lifetime 'a as defined on the trait at 13:1...\n   --> $DIR/issue-27942.rs:13:1\n    |\n 13 | / pub trait Buffer<'a, R: Resources<'a>> {\n-14 | |     //~^ NOTE the lifetime 'a as defined on the trait at 13:1...\n-15 | |     //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the trait\n-16 | |\n+14 | |\n+15 | |     fn select(&self) -> BufferViewHandle<R>;\n+16 | |     //~^ ERROR mismatched types\n ...  |\n-25 | |     //~| NOTE the anonymous lifetime #1 defined on the method body at 17:5...\n-26 | | }\n+19 | |     //~| lifetime mismatch\n+20 | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 17:5\n-  --> $DIR/issue-27942.rs:17:5\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 15:5\n+  --> $DIR/issue-27942.rs:15:5\n    |\n-17 |     fn select(&self) -> BufferViewHandle<R>;\n+15 |     fn select(&self) -> BufferViewHandle<R>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "f3fc94434d3a099ee721d6ae36bca6da256cad53", "filename": "src/test/ui/issue-2848.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-2848.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -20,7 +20,6 @@ fn main() {\n     use bar::foo::{alpha, charlie};\n     match alpha {\n       alpha | beta => {} //~  ERROR variable `beta` is not bound in all patterns\n-      charlie => {}      //~| NOTE pattern doesn't bind `beta`\n-                         //~| NOTE variable not in all patterns\n+      charlie => {}\n     }\n }"}, {"sha": "e8c34198852e428da6d01a90d27ecbc0cf4fce37", "filename": "src/test/ui/issue-28568.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28568.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28568.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28568.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,13 +11,11 @@\n struct MyStruct;\n \n impl Drop for MyStruct {\n-//~^ NOTE first implementation here\n     fn drop(&mut self) { }\n }\n \n impl Drop for MyStruct {\n //~^ ERROR conflicting implementations of trait\n-//~| NOTE conflicting implementation for `MyStruct`\n     fn drop(&mut self) { }\n }\n "}, {"sha": "2b4025ac122571e20120f7585eb06a7e7eee0377", "filename": "src/test/ui/issue-28568.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28568.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28568.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28568.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,17 +1,15 @@\n error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`:\n-  --> $DIR/issue-28568.rs:18:1\n+  --> $DIR/issue-28568.rs:17:1\n    |\n 13 | / impl Drop for MyStruct {\n-14 | | //~^ NOTE first implementation here\n-15 | |     fn drop(&mut self) { }\n-16 | | }\n+14 | |     fn drop(&mut self) { }\n+15 | | }\n    | |_- first implementation here\n-17 | \n-18 | / impl Drop for MyStruct {\n-19 | | //~^ ERROR conflicting implementations of trait\n-20 | | //~| NOTE conflicting implementation for `MyStruct`\n-21 | |     fn drop(&mut self) { }\n-22 | | }\n+16 | \n+17 | / impl Drop for MyStruct {\n+18 | | //~^ ERROR conflicting implementations of trait\n+19 | |     fn drop(&mut self) { }\n+20 | | }\n    | |_^ conflicting implementation for `MyStruct`\n \n error: aborting due to previous error"}, {"sha": "196c4bd2728e7bd8d599bcf5c8311bd0c9d9171a", "filename": "src/test/ui/issue-28776.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28776.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,5 +13,4 @@ use std::ptr;\n fn main() {\n     (&ptr::write)(1 as *mut _, 42);\n     //~^ ERROR E0133\n-    //~| NOTE call to unsafe function\n }"}, {"sha": "91ea18a8c6cf746c652b920088c545092cd7e6aa", "filename": "src/test/ui/issue-28837.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28837.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,47 +14,32 @@ fn main() {\n     let a = A;\n \n     a + a; //~ ERROR binary operation `+` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::Add` might be missing for `A`\n \n     a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::Sub` might be missing for `A`\n \n     a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::Mul` might be missing for `A`\n \n     a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::Div` might be missing for `A`\n \n     a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::Rem` might be missing for `A`\n \n     a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::BitAnd` might be missing for `A`\n \n     a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::BitOr` might be missing for `A`\n \n     a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::Shl` might be missing for `A`\n \n     a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::ops::Shr` might be missing for `A`\n \n     a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n     a != a; //~ ERROR binary operation `!=` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n     a < a; //~ ERROR binary operation `<` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n     a <= a; //~ ERROR binary operation `<=` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n     a > a; //~ ERROR binary operation `>` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n     a >= a; //~ ERROR binary operation `>=` cannot be applied to type `A`\n-    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n }"}, {"sha": "8d9afb5be792a57dbdd2588e706b22f1df914afd", "filename": "src/test/ui/issue-28837.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28837.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,113 +7,113 @@ error[E0369]: binary operation `+` cannot be applied to type `A`\n    = note: an implementation of `std::ops::Add` might be missing for `A`\n \n error[E0369]: binary operation `-` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:19:5\n+  --> $DIR/issue-28837.rs:18:5\n    |\n-19 |     a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n+18 |     a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::ops::Sub` might be missing for `A`\n \n error[E0369]: binary operation `*` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:22:5\n+  --> $DIR/issue-28837.rs:20:5\n    |\n-22 |     a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n+20 |     a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `A`\n \n error[E0369]: binary operation `/` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:25:5\n+  --> $DIR/issue-28837.rs:22:5\n    |\n-25 |     a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n+22 |     a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::ops::Div` might be missing for `A`\n \n error[E0369]: binary operation `%` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:28:5\n+  --> $DIR/issue-28837.rs:24:5\n    |\n-28 |     a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n+24 |     a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::ops::Rem` might be missing for `A`\n \n error[E0369]: binary operation `&` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:31:5\n+  --> $DIR/issue-28837.rs:26:5\n    |\n-31 |     a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n+26 |     a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::ops::BitAnd` might be missing for `A`\n \n error[E0369]: binary operation `|` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:34:5\n+  --> $DIR/issue-28837.rs:28:5\n    |\n-34 |     a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n+28 |     a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::ops::BitOr` might be missing for `A`\n \n error[E0369]: binary operation `<<` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:37:5\n+  --> $DIR/issue-28837.rs:30:5\n    |\n-37 |     a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n+30 |     a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n    |     ^^^^^^\n    |\n    = note: an implementation of `std::ops::Shl` might be missing for `A`\n \n error[E0369]: binary operation `>>` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:40:5\n+  --> $DIR/issue-28837.rs:32:5\n    |\n-40 |     a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n+32 |     a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n    |     ^^^^^^\n    |\n    = note: an implementation of `std::ops::Shr` might be missing for `A`\n \n error[E0369]: binary operation `==` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:43:5\n+  --> $DIR/issue-28837.rs:34:5\n    |\n-43 |     a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n+34 |     a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n    |     ^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n error[E0369]: binary operation `!=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:46:5\n+  --> $DIR/issue-28837.rs:36:5\n    |\n-46 |     a != a; //~ ERROR binary operation `!=` cannot be applied to type `A`\n+36 |     a != a; //~ ERROR binary operation `!=` cannot be applied to type `A`\n    |     ^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n error[E0369]: binary operation `<` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:49:5\n+  --> $DIR/issue-28837.rs:38:5\n    |\n-49 |     a < a; //~ ERROR binary operation `<` cannot be applied to type `A`\n+38 |     a < a; //~ ERROR binary operation `<` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `<=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:52:5\n+  --> $DIR/issue-28837.rs:40:5\n    |\n-52 |     a <= a; //~ ERROR binary operation `<=` cannot be applied to type `A`\n+40 |     a <= a; //~ ERROR binary operation `<=` cannot be applied to type `A`\n    |     ^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `>` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:55:5\n+  --> $DIR/issue-28837.rs:42:5\n    |\n-55 |     a > a; //~ ERROR binary operation `>` cannot be applied to type `A`\n+42 |     a > a; //~ ERROR binary operation `>` cannot be applied to type `A`\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `>=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:58:5\n+  --> $DIR/issue-28837.rs:44:5\n    |\n-58 |     a >= a; //~ ERROR binary operation `>=` cannot be applied to type `A`\n+44 |     a >= a; //~ ERROR binary operation `>=` cannot be applied to type `A`\n    |     ^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`"}, {"sha": "e553fee5a62f98be6b28a18bcccc90f8120d23f9", "filename": "src/test/ui/issue-28971.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,15 +10,14 @@\n \n // This should not cause an ICE\n \n-enum Foo { //~ NOTE variant `Baz` not found here\n+enum Foo {\n     Bar(u8)\n }\n fn main(){\n     foo(|| {\n         match Foo::Bar(1) {\n             Foo::Baz(..) => (),\n             //~^ ERROR no variant named `Baz` found for type `Foo`\n-            //~| NOTE variant not found in `Foo`\n             _ => (),\n         }\n     });"}, {"sha": "6237aae67be60c55a9ddf45befbbabe831c6d2a9", "filename": "src/test/ui/issue-28971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no variant named `Baz` found for type `Foo` in the current scope\n   --> $DIR/issue-28971.rs:19:13\n    |\n-13 | enum Foo { //~ NOTE variant `Baz` not found here\n+13 | enum Foo {\n    | -------- variant `Baz` not found here\n ...\n 19 |             Foo::Baz(..) => (),"}, {"sha": "77fa8192b97b50ee8fcb7b92cf5548bf854e9e60", "filename": "src/test/ui/issue-29124.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-29124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-29124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-29124.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -24,8 +24,6 @@ fn func() -> ret {\n fn main() {\n     obj::func.x();\n     //~^ ERROR no method named `x` found for type `fn() -> ret {obj::func}` in the current scope\n-    //~^^ NOTE obj::func is a function, perhaps you wish to call it\n     func.x();\n     //~^ ERROR no method named `x` found for type `fn() -> ret {func}` in the current scope\n-    //~^^ NOTE func is a function, perhaps you wish to call it\n }"}, {"sha": "0b81526d655e0afea3c1f9d40c7c31ea2d37d938", "filename": "src/test/ui/issue-29124.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-29124.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,9 +7,9 @@ error[E0599]: no method named `x` found for type `fn() -> ret {obj::func}` in th\n    = note: obj::func is a function, perhaps you wish to call it\n \n error[E0599]: no method named `x` found for type `fn() -> ret {func}` in the current scope\n-  --> $DIR/issue-29124.rs:28:10\n+  --> $DIR/issue-29124.rs:27:10\n    |\n-28 |     func.x();\n+27 |     func.x();\n    |          ^\n    |\n    = note: func is a function, perhaps you wish to call it"}, {"sha": "c17833ee830707a68594d794735dec2ba9354486", "filename": "src/test/ui/issue-30007.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30007.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,5 +13,5 @@ macro_rules! t {\n }\n \n fn main() {\n-    let i: Vec<t!()>;       //~ NOTE caused by the macro expansion here\n+    let i: Vec<t!()>;\n }"}, {"sha": "24458ef44c4eef59e2479f2289b8ab52af9072fc", "filename": "src/test/ui/issue-30007.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30007.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error: macro expansion ignores token `;` and any following\n note: caused by the macro expansion here; the usage of `t!` is likely invalid in type context\n   --> $DIR/issue-30007.rs:16:16\n    |\n-16 |     let i: Vec<t!()>;       //~ NOTE caused by the macro expansion here\n+16 |     let i: Vec<t!()>;\n    |                ^^^^\n \n error: aborting due to previous error"}, {"sha": "89de27326b48a420e1eb62feaf1a145328e9f484", "filename": "src/test/ui/issue-3008-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3008-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3008-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-1.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,9 +14,8 @@ enum Foo {\n \n enum Bar {\n     //~^ ERROR recursive type `Bar` has infinite size\n-    //~| NOTE recursive type has infinite size\n     BarNone,\n-    BarSome(Bar)  //~ NOTE recursive without indirection\n+    BarSome(Bar)\n }\n \n fn main() {"}, {"sha": "7d8e10a76062058322fa4de9693d093dc6c1d891", "filename": "src/test/ui/issue-3008-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3008-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3008-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-1.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -4,7 +4,7 @@ error[E0072]: recursive type `Bar` has infinite size\n 15 | enum Bar {\n    | ^^^^^^^^ recursive type has infinite size\n ...\n-19 |     BarSome(Bar)  //~ NOTE recursive without indirection\n+18 |     BarSome(Bar)\n    |             ---- recursive without indirection\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable"}, {"sha": "b627656c91a74599cd0638fdb30d0ff39dca853f", "filename": "src/test/ui/issue-3008-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,8 +11,6 @@\n enum foo { foo_(bar) }\n struct bar { x: bar }\n //~^ ERROR E0072\n-//~| NOTE recursive type has infinite size\n-//~| NOTE recursive without indirection\n \n fn main() {\n }"}, {"sha": "7db0b1ca203b944fa580a230530884e58bddb4a9", "filename": "src/test/ui/issue-30255.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30255.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,19 +17,16 @@ struct S<'a> {\n \n fn f(a: &S, b: i32) -> &i32 {\n //~^ ERROR missing lifetime specifier [E0106]\n-//~^^ HELP does not say which one of `a`'s 2 lifetimes it is borrowed from\n     panic!();\n }\n \n fn g(a: &S, b: bool, c: &i32) -> &i32 {\n //~^ ERROR missing lifetime specifier [E0106]\n-//~^^ HELP does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n     panic!();\n }\n \n fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n //~^ ERROR missing lifetime specifier [E0106]\n-//~^^ HELP does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n     panic!();\n }\n "}, {"sha": "b0c314912cca6d82347980eaf932865310984fcd", "filename": "src/test/ui/issue-30255.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30255.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,17 +7,17 @@ error[E0106]: missing lifetime specifier\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-30255.rs:24:34\n+  --> $DIR/issue-30255.rs:23:34\n    |\n-24 | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n+23 | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n    |                                  ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-30255.rs:30:44\n+  --> $DIR/issue-30255.rs:28:44\n    |\n-30 | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n+28 | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n    |                                            ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`"}, {"sha": "51c76713a766d06cfc654312121bd0d5a844133d", "filename": "src/test/ui/issue-30302.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30302.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,7 +22,6 @@ fn is_empty<T>(s: Stack<T>) -> bool {\n     match s {\n         Nil => true,\n //~^ WARN pattern binding `Nil` is named the same as one of the variants of the type `Stack`\n-//~| HELP consider making the path in the pattern qualified: `Stack::Nil`\n         _ => false\n //~^ ERROR unreachable pattern\n     }"}, {"sha": "e86b588aad222e676b8aabe5708e067e31c36460", "filename": "src/test/ui/issue-30302.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30302.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,9 +7,9 @@ warning[E0170]: pattern binding `Nil` is named the same as one of the variants o\n    = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Stack::Nil`\n \n error: unreachable pattern\n-  --> $DIR/issue-30302.rs:26:9\n+  --> $DIR/issue-30302.rs:25:9\n    |\n-26 |         _ => false\n+25 |         _ => false\n    |         ^ this is an unreachable pattern\n    |\n note: lint level defined here"}, {"sha": "5708f160a41cc172de7973a355aecddc5aaf0931", "filename": "src/test/ui/issue-3044.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3044.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,5 +14,4 @@ fn main() {\n     needlesArr.iter().fold(|x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n-    //~| NOTE expected 2 parameters\n }"}, {"sha": "c57a34a90df78eab93ec01a31f279336cc52ef5a", "filename": "src/test/ui/issue-30730.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30730.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n #![warn(unused)]\n-#![deny(warnings)] //~ NOTE: lint level defined here\n+#![deny(warnings)]\n use std::thread;\n //~^ ERROR: unused import\n-//~| NOTE: #[deny(unused_imports)] implied by #[deny(warnings)]\n fn main() {}"}, {"sha": "192c1f542de5fe7a07b3731ca9d01a8061583d84", "filename": "src/test/ui/issue-30730.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-30730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30730.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error: unused import: `std::thread`\n note: lint level defined here\n   --> $DIR/issue-30730.rs:12:9\n    |\n-12 | #![deny(warnings)] //~ NOTE: lint level defined here\n+12 | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: #[deny(unused_imports)] implied by #[deny(warnings)]\n "}, {"sha": "ca15a869a9c207040daa0f23d3310e4fe2510ea5", "filename": "src/test/ui/issue-31221.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-31221.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_variables)]\n #![allow(non_snake_case)]\n #![deny(unreachable_patterns)]\n-//~^ NOTE lint level defined here\n \n #[derive(Clone, Copy)]\n enum Enum {\n@@ -26,26 +25,20 @@ fn main() {\n     match s {\n         Var1 => (),\n         Var3 => (),\n-        //~^ NOTE this pattern matches any value\n         Var2 => (),\n         //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is an unreachable pattern\n     };\n     match &s {\n         &Var1 => (),\n         &Var3 => (),\n-        //~^ NOTE this pattern matches any value\n         &Var2 => (),\n         //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is an unreachable pattern\n     };\n     let t = (Var1, Var1);\n     match t {\n         (Var1, b) => (),\n         (c, d) => (),\n-        //~^ NOTE this pattern matches any value\n         anything => ()\n         //~^ ERROR unreachable pattern\n-        //~^^ NOTE this is an unreachable pattern\n     };\n }"}, {"sha": "ccc1df04ff7df285ff8a7febf1ff6e72ef97fa6c", "filename": "src/test/ui/issue-31221.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-31221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-31221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-31221.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error: unreachable pattern\n-  --> $DIR/issue-31221.rs:30:9\n+  --> $DIR/issue-31221.rs:28:9\n    |\n-30 |         Var2 => (),\n+28 |         Var2 => (),\n    |         ^^^^ this is an unreachable pattern\n    |\n note: lint level defined here\n@@ -10,33 +10,33 @@ note: lint level defined here\n 14 | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n note: this pattern matches any value\n-  --> $DIR/issue-31221.rs:28:9\n+  --> $DIR/issue-31221.rs:27:9\n    |\n-28 |         Var3 => (),\n+27 |         Var3 => (),\n    |         ^^^^\n \n error: unreachable pattern\n-  --> $DIR/issue-31221.rs:38:9\n+  --> $DIR/issue-31221.rs:34:9\n    |\n-38 |         &Var2 => (),\n+34 |         &Var2 => (),\n    |         ^^^^^ this is an unreachable pattern\n    |\n note: this pattern matches any value\n-  --> $DIR/issue-31221.rs:36:9\n+  --> $DIR/issue-31221.rs:33:9\n    |\n-36 |         &Var3 => (),\n+33 |         &Var3 => (),\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/issue-31221.rs:47:9\n+  --> $DIR/issue-31221.rs:41:9\n    |\n-47 |         anything => ()\n+41 |         anything => ()\n    |         ^^^^^^^^ this is an unreachable pattern\n    |\n note: this pattern matches any value\n-  --> $DIR/issue-31221.rs:45:9\n+  --> $DIR/issue-31221.rs:40:9\n    |\n-45 |         (c, d) => (),\n+40 |         (c, d) => (),\n    |         ^^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "8af243afc22996b064c55ecc24e68aec2c7d82c4", "filename": "src/test/ui/issue-32326.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-32326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-32326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32326.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,10 +13,7 @@\n // too big.\n \n enum Expr { //~ ERROR E0072\n-            //~| NOTE recursive type has infinite size\n     Plus(Expr, Expr),\n-    //~^ NOTE recursive without indirection\n-    //~| NOTE recursive without indirection\n     Literal(i64),\n }\n "}, {"sha": "f907e3adaf180cc2c9de412f90ee0ad7314a0f32", "filename": "src/test/ui/issue-32326.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-32326.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-32326.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32326.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -3,8 +3,7 @@ error[E0072]: recursive type `Expr` has infinite size\n    |\n 15 | enum Expr { //~ ERROR E0072\n    | ^^^^^^^^^ recursive type has infinite size\n-16 |             //~| NOTE recursive type has infinite size\n-17 |     Plus(Expr, Expr),\n+16 |     Plus(Expr, Expr),\n    |          ----- ----- recursive without indirection\n    |          |\n    |          recursive without indirection"}, {"sha": "4e5cdd50b2a95b241205cd7d4f69198376a58df3", "filename": "src/test/ui/issue-32950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-32950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-32950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32950.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(concat_idents)]\n \n-#[derive(Debug)] //~ NOTE in this expansion\n+#[derive(Debug)]\n struct Baz<T>(\n     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n );"}, {"sha": "db284102503114a44641cb5375973e217a2e533c", "filename": "src/test/ui/issue-34047.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-34047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-34047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-34047.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const C: u8 = 0; //~ NOTE a constant `C` is defined here\n+const C: u8 = 0;\n \n fn main() {\n     match 1u8 {\n         mut C => {} //~ ERROR match bindings cannot shadow constants\n-        //~^ NOTE cannot be named the same as a constant\n         _ => {}\n     }\n }"}, {"sha": "0c109bffb247cd3a7b9c369ffb2a33ec6334ed77", "filename": "src/test/ui/issue-34047.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-34047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-34047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-34047.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0530]: match bindings cannot shadow constants\n   --> $DIR/issue-34047.rs:15:13\n    |\n-11 | const C: u8 = 0; //~ NOTE a constant `C` is defined here\n+11 | const C: u8 = 0;\n    | ---------------- a constant `C` is defined here\n ...\n 15 |         mut C => {} //~ ERROR match bindings cannot shadow constants"}, {"sha": "b3cb7d4cc30533e2c28e2794b6f66b71a665aa51", "filename": "src/test/ui/issue-34209.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-34209.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,8 +16,6 @@ fn bug(l: S) {\n     match l {\n         S::B{ } => { },\n         //~^ ERROR ambiguous associated type\n-        //~| NOTE ambiguous associated type\n-        //~| NOTE specify the type using the syntax `<S as Trait>::B`\n     }\n }\n "}, {"sha": "67f0e7aaf9717ee68161684dccc9d3ee6caf026c", "filename": "src/test/ui/issue-35139.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35139.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,7 +17,6 @@ pub trait MethodType {\n pub struct MTFn;\n \n impl<'a> MethodType for MTFn { //~ ERROR E0207\n-                               //~| NOTE unconstrained lifetime parameter\n     type GetProp = fmt::Debug + 'a;\n }\n "}, {"sha": "f34954681510efc447dcdaab41aae65e52981c77", "filename": "src/test/ui/issue-35675.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,49 +9,34 @@\n // except according to those terms.\n \n // these two HELPs are actually in a new line between this line and the `enum Fruit` line\n-enum Fruit { //~ HELP possible candidate is found in another module, you can import it into scope\n-    //~^ HELP possible candidate is found in another module, you can import it into scope\n+enum Fruit {\n     Apple(i64),\n     Orange(i64),\n }\n \n fn should_return_fruit() -> Apple {\n     //~^ ERROR cannot find type `Apple` in this scope\n-    //~| NOTE not found in this scope\n-    //~| HELP you can try using the variant's enum\n     Apple(5)\n     //~^ ERROR cannot find function `Apple` in this scope\n-    //~| NOTE not found in this scope\n }\n \n fn should_return_fruit_too() -> Fruit::Apple {\n     //~^ ERROR expected type, found variant `Fruit::Apple`\n-    //~| NOTE not a type\n-    //~| HELP you can try using the variant's enum\n     Apple(5)\n     //~^ ERROR cannot find function `Apple` in this scope\n-    //~| NOTE not found in this scope\n }\n \n fn foo() -> Ok {\n     //~^ ERROR expected type, found variant `Ok`\n-    //~| NOTE not a type\n-    //~| HELP there is an enum variant\n-    //~| HELP there is an enum variant\n     Ok(())\n }\n \n fn bar() -> Variant3 {\n     //~^ ERROR cannot find type `Variant3` in this scope\n-    //~| NOTE not found in this scope\n-    //~| HELP you can try using the variant's enum\n }\n \n fn qux() -> Some {\n     //~^ ERROR expected type, found variant `Some`\n-    //~| NOTE not a type\n-    //~| HELP there is an enum variant\n-    //~| HELP there is an enum variant\n     Some(1)\n }\n "}, {"sha": "c4d0e51c07e076d312e06d80bb6a99fbb82607e6", "filename": "src/test/ui/issue-35675.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,63 +1,63 @@\n error[E0412]: cannot find type `Apple` in this scope\n-  --> $DIR/issue-35675.rs:18:29\n+  --> $DIR/issue-35675.rs:17:29\n    |\n-18 | fn should_return_fruit() -> Apple {\n+17 | fn should_return_fruit() -> Apple {\n    |                             ^^^^^\n    |                             |\n    |                             not found in this scope\n    |                             help: you can try using the variant's enum: `Fruit`\n \n error[E0425]: cannot find function `Apple` in this scope\n-  --> $DIR/issue-35675.rs:22:5\n+  --> $DIR/issue-35675.rs:19:5\n    |\n-22 |     Apple(5)\n+19 |     Apple(5)\n    |     ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n 12 | use Fruit::Apple;\n    |\n \n error[E0573]: expected type, found variant `Fruit::Apple`\n-  --> $DIR/issue-35675.rs:27:33\n+  --> $DIR/issue-35675.rs:23:33\n    |\n-27 | fn should_return_fruit_too() -> Fruit::Apple {\n+23 | fn should_return_fruit_too() -> Fruit::Apple {\n    |                                 ^^^^^^^^^^^^\n    |                                 |\n    |                                 not a type\n    |                                 help: you can try using the variant's enum: `Fruit`\n \n error[E0425]: cannot find function `Apple` in this scope\n-  --> $DIR/issue-35675.rs:31:5\n+  --> $DIR/issue-35675.rs:25:5\n    |\n-31 |     Apple(5)\n+25 |     Apple(5)\n    |     ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n 12 | use Fruit::Apple;\n    |\n \n error[E0573]: expected type, found variant `Ok`\n-  --> $DIR/issue-35675.rs:36:13\n+  --> $DIR/issue-35675.rs:29:13\n    |\n-36 | fn foo() -> Ok {\n+29 | fn foo() -> Ok {\n    |             ^^ not a type\n    |\n    = help: there is an enum variant `std::prelude::v1::Ok`, try using `std::prelude::v1`?\n    = help: there is an enum variant `std::result::Result::Ok`, try using `std::result::Result`?\n \n error[E0412]: cannot find type `Variant3` in this scope\n-  --> $DIR/issue-35675.rs:44:13\n+  --> $DIR/issue-35675.rs:34:13\n    |\n-44 | fn bar() -> Variant3 {\n+34 | fn bar() -> Variant3 {\n    |             ^^^^^^^^\n    |             |\n    |             not found in this scope\n    |             help: you can try using the variant's enum: `x::Enum`\n \n error[E0573]: expected type, found variant `Some`\n-  --> $DIR/issue-35675.rs:50:13\n+  --> $DIR/issue-35675.rs:38:13\n    |\n-50 | fn qux() -> Some {\n+38 | fn qux() -> Some {\n    |             ^^^^ not a type\n    |\n    = help: there is an enum variant `std::prelude::v1::Option::Some`, try using `std::prelude::v1::Option`?"}, {"sha": "17ee62aed1b8810babb096b2d5ae900cc6f344ff", "filename": "src/test/ui/issue-35869.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35869.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,31 +11,23 @@\n #![feature(conservative_impl_trait)]\n \n trait Foo {\n-    fn foo(_: fn(u8) -> ()); //~ NOTE type in trait\n-    fn bar(_: Option<u8>); //~ NOTE type in trait\n-    fn baz(_: (u8, u16)); //~ NOTE type in trait\n-    fn qux() -> u8; //~ NOTE type in trait\n+    fn foo(_: fn(u8) -> ());\n+    fn bar(_: Option<u8>);\n+    fn baz(_: (u8, u16));\n+    fn qux() -> u8;\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(_: fn(u16) -> ()) {}\n     //~^ ERROR method `foo` has an incompatible type for trait\n-    //~| NOTE expected u8\n-    //~| NOTE expected type `fn(fn(u8))`\n     fn bar(_: Option<u16>) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| NOTE expected u8\n-    //~| NOTE expected type `fn(std::option::Option<u8>)`\n     fn baz(_: (u16, u16)) {}\n     //~^ ERROR method `baz` has an incompatible type for trait\n-    //~| NOTE expected u8\n-    //~| NOTE expected type `fn((u8, u16))`\n     fn qux() -> u16 { 5u16 }\n     //~^ ERROR method `qux` has an incompatible type for trait\n-    //~| NOTE expected u8\n-    //~| NOTE expected type `fn() -> u8`\n }\n \n fn main() {}"}, {"sha": "5d2772b06a2abfe4dc71d07561fa70432a587543", "filename": "src/test/ui/issue-35869.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35869.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:23:15\n    |\n-14 |     fn foo(_: fn(u8) -> ()); //~ NOTE type in trait\n+14 |     fn foo(_: fn(u8) -> ());\n    |               ------------ type in trait\n ...\n 23 |     fn foo(_: fn(u16) -> ()) {}\n@@ -11,36 +11,36 @@ error[E0053]: method `foo` has an incompatible type for trait\n               found type `fn(fn(u16))`\n \n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/issue-35869.rs:27:15\n+  --> $DIR/issue-35869.rs:25:15\n    |\n-15 |     fn bar(_: Option<u8>); //~ NOTE type in trait\n+15 |     fn bar(_: Option<u8>);\n    |               ---------- type in trait\n ...\n-27 |     fn bar(_: Option<u16>) {}\n+25 |     fn bar(_: Option<u16>) {}\n    |               ^^^^^^^^^^^ expected u8, found u16\n    |\n    = note: expected type `fn(std::option::Option<u8>)`\n               found type `fn(std::option::Option<u16>)`\n \n error[E0053]: method `baz` has an incompatible type for trait\n-  --> $DIR/issue-35869.rs:31:15\n+  --> $DIR/issue-35869.rs:27:15\n    |\n-16 |     fn baz(_: (u8, u16)); //~ NOTE type in trait\n+16 |     fn baz(_: (u8, u16));\n    |               --------- type in trait\n ...\n-31 |     fn baz(_: (u16, u16)) {}\n+27 |     fn baz(_: (u16, u16)) {}\n    |               ^^^^^^^^^^ expected u8, found u16\n    |\n    = note: expected type `fn((u8, u16))`\n               found type `fn((u16, u16))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n-  --> $DIR/issue-35869.rs:35:17\n+  --> $DIR/issue-35869.rs:29:17\n    |\n-17 |     fn qux() -> u8; //~ NOTE type in trait\n+17 |     fn qux() -> u8;\n    |                 -- type in trait\n ...\n-35 |     fn qux() -> u16 { 5u16 }\n+29 |     fn qux() -> u16 { 5u16 }\n    |                 ^^^ expected u8, found u16\n    |\n    = note: expected type `fn() -> u8`"}, {"sha": "2337f82afa49fc30d2ef181d8dffe2f49843816c", "filename": "src/test/ui/issue-36163.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-36163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-36163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,16 +9,13 @@\n // except according to those terms.\n \n const A: i32 = Foo::B; //~ ERROR E0265\n-                       //~^ NOTE recursion not allowed in constant\n \n enum Foo {\n     B = A, //~ ERROR E0265\n-           //~^ NOTE recursion not allowed in constant\n }\n \n enum Bar {\n     C = Bar::C, //~ ERROR E0265\n-                //~^ NOTE recursion not allowed in constant\n }\n \n const D: i32 = A;"}, {"sha": "5a107d88f2e4f2e32293fbde72dee74775fd0159", "filename": "src/test/ui/issue-36163.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,15 +5,15 @@ error[E0265]: recursive constant\n    | ^^^^^^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n \n error[E0265]: recursive constant\n-  --> $DIR/issue-36163.rs:15:9\n+  --> $DIR/issue-36163.rs:14:9\n    |\n-15 |     B = A, //~ ERROR E0265\n+14 |     B = A, //~ ERROR E0265\n    |         ^ recursion not allowed in constant\n \n error[E0265]: recursive constant\n-  --> $DIR/issue-36163.rs:20:9\n+  --> $DIR/issue-36163.rs:18:9\n    |\n-20 |     C = Bar::C, //~ ERROR E0265\n+18 |     C = Bar::C, //~ ERROR E0265\n    |         ^^^^^^ recursion not allowed in constant\n \n error: aborting due to 3 previous errors"}, {"sha": "92a724a7e966a6b66890fc03e27f87e0211b97f5", "filename": "src/test/ui/issue-36708.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-36708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-36708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36708.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,7 +17,6 @@ struct Bar;\n impl lib::Foo for Bar {\n     fn foo<T>() {}\n     //~^ ERROR E0049\n-    //~| NOTE found 1 type parameter, expected 0\n }\n \n fn main() {}"}, {"sha": "7490960da367755a4ce39a4b1149cc316b9b3fcc", "filename": "src/test/ui/issue-3779.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3779.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,9 +10,7 @@\n \n struct S {\n     //~^ ERROR E0072\n-    //~| NOTE recursive type has infinite size\n     element: Option<S>\n-    //~^ NOTE recursive without indirection\n }\n \n fn main() {"}, {"sha": "538304803b440b9275b77fd55adc73a96e5b6a53", "filename": "src/test/ui/issue-3779.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-3779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3779.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -3,8 +3,8 @@ error[E0072]: recursive type `S` has infinite size\n    |\n 11 | struct S {\n    | ^^^^^^^^ recursive type has infinite size\n-...\n-14 |     element: Option<S>\n+12 |     //~^ ERROR E0072\n+13 |     element: Option<S>\n    |     ------------------ recursive without indirection\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `S` representable"}, {"sha": "ea6403a3eef34a019df28f88ef310d169867135b", "filename": "src/test/ui/issue-37884.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-37884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-37884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,14 +11,11 @@\n struct RepeatMut<'a, T>(T, &'a ());\n \n impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n-    //~^ NOTE ...does not necessarily outlive the lifetime 'a as defined on the impl\n \n     type Item = &'a mut T;\n     fn next(&'a mut self) -> Option<Self::Item>\n     //~^ ERROR method not compatible with trait\n     //~| lifetime mismatch\n-    //~| NOTE expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-    //~| NOTE the anonymous lifetime #1 defined on the method body\n     {\n         Some(&mut self.0)\n     }"}, {"sha": "439b123975f82616802892ed5876344424ad0a84", "filename": "src/test/ui/issue-37884.stderr", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,38 +1,36 @@\n error[E0308]: method not compatible with trait\n-  --> $DIR/issue-37884.rs:17:5\n+  --> $DIR/issue-37884.rs:16:5\n    |\n-17 | /     fn next(&'a mut self) -> Option<Self::Item>\n-18 | |     //~^ ERROR method not compatible with trait\n-19 | |     //~| lifetime mismatch\n-20 | |     //~| NOTE expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-...  |\n-23 | |         Some(&mut self.0)\n-24 | |     }\n+16 | /     fn next(&'a mut self) -> Option<Self::Item>\n+17 | |     //~^ ERROR method not compatible with trait\n+18 | |     //~| lifetime mismatch\n+19 | |     {\n+20 | |         Some(&mut self.0)\n+21 | |     }\n    | |_____^ lifetime mismatch\n    |\n    = note: expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n               found type `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-note: the anonymous lifetime #1 defined on the method body at 17:5...\n-  --> $DIR/issue-37884.rs:17:5\n+note: the anonymous lifetime #1 defined on the method body at 16:5...\n+  --> $DIR/issue-37884.rs:16:5\n    |\n-17 | /     fn next(&'a mut self) -> Option<Self::Item>\n-18 | |     //~^ ERROR method not compatible with trait\n-19 | |     //~| lifetime mismatch\n-20 | |     //~| NOTE expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-...  |\n-23 | |         Some(&mut self.0)\n-24 | |     }\n+16 | /     fn next(&'a mut self) -> Option<Self::Item>\n+17 | |     //~^ ERROR method not compatible with trait\n+18 | |     //~| lifetime mismatch\n+19 | |     {\n+20 | |         Some(&mut self.0)\n+21 | |     }\n    | |_____^\n note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:1\n   --> $DIR/issue-37884.rs:13:1\n    |\n 13 | / impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n-14 | |     //~^ NOTE ...does not necessarily outlive the lifetime 'a as defined on the impl\n-15 | |\n-16 | |     type Item = &'a mut T;\n+14 | |\n+15 | |     type Item = &'a mut T;\n+16 | |     fn next(&'a mut self) -> Option<Self::Item>\n ...  |\n-24 | |     }\n-25 | | }\n+21 | |     }\n+22 | | }\n    | |_^\n \n error: aborting due to previous error"}, {"sha": "f38c682d31974c4bc8ca1640967ae43453eff0fd", "filename": "src/test/ui/issue-41652/issue_41652.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,8 +18,6 @@ impl issue_41652_b::Tr for S {\n     fn f() {\n         3.f()\n         //~^ ERROR no method named `f` found for type `{integer}` in the current scope\n-        //~| NOTE found the following associated functions\n-        //~| NOTE candidate #1 is defined in the trait `issue_41652_b::Tr`\n     }\n }\n "}, {"sha": "540504eb07ec16ccba1b12102c5e5fe4b17a4d08", "filename": "src/test/ui/issue-4335.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,10 +15,7 @@ fn id<T>(t: T) -> T { t }\n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n     id(Box::new(|| *v))\n         //~^ ERROR E0373\n-        //~| NOTE `v` is borrowed here\n-        //~| NOTE may outlive borrowed value `v`\n         //~| ERROR E0507\n-        //~| NOTE cannot move out of borrowed content\n }\n \n fn main() {"}, {"sha": "5b6e2c75a1c8f2d78acd6f22ad375c35b00f2b1f", "filename": "src/test/ui/issue-4935.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4935.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,4 +14,3 @@ fn foo(a: usize) {}\n //~^ defined here\n fn main() { foo(5, 6) }\n //~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n-//~| NOTE expected 1 parameter"}, {"sha": "f88b6931344a68eebf3cabc30ffeea040cae2f6c", "filename": "src/test/ui/issue-5239-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-5239-1.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,5 +13,4 @@\n fn main() {\n     let x = |ref x: isize| { x += 1; };\n     //~^ ERROR E0368\n-    //~| NOTE cannot use `+=` on type `&isize`\n }"}, {"sha": "038f6043fa6672d881a40c19d2b4dd34f06af70e", "filename": "src/test/ui/issue-6458-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458-3.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,5 +13,4 @@ use std::mem;\n fn main() {\n     mem::transmute(0);\n     //~^ ERROR type annotations needed [E0282]\n-    //~| NOTE cannot infer type for `U`\n }"}, {"sha": "45934d03ed4f9a2f93e798f14e3bbbd0ae543043", "filename": "src/test/ui/issue-6458-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458-4.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n-    Err(\"bar\".to_string()); //~ HELP consider removing this semicolon\n+    Err(\"bar\".to_string());\n }\n \n fn main() {"}, {"sha": "6cc1edcd9fa6cbd8d609264575c8e3dbf3d753a7", "filename": "src/test/ui/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458-4.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n 11 |   fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n    |  ________________________________________^\n-12 | |     Err(\"bar\".to_string()); //~ HELP consider removing this semicolon\n+12 | |     Err(\"bar\".to_string());\n    | |                           - help: consider removing this semicolon\n 13 | | }\n    | |_^ expected enum `std::result::Result`, found ()"}, {"sha": "b4e7c0c40cfb736e034f426cca0cc1eec4992fd1", "filename": "src/test/ui/issue-6458.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,7 +18,6 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n    //~^ ERROR type annotations needed [E0282]\n-   //~| NOTE cannot infer type for `State`\n }\n \n fn main() {"}, {"sha": "39a87bfaf7440dc9a8254705f1905678b8b97e82", "filename": "src/test/ui/issue-7813.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-7813.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,7 +10,5 @@\n \n fn main() {\n     let v = &[]; //~ ERROR type annotations needed\n-    //~| NOTE consider giving `v` a type\n-    //~| NOTE cannot infer type for `_`\n     let it = v.iter();\n }"}, {"sha": "a5fada7869e86ecddd134fd30a0f6d23be9fa7a2", "filename": "src/test/ui/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,14 +10,11 @@\n \n // Lifetime annotation needed because we have no arguments.\n fn f() -> &isize {    //~ ERROR missing lifetime specifier\n-//~^ HELP there is no value for it to be borrowed from\n-//~| HELP consider giving it a 'static lifetime\n     panic!()\n }\n \n // Lifetime annotation needed because we have two by-reference parameters.\n fn g(_x: &isize, _y: &isize) -> &isize {    //~ ERROR missing lifetime specifier\n-//~^ HELP the signature does not say whether it is borrowed from `_x` or `_y`\n     panic!()\n }\n \n@@ -28,13 +25,10 @@ struct Foo<'a> {\n // Lifetime annotation needed because we have two lifetimes: one as a parameter\n // and one on the reference.\n fn h(_x: &Foo) -> &isize { //~ ERROR missing lifetime specifier\n-//~^ HELP the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n     panic!()\n }\n \n fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n-//~^ HELP this function's return type contains a borrowed value\n-//~| HELP consider giving it an explicit bounded or 'static lifetime\n     panic!()\n }\n \n@@ -48,17 +42,13 @@ trait WithLifetime<'a> {\n // This worked because the type of the first argument contains\n // 'static, although StaticStr doesn't even have parameters.\n fn j(_x: StaticStr) -> &isize { //~ ERROR missing lifetime specifier\n-//~^ HELP this function's return type contains a borrowed value\n-//~| HELP consider giving it an explicit bounded or 'static lifetime\n     panic!()\n }\n \n // This worked because the compiler resolved the argument type\n // to <T as WithLifetime<'a>>::Output which has the hidden 'a.\n fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n //~^ ERROR missing lifetime specifier\n-//~| HELP this function's return type contains a borrowed value\n-//~| HELP consider giving it an explicit bounded or 'static lifetime\n     panic!()\n }\n "}, {"sha": "f91b286bc4ac826c3d7b27ce8e34cb6fae9accb4", "filename": "src/test/ui/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,43 +8,43 @@ error[E0106]: missing lifetime specifier\n    = help: consider giving it a 'static lifetime\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:19:33\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:33\n    |\n-19 | fn g(_x: &isize, _y: &isize) -> &isize {    //~ ERROR missing lifetime specifier\n+17 | fn g(_x: &isize, _y: &isize) -> &isize {    //~ ERROR missing lifetime specifier\n    |                                 ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:30:19\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:27:19\n    |\n-30 | fn h(_x: &Foo) -> &isize { //~ ERROR missing lifetime specifier\n+27 | fn h(_x: &Foo) -> &isize { //~ ERROR missing lifetime specifier\n    |                   ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:35:20\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:31:20\n    |\n-35 | fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n+31 | fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n    |                    ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n    = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:50:24\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:44:24\n    |\n-50 | fn j(_x: StaticStr) -> &isize { //~ ERROR missing lifetime specifier\n+44 | fn j(_x: StaticStr) -> &isize { //~ ERROR missing lifetime specifier\n    |                        ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n    = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:58:49\n+  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:50:49\n    |\n-58 | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n+50 | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n    |                                                 ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments"}, {"sha": "65e01600c10427775bc171c92fc10a0afb931a1d", "filename": "src/test/ui/lint-forbid-attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-forbid-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-forbid-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-forbid-attr.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n #![forbid(deprecated)]\n-//~^ NOTE `forbid` level set here\n \n #[allow(deprecated)]\n //~^ ERROR allow(deprecated) overruled by outer forbid(deprecated)\n-//~| NOTE overruled by previous forbid\n fn main() {\n }"}, {"sha": "dcef7fb9ac03807054b11a8157ef1ad87d452692", "filename": "src/test/ui/lint-forbid-attr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-forbid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-forbid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-forbid-attr.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,10 @@\n error[E0453]: allow(deprecated) overruled by outer forbid(deprecated)\n-  --> $DIR/lint-forbid-attr.rs:14:9\n+  --> $DIR/lint-forbid-attr.rs:13:9\n    |\n 11 | #![forbid(deprecated)]\n    |           ---------- `forbid` level set here\n-...\n-14 | #[allow(deprecated)]\n+12 | \n+13 | #[allow(deprecated)]\n    |         ^^^^^^^^^^ overruled by previous forbid\n \n error: aborting due to previous error"}, {"sha": "5cd0084901fe37c0ce3204057a6a7892c87a4e40", "filename": "src/test/ui/lint-output-format-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-output-format-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-output-format-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-output-format-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,7 +19,6 @@\n extern crate lint_output_format;\n use lint_output_format::{foo, bar};\n //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n-//~| NOTE #[warn(deprecated)] on by default\n \n #[rustc_error]\n fn main() { //~ ERROR: compilation successful"}, {"sha": "d8c67c760db345075dee3dc4865c4bcb30a3e634", "filename": "src/test/ui/lint-output-format-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-output-format-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-output-format-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-output-format-2.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,18 +7,18 @@ warning: use of deprecated item 'lint_output_format::foo': text\n    = note: #[warn(deprecated)] on by default\n \n warning: use of deprecated item 'lint_output_format::foo': text\n-  --> $DIR/lint-output-format-2.rs:26:14\n+  --> $DIR/lint-output-format-2.rs:25:14\n    |\n-26 |     let _x = foo();\n+25 |     let _x = foo();\n    |              ^^^\n \n error: compilation successful\n-  --> $DIR/lint-output-format-2.rs:25:1\n+  --> $DIR/lint-output-format-2.rs:24:1\n    |\n-25 | / fn main() { //~ ERROR: compilation successful\n-26 | |     let _x = foo();\n-27 | |     //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n-28 | |     let _y = bar();\n-29 | | }\n+24 | / fn main() { //~ ERROR: compilation successful\n+25 | |     let _x = foo();\n+26 | |     //~^ WARNING use of deprecated item 'lint_output_format::foo': text\n+27 | |     let _y = bar();\n+28 | | }\n    | |_^\n "}, {"sha": "bfc144615a2d8b75234e0f533c94002a4ebe47ae", "filename": "src/test/ui/lint-unconditional-recursion.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-unconditional-recursion.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n #![deny(unconditional_recursion)]\n-//~^ NOTE lint level defined here\n \n #![allow(dead_code)]\n fn foo() { //~ ERROR function cannot return without recurring\n-    foo(); //~ NOTE recursive call site\n+    foo();\n }\n \n fn bar() {\n@@ -24,9 +23,9 @@ fn bar() {\n \n fn baz() { //~ ERROR function cannot return without recurring\n     if true {\n-        baz() //~ NOTE recursive call site\n+        baz()\n     } else {\n-        baz() //~ NOTE recursive call site\n+        baz()\n     }\n }\n \n@@ -36,32 +35,32 @@ fn qux() {\n \n fn quz() -> bool { //~ ERROR function cannot return without recurring\n     if true {\n-        while quz() {} //~ NOTE recursive call site\n+        while quz() {}\n         true\n     } else {\n-        loop { quz(); } //~ NOTE recursive call site\n+        loop { quz(); }\n     }\n }\n \n // Trait method calls.\n trait Foo {\n     fn bar(&self) { //~ ERROR function cannot return without recurring\n-        self.bar() //~ NOTE recursive call site\n+        self.bar()\n     }\n }\n \n impl Foo for Box<Foo+'static> {\n     fn bar(&self) { //~ ERROR function cannot return without recurring\n         loop {\n-            self.bar() //~ NOTE recursive call site\n+            self.bar()\n         }\n     }\n }\n \n // Trait method call with integer fallback after method resolution.\n impl Foo for i32 {\n     fn bar(&self) { //~ ERROR function cannot return without recurring\n-        0.bar() //~ NOTE recursive call site\n+        0.bar()\n     }\n }\n \n@@ -74,14 +73,14 @@ impl Foo for u32 {\n // Trait method calls via paths.\n trait Foo2 {\n     fn bar(&self) { //~ ERROR function cannot return without recurring\n-        Foo2::bar(self) //~ NOTE recursive call site\n+        Foo2::bar(self)\n     }\n }\n \n impl Foo2 for Box<Foo2+'static> {\n     fn bar(&self) { //~ ERROR function cannot return without recurring\n         loop {\n-            Foo2::bar(self) //~ NOTE recursive call site\n+            Foo2::bar(self)\n         }\n     }\n }\n@@ -90,19 +89,19 @@ struct Baz;\n impl Baz {\n     // Inherent method call.\n     fn qux(&self) { //~ ERROR function cannot return without recurring\n-        self.qux(); //~ NOTE recursive call site\n+        self.qux();\n     }\n \n     // Inherent method call via path.\n     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n-        Baz::as_ref(self) //~ NOTE recursive call site\n+        Baz::as_ref(self)\n     }\n }\n \n // Trait method calls to impls via paths.\n impl Default for Baz {\n     fn default() -> Baz { //~ ERROR function cannot return without recurring\n-        let x = Default::default(); //~ NOTE recursive call site\n+        let x = Default::default();\n         x\n     }\n }\n@@ -111,14 +110,14 @@ impl Default for Baz {\n impl std::ops::Deref for Baz {\n     type Target = ();\n     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n-        &**self //~ NOTE recursive call site\n+        &**self\n     }\n }\n \n impl std::ops::Index<usize> for Baz {\n     type Output = Baz;\n     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n-        &self[x] //~ NOTE recursive call site\n+        &self[x]\n     }\n }\n \n@@ -127,7 +126,7 @@ struct Quux;\n impl std::ops::Deref for Quux {\n     type Target = Baz;\n     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n-        self.as_ref() //~ NOTE recursive call site\n+        self.as_ref()\n     }\n }\n "}, {"sha": "40eaab1437f113cab3efe1b5cca2c577e4681cf7", "filename": "src/test/ui/lint-unconditional-recursion.stderr", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,9 +1,9 @@\n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:15:1\n+  --> $DIR/lint-unconditional-recursion.rs:14:1\n    |\n-15 | / fn foo() { //~ ERROR function cannot return without recurring\n-16 | |     foo(); //~ NOTE recursive call site\n-17 | | }\n+14 | / fn foo() { //~ ERROR function cannot return without recurring\n+15 | |     foo();\n+16 | | }\n    | |_^\n    |\n note: lint level defined here\n@@ -12,227 +12,227 @@ note: lint level defined here\n 11 | #![deny(unconditional_recursion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:16:5\n+  --> $DIR/lint-unconditional-recursion.rs:15:5\n    |\n-16 |     foo(); //~ NOTE recursive call site\n+15 |     foo();\n    |     ^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:25:1\n-   |\n-25 | / fn baz() { //~ ERROR function cannot return without recurring\n-26 | |     if true {\n-27 | |         baz() //~ NOTE recursive call site\n-28 | |     } else {\n-29 | |         baz() //~ NOTE recursive call site\n-30 | |     }\n-31 | | }\n+  --> $DIR/lint-unconditional-recursion.rs:24:1\n+   |\n+24 | / fn baz() { //~ ERROR function cannot return without recurring\n+25 | |     if true {\n+26 | |         baz()\n+27 | |     } else {\n+28 | |         baz()\n+29 | |     }\n+30 | | }\n    | |_^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:27:9\n+  --> $DIR/lint-unconditional-recursion.rs:26:9\n    |\n-27 |         baz() //~ NOTE recursive call site\n+26 |         baz()\n    |         ^^^^^\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:29:9\n+  --> $DIR/lint-unconditional-recursion.rs:28:9\n    |\n-29 |         baz() //~ NOTE recursive call site\n+28 |         baz()\n    |         ^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:37:1\n+  --> $DIR/lint-unconditional-recursion.rs:36:1\n    |\n-37 | / fn quz() -> bool { //~ ERROR function cannot return without recurring\n-38 | |     if true {\n-39 | |         while quz() {} //~ NOTE recursive call site\n-40 | |         true\n+36 | / fn quz() -> bool { //~ ERROR function cannot return without recurring\n+37 | |     if true {\n+38 | |         while quz() {}\n+39 | |         true\n ...  |\n-43 | |     }\n-44 | | }\n+42 | |     }\n+43 | | }\n    | |_^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:39:15\n+  --> $DIR/lint-unconditional-recursion.rs:38:15\n    |\n-39 |         while quz() {} //~ NOTE recursive call site\n+38 |         while quz() {}\n    |               ^^^^^\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:42:16\n+  --> $DIR/lint-unconditional-recursion.rs:41:16\n    |\n-42 |         loop { quz(); } //~ NOTE recursive call site\n+41 |         loop { quz(); }\n    |                ^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:48:5\n+  --> $DIR/lint-unconditional-recursion.rs:47:5\n    |\n-48 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-49 | |         self.bar() //~ NOTE recursive call site\n-50 | |     }\n+47 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n+48 | |         self.bar()\n+49 | |     }\n    | |_____^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:49:9\n+  --> $DIR/lint-unconditional-recursion.rs:48:9\n    |\n-49 |         self.bar() //~ NOTE recursive call site\n+48 |         self.bar()\n    |         ^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:54:5\n+  --> $DIR/lint-unconditional-recursion.rs:53:5\n    |\n-54 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-55 | |         loop {\n-56 | |             self.bar() //~ NOTE recursive call site\n-57 | |         }\n-58 | |     }\n+53 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n+54 | |         loop {\n+55 | |             self.bar()\n+56 | |         }\n+57 | |     }\n    | |_____^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:56:13\n+  --> $DIR/lint-unconditional-recursion.rs:55:13\n    |\n-56 |             self.bar() //~ NOTE recursive call site\n+55 |             self.bar()\n    |             ^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:63:5\n+  --> $DIR/lint-unconditional-recursion.rs:62:5\n    |\n-63 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-64 | |         0.bar() //~ NOTE recursive call site\n-65 | |     }\n+62 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n+63 | |         0.bar()\n+64 | |     }\n    | |_____^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:64:9\n+  --> $DIR/lint-unconditional-recursion.rs:63:9\n    |\n-64 |         0.bar() //~ NOTE recursive call site\n+63 |         0.bar()\n    |         ^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:76:5\n+  --> $DIR/lint-unconditional-recursion.rs:75:5\n    |\n-76 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-77 | |         Foo2::bar(self) //~ NOTE recursive call site\n-78 | |     }\n+75 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n+76 | |         Foo2::bar(self)\n+77 | |     }\n    | |_____^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:77:9\n+  --> $DIR/lint-unconditional-recursion.rs:76:9\n    |\n-77 |         Foo2::bar(self) //~ NOTE recursive call site\n+76 |         Foo2::bar(self)\n    |         ^^^^^^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:82:5\n+  --> $DIR/lint-unconditional-recursion.rs:81:5\n    |\n-82 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-83 | |         loop {\n-84 | |             Foo2::bar(self) //~ NOTE recursive call site\n-85 | |         }\n-86 | |     }\n+81 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n+82 | |         loop {\n+83 | |             Foo2::bar(self)\n+84 | |         }\n+85 | |     }\n    | |_____^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:84:13\n+  --> $DIR/lint-unconditional-recursion.rs:83:13\n    |\n-84 |             Foo2::bar(self) //~ NOTE recursive call site\n+83 |             Foo2::bar(self)\n    |             ^^^^^^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:92:5\n+  --> $DIR/lint-unconditional-recursion.rs:91:5\n    |\n-92 | /     fn qux(&self) { //~ ERROR function cannot return without recurring\n-93 | |         self.qux(); //~ NOTE recursive call site\n-94 | |     }\n+91 | /     fn qux(&self) { //~ ERROR function cannot return without recurring\n+92 | |         self.qux();\n+93 | |     }\n    | |_____^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:93:9\n+  --> $DIR/lint-unconditional-recursion.rs:92:9\n    |\n-93 |         self.qux(); //~ NOTE recursive call site\n+92 |         self.qux();\n    |         ^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-  --> $DIR/lint-unconditional-recursion.rs:97:5\n+  --> $DIR/lint-unconditional-recursion.rs:96:5\n    |\n-97 | /     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n-98 | |         Baz::as_ref(self) //~ NOTE recursive call site\n-99 | |     }\n+96 | /     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n+97 | |         Baz::as_ref(self)\n+98 | |     }\n    | |_____^\n    |\n note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:98:9\n+  --> $DIR/lint-unconditional-recursion.rs:97:9\n    |\n-98 |         Baz::as_ref(self) //~ NOTE recursive call site\n+97 |         Baz::as_ref(self)\n    |         ^^^^^^^^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-   --> $DIR/lint-unconditional-recursion.rs:104:5\n+   --> $DIR/lint-unconditional-recursion.rs:103:5\n     |\n-104 | /     fn default() -> Baz { //~ ERROR function cannot return without recurring\n-105 | |         let x = Default::default(); //~ NOTE recursive call site\n-106 | |         x\n-107 | |     }\n+103 | /     fn default() -> Baz { //~ ERROR function cannot return without recurring\n+104 | |         let x = Default::default();\n+105 | |         x\n+106 | |     }\n     | |_____^\n     |\n note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:105:17\n+   --> $DIR/lint-unconditional-recursion.rs:104:17\n     |\n-105 |         let x = Default::default(); //~ NOTE recursive call site\n+104 |         let x = Default::default();\n     |                 ^^^^^^^^^^^^^^^^^^\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-   --> $DIR/lint-unconditional-recursion.rs:113:5\n+   --> $DIR/lint-unconditional-recursion.rs:112:5\n     |\n-113 | /     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n-114 | |         &**self //~ NOTE recursive call site\n-115 | |     }\n+112 | /     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n+113 | |         &**self\n+114 | |     }\n     | |_____^\n     |\n note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:114:10\n+   --> $DIR/lint-unconditional-recursion.rs:113:10\n     |\n-114 |         &**self //~ NOTE recursive call site\n+113 |         &**self\n     |          ^^^^^^\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-   --> $DIR/lint-unconditional-recursion.rs:120:5\n+   --> $DIR/lint-unconditional-recursion.rs:119:5\n     |\n-120 | /     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n-121 | |         &self[x] //~ NOTE recursive call site\n-122 | |     }\n+119 | /     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n+120 | |         &self[x]\n+121 | |     }\n     | |_____^\n     |\n note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:121:10\n+   --> $DIR/lint-unconditional-recursion.rs:120:10\n     |\n-121 |         &self[x] //~ NOTE recursive call site\n+120 |         &self[x]\n     |          ^^^^^^^\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n-   --> $DIR/lint-unconditional-recursion.rs:129:5\n+   --> $DIR/lint-unconditional-recursion.rs:128:5\n     |\n-129 | /     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n-130 | |         self.as_ref() //~ NOTE recursive call site\n-131 | |     }\n+128 | /     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n+129 | |         self.as_ref()\n+130 | |     }\n     | |_____^\n     |\n note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:130:9\n+   --> $DIR/lint-unconditional-recursion.rs:129:9\n     |\n-130 |         self.as_ref() //~ NOTE recursive call site\n+129 |         self.as_ref()\n     |         ^^^^\n     = help: a `loop` may express intention better if this is on purpose\n "}, {"sha": "663c0275b82a7fa9fba5117ba0a41949a30d3b31", "filename": "src/test/ui/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness-return-last-stmt-semi.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -12,12 +12,11 @@\n \n macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n                                            //~^ ERROR mismatched types\n-                                           //~| HELP consider removing this semicolon\n \n fn no_return() -> i32 {} //~ ERROR mismatched types\n \n fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n-    x * 2; //~ HELP consider removing this semicolon\n+    x * 2;\n }\n \n fn baz(x: u64) -> u32 { //~ ERROR mismatched types"}, {"sha": "2057e14d55fd7ef39323f99bcef2f9a74342cdf3", "filename": "src/test/ui/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness-return-last-stmt-semi.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,41 +7,41 @@ error[E0308]: mismatched types\n    |                                             |  help: consider removing this semicolon\n    |                                             expected i32, found ()\n ...\n-28 |     test!();\n+27 |     test!();\n    |     -------- in this macro invocation\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:17:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:16:23\n    |\n-17 | fn no_return() -> i32 {} //~ ERROR mismatched types\n+16 | fn no_return() -> i32 {} //~ ERROR mismatched types\n    |                       ^^ expected i32, found ()\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:19:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:18:23\n    |\n-19 |   fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n+18 |   fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n    |  _______________________^\n-20 | |     x * 2; //~ HELP consider removing this semicolon\n+19 | |     x * 2;\n    | |          - help: consider removing this semicolon\n-21 | | }\n+20 | | }\n    | |_^ expected u32, found ()\n    |\n    = note: expected type `u32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:23:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:22:23\n    |\n-23 |   fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n+22 |   fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n    |  _______________________^\n-24 | |     x * 2;\n-25 | | }\n+23 | |     x * 2;\n+24 | | }\n    | |_^ expected u32, found ()\n    |\n    = note: expected type `u32`"}, {"sha": "598c7370b89069220733fa0d37428196d265ec0c", "filename": "src/test/ui/loops-reject-duplicate-labels-2.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -19,31 +19,23 @@\n // https://internals.rust-lang.org/t/psa-rejecting-duplicate-loop-labels/1833\n \n pub fn foo() {\n-    { 'fl: for _ in 0..10 { break; } }   //~ NOTE first declared here\n+    { 'fl: for _ in 0..10 { break; } }\n     { 'fl: loop { break; } }             //~ WARN label name `'fl` shadows a label name that is already in scope\n-    //~^ NOTE lifetime 'fl already in scope\n-    { 'lf: loop { break; } }             //~ NOTE first declared here\n+    { 'lf: loop { break; } }\n     { 'lf: for _ in 0..10 { break; } }   //~ WARN label name `'lf` shadows a label name that is already in scope\n-    //~^ NOTE lifetime 'lf already in scope\n-    { 'wl: while 2 > 1 { break; } }      //~ NOTE first declared here\n+    { 'wl: while 2 > 1 { break; } }\n     { 'wl: loop { break; } }             //~ WARN label name `'wl` shadows a label name that is already in scope\n-    //~^ NOTE lifetime 'wl already in scope\n-    { 'lw: loop { break; } }             //~ NOTE first declared here\n+    { 'lw: loop { break; } }\n     { 'lw: while 2 > 1 { break; } }      //~ WARN label name `'lw` shadows a label name that is already in scope\n-    //~^ NOTE lifetime 'lw already in scope\n-    { 'fw: for _ in 0..10 { break; } }   //~ NOTE first declared here\n+    { 'fw: for _ in 0..10 { break; } }\n     { 'fw: while 2 > 1 { break; } }      //~ WARN label name `'fw` shadows a label name that is already in scope\n-    //~^ NOTE lifetime 'fw already in scope\n-    { 'wf: while 2 > 1 { break; } }      //~ NOTE first declared here\n+    { 'wf: while 2 > 1 { break; } }\n     { 'wf: for _ in 0..10 { break; } }   //~ WARN label name `'wf` shadows a label name that is already in scope\n-    //~^ NOTE lifetime 'wf already in scope\n-    { 'tl: while let Some(_) = None::<i32> { break; } } //~ NOTE first declared here\n+    { 'tl: while let Some(_) = None::<i32> { break; } }\n     { 'tl: loop { break; } }             //~ WARN label name `'tl` shadows a label name that is already in scope\n-    //~^ NOTE lifetime 'tl already in scope\n-    { 'lt: loop { break; } }             //~ NOTE first declared here\n+    { 'lt: loop { break; } }\n     { 'lt: while let Some(_) = None::<i32> { break; } }\n                                          //~^ WARN label name `'lt` shadows a label name that is already in scope\n-                                         //~| NOTE lifetime 'lt already in scope\n }\n \n #[rustc_error]"}, {"sha": "488046b71b3b191b120a7d8fcff7c00b4f4c319d", "filename": "src/test/ui/loops-reject-duplicate-labels-2.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels-2.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,72 +1,72 @@\n warning: label name `'fl` shadows a label name that is already in scope\n   --> $DIR/loops-reject-duplicate-labels-2.rs:23:7\n    |\n-22 |     { 'fl: for _ in 0..10 { break; } }   //~ NOTE first declared here\n+22 |     { 'fl: for _ in 0..10 { break; } }\n    |       --- first declared here\n 23 |     { 'fl: loop { break; } }             //~ WARN label name `'fl` shadows a label name that is already in scope\n    |       ^^^ lifetime 'fl already in scope\n \n warning: label name `'lf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:26:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:25:7\n    |\n-25 |     { 'lf: loop { break; } }             //~ NOTE first declared here\n+24 |     { 'lf: loop { break; } }\n    |       --- first declared here\n-26 |     { 'lf: for _ in 0..10 { break; } }   //~ WARN label name `'lf` shadows a label name that is already in scope\n+25 |     { 'lf: for _ in 0..10 { break; } }   //~ WARN label name `'lf` shadows a label name that is already in scope\n    |       ^^^ lifetime 'lf already in scope\n \n warning: label name `'wl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:29:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:27:7\n    |\n-28 |     { 'wl: while 2 > 1 { break; } }      //~ NOTE first declared here\n+26 |     { 'wl: while 2 > 1 { break; } }\n    |       --- first declared here\n-29 |     { 'wl: loop { break; } }             //~ WARN label name `'wl` shadows a label name that is already in scope\n+27 |     { 'wl: loop { break; } }             //~ WARN label name `'wl` shadows a label name that is already in scope\n    |       ^^^ lifetime 'wl already in scope\n \n warning: label name `'lw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:32:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:29:7\n    |\n-31 |     { 'lw: loop { break; } }             //~ NOTE first declared here\n+28 |     { 'lw: loop { break; } }\n    |       --- first declared here\n-32 |     { 'lw: while 2 > 1 { break; } }      //~ WARN label name `'lw` shadows a label name that is already in scope\n+29 |     { 'lw: while 2 > 1 { break; } }      //~ WARN label name `'lw` shadows a label name that is already in scope\n    |       ^^^ lifetime 'lw already in scope\n \n warning: label name `'fw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:35:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:31:7\n    |\n-34 |     { 'fw: for _ in 0..10 { break; } }   //~ NOTE first declared here\n+30 |     { 'fw: for _ in 0..10 { break; } }\n    |       --- first declared here\n-35 |     { 'fw: while 2 > 1 { break; } }      //~ WARN label name `'fw` shadows a label name that is already in scope\n+31 |     { 'fw: while 2 > 1 { break; } }      //~ WARN label name `'fw` shadows a label name that is already in scope\n    |       ^^^ lifetime 'fw already in scope\n \n warning: label name `'wf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:38:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:33:7\n    |\n-37 |     { 'wf: while 2 > 1 { break; } }      //~ NOTE first declared here\n+32 |     { 'wf: while 2 > 1 { break; } }\n    |       --- first declared here\n-38 |     { 'wf: for _ in 0..10 { break; } }   //~ WARN label name `'wf` shadows a label name that is already in scope\n+33 |     { 'wf: for _ in 0..10 { break; } }   //~ WARN label name `'wf` shadows a label name that is already in scope\n    |       ^^^ lifetime 'wf already in scope\n \n warning: label name `'tl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:41:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:35:7\n    |\n-40 |     { 'tl: while let Some(_) = None::<i32> { break; } } //~ NOTE first declared here\n+34 |     { 'tl: while let Some(_) = None::<i32> { break; } }\n    |       --- first declared here\n-41 |     { 'tl: loop { break; } }             //~ WARN label name `'tl` shadows a label name that is already in scope\n+35 |     { 'tl: loop { break; } }             //~ WARN label name `'tl` shadows a label name that is already in scope\n    |       ^^^ lifetime 'tl already in scope\n \n warning: label name `'lt` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:44:7\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:37:7\n    |\n-43 |     { 'lt: loop { break; } }             //~ NOTE first declared here\n+36 |     { 'lt: loop { break; } }\n    |       --- first declared here\n-44 |     { 'lt: while let Some(_) = None::<i32> { break; } }\n+37 |     { 'lt: while let Some(_) = None::<i32> { break; } }\n    |       ^^^ lifetime 'lt already in scope\n \n error: compilation successful\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:50:1\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:42:1\n    |\n-50 | / pub fn main() { //~ ERROR compilation successful\n-51 | |     foo();\n-52 | | }\n+42 | / pub fn main() { //~ ERROR compilation successful\n+43 | |     foo();\n+44 | | }\n    | |_^\n "}, {"sha": "d768b002ab10cbd079863ad3e246ac55743b569c", "filename": "src/test/ui/loops-reject-duplicate-labels.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,32 +16,24 @@\n // This is testing the exact cases that are in the issue description.\n \n fn foo() {\n-    'fl: for _ in 0..10 { break; } //~ NOTE first declared here\n+    'fl: for _ in 0..10 { break; }\n     'fl: loop { break; }           //~ WARN label name `'fl` shadows a label name that is already in scope\n-                                   //~^ NOTE lifetime 'fl already in scope\n \n-    'lf: loop { break; }           //~ NOTE first declared here\n+    'lf: loop { break; }\n     'lf: for _ in 0..10 { break; } //~ WARN label name `'lf` shadows a label name that is already in scope\n-                                   //~^ NOTE lifetime 'lf already in scope\n-    'wl: while 2 > 1 { break; }    //~ NOTE first declared here\n+    'wl: while 2 > 1 { break; }\n     'wl: loop { break; }           //~ WARN label name `'wl` shadows a label name that is already in scope\n-                                   //~^ NOTE lifetime 'wl already in scope\n-    'lw: loop { break; }           //~ NOTE first declared here\n+    'lw: loop { break; }\n     'lw: while 2 > 1 { break; }    //~ WARN label name `'lw` shadows a label name that is already in scope\n-                                   //~^ NOTE lifetime 'lw already in scope\n-    'fw: for _ in 0..10 { break; } //~ NOTE first declared here\n+    'fw: for _ in 0..10 { break; }\n     'fw: while 2 > 1 { break; }    //~ WARN label name `'fw` shadows a label name that is already in scope\n-                                   //~^ NOTE lifetime 'fw already in scope\n-    'wf: while 2 > 1 { break; }    //~ NOTE first declared here\n+    'wf: while 2 > 1 { break; }\n     'wf: for _ in 0..10 { break; } //~ WARN label name `'wf` shadows a label name that is already in scope\n-                                   //~^ NOTE lifetime 'wf already in scope\n-    'tl: while let Some(_) = None::<i32> { break; } //~ NOTE first declared here\n+    'tl: while let Some(_) = None::<i32> { break; }\n     'tl: loop { break; }           //~ WARN label name `'tl` shadows a label name that is already in scope\n-                                   //~^ NOTE lifetime 'tl already in scope\n-    'lt: loop { break; }           //~ NOTE first declared here\n+    'lt: loop { break; }\n     'lt: while let Some(_) = None::<i32> { break; }\n                                    //~^ WARN label name `'lt` shadows a label name that is already in scope\n-                                   //~| NOTE lifetime 'lt already in scope\n }\n \n // Note however that it is okay for the same label to be reused in"}, {"sha": "3c287138c925c1378e300078ee6f99a3f4727cf4", "filename": "src/test/ui/loops-reject-duplicate-labels.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,75 +1,75 @@\n warning: label name `'fl` shadows a label name that is already in scope\n   --> $DIR/loops-reject-duplicate-labels.rs:20:5\n    |\n-19 |     'fl: for _ in 0..10 { break; } //~ NOTE first declared here\n+19 |     'fl: for _ in 0..10 { break; }\n    |     --- first declared here\n 20 |     'fl: loop { break; }           //~ WARN label name `'fl` shadows a label name that is already in scope\n    |     ^^^ lifetime 'fl already in scope\n \n warning: label name `'lf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:24:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:23:5\n    |\n-23 |     'lf: loop { break; }           //~ NOTE first declared here\n+22 |     'lf: loop { break; }\n    |     --- first declared here\n-24 |     'lf: for _ in 0..10 { break; } //~ WARN label name `'lf` shadows a label name that is already in scope\n+23 |     'lf: for _ in 0..10 { break; } //~ WARN label name `'lf` shadows a label name that is already in scope\n    |     ^^^ lifetime 'lf already in scope\n \n warning: label name `'wl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:27:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:25:5\n    |\n-26 |     'wl: while 2 > 1 { break; }    //~ NOTE first declared here\n+24 |     'wl: while 2 > 1 { break; }\n    |     --- first declared here\n-27 |     'wl: loop { break; }           //~ WARN label name `'wl` shadows a label name that is already in scope\n+25 |     'wl: loop { break; }           //~ WARN label name `'wl` shadows a label name that is already in scope\n    |     ^^^ lifetime 'wl already in scope\n \n warning: label name `'lw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:30:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:27:5\n    |\n-29 |     'lw: loop { break; }           //~ NOTE first declared here\n+26 |     'lw: loop { break; }\n    |     --- first declared here\n-30 |     'lw: while 2 > 1 { break; }    //~ WARN label name `'lw` shadows a label name that is already in scope\n+27 |     'lw: while 2 > 1 { break; }    //~ WARN label name `'lw` shadows a label name that is already in scope\n    |     ^^^ lifetime 'lw already in scope\n \n warning: label name `'fw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:33:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:29:5\n    |\n-32 |     'fw: for _ in 0..10 { break; } //~ NOTE first declared here\n+28 |     'fw: for _ in 0..10 { break; }\n    |     --- first declared here\n-33 |     'fw: while 2 > 1 { break; }    //~ WARN label name `'fw` shadows a label name that is already in scope\n+29 |     'fw: while 2 > 1 { break; }    //~ WARN label name `'fw` shadows a label name that is already in scope\n    |     ^^^ lifetime 'fw already in scope\n \n warning: label name `'wf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:36:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:31:5\n    |\n-35 |     'wf: while 2 > 1 { break; }    //~ NOTE first declared here\n+30 |     'wf: while 2 > 1 { break; }\n    |     --- first declared here\n-36 |     'wf: for _ in 0..10 { break; } //~ WARN label name `'wf` shadows a label name that is already in scope\n+31 |     'wf: for _ in 0..10 { break; } //~ WARN label name `'wf` shadows a label name that is already in scope\n    |     ^^^ lifetime 'wf already in scope\n \n warning: label name `'tl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:39:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:33:5\n    |\n-38 |     'tl: while let Some(_) = None::<i32> { break; } //~ NOTE first declared here\n+32 |     'tl: while let Some(_) = None::<i32> { break; }\n    |     --- first declared here\n-39 |     'tl: loop { break; }           //~ WARN label name `'tl` shadows a label name that is already in scope\n+33 |     'tl: loop { break; }           //~ WARN label name `'tl` shadows a label name that is already in scope\n    |     ^^^ lifetime 'tl already in scope\n \n warning: label name `'lt` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:42:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:35:5\n    |\n-41 |     'lt: loop { break; }           //~ NOTE first declared here\n+34 |     'lt: loop { break; }\n    |     --- first declared here\n-42 |     'lt: while let Some(_) = None::<i32> { break; }\n+35 |     'lt: while let Some(_) = None::<i32> { break; }\n    |     ^^^ lifetime 'lt already in scope\n \n error: compilation successful\n-  --> $DIR/loops-reject-duplicate-labels.rs:57:1\n+  --> $DIR/loops-reject-duplicate-labels.rs:49:1\n    |\n-57 | / pub fn main() { //~ ERROR compilation successful\n-58 | |     let s = S;\n-59 | |     s.m1();\n-60 | |     s.m2();\n-61 | |     foo();\n-62 | | }\n+49 | / pub fn main() { //~ ERROR compilation successful\n+50 | |     let s = S;\n+51 | |     s.m1();\n+52 | |     s.m2();\n+53 | |     foo();\n+54 | | }\n    | |_^\n "}, {"sha": "74da125d575a0e7ef23989d04ee2edb239bccaa1", "filename": "src/test/ui/loops-reject-labels-shadowing-lifetimes.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -16,10 +16,9 @@\n #![allow(dead_code, unused_variables)]\n \n fn foo() {\n-    fn foo<'a>() { //~ NOTE first declared here\n+    fn foo<'a>() {\n         'a: loop { break 'a; }\n         //~^ WARN label name `'a` shadows a lifetime name that is already in scope\n-        //~| NOTE lifetime 'a already in scope\n     }\n \n     struct Struct<'b, 'c> { _f: &'b i8, _g: &'c i8 }\n@@ -41,87 +40,75 @@ fn foo() {\n         }\n     }\n \n-    impl<'bad, 'c> Struct<'bad, 'c> { //~ NOTE first declared here\n+    impl<'bad, 'c> Struct<'bad, 'c> {\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n-    impl<'b, 'bad> Struct<'b, 'bad> { //~ NOTE first declared here\n+    impl<'b, 'bad> Struct<'b, 'bad> {\n         fn meth_bad2(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n     impl<'b, 'c> Struct<'b, 'c> {\n-        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE first declared here\n+        fn meth_bad3<'bad>(x: &'bad i8) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n \n         fn meth_bad4<'a,'bad>(x: &'a i8, y: &'bad i8) {\n-            //~^ NOTE first declared here\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n-    impl <'bad, 'e> Enum<'bad, 'e> { //~ NOTE first declared here\n+    impl <'bad, 'e> Enum<'bad, 'e> {\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n-    impl <'d, 'bad> Enum<'d, 'bad> { //~ NOTE first declared here\n+    impl <'d, 'bad> Enum<'d, 'bad> {\n         fn meth_bad2(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n     impl <'d, 'e> Enum<'d, 'e> {\n-        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE first declared here\n+        fn meth_bad3<'bad>(x: &'bad i8) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n \n-        fn meth_bad4<'a,'bad>(x: &'bad i8) { //~ NOTE first declared here\n+        fn meth_bad4<'a,'bad>(x: &'bad i8) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n \n-    trait HasDefaultMethod1<'bad> { //~ NOTE first declared here\n+    trait HasDefaultMethod1<'bad> {\n         fn meth_okay() {\n             'c: loop { break 'c; }\n         }\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n-    trait HasDefaultMethod2<'a,'bad> { //~ NOTE first declared here\n+    trait HasDefaultMethod2<'a,'bad> {\n         fn meth_bad(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n     trait HasDefaultMethod3<'a,'b> {\n-        fn meth_bad<'bad>(&self) { //~ NOTE first declared here\n+        fn meth_bad<'bad>(&self) {\n             'bad: loop { break 'bad; }\n             //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-            //~| NOTE lifetime 'bad already in scope\n         }\n     }\n }"}, {"sha": "07dbb68725dcc3a15e45cdadfb75ca94aa1dba2d", "filename": "src/test/ui/loops-reject-labels-shadowing-lifetimes.stderr", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,111 +1,110 @@\n warning: label name `'a` shadows a lifetime name that is already in scope\n   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:20:9\n    |\n-19 |     fn foo<'a>() { //~ NOTE first declared here\n+19 |     fn foo<'a>() {\n    |            -- first declared here\n 20 |         'a: loop { break 'a; }\n    |         ^^ lifetime 'a already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:46:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:45:13\n    |\n-44 |     impl<'bad, 'c> Struct<'bad, 'c> { //~ NOTE first declared here\n+43 |     impl<'bad, 'c> Struct<'bad, 'c> {\n    |          ---- first declared here\n-45 |         fn meth_bad(&self) {\n-46 |             'bad: loop { break 'bad; }\n+44 |         fn meth_bad(&self) {\n+45 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:54:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:52:13\n    |\n-52 |     impl<'b, 'bad> Struct<'b, 'bad> { //~ NOTE first declared here\n+50 |     impl<'b, 'bad> Struct<'b, 'bad> {\n    |              ---- first declared here\n-53 |         fn meth_bad2(&self) {\n-54 |             'bad: loop { break 'bad; }\n+51 |         fn meth_bad2(&self) {\n+52 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:62:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:59:13\n    |\n-61 |         fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE first declared here\n+58 |         fn meth_bad3<'bad>(x: &'bad i8) {\n    |                      ---- first declared here\n-62 |             'bad: loop { break 'bad; }\n+59 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:69:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:64:13\n    |\n-67 |         fn meth_bad4<'a,'bad>(x: &'a i8, y: &'bad i8) {\n+63 |         fn meth_bad4<'a,'bad>(x: &'a i8, y: &'bad i8) {\n    |                         ---- first declared here\n-68 |             //~^ NOTE first declared here\n-69 |             'bad: loop { break 'bad; }\n+64 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:77:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:71:13\n    |\n-75 |     impl <'bad, 'e> Enum<'bad, 'e> { //~ NOTE first declared here\n+69 |     impl <'bad, 'e> Enum<'bad, 'e> {\n    |           ---- first declared here\n-76 |         fn meth_bad(&self) {\n-77 |             'bad: loop { break 'bad; }\n+70 |         fn meth_bad(&self) {\n+71 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:84:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:77:13\n    |\n-82 |     impl <'d, 'bad> Enum<'d, 'bad> { //~ NOTE first declared here\n+75 |     impl <'d, 'bad> Enum<'d, 'bad> {\n    |               ---- first declared here\n-83 |         fn meth_bad2(&self) {\n-84 |             'bad: loop { break 'bad; }\n+76 |         fn meth_bad2(&self) {\n+77 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:91:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:83:13\n    |\n-90 |         fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE first declared here\n+82 |         fn meth_bad3<'bad>(x: &'bad i8) {\n    |                      ---- first declared here\n-91 |             'bad: loop { break 'bad; }\n+83 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:97:13\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:88:13\n    |\n-96 |         fn meth_bad4<'a,'bad>(x: &'bad i8) { //~ NOTE first declared here\n+87 |         fn meth_bad4<'a,'bad>(x: &'bad i8) {\n    |                         ---- first declared here\n-97 |             'bad: loop { break 'bad; }\n+88 |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:108:13\n-    |\n-103 |     trait HasDefaultMethod1<'bad> { //~ NOTE first declared here\n-    |                             ---- first declared here\n+  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:98:13\n+   |\n+93 |     trait HasDefaultMethod1<'bad> {\n+   |                             ---- first declared here\n ...\n-108 |             'bad: loop { break 'bad; }\n-    |             ^^^^ lifetime 'bad already in scope\n+98 |             'bad: loop { break 'bad; }\n+   |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:115:13\n+   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:104:13\n     |\n-113 |     trait HasDefaultMethod2<'a,'bad> { //~ NOTE first declared here\n+102 |     trait HasDefaultMethod2<'a,'bad> {\n     |                                ---- first declared here\n-114 |         fn meth_bad(&self) {\n-115 |             'bad: loop { break 'bad; }\n+103 |         fn meth_bad(&self) {\n+104 |             'bad: loop { break 'bad; }\n     |             ^^^^ lifetime 'bad already in scope\n \n warning: label name `'bad` shadows a lifetime name that is already in scope\n-   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:122:13\n+   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:110:13\n     |\n-121 |         fn meth_bad<'bad>(&self) { //~ NOTE first declared here\n+109 |         fn meth_bad<'bad>(&self) {\n     |                     ---- first declared here\n-122 |             'bad: loop { break 'bad; }\n+110 |             'bad: loop { break 'bad; }\n     |             ^^^^ lifetime 'bad already in scope\n \n error: compilation successful\n-   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:130:1\n+   --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:117:1\n     |\n-130 | / pub fn main() { //~ ERROR compilation successful\n-131 | |     foo();\n-132 | | }\n+117 | / pub fn main() { //~ ERROR compilation successful\n+118 | |     foo();\n+119 | | }\n     | |_^\n "}, {"sha": "077e57c9579e36de8ea02792453f08994ec721ec", "filename": "src/test/ui/loops-reject-lifetime-shadowing-label.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-lifetime-shadowing-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-lifetime-shadowing-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-lifetime-shadowing-label.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -27,10 +27,9 @@ fn foo() {\n \n     let z = 3_i8;\n \n-    'a: loop { //~ NOTE first declared here\n+    'a: loop {\n         let b = Box::new(|x: &i8| *x) as Box<for <'a> Fn(&'a i8) -> i8>;\n         //~^ WARN lifetime name `'a` shadows a label name that is already in scope\n-        //~| NOTE lifetime 'a already in scope\n         assert_eq!((*b)(&z), z);\n         break 'a;\n     }"}, {"sha": "d44b1b7b62351d7c7332005b4a2badf82ac4f84a", "filename": "src/test/ui/loops-reject-lifetime-shadowing-label.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-lifetime-shadowing-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Floops-reject-lifetime-shadowing-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-lifetime-shadowing-label.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,16 +1,16 @@\n warning: lifetime name `'a` shadows a label name that is already in scope\n   --> $DIR/loops-reject-lifetime-shadowing-label.rs:31:51\n    |\n-30 |     'a: loop { //~ NOTE first declared here\n+30 |     'a: loop {\n    |     -- first declared here\n 31 |         let b = Box::new(|x: &i8| *x) as Box<for <'a> Fn(&'a i8) -> i8>;\n    |                                                   ^^ lifetime 'a already in scope\n \n error: compilation successful\n-  --> $DIR/loops-reject-lifetime-shadowing-label.rs:40:1\n+  --> $DIR/loops-reject-lifetime-shadowing-label.rs:39:1\n    |\n-40 | / pub fn main() { //~ ERROR compilation successful\n-41 | |     foo();\n-42 | | }\n+39 | / pub fn main() { //~ ERROR compilation successful\n+40 | |     foo();\n+41 | | }\n    | |_^\n "}, {"sha": "56b3d5d0defb0911a8875f7989b206367ef26bad", "filename": "src/test/ui/macro-context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-context.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,11 +17,11 @@ macro_rules! m {\n }\n \n fn main() {\n-    let a: m!();    //~ NOTE the usage of `m!` is likely invalid in type context\n-    let i = m!();   //~ NOTE the usage of `m!` is likely invalid in expression context\n+    let a: m!();\n+    let i = m!();\n     match 0 {\n-        m!() => {}  //~ NOTE the usage of `m!` is likely invalid in pattern context\n+        m!() => {}\n     }\n \n-    m!(); //~ NOTE in this expansion\n+    m!();\n }"}, {"sha": "37d99913d9795d98a97ee028c724b80aa7e698e7", "filename": "src/test/ui/macro-context.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-context.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,7 +7,7 @@ error: macro expansion ignores token `;` and any following\n note: caused by the macro expansion here; the usage of `m!` is likely invalid in type context\n   --> $DIR/macro-context.rs:20:12\n    |\n-20 |     let a: m!();    //~ NOTE the usage of `m!` is likely invalid in type context\n+20 |     let a: m!();\n    |            ^^^^\n \n error: macro expansion ignores token `typeof` and any following\n@@ -19,7 +19,7 @@ error: macro expansion ignores token `typeof` and any following\n note: caused by the macro expansion here; the usage of `m!` is likely invalid in expression context\n   --> $DIR/macro-context.rs:21:13\n    |\n-21 |     let i = m!();   //~ NOTE the usage of `m!` is likely invalid in expression context\n+21 |     let i = m!();\n    |             ^^^^\n \n error: macro expansion ignores token `;` and any following\n@@ -31,7 +31,7 @@ error: macro expansion ignores token `;` and any following\n note: caused by the macro expansion here; the usage of `m!` is likely invalid in pattern context\n   --> $DIR/macro-context.rs:23:9\n    |\n-23 |         m!() => {}  //~ NOTE the usage of `m!` is likely invalid in pattern context\n+23 |         m!() => {}\n    |         ^^^^\n \n error: expected expression, found reserved keyword `typeof`\n@@ -40,7 +40,7 @@ error: expected expression, found reserved keyword `typeof`\n 13 |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n    |                 ^^^^^^\n ...\n-26 |     m!(); //~ NOTE in this expansion\n+26 |     m!();\n    |     ----- in this macro invocation\n \n error: aborting due to 4 previous errors"}, {"sha": "630e481f75ed0a0910e10a0c79bd96f7c6df0d84", "filename": "src/test/ui/macro-invalid-fragment-spec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-invalid-fragment-spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-invalid-fragment-spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-invalid-fragment-spec.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,7 +11,6 @@\n macro_rules! foo(\n     ($x:foo) => ()\n     //~^ ERROR invalid fragment specifier\n-    //~| HELP valid fragment specifiers are\n );\n \n fn main() {"}, {"sha": "61abaf8a2ddf88a2d9d51713fb0bc3082c8d5ae2", "filename": "src/test/ui/macro-shadowing.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-shadowing.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -18,16 +18,11 @@ macro_rules! macro_one { () => {} }\n \n macro_rules! m1 { () => {\n     macro_rules! foo { () => {} } //~ ERROR `foo` is already in scope\n-    //~^ NOTE macro-expanded `macro_rules!`s may not shadow existing macros\n \n     #[macro_use] //~ ERROR `macro_two` is already in scope\n-    //~^ NOTE macro-expanded `#[macro_use]`s may not shadow existing macros\n     extern crate two_macros as __;\n }}\n-m1!(); //~ NOTE in this expansion\n-       //~| NOTE in this expansion\n-       //~| NOTE in this expansion\n-       //~| NOTE in this expansion\n+m1!();\n \n foo!();\n "}, {"sha": "9ed372f275de2e69dd11b41ea44566e21260640a", "filename": "src/test/ui/macro-shadowing.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmacro-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-shadowing.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,10 +1,10 @@\n error: `macro_two` is already in scope\n-  --> $DIR/macro-shadowing.rs:23:5\n+  --> $DIR/macro-shadowing.rs:22:5\n    |\n-23 |     #[macro_use] //~ ERROR `macro_two` is already in scope\n+22 |     #[macro_use] //~ ERROR `macro_two` is already in scope\n    |     ^^^^^^^^^^^^\n ...\n-27 | m1!(); //~ NOTE in this expansion\n+25 | m1!();\n    | ------ in this macro invocation\n    |\n    = note: macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)\n@@ -15,7 +15,7 @@ error: `foo` is already in scope\n 20 |     macro_rules! foo { () => {} } //~ ERROR `foo` is already in scope\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n-27 | m1!(); //~ NOTE in this expansion\n+25 | m1!();\n    | ------ in this macro invocation\n    |\n    = note: macro-expanded `macro_rules!`s may not shadow existing macros (see RFC 1560)"}, {"sha": "45be5f1478718851248b94703b51c4075b8720b8", "filename": "src/test/ui/main-wrong-location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmain-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmain-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,5 +11,5 @@\n mod m {\n     // An inferred main entry point (that doesn't use #[main])\n     // must appear at the top of the crate\n-    fn main() { } //~ NOTE here is a function named 'main'\n+    fn main() { }\n }"}, {"sha": "cb9740b87792fb69a992ef1788f28618ad9b6630", "filename": "src/test/ui/main-wrong-location.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -4,7 +4,7 @@ error[E0601]: main function not found\n note: here is a function named 'main'\n  --> $DIR/main-wrong-location.rs:14:5\n   |\n-14|     fn main() { } //~ NOTE here is a function named 'main'\n+14|     fn main() { }\n   |     ^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "1dc198dee83458655a249023090d2ae0459c62b5", "filename": "src/test/ui/maybe-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmaybe-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmaybe-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n trait Tr: ?Sized {} //~ ERROR `?Trait` is not permitted in supertraits\n-                    //~^ NOTE traits are `?Sized` by default\n \n type A1 = Tr + ?Sized; //~ ERROR `?Trait` is not permitted in trait object types\n type A2 = for<'a> Tr + ?Sized; //~ ERROR `?Trait` is not permitted in trait object types"}, {"sha": "df9c3bca36429b2cf6807a548ecddb71b7d0653a", "filename": "src/test/ui/maybe-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmaybe-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmaybe-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -7,15 +7,15 @@ error: `?Trait` is not permitted in supertraits\n    = note: traits are `?Sized` by default\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/maybe-bounds.rs:14:17\n+  --> $DIR/maybe-bounds.rs:13:17\n    |\n-14 | type A1 = Tr + ?Sized; //~ ERROR `?Trait` is not permitted in trait object types\n+13 | type A1 = Tr + ?Sized; //~ ERROR `?Trait` is not permitted in trait object types\n    |                 ^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/maybe-bounds.rs:15:25\n+  --> $DIR/maybe-bounds.rs:14:25\n    |\n-15 | type A2 = for<'a> Tr + ?Sized; //~ ERROR `?Trait` is not permitted in trait object types\n+14 | type A2 = for<'a> Tr + ?Sized; //~ ERROR `?Trait` is not permitted in trait object types\n    |                         ^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "3434cf96fce9463c15822e240ff5fd61a73d1a88", "filename": "src/test/ui/method-call-err-msg.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-err-msg.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,29 +10,21 @@\n \n // Test that parameter cardinality or missing method error gets span exactly.\n \n-pub struct Foo; //~ NOTE not found for this\n+pub struct Foo;\n impl Foo {\n     fn zero(self) -> Foo { self }\n-    //~^ NOTE defined here\n     fn one(self, _: isize) -> Foo { self }\n-    //~^ NOTE defined here\n     fn two(self, _: isize, _: isize) -> Foo { self }\n-    //~^ NOTE defined here\n }\n \n fn main() {\n     let x = Foo;\n     x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n-     //~^ NOTE expected 0 parameters\n      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n-     //~^ NOTE expected 1 parameter\n      .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n-     //~^ NOTE expected 2 parameters\n \n     let y = Foo;\n     y.zero()\n      .take()    //~ ERROR no method named `take` found for type `Foo` in the current scope\n-     //~^ NOTE the method `take` exists but the following trait bounds were not satisfied\n-     //~| NOTE the following traits define an item `take`, perhaps you need to implement one of them\n      .one(0);\n }"}, {"sha": "59a94ae144c38d3a8a9618c923cbfc1f7442d159", "filename": "src/test/ui/method-call-err-msg.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,12 +8,12 @@ error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n    |       ^^^^ expected 0 parameters\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n-  --> $DIR/method-call-err-msg.rs:27:7\n+  --> $DIR/method-call-err-msg.rs:23:7\n    |\n 17 |     fn one(self, _: isize) -> Foo { self }\n    |     ----------------------------- defined here\n ...\n-27 |      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+23 |      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n    |       ^^^ expected 1 parameter\n \n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n@@ -26,12 +26,12 @@ error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n    |       ^^^ expected 2 parameters\n \n error[E0599]: no method named `take` found for type `Foo` in the current scope\n-  --> $DIR/method-call-err-msg.rs:34:7\n+  --> $DIR/method-call-err-msg.rs:28:7\n    |\n-13 | pub struct Foo; //~ NOTE not found for this\n+13 | pub struct Foo;\n    | --------------- method `take` not found for this\n ...\n-34 |      .take()    //~ ERROR no method named `take` found for type `Foo` in the current scope\n+28 |      .take()    //~ ERROR no method named `take` found for type `Foo` in the current scope\n    |       ^^^^\n    |\n    = note: the method `take` exists but the following trait bounds were not satisfied:"}, {"sha": "7a6ea94d977d485a69a4058a12a143fe0561707d", "filename": "src/test/ui/method-missing-call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-missing-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-missing-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-missing-call.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -30,13 +30,11 @@ fn main() {\n     let point: Point = Point::new();\n     let px: isize =  point\n                         .get_x;//~ ERROR attempted to take value of method `get_x` on type `Point`\n-                        //~^ HELP maybe a `()` to call it is missing\n \n     // Ensure the span is useful\n     let ys = &[1,2,3,4,5,6,7];\n     let a = ys.iter()\n               .map(|x| x)\n               .filter(|&&x| x == 1)\n               .filter_map; //~ ERROR attempted to take value of method `filter_map` on type\n-              //~^ HELP maybe a `()` to call it is missing\n }"}, {"sha": "d4cffbff4ef76c1621d9f214310480df1e563c85", "filename": "src/test/ui/method-missing-call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-missing-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmethod-missing-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-missing-call.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -6,10 +6,10 @@ error[E0615]: attempted to take value of method `get_x` on type `Point`\n    |\n    = help: maybe a `()` to call it is missing?\n \n-error[E0615]: attempted to take value of method `filter_map` on type `std::iter::Filter<std::iter::Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:38:20: 38:25]>, [closure@$DIR/method-missing-call.rs:39:23: 39:35]>`\n-  --> $DIR/method-missing-call.rs:40:16\n+error[E0615]: attempted to take value of method `filter_map` on type `std::iter::Filter<std::iter::Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:37:20: 37:25]>, [closure@$DIR/method-missing-call.rs:38:23: 38:35]>`\n+  --> $DIR/method-missing-call.rs:39:16\n    |\n-40 |               .filter_map; //~ ERROR attempted to take value of method `filter_map` on type\n+39 |               .filter_map; //~ ERROR attempted to take value of method `filter_map` on type\n    |                ^^^^^^^^^^\n    |\n    = help: maybe a `()` to call it is missing?"}, {"sha": "c09d6673aebcc54ff48a0fa638ed0bc4fc689079", "filename": "src/test/ui/mismatched_types/E0053.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -9,21 +9,17 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(x: u16); //~ NOTE type in trait\n-    fn bar(&self); //~ NOTE type in trait\n+    fn foo(x: u16);\n+    fn bar(&self);\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(x: i16) { }\n     //~^ ERROR method `foo` has an incompatible type for trait\n-    //~| NOTE expected u16\n-    //~| NOTE expected type `fn(u16)`\n     fn bar(&mut self) { }\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| NOTE types differ in mutability\n-    //~| NOTE expected type `fn(&Bar)`\n }\n \n fn main() {"}, {"sha": "226cb473e778903529608da4ae2af7dbc9f8ed9a", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/E0053.rs:19:15\n    |\n-12 |     fn foo(x: u16); //~ NOTE type in trait\n+12 |     fn foo(x: u16);\n    |               --- type in trait\n ...\n 19 |     fn foo(x: i16) { }\n@@ -11,12 +11,12 @@ error[E0053]: method `foo` has an incompatible type for trait\n               found type `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/E0053.rs:23:12\n+  --> $DIR/E0053.rs:21:12\n    |\n-13 |     fn bar(&self); //~ NOTE type in trait\n+13 |     fn bar(&self);\n    |            ----- type in trait\n ...\n-23 |     fn bar(&mut self) { }\n+21 |     fn bar(&mut self) { }\n    |            ^^^^^^^^^ types differ in mutability\n    |\n    = note: expected type `fn(&Bar)`"}, {"sha": "345020f2eae105de1ca077a04b1020ada92d3684", "filename": "src/test/ui/mismatched_types/E0409.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,11 +13,7 @@ fn main() {\n \n     match x {\n         (0, ref y) | (y, 0) => {} //~ ERROR E0409\n-                                  //~^ NOTE bound in different ways\n-                                  //~| NOTE first binding\n                                   //~| ERROR E0308\n-                                  //~| NOTE expected &{integer}, found integral variable\n-                                  //~| NOTE expected type `&{integer}`\n         _ => ()\n     }\n }"}, {"sha": "de4278e3a03d7e01d4563bbdddebcabc979e84e2", "filename": "src/test/ui/mismatched_types/fn-variance-1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,12 +22,8 @@ fn main() {\n     apply(&3, takes_imm);\n     apply(&3, takes_mut);\n     //~^ ERROR type mismatch\n-    //~| NOTE required by `apply`\n-    //~| NOTE expected signature\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n     //~^ ERROR type mismatch\n-    //~| NOTE required by `apply`\n-    //~| NOTE expected signature\n }"}, {"sha": "4ffee75348a8d25cf004dadddfa1e175da2feef1", "filename": "src/test/ui/mismatched_types/for-loop-has-unit-body.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -11,7 +11,5 @@\n fn main() {\n     for x in 0..3 {\n         x //~ ERROR mismatched types\n-        //~| NOTE expected ()\n-        //~| NOTE expected type `()`\n     }\n }"}, {"sha": "0f85218fcb8e0e4413ad17828172f98d0ede3247", "filename": "src/test/ui/mismatched_types/issue-19109.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -13,8 +13,6 @@ trait Trait { }\n fn function(t: &mut Trait) {\n     t as *mut Trait\n  //~^ ERROR: mismatched types\n- //~| NOTE: expected type `()`\n- //~| NOTE: expected (), found *-ptr\n }\n \n fn main() { }"}, {"sha": "bf72e584b562b2f9d243363c7619bf841ca67446", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -17,7 +17,4 @@ fn main() {\n     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n     //~^ ERROR no method named `count`\n     //~| ERROR type mismatch in closure arguments\n-    //~| NOTE the method `count` exists but the following trait bounds\n-    //~| NOTE expected signature\n-    //~| NOTE found signature\n }"}, {"sha": "2c7b8218de081e392a45eb064dd9293f3a777e3a", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -14,5 +14,4 @@ fn main() {\n     let a: Result<(), Foo> = Ok(());\n     a.unwrap();\n     //~^ ERROR no method named `unwrap` found for type `std::result::Result<(), Foo>`\n-    //~| NOTE the method `unwrap` exists but the following trait bounds were not satisfied\n }"}, {"sha": "00edc07db81b1572d61502c75565e6d1493c62f8", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -36,12 +36,8 @@ fn main() {\n         y: 3,\n     };\n     let ans = s(\"what\");    //~ ERROR mismatched types\n-    //~^ NOTE expected isize, found reference\n-    //~| NOTE expected type\n     let ans = s();\n     //~^ ERROR this function takes 1 parameter but 0 parameters were supplied\n-    //~| NOTE expected 1 parameter\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n-    //~| NOTE expected 1 parameter\n }"}, {"sha": "2122e810046faa58bda18482617ed72383e4961e", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -8,9 +8,9 @@ error[E0308]: mismatched types\n               found type `&'static str`\n \n error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n-  --> $DIR/overloaded-calls-bad.rs:41:15\n+  --> $DIR/overloaded-calls-bad.rs:39:15\n    |\n-41 |     let ans = s();\n+39 |     let ans = s();\n    |               ^^^ expected 1 parameter\n \n error[E0057]: this function takes 1 parameter but 2 parameters were supplied"}, {"sha": "b2aeabdc1e1cf10a64076c17ce5fb681d476a0f3", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -22,8 +22,6 @@ fn c(x: Box<Foo+Sync+Send>) {\n \n fn d(x: Box<Foo>) {\n     a(x); //~ ERROR mismatched types [E0308]\n-          //~| NOTE expected type `std::boxed::Box<Foo + std::marker::Send + 'static>`\n-          //~| NOTE expected trait `Foo + std::marker::Send`, found trait `Foo`\n }\n \n fn main() { }"}, {"sha": "10f4b3229f0da4071063e80ec26981be0ca3daa9", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -20,10 +20,8 @@ fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n \n pub fn main() {\n     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n-    //~^ NOTE found signature of `fn(usize, isize)\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n-    //~| NOTE expected signature of `fn(isize, isize)\n     //~| required by `call_it`\n     println!(\"{}\", z);\n }"}, {"sha": "4964a81f4d27b8bb61e6d45189036dcfdd9f8b88", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:24:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:23:13\n    |\n 22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`"}, {"sha": "777ff5b9b26506865fabd1a589e2491dec0f71fe", "filename": "src/test/ui/missing-block-hint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmissing-block-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmissing-block-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-block-hint.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -15,6 +15,5 @@ fn main() {\n     {\n         if (foo)\n             bar; //~ ERROR expected `{`, found `bar`\n-                 //~^ HELP try placing this code inside a block\n     }\n }"}, {"sha": "dd4c4c843ab8a6072af47d679168b22a35f86d9b", "filename": "src/test/ui/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-block-bad.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -35,7 +35,6 @@ fn main() {\n                                  //~| cannot move out of borrowed content\n                 box E::Foo(_) => {}\n                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n-                //~^ NOTE to prevent move\n                 box E::Baz => {}\n             }\n         })"}, {"sha": "1fd3d03570a69d789002cc64c4d782c28c950a03", "filename": "src/test/ui/moves-based-on-type-match-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -20,7 +20,7 @@ fn f10() {\n     let x = Foo {f: \"hi\".to_string()};\n \n     let y = match x {\n-        Foo {f} => {} //~ NOTE moved here\n+        Foo {f} => {}\n     };\n \n     touch(&x); //~ ERROR use of partially moved value: `x`"}, {"sha": "5256b55f01c6edd6694ecc4e465cace83a409fea", "filename": "src/test/ui/moves-based-on-type-match-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of partially moved value: `x`\n   --> $DIR/moves-based-on-type-match-bindings.rs:26:12\n    |\n-23 |         Foo {f} => {} //~ NOTE moved here\n+23 |         Foo {f} => {}\n    |              - value moved here\n ...\n 26 |     touch(&x); //~ ERROR use of partially moved value: `x`"}, {"sha": "757bd2cb52b77301a682cad0616e56a4083fddce", "filename": "src/test/ui/no-patterns-in-args.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fno-patterns-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fno-patterns-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-patterns-in-args.rs?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -10,11 +10,8 @@\n \n extern {\n     fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n-                        //~^ NOTE pattern not allowed in foreign function\n     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n-                     //~^ NOTE pattern not allowed in foreign function\n     fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n-                        //~^ NOTE pattern not allowed in foreign function\n     fn g1(arg: u8); // OK\n     fn g2(_: u8); // OK\n     // fn g3(u8); // Not yet"}, {"sha": "0db9eb9ded3b2002f28bd0e1537dc9fad1852ee2", "filename": "src/test/ui/no-patterns-in-args.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fno-patterns-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f5b201affc48dcf0b637caa9596c11d83e1db94/src%2Ftest%2Fui%2Fno-patterns-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-patterns-in-args.stderr?ref=1f5b201affc48dcf0b637caa9596c11d83e1db94", "patch": "@@ -5,27 +5,27 @@ error[E0130]: patterns aren't allowed in foreign function declarations\n    |           ^^^^^^^ pattern not allowed in foreign function\n \n error[E0130]: patterns aren't allowed in foreign function declarations\n-  --> $DIR/no-patterns-in-args.rs:14:11\n+  --> $DIR/no-patterns-in-args.rs:13:11\n    |\n-14 |     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+13 |     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n    |           ^^^^ pattern not allowed in foreign function\n \n error[E0130]: patterns aren't allowed in foreign function declarations\n-  --> $DIR/no-patterns-in-args.rs:16:11\n+  --> $DIR/no-patterns-in-args.rs:14:11\n    |\n-16 |     fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n+14 |     fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n    |           ^^^^^^^ pattern not allowed in foreign function\n \n error[E0561]: patterns aren't allowed in function pointer types\n-  --> $DIR/no-patterns-in-args.rs:23:14\n+  --> $DIR/no-patterns-in-args.rs:20:14\n    |\n-23 | type A1 = fn(mut arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n+20 | type A1 = fn(mut arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n    |              ^^^^^^^\n \n error[E0561]: patterns aren't allowed in function pointer types\n-  --> $DIR/no-patterns-in-args.rs:24:14\n+  --> $DIR/no-patterns-in-args.rs:21:14\n    |\n-24 | type A2 = fn(&arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n+21 | type A2 = fn(&arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n    |              ^^^^\n \n error: aborting due to 5 previous errors"}]}