{"sha": "c5c4c5e93887b1e2355fe7fb86e622e6888eede7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YzRjNWU5Mzg4N2IxZTIzNTVmZTdmYjg2ZTYyMmU2ODg4ZWVkZTc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-07T15:03:58Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-19T17:38:37Z"}, "message": "Add `fn fn_decl` to `Hir`, for looking up the `FnDecl` of a body owner.", "tree": {"sha": "eab34a27dea81d3a66d5e119362fee35c1927f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab34a27dea81d3a66d5e119362fee35c1927f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c4c5e93887b1e2355fe7fb86e622e6888eede7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c4c5e93887b1e2355fe7fb86e622e6888eede7", "html_url": "https://github.com/rust-lang/rust/commit/c5c4c5e93887b1e2355fe7fb86e622e6888eede7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c4c5e93887b1e2355fe7fb86e622e6888eede7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e848fe0e3a62c4a32ff77d35c7948406e8fceb2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b", "html_url": "https://github.com/rust-lang/rust/commit/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "d2e04ef31c86afffe55638868b4cbd52ea1824c6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c5c4c5e93887b1e2355fe7fb86e622e6888eede7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c4c5e93887b1e2355fe7fb86e622e6888eede7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c5c4c5e93887b1e2355fe7fb86e622e6888eede7", "patch": "@@ -170,6 +170,40 @@ impl<'hir> MapEntry<'hir> {\n         })\n     }\n \n+    fn fn_decl(&self) -> Option<&FnDecl> {\n+        match self {\n+            EntryItem(_, _, ref item) => {\n+                match item.node {\n+                    ItemFn(ref fn_decl, _, _, _, _, _) => Some(&fn_decl),\n+                    _ => None,\n+                }\n+            }\n+\n+            EntryTraitItem(_, _, ref item) => {\n+                match item.node {\n+                    TraitItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    _ => None\n+                }\n+            }\n+\n+            EntryImplItem(_, _, ref item) => {\n+                match item.node {\n+                    ImplItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    _ => None,\n+                }\n+            }\n+\n+            EntryExpr(_, _, ref expr) => {\n+                match expr.node {\n+                    ExprClosure(_, ref fn_decl, ..) => Some(&fn_decl),\n+                    _ => None,\n+                }\n+            }\n+\n+            _ => None\n+        }\n+    }\n+\n     fn associated_body(self) -> Option<BodyId> {\n         match self {\n             EntryItem(_, _, item) => {\n@@ -502,6 +536,14 @@ impl<'hir> Map<'hir> {\n         self.forest.krate.body(id)\n     }\n \n+    pub fn fn_decl(&self, node_id: ast::NodeId) -> Option<FnDecl> {\n+        if let Some(entry) = self.find_entry(node_id) {\n+            entry.fn_decl().map(|fd| fd.clone())\n+        } else {\n+            bug!(\"no entry for node_id `{}`\", node_id)\n+        }\n+    }\n+\n     /// Returns the `NodeId` that corresponds to the definition of\n     /// which this is the body of, i.e. a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`."}]}