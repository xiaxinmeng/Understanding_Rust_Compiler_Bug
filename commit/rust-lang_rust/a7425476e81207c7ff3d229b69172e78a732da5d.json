{"sha": "a7425476e81207c7ff3d229b69172e78a732da5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NDI1NDc2ZTgxMjA3YzdmZjNkMjI5YjY5MTcyZTc4YTczMmRhNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T08:40:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T08:40:07Z"}, "message": "Auto merge of #75611 - JulianKnodt:cg_enum_err, r=lcnr\n\nAdd help note when using type in place of const\n\nThis adds a small help note when it might be possible that wrapping a parameter in braces might resolve the issue of having a type where a const was expected.\n\nCurrently, I am displaying the `HirId`, and I'm not particularly sure where to get the currently displayed path(?).\n\nr? `@lcnr`", "tree": {"sha": "0053bf3715f0713478883312afe5a65dcef0bff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0053bf3715f0713478883312afe5a65dcef0bff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7425476e81207c7ff3d229b69172e78a732da5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7425476e81207c7ff3d229b69172e78a732da5d", "html_url": "https://github.com/rust-lang/rust/commit/a7425476e81207c7ff3d229b69172e78a732da5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7425476e81207c7ff3d229b69172e78a732da5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b7dd8181b0f483a890f8f3c19d08d6de03a444", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b7dd8181b0f483a890f8f3c19d08d6de03a444", "html_url": "https://github.com/rust-lang/rust/commit/f5b7dd8181b0f483a890f8f3c19d08d6de03a444"}, {"sha": "96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "url": "https://api.github.com/repos/rust-lang/rust/commits/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978", "html_url": "https://github.com/rust-lang/rust/commit/96bb2c86f2cfe03ad870d12b3b838e8b75eb1978"}], "stats": {"total": 214, "additions": 197, "deletions": 17}, "files": [{"sha": "b54de1d0916085011ce2734d8af1da2f1e5b0872", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a7425476e81207c7ff3d229b69172e78a732da5d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7425476e81207c7ff3d229b69172e78a732da5d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=a7425476e81207c7ff3d229b69172e78a732da5d", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::{\n };\n use crate::errors::AssocTypeBindingNotAllowed;\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{pluralize, struct_span_err, DiagnosticId, ErrorReported};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{GenericArg, GenericArgs};\n@@ -368,7 +368,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         if position != GenericArgPosition::Type && !args.bindings.is_empty() {\n-            Self::prohibit_assoc_ty_binding(tcx, args.bindings[0].span);\n+            AstConv::prohibit_assoc_ty_binding(tcx, args.bindings[0].span);\n         }\n \n         let explicit_late_bound =\n@@ -393,7 +393,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             if silent {\n-                return Err(true);\n+                return Err((0i32, None));\n             }\n \n             // Unfortunately lifetime and type parameter mismatches are typically styled\n@@ -442,58 +442,100 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             for span in spans {\n                 err.span_label(span, label.as_str());\n             }\n-            err.emit();\n \n-            Err(true)\n+            assert_ne!(bound, provided);\n+            Err((bound as i32 - provided as i32, Some(err)))\n         };\n \n-        let mut arg_count_correct = Ok(());\n         let mut unexpected_spans = vec![];\n \n+        let mut lifetime_count_correct = Ok(());\n         if !infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes {\n-            arg_count_correct = check_kind_count(\n+            lifetime_count_correct = check_kind_count(\n                 \"lifetime\",\n                 param_counts.lifetimes,\n                 param_counts.lifetimes,\n                 arg_counts.lifetimes,\n                 0,\n                 &mut unexpected_spans,\n                 explicit_late_bound == ExplicitLateBound::Yes,\n-            )\n-            .and(arg_count_correct);\n+            );\n         }\n+\n         // FIXME(const_generics:defaults)\n+        let mut const_count_correct = Ok(());\n         if !infer_args || arg_counts.consts > param_counts.consts {\n-            arg_count_correct = check_kind_count(\n+            const_count_correct = check_kind_count(\n                 \"const\",\n                 param_counts.consts,\n                 param_counts.consts,\n                 arg_counts.consts,\n                 arg_counts.lifetimes + arg_counts.types,\n                 &mut unexpected_spans,\n                 false,\n-            )\n-            .and(arg_count_correct);\n+            );\n         }\n+\n         // Note that type errors are currently be emitted *after* const errors.\n+        let mut type_count_correct = Ok(());\n         if !infer_args || arg_counts.types > param_counts.types - defaults.types - has_self as usize\n         {\n-            arg_count_correct = check_kind_count(\n+            type_count_correct = check_kind_count(\n                 \"type\",\n                 param_counts.types - defaults.types - has_self as usize,\n                 param_counts.types - has_self as usize,\n                 arg_counts.types,\n                 arg_counts.lifetimes,\n                 &mut unexpected_spans,\n                 false,\n-            )\n-            .and(arg_count_correct);\n+            );\n         }\n \n+        // Emit a help message if it's possible that a type could be surrounded in braces\n+        if let Err((c_mismatch, Some(ref mut _const_err))) = const_count_correct {\n+            if let Err((_, Some(ref mut type_err))) = type_count_correct {\n+                let possible_matches = args.args[arg_counts.lifetimes..]\n+                    .iter()\n+                    .filter(|arg| {\n+                        matches!(\n+                            arg,\n+                            GenericArg::Type(hir::Ty { kind: hir::TyKind::Path { .. }, .. })\n+                        )\n+                    })\n+                    .take(c_mismatch.max(0) as usize);\n+                for arg in possible_matches {\n+                    let suggestions = vec![\n+                        (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                        (arg.span().shrink_to_hi(), String::from(\" }\")),\n+                    ];\n+                    type_err.multipart_suggestion(\n+                        \"If this generic argument was intended as a const parameter, \\\n+                        try surrounding it with braces:\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        }\n+\n+        let emit_correct =\n+            |correct: Result<(), (_, Option<rustc_errors::DiagnosticBuilder<'_>>)>| match correct {\n+                Ok(()) => Ok(()),\n+                Err((_, None)) => Err(()),\n+                Err((_, Some(mut err))) => {\n+                    err.emit();\n+                    Err(())\n+                }\n+            };\n+\n+        let arg_count_correct = emit_correct(lifetime_count_correct)\n+            .and(emit_correct(const_count_correct))\n+            .and(emit_correct(type_count_correct));\n+\n         GenericArgCountResult {\n             explicit_late_bound,\n-            correct: arg_count_correct.map_err(|reported_err| GenericArgCountMismatch {\n-                reported: if reported_err { Some(ErrorReported) } else { None },\n+            correct: arg_count_correct.map_err(|()| GenericArgCountMismatch {\n+                reported: Some(ErrorReported),\n                 invalid_args: unexpected_spans,\n             }),\n         }"}, {"sha": "ceb188a0d3d340bb4866aa02e7d4fa3e004d530f", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a7425476e81207c7ff3d229b69172e78a732da5d/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7425476e81207c7ff3d229b69172e78a732da5d/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=a7425476e81207c7ff3d229b69172e78a732da5d", "patch": "@@ -0,0 +1,39 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+#[derive(PartialEq, Eq)]\n+enum CompileFlag {\n+  A,\n+  B,\n+}\n+\n+pub fn test_1<const CF: CompileFlag>() {}\n+pub fn test_2<T, const CF: CompileFlag>(x: T) {}\n+pub struct Example<const CF: CompileFlag, T=u32>{\n+  x: T,\n+}\n+\n+impl<const CF: CompileFlag, T> Example<CF, T> {\n+  const ASSOC_FLAG: CompileFlag = CompileFlag::A;\n+}\n+\n+pub fn main() {\n+  test_1::<CompileFlag::A>();\n+  //~^ ERROR: expected type, found variant\n+  //~| ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n+\n+  test_2::<_, CompileFlag::A>(0);\n+  //~^ ERROR: expected type, found variant\n+  //~| ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n+\n+  let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+  //~^ ERROR: expected type, found variant\n+  //~| ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n+\n+  let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n+  //~^ ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n+}"}, {"sha": "965abbc9cb7b896acdc8c828d537cbb6e929d48b", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a7425476e81207c7ff3d229b69172e78a732da5d/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7425476e81207c7ff3d229b69172e78a732da5d/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=a7425476e81207c7ff3d229b69172e78a732da5d", "patch": "@@ -0,0 +1,99 @@\n+error[E0573]: expected type, found variant `CompileFlag::A`\n+  --> $DIR/invalid-enum.rs:21:12\n+   |\n+LL |   test_1::<CompileFlag::A>();\n+   |            ^^^^^^^^^^^^^^\n+   |            |\n+   |            not a type\n+   |            help: try using the variant's enum: `CompileFlag`\n+\n+error[E0573]: expected type, found variant `CompileFlag::A`\n+  --> $DIR/invalid-enum.rs:26:15\n+   |\n+LL |   test_2::<_, CompileFlag::A>(0);\n+   |               ^^^^^^^^^^^^^^\n+   |               |\n+   |               not a type\n+   |               help: try using the variant's enum: `CompileFlag`\n+\n+error[E0573]: expected type, found variant `CompileFlag::A`\n+  --> $DIR/invalid-enum.rs:31:18\n+   |\n+LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+   |                  ^^^^^^^^^^^^^^\n+   |                  |\n+   |                  not a type\n+   |                  help: try using the variant's enum: `CompileFlag`\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:31:10\n+   |\n+LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected at most 1, found 2\n+  --> $DIR/invalid-enum.rs:31:10\n+   |\n+LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 1 type argument\n+   |\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n+   |                  ^                ^\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:36:10\n+   |\n+LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected at most 1, found 2\n+  --> $DIR/invalid-enum.rs:36:10\n+   |\n+LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at most 1 type argument\n+   |\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n+   |                  ^                     ^\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:21:3\n+   |\n+LL |   test_1::<CompileFlag::A>();\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/invalid-enum.rs:21:12\n+   |\n+LL |   test_1::<CompileFlag::A>();\n+   |            ^^^^^^^^^^^^^^ unexpected type argument\n+   |\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   test_1::<{ CompileFlag::A }>();\n+   |            ^                ^\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:26:3\n+   |\n+LL |   test_2::<_, CompileFlag::A>(0);\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 2\n+  --> $DIR/invalid-enum.rs:26:15\n+   |\n+LL |   test_2::<_, CompileFlag::A>(0);\n+   |               ^^^^^^^^^^^^^^ unexpected type argument\n+   |\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   test_2::<_, { CompileFlag::A }>(0);\n+   |               ^                ^\n+\n+error: aborting due to 11 previous errors\n+\n+Some errors have detailed explanations: E0107, E0573.\n+For more information about an error, try `rustc --explain E0107`."}]}