{"sha": "83a28ef095ba4179a63196f16eadd97f110d6cb3", "node_id": "C_kwDOAAsO6NoAKDgzYTI4ZWYwOTViYTQxNzlhNjMxOTZmMTZlYWRkOTdmMTEwZDZjYjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T13:07:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T13:07:30Z"}, "message": "Auto merge of #106129 - compiler-errors:compare_method-tweaks, r=BoxyUwU\n\nSome `compare_method` tweaks\n\n1. Make some of the comparison functions' names more regular\n2. Reduce pub scope of some of the things in `compare_method`\n~3. Remove some unnecessary opaque type handling code -- `InferCtxt` already is in a mode that doesn't define opaque types~\n  * moved to a different PR\n4. Bubble up `ErrorGuaranteed` for region constraint errors in `compare_method` - Improves a redundant error message in one unit test.\n5. Move the `compare_method` module to have a more general name, since it's more like `compare_impl_item` :)\n6. Rename `collect_trait_impl_trait_tys`", "tree": {"sha": "ceae5e9882a4ee57020d2ce9898bf7df9d5f29c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceae5e9882a4ee57020d2ce9898bf7df9d5f29c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a28ef095ba4179a63196f16eadd97f110d6cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a28ef095ba4179a63196f16eadd97f110d6cb3", "html_url": "https://github.com/rust-lang/rust/commit/83a28ef095ba4179a63196f16eadd97f110d6cb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a28ef095ba4179a63196f16eadd97f110d6cb3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a20f7df5755d8c6b68110d2d0391a7b03268e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a20f7df5755d8c6b68110d2d0391a7b03268e77", "html_url": "https://github.com/rust-lang/rust/commit/6a20f7df5755d8c6b68110d2d0391a7b03268e77"}, {"sha": "96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "html_url": "https://github.com/rust-lang/rust/commit/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e"}], "stats": {"total": 161, "additions": 89, "deletions": 72}, "files": [{"sha": "28cd18bbb8e854d7162bdd310f972024e2fd6906", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -1,8 +1,8 @@\n use crate::check::intrinsicck::InlineAsmCtxt;\n use crate::errors::LinkageType;\n \n-use super::compare_method::check_type_bounds;\n-use super::compare_method::{compare_impl_method, compare_ty_impl};\n+use super::compare_impl_item::check_type_bounds;\n+use super::compare_impl_item::{compare_impl_method, compare_impl_ty};\n use super::*;\n use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan};\n@@ -468,7 +468,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         // Can have different predicates to their defining use\n         hir::OpaqueTyOrigin::TyAlias => {\n             let outlives_environment = OutlivesEnvironment::new(param_env);\n-            infcx.check_region_obligations_and_report_errors(\n+            let _ = infcx.check_region_obligations_and_report_errors(\n                 defining_use_anchor,\n                 &outlives_environment,\n             );\n@@ -774,7 +774,7 @@ fn check_impl_items_against_trait<'tcx>(\n         let impl_item_full = tcx.hir().impl_item(impl_item.id);\n         match impl_item_full.kind {\n             hir::ImplItemKind::Const(..) => {\n-                let _ = tcx.compare_assoc_const_impl_item_with_trait_item((\n+                let _ = tcx.compare_impl_const((\n                     impl_item.id.owner_id.def_id,\n                     ty_impl_item.trait_item_def_id.unwrap(),\n                 ));\n@@ -791,7 +791,7 @@ fn check_impl_items_against_trait<'tcx>(\n             }\n             hir::ImplItemKind::Type(impl_ty) => {\n                 let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n-                compare_ty_impl(\n+                compare_impl_ty(\n                     tcx,\n                     &ty_impl_item,\n                     impl_ty.span,"}, {"sha": "a767338ab85ccbb7a0a75a040e777c73dd5442c7", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "renamed", "additions": 53, "deletions": 20, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -34,7 +34,7 @@ use std::iter;\n /// - `impl_m_span`: span to use for reporting errors\n /// - `trait_m`: the method in the trait\n /// - `impl_trait_ref`: the TraitRef corresponding to the trait implementation\n-pub(crate) fn compare_impl_method<'tcx>(\n+pub(super) fn compare_impl_method<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n@@ -71,7 +71,7 @@ pub(crate) fn compare_impl_method<'tcx>(\n         return;\n     }\n \n-    if let Err(_) = compare_predicate_entailment(\n+    if let Err(_) = compare_method_predicate_entailment(\n         tcx,\n         impl_m,\n         impl_m_span,\n@@ -150,7 +150,7 @@ pub(crate) fn compare_impl_method<'tcx>(\n /// Finally we register each of these predicates as an obligation and check that\n /// they hold.\n #[instrument(level = \"debug\", skip(tcx, impl_m_span, impl_trait_ref))]\n-fn compare_predicate_entailment<'tcx>(\n+fn compare_method_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     impl_m_span: Span,\n@@ -337,7 +337,7 @@ fn compare_predicate_entailment<'tcx>(\n     if !errors.is_empty() {\n         match check_implied_wf {\n             CheckImpliedWfMode::Check => {\n-                return compare_predicate_entailment(\n+                return compare_method_predicate_entailment(\n                     tcx,\n                     impl_m,\n                     impl_m_span,\n@@ -374,7 +374,7 @@ fn compare_predicate_entailment<'tcx>(\n         // becomes a hard error (i.e. ideally we'd just call `resolve_regions_and_report_errors`\n         match check_implied_wf {\n             CheckImpliedWfMode::Check => {\n-                return compare_predicate_entailment(\n+                return compare_method_predicate_entailment(\n                     tcx,\n                     impl_m,\n                     impl_m_span,\n@@ -407,7 +407,7 @@ enum CheckImpliedWfMode {\n     /// re-check with `Skip`, and emit a lint if it succeeds.\n     Check,\n     /// Skips checking implied well-formedness of the impl method, but will emit\n-    /// a lint if the `compare_predicate_entailment` succeeded. This means that\n+    /// a lint if the `compare_method_predicate_entailment` succeeded. This means that\n     /// the reason that we had failed earlier during `Check` was due to the impl\n     /// having stronger requirements than the trait.\n     Skip,\n@@ -441,8 +441,41 @@ fn compare_asyncness<'tcx>(\n     Ok(())\n }\n \n+/// Given a method def-id in an impl, compare the method signature of the impl\n+/// against the trait that it's implementing. In doing so, infer the hidden types\n+/// that this method's signature provides to satisfy each return-position `impl Trait`\n+/// in the trait signature.\n+///\n+/// The method is also responsible for making sure that the hidden types for each\n+/// RPITIT actually satisfy the bounds of the `impl Trait`, i.e. that if we infer\n+/// `impl Trait = Foo`, that `Foo: Trait` holds.\n+///\n+/// For example, given the sample code:\n+///\n+/// ```\n+/// #![feature(return_position_impl_trait_in_trait)]\n+///\n+/// use std::ops::Deref;\n+///\n+/// trait Foo {\n+///     fn bar() -> impl Deref<Target = impl Sized>;\n+///              // ^- RPITIT #1        ^- RPITIT #2\n+/// }\n+///\n+/// impl Foo for () {\n+///     fn bar() -> Box<String> { Box::new(String::new()) }\n+/// }\n+/// ```\n+///\n+/// The hidden types for the RPITITs in `bar` would be inferred to:\n+///     * `impl Deref` (RPITIT #1) = `Box<String>`\n+///     * `impl Sized` (RPITIT #2) = `String`\n+///\n+/// The relationship between these two types is straightforward in this case, but\n+/// may be more tenuously connected via other `impl`s and normalization rules for\n+/// cases of more complicated nested RPITITs.\n #[instrument(skip(tcx), level = \"debug\", ret)]\n-pub fn collect_trait_impl_trait_tys<'tcx>(\n+pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n ) -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed> {\n@@ -550,13 +583,13 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // Unify the whole function signature. We need to do this to fully infer\n     // the lifetimes of the return type, but do this after unifying just the\n     // return types, since we want to avoid duplicating errors from\n-    // `compare_predicate_entailment`.\n+    // `compare_method_predicate_entailment`.\n     match ocx.eq(&cause, param_env, trait_fty, impl_fty) {\n         Ok(()) => {}\n         Err(terr) => {\n-            // This function gets called during `compare_predicate_entailment` when normalizing a\n+            // This function gets called during `compare_method_predicate_entailment` when normalizing a\n             // signature that contains RPITIT. When the method signatures don't match, we have to\n-            // emit an error now because `compare_predicate_entailment` will not report the error\n+            // emit an error now because `compare_method_predicate_entailment` will not report the error\n             // when normalization fails.\n             let emitted = report_trait_method_mismatch(\n                 infcx,\n@@ -589,7 +622,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     infcx.check_region_obligations_and_report_errors(\n         impl_m.def_id.expect_local(),\n         &outlives_environment,\n-    );\n+    )?;\n \n     let mut collected_tys = FxHashMap::default();\n     for (def_id, (ty, substs)) in collector.types {\n@@ -1516,8 +1549,8 @@ fn compare_generic_param_kinds<'tcx>(\n     Ok(())\n }\n \n-/// Use `tcx.compare_assoc_const_impl_item_with_trait_item` instead\n-pub(crate) fn raw_compare_const_impl(\n+/// Use `tcx.compare_impl_const` instead\n+pub(super) fn compare_impl_const_raw(\n     tcx: TyCtxt<'_>,\n     (impl_const_item_def, trait_const_item_def): (LocalDefId, DefId),\n ) -> Result<(), ErrorGuaranteed> {\n@@ -1617,13 +1650,13 @@ pub(crate) fn raw_compare_const_impl(\n         return Err(infcx.err_ctxt().report_fulfillment_errors(&errors, None));\n     }\n \n-    // FIXME return `ErrorReported` if region obligations error?\n     let outlives_environment = OutlivesEnvironment::new(param_env);\n-    infcx.check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment);\n+    infcx.check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment)?;\n+\n     Ok(())\n }\n \n-pub(crate) fn compare_ty_impl<'tcx>(\n+pub(super) fn compare_impl_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_ty: &ty::AssocItem,\n     impl_ty_span: Span,\n@@ -1645,7 +1678,7 @@ pub(crate) fn compare_ty_impl<'tcx>(\n     })();\n }\n \n-/// The equivalent of [compare_predicate_entailment], but for associated types\n+/// The equivalent of [compare_method_predicate_entailment], but for associated types\n /// instead of associated functions.\n fn compare_type_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -1730,7 +1763,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     infcx.check_region_obligations_and_report_errors(\n         impl_ty.def_id.expect_local(),\n         &outlives_environment,\n-    );\n+    )?;\n \n     Ok(())\n }\n@@ -1749,7 +1782,7 @@ fn compare_type_predicate_entailment<'tcx>(\n /// from the impl could be overridden). We also can't normalize generic\n /// associated types (yet) because they contain bound parameters.\n #[instrument(level = \"debug\", skip(tcx))]\n-pub fn check_type_bounds<'tcx>(\n+pub(super) fn check_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ty: &ty::AssocItem,\n     impl_ty: &ty::AssocItem,\n@@ -1944,7 +1977,7 @@ pub fn check_type_bounds<'tcx>(\n     infcx.check_region_obligations_and_report_errors(\n         impl_ty.def_id.expect_local(),\n         &outlives_environment,\n-    );\n+    )?;\n \n     let constraints = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n     for (key, value) in constraints {", "previous_filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs"}, {"sha": "382c3f5294511a40c364060f7b050773bcad737f", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -63,7 +63,7 @@ a type parameter).\n */\n \n mod check;\n-mod compare_method;\n+mod compare_impl_item;\n pub mod dropck;\n pub mod intrinsic;\n pub mod intrinsicck;\n@@ -94,7 +94,7 @@ use std::num::NonZeroU32;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n \n-use self::compare_method::collect_trait_impl_trait_tys;\n+use self::compare_impl_item::collect_return_position_impl_trait_in_trait_tys;\n use self::region::region_scope_tree;\n \n pub fn provide(providers: &mut Providers) {\n@@ -103,8 +103,8 @@ pub fn provide(providers: &mut Providers) {\n         adt_destructor,\n         check_mod_item_types,\n         region_scope_tree,\n-        collect_trait_impl_trait_tys,\n-        compare_assoc_const_impl_item_with_trait_item: compare_method::raw_compare_const_impl,\n+        collect_return_position_impl_trait_in_trait_tys,\n+        compare_impl_const: compare_impl_item::compare_impl_const_raw,\n         ..*providers\n     };\n }"}, {"sha": "6cb899f5176bf3de3b1dac9a61192ad355218673", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -115,7 +115,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n     let outlives_environment =\n         OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n \n-    infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n+    let _ = infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n }\n \n fn check_well_formed(tcx: TyCtxt<'_>, def_id: hir::OwnerId) {"}, {"sha": "bfedf63da97a878b25202f9da6f204ee7e77c111", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -325,7 +325,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n \n                 // Finally, resolve all regions.\n                 let outlives_env = OutlivesEnvironment::new(param_env);\n-                infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n+                let _ = infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n             }\n         }\n         _ => {\n@@ -565,7 +565,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n \n     // Finally, resolve all regions.\n     let outlives_env = OutlivesEnvironment::new(param_env);\n-    infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n+    let _ = infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n \n     CoerceUnsizedInfo { custom_kind: kind }\n }"}, {"sha": "1aae9e0bd20af762ef80b5c88c1c98996c7aa3f6", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -181,7 +181,7 @@ fn get_impl_substs(\n \n     let implied_bounds = infcx.implied_bounds_tys(param_env, impl1_hir_id, assumed_wf_types);\n     let outlives_env = OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n-    infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n+    let _ = infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n         let span = tcx.def_span(impl1_def_id);\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });"}, {"sha": "7222eb7768203fffe33c9082b5ca806cd87e824f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -1836,7 +1836,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         // In some (most?) cases cause.body_id points to actual body, but in some cases\n         // it's an actual definition. According to the comments (e.g. in\n-        // rustc_hir_analysis/check/compare_method.rs:compare_predicate_entailment) the latter\n+        // rustc_hir_analysis/check/compare_impl_item.rs:compare_predicate_entailment) the latter\n         // is relied upon by some other code. This might (or might not) need cleanup.\n         let body_owner_def_id =\n             self.tcx.hir().opt_local_def_id(cause.body_id).unwrap_or_else(|| {"}, {"sha": "b17a465eb38311c6dc3fada6037af41b5044db69", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -1693,7 +1693,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         &self,\n         generic_param_scope: LocalDefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) -> Option<ErrorGuaranteed> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         let errors = self.resolve_regions(outlives_env);\n \n         if let None = self.tainted_by_errors() {\n@@ -1705,9 +1705,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             self.report_region_errors(generic_param_scope, &errors);\n         }\n \n-        (!errors.is_empty()).then(|| {\n-            self.tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, \"error should have been emitted\")\n-        })\n+        if errors.is_empty() {\n+            Ok(())\n+        } else {\n+            Err(self\n+                .tcx\n+                .sess\n+                .delay_span_bug(rustc_span::DUMMY_SP, \"error should have been emitted\"))\n+        }\n     }\n \n     // [Note-Type-error-reporting]"}, {"sha": "f71c39dc0d26a33e82fd144c4fa84fd4d60c3d7b", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         generic_param_scope: LocalDefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) -> Option<ErrorGuaranteed> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         self.process_registered_region_obligations(\n             outlives_env.region_bound_pairs(),\n             outlives_env.param_env,"}, {"sha": "e167bbf57e62253b97551159e99fb7c4f515716f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -223,7 +223,7 @@ provide! { tcx, def_id, other, cdata,\n     generator_kind => { table }\n     trait_def => { table }\n     deduced_param_attrs => { table }\n-    collect_trait_impl_trait_tys => {\n+    collect_return_position_impl_trait_in_trait_tys => {\n         Ok(cdata\n             .root\n             .tables"}, {"sha": "214a5842233bb19101e89c4462393845f02b43ce", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -1197,7 +1197,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.params_in_repr[def_id] <- params_in_repr);\n             }\n             if should_encode_trait_impl_trait_tys(tcx, def_id)\n-                && let Ok(table) = self.tcx.collect_trait_impl_trait_tys(def_id)\n+                && let Ok(table) = self.tcx.collect_return_position_impl_trait_in_trait_tys(def_id)\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }"}, {"sha": "37db2274f678fa0ab42f94847d6f43fed9155f91", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -169,7 +169,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query collect_trait_impl_trait_tys(key: DefId)\n+    query collect_return_position_impl_trait_in_trait_tys(key: DefId)\n         -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>\n     {\n         desc { \"comparing an impl and trait method signature, inferring any hidden `impl Trait` types in the process\" }\n@@ -2117,7 +2117,7 @@ rustc_queries! {\n         desc { \"checking to see if `{}` permits being left zeroed\", key.ty }\n     }\n \n-    query compare_assoc_const_impl_item_with_trait_item(\n+    query compare_impl_const(\n         key: (LocalDefId, DefId)\n     ) -> Result<(), ErrorGuaranteed> {\n         desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0.to_def_id()) }"}, {"sha": "cc53659f827986d7ff4b7a72163730bcb8a5f5eb", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -641,11 +641,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.type_of(def_id))\n     }\n \n-    pub fn bound_trait_impl_trait_tys(\n+    pub fn bound_return_position_impl_trait_in_trait_tys(\n         self,\n         def_id: DefId,\n     ) -> ty::EarlyBinder<Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>> {\n-        ty::EarlyBinder(self.collect_trait_impl_trait_tys(def_id))\n+        ty::EarlyBinder(self.collect_return_position_impl_trait_in_trait_tys(def_id))\n     }\n \n     pub fn bound_fn_sig(self, def_id: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'tcx>> {"}, {"sha": "f7614997585cf910c1173db7d58b9e610e11af59", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -2284,7 +2284,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         obligation.param_env,\n         cause.clone(),\n         obligation.recursion_depth + 1,\n-        tcx.bound_trait_impl_trait_tys(impl_fn_def_id)\n+        tcx.bound_return_position_impl_trait_in_trait_tys(impl_fn_def_id)\n             .map_bound(|tys| {\n                 tys.map_or_else(|_| tcx.ty_error(), |tys| tys[&obligation.predicate.def_id])\n             })"}, {"sha": "8d46ba320fc031d56044b43e3a4225e711c02bfc", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -194,7 +194,7 @@ fn resolve_associated_item<'tcx>(\n                 && trait_item_id != leaf_def.item.def_id\n                 && let Some(leaf_def_item) = leaf_def.item.def_id.as_local()\n             {\n-                tcx.compare_assoc_const_impl_item_with_trait_item((\n+                tcx.compare_impl_const((\n                     leaf_def_item,\n                     trait_item_id,\n                 ))?;"}, {"sha": "e45bdcf92134045484115081675c18d934f2e911", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -15,7 +15,6 @@ impl<T> Foo for Fooy<T> {\n     //~^ ERROR impl has stricter requirements than trait\n     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n     //~^ ERROR impl has stricter requirements than trait\n-    //~| ERROR lifetime bound not satisfied\n     type C = String where Self: Copy;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied\n     fn d() where Self: Copy {}"}, {"sha": "3acd85c8ac6ba848d2e77a521b1d06c3336c351a", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/83a28ef095ba4179a63196f16eadd97f110d6cb3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83a28ef095ba4179a63196f16eadd97f110d6cb3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=83a28ef095ba4179a63196f16eadd97f110d6cb3", "patch": "@@ -16,28 +16,8 @@ LL |     type B<'a, 'b> where 'a: 'b;\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                                                ^^ impl has extra requirement `'b: 'a`\n \n-error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:16:22\n-   |\n-LL |     type B<'a, 'b> where 'a: 'b;\n-   |     -------------- definition of `B` from trait\n-...\n-LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |                      ^^^^^^^^^^^^^^^             - help: try copying this clause from the trait: `, 'a: 'b`\n-   |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/impl_bounds.rs:16:12\n-   |\n-LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |            ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined here\n-  --> $DIR/impl_bounds.rs:16:16\n-   |\n-LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |                ^^\n-\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:19:33\n+  --> $DIR/impl_bounds.rs:18:33\n    |\n LL |     type C = String where Self: Copy;\n    |                                 ^^^^ the trait `Copy` is not implemented for `T`\n@@ -62,7 +42,7 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:21:24\n+  --> $DIR/impl_bounds.rs:20:24\n    |\n LL |     fn d() where Self: Copy {}\n    |                        ^^^^ the trait `Copy` is not implemented for `T`\n@@ -86,7 +66,7 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0276, E0277, E0478.\n+Some errors have detailed explanations: E0276, E0277.\n For more information about an error, try `rustc --explain E0276`."}]}