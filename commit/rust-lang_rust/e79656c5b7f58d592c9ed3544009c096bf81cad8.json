{"sha": "e79656c5b7f58d592c9ed3544009c096bf81cad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OTY1NmM1YjdmNThkNTkyYzllZDM1NDQwMDljMDk2YmY4MWNhZDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-03T06:15:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-03T06:15:55Z"}, "message": "support `X = &*Y` reborrows", "tree": {"sha": "ec764a76d61311d25499c15fe1b942c50dc3ecbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec764a76d61311d25499c15fe1b942c50dc3ecbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e79656c5b7f58d592c9ed3544009c096bf81cad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e79656c5b7f58d592c9ed3544009c096bf81cad8", "html_url": "https://github.com/rust-lang/rust/commit/e79656c5b7f58d592c9ed3544009c096bf81cad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e79656c5b7f58d592c9ed3544009c096bf81cad8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341a07c4c3adbc96b4a7fd6532ed34bfeb22d553", "url": "https://api.github.com/repos/rust-lang/rust/commits/341a07c4c3adbc96b4a7fd6532ed34bfeb22d553", "html_url": "https://github.com/rust-lang/rust/commit/341a07c4c3adbc96b4a7fd6532ed34bfeb22d553"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "d12ce5b4511743e6317d904f5bf98c3964087f22", "filename": "src/librustc_mir/borrow_check/nll/escaping_locals.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e79656c5b7f58d592c9ed3544009c096bf81cad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e79656c5b7f58d592c9ed3544009c096bf81cad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs?ref=e79656c5b7f58d592c9ed3544009c096bf81cad8", "patch": "@@ -13,6 +13,7 @@\n \n use rustc::mir::visit::Visitor;\n use rustc::mir::*;\n+use rustc::ty::{self, TyCtxt};\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::unify as ut;\n@@ -22,11 +23,13 @@ crate struct EscapingLocals {\n }\n \n impl EscapingLocals {\n-    crate fn compute(mir: &Mir<'_>) -> Self {\n-        let mut visitor = GatherAssignedLocalsVisitor::new();\n+    crate fn compute(tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> Self {\n+        let mut visitor = GatherAssignedLocalsVisitor::new(tcx, mir);\n         visitor.visit_mir(mir);\n \n-        EscapingLocals { unification_table: visitor.unification_table }\n+        EscapingLocals {\n+            unification_table: visitor.unification_table,\n+        }\n     }\n \n     /// True if `local` is known to escape into static\n@@ -40,8 +43,10 @@ impl EscapingLocals {\n \n /// The MIR visitor gathering the union-find of the locals used in\n /// assignments.\n-struct GatherAssignedLocalsVisitor {\n+struct GatherAssignedLocalsVisitor<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     unification_table: ut::UnificationTable<ut::InPlace<AssignedLocal>>,\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+    mir: &'cx Mir<'tcx>,\n }\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -71,17 +76,20 @@ impl From<Local> for AssignedLocal {\n     }\n }\n \n-impl GatherAssignedLocalsVisitor {\n-    fn new() -> Self {\n+impl GatherAssignedLocalsVisitor<'cx, 'gcx, 'tcx> {\n+    fn new(tcx: TyCtxt<'cx, 'gcx, 'tcx>, mir: &'cx Mir<'tcx>) -> Self {\n         Self {\n             unification_table: ut::UnificationTable::new(),\n+            tcx,\n+            mir,\n         }\n     }\n \n     fn union_locals_if_needed(&mut self, lvalue: Option<Local>, rvalue: Option<Local>) {\n         if let Some(lvalue) = lvalue {\n             if let Some(rvalue) = rvalue {\n                 if lvalue != rvalue {\n+                    debug!(\"EscapingLocals: union {:?} and {:?}\", lvalue, rvalue);\n                     self.unification_table\n                         .union(AssignedLocal::from(lvalue), AssignedLocal::from(rvalue));\n                 }\n@@ -115,7 +123,7 @@ fn find_local_in_operand(op: &Operand) -> Option<Local> {\n     }\n }\n \n-impl<'tcx> Visitor<'tcx> for GatherAssignedLocalsVisitor {\n+impl Visitor<'tcx> for GatherAssignedLocalsVisitor<'_, '_, 'tcx> {\n     fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n         // We need as many union-find keys as there are locals\n         for _ in 0..mir.local_decls.len() {\n@@ -139,6 +147,19 @@ impl<'tcx> Visitor<'tcx> for GatherAssignedLocalsVisitor {\n         match rvalue {\n             Rvalue::Use(op) => self.union_locals_if_needed(local, find_local_in_operand(op)),\n             Rvalue::Ref(_, _, place) => {\n+                // Special case: if you have `X = &*Y` where `Y` is a\n+                // reference, then the outlives relationships should\n+                // ensure that all regions in `Y` are constrained by\n+                // regions in `X`.\n+                if let Place::Projection(proj) = place {\n+                    if let ProjectionElem::Deref = proj.elem {\n+                        if let ty::TyRef(..) = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx).sty\n+                        {\n+                            self.union_locals_if_needed(local, find_local_in_place(&proj.base));\n+                        }\n+                    }\n+                }\n+\n                 self.union_locals_if_needed(local, find_local_in_place(place))\n             }\n "}, {"sha": "771be05422cc186cc4c002947a1f66f6441359ff", "filename": "src/librustc_mir/borrow_check/nll/liveness_map.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e79656c5b7f58d592c9ed3544009c096bf81cad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e79656c5b7f58d592c9ed3544009c096bf81cad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs?ref=e79656c5b7f58d592c9ed3544009c096bf81cad8", "patch": "@@ -18,7 +18,7 @@\n \n use borrow_check::nll::escaping_locals::EscapingLocals;\n use rustc::mir::{Local, Mir};\n-use rustc::ty::TypeFoldable;\n+use rustc::ty::{TyCtxt, TypeFoldable};\n use rustc_data_structures::indexed_vec::IndexVec;\n use util::liveness::LiveVariableMap;\n \n@@ -55,10 +55,12 @@ impl LiveVariableMap for NllLivenessMap {\n impl NllLivenessMap {\n     /// Iterates over the variables in Mir and assigns each Local whose type contains\n     /// regions a LocalWithRegion index. Returns a map for converting back and forth.\n-    crate fn compute(mir: &Mir<'_>) -> Self {\n-        let mut escaping_locals = EscapingLocals::compute(mir);\n+    crate fn compute(tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> Self {\n+        let mut escaping_locals = EscapingLocals::compute(tcx, mir);\n \n         let mut to_local = IndexVec::default();\n+        let mut escapes_into_return = 0;\n+        let mut no_regions = 0;\n         let from_local: IndexVec<Local, Option<_>> = mir\n             .local_decls\n             .iter_enumerated()\n@@ -70,14 +72,22 @@ impl NllLivenessMap {\n                     // (e.g., `'static`) and hence liveness is not\n                     // needed. This is particularly important for big\n                     // statics.\n+                    escapes_into_return += 1;\n                     None\n                 } else if local_decl.ty.has_free_regions() {\n-                    Some(to_local.push(local))\n+                    let l = to_local.push(local);\n+                    debug!(\"liveness_map: {:?} = {:?}\", local, l);\n+                    Some(l)\n                 } else {\n+                    no_regions += 1;\n                     None\n                 }\n             }).collect();\n \n+        debug!(\"liveness_map: {} variables need liveness\", to_local.len());\n+        debug!(\"liveness_map: {} escapes into return\", escapes_into_return);\n+        debug!(\"liveness_map: {} no regions\", no_regions);\n+\n         Self {\n             from_local,\n             to_local,"}, {"sha": "cc070a37ba1867bcd0dac6366cbd40367fa16576", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e79656c5b7f58d592c9ed3544009c096bf81cad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e79656c5b7f58d592c9ed3544009c096bf81cad8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=e79656c5b7f58d592c9ed3544009c096bf81cad8", "patch": "@@ -109,7 +109,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     let elements = &Rc::new(RegionValueElements::new(mir));\n \n     // Run the MIR type-checker.\n-    let liveness_map = NllLivenessMap::compute(&mir);\n+    let liveness_map = NllLivenessMap::compute(infcx.tcx, &mir);\n     let liveness = LivenessResults::compute(mir, &liveness_map);\n     let (constraint_sets, universal_region_relations) = type_check::type_check(\n         infcx,\n@@ -206,6 +206,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     dump_mir_results(\n         infcx,\n         &liveness,\n+        &liveness_map,\n         MirSource::item(def_id),\n         &mir,\n         &regioncx,\n@@ -222,6 +223,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     liveness: &LivenessResults<LocalWithRegion>,\n+    liveness_map: &NllLivenessMap,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     regioncx: &RegionInferenceContext,\n@@ -231,16 +233,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         return;\n     }\n \n-    let map = &NllLivenessMap::compute(mir);\n-\n     let regular_liveness_per_location: FxHashMap<_, _> = mir\n         .basic_blocks()\n         .indices()\n         .flat_map(|bb| {\n             let mut results = vec![];\n             liveness\n                 .regular\n-                .simulate_block(&mir, bb, map, |location, local_set| {\n+                .simulate_block(&mir, bb, liveness_map, |location, local_set| {\n                     results.push((location, local_set.clone()));\n                 });\n             results\n@@ -254,7 +254,7 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n             let mut results = vec![];\n             liveness\n                 .drop\n-                .simulate_block(&mir, bb, map, |location, local_set| {\n+                .simulate_block(&mir, bb, liveness_map, |location, local_set| {\n                     results.push((location, local_set.clone()));\n                 });\n             results"}]}