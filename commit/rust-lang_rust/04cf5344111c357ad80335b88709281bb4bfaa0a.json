{"sha": "04cf5344111c357ad80335b88709281bb4bfaa0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Y2Y1MzQ0MTExYzM1N2FkODAzMzViODg3MDkyODFiYjRiZmFhMGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-13T03:36:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-17T16:34:42Z"}, "message": "std: Implement `thread::sleep`\n\nThis function is the current replacement for `std::old_io::timer` which will\nsoon be deprecated. This function is unstable and has its own feature gate as it\ndoes not yet have an RFC nor has it existed for very long.", "tree": {"sha": "2a0788a1caed1c284a74330305cbf2aceebd5387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a0788a1caed1c284a74330305cbf2aceebd5387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04cf5344111c357ad80335b88709281bb4bfaa0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04cf5344111c357ad80335b88709281bb4bfaa0a", "html_url": "https://github.com/rust-lang/rust/commit/04cf5344111c357ad80335b88709281bb4bfaa0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04cf5344111c357ad80335b88709281bb4bfaa0a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970baad714d4119e5f93647163f197c9474d6ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/970baad714d4119e5f93647163f197c9474d6ace", "html_url": "https://github.com/rust-lang/rust/commit/970baad714d4119e5f93647163f197c9474d6ace"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "045082949812bf605035c5c9c1d08faa383b1e45", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/04cf5344111c357ad80335b88709281bb4bfaa0a/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04cf5344111c357ad80335b88709281bb4bfaa0a/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=04cf5344111c357ad80335b88709281bb4bfaa0a", "patch": "@@ -287,10 +287,24 @@ pub fn sleep(dur: Duration) {\n         };\n         // If we're awoken with a signal then the return value will be -1 and\n         // nanosleep will fill in `ts` with the remaining time.\n-        while libc::nanosleep(&ts, &mut ts) == -1 {\n+        while dosleep(&mut ts) == -1 {\n             assert_eq!(os::errno(), libc::EINTR);\n         }\n     }\n+\n+    #[cfg(target_os = \"linux\")]\n+    unsafe fn dosleep(ts: *mut libc::timespec) -> libc::c_int {\n+        extern {\n+            fn clock_nanosleep(clock_id: libc::c_int, flags: libc::c_int,\n+                               request: *const libc::timespec,\n+                               remain: *mut libc::timespec) -> libc::c_int;\n+        }\n+        clock_nanosleep(libc::CLOCK_MONOTONIC, 0, ts, ts)\n+    }\n+    #[cfg(not(target_os = \"linux\"))]\n+    unsafe fn dosleep(ts: *mut libc::timespec) -> libc::c_int {\n+        libc::nanosleep(ts, ts)\n+    }\n }\n \n // glibc >= 2.15 has a __pthread_get_minstack() function that returns"}, {"sha": "d1d4ad90081bf536ddc3b8ca40351b126ad1b6f3", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/04cf5344111c357ad80335b88709281bb4bfaa0a/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04cf5344111c357ad80335b88709281bb4bfaa0a/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=04cf5344111c357ad80335b88709281bb4bfaa0a", "patch": "@@ -20,6 +20,7 @@ use ptr;\n use sys_common::stack::RED_ZONE;\n use sys_common::thread::*;\n use thunk::Thunk;\n+use time::Duration;\n \n pub type rust_thread = HANDLE;\n \n@@ -82,6 +83,20 @@ pub unsafe fn yield_now() {\n     SwitchToThread();\n }\n \n+pub fn sleep(dur: Duration) {\n+    unsafe {\n+        if dur < Duration::zero() {\n+            return yield_now()\n+        }\n+        let ms = dur.num_milliseconds();\n+        // if we have a fractional number of milliseconds then add an extra\n+        // millisecond to sleep for\n+        let extra = dur - Duration::milliseconds(ms);\n+        let ms = ms + if extra.is_zero() {0} else {1};\n+        Sleep(ms as DWORD);\n+    }\n+}\n+\n #[allow(non_snake_case)]\n extern \"system\" {\n     fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES,\n@@ -92,4 +107,5 @@ extern \"system\" {\n                     lpThreadId: LPDWORD) -> HANDLE;\n     fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n     fn SwitchToThread() -> BOOL;\n+    fn Sleep(dwMilliseconds: DWORD);\n }"}, {"sha": "0216f324fdbcef3ce0c8ea874ba973a286b5e6f9", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04cf5344111c357ad80335b88709281bb4bfaa0a/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04cf5344111c357ad80335b88709281bb4bfaa0a/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=04cf5344111c357ad80335b88709281bb4bfaa0a", "patch": "@@ -379,6 +379,19 @@ pub fn panicking() -> bool {\n     unwind::panicking()\n }\n \n+/// Put the current thread to sleep for the specified amount of time.\n+///\n+/// The thread may sleep longer than the duration specified due to scheduling\n+/// specifics or platform-dependent functionality. Note that on unix platforms\n+/// this function will not return early due to a signal being received or a\n+/// spurious wakeup.\n+#[unstable(feature = \"thread_sleep\",\n+           reason = \"recently added, needs an RFC, and `Duration` itself is \\\n+                     unstable\")]\n+pub fn sleep(dur: Duration) {\n+    imp::sleep(dur)\n+}\n+\n /// Block unless or until the current thread's token is made available (may wake spuriously).\n ///\n /// See the module doc for more detail.\n@@ -935,6 +948,12 @@ mod test {\n         }\n     }\n \n+    #[test]\n+    fn sleep_smoke() {\n+        thread::sleep(Duration::milliseconds(2));\n+        thread::sleep(Duration::milliseconds(-2));\n+    }\n+\n     // NOTE: the corresponding test for stderr is in run-pass/task-stderr, due\n     // to the test harness apparently interfering with stderr configuration.\n }"}]}