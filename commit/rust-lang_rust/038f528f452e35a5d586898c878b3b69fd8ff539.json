{"sha": "038f528f452e35a5d586898c878b3b69fd8ff539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOGY1MjhmNDUyZTM1YTVkNTg2ODk4Yzg3OGIzYjY5ZmQ4ZmY1Mzk=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-04-19T23:27:01Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-04-19T23:31:26Z"}, "message": "Added lint for use imports which remove unsafe from name", "tree": {"sha": "77f75de9365e4bf85e9ea791a2aea5cd61b828fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f75de9365e4bf85e9ea791a2aea5cd61b828fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038f528f452e35a5d586898c878b3b69fd8ff539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038f528f452e35a5d586898c878b3b69fd8ff539", "html_url": "https://github.com/rust-lang/rust/commit/038f528f452e35a5d586898c878b3b69fd8ff539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038f528f452e35a5d586898c878b3b69fd8ff539/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc067089eae3011b92aed71191a48bf2b9a0d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc067089eae3011b92aed71191a48bf2b9a0d58", "html_url": "https://github.com/rust-lang/rust/commit/0bc067089eae3011b92aed71191a48bf2b9a0d58"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "eee091e6195f3ee3a7352c6959d61352bb2f796b", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038f528f452e35a5d586898c878b3b69fd8ff539/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f528f452e35a5d586898c878b3b69fd8ff539/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=038f528f452e35a5d586898c878b3b69fd8ff539", "patch": "@@ -109,6 +109,7 @@ pub mod transmute;\n pub mod types;\n pub mod unicode;\n pub mod unused_label;\n+pub mod unsafe_removed_from_name;\n pub mod vec;\n pub mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n@@ -234,6 +235,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n+    reg.register_late_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n@@ -379,6 +381,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unused_label::UNUSED_LABEL,\n+        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         vec::USELESS_VEC,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);"}, {"sha": "86860c67cfee26c6e39657167e420673c702d864", "filename": "src/unsafe_removed_from_name.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/038f528f452e35a5d586898c878b3b69fd8ff539/src%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f528f452e35a5d586898c878b3b69fd8ff539/src%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsafe_removed_from_name.rs?ref=038f528f452e35a5d586898c878b3b69fd8ff539", "patch": "@@ -0,0 +1,90 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::ast::{Name, NodeId};\n+use syntax::codemap::Span;\n+use syntax::parse::token::InternedString;\n+use utils::span_lint;\n+\n+/// **What it does:** This lint checks for imports that remove \"unsafe\" from an item's name\n+///\n+/// **Why is this bad?** Renaming makes it less clear which traits and structures are unsafe.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// use std::cell::{UnsafeCell as TotallySafeCell};\n+///\n+/// extern crate crossbeam;\n+/// use crossbeam::{spawn_unsafe as spawn};\n+/// ```\n+declare_lint! {\n+    pub UNSAFE_REMOVED_FROM_NAME,\n+    Warn,\n+    \"unsafe removed from name\"\n+}\n+\n+pub struct UnsafeNameRemoval;\n+\n+impl LintPass for UnsafeNameRemoval {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNSAFE_REMOVED_FROM_NAME)\n+    }\n+}\n+\n+impl LateLintPass for UnsafeNameRemoval {\n+    fn check_mod(&mut self, cx: &LateContext, m: &Mod, _: Span, _: NodeId) {\n+        // only check top level `use` statements\n+        for item in &m.item_ids {\n+            self.lint_item(cx, cx.krate.item(item.id));\n+        }\n+    }\n+}\n+\n+impl UnsafeNameRemoval {\n+    fn lint_item(&self, cx: &LateContext, item: &Item) {\n+        if let ItemUse(ref item_use) = item.node {\n+            match item_use.node {\n+                ViewPath_::ViewPathSimple(ref name, ref path) => {\n+                    unsafe_to_safe_check(\n+                        path.segments\n+                            .last()\n+                            .expect(\"use paths cannot be empty\")\n+                            .identifier.name,\n+                        *name,\n+                        cx, &item.span\n+                        );\n+                },\n+                ViewPath_::ViewPathList(_, ref path_list_items) => {\n+                    for path_list_item in path_list_items.iter() {\n+                        let plid = path_list_item.node;\n+                        if let (Some(name), Some(rename)) = (plid.name(), plid.rename()) {\n+                            unsafe_to_safe_check(name, rename, cx, &item.span);\n+                        };\n+                    }\n+                },\n+                ViewPath_::ViewPathGlob(_) => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn unsafe_to_safe_check(old_name: Name, new_name: Name, cx: &LateContext, span: &Span) {\n+    let old_str = old_name.as_str();\n+    let new_str = new_name.as_str();\n+    if contains_unsafe(&old_str) && !contains_unsafe(&new_str) {\n+        span_lint(\n+            cx,\n+            UNSAFE_REMOVED_FROM_NAME,\n+            *span,\n+            &format!(\n+                \"removed \\\"unsafe\\\" from the name of `{}` in use as `{}`\",\n+                old_str,\n+                new_str\n+            ));\n+    }\n+}\n+\n+fn contains_unsafe(name: &InternedString) -> bool {\n+    name.contains(\"Unsafe\") || name.contains(\"unsafe\")\n+}"}, {"sha": "facdb2c64edbe381d217fa12092f8e8d58a52cca", "filename": "tests/compile-fail/unsafe_removed_from_name.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/038f528f452e35a5d586898c878b3b69fd8ff539/tests%2Fcompile-fail%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038f528f452e35a5d586898c878b3b69fd8ff539/tests%2Fcompile-fail%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsafe_removed_from_name.rs?ref=038f528f452e35a5d586898c878b3b69fd8ff539", "patch": "@@ -0,0 +1,12 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused_imports)]\n+#![deny(unsafe_removed_from_name)]\n+\n+use std::cell::{UnsafeCell as TotallySafeCell};\n+//~^ ERROR removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCell`\n+\n+use std::cell::UnsafeCell as TotallySafeCellAgain;\n+//~^ ERROR removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCellAgain`\n+\n+fn main() {}"}]}