{"sha": "b99a2542f38a2d08b863d2e2ab73bfd64647e520", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OWEyNTQyZjM4YTJkMDhiODYzZDJlMmFiNzNiZmQ2NDY0N2U1MjA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-20T04:32:19Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-20T04:32:19Z"}, "message": "docs: mention static methods\n\n/cc #4217", "tree": {"sha": "0f5fe18d751fcd5482d639aea0175aa70a858404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5fe18d751fcd5482d639aea0175aa70a858404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99a2542f38a2d08b863d2e2ab73bfd64647e520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99a2542f38a2d08b863d2e2ab73bfd64647e520", "html_url": "https://github.com/rust-lang/rust/commit/b99a2542f38a2d08b863d2e2ab73bfd64647e520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99a2542f38a2d08b863d2e2ab73bfd64647e520/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d313fe5011acfa28b8771c5975be37e1c84fd73", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d313fe5011acfa28b8771c5975be37e1c84fd73", "html_url": "https://github.com/rust-lang/rust/commit/2d313fe5011acfa28b8771c5975be37e1c84fd73"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "f1064c395aaa2d3dfe175c7e48d30d30ac82ba74", "filename": "doc/rust.md", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b99a2542f38a2d08b863d2e2ab73bfd64647e520/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b99a2542f38a2d08b863d2e2ab73bfd64647e520/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=b99a2542f38a2d08b863d2e2ab73bfd64647e520", "patch": "@@ -1195,8 +1195,23 @@ Values with a trait type can have [methods called](#method-call-expressions) on\n for any method in the trait,\n and can be used to instantiate type parameters that are bounded by the trait.\n \n-Trait methods may be static.\n-Currently, implementations of static methods behave like functions declared in the implementation's module.\n+Trait methods may be static,\n+which means that they lack a `self` argument.\n+This means that they can only be called with function call syntax (`f(x)`)\n+and not method call syntax (`obj.f()`).\n+The way to refer to the name of a static method is to qualify it with the trait name,\n+treating the trait name like a module.\n+For example:\n+\n+~~~~\n+trait Num {\n+    static pure fn from_int(n: int) -> self;\n+}\n+impl float: Num {\n+    static pure fn from_int(n: int) -> float { n as float }\n+}\n+let x: float = Num::from_int(42);     \n+~~~~\n \n Traits can have _constraints_ for example, in\n "}, {"sha": "8c57f2883ad510fbdef36699db6f81717f04fa0b", "filename": "doc/tutorial.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b99a2542f38a2d08b863d2e2ab73bfd64647e520/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/b99a2542f38a2d08b863d2e2ab73bfd64647e520/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=b99a2542f38a2d08b863d2e2ab73bfd64647e520", "patch": "@@ -2076,6 +2076,32 @@ the preferred way to use traits polymorphically.\n \n This usage of traits is similar to Haskell type classes.\n \n+## Static methods\n+\n+Traits can define _static_ methods, which don't have an implicit `self` argument.\n+The `static` keyword distinguishes static methods from methods that have a `self`:\n+\n+~~~~\n+trait Shape {\n+    fn area() -> float;\n+    static fn new_shape(area: float) -> Shape;\n+}\n+~~~~\n+\n+Constructors are one application for static methods, as in `new_shape` above.\n+To call a static method, you have to prefix it with the trait name and a double colon:\n+\n+~~~~\n+# trait Shape { static fn new_shape(area: float) -> self; }\n+# use float::consts::pi;\n+# use float::sqrt;\n+struct Circle { radius: float }\n+impl Circle: Shape {\n+    static fn new_shape(area: float) -> Circle { Circle { radius: sqrt(area / pi) } }\n+}\n+let s: Circle = Shape::new_shape(42.5);\n+~~~~\n+\n ## Trait constraints\n \n We can write a trait declaration that is _constrained_ to only be implementable on types that"}]}