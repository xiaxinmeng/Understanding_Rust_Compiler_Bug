{"sha": "c429c7c04b9c19c2ca5992b5f4e094e83832dcb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjljN2MwNGI5YzE5YzJjYTU5OTJiNWY0ZTA5NGU4MzgzMmRjYjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-26T18:09:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-26T18:31:40Z"}, "message": "rustdoc: Fix broken struct field search links\n\nTakes the same approach as variants, writes a redirect index page back to the\nstruct with an anchor to the field in question.\n\nCloses #9524", "tree": {"sha": "d42856c49dafa3c5f60d4f4a8e3f7eafa13bf50c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d42856c49dafa3c5f60d4f4a8e3f7eafa13bf50c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8", "html_url": "https://github.com/rust-lang/rust/commit/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f991a24419b4d1f2c4a9d764e07777b6fb317f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f991a24419b4d1f2c4a9d764e07777b6fb317f7", "html_url": "https://github.com/rust-lang/rust/commit/6f991a24419b4d1f2c4a9d764e07777b6fb317f7"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "e019599835c3845b1cf42d861fa46ab5eeb7ee75", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c429c7c04b9c19c2ca5992b5f4e094e83832dcb8", "patch": "@@ -521,6 +521,14 @@ impl Context {\n                             }\n                         }\n                     }\n+                    clean::StructItem(s) => {\n+                        let mut it = s.fields.move_iter();\n+                        do self.recurse(name) |this| {\n+                            for item in it {\n+                                f(this, item);\n+                            }\n+                        }\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -590,6 +598,8 @@ impl<'self> fmt::Default for Item<'self> {\n             clean::EnumItem(ref e) => item_enum(fmt.buf, it.item, e),\n             clean::TypedefItem(ref t) => item_typedef(fmt.buf, it.item, t),\n             clean::VariantItem(*) => item_variant(fmt.buf, it.cx, it.item),\n+            clean::StructFieldItem(*) => item_struct_field(fmt.buf, it.cx,\n+                                                           it.item),\n             _ => {}\n         }\n     }\n@@ -980,11 +990,12 @@ fn render_struct(w: &mut io::Writer, it: &clean::Item,\n             for field in fields.iter() {\n                 match field.inner {\n                     clean::StructFieldItem(ref ty) => {\n-                        write!(w, \"    {}{}: {},\\n{}\",\n+                        write!(w, \"    {}<a name='field.{name}'>{name}</a>: \\\n+                                   {},\\n{}\",\n                                VisSpace(field.visibility),\n-                               field.name.get_ref().as_slice(),\n                                ty.type_,\n-                               tab);\n+                               tab,\n+                               name = field.name.get_ref().as_slice());\n                     }\n                     _ => unreachable!()\n                 }\n@@ -1170,3 +1181,12 @@ fn item_variant(w: &mut io::Writer, cx: &Context, it: &clean::Item) {\n            *cx.current.last(),\n            it.name.get_ref().as_slice());\n }\n+\n+fn item_struct_field(w: &mut io::Writer, cx: &Context, it: &clean::Item) {\n+    write!(w, \"<DOCTYPE html><html><head>\\\n+                <meta http-equiv='refresh' content='0; \\\n+                      url=../struct.{}.html\\\\#field.{}'>\\\n+               </head><body></body></html>\",\n+           *cx.current.last(),\n+           it.name.get_ref().as_slice());\n+}"}]}