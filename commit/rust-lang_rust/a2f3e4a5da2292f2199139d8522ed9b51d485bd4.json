{"sha": "a2f3e4a5da2292f2199139d8522ed9b51d485bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjNlNGE1ZGEyMjkyZjIxOTkxMzlkODUyMmVkOWI1MWQ0ODViZDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-19T15:00:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-29T11:37:09Z"}, "message": "Change span for intra-doc links errors", "tree": {"sha": "a5967e905dd54533fb647a73769ca7393bedf43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5967e905dd54533fb647a73769ca7393bedf43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f3e4a5da2292f2199139d8522ed9b51d485bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f3e4a5da2292f2199139d8522ed9b51d485bd4", "html_url": "https://github.com/rust-lang/rust/commit/a2f3e4a5da2292f2199139d8522ed9b51d485bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f3e4a5da2292f2199139d8522ed9b51d485bd4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea2e446f09b923d513013743b37b43fca7282dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea2e446f09b923d513013743b37b43fca7282dc", "html_url": "https://github.com/rust-lang/rust/commit/aea2e446f09b923d513013743b37b43fca7282dc"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "ddb7b85d34a0483aae6300ae5695d99affdf3e66", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 73, "deletions": 24, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a2f3e4a5da2292f2199139d8522ed9b51d485bd4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f3e4a5da2292f2199139d8522ed9b51d485bd4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a2f3e4a5da2292f2199139d8522ed9b51d485bd4", "patch": "@@ -19,7 +19,7 @@ use rustc_resolve::ParentScope;\n use rustc_session::lint::Lint;\n use rustc_span::hygiene::{MacroKind, SyntaxContext};\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{BytePos, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use pulldown_cmark::LinkType;\n@@ -1193,16 +1193,20 @@ impl LinkCollector<'_, '_> {\n         let report_mismatch = |specified: Disambiguator, resolved: Disambiguator| {\n             // The resolved item did not match the disambiguator; give a better error than 'not found'\n             let msg = format!(\"incompatible link kind for `{}`\", path_str);\n-            let callback = |diag: &mut DiagnosticBuilder<'_>, sp| {\n+            let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n                 let note = format!(\n                     \"this link resolved to {} {}, which is not {} {}\",\n                     resolved.article(),\n                     resolved.descr(),\n                     specified.article(),\n                     specified.descr()\n                 );\n-                diag.note(&note);\n-                suggest_disambiguator(resolved, diag, path_str, dox, sp, &ori_link.range);\n+                if let Some(sp) = sp {\n+                    diag.span_label(sp, &note);\n+                } else {\n+                    diag.note(&note);\n+                }\n+                suggest_disambiguator(resolved, diag, path_str, &ori_link.link, sp);\n             };\n             report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n         };\n@@ -1699,6 +1703,51 @@ impl Suggestion {\n             Self::RemoveDisambiguator => path_str.into(),\n         }\n     }\n+\n+    fn as_help_span(\n+        &self,\n+        path_str: &str,\n+        ori_link: &str,\n+        sp: rustc_span::Span,\n+    ) -> Vec<(rustc_span::Span, String)> {\n+        let inner_sp = match ori_link.find('(') {\n+            Some(index) => sp.with_hi(sp.lo() + BytePos(index as _)),\n+            None => sp,\n+        };\n+        let inner_sp = match ori_link.find('!') {\n+            Some(index) => inner_sp.with_hi(inner_sp.lo() + BytePos(index as _)),\n+            None => inner_sp,\n+        };\n+        let inner_sp = match ori_link.find('@') {\n+            Some(index) => inner_sp.with_lo(inner_sp.lo() + BytePos(index as u32 + 1)),\n+            None => inner_sp,\n+        };\n+        match self {\n+            Self::Prefix(prefix) => {\n+                // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n+                let mut sugg = vec![(sp.with_hi(inner_sp.lo()), format!(\"{}@\", prefix))];\n+                if sp.hi() != inner_sp.hi() {\n+                    sugg.push((inner_sp.shrink_to_hi().with_hi(sp.hi()), String::new()));\n+                }\n+                sugg\n+            }\n+            Self::Function => {\n+                let mut sugg = vec![(inner_sp.shrink_to_hi().with_hi(sp.hi()), \"()\".to_string())];\n+                if sp.lo() != inner_sp.lo() {\n+                    sugg.push((inner_sp.shrink_to_lo().with_lo(sp.lo()), String::new()));\n+                }\n+                sugg\n+            }\n+            Self::Macro => {\n+                let mut sugg = vec![(inner_sp.shrink_to_hi(), \"!\".to_string())];\n+                if sp.lo() != inner_sp.lo() {\n+                    sugg.push((inner_sp.shrink_to_lo().with_lo(sp.lo()), String::new()));\n+                }\n+                sugg\n+            }\n+            Self::RemoveDisambiguator => return vec![(sp, path_str.into())],\n+        }\n+    }\n }\n \n /// Reports a diagnostic for an intra-doc link.\n@@ -1732,7 +1781,16 @@ fn report_diagnostic(\n     tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n-        let span = super::source_span_for_markdown_range(tcx, dox, link_range, &item.attrs);\n+        let span =\n+            super::source_span_for_markdown_range(tcx, dox, link_range, &item.attrs).map(|sp| {\n+                if dox.bytes().nth(link_range.start) == Some(b'`')\n+                    && dox.bytes().nth(link_range.end - 1) == Some(b'`')\n+                {\n+                    sp.with_lo(sp.lo() + BytePos(1)).with_hi(sp.hi() - BytePos(1))\n+                } else {\n+                    sp\n+                }\n+            });\n \n         if let Some(sp) = span {\n             diag.set_span(sp);\n@@ -1938,9 +1996,8 @@ fn resolution_failure(\n                                 disambiguator,\n                                 diag,\n                                 path_str,\n-                                diag_info.dox,\n+                                diag_info.ori_link,\n                                 sp,\n-                                &diag_info.link_range,\n                             )\n                         }\n \n@@ -2007,7 +2064,7 @@ fn anchor_failure(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>, failure: A\n             if let Some((fragment_offset, _)) =\n                 diag_info.ori_link.char_indices().filter(|(_, x)| *x == '#').nth(anchor_idx)\n             {\n-                sp = sp.with_lo(sp.lo() + rustc_span::BytePos(fragment_offset as _));\n+                sp = sp.with_lo(sp.lo() + BytePos(fragment_offset as _));\n             }\n             diag.span_label(sp, \"invalid anchor\");\n         }\n@@ -2075,14 +2132,7 @@ fn ambiguity_error(\n \n         for res in candidates {\n             let disambiguator = Disambiguator::from_res(res);\n-            suggest_disambiguator(\n-                disambiguator,\n-                diag,\n-                path_str,\n-                diag_info.dox,\n-                sp,\n-                &diag_info.link_range,\n-            );\n+            suggest_disambiguator(disambiguator, diag, path_str, diag_info.ori_link, sp);\n         }\n     });\n }\n@@ -2093,21 +2143,20 @@ fn suggest_disambiguator(\n     disambiguator: Disambiguator,\n     diag: &mut DiagnosticBuilder<'_>,\n     path_str: &str,\n-    dox: &str,\n+    ori_link: &str,\n     sp: Option<rustc_span::Span>,\n-    link_range: &Range<usize>,\n ) {\n     let suggestion = disambiguator.suggestion();\n     let help = format!(\"to link to the {}, {}\", disambiguator.descr(), suggestion.descr());\n \n     if let Some(sp) = sp {\n-        let msg = if dox.bytes().nth(link_range.start) == Some(b'`') {\n-            format!(\"`{}`\", suggestion.as_help(path_str))\n+        let mut spans = suggestion.as_help_span(path_str, ori_link, sp);\n+        if spans.len() > 1 {\n+            diag.multipart_suggestion(&help, spans, Applicability::MaybeIncorrect);\n         } else {\n-            suggestion.as_help(path_str)\n-        };\n-\n-        diag.span_suggestion(sp, &help, msg, Applicability::MaybeIncorrect);\n+            let (sp, suggestion_text) = spans.pop().unwrap();\n+            diag.span_suggestion_verbose(sp, &help, suggestion_text, Applicability::MaybeIncorrect);\n+        }\n     } else {\n         diag.help(&format!(\"{}: {}\", help, suggestion.as_help(path_str)));\n     }"}]}