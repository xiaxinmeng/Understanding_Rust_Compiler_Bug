{"sha": "b3f178350a44095e71306789da441ed785fae28c", "node_id": "C_kwDOAAsO6NoAKGIzZjE3ODM1MGE0NDA5NWU3MTMwNjc4OWRhNDQxZWQ3ODVmYWUyOGM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-24T23:50:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-24T23:50:55Z"}, "message": "Rollup merge of #99954 - dingxiangfei2009:break-out-let-else-higher-up, r=oli-obk\n\nlet-else: break out to one scope higher for let-else\n\n```@est31``` This PR follows up with #99518 which is to break out to the last remainder scope. It breaks to the out-most `region_scope` of the block if the first statement is a `let-else`.", "tree": {"sha": "9e7218496dc895a8a31d29701016652a7732f35b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7218496dc895a8a31d29701016652a7732f35b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f178350a44095e71306789da441ed785fae28c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBrlfCRBK7hj4Ov3rIwAAfAQIAKRMVfAG4P6WCc8n7QKIF7Kz\nMgtcRoWA58mycLWjWXF8EY+eULMraj0wP5WALYQBcqXJrBe8DZLr5DlcJ4ddC27a\nYMFOq/mv9s7WBKaNup+s7Ca7x0jJF9Hp2mfFMg0elE7m6sNzMtEZoUkIj9hW4qXr\n4orZ4Z9D60J7B0aso74o19FvJQ3FXhYZydupLiDbCr3+0b5YSyBXQq7yLU/5r9Gp\n1DP+ESjf1NVc1WYBZooYpGIlHkdp06jjFN5AhuPTD86VKSg66QlXM1dbDiREggy0\n+SFdCYjBEn5S+O0BCaRagyYS1pw3GcgYLJjqU7M/PGOjzGtaYdOFNhrnMUkKXdE=\n=P2O8\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e7218496dc895a8a31d29701016652a7732f35b\nparent f4550a6edfcbb1e284d9eb1d095f034848e1ee01\nparent 8467a7b33ebdb0c8641e80c9c36bb098a93a7547\nauthor Yuki Okushi <jtitor@2k36.org> 1661385055 +0900\ncommitter GitHub <noreply@github.com> 1661385055 +0900\n\nRollup merge of #99954 - dingxiangfei2009:break-out-let-else-higher-up, r=oli-obk\n\nlet-else: break out to one scope higher for let-else\n\n```@est31``` This PR follows up with #99518 which is to break out to the last remainder scope. It breaks to the out-most `region_scope` of the block if the first statement is a `let-else`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f178350a44095e71306789da441ed785fae28c", "html_url": "https://github.com/rust-lang/rust/commit/b3f178350a44095e71306789da441ed785fae28c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f178350a44095e71306789da441ed785fae28c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "html_url": "https://github.com/rust-lang/rust/commit/f4550a6edfcbb1e284d9eb1d095f034848e1ee01"}, {"sha": "8467a7b33ebdb0c8641e80c9c36bb098a93a7547", "url": "https://api.github.com/repos/rust-lang/rust/commits/8467a7b33ebdb0c8641e80c9c36bb098a93a7547", "html_url": "https://github.com/rust-lang/rust/commit/8467a7b33ebdb0c8641e80c9c36bb098a93a7547"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "280b6aad12c0a9bbe702e5ed5a8f500916ca7a8b", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3f178350a44095e71306789da441ed785fae28c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f178350a44095e71306789da441ed785fae28c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=b3f178350a44095e71306789da441ed785fae28c", "patch": "@@ -1,6 +1,7 @@\n use crate::build::matches::ArmHasGuard;\n use crate::build::ForGuard::OutsideGuard;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use rustc_middle::middle::region::Scope;\n use rustc_middle::thir::*;\n use rustc_middle::{mir::*, ty};\n use rustc_span::Span;\n@@ -34,10 +35,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             &stmts,\n                             expr,\n                             safety_mode,\n+                            region_scope,\n                         ))\n                     })\n                 } else {\n-                    this.ast_block_stmts(destination, block, span, &stmts, expr, safety_mode)\n+                    this.ast_block_stmts(\n+                        destination,\n+                        block,\n+                        span,\n+                        &stmts,\n+                        expr,\n+                        safety_mode,\n+                        region_scope,\n+                    )\n                 }\n             })\n         })\n@@ -51,6 +61,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         stmts: &[StmtId],\n         expr: Option<&Expr<'tcx>>,\n         safety_mode: BlockSafety,\n+        region_scope: Scope,\n     ) -> BlockAnd<()> {\n         let this = self;\n \n@@ -73,6 +84,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let mut let_scope_stack = Vec::with_capacity(8);\n         let outer_source_scope = this.source_scope;\n         let outer_in_scope_unsafe = this.in_scope_unsafe;\n+        // This scope information is kept for breaking out of the parent remainder scope in case\n+        // one let-else pattern matching fails.\n+        // By doing so, we can be sure that even temporaries that receive extended lifetime\n+        // assignments are dropped, too.\n+        let mut last_remainder_scope = region_scope;\n         this.update_source_scope_for_safety_mode(span, safety_mode);\n \n         let source_info = this.source_info(span);\n@@ -132,7 +148,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 initializer_span,\n                                                 else_block,\n                                                 visibility_scope,\n-                                                *remainder_scope,\n+                                                last_remainder_scope,\n                                                 remainder_span,\n                                                 pattern,\n                                             )\n@@ -178,6 +194,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     if let Some(source_scope) = visibility_scope {\n                         this.source_scope = source_scope;\n                     }\n+                    last_remainder_scope = *remainder_scope;\n                 }\n             }\n "}, {"sha": "07fcc16e7bbda3c74d4a86d4821cabc4bfca1560", "filename": "src/test/ui/let-else/let-else-temporary-lifetime.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3f178350a44095e71306789da441ed785fae28c/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f178350a44095e71306789da441ed785fae28c/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs?ref=b3f178350a44095e71306789da441ed785fae28c", "patch": "@@ -74,6 +74,17 @@ fn main() {\n             };\n         }\n     }\n+    {\n+        fn must_pass() {\n+            let rc = Rc::new(());\n+            let &None = &Some(Rc::clone(&rc)) else {\n+                Rc::try_unwrap(rc).unwrap();\n+                return;\n+            };\n+            unreachable!();\n+        }\n+        must_pass();\n+    }\n     {\n         // test let-else drops temps before else block\n         // NOTE: this test has to be the last block in the `main`"}]}