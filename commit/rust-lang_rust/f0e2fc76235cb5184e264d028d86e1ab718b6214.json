{"sha": "f0e2fc76235cb5184e264d028d86e1ab718b6214", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZTJmYzc2MjM1Y2I1MTg0ZTI2NGQwMjhkODZlMWFiNzE4YjYyMTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-13T10:19:14Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-13T12:43:58Z"}, "message": "Improve type safety", "tree": {"sha": "d077d57507219647263655c775cf1a4de1abc4f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d077d57507219647263655c775cf1a4de1abc4f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0e2fc76235cb5184e264d028d86e1ab718b6214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e2fc76235cb5184e264d028d86e1ab718b6214", "html_url": "https://github.com/rust-lang/rust/commit/f0e2fc76235cb5184e264d028d86e1ab718b6214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0e2fc76235cb5184e264d028d86e1ab718b6214/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea60335c286f45ea14fb2049b395e1bced2a1b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea60335c286f45ea14fb2049b395e1bced2a1b45", "html_url": "https://github.com/rust-lang/rust/commit/ea60335c286f45ea14fb2049b395e1bced2a1b45"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "a1a5232d588327c7fc8d3eb95bcadd8bd8181557", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f0e2fc76235cb5184e264d028d86e1ab718b6214/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e2fc76235cb5184e264d028d86e1ab718b6214/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=f0e2fc76235cb5184e264d028d86e1ab718b6214", "patch": "@@ -2,7 +2,7 @@\n \n //! Code that is useful in various codegen modules.\n \n-use crate::llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef};\n+use crate::llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef, ConstantInt};\n use crate::abi;\n use crate::consts;\n use crate::type_::Type;\n@@ -246,30 +246,22 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn const_to_opt_uint(&self, v: &'ll Value) -> Option<u64> {\n-        if is_const_integral(v) {\n-            unsafe {\n-                Some(llvm::LLVMConstIntGetZExtValue(v))\n-            }\n-        } else {\n-            None\n-        }\n+        try_as_const_integral(v).map(|v| unsafe {\n+            llvm::LLVMConstIntGetZExtValue(v)\n+        })\n     }\n \n     fn const_to_opt_u128(&self, v: &'ll Value, sign_ext: bool) -> Option<u128> {\n-        unsafe {\n-            if is_const_integral(v) {\n-                let (mut lo, mut hi) = (0u64, 0u64);\n-                let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n-                                                           &mut hi, &mut lo);\n-                if success {\n-                    Some(hi_lo_to_u128(lo, hi))\n-                } else {\n-                    None\n-                }\n+        try_as_const_integral(v).and_then(|v| unsafe {\n+            let (mut lo, mut hi) = (0u64, 0u64);\n+            let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n+                                                        &mut hi, &mut lo);\n+            if success {\n+                Some(hi_lo_to_u128(lo, hi))\n             } else {\n                 None\n             }\n-        }\n+        })\n     }\n \n     fn scalar_to_backend(\n@@ -387,8 +379,8 @@ fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)\n }\n \n-fn is_const_integral(v: &'ll Value) -> bool {\n+fn try_as_const_integral(v: &'ll Value) -> Option<&'ll ConstantInt> {\n     unsafe {\n-        llvm::LLVMIsAConstantInt(v).is_some()\n+        llvm::LLVMIsAConstantInt(v)\n     }\n }"}, {"sha": "a2313b933a6c970b56e63811f4a904bd40a7a81e", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0e2fc76235cb5184e264d028d86e1ab718b6214/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e2fc76235cb5184e264d028d86e1ab718b6214/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=f0e2fc76235cb5184e264d028d86e1ab718b6214", "patch": "@@ -510,6 +510,7 @@ extern { pub type Module; }\n extern { pub type Context; }\n extern { pub type Type; }\n extern { pub type Value; }\n+extern { pub type ConstantInt; }\n extern { pub type Metadata; }\n extern { pub type BasicBlock; }\n #[repr(C)]\n@@ -719,8 +720,8 @@ extern \"C\" {\n     pub fn LLVMConstInt(IntTy: &Type, N: c_ulonglong, SignExtend: Bool) -> &Value;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n     pub fn LLVMConstReal(RealTy: &Type, N: f64) -> &Value;\n-    pub fn LLVMConstIntGetZExtValue(ConstantVal: &Value) -> c_ulonglong;\n-    pub fn LLVMRustConstInt128Get(ConstantVal: &Value, SExt: bool,\n+    pub fn LLVMConstIntGetZExtValue(ConstantVal: &ConstantInt) -> c_ulonglong;\n+    pub fn LLVMRustConstInt128Get(ConstantVal: &ConstantInt, SExt: bool,\n                                   high: &mut u64, low: &mut u64) -> bool;\n \n \n@@ -1666,7 +1667,7 @@ extern \"C\" {\n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteValueToString(value_ref: &Value, s: &RustString);\n \n-    pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&Value>;\n+    pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&ConstantInt>;\n \n     pub fn LLVMRustPassKind(Pass: &Pass) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;"}]}