{"sha": "a97abb40ab390465b1cd845e735d58956d28eb16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5N2FiYjQwYWIzOTA0NjViMWNkODQ1ZTczNWQ1ODk1NmQyOGViMTY=", "commit": {"author": {"name": "Jacob Hughes", "email": "j@jacobhughes.me", "date": "2020-09-24T22:56:57Z"}, "committer": {"name": "Jacob Hughes", "email": "j@jacobhughes.me", "date": "2020-10-08T04:39:18Z"}, "message": "Rename LayoutErr to LayoutError in core", "tree": {"sha": "6e24bcde2e82d3729f7fef280dcfdc55e4f6a07f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e24bcde2e82d3729f7fef280dcfdc55e4f6a07f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97abb40ab390465b1cd845e735d58956d28eb16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97abb40ab390465b1cd845e735d58956d28eb16", "html_url": "https://github.com/rust-lang/rust/commit/a97abb40ab390465b1cd845e735d58956d28eb16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97abb40ab390465b1cd845e735d58956d28eb16/comments", "author": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9985fc1081849532546d74c35a276694833c09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9985fc1081849532546d74c35a276694833c09d", "html_url": "https://github.com/rust-lang/rust/commit/d9985fc1081849532546d74c35a276694833c09d"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "e338baea6459ae61dcee5c3dde29b3f32cc566e5", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a97abb40ab390465b1cd845e735d58956d28eb16/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97abb40ab390465b1cd845e735d58956d28eb16/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=a97abb40ab390465b1cd845e735d58956d28eb16", "patch": "@@ -39,7 +39,7 @@ pub struct Layout {\n \n impl Layout {\n     /// Constructs a `Layout` from a given `size` and `align`,\n-    /// or returns `LayoutErr` if any of the following conditions\n+    /// or returns `LayoutError` if any of the following conditions\n     /// are not met:\n     ///\n     /// * `align` must not be zero,\n@@ -52,9 +52,9 @@ impl Layout {\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_unstable(feature = \"const_alloc_layout\", issue = \"67521\")]\n     #[inline]\n-    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutErr> {\n+    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {\n         if !align.is_power_of_two() {\n-            return Err(LayoutErr { private: () });\n+            return Err(LayoutError { private: () });\n         }\n \n         // (power-of-two implies align != 0.)\n@@ -72,7 +72,7 @@ impl Layout {\n         // Above implies that checking for summation overflow is both\n         // necessary and sufficient.\n         if size > usize::MAX - (align - 1) {\n-            return Err(LayoutErr { private: () });\n+            return Err(LayoutError { private: () });\n         }\n \n         // SAFETY: the conditions for `from_size_align_unchecked` have been\n@@ -200,7 +200,7 @@ impl Layout {\n     /// `align` violates the conditions listed in [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n-    pub fn align_to(&self, align: usize) -> Result<Self, LayoutErr> {\n+    pub fn align_to(&self, align: usize) -> Result<Self, LayoutError> {\n         Layout::from_size_align(self.size(), cmp::max(self.align(), align))\n     }\n \n@@ -274,16 +274,16 @@ impl Layout {\n     /// layout of the array and `offs` is the distance between the start\n     /// of each element in the array.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutErr> {\n+    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {\n         // This cannot overflow. Quoting from the invariant of Layout:\n         // > `size`, when rounded up to the nearest multiple of `align`,\n         // > must not overflow (i.e., the rounded value must be less than\n         // > `usize::MAX`)\n         let padded_size = self.size() + self.padding_needed_for(self.align());\n-        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutErr { private: () })?;\n+        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;\n \n         // SAFETY: self.align is already known to be valid and alloc_size has been\n         // padded already.\n@@ -307,16 +307,16 @@ impl Layout {\n     /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     ///\n     /// # Examples\n     ///\n     /// To calculate the layout of a `#[repr(C)]` structure and the offsets of\n     /// the fields from its fields' layouts:\n     ///\n     /// ```rust\n-    /// # use std::alloc::{Layout, LayoutErr};\n-    /// pub fn repr_c(fields: &[Layout]) -> Result<(Layout, Vec<usize>), LayoutErr> {\n+    /// # use std::alloc::{Layout, LayoutError};\n+    /// pub fn repr_c(fields: &[Layout]) -> Result<(Layout, Vec<usize>), LayoutError> {\n     ///     let mut offsets = Vec::new();\n     ///     let mut layout = Layout::from_size_align(0, 1)?;\n     ///     for &field in fields {\n@@ -337,12 +337,12 @@ impl Layout {\n     /// ```\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n-    pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n+    pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n         let new_align = cmp::max(self.align(), next.align());\n         let pad = self.padding_needed_for(next.align());\n \n-        let offset = self.size().checked_add(pad).ok_or(LayoutErr { private: () })?;\n-        let new_size = offset.checked_add(next.size()).ok_or(LayoutErr { private: () })?;\n+        let offset = self.size().checked_add(pad).ok_or(LayoutError { private: () })?;\n+        let new_size = offset.checked_add(next.size()).ok_or(LayoutError { private: () })?;\n \n         let layout = Layout::from_size_align(new_size, new_align)?;\n         Ok((layout, offset))\n@@ -359,11 +359,11 @@ impl Layout {\n     /// guaranteed that all elements in the array will be properly\n     /// aligned.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutErr> {\n-        let size = self.size().checked_mul(n).ok_or(LayoutErr { private: () })?;\n+    pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n+        let size = self.size().checked_mul(n).ok_or(LayoutError { private: () })?;\n         Layout::from_size_align(size, self.align())\n     }\n \n@@ -372,38 +372,41 @@ impl Layout {\n     /// padding is inserted, the alignment of `next` is irrelevant,\n     /// and is not incorporated *at all* into the resulting layout.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n-    pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutErr> {\n-        let new_size = self.size().checked_add(next.size()).ok_or(LayoutErr { private: () })?;\n+    pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n+        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError { private: () })?;\n         Layout::from_size_align(new_size, self.align())\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n     ///\n-    /// On arithmetic overflow, returns `LayoutErr`.\n+    /// On arithmetic overflow, returns `LayoutError`.\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n-    pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {\n+    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n         let (layout, offset) = Layout::new::<T>().repeat(n)?;\n         debug_assert_eq!(offset, mem::size_of::<T>());\n         Ok(layout.pad_to_align())\n     }\n }\n \n+#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+pub type LayoutErr = LayoutError;\n+\n /// The parameters given to `Layout::from_size_align`\n /// or some other `Layout` constructor\n /// do not satisfy its documented constraints.\n-#[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+#[stable(feature = \"alloc_layout_error\", since = \"1.49.0\")]\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct LayoutErr {\n+pub struct LayoutError {\n     private: (),\n }\n \n // (we need this for downstream impl of trait Error)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-impl fmt::Display for LayoutErr {\n+impl fmt::Display for LayoutError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"invalid parameters to Layout::from_size_align\")\n     }"}, {"sha": "6635e4229e0468a9134488ae73eb910ce160c393", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a97abb40ab390465b1cd845e735d58956d28eb16/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97abb40ab390465b1cd845e735d58956d28eb16/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=a97abb40ab390465b1cd845e735d58956d28eb16", "patch": "@@ -10,6 +10,9 @@ pub use self::global::GlobalAlloc;\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n pub use self::layout::{Layout, LayoutErr};\n \n+#[stable(feature = \"alloc_layout_error\", since = \"1.49.0\")]\n+pub use self::layout::LayoutError;\n+\n use crate::fmt;\n use crate::ptr::{self, NonNull};\n "}]}