{"sha": "37cefa32d2badcb6eebd6851104108f1e02d3c3c", "node_id": "C_kwDOAAsO6NoAKDM3Y2VmYTMyZDJiYWRjYjZlZWJkNjg1MTEwNDEwOGYxZTAyZDNjM2M", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T21:03:52Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T21:03:52Z"}, "message": "Add support for FUTEX_WAIT_BITSET(bitset=MAX).", "tree": {"sha": "5ffa1d2a9ddd27e84a833c5701b0938a0ac52569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffa1d2a9ddd27e84a833c5701b0938a0ac52569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37cefa32d2badcb6eebd6851104108f1e02d3c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37cefa32d2badcb6eebd6851104108f1e02d3c3c", "html_url": "https://github.com/rust-lang/rust/commit/37cefa32d2badcb6eebd6851104108f1e02d3c3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37cefa32d2badcb6eebd6851104108f1e02d3c3c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb01df538e30cf63bdcbadad61828940ca8ec578", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb01df538e30cf63bdcbadad61828940ca8ec578", "html_url": "https://github.com/rust-lang/rust/commit/fb01df538e30cf63bdcbadad61828940ca8ec578"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "a4097bcd75fa4518a7163dc7e291afeb3eb3ae74", "filename": "src/shims/posix/linux/sync.rs", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/37cefa32d2badcb6eebd6851104108f1e02d3c3c/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37cefa32d2badcb6eebd6851104108f1e02d3c3c/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=37cefa32d2badcb6eebd6851104108f1e02d3c3c", "patch": "@@ -36,6 +36,7 @@ pub fn futex<'tcx>(\n \n     let futex_private = this.eval_libc_i32(\"FUTEX_PRIVATE_FLAG\")?;\n     let futex_wait = this.eval_libc_i32(\"FUTEX_WAIT\")?;\n+    let futex_wait_bitset = this.eval_libc_i32(\"FUTEX_WAIT_BITSET\")?;\n     let futex_wake = this.eval_libc_i32(\"FUTEX_WAKE\")?;\n     let futex_realtime = this.eval_libc_i32(\"FUTEX_CLOCK_REALTIME\")?;\n \n@@ -45,12 +46,32 @@ pub fn futex<'tcx>(\n         // FUTEX_WAIT: (int *addr, int op = FUTEX_WAIT, int val, const timespec *timeout)\n         // Blocks the thread if *addr still equals val. Wakes up when FUTEX_WAKE is called on the same address,\n         // or *timeout expires. `timeout == null` for an infinite timeout.\n-        op if op & !futex_realtime == futex_wait => {\n-            if args.len() < 5 {\n-                throw_ub_format!(\n-                    \"incorrect number of arguments for `futex` syscall with `op=FUTEX_WAIT`: got {}, expected at least 5\",\n-                    args.len()\n-                );\n+        //\n+        // FUTEX_WAIT_BITSET: (int *addr, int op = FUTEX_WAIT_BITSET, int val, const timespec *timeout, int *_ignored, unsigned int bitset)\n+        // When bitset is u32::MAX, this is identical to FUTEX_WAIT, except the timeout is absolute rather than relative.\n+        op if op & !futex_realtime == futex_wait || op & !futex_realtime == futex_wait_bitset => {\n+            let wait_bitset = op & !futex_realtime == futex_wait_bitset;\n+\n+            if wait_bitset {\n+                if args.len() != 7 {\n+                    throw_ub_format!(\n+                        \"incorrect number of arguments for `futex` syscall with `op=FUTEX_WAIT_BITSET`: got {}, expected 7\",\n+                        args.len()\n+                    );\n+                }\n+\n+                let bitset = this.read_scalar(&args[6])?.to_u32()?;\n+\n+                if bitset != u32::MAX {\n+                    throw_unsup_format!(\"Miri does not support `futex` syscall with `op=FUTEX_WAIT_BITSET` with a bitset other than UINT_MAX\");\n+                }\n+            } else {\n+                if args.len() < 5 {\n+                    throw_ub_format!(\n+                        \"incorrect number of arguments for `futex` syscall with `op=FUTEX_WAIT`: got {}, expected at least 5\",\n+                        args.len()\n+                    );\n+                }\n             }\n \n             // `deref_operand` but not actually dereferencing the ptr yet (it might be NULL!).\n@@ -70,10 +91,20 @@ pub fn futex<'tcx>(\n                         return Ok(());\n                     }\n                 };\n-                Some(if op & futex_realtime != 0 {\n-                    Time::RealTime(SystemTime::now().checked_add(duration).unwrap())\n+                Some(if wait_bitset {\n+                    // FUTEX_WAIT_BITSET uses an absolute timestamp.\n+                    if op & futex_realtime != 0 {\n+                        Time::RealTime(SystemTime::UNIX_EPOCH.checked_add(duration).unwrap())\n+                    } else {\n+                        Time::Monotonic(this.machine.time_anchor.checked_add(duration).unwrap())\n+                    }\n                 } else {\n-                    Time::Monotonic(Instant::now().checked_add(duration).unwrap())\n+                    // FUTEX_WAIT uses a relative timestamp.\n+                    if op & futex_realtime != 0 {\n+                        Time::RealTime(SystemTime::now().checked_add(duration).unwrap())\n+                    } else {\n+                        Time::Monotonic(Instant::now().checked_add(duration).unwrap())\n+                    }\n                 })\n             };\n             // Check the pointer for alignment and validity."}]}