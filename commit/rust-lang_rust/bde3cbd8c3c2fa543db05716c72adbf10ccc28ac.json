{"sha": "bde3cbd8c3c2fa543db05716c72adbf10ccc28ac", "node_id": "C_kwDOAAsO6NoAKGJkZTNjYmQ4YzNjMmZhNTQzZGIwNTcxNmM3MmFkYmYxMGNjYzI4YWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-30T23:09:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-30T23:09:48Z"}, "message": "Rollup merge of #111023 - tmiasko:multi-variant-capture, r=compiler-errors\n\nTest precise capture with a multi-variant enum and exhaustive patterns\n\nAdd test checking that it is possible to capture fields of a multi-variant enum, when remaining variants are visibly uninhabited (under the `exhaustive_patterns` feature gate).", "tree": {"sha": "ff5fedf575c7e5d5f668ffe9ea2eaa68a9716ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5fedf575c7e5d5f668ffe9ea2eaa68a9716ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde3cbd8c3c2fa543db05716c72adbf10ccc28ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTvU8CRBK7hj4Ov3rIwAAOkIIAIuTZFOFQIaMAisXs0tSm7pb\nvcoVPd0xHJUPHCtKfF5ELiSkEX301jORg5Ilaly1yyviQH8vyr0/LA2Ju2VmGZTN\nnKW+kO8zEz8cfG1x+8WDtp3aUnhnWnPzYWnUQhoofCrl0gCzVhT2POCeURHu/eiY\nNKNQftM1d/WzlaK9W16oavix1s/C+GFHPaQPaOr2oDy2L8s50Kw4ClAxqcgYTJxb\n8SbnOGsi/lo/V2GXOrZOG1QHh4dZwovcfPooW4diN3vrbYU8TgO48Vn+es5+/IhT\nsrHayToosQTKR0i6q9r1dwXQf54Ps+wgcTDIMRRutII+07En4pCwhU3rBxQVASk=\n=yF/0\n-----END PGP SIGNATURE-----\n", "payload": "tree ff5fedf575c7e5d5f668ffe9ea2eaa68a9716ad2\nparent 07726e3bf2cd7840628b8e3e686a885e9fba26b8\nparent b855308521a4d3c508a722e970c4de1829651232\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682896188 +0200\ncommitter GitHub <noreply@github.com> 1682896188 +0200\n\nRollup merge of #111023 - tmiasko:multi-variant-capture, r=compiler-errors\n\nTest precise capture with a multi-variant enum and exhaustive patterns\n\nAdd test checking that it is possible to capture fields of a multi-variant enum, when remaining variants are visibly uninhabited (under the `exhaustive_patterns` feature gate).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde3cbd8c3c2fa543db05716c72adbf10ccc28ac", "html_url": "https://github.com/rust-lang/rust/commit/bde3cbd8c3c2fa543db05716c72adbf10ccc28ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde3cbd8c3c2fa543db05716c72adbf10ccc28ac/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07726e3bf2cd7840628b8e3e686a885e9fba26b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/07726e3bf2cd7840628b8e3e686a885e9fba26b8", "html_url": "https://github.com/rust-lang/rust/commit/07726e3bf2cd7840628b8e3e686a885e9fba26b8"}, {"sha": "b855308521a4d3c508a722e970c4de1829651232", "url": "https://api.github.com/repos/rust-lang/rust/commits/b855308521a4d3c508a722e970c4de1829651232", "html_url": "https://github.com/rust-lang/rust/commit/b855308521a4d3c508a722e970c4de1829651232"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "72652ef60349a1126e4f7e5c135b33f9b864f5fb", "filename": "tests/ui/closures/2229_closure_analysis/run_pass/multivariant.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bde3cbd8c3c2fa543db05716c72adbf10ccc28ac/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultivariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde3cbd8c3c2fa543db05716c72adbf10ccc28ac/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultivariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultivariant.rs?ref=bde3cbd8c3c2fa543db05716c72adbf10ccc28ac", "patch": "@@ -0,0 +1,21 @@\n+// Test precise capture of a multi-variant enum (when remaining variants are\n+// visibly uninhabited).\n+// edition:2021\n+// run-pass\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+\n+pub fn main() {\n+    let mut r = Result::<!, (u32, u32)>::Err((0, 0));\n+    let mut f = || {\n+        let Err((ref mut a, _)) = r;\n+        *a = 1;\n+    };\n+    let mut g = || {\n+        let Err((_, ref mut b)) = r;\n+        *b = 2;\n+    };\n+    f();\n+    g();\n+    assert_eq!(r, Err((1, 2)));\n+}"}]}