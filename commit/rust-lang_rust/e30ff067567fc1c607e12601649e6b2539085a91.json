{"sha": "e30ff067567fc1c607e12601649e6b2539085a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMGZmMDY3NTY3ZmMxYzYwN2UxMjYwMTY0OWU2YjI1MzkwODVhOTE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-03-07T12:07:07Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-03-07T21:21:39Z"}, "message": "Change MirPass to also take NodeId", "tree": {"sha": "ee2bdba74fe0e368876bdb53885f6d552faf1372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee2bdba74fe0e368876bdb53885f6d552faf1372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e30ff067567fc1c607e12601649e6b2539085a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e30ff067567fc1c607e12601649e6b2539085a91", "html_url": "https://github.com/rust-lang/rust/commit/e30ff067567fc1c607e12601649e6b2539085a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e30ff067567fc1c607e12601649e6b2539085a91/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d91d73f9cc535921a2ff214f09578df7855ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d91d73f9cc535921a2ff214f09578df7855ffa", "html_url": "https://github.com/rust-lang/rust/commit/27d91d73f9cc535921a2ff214f09578df7855ffa"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "afcb5b956319d29dbefeeb72c1b9afe76b5eef1e", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=e30ff067567fc1c607e12601649e6b2539085a91", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::DepNode;\n use mir::mir_map::MirMap;\n use mir::repr::Mir;\n use middle::ty::TyCtxt;\n+use syntax::ast::NodeId;\n \n /// Various information about pass.\n pub trait Pass {\n@@ -26,13 +26,13 @@ pub trait MirMapPass<'tcx>: Pass {\n \n /// A pass which inspects Mir of functions in isolation.\n pub trait MirPass<'tcx>: Pass {\n-    fn run_pass(&mut self, cx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>);\n+    fn run_pass(&mut self, cx: &TyCtxt<'tcx>, id: NodeId, mir: &mut Mir<'tcx>);\n }\n \n impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n     fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, map: &mut MirMap<'tcx>) {\n-        for (_, mir) in &mut map.map {\n-            MirPass::run_pass(self, tcx, mir);\n+        for (&id, mir) in &mut map.map {\n+            MirPass::run_pass(self, tcx, id, mir);\n         }\n     }\n }"}, {"sha": "1920bd552ec3e5a3dc6821f97b4f221d29cdf3a8", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=e30ff067567fc1c607e12601649e6b2539085a91", "patch": "@@ -16,6 +16,7 @@ use rustc::middle::ty::{self, TyCtxt};\n use rustc::mir::repr::*;\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::transform::{MirPass, Pass};\n+use syntax::ast::NodeId;\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: &'a TyCtxt<'tcx>,\n@@ -123,7 +124,7 @@ pub struct EraseRegions;\n impl Pass for EraseRegions {}\n \n impl<'tcx> MirPass<'tcx> for EraseRegions {\n-    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_mir(mir);\n     }\n }"}, {"sha": "9caee36e44a7de9bf515629c2712b499eba67537", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=e30ff067567fc1c607e12601649e6b2539085a91", "patch": "@@ -15,6 +15,7 @@ use rustc::middle::ty::TyCtxt;\n use rustc::mir::repr::*;\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::transform::{Pass, MirPass};\n+use syntax::ast::NodeId;\n \n pub struct NoLandingPads;\n \n@@ -41,7 +42,7 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n }\n \n impl<'tcx> MirPass<'tcx> for NoLandingPads {\n-    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) {\n         if tcx.sess.no_landing_pads() {\n             self.visit_mir(mir);\n         }"}, {"sha": "4513aeef86d91c0d7003e99a25eb2ea2b667b932", "filename": "src/librustc_mir/transform/remove_dead_blocks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs?ref=e30ff067567fc1c607e12601649e6b2539085a91", "patch": "@@ -36,11 +36,12 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::ty::TyCtxt;\n use rustc::mir::repr::*;\n use rustc::mir::transform::{Pass, MirPass};\n+use syntax::ast::NodeId;\n \n pub struct RemoveDeadBlocks;\n \n impl<'tcx> MirPass<'tcx> for RemoveDeadBlocks {\n-    fn run_pass(&mut self, _: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n+    fn run_pass(&mut self, _: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) {\n         let mut seen = BitVector::new(mir.basic_blocks.len());\n         // These blocks are always required.\n         seen.insert(START_BLOCK.index());"}, {"sha": "84410bdc57c0abb714212705ee5013055b42d2f8", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=e30ff067567fc1c607e12601649e6b2539085a91", "patch": "@@ -12,6 +12,7 @@ use rustc::middle::const_eval::ConstVal;\n use rustc::middle::ty::TyCtxt;\n use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, Pass};\n+use syntax::ast::NodeId;\n \n use super::remove_dead_blocks::RemoveDeadBlocks;\n \n@@ -101,12 +102,12 @@ impl SimplifyCfg {\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n-    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>) {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, id: NodeId, mir: &mut Mir<'tcx>) {\n         let mut changed = true;\n         while changed {\n             changed = self.simplify_branches(mir);\n             changed |= self.remove_goto_chains(mir);\n-            RemoveDeadBlocks.run_pass(tcx, mir);\n+            RemoveDeadBlocks.run_pass(tcx, id, mir);\n         }\n         // FIXME: Should probably be moved into some kind of pass manager\n         mir.basic_blocks.shrink_to_fit();"}, {"sha": "9924a4f1ad936e7aaa8be9c7e1552e83c0065749", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30ff067567fc1c607e12601649e6b2539085a91/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=e30ff067567fc1c607e12601649e6b2539085a91", "patch": "@@ -14,16 +14,15 @@\n use rustc::dep_graph::DepNode;\n use rustc::middle::infer::{self, InferCtxt};\n use rustc::middle::traits;\n-use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::middle::ty::fold::TypeFoldable;\n+use rustc::middle::ty::{self, Ty, TyCtxt};\n use rustc::mir::repr::*;\n-use rustc::mir::mir_map::MirMap;\n use rustc::mir::tcx::LvalueTy;\n-use rustc::mir::transform::{MirMapPass, Pass};\n+use rustc::mir::transform::{MirPass, Pass};\n use rustc::mir::visit::{self, Visitor};\n-\n-use syntax::codemap::{Span, DUMMY_SP};\n use std::fmt;\n+use syntax::ast::NodeId;\n+use syntax::codemap::{Span, DUMMY_SP};\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n@@ -574,29 +573,27 @@ impl TypeckMir {\n     }\n }\n \n-impl<'tcx> MirMapPass<'tcx> for TypeckMir {\n-    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, map: &mut MirMap<'tcx>) {\n+impl<'tcx> MirPass<'tcx> for TypeckMir {\n+    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, id: NodeId, mir: &mut Mir<'tcx>) {\n         if tcx.sess.err_count() > 0 {\n             // compiling a broken program can obviously result in a\n             // broken MIR, so try not to report duplicate errors.\n             return;\n         }\n-        for (&id, mir) in &mut map.map {\n-            let _task = tcx.dep_graph.in_task(DepNode::MirTypeck(id));\n-            let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n-            let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env));\n-            let mut checker = TypeChecker::new(&infcx);\n-            {\n-                let mut verifier = TypeVerifier::new(&mut checker, mir);\n-                verifier.visit_mir(mir);\n-                if verifier.errors_reported {\n-                    // don't do further checks to avoid ICEs\n-                    continue;\n-                }\n+        let _task = tcx.dep_graph.in_task(DepNode::MirTypeck(id));\n+        let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n+        let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env));\n+        let mut checker = TypeChecker::new(&infcx);\n+        {\n+            let mut verifier = TypeVerifier::new(&mut checker, mir);\n+            verifier.visit_mir(mir);\n+            if verifier.errors_reported {\n+                // don't do further checks to avoid ICEs\n+                return;\n             }\n-            checker.typeck_mir(mir);\n-            checker.verify_obligations(mir);\n         }\n+        checker.typeck_mir(mir);\n+        checker.verify_obligations(mir);\n     }\n }\n "}, {"sha": "89101fe709d97d0c1770ccbaa69b90c46dc45f88", "filename": "src/test/auxiliary/dummy_mir_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e30ff067567fc1c607e12601649e6b2539085a91/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30ff067567fc1c607e12601649e6b2539085a91/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs?ref=e30ff067567fc1c607e12601649e6b2539085a91", "patch": "@@ -25,11 +25,13 @@ use rustc::middle::ty;\n use rustc::middle::const_eval::ConstVal;\n use rustc_plugin::Registry;\n \n+use syntax::ast::NodeId;\n+\n struct Pass;\n \n impl transform::Pass for Pass {}\n impl<'tcx> MirPass<'tcx> for Pass {\n-    fn run_pass(&mut self, _: &ty::ctxt<'tcx>, mir: &mut Mir<'tcx>) {\n+    fn run_pass(&mut self, _: &ty::TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) {\n         Visitor.visit_mir(mir)\n     }\n }"}]}