{"sha": "a14d72d49e4d87b970f899a761dbdfce63239b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNGQ3MmQ0OWU0ZDg3Yjk3MGY4OTlhNzYxZGJkZmNlNjMyMzliNzk=", "commit": {"author": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-25T05:06:54Z"}, "committer": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-27T12:35:47Z"}, "message": "Implemented list::is_empty() based on Container trait", "tree": {"sha": "4531618e6d60762c218dcee71334cf9d2d2f5d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4531618e6d60762c218dcee71334cf9d2d2f5d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14d72d49e4d87b970f899a761dbdfce63239b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14d72d49e4d87b970f899a761dbdfce63239b79", "html_url": "https://github.com/rust-lang/rust/commit/a14d72d49e4d87b970f899a761dbdfce63239b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14d72d49e4d87b970f899a761dbdfce63239b79/comments", "author": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e589fcffcc8da46b5949d15284a466d9ed27a003", "url": "https://api.github.com/repos/rust-lang/rust/commits/e589fcffcc8da46b5949d15284a466d9ed27a003", "html_url": "https://github.com/rust-lang/rust/commit/e589fcffcc8da46b5949d15284a466d9ed27a003"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "1239ce702204cf77f08885f556efcbcca8ee6630", "filename": "src/libcollections/list.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a14d72d49e4d87b970f899a761dbdfce63239b79/src%2Flibcollections%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14d72d49e4d87b970f899a761dbdfce63239b79/src%2Flibcollections%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flist.rs?ref=a14d72d49e4d87b970f899a761dbdfce63239b79", "patch": "@@ -58,6 +58,9 @@ impl<T> List<T> {\n impl<T> Container for List<T> {\n     /// Returns the length of a list\n     fn len(&self) -> uint { self.iter().len() }\n+\n+    /// Returns true if the list is empty\n+    fn is_empty(&self) -> bool { match *self { Nil => true, _ => false } }\n }\n \n /// Returns true if a list contains an element with the given value\n@@ -69,14 +72,6 @@ pub fn has<T:Eq>(list: @List<T>, element: T) -> bool {\n     return found;\n }\n \n-/// Returns true if the list is empty\n-pub fn is_empty<T>(list: @List<T>) -> bool {\n-    match *list {\n-        Nil => true,\n-        _ => false\n-    }\n-}\n-\n /// Returns all but the first element of a list\n pub fn tail<T>(list: @List<T>) -> @List<T> {\n     match *list {\n@@ -153,7 +148,7 @@ pub fn each<T>(list: @List<T>, f: |&T| -> bool) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use list::{List, Nil, head, is_empty, tail};\n+    use list::{List, Nil, head, tail};\n     use list;\n \n     #[test]\n@@ -168,13 +163,13 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        let empty : @list::List<int> = @List::from_vec([]);\n-        let full1 = @List::from_vec([1]);\n-        let full2 = @List::from_vec(['r', 'u']);\n+        let empty : list::List<int> = List::from_vec([]);\n+        let full1 = List::from_vec([1]);\n+        let full2 = List::from_vec(['r', 'u']);\n \n-        assert!(is_empty(empty));\n-        assert!(!is_empty(full1));\n-        assert!(!is_empty(full2));\n+        assert!(empty.is_empty());\n+        assert!(!full1.is_empty());\n+        assert!(!full2.is_empty());\n     }\n \n     #[test]"}, {"sha": "9cbf80c310548dd4967b1dcfb87c3c2280aee540", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a14d72d49e4d87b970f899a761dbdfce63239b79/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14d72d49e4d87b970f899a761dbdfce63239b79/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=a14d72d49e4d87b970f899a761dbdfce63239b79", "patch": "@@ -14,7 +14,7 @@\n \n extern crate collections;\n \n-use collections::list::{List, Cons, Nil, head, is_empty};\n+use collections::list::{List, Cons, Nil, head};\n \n fn pure_length_go<T:Clone>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }\n@@ -25,7 +25,7 @@ fn pure_length<T:Clone>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n fn nonempty_list<T:Clone>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n fn safe_head<T:Clone>(ls: @List<T>) -> T {\n-    assert!(!is_empty(ls));\n+    assert!(!ls.is_empty());\n     return head(ls);\n }\n "}]}