{"sha": "7757c893ef89690e52ff71dd7ee65d02edd8ea49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NTdjODkzZWY4OTY5MGU1MmZmNzFkZDdlZTY1ZDAyZWRkOGVhNDk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-04T15:05:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-04T15:05:47Z"}, "message": "Fix `len_zero` ICE", "tree": {"sha": "e20f8d59d176c03189e20bf0690ea86074d5cfa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e20f8d59d176c03189e20bf0690ea86074d5cfa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7757c893ef89690e52ff71dd7ee65d02edd8ea49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmta9QACgkQpp+NIls6\n19lNoA/9EBBsN3mVxWP4hFwfJ8p665Yg+OgqZ2FvnKx32019AtW+z4Ah+oxZZ52+\nL7fZmfUTvaUgW22sh+Dzu1jNQ0O0t1HQ9et2DqgvQUKVweKjPcJE2lM4sDqDGb4I\ni0MqQZObHdPa8rh1OGnc85oWhGDFn6aOonmq7023Tl37tdMvvwhUmEL5tXC97nr3\nGD2K2INCUeUVPttMJIpvARtkQ89fQQgMnmgElN/DtDKOAR3f7rwRV5zvT4WA/sjW\nMxw4ExEc3WUY1RGCKCp+jAeULn+htyaVglpwp7+YdzwRzv7v8In1iXwF2qbXpOFl\nrnCJWGvMrvqBErjZwKVfBG5/UaZaX0GHX/YkGZpPe+LSysdrNM0R59nMLGGeDUW/\nWbuAkwRXvaomki6EhFK7+7z6TlqOBAFMomI4fNLRsWFpGj8OXVUBKPwfvcaFfyDU\no0f64vVR7ZeaqoVS9dL/MQUbxRqWvv40kI6X1AxBZbQm9ALXsjSnroa474qiIQHl\ncVOWXWeJE3WClkb3SUOR3gl/arqi9NGCObD6RYyLCKtbEH4oIpGkNXVEilZ3lBPj\nfMFRYDo4eFt3/JcQEbQUHxnN5P9MpqWVwGnIhmmhUDDTkzgPH/zV8SF0kky2xH0W\n1r/gwo4jkLtL9XwruDWnqJcI5G/5Aq+0nSqZQdeu7yrBLUzXKeo=\n=eUN2\n-----END PGP SIGNATURE-----", "payload": "tree e20f8d59d176c03189e20bf0690ea86074d5cfa9\nparent 009f5aaf836d8457389eb718e6c9f830faf1e7cc\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504537547 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504537547 +0200\n\nFix `len_zero` ICE\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7757c893ef89690e52ff71dd7ee65d02edd8ea49", "html_url": "https://github.com/rust-lang/rust/commit/7757c893ef89690e52ff71dd7ee65d02edd8ea49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7757c893ef89690e52ff71dd7ee65d02edd8ea49/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009f5aaf836d8457389eb718e6c9f830faf1e7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/009f5aaf836d8457389eb718e6c9f830faf1e7cc", "html_url": "https://github.com/rust-lang/rust/commit/009f5aaf836d8457389eb718e6c9f830faf1e7cc"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "e862240da59a413b21da3e2f10e1f54f540638f4", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7757c893ef89690e52ff71dd7ee65d02edd8ea49/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7757c893ef89690e52ff71dd7ee65d02edd8ea49/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=7757c893ef89690e52ff71dd7ee65d02edd8ea49", "patch": "@@ -104,34 +104,28 @@ fn check_trait_items(cx: &LateContext, visited_trait: &Item, trait_items: &[Trai\n     }\n \n     // fill the set with current and super traits\n-    fn fill_trait_set<'a, 'b: 'a>(traitt: &'b Item, set: &'a mut HashSet<&'b Item>, cx: &'b LateContext) {\n+    fn fill_trait_set(traitt: DefId, set: &mut HashSet<DefId>, cx: &LateContext) {\n         if set.insert(traitt) {\n-            if let ItemTrait(.., ref ty_param_bounds, _) = traitt.node {\n-                for ty_param_bound in ty_param_bounds {\n-                    if let TraitTyParamBound(ref poly_trait_ref, _) = *ty_param_bound {\n-                        let super_trait_node_id = cx.tcx\n-                            .hir\n-                            .as_local_node_id(poly_trait_ref.trait_ref.path.def.def_id())\n-                            .expect(\"the DefId is local, the NodeId should be available\");\n-                        let super_trait = cx.tcx.hir.expect_item(super_trait_node_id);\n-                        fill_trait_set(super_trait, set, cx);\n-                    }\n-                }\n+            for supertrait in ::rustc::traits::supertrait_def_ids(cx.tcx, traitt) {\n+                fill_trait_set(supertrait, set, cx);\n             }\n         }\n     }\n \n     if cx.access_levels.is_exported(visited_trait.id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = HashSet::new();\n-        fill_trait_set(visited_trait, &mut current_and_super_traits, cx);\n+        let visited_trait_def_id = cx.tcx.hir.local_def_id(visited_trait.id);\n+        fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);\n \n         let is_empty_method_found = current_and_super_traits\n             .iter()\n-            .flat_map(|i| match i.node {\n-                ItemTrait(.., ref trait_items) => trait_items.iter(),\n-                _ => bug!(\"should only handle traits\"),\n-            })\n-            .any(|i| is_named_self(cx, i, \"is_empty\"));\n+            .flat_map(|&i| cx.tcx.associated_items(i))\n+            .any(|i| {\n+                i.kind == ty::AssociatedKind::Method &&\n+                i.method_has_self_argument &&\n+                i.name == \"is_empty\" &&\n+                cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n+            });\n \n         if !is_empty_method_found {\n             span_lint("}, {"sha": "9c66d5a8148a0f22cbdf9661711dd3ded8254cf6", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7757c893ef89690e52ff71dd7ee65d02edd8ea49/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7757c893ef89690e52ff71dd7ee65d02edd8ea49/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=7757c893ef89690e52ff71dd7ee65d02edd8ea49", "patch": "@@ -182,3 +182,10 @@ fn test_slice(b: &[u8]) {\n     if b.len() != 0 {\n     }\n }\n+\n+// this used to ICE\n+pub trait Foo: Sized {}\n+\n+pub trait DependsOnFoo: Foo {\n+    fn len(&mut self) -> usize;\n+}"}, {"sha": "6e3cf1b3ca1d96484d671681a7af1f7ce3802ae8", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7757c893ef89690e52ff71dd7ee65d02edd8ea49/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7757c893ef89690e52ff71dd7ee65d02edd8ea49/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=7757c893ef89690e52ff71dd7ee65d02edd8ea49", "patch": "@@ -86,5 +86,13 @@ error: length comparison to zero\n 182 |     if b.len() != 0 {\n     |        ^^^^^^^^^^^^ help: using `is_empty` is more concise: `!b.is_empty()`\n \n-error: aborting due to 11 previous errors\n+error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_empty` method\n+   --> $DIR/len_zero.rs:189:1\n+    |\n+189 | / pub trait DependsOnFoo: Foo {\n+190 | |     fn len(&mut self) -> usize;\n+191 | | }\n+    | |_^\n+\n+error: aborting due to 12 previous errors\n "}]}