{"sha": "ebf13f1cce75de55a5174141761fc68d9322a739", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZjEzZjFjY2U3NWRlNTVhNTE3NDE0MTc2MWZjNjhkOTMyMmE3Mzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T13:52:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T13:52:06Z"}, "message": "Rustup to rustc 1.43.0-nightly (dd6718796 2020-03-16)", "tree": {"sha": "e7274001ed8135595d73f9e7815fd6142977e629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7274001ed8135595d73f9e7815fd6142977e629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf13f1cce75de55a5174141761fc68d9322a739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf13f1cce75de55a5174141761fc68d9322a739", "html_url": "https://github.com/rust-lang/rust/commit/ebf13f1cce75de55a5174141761fc68d9322a739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf13f1cce75de55a5174141761fc68d9322a739/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f669131c000504f4a895666ba395eb9dcaba5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f669131c000504f4a895666ba395eb9dcaba5b", "html_url": "https://github.com/rust-lang/rust/commit/98f669131c000504f4a895666ba395eb9dcaba5b"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "9d825f30c98e9327646dec02a5bfbffdd4f8b815", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf13f1cce75de55a5174141761fc68d9322a739/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/ebf13f1cce75de55a5174141761fc68d9322a739/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=ebf13f1cce75de55a5174141761fc68d9322a739", "patch": "@@ -1 +1 @@\n-nightly-2020-03-12\n+nightly-2020-03-17"}, {"sha": "2f702a53e0795ad486843833dd4ec24943d51306", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebf13f1cce75de55a5174141761fc68d9322a739/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf13f1cce75de55a5174141761fc68d9322a739/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=ebf13f1cce75de55a5174141761fc68d9322a739", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::{layout::Align, Const, ConstKind};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_mir::interpret::{\n     ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n-    StackPopCleanup, StackPopInfo,\n+    StackPopCleanup, StackPopJump,\n };\n \n use cranelift_codegen::ir::GlobalValue;\n@@ -476,8 +476,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         Ok(())\n     }\n \n-    fn stack_pop(_: &mut InterpCx<'mir, 'tcx, Self>, _: (), _: bool) -> InterpResult<'tcx, StackPopInfo> {\n-        Ok(StackPopInfo::Normal)\n+    fn stack_pop(_: &mut InterpCx<'mir, 'tcx, Self>, _: (), _: bool) -> InterpResult<'tcx, StackPopJump> {\n+        Ok(StackPopJump::Normal)\n     }\n \n     fn assert_panic("}, {"sha": "a95b54a05e1218acce254f0f85ee3bc6c83f187d", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebf13f1cce75de55a5174141761fc68d9322a739/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf13f1cce75de55a5174141761fc68d9322a739/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=ebf13f1cce75de55a5174141761fc68d9322a739", "patch": "@@ -359,7 +359,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                 \"transmute\" => {\n                     trap_unreachable(\n                         fx,\n-                        \"[corruption] Called intrinsic::transmute with uninhabited argument.\",\n+                        \"[corruption] Transmuting to uninhabited type.\",\n                     );\n                 }\n                 _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n@@ -813,19 +813,19 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let res = CValue::by_val(swap(&mut fx.bcx, arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        panic_if_uninhabited | panic_if_zero_invalid | panic_if_any_invalid, <T> () {\n+        assert_inhabited | assert_zero_valid | assert_any_valid, <T> () {\n             let layout = fx.layout_of(T);\n             if layout.abi.is_uninhabited() {\n                 crate::trap::trap_panic(fx, &format!(\"attempted to instantiate uninhabited type `{}`\", T));\n                 return;\n             }\n \n-            if intrinsic == \"panic_if_zero_invalid\" && !layout.might_permit_raw_init(fx, /*zero:*/ true).unwrap() {\n+            if intrinsic == \"assert_zero_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ true).unwrap() {\n                 crate::trap::trap_panic(fx, &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T));\n                 return;\n             }\n \n-            if intrinsic == \"panic_if_any_invalid\" && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n+            if intrinsic == \"assert_any_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n                 crate::trap::trap_panic(fx, &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T));\n                 return;\n             }"}]}