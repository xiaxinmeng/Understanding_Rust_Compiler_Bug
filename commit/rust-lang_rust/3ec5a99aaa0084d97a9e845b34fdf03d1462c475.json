{"sha": "3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYzVhOTlhYWEwMDg0ZDk3YTllODQ1YjM0ZmRmMDNkMTQ2MmM0NzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-14T16:05:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-14T16:05:19Z"}, "message": "Auto merge of #48209 - kennytm:try-fix-48116, r=alexcrichton\n\nTry to fix 48116 and 48192\n\nThe bug #48116 happens because of a misoptimization of the `import_path_to_string` function, where a `names` slice is empty but the `!names.is_empty()` branch is executed.\n\nhttps://github.com/rust-lang/rust/blob/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src/librustc_resolve/resolve_imports.rs#L1015-L1042\n\nYesterday, @eddyb had locally reproduced the bug, and [came across the `position` function](https://mozilla.logbot.info/rust-infra/20180214#c14296834) where the `assume()` call is found to be suspicious. We have *not* concluded that this `assume()` causes #48116, but given [the reputation of `assume()`](https://github.com/rust-lang/rust/pull/45501#issuecomment-340159627), this seems higher relevant. Here we try to see if commenting it out can fix the errors.\n\nLater @alexcrichton has bisected and found a potential bug [in the LLVM side](https://github.com/rust-lang/rust/issues/48116#issuecomment-365624777). We are currently testing if reverting that LLVM commit is enough to stop the bug. If true, this PR can be reverted (keep the `assume()`) and we could backport the LLVM patch instead.\n\n(This PR also includes an earlier commit from #48127 for help debugging ICE happening in compile-fail/parse-fail tests.)\n\nThe PR also reverts #48059, which seems to cause #48192.\n\nr? @alexcrichton\ncc @eddyb, @arthurprs (#47333)", "tree": {"sha": "8c5e904998498ba5c058f1676ce1194d6dde0d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c5e904998498ba5c058f1676ce1194d6dde0d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "html_url": "https://github.com/rust-lang/rust/commit/3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "html_url": "https://github.com/rust-lang/rust/commit/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032"}, {"sha": "e0da9902a1ab8e620be45470130cd72e31d54fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0da9902a1ab8e620be45470130cd72e31d54fc2", "html_url": "https://github.com/rust-lang/rust/commit/e0da9902a1ab8e620be45470130cd72e31d54fc2"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "03630dfbed3e035caa5d2529abb40903f19ed158", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "patch": "@@ -600,25 +600,9 @@ impl<'a> Builder<'a> {\n         //\n         // FIXME: the guard against msvc shouldn't need to be here\n         if !target.contains(\"msvc\") {\n-            let ccache = self.config.ccache.as_ref();\n-            let ccacheify = |s: &Path| {\n-                let ccache = match ccache {\n-                    Some(ref s) => s,\n-                    None => return s.display().to_string(),\n-                };\n-                // FIXME: the cc-rs crate only recognizes the literal strings\n-                // `ccache` and `sccache` when doing caching compilations, so we\n-                // mirror that here. It should probably be fixed upstream to\n-                // accept a new env var or otherwise work with custom ccache\n-                // vars.\n-                match &ccache[..] {\n-                    \"ccache\" | \"sccache\" => format!(\"{} {}\", ccache, s.display()),\n-                    _ => s.display().to_string(),\n-                }\n-            };\n-            let cc = ccacheify(&self.cc(target));\n-            cargo.env(format!(\"CC_{}\", target), &cc)\n-                 .env(\"CC\", &cc);\n+            let cc = self.cc(target);\n+            cargo.env(format!(\"CC_{}\", target), cc)\n+                 .env(\"CC\", cc);\n \n             let cflags = self.cflags(target).join(\" \");\n             cargo.env(format!(\"CFLAGS_{}\", target), cflags.clone())\n@@ -633,9 +617,8 @@ impl<'a> Builder<'a> {\n             }\n \n             if let Ok(cxx) = self.cxx(target) {\n-                let cxx = ccacheify(&cxx);\n-                cargo.env(format!(\"CXX_{}\", target), &cxx)\n-                     .env(\"CXX\", &cxx)\n+                cargo.env(format!(\"CXX_{}\", target), cxx)\n+                     .env(\"CXX\", cxx)\n                      .env(format!(\"CXXFLAGS_{}\", target), cflags.clone())\n                      .env(\"CXXFLAGS\", cflags);\n             }"}, {"sha": "ac390313a6797a8e9470efe0d9de8ff7e372134f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "patch": "@@ -1246,15 +1246,18 @@ macro_rules! iterator {\n             {\n                 // The addition might panic on overflow\n                 // Use the len of the slice to hint optimizer to remove result index bounds check.\n-                let n = make_slice!(self.ptr, self.end).len();\n+                let _n = make_slice!(self.ptr, self.end).len();\n                 self.try_fold(0, move |i, x| {\n                     if predicate(x) { Err(i) }\n                     else { Ok(i + 1) }\n                 }).err()\n-                    .map(|i| {\n-                        unsafe { assume(i < n) };\n-                        i\n-                    })\n+                    // // FIXME(#48116/#45964):\n+                    // // This assume() causes misoptimization on LLVM 6.\n+                    // // Commented out until it is fixed again.\n+                    // .map(|i| {\n+                    //     unsafe { assume(i < n) };\n+                    //     i\n+                    // })\n             }\n \n             #[inline]\n@@ -1271,10 +1274,13 @@ macro_rules! iterator {\n                     if predicate(x) { Err(i) }\n                     else { Ok(i) }\n                 }).err()\n-                    .map(|i| {\n-                        unsafe { assume(i < n) };\n-                        i\n-                    })\n+                    // // FIXME(#48116/#45964):\n+                    // // This assume() causes misoptimization on LLVM 6.\n+                    // // Commented out until it is fixed again.\n+                    // .map(|i| {\n+                    //     unsafe { assume(i < n) };\n+                    //     i\n+                    // })\n             }\n         }\n "}, {"sha": "a8070c553bdbcb34dd8bde7bf8435abc2d21ba12", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "patch": "@@ -1026,6 +1026,8 @@ fn import_path_to_string(names: &[SpannedIdent],\n         if names.is_empty() {\n             import_directive_subclass_to_string(subclass)\n         } else {\n+            // FIXME: Remove this entire logic after #48116 is fixed.\n+            //\n             // Note that this code looks a little wonky, it's currently here to\n             // hopefully help debug #48116, but otherwise isn't intended to\n             // cause any problems.\n@@ -1034,8 +1036,17 @@ fn import_path_to_string(names: &[SpannedIdent],\n                 names_to_string(names),\n                 import_directive_subclass_to_string(subclass),\n             );\n-            assert!(!names.is_empty());\n-            assert!(!x.starts_with(\"::\"));\n+            if names.is_empty() || x.starts_with(\"::\") {\n+                span_bug!(\n+                    span,\n+                    \"invalid name `{}` at {:?}; global = {}, names = {:?}, subclass = {:?}\",\n+                    x,\n+                    span,\n+                    global,\n+                    names,\n+                    subclass\n+                );\n+            }\n             return x\n         }\n     }"}, {"sha": "bef085e17ea160eb8703745deb55a935e0475a9d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec5a99aaa0084d97a9e845b34fdf03d1462c475/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3ec5a99aaa0084d97a9e845b34fdf03d1462c475", "patch": "@@ -250,6 +250,7 @@ impl<'test> TestCx<'test> {\n     fn run_cfail_test(&self) {\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n+        self.check_no_compiler_crash(&proc_res);\n \n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n@@ -262,7 +263,6 @@ impl<'test> TestCx<'test> {\n             self.check_error_patterns(&output_to_check, &proc_res);\n         }\n \n-        self.check_no_compiler_crash(&proc_res);\n         self.check_forbid_output(&output_to_check, &proc_res);\n     }\n "}]}