{"sha": "91c7d02e69c3704ca283699fd4eeb9b09508e078", "node_id": "C_kwDOAAsO6NoAKDkxYzdkMDJlNjljMzcwNGNhMjgzNjk5ZmQ0ZWViOWIwOTUwOGUwNzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-16T15:51:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-16T15:51:30Z"}, "message": "Rollup merge of #102857 - saethlin:derived-enum-hash-test, r=Mark-Simulacrum\n\nAdd a regression test for #39137\n\nThe problem in the issue has been fixed in the meantime, so since this adds a regression test I think this closes https://github.com/rust-lang/rust/issues/39137", "tree": {"sha": "a6da618997253cf2e6ec6e84dc46c329e4f72e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6da618997253cf2e6ec6e84dc46c329e4f72e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91c7d02e69c3704ca283699fd4eeb9b09508e078", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTCiCCRBK7hj4Ov3rIwAADd0IAJ/WikW5WqjTrYf8j8fESRQo\ncGXwXAJ0YZBWrghcZgSwOnrU2N3M59VG27wjvU1ZbzwiaUVt6SHqsC4Lr06M6yeI\nnIw4nD0K9g2B6mPYX2b7VHXbvuNYQsgZSYHS0oDDFy1dBVarkfcJaOb38hnYM4AW\nlIvD/r6fdcYs7PWkWNFAfLQws6W3Q7KflXF1dxFauJk2LpxHOprilurJe9oE0Gt3\n6Zl+HsMkNDYQuFUVeFkw8Ds2HU/VIk/MsINXqVe+zyDG8602/9VR/NIp3NINDiEC\nE+gkpVQ5IbzoOhEsbP8y/H6GvWU/etwJyo14Yz3w3LzkJPbbua8ul1fc6OdNDqI=\n=tmSs\n-----END PGP SIGNATURE-----\n", "payload": "tree a6da618997253cf2e6ec6e84dc46c329e4f72e66\nparent 8be3ce9056d17f822704b8994f60668adf180fe8\nparent bfd5bfe6ba007039eacb75ed087ef893bce70e77\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665935490 +0200\ncommitter GitHub <noreply@github.com> 1665935490 +0200\n\nRollup merge of #102857 - saethlin:derived-enum-hash-test, r=Mark-Simulacrum\n\nAdd a regression test for #39137\n\nThe problem in the issue has been fixed in the meantime, so since this adds a regression test I think this closes https://github.com/rust-lang/rust/issues/39137\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91c7d02e69c3704ca283699fd4eeb9b09508e078", "html_url": "https://github.com/rust-lang/rust/commit/91c7d02e69c3704ca283699fd4eeb9b09508e078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91c7d02e69c3704ca283699fd4eeb9b09508e078/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be3ce9056d17f822704b8994f60668adf180fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be3ce9056d17f822704b8994f60668adf180fe8", "html_url": "https://github.com/rust-lang/rust/commit/8be3ce9056d17f822704b8994f60668adf180fe8"}, {"sha": "bfd5bfe6ba007039eacb75ed087ef893bce70e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd5bfe6ba007039eacb75ed087ef893bce70e77", "html_url": "https://github.com/rust-lang/rust/commit/bfd5bfe6ba007039eacb75ed087ef893bce70e77"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "16738ec4ae4ec46b7469e48df203a4a5ddbb7d5d", "filename": "src/test/ui/deriving/deriving-hash.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91c7d02e69c3704ca283699fd4eeb9b09508e078/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c7d02e69c3704ca283699fd4eeb9b09508e078/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs?ref=91c7d02e69c3704ca283699fd4eeb9b09508e078", "patch": "@@ -44,6 +44,17 @@ fn fake_hash<A: Hash>(v: &mut Vec<u8>, a: A) {\n     a.hash(&mut FakeHasher(v));\n }\n \n+struct OnlyOneByteHasher;\n+impl Hasher for OnlyOneByteHasher {\n+    fn finish(&self) -> u64 {\n+        unreachable!()\n+    }\n+\n+    fn write(&mut self, bytes: &[u8]) {\n+        assert_eq!(bytes.len(), 1);\n+    }\n+}\n+\n fn main() {\n     let person1 = Person {\n         id: 5,\n@@ -73,4 +84,13 @@ fn main() {\n     let mut v = vec![];\n     fake_hash(&mut v, SingleVariantEnum::A(17));\n     assert_eq!(vec![17], v);\n+\n+    // issue #39137\n+    #[repr(u8)]\n+    #[derive(Hash)]\n+    enum E {\n+        A,\n+        B,\n+    }\n+    E::A.hash(&mut OnlyOneByteHasher);\n }"}]}