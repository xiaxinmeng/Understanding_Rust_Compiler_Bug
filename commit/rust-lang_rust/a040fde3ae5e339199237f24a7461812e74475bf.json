{"sha": "a040fde3ae5e339199237f24a7461812e74475bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNDBmZGUzYWU1ZTMzOTE5OTIzN2YyNGE3NDYxODEyZTc0NDc1YmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-16T20:01:13Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-17T17:47:45Z"}, "message": "Remove TraitItem and ImplItem in favor of AssocItem", "tree": {"sha": "007e93e160cd6f0c5e62a4ed4ac72e8f6f8bf76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007e93e160cd6f0c5e62a4ed4ac72e8f6f8bf76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a040fde3ae5e339199237f24a7461812e74475bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a040fde3ae5e339199237f24a7461812e74475bf", "html_url": "https://github.com/rust-lang/rust/commit/a040fde3ae5e339199237f24a7461812e74475bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a040fde3ae5e339199237f24a7461812e74475bf/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a932509dbb9dfdaabb27a0d7fc3fe87e44ec55", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a932509dbb9dfdaabb27a0d7fc3fe87e44ec55", "html_url": "https://github.com/rust-lang/rust/commit/53a932509dbb9dfdaabb27a0d7fc3fe87e44ec55"}], "stats": {"total": 139, "additions": 46, "deletions": 93}, "files": [{"sha": "6b1e44a2c5f5edda4f2ecb9a6f183f18162cdf38", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -1,7 +1,7 @@\n use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n \n use ra_db::SourceDatabase;\n-use ra_hir::{Crate, HasBodySource, HasSource, HirDisplay, ImplItem, ModuleDef, Ty, TypeWalk};\n+use ra_hir::{AssocItem, Crate, HasBodySource, HasSource, HirDisplay, ModuleDef, Ty, TypeWalk};\n use ra_syntax::AstNode;\n \n use crate::{Result, Verbosity};\n@@ -47,7 +47,7 @@ pub fn run(\n             for impl_block in module.impl_blocks(db) {\n                 for item in impl_block.items(db) {\n                     num_decls += 1;\n-                    if let ImplItem::Method(f) = item {\n+                    if let AssocItem::Function(f) = item {\n                         funcs.push(f);\n                     }\n                 }"}, {"sha": "706d24c32501753e35e8583e7701b5306af93646", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     },\n     nameres::{CrateModuleId, ImportId, ModuleScope, Namespace},\n     resolve::{Resolver, TypeNs},\n-    traits::{TraitData, TraitItem},\n+    traits::TraitData,\n     ty::{\n         primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n         InferenceResult, TraitRef,\n@@ -269,7 +269,7 @@ impl Module {\n \n         for impl_block in self.impl_blocks(db) {\n             for item in impl_block.items(db) {\n-                if let crate::ImplItem::Method(f) = item {\n+                if let AssocItem::Function(f) = item {\n                     f.diagnostics(db, sink);\n                 }\n             }\n@@ -853,7 +853,7 @@ impl Trait {\n         self.trait_data(db).name().clone()\n     }\n \n-    pub fn items(self, db: &impl DefDatabase) -> Vec<TraitItem> {\n+    pub fn items(self, db: &impl DefDatabase) -> Vec<AssocItem> {\n         self.trait_data(db).items().to_vec()\n     }\n \n@@ -906,7 +906,7 @@ impl Trait {\n             .items()\n             .iter()\n             .filter_map(|item| match item {\n-                TraitItem::TypeAlias(t) => Some(*t),\n+                AssocItem::TypeAlias(t) => Some(*t),\n                 _ => None,\n             })\n             .find(|t| &t.name(db) == name)\n@@ -1030,23 +1030,8 @@ pub enum AssocItem {\n     Const(Const),\n     TypeAlias(TypeAlias),\n }\n-\n-impl From<TraitItem> for AssocItem {\n-    fn from(t: TraitItem) -> Self {\n-        match t {\n-            TraitItem::Function(f) => AssocItem::Function(f),\n-            TraitItem::Const(c) => AssocItem::Const(c),\n-            TraitItem::TypeAlias(t) => AssocItem::TypeAlias(t),\n-        }\n-    }\n-}\n-\n-impl From<crate::ImplItem> for AssocItem {\n-    fn from(i: crate::ImplItem) -> Self {\n-        match i {\n-            crate::ImplItem::Method(f) => AssocItem::Function(f),\n-            crate::ImplItem::Const(c) => AssocItem::Const(c),\n-            crate::ImplItem::TypeAlias(t) => AssocItem::TypeAlias(t),\n-        }\n-    }\n-}\n+// FIXME: not every function, ... is actually an assoc item. maybe we should make\n+// sure that you can only turn actual assoc items into AssocItems. This would\n+// require not implementing From, and instead having some checked way of\n+// casting them, and somehow making the constructors private, which would be annoying.\n+impl_froms!(AssocItem: Function, Const, TypeAlias);"}, {"sha": "c463d351cf16ff02e8d6e1349966a37197f011f5", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     resolve::Resolver,\n     ty::Ty,\n     type_ref::TypeRef,\n-    Const, Function, HasSource, HirFileId, Source, TraitRef, TypeAlias,\n+    AssocItem, Const, Function, HasSource, HirFileId, Source, TraitRef, TypeAlias,\n };\n \n #[derive(Debug, Default, PartialEq, Eq)]\n@@ -56,7 +56,7 @@ impl HasSource for ImplBlock {\n impl ImplBlock {\n     pub(crate) fn containing(\n         module_impl_blocks: Arc<ModuleImplBlocks>,\n-        item: ImplItem,\n+        item: AssocItem,\n     ) -> Option<ImplBlock> {\n         let impl_id = *module_impl_blocks.impls_by_def.get(&item)?;\n         Some(ImplBlock { module: module_impl_blocks.module, impl_id })\n@@ -91,7 +91,7 @@ impl ImplBlock {\n         TraitRef::from_hir(db, &self.resolver(db), &self.target_trait(db)?, Some(target_ty))\n     }\n \n-    pub fn items(&self, db: &impl DefDatabase) -> Vec<ImplItem> {\n+    pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {\n         db.impls_in_module(self.module).impls[self.impl_id].items().to_vec()\n     }\n \n@@ -113,7 +113,7 @@ impl ImplBlock {\n pub struct ImplData {\n     target_trait: Option<TypeRef>,\n     target_type: TypeRef,\n-    items: Vec<ImplItem>,\n+    items: Vec<AssocItem>,\n     negative: bool,\n }\n \n@@ -151,27 +151,11 @@ impl ImplData {\n         &self.target_type\n     }\n \n-    pub fn items(&self) -> &[ImplItem] {\n+    pub fn items(&self) -> &[AssocItem] {\n         &self.items\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-//FIXME: rename to ImplDef?\n-pub enum ImplItem {\n-    Method(Function),\n-    Const(Const),\n-    TypeAlias(TypeAlias),\n-    // Existential\n-}\n-impl_froms!(ImplItem: Const, TypeAlias);\n-\n-impl From<Function> for ImplItem {\n-    fn from(func: Function) -> ImplItem {\n-        ImplItem::Method(func)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct ImplId(pub RawId);\n impl_arena_id!(ImplId);\n@@ -185,7 +169,7 @@ impl_arena_id!(ImplId);\n pub struct ModuleImplBlocks {\n     pub(crate) module: Module,\n     pub(crate) impls: Arena<ImplId, ImplData>,\n-    impls_by_def: FxHashMap<ImplItem, ImplId>,\n+    impls_by_def: FxHashMap<AssocItem, ImplId>,\n }\n \n impl ModuleImplBlocks {"}, {"sha": "e7a576aa0a7d111afd9b8971f3e36452a6f08829", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -69,7 +69,7 @@ pub use self::{\n     expr::ExprScopes,\n     generics::{GenericParam, GenericParams, HasGenericParams},\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n-    impl_block::{ImplBlock, ImplItem},\n+    impl_block::ImplBlock,\n     name::Name,\n     nameres::{ImportId, Namespace, PerNs},\n     path::{Path, PathKind},"}, {"sha": "e39511518d10031a4db48c20ed7a2ab38f910fc5", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -9,13 +9,13 @@ use crate::{\n     db::{AstDatabase, DefDatabase},\n     ids::LocationCtx,\n     name::AsName,\n-    Const, Function, HasSource, Module, Name, Trait, TypeAlias,\n+    AssocItem, Const, Function, HasSource, Module, Name, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TraitData {\n     name: Option<Name>,\n-    items: Vec<TraitItem>,\n+    items: Vec<AssocItem>,\n     auto: bool,\n }\n \n@@ -48,7 +48,7 @@ impl TraitData {\n         &self.name\n     }\n \n-    pub(crate) fn items(&self) -> &[TraitItem] {\n+    pub(crate) fn items(&self) -> &[AssocItem] {\n         &self.items\n     }\n \n@@ -57,22 +57,9 @@ impl TraitData {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum TraitItem {\n-    Function(Function),\n-    Const(Const),\n-    TypeAlias(TypeAlias),\n-    // Existential\n-}\n-// FIXME: not every function, ... is actually a trait item. maybe we should make\n-// sure that you can only turn actual trait items into TraitItems. This would\n-// require not implementing From, and instead having some checked way of\n-// casting them.\n-impl_froms!(TraitItem: Function, Const, TypeAlias);\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TraitItemsIndex {\n-    traits_by_def: FxHashMap<TraitItem, Trait>,\n+    traits_by_def: FxHashMap<AssocItem, Trait>,\n }\n \n impl TraitItemsIndex {\n@@ -88,7 +75,7 @@ impl TraitItemsIndex {\n         index\n     }\n \n-    pub(crate) fn get_parent_trait(&self, item: TraitItem) -> Option<Trait> {\n+    pub(crate) fn get_parent_trait(&self, item: AssocItem) -> Option<Trait> {\n         self.traits_by_def.get(&item).cloned()\n     }\n }"}, {"sha": "70da7f3113adf4f43833cc740bc00b184aca5257", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -576,34 +576,32 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         // Find impl\n         // FIXME: consider trait candidates\n-        let def = ty.clone().iterate_impl_items(self.db, krate, |item| match item {\n-            crate::ImplItem::Method(func) => {\n+        let item = ty.clone().iterate_impl_items(self.db, krate, |item| match item {\n+            AssocItem::Function(func) => {\n                 if segment.name == func.name(self.db) {\n-                    Some(ValueNs::Function(func))\n+                    Some(AssocItem::Function(func))\n                 } else {\n                     None\n                 }\n             }\n \n-            crate::ImplItem::Const(konst) => {\n+            AssocItem::Const(konst) => {\n                 if konst.name(self.db).map_or(false, |n| n == segment.name) {\n-                    Some(ValueNs::Const(konst))\n+                    Some(AssocItem::Const(konst))\n                 } else {\n                     None\n                 }\n             }\n-            crate::ImplItem::TypeAlias(_) => None,\n+            AssocItem::TypeAlias(_) => None,\n         })?;\n+        let def = match item {\n+            AssocItem::Function(f) => ValueNs::Function(f),\n+            AssocItem::Const(c) => ValueNs::Const(c),\n+            AssocItem::TypeAlias(_) => unreachable!(),\n+        };\n         let substs = self.find_self_types(&def, ty);\n \n-        self.write_assoc_resolution(\n-            id,\n-            match def {\n-                ValueNs::Function(f) => AssocItem::Function(f),\n-                ValueNs::Const(c) => AssocItem::Const(c),\n-                _ => unreachable!(),\n-            },\n-        );\n+        self.write_assoc_resolution(id, item);\n         Some((def, substs))\n     }\n "}, {"sha": "8b46b11a9c4d4ee0c28b732e1de319eaf63c1f18", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -11,13 +11,12 @@ use super::{autoderef, lower, Canonical, InEnvironment, TraitEnvironment, TraitR\n use crate::{\n     db::HirDatabase,\n     generics::HasGenericParams,\n-    impl_block::{ImplBlock, ImplId, ImplItem},\n+    impl_block::{ImplBlock, ImplId},\n     nameres::CrateModuleId,\n     resolve::Resolver,\n-    traits::TraitItem,\n     ty::primitive::{FloatBitness, UncertainFloatTy, UncertainIntTy},\n     ty::{Ty, TypeCtor},\n-    Crate, Function, Module, Name, Trait,\n+    AssocItem, Crate, Function, Module, Name, Trait,\n };\n \n /// This is used as a key for indexing impls.\n@@ -232,7 +231,7 @@ fn iterate_trait_method_candidates<T>(\n         // iteration\n         let mut known_implemented = inherently_implemented;\n         for item in data.items() {\n-            if let TraitItem::Function(m) = *item {\n+            if let AssocItem::Function(m) = *item {\n                 let data = m.data(db);\n                 if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                     if !known_implemented {\n@@ -264,7 +263,7 @@ fn iterate_inherent_methods<T>(\n \n         for impl_block in impls.lookup_impl_blocks(&ty.value) {\n             for item in impl_block.items(db) {\n-                if let ImplItem::Method(f) = item {\n+                if let AssocItem::Function(f) = item {\n                     let data = f.data(db);\n                     if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                         if let Some(result) = callback(&ty.value, f) {\n@@ -304,7 +303,7 @@ impl Ty {\n         self,\n         db: &impl HirDatabase,\n         krate: Crate,\n-        mut callback: impl FnMut(ImplItem) -> Option<T>,\n+        mut callback: impl FnMut(AssocItem) -> Option<T>,\n     ) -> Option<T> {\n         for krate in def_crates(db, krate, &self)? {\n             let impls = db.impls_in_crate(krate);"}, {"sha": "693d9b28fd661789a599439a0de4929e5b57e151", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -21,7 +21,7 @@ use crate::{\n         ApplicationTy, CallableDef, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n         TypeWalk,\n     },\n-    Crate, HasGenericParams, ImplBlock, ImplItem, Trait, TypeAlias,\n+    AssocItem, Crate, HasGenericParams, ImplBlock, Trait, TypeAlias,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -496,7 +496,7 @@ pub(crate) fn trait_datum_query(\n         .items(db)\n         .into_iter()\n         .filter_map(|trait_item| match trait_item {\n-            crate::traits::TraitItem::TypeAlias(type_alias) => Some(type_alias),\n+            crate::AssocItem::TypeAlias(type_alias) => Some(type_alias),\n             _ => None,\n         })\n         .map(|type_alias| type_alias.to_chalk(db))\n@@ -616,7 +616,7 @@ pub(crate) fn impl_datum_query(\n         .items(db)\n         .into_iter()\n         .filter_map(|item| match item {\n-            ImplItem::TypeAlias(t) => Some(t),\n+            AssocItem::TypeAlias(t) => Some(t),\n             _ => None,\n         })\n         .filter_map(|t| {"}, {"sha": "e9fec54d8688a364d96a1cc61cd4941ab00398c4", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040fde3ae5e339199237f24a7461812e74475bf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=a040fde3ae5e339199237f24a7461812e74475bf", "patch": "@@ -52,14 +52,14 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n             if let Some(krate) = krate {\n                 ty.iterate_impl_items(ctx.db, krate, |item| {\n                     match item {\n-                        hir::ImplItem::Method(func) => {\n+                        hir::AssocItem::Function(func) => {\n                             let data = func.data(ctx.db);\n                             if !data.has_self_param() {\n                                 acc.add_function(ctx, func);\n                             }\n                         }\n-                        hir::ImplItem::Const(ct) => acc.add_const(ctx, ct),\n-                        hir::ImplItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n+                        hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n+                        hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                     }\n                     None::<()>\n                 });"}]}