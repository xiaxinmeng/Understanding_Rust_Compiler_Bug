{"sha": "5fe80a0d486b0276a2181d179af83a62e6590f34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTgwYTBkNDg2YjAyNzZhMjE4MWQxNzlhZjgzYTYyZTY1OTBmMzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-27T00:05:05Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-27T00:05:59Z"}, "message": "rt: Allow closures to be logged", "tree": {"sha": "81fefdfe6d59d609865fab45abbe54143cb8a0df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81fefdfe6d59d609865fab45abbe54143cb8a0df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe80a0d486b0276a2181d179af83a62e6590f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe80a0d486b0276a2181d179af83a62e6590f34", "html_url": "https://github.com/rust-lang/rust/commit/5fe80a0d486b0276a2181d179af83a62e6590f34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe80a0d486b0276a2181d179af83a62e6590f34/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b894069a8fb0914761738d2bead216c38d581132", "url": "https://api.github.com/repos/rust-lang/rust/commits/b894069a8fb0914761738d2bead216c38d581132", "html_url": "https://github.com/rust-lang/rust/commit/b894069a8fb0914761738d2bead216c38d581132"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "0adfbe2d03a3522a09d4ad3f5fcf83c5170285c5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fe80a0d486b0276a2181d179af83a62e6590f34/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe80a0d486b0276a2181d179af83a62e6590f34/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5fe80a0d486b0276a2181d179af83a62e6590f34", "patch": "@@ -942,11 +942,12 @@ fn trans_stack_local_derived_tydesc(cx: &@block_ctxt, llsz: ValueRef,\n     ret llmyroottydesc;\n }\n \n-// Objects store their type parameters differently (in the object itself\n-// rather than in the type descriptor).\n+// Objects and closures store their type parameters differently (in the object\n+// or closure itself rather than in the type descriptor).\n tag ty_param_storage {\n     tps_normal;\n     tps_obj(uint);\n+    tps_fn(uint);\n }\n \n fn get_derived_tydesc(cx: &@block_ctxt, t: ty::t, escapes: bool,\n@@ -1004,10 +1005,13 @@ fn get_derived_tydesc(cx: &@block_ctxt, t: ty::t, escapes: bool,\n         bld::PointerCast(bcx, llparamtydescs,\n                          T_ptr(T_ptr(bcx_ccx(bcx).tydesc_type)));\n \n+    // The top bit indicates whether this type descriptor describes an object\n+    // (0) or a function (1).\n     let obj_params;\n     alt storage {\n         tps_normal. { obj_params = 0u; }\n         tps_obj(np) { obj_params = np; }\n+        tps_fn(np)  { obj_params = 0x80000000u | np; }\n     }\n \n     let v;"}, {"sha": "f56aa0251cee97b566c69da45b4f78de87673ddf", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fe80a0d486b0276a2181d179af83a62e6590f34/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5fe80a0d486b0276a2181d179af83a62e6590f34/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=5fe80a0d486b0276a2181d179af83a62e6590f34", "patch": "@@ -42,7 +42,17 @@ type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n     return ptrs;\n }\n \n-// Constructs type parameters from an object shape. This is a bit messy,\n+// Constructs type parameters from a function shape. This is a bit messy,\n+// because it requires that the function shape have a specific format.\n+type_param *\n+type_param::from_fn_shape(const uint8_t *sp, ptr dp, arena &arena) {\n+    const type_desc *tydesc = bump_dp<const type_desc *>(dp);\n+    const type_desc **descs = (const type_desc **)(dp + tydesc->size);\n+    unsigned n_tydescs = tydesc->n_obj_params & 0x7fffffff;\n+    return make(descs, n_tydescs, arena);\n+}\n+\n+// Constructs type parameters from an object shape. This is also a bit messy,\n // because it requires that the object shape have a specific format.\n type_param *\n type_param::from_obj_shape(const uint8_t *sp, ptr dp, arena &arena) {\n@@ -460,12 +470,6 @@ log::walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data) {\n     out << \"]\";\n }\n \n-void\n-log::walk_obj(bool align) {\n-    out << \"obj\";\n-    data<log,ptr>::walk_obj_contents(align, dp);\n-}\n-\n void\n log::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                   const std::pair<const uint8_t *,const uint8_t *>"}, {"sha": "eb6831101809eee7b04045236f2f4e2ab40dae44", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5fe80a0d486b0276a2181d179af83a62e6590f34/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/5fe80a0d486b0276a2181d179af83a62e6590f34/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=5fe80a0d486b0276a2181d179af83a62e6590f34", "patch": "@@ -245,6 +245,8 @@ class type_param {\n     const rust_shape_tables *tables;\n     const type_param *params;   // subparameters\n \n+    // Constructs type parameters from a function shape.\n+    static type_param *from_fn_shape(const uint8_t *sp, ptr dp, arena &arena);\n     // Creates type parameters from an object shape description.\n     static type_param *from_obj_shape(const uint8_t *sp, ptr dp,\n                                       arena &arena);\n@@ -718,6 +720,7 @@ template<typename T,typename U>\n class data : public ctxt< data<T,U> > {\n protected:\n     void walk_box_contents(bool align);\n+    void walk_fn_contents(bool align, ptr &dp);\n     void walk_obj_contents(bool align, ptr &dp);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n \n@@ -894,6 +897,28 @@ data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n     dp = end_dp;\n }\n \n+template<typename T,typename U>\n+void\n+data<T,U>::walk_fn_contents(bool align, ptr &dp) {\n+    dp += sizeof(void *);   // Skip over the code pointer.\n+\n+    uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n+    type_desc *subtydesc =\n+        *reinterpret_cast<type_desc **>(box_ptr + sizeof(void *));\n+    ptr closure_dp(box_ptr + sizeof(void *));\n+    if (!box_ptr)\n+        return;\n+\n+    arena arena;\n+    type_param *params = type_param::from_fn_shape(subtydesc->shape,\n+                                                   closure_dp, arena);\n+\n+    closure_dp += sizeof(void *);\n+    T sub(*static_cast<T *>(this), subtydesc->shape, params,\n+          subtydesc->shape_tables, closure_dp);\n+    sub.walk(true);\n+}\n+\n template<typename T,typename U>\n void\n data<T,U>::walk_obj_contents(bool align, ptr &dp) {\n@@ -967,7 +992,16 @@ class log : public data<log,ptr> {\n         data<log,ptr>::walk_box_contents(align);\n     }\n \n-    void walk_fn(bool align) { out << \"fn\"; }\n+    void walk_fn(bool align) {\n+        out << \"fn\";\n+        data<log,ptr>::walk_fn_contents(align, dp);\n+    }\n+\n+    void walk_obj(bool align) {\n+        out << \"obj\";\n+        data<log,ptr>::walk_obj_contents(align, dp);\n+    }\n+\n     void walk_port(bool align) { out << \"port\"; }\n     void walk_chan(bool align) { out << \"chan\"; }\n     void walk_task(bool align) { out << \"task\"; }\n@@ -988,7 +1022,6 @@ class log : public data<log,ptr> {\n \n     void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data);\n-    void walk_obj(bool align);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);"}]}