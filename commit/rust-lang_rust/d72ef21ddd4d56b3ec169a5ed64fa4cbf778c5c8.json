{"sha": "d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MmVmMjFkZGQ0ZDU2YjNlYzE2OWE1ZWQ2NGZhNGNiZjc3OGM1Yzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-23T03:14:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-23T03:14:20Z"}, "message": "Reword type ascription note to reduce verbosity", "tree": {"sha": "0e7faa5ac8820f8b4ca6c9d6df421b784f1a7ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7faa5ac8820f8b4ca6c9d6df421b784f1a7ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "html_url": "https://github.com/rust-lang/rust/commit/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a086ef39b2a6e6ed231869a5166bec7c4b7511", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a086ef39b2a6e6ed231869a5166bec7c4b7511", "html_url": "https://github.com/rust-lang/rust/commit/44a086ef39b2a6e6ed231869a5166bec7c4b7511"}], "stats": {"total": 76, "additions": 11, "deletions": 65}, "files": [{"sha": "ea81094a996fb04a2096b9fae0c224827a6a4748", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -3708,11 +3708,7 @@ impl<'a> Parser<'a> {\n                           you annotate an expression with a type: `<expr>: <type>`\");\n                 err.span_note(\n                     lhs_span,\n-                    \"this expression is annotated with type ascription...\",\n-                );\n-                err.span_note(\n-                    cur_op_span,\n-                    \"...due to this, which is why a type is expected after\",\n+                    \"this expression expects an ascribed type after the colon\",\n                 );\n                 err.help(\"this might be indicative of a syntax error elsewhere\");\n             }"}, {"sha": "b0ef4e1b25413c315c8de5df707a3ded89ec11ec", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -5,16 +5,11 @@ LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n    |                                       ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/E0423.rs:12:36\n    |\n LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n    |                                    ^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/E0423.rs:12:37\n-   |\n-LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n-   |                                     ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: expected expression, found `==`\n@@ -30,16 +25,11 @@ LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n    |                                       ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/E0423.rs:21:32\n    |\n LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n    |                                ^^^^^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/E0423.rs:21:37\n-   |\n-LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n-   |                                     ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error[E0423]: expected function, found struct `Foo`"}, {"sha": "a28ea0d09f8f0fca7452fabb99118a15dc7155b0", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -90,16 +90,11 @@ LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-22644.rs:34:20\n    |\n LL |     println!(\"{}\", a: &mut 4);\n    |                    ^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/issue-22644.rs:34:21\n-   |\n-LL |     println!(\"{}\", a: &mut 4);\n-   |                     ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: aborting due to 9 previous errors"}, {"sha": "7899c8d30f1ddca60eea74c71ded0ba3b83918c1", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -5,16 +5,11 @@ LL |     Test::Drill(field: 42);\n    |                        ^^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-34255-1.rs:8:17\n    |\n LL |     Test::Drill(field: 42);\n    |                 ^^^^^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/issue-34255-1.rs:8:22\n-   |\n-LL |     Test::Drill(field: 42);\n-   |                      ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: aborting due to previous error"}, {"sha": "cb5a52a3e081a75668a83902803fca0418b88ddb", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -15,16 +15,11 @@ LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/lifetime_starts_expressions.rs:6:12\n    |\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |            ^^^^^^^^^^^^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/lifetime_starts_expressions.rs:6:24\n-   |\n-LL |     loop { break 'label: loop { break 'label 42; }; }\n-   |                        ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: aborting due to 2 previous errors"}, {"sha": "07f2e41ac4fb036e5ffc546feac71947a2ca4191", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -5,16 +5,11 @@ LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/struct-literal-in-for.rs:13:9\n    |\n LL |         x: 3\n    |         ^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/struct-literal-in-for.rs:13:10\n-   |\n-LL |         x: 3\n-   |          ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`"}, {"sha": "3dd61e74f12eda67e9808948cc727bda1b915b25", "filename": "src/test/ui/parser/struct-literal-in-if.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -5,16 +5,11 @@ LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/struct-literal-in-if.rs:13:9\n    |\n LL |         x: 3\n    |         ^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/struct-literal-in-if.rs:13:10\n-   |\n-LL |         x: 3\n-   |          ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`"}, {"sha": "d48244654cd023dd43250ecc39e446d45132d8da", "filename": "src/test/ui/parser/struct-literal-in-while.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -5,16 +5,11 @@ LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/struct-literal-in-while.rs:13:9\n    |\n LL |         x: 3\n    |         ^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/struct-literal-in-while.rs:13:10\n-   |\n-LL |         x: 3\n-   |          ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`"}, {"sha": "a8c93233dbc535408b4e55e670dcc5aa52cdb19d", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -5,16 +5,11 @@ LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/struct-literal-restrictions-in-lamda.rs:13:9\n    |\n LL |         x: 3\n    |         ^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/struct-literal-restrictions-in-lamda.rs:13:10\n-   |\n-LL |         x: 3\n-   |          ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`"}, {"sha": "2084cbcce4f6253ddd17027f2864c8b7498c288c", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=d72ef21ddd4d56b3ec169a5ed64fa4cbf778c5c8", "patch": "@@ -13,16 +13,11 @@ LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n    |\n    = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression is annotated with type ascription...\n+note: this expression expects an ascribed type after the colon\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n    |\n LL |     println!(\"test\"): 0;\n    |     ^^^^^^^^^^^^^^^^\n-note: ...due to this, which is why a type is expected after\n-  --> $DIR/type-ascription-instead-of-statement-end.rs:9:21\n-   |\n-LL |     println!(\"test\"): 0;\n-   |                     ^\n    = help: this might be indicative of a syntax error elsewhere\n \n error: aborting due to 2 previous errors"}]}