{"sha": "fffc6504bcfa416f09f7d441f57f71e7aec28a00", "node_id": "C_kwDOAAsO6NoAKGZmZmM2NTA0YmNmYTQxNmYwOWY3ZDQ0MWY1N2Y3MWU3YWVjMjhhMDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-20T10:47:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-20T10:47:20Z"}, "message": "Rollup merge of #99436 - Nilstrieb:toggle-box-noalias, r=fee1-dead\n\nAdd flag to configure `noalias` on `Box<T>`\n\nThe aliasing rules of `Box<T>` are still not decided, but currently, `Box<T>` is unique and gets `noalias`. To aid making an informed decision about the future of `Box<T>`, this PR adds a flag `-Zbox-noalias` to configure `noalias` for `Box<T>` (for example, for benchmarking). The same flag already exists for `&mut T` `noalias`, where it was added because it was the problem of various miscompilations in LLVM.\n\nFor more information, see rust-lang/unsafe-code-guidelines#326", "tree": {"sha": "8d653b61b7e25a6efef8281880f0a23439a7761e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d653b61b7e25a6efef8281880f0a23439a7761e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fffc6504bcfa416f09f7d441f57f71e7aec28a00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1904CRBK7hj4Ov3rIwAAxeEIAJ1SHmCq7L4y9OMU30pUe/Fa\nzamX+msbRBzoSDYGJhBSW4OpA5vgBF8F+Gwx34jkC4uX4T1N/n07b4bF0KOBhM+o\nePUWTWacMI+IQwCkl8x2QPWZ357mu3OIeCZpnFglKcw7jx4XPjPub9ANFObYzCVe\nNDovwZuaxCLaqng9xVSl9saQjKGikVLfeJqF0d4CixMExKPurbCo5Dbli3yaGFdl\n/lP79VzzHAQyIFfb3YOyDLDNXQuQTrEgR8QTdAU64VJ3LNsqeYO6jdvVnuf2jdK/\nXPk2q0OtbJ4/4icopRUaCr0TUeKpiztwD437d9d7Hw4rkEx0nED7K5adA6Rrbjo=\n=tsa3\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d653b61b7e25a6efef8281880f0a23439a7761e\nparent eecfdfb8a12367cb292a85b6a30981eb35a56379\nparent 7c900c9b457b232e0c189dba0871a50fd2daabf9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658314040 +0530\ncommitter GitHub <noreply@github.com> 1658314040 +0530\n\nRollup merge of #99436 - Nilstrieb:toggle-box-noalias, r=fee1-dead\n\nAdd flag to configure `noalias` on `Box<T>`\n\nThe aliasing rules of `Box<T>` are still not decided, but currently, `Box<T>` is unique and gets `noalias`. To aid making an informed decision about the future of `Box<T>`, this PR adds a flag `-Zbox-noalias` to configure `noalias` for `Box<T>` (for example, for benchmarking). The same flag already exists for `&mut T` `noalias`, where it was added because it was the problem of various miscompilations in LLVM.\n\nFor more information, see rust-lang/unsafe-code-guidelines#326\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fffc6504bcfa416f09f7d441f57f71e7aec28a00", "html_url": "https://github.com/rust-lang/rust/commit/fffc6504bcfa416f09f7d441f57f71e7aec28a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fffc6504bcfa416f09f7d441f57f71e7aec28a00/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eecfdfb8a12367cb292a85b6a30981eb35a56379", "url": "https://api.github.com/repos/rust-lang/rust/commits/eecfdfb8a12367cb292a85b6a30981eb35a56379", "html_url": "https://github.com/rust-lang/rust/commit/eecfdfb8a12367cb292a85b6a30981eb35a56379"}, {"sha": "7c900c9b457b232e0c189dba0871a50fd2daabf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c900c9b457b232e0c189dba0871a50fd2daabf9", "html_url": "https://github.com/rust-lang/rust/commit/7c900c9b457b232e0c189dba0871a50fd2daabf9"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "3eef3308770bee04c512e47296a0d401938f008b", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fffc6504bcfa416f09f7d441f57f71e7aec28a00/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffc6504bcfa416f09f7d441f57f71e7aec28a00/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=fffc6504bcfa416f09f7d441f57f71e7aec28a00", "patch": "@@ -718,6 +718,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(asm_comments, true);\n     tracked!(assume_incomplete_release, true);\n     tracked!(binary_dep_depinfo, true);\n+    tracked!(box_noalias, Some(false));\n     tracked!(\n         branch_protection,\n         Some(BranchProtection {"}, {"sha": "4491965347bd66473b2791a9c752b81e09e5653b", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fffc6504bcfa416f09f7d441f57f71e7aec28a00/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffc6504bcfa416f09f7d441f57f71e7aec28a00/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=fffc6504bcfa416f09f7d441f57f71e7aec28a00", "patch": "@@ -3266,7 +3266,12 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // this attribute doesn't make it UB for the pointed-to data to be undef.\n                     attrs.set(ArgAttribute::NoUndef);\n \n-                    // `Box` pointer parameters never alias because ownership is transferred\n+                    // The aliasing rules for `Box<T>` are still not decided, but currently we emit\n+                    // `noalias` for it. This can be turned off using an unstable flag.\n+                    // See https://github.com/rust-lang/unsafe-code-guidelines/issues/326\n+                    let noalias_for_box =\n+                        self.tcx().sess.opts.unstable_opts.box_noalias.unwrap_or(true);\n+\n                     // `&mut` pointer parameters never alias other parameters,\n                     // or mutable global data\n                     //\n@@ -3281,7 +3286,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // `-Zmutable-noalias` debugging option.\n                     let no_alias = match kind {\n                         PointerKind::Shared | PointerKind::UniqueBorrowed => false,\n-                        PointerKind::UniqueOwned => true,\n+                        PointerKind::UniqueOwned => noalias_for_box,\n                         PointerKind::Frozen => !is_return,\n                     };\n                     if no_alias {"}, {"sha": "5d365fc5246287040e780d8f7fea1badf0c5cc7e", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fffc6504bcfa416f09f7d441f57f71e7aec28a00/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffc6504bcfa416f09f7d441f57f71e7aec28a00/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=fffc6504bcfa416f09f7d441f57f71e7aec28a00", "patch": "@@ -1209,6 +1209,8 @@ options! {\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n         \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n         (default: no)\"),\n+    box_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"emit noalias metadata for box (default: yes)\"),\n     branch_protection: Option<BranchProtection> = (None, parse_branch_protection, [TRACKED],\n         \"set options for branch target identification and pointer authentication on AArch64\"),\n     cf_protection: CFProtection = (CFProtection::None, parse_cfprotection, [TRACKED],"}, {"sha": "afd17c7c160749badb7a83c100317022f29badb7", "filename": "src/test/codegen/noalias-box-off.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fffc6504bcfa416f09f7d441f57f71e7aec28a00/src%2Ftest%2Fcodegen%2Fnoalias-box-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffc6504bcfa416f09f7d441f57f71e7aec28a00/src%2Ftest%2Fcodegen%2Fnoalias-box-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoalias-box-off.rs?ref=fffc6504bcfa416f09f7d441f57f71e7aec28a00", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -O -Z box-noalias=no\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @box_should_not_have_noalias_if_disabled(\n+// CHECK-NOT: noalias\n+#[no_mangle]\n+pub fn box_should_not_have_noalias_if_disabled(_b: Box<u8>) {}"}, {"sha": "a3d1f093d8bd3fb20af8ae6e896da1dbe6be8b9f", "filename": "src/test/codegen/noalias-box.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fffc6504bcfa416f09f7d441f57f71e7aec28a00/src%2Ftest%2Fcodegen%2Fnoalias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffc6504bcfa416f09f7d441f57f71e7aec28a00/src%2Ftest%2Fcodegen%2Fnoalias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoalias-box.rs?ref=fffc6504bcfa416f09f7d441f57f71e7aec28a00", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @box_should_have_noalias_by_default(\n+// CHECK: noalias\n+#[no_mangle]\n+pub fn box_should_have_noalias_by_default(_b: Box<u8>) {}"}, {"sha": "6f5248f5b18ce3ea364701aca366c7a20e4a5741", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fffc6504bcfa416f09f7d441f57f71e7aec28a00/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fffc6504bcfa416f09f7d441f57f71e7aec28a00/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=fffc6504bcfa416f09f7d441f57f71e7aec28a00", "patch": "@@ -4,6 +4,7 @@\n     -Z                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n     -Z                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n     -Z                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -Z                             box-noalias=val -- emit noalias metadata for box (default: yes)\n     -Z                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n     -Z                           cf-protection=val -- instrument control-flow architecture protection\n     -Z               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use"}]}