{"sha": "9f34b82de203a01b7bb1afd57714886a65dbea8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMzRiODJkZTIwM2EwMWI3YmIxYWZkNTc3MTQ4ODZhNjVkYmVhOGY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-11T19:02:49Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-29T17:29:10Z"}, "message": "forbid `dyn Trait` in const generics", "tree": {"sha": "6baa941ec5460ce864d6ec471d7e14dffa139935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6baa941ec5460ce864d6ec471d7e14dffa139935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f34b82de203a01b7bb1afd57714886a65dbea8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f34b82de203a01b7bb1afd57714886a65dbea8f", "html_url": "https://github.com/rust-lang/rust/commit/9f34b82de203a01b7bb1afd57714886a65dbea8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f34b82de203a01b7bb1afd57714886a65dbea8f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d13cb01ba6a0a9b7c13ca2b9461a111cb3e395", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d13cb01ba6a0a9b7c13ca2b9461a111cb3e395", "html_url": "https://github.com/rust-lang/rust/commit/36d13cb01ba6a0a9b7c13ca2b9461a111cb3e395"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "5a3eea387757029fa6979f3fec447589035a44c0", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=9f34b82de203a01b7bb1afd57714886a65dbea8f", "patch": "@@ -116,6 +116,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of constant whose type is a parameter inside a pattern\")\n                     }\n+                    traits::NonStructuralMatchTy::Dynamic => {\n+                        bug!(\"use of a trait object inside a pattern\")\n+                    }\n                 };\n                 let path = self.tcx().def_path_str(adt_def.did);\n "}, {"sha": "8007290f35d85be8d1f9730a57d1e77e823fd38a", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=9f34b82de203a01b7bb1afd57714886a65dbea8f", "patch": "@@ -11,6 +11,7 @@ use rustc_span::Span;\n pub enum NonStructuralMatchTy<'tcx> {\n     Adt(&'tcx AdtDef),\n     Param,\n+    Dynamic,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -137,6 +138,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 self.found = Some(NonStructuralMatchTy::Param);\n                 return true; // Stop visiting.\n             }\n+            ty::Dynamic(..) => {\n+                self.found = Some(NonStructuralMatchTy::Dynamic);\n+                return true; // Stop visiting.\n+            }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n                 // `*const _`/`*mut _`, so skip `super_visit_with`."}, {"sha": "2bacd6c9a9c5a3e47f0518c72d1614640c221aea", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=9f34b82de203a01b7bb1afd57714886a65dbea8f", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait A {}\n+struct B;\n+impl A for B {}\n+\n+fn test<const T: &'static dyn A>() {\n+    //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    test::<{ &B }>();\n+}"}, {"sha": "73315af4483e2e23bf134eee8a0051391397a4d3", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f34b82de203a01b7bb1afd57714886a65dbea8f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr?ref=9f34b82de203a01b7bb1afd57714886a65dbea8f", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-63322-forbid-dyn.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:8:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}]}