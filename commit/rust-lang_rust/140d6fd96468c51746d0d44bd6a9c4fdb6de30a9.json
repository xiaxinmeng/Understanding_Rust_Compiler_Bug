{"sha": "140d6fd96468c51746d0d44bd6a9c4fdb6de30a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MGQ2ZmQ5NjQ2OGM1MTc0NmQwZDQ0YmQ2YTljNGZkYjZkZTMwYTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-10T22:59:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-10T22:59:20Z"}, "message": "Switch \".\" to \"_\" in name mangling, makes gdb happier. Also factor out into sep() helper.", "tree": {"sha": "cb077beb15e05255775ad3a3426ee1478568abbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb077beb15e05255775ad3a3426ee1478568abbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/140d6fd96468c51746d0d44bd6a9c4fdb6de30a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/140d6fd96468c51746d0d44bd6a9c4fdb6de30a9", "html_url": "https://github.com/rust-lang/rust/commit/140d6fd96468c51746d0d44bd6a9c4fdb6de30a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/140d6fd96468c51746d0d44bd6a9c4fdb6de30a9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f17a3421e01399bcc1a6f8540273d7b4440397a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f17a3421e01399bcc1a6f8540273d7b4440397a1", "html_url": "https://github.com/rust-lang/rust/commit/f17a3421e01399bcc1a6f8540273d7b4440397a1"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "dbcdaed16abf9d879e122cd7162e069b7d85454d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/140d6fd96468c51746d0d44bd6a9c4fdb6de30a9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140d6fd96468c51746d0d44bd6a9c4fdb6de30a9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=140d6fd96468c51746d0d44bd6a9c4fdb6de30a9", "patch": "@@ -121,6 +121,10 @@ tag block_parent {\n state type result = rec(mutable @block_ctxt bcx,\n                         mutable ValueRef val);\n \n+fn sep() -> str {\n+    ret \"_\";\n+}\n+\n fn res(@block_ctxt bcx, ValueRef val) -> result {\n     ret rec(mutable bcx = bcx,\n             mutable val = val);\n@@ -1104,7 +1108,7 @@ fn make_generic_glue(@crate_ctxt cx, @ty.t t, str name,\n                      vec[ast.def_id] typaram_defs) -> ValueRef {\n     auto llfnty = T_glue_fn();\n \n-    auto fn_name = cx.names.next(\"_rust_\" + name) + \".\" + ty.ty_to_str(t);\n+    auto fn_name = cx.names.next(\"_rust_\" + name) + sep() + ty.ty_to_str(t);\n     fn_name = sanitize(fn_name);\n     auto llfn = decl_fastcall_fn(cx.llmod, fn_name, llfnty);\n \n@@ -2498,7 +2502,7 @@ fn trans_bind_thunk(@crate_ctxt cx,\n     // Construct a thunk-call with signature incoming_fty, and that copies\n     // args forward into a call to outgoing_fty.\n \n-    let str s = cx.names.next(\"_rust_thunk\") + \".\" + cx.path;\n+    let str s = cx.names.next(\"_rust_thunk\") + sep() + cx.path;\n     let TypeRef llthunk_ty = get_pair_fn_ty(type_of(cx, incoming_fty));\n     let ValueRef llthunk = decl_fastcall_fn(cx.llmod, s, llthunk_ty);\n \n@@ -3592,10 +3596,10 @@ fn trans_vtbl(@crate_ctxt cx, TypeRef self_ty,\n             }\n         }\n \n-        let @crate_ctxt mcx = @rec(path=cx.path + \".\" + m.node.ident\n+        let @crate_ctxt mcx = @rec(path=cx.path + sep() + m.node.ident\n                                    with *cx);\n \n-        let str s = cx.names.next(\"_rust_method\") + \".\" + mcx.path;\n+        let str s = cx.names.next(\"_rust_method\") + sep() + mcx.path;\n         let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llfnty);\n         cx.item_ids.insert(m.node.id, llfn);\n \n@@ -3606,7 +3610,7 @@ fn trans_vtbl(@crate_ctxt cx, TypeRef self_ty,\n     auto vtbl = C_struct(methods);\n     auto gvar = llvm.LLVMAddGlobal(cx.llmod,\n                                    val_ty(vtbl),\n-                                   _str.buf(\"_rust_vtbl\" + \".\" + cx.path));\n+                                   _str.buf(\"_rust_vtbl\" + sep() + cx.path));\n     llvm.LLVMSetInitializer(gvar, vtbl);\n     llvm.LLVMSetGlobalConstant(gvar, True);\n     llvm.LLVMSetLinkage(gvar, lib.llvm.LLVMPrivateLinkage\n@@ -3837,29 +3841,29 @@ fn trans_const(@crate_ctxt cx, @ast.expr e,\n fn trans_item(@crate_ctxt cx, &ast.item item) {\n     alt (item.node) {\n         case (ast.item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n-            auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n+            auto sub_cx = @rec(path=cx.path + sep() + name with *cx);\n             trans_fn(sub_cx, f, fid, none[TypeRef], tps, ann);\n         }\n         case (ast.item_obj(?name, ?ob, ?tps, ?oid, ?ann)) {\n-            auto sub_cx = @rec(path=cx.path + \".\" + name,\n+            auto sub_cx = @rec(path=cx.path + sep() + name,\n                                obj_typarams=tps,\n                                obj_fields=ob.fields with *cx);\n             trans_obj(sub_cx, ob, oid, tps, ann);\n         }\n         case (ast.item_mod(?name, ?m, _)) {\n-            auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n+            auto sub_cx = @rec(path=cx.path + sep() + name with *cx);\n             trans_mod(sub_cx, m);\n         }\n         case (ast.item_tag(?name, ?variants, ?tps, ?tag_id)) {\n-            auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n+            auto sub_cx = @rec(path=cx.path + sep() + name with *cx);\n             auto i = 0;\n             for (ast.variant variant in variants) {\n                 trans_tag_variant(sub_cx, tag_id, variant, i, tps);\n                 i += 1;\n             }\n         }\n         case (ast.item_const(?name, _, ?expr, ?cid, ?ann)) {\n-            auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n+            auto sub_cx = @rec(path=cx.path + sep() + name with *cx);\n             trans_const(sub_cx, expr, cid, ann);\n         }\n         case (_) { /* fall through */ }\n@@ -3890,11 +3894,11 @@ fn decl_fn_and_pair(@crate_ctxt cx,\n     auto llfty = get_pair_fn_ty(llpairty);\n \n     // Declare the function itself.\n-    let str s = cx.names.next(\"_rust_\" + kind) + \".\" + name;\n+    let str s = cx.names.next(\"_rust_\" + kind) + sep() + name;\n     let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llfty);\n \n     // Declare the global constant pair that points to it.\n-    let str ps = cx.names.next(\"_rust_\" + kind + \"_pair\") + \".\" + name;\n+    let str ps = cx.names.next(\"_rust_\" + kind + \"_pair\") + sep() + name;\n     let ValueRef gvar = llvm.LLVMAddGlobal(cx.llmod, llpairty,\n                                            _str.buf(ps));\n     auto pair = C_struct(vec(llfn,\n@@ -4208,8 +4212,8 @@ fn trans_main_fn(@crate_ctxt cx, ValueRef llcrate) {\n \n     auto llargc = llvm.LLVMGetParam(llmain, 0u);\n     auto llargv = llvm.LLVMGetParam(llmain, 1u);\n-    check (cx.item_names.contains_key(\"_rust.main\"));\n-    auto llrust_main = cx.item_names.get(\"_rust.main\");\n+    check (cx.item_names.contains_key(\"_rust\" + sep() + \"main\"));\n+    auto llrust_main = cx.item_names.get(\"_rust\"  + sep() + \"main\");\n \n     //\n     // Emit the moral equivalent of:"}]}