{"sha": "5dad6c25751f577c53bd36d09f033e1c245d0806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYWQ2YzI1NzUxZjU3N2M1M2JkMzZkMDlmMDMzZTFjMjQ1ZDA4MDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T18:33:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T20:03:19Z"}, "message": "Implement built-in attribute macro `#[cfg_eval]`", "tree": {"sha": "5a5269785f864cdd6f1742f9cfcd5e0444e6427e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a5269785f864cdd6f1742f9cfcd5e0444e6427e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dad6c25751f577c53bd36d09f033e1c245d0806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dad6c25751f577c53bd36d09f033e1c245d0806", "html_url": "https://github.com/rust-lang/rust/commit/5dad6c25751f577c53bd36d09f033e1c245d0806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dad6c25751f577c53bd36d09f033e1c245d0806/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069e612e73f3fabb1184d9df009ea064118fffd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/069e612e73f3fabb1184d9df009ea064118fffd8", "html_url": "https://github.com/rust-lang/rust/commit/069e612e73f3fabb1184d9df009ea064118fffd8"}], "stats": {"total": 259, "additions": 259, "deletions": 0}, "files": [{"sha": "805f9d0634c044c38835f10232f3329220774da0", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -0,0 +1,29 @@\n+use crate::util::check_builtin_macro_attribute;\n+\n+use rustc_ast::{self as ast, AstLike};\n+use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_expand::config::StripUnconfigured;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n+\n+pub fn expand(\n+    ecx: &mut ExtCtxt<'_>,\n+    _span: Span,\n+    meta_item: &ast::MetaItem,\n+    item: Annotatable,\n+) -> Vec<Annotatable> {\n+    check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n+\n+    let mut visitor =\n+        StripUnconfigured { sess: ecx.sess, features: ecx.ecfg.features, modified: false };\n+    let mut item = visitor.fully_configure(item);\n+    if visitor.modified {\n+        // Erase the tokens if cfg-stripping modified the item\n+        // This will cause us to synthesize fake tokens\n+        // when `nt_to_tokenstream` is called on this item.\n+        if let Some(tokens) = item.tokens_mut() {\n+            *tokens = None;\n+        }\n+    }\n+    vec![item]\n+}"}, {"sha": "1017b23e5675a2d6513f2b167b24da12b6754117", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -24,6 +24,7 @@ mod asm;\n mod assert;\n mod cfg;\n mod cfg_accessible;\n+mod cfg_eval;\n mod compile_error;\n mod concat;\n mod concat_idents;\n@@ -89,6 +90,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     register_attr! {\n         bench: test::expand_bench,\n         cfg_accessible: cfg_accessible::Expander,\n+        cfg_eval: cfg_eval::expand,\n         derive: derive::Expander,\n         global_allocator: global_allocator::expand,\n         test: test::expand_test,"}, {"sha": "507eb1e1cbe8912129129d5b9717c4212ef00f17", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -344,6 +344,7 @@ symbols! {\n         cfg_attr,\n         cfg_attr_multi,\n         cfg_doctest,\n+        cfg_eval,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_feature,"}, {"sha": "28fed9b8a14cd3886b1bfc75ac0ec2f5fcd2bed8", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -1452,6 +1452,18 @@ pub(crate) mod builtin {\n         /* compiler built-in */\n     }\n \n+    /// Expands all `#[cfg]` and `#[cfg_attr]` attributes in the code fragment it's applied to.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(\n+        feature = \"cfg_eval\",\n+        issue = \"82679\",\n+        reason = \"`cfg_eval` is a recently implemented feature\"\n+    )]\n+    #[rustc_builtin_macro]\n+    pub macro cfg_eval($($tt:tt)*) {\n+        /* compiler built-in */\n+    }\n+\n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5e8a8d252a23883c32ae7f72a0af520922c26e90", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -81,3 +81,12 @@ pub use crate::macros::builtin::derive;\n )]\n #[doc(no_inline)]\n pub use crate::macros::builtin::cfg_accessible;\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"cfg_eval\",\n+    issue = \"82679\",\n+    reason = \"`cfg_eval` is a recently implemented feature\"\n+)]\n+#[doc(no_inline)]\n+pub use crate::macros::builtin::cfg_eval;"}, {"sha": "acdf7550fe71d358adbc7c0b961cb8bcb1ee0c7a", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -234,6 +234,7 @@\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n+#![cfg_attr(not(bootstrap), feature(cfg_eval))]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]"}, {"sha": "7181dc6e710e4e33d74fde17bb2e76d0bc172743", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -67,6 +67,15 @@ pub use core::prelude::v1::derive;\n #[doc(hidden)]\n pub use core::prelude::v1::cfg_accessible;\n \n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"cfg_eval\",\n+    issue = \"82679\",\n+    reason = \"`cfg_eval` is a recently implemented feature\"\n+)]\n+#[doc(hidden)]\n+pub use core::prelude::v1::cfg_eval;\n+\n // The file so far is equivalent to src/libcore/prelude/v1.rs,\n // and below to src/liballoc/prelude.rs.\n // Those files are duplicated rather than using glob imports"}, {"sha": "379491f3126b06e0e978a035e74a87f492284454", "filename": "src/test/ui/proc-macro/cfg-eval-fail.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-fail.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -0,0 +1,9 @@\n+#![feature(cfg_eval)]\n+#![feature(stmt_expr_attributes)]\n+\n+fn main() {\n+    let _ = #[cfg_eval] #[cfg(FALSE)] 0;\n+    //~^ ERROR removing an expression is not supported in this position\n+    //~| ERROR removing an expression is not supported in this position\n+    //~| ERROR removing an expression is not supported in this position\n+}"}, {"sha": "010ac006b0bee3b8e69eb8135c234d9d9d98190e", "filename": "src/test/ui/proc-macro/cfg-eval-fail.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-fail.stderr?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -0,0 +1,20 @@\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-eval-fail.rs:5:25\n+   |\n+LL |     let _ = #[cfg_eval] #[cfg(FALSE)] 0;\n+   |                         ^^^^^^^^^^^^^\n+\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-eval-fail.rs:5:25\n+   |\n+LL |     let _ = #[cfg_eval] #[cfg(FALSE)] 0;\n+   |                         ^^^^^^^^^^^^^\n+\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-eval-fail.rs:5:25\n+   |\n+LL |     let _ = #[cfg_eval] #[cfg(FALSE)] 0;\n+   |                         ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ea397df545265510905871f8812d0cb80fdd88b6", "filename": "src/test/ui/proc-macro/cfg-eval.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval.rs?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+// compile-flags: -Z span-debug\n+// aux-build:test-macros.rs\n+\n+#![feature(cfg_eval)]\n+#![feature(proc_macro_hygiene)]\n+#![feature(stmt_expr_attributes)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[cfg_eval]\n+#[print_attr]\n+struct S1 {\n+    #[cfg(FALSE)]\n+    field_false: u8,\n+    #[cfg(all(/*true*/))]\n+    #[cfg_attr(FALSE, unknown_attr)]\n+    #[cfg_attr(all(/*true*/), allow())]\n+    field_true: u8,\n+}\n+\n+#[cfg_eval]\n+#[cfg(FALSE)]\n+struct S2 {}\n+\n+fn main() {\n+    let _ = #[cfg_eval] #[print_attr](#[cfg(FALSE)] 0, #[cfg(all(/*true*/))] 1);\n+}"}, {"sha": "b98e8961bfea712063544b3bc5a9690b41e75a91", "filename": "src/test/ui/proc-macro/cfg-eval.stdout", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5dad6c25751f577c53bd36d09f033e1c245d0806/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval.stdout?ref=5dad6c25751f577c53bd36d09f033e1c245d0806", "patch": "@@ -0,0 +1,135 @@\n+PRINT-ATTR INPUT (DISPLAY): struct S1 { #[cfg(all())] #[allow()] field_true : u8, }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"S1\",\n+        span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"cfg\",\n+                        span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"all\",\n+                                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [],\n+                                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"allow\",\n+                        span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [],\n+                        span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+            Ident {\n+                ident: \"field_true\",\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+            Ident {\n+                ident: \"u8\",\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+            },\n+        ],\n+        span: $DIR/cfg-eval.rs:17:1: 24:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): (#[cfg(all())] 1,)\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"cfg\",\n+                        span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"all\",\n+                                span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [],\n+                                span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+                    },\n+                ],\n+                span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+            },\n+        ],\n+        span: $DIR/cfg-eval.rs:31:38: 31:80 (#0),\n+    },\n+]"}]}