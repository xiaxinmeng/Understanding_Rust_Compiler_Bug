{"sha": "600820da45daa50870fe711d53938fc6a52edd35", "node_id": "C_kwDOAAsO6NoAKDYwMDgyMGRhNDVkYWE1MDg3MGZlNzExZDUzOTM4ZmM2YTUyZWRkMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T07:08:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T07:08:32Z"}, "message": "Auto merge of #91692 - matthiaskrgr:rollup-u7dvh0n, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #87599 (Implement concat_bytes!)\n - #89999 (Update std::env::temp_dir to use GetTempPath2 on Windows when available.)\n - #90796 (Remove the reg_thumb register class for asm! on ARM)\n - #91042 (Use Vec extend instead of repeated pushes on several places)\n - #91634 (Do not attempt to suggest help for overly malformed struct/function call)\n - #91685 (Install llvm tools to sysroot when assembling local toolchain)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c5664462839bd20b23683f20ded11f594c758cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5664462839bd20b23683f20ded11f594c758cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/600820da45daa50870fe711d53938fc6a52edd35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/600820da45daa50870fe711d53938fc6a52edd35", "html_url": "https://github.com/rust-lang/rust/commit/600820da45daa50870fe711d53938fc6a52edd35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/600820da45daa50870fe711d53938fc6a52edd35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e25077704164071a1ef87cdc90fe7dd1872ba3fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e25077704164071a1ef87cdc90fe7dd1872ba3fa", "html_url": "https://github.com/rust-lang/rust/commit/e25077704164071a1ef87cdc90fe7dd1872ba3fa"}, {"sha": "ab92eca61248f89cd1355690f49e32fcb1708d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab92eca61248f89cd1355690f49e32fcb1708d80", "html_url": "https://github.com/rust-lang/rust/commit/ab92eca61248f89cd1355690f49e32fcb1708d80"}], "stats": {"total": 640, "additions": 542, "deletions": 98}, "files": [{"sha": "a107f5993b546312d74d791f308568a15640ea00", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,167 @@\n+use rustc_ast as ast;\n+use rustc_ast::{ptr::P, tokenstream::TokenStream};\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::Applicability;\n+use rustc_expand::base::{self, DummyResult};\n+\n+/// Emits errors for literal expressions that are invalid inside and outside of an array.\n+fn invalid_type_err(cx: &mut base::ExtCtxt<'_>, expr: &P<rustc_ast::Expr>, is_nested: bool) {\n+    let lit = if let ast::ExprKind::Lit(lit) = &expr.kind {\n+        lit\n+    } else {\n+        unreachable!();\n+    };\n+    match lit.kind {\n+        ast::LitKind::Char(_) => {\n+            let mut err = cx.struct_span_err(expr.span, \"cannot concatenate character literals\");\n+            if let Ok(snippet) = cx.sess.source_map().span_to_snippet(expr.span) {\n+                err.span_suggestion(\n+                    expr.span,\n+                    \"try using a byte character\",\n+                    format!(\"b{}\", snippet),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+            }\n+        }\n+        ast::LitKind::Str(_, _) => {\n+            let mut err = cx.struct_span_err(expr.span, \"cannot concatenate string literals\");\n+            // suggestion would be invalid if we are nested\n+            if !is_nested {\n+                if let Ok(snippet) = cx.sess.source_map().span_to_snippet(expr.span) {\n+                    err.span_suggestion(\n+                        expr.span,\n+                        \"try using a byte string\",\n+                        format!(\"b{}\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            err.emit();\n+        }\n+        ast::LitKind::Float(_, _) => {\n+            cx.span_err(expr.span, \"cannot concatenate float literals\");\n+        }\n+        ast::LitKind::Bool(_) => {\n+            cx.span_err(expr.span, \"cannot concatenate boolean literals\");\n+        }\n+        ast::LitKind::Err(_) => {}\n+        ast::LitKind::Int(_, _) if !is_nested => {\n+            let mut err = cx.struct_span_err(expr.span, \"cannot concatenate numeric literals\");\n+            if let Ok(snippet) = cx.sess.source_map().span_to_snippet(expr.span) {\n+                err.span_suggestion(\n+                    expr.span,\n+                    \"try wrapping the number in an array\",\n+                    format!(\"[{}]\", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n+        }\n+        ast::LitKind::Int(\n+            val,\n+            ast::LitIntType::Unsuffixed | ast::LitIntType::Unsigned(ast::UintTy::U8),\n+        ) => {\n+            assert!(val > u8::MAX.into()); // must be an error\n+            cx.span_err(expr.span, \"numeric literal is out of bounds\");\n+        }\n+        ast::LitKind::Int(_, _) => {\n+            cx.span_err(expr.span, \"numeric literal is not a `u8`\");\n+        }\n+        _ => unreachable!(),\n+    }\n+}\n+\n+pub fn expand_concat_bytes(\n+    cx: &mut base::ExtCtxt<'_>,\n+    sp: rustc_span::Span,\n+    tts: TokenStream,\n+) -> Box<dyn base::MacResult + 'static> {\n+    let es = match base::get_exprs_from_tts(cx, sp, tts) {\n+        Some(e) => e,\n+        None => return DummyResult::any(sp),\n+    };\n+    let mut accumulator = Vec::new();\n+    let mut missing_literals = vec![];\n+    let mut has_errors = false;\n+    for e in es {\n+        match e.kind {\n+            ast::ExprKind::Array(ref exprs) => {\n+                for expr in exprs {\n+                    match expr.kind {\n+                        ast::ExprKind::Array(_) => {\n+                            if !has_errors {\n+                                cx.span_err(expr.span, \"cannot concatenate doubly nested array\");\n+                            }\n+                            has_errors = true;\n+                        }\n+                        ast::ExprKind::Lit(ref lit) => match lit.kind {\n+                            ast::LitKind::Int(\n+                                val,\n+                                ast::LitIntType::Unsuffixed\n+                                | ast::LitIntType::Unsigned(ast::UintTy::U8),\n+                            ) if val <= u8::MAX.into() => {\n+                                accumulator.push(val as u8);\n+                            }\n+\n+                            ast::LitKind::Byte(val) => {\n+                                accumulator.push(val);\n+                            }\n+                            ast::LitKind::ByteStr(_) => {\n+                                if !has_errors {\n+                                    cx.struct_span_err(\n+                                        expr.span,\n+                                        \"cannot concatenate doubly nested array\",\n+                                    )\n+                                    .note(\"byte strings are treated as arrays of bytes\")\n+                                    .help(\"try flattening the array\")\n+                                    .emit();\n+                                }\n+                                has_errors = true;\n+                            }\n+                            _ => {\n+                                if !has_errors {\n+                                    invalid_type_err(cx, expr, true);\n+                                }\n+                                has_errors = true;\n+                            }\n+                        },\n+                        _ => {\n+                            missing_literals.push(expr.span);\n+                        }\n+                    }\n+                }\n+            }\n+            ast::ExprKind::Lit(ref lit) => match lit.kind {\n+                ast::LitKind::Byte(val) => {\n+                    accumulator.push(val);\n+                }\n+                ast::LitKind::ByteStr(ref bytes) => {\n+                    accumulator.extend_from_slice(&bytes);\n+                }\n+                _ => {\n+                    if !has_errors {\n+                        invalid_type_err(cx, &e, false);\n+                    }\n+                    has_errors = true;\n+                }\n+            },\n+            ast::ExprKind::Err => {\n+                has_errors = true;\n+            }\n+            _ => {\n+                missing_literals.push(e.span);\n+            }\n+        }\n+    }\n+    if !missing_literals.is_empty() {\n+        let mut err = cx.struct_span_err(missing_literals.clone(), \"expected a byte literal\");\n+        err.note(\"only byte literals (like `b\\\"foo\\\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\");\n+        err.emit();\n+        return base::MacEager::expr(DummyResult::raw_expr(sp, true));\n+    } else if has_errors {\n+        return base::MacEager::expr(DummyResult::raw_expr(sp, true));\n+    }\n+    let sp = cx.with_def_site_ctxt(sp);\n+    base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(accumulator))))\n+}"}, {"sha": "f5acf9db085171a8fbb8c4ffca05869cc5f34e24", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -27,6 +27,7 @@ mod cfg_accessible;\n mod cfg_eval;\n mod compile_error;\n mod concat;\n+mod concat_bytes;\n mod concat_idents;\n mod derive;\n mod deriving;\n@@ -65,6 +66,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         cfg: cfg::expand_cfg,\n         column: source_util::expand_column,\n         compile_error: compile_error::expand_compile_error,\n+        concat_bytes: concat_bytes::expand_concat_bytes,\n         concat_idents: concat_idents::expand_concat_idents,\n         concat: concat::expand_concat,\n         env: env::expand_env,"}, {"sha": "10edcf36955da78eceb762ad518b01924b1ef20e", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -568,7 +568,6 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg) => unimplemented!(),\n             InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => unimplemented!(),\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => unimplemented!(),\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8) => unimplemented!(),\n@@ -628,8 +627,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             unimplemented!()\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => cx.type_i32(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)=> cx.type_i32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => cx.type_f32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n@@ -737,8 +735,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         | InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16) => {\n             unimplemented!()\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => unimplemented!(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)  => unimplemented!(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => unimplemented!(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)"}, {"sha": "f3c3a1749081126d1d0bb64c180c7bb6b5d181f1", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -632,7 +632,6 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n                 unreachable!(\"clobber-only\")\n             }\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => \"r\",\n-            InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => \"l\",\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg_low16)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low8) => \"t\",\n@@ -703,8 +702,7 @@ fn modifier_to_llvm(\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n             unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => None,\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => None,\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n@@ -785,8 +783,7 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::preg) => {\n             unreachable!(\"clobber-only\")\n         }\n-        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg)\n-        | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg_thumb) => cx.type_i32(),\n+        InlineAsmRegClass::Arm(ArmInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg)\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg_low16) => cx.type_f32(),\n         InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)"}, {"sha": "ba72e3cfafce2e01bdc607ee1978f4a4c69b6218", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -35,6 +35,7 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // since it should be enabled per-function using #[instruction_set], not\n     // #[target_feature].\n     (\"thumb-mode\", Some(sym::arm_target_feature)),\n+    (\"thumb2\", Some(sym::arm_target_feature)),\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &["}, {"sha": "0f8c0e1b8cff85c36fabc3678c1c4c90bcf66273", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -1100,30 +1100,37 @@ impl<'a> Parser<'a> {\n                 snapshot.bump(); // `(`\n                 match snapshot.parse_struct_fields(path, false, token::Paren) {\n                     Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {\n-                        // We have are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n+                        // We are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n                         // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.\n                         *self = snapshot;\n                         let close_paren = self.prev_token.span;\n                         let span = lo.to(self.prev_token.span);\n-                        err.cancel();\n-                        self.struct_span_err(\n-                            span,\n-                            \"invalid `struct` delimiters or `fn` call arguments\",\n-                        )\n-                        .multipart_suggestion(\n-                            &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n-                            vec![(open_paren, \" { \".to_string()), (close_paren, \" }\".to_string())],\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .multipart_suggestion(\n-                            &format!(\"if `{}` is a function, use the arguments directly\", name),\n-                            fields\n-                                .into_iter()\n-                                .map(|field| (field.span.until(field.expr.span), String::new()))\n-                                .collect(),\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n+                        if !fields.is_empty() {\n+                            err.cancel();\n+                            let mut err = self.struct_span_err(\n+                                span,\n+                                \"invalid `struct` delimiters or `fn` call arguments\",\n+                            );\n+                            err.multipart_suggestion(\n+                                &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n+                                vec![\n+                                    (open_paren, \" { \".to_string()),\n+                                    (close_paren, \" }\".to_string()),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            err.multipart_suggestion(\n+                                &format!(\"if `{}` is a function, use the arguments directly\", name),\n+                                fields\n+                                    .into_iter()\n+                                    .map(|field| (field.span.until(field.expr.span), String::new()))\n+                                    .collect(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            err.emit();\n+                        } else {\n+                            err.emit();\n+                        }\n                         return Some(self.mk_expr_err(span));\n                     }\n                     Ok(_) => {}"}, {"sha": "eb6063d76125b1e7b340803f97efce2bc1b2f409", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -439,6 +439,7 @@ symbols! {\n         compiler_builtins,\n         compiler_fence,\n         concat,\n+        concat_bytes,\n         concat_idents,\n         conservative_impl_trait,\n         console,\n@@ -1058,7 +1059,6 @@ symbols! {\n         reg_nonzero,\n         reg_pair,\n         reg_ptr,\n-        reg_thumb,\n         reg_upper,\n         register_attr,\n         register_tool,"}, {"sha": "4eeb7fcc71bceb6cf80a43d429ec5b220ee16dd7", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -6,7 +6,6 @@ use std::fmt;\n def_reg_class! {\n     Arm ArmInlineAsmRegClass {\n         reg,\n-        reg_thumb,\n         sreg,\n         sreg_low16,\n         dreg,\n@@ -47,7 +46,7 @@ impl ArmInlineAsmRegClass {\n         _arch: InlineAsmArch,\n     ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n         match self {\n-            Self::reg | Self::reg_thumb => types! { _: I8, I16, I32, F32; },\n+            Self::reg => types! { _: I8, I16, I32, F32; },\n             Self::sreg | Self::sreg_low16 => types! { \"vfp2\": I32, F32; },\n             Self::dreg | Self::dreg_low16 | Self::dreg_low8 => types! {\n                 \"vfp2\": I64, F64, VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2);\n@@ -88,20 +87,32 @@ fn frame_pointer_r7(\n     }\n }\n \n+fn not_thumb1(\n+    _arch: InlineAsmArch,\n+    mut has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n+) -> Result<(), &'static str> {\n+    if has_feature(\"thumb-mode\") && !has_feature(\"thumb2\") {\n+        Err(\"high registers (r8+) cannot be used in Thumb-1 code\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     Arm ArmInlineAsmReg ArmInlineAsmRegClass {\n-        r0: reg, reg_thumb = [\"r0\", \"a1\"],\n-        r1: reg, reg_thumb = [\"r1\", \"a2\"],\n-        r2: reg, reg_thumb = [\"r2\", \"a3\"],\n-        r3: reg, reg_thumb = [\"r3\", \"a4\"],\n-        r4: reg, reg_thumb = [\"r4\", \"v1\"],\n-        r5: reg, reg_thumb = [\"r5\", \"v2\"],\n-        r7: reg, reg_thumb = [\"r7\", \"v4\"] % frame_pointer_r7,\n-        r8: reg = [\"r8\", \"v5\"],\n-        r10: reg = [\"r10\", \"sl\"],\n+        r0: reg = [\"r0\", \"a1\"],\n+        r1: reg = [\"r1\", \"a2\"],\n+        r2: reg = [\"r2\", \"a3\"],\n+        r3: reg = [\"r3\", \"a4\"],\n+        r4: reg = [\"r4\", \"v1\"],\n+        r5: reg = [\"r5\", \"v2\"],\n+        r7: reg = [\"r7\", \"v4\"] % frame_pointer_r7,\n+        r8: reg = [\"r8\", \"v5\"] % not_thumb1,\n+        r10: reg = [\"r10\", \"sl\"] % not_thumb1,\n         r11: reg = [\"r11\", \"fp\"] % frame_pointer_r11,\n-        r12: reg = [\"r12\", \"ip\"],\n-        r14: reg = [\"r14\", \"lr\"],\n+        r12: reg = [\"r12\", \"ip\"] % not_thumb1,\n+        r14: reg = [\"r14\", \"lr\"] % not_thumb1,\n         s0: sreg, sreg_low16 = [\"s0\"],\n         s1: sreg, sreg_low16 = [\"s1\"],\n         s2: sreg, sreg_low16 = [\"s2\"],"}, {"sha": "b18508186a618cbc57d0388bfd9ae2d2bc901f26", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -967,6 +967,34 @@ pub(crate) mod builtin {\n         ($($e:ident),+ $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n+    /// Concatenates literals into a byte slice.\n+    ///\n+    /// This macro takes any number of comma-separated literals, and concatenates them all into\n+    /// one, yielding an expression of type `&[u8, _]`, which represents all of the literals\n+    /// concatenated left-to-right. The literals passed can be any combination of:\n+    ///\n+    /// - byte literals (`b'r'`)\n+    /// - byte strings (`b\"Rust\"`)\n+    /// - arrays of bytes/numbers (`[b'A', 66, b'C']`)\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(concat_bytes)]\n+    ///\n+    /// # fn main() {\n+    /// let s: &[u8; 6] = concat_bytes!(b'A', b\"BC\", [68, b'E', 70]);\n+    /// assert_eq!(s, b\"ABCDEF\");\n+    /// # }\n+    /// ```\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"concat_bytes\", issue = \"87555\")]\n+    #[rustc_builtin_macro]\n+    #[macro_export]\n+    macro_rules! concat_bytes {\n+        ($($e:literal),+ $(,)?) => {{ /* compiler built-in */ }};\n+    }\n+\n     /// Concatenates literals into a static string slice.\n     ///\n     /// This macro takes any number of comma-separated literals, yielding an"}, {"sha": "8705eb394688a61a4445da62ae6554b9c6fabec6", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -60,6 +60,15 @@ pub use crate::{\n     option_env, stringify, trace_macros,\n };\n \n+#[unstable(\n+    feature = \"concat_bytes\",\n+    issue = \"87555\",\n+    reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n+)]\n+#[cfg(not(bootstrap))]\n+#[doc(no_inline)]\n+pub use crate::concat_bytes;\n+\n #[unstable(\n     feature = \"asm\",\n     issue = \"72016\","}, {"sha": "c06928647d3897761ee40c2a5b941f60576b4d5d", "filename": "library/std/src/env.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -583,28 +583,25 @@ pub fn home_dir() -> Option<PathBuf> {\n /// may result in \"insecure temporary file\" security vulnerabilities. Consider\n /// using a crate that securely creates temporary files or directories.\n ///\n-/// # Unix\n+/// # Platform-specific behavior\n ///\n-/// Returns the value of the `TMPDIR` environment variable if it is\n+/// On Unix, returns the value of the `TMPDIR` environment variable if it is\n /// set, otherwise for non-Android it returns `/tmp`. If Android, since there\n /// is no global temporary folder (it is usually allocated per-app), it returns\n /// `/data/local/tmp`.\n+/// On Windows, the behavior is equivalent to that of [`GetTempPath2`][GetTempPath2] /\n+/// [`GetTempPath`][GetTempPath], which this function uses internally.\n+/// Note that, this [may change in the future][changes].\n ///\n-/// # Windows\n-///\n-/// Returns the value of, in order, the `TMP`, `TEMP`,\n-/// `USERPROFILE` environment variable if any are set and not the empty\n-/// string. Otherwise, `temp_dir` returns the path of the Windows directory.\n-/// This behavior is identical to that of [`GetTempPath`][msdn], which this\n-/// function uses internally.\n-///\n-/// [msdn]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha\n+/// [changes]: io#platform-specific-behavior\n+/// [GetTempPath2]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppath2a\n+/// [GetTempPath]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha\n ///\n /// ```no_run\n /// use std::env;\n ///\n /// fn main() {\n-///     let mut dir = env::temp_dir();\n+///     let dir = env::temp_dir();\n ///     println!(\"Temporary directory: {}\", dir.display());\n /// }\n /// ```"}, {"sha": "367f072ffc7f82d7daee16f07804519298465daa", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -250,6 +250,7 @@\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n+#![cfg_attr(not(bootstrap), feature(concat_bytes))]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_floating_point_arithmetic)]\n@@ -576,6 +577,14 @@ pub use core::{\n     log_syntax, module_path, option_env, stringify, trace_macros,\n };\n \n+#[unstable(\n+    feature = \"concat_bytes\",\n+    issue = \"87555\",\n+    reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n+)]\n+#[cfg(not(bootstrap))]\n+pub use core::concat_bytes;\n+\n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n pub use core::primitive;\n "}, {"sha": "9b23aa37e3195761ef3e5fe555c186613a23de5f", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -45,6 +45,15 @@ pub use core::prelude::v1::{\n     PartialOrd,\n };\n \n+#[unstable(\n+    feature = \"concat_bytes\",\n+    issue = \"87555\",\n+    reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n+)]\n+#[cfg(not(bootstrap))]\n+#[doc(no_inline)]\n+pub use core::prelude::v1::concat_bytes;\n+\n #[unstable(\n     feature = \"asm\",\n     issue = \"72016\","}, {"sha": "b87b6b5d88e4a6dd10dd509c5755137c21f15837", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -1110,6 +1110,12 @@ compat_fn! {\n                                           -> () {\n         GetSystemTimeAsFileTime(lpSystemTimeAsFileTime)\n     }\n+\n+    // >= Win11 / Server 2022\n+    // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppath2a\n+    pub fn GetTempPath2W(nBufferLength: DWORD, lpBuffer: LPCWSTR) -> DWORD {\n+        GetTempPathW(nBufferLength, lpBuffer)\n+    }\n }\n \n compat_fn! {"}, {"sha": "5f8556c3bc37618a1fef44596aaa0d6dc7f6496c", "filename": "library/std/src/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -275,7 +275,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n }\n \n pub fn temp_dir() -> PathBuf {\n-    super::fill_utf16_buf(|buf, sz| unsafe { c::GetTempPathW(sz, buf) }, super::os2path).unwrap()\n+    super::fill_utf16_buf(|buf, sz| unsafe { c::GetTempPath2W(sz, buf) }, super::os2path).unwrap()\n }\n \n #[cfg(not(target_vendor = \"uwp\"))]"}, {"sha": "186b5e92d33e35dfa5c31fe79798e7d565b2b99d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -28,6 +28,7 @@ use crate::dist;\n use crate::native;\n use crate::tool::SourceType;\n use crate::util::{exe, is_debug_info, is_dylib, symlink_dir};\n+use crate::LLVM_TOOLS;\n use crate::{Compiler, DependencyType, GitRepo, Mode};\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -1164,6 +1165,16 @@ impl Step for Assemble {\n                 let llvm_bin_dir = output(Command::new(llvm_config_bin).arg(\"--bindir\"));\n                 let llvm_bin_dir = Path::new(llvm_bin_dir.trim());\n                 builder.copy(&llvm_bin_dir.join(&src_exe), &libdir_bin.join(&dst_exe));\n+\n+                // Since we've already built the LLVM tools, install them to the sysroot.\n+                // This is the equivalent of installing the `llvm-tools-preview` component via\n+                // rustup, and lets developers use a locally built toolchain to\n+                // build projects that expect llvm tools to be present in the sysroot\n+                // (e.g. the `bootimage` crate).\n+                for tool in LLVM_TOOLS {\n+                    let tool_exe = exe(tool, target_compiler.host);\n+                    builder.copy(&llvm_bin_dir.join(&tool_exe), &libdir_bin.join(&tool_exe));\n+                }\n             }\n         }\n "}, {"sha": "59987cccde67385bb265568f1e3003908140b6b5", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -564,12 +564,8 @@ Here is the list of currently supported register classes:\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n | AArch64 | `preg` | `p[0-15]`, `ffr` | Only clobbers |\n-| ARM (ARM) | `reg` | `r[0-12]`, `r14` | `r` |\n-| ARM (Thumb2) | `reg` | `r[0-12]`, `r14` | `r` |\n+| ARM (ARM/Thumb2) | `reg` | `r[0-12]`, `r14` | `r` |\n | ARM (Thumb1) | `reg` | `r[0-7]` | `r` |\n-| ARM (ARM) | `reg_thumb` | `r[0-r12]`, `r14` | `l` |\n-| ARM (Thumb2) | `reg_thumb` | `r[0-7]` | `l` |\n-| ARM (Thumb1) | `reg_thumb` | `r[0-7]` | `l` |\n | ARM | `sreg` | `s[0-31]` | `t` |\n | ARM | `sreg_low16` | `s[0-15]` | `x` |\n | ARM | `dreg` | `d[0-31]` | `w` |"}, {"sha": "88ffeaecfecb6e86f6e5ae921db213d72b38993b", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -59,12 +59,6 @@ macro_rules! check {\n // CHECK: @NO_APP\n check!(reg \"\" reg i32 \"mov\");\n \n-// CHECK-LABEL: reg_thumb:\n-// CHECK: @APP\n-// CHECK: mov r0, r0\n-// CHECK: @NO_APP\n-check!(reg_thumb \"\" reg_thumb i32 \"mov\");\n-\n // CHECK-LABEL: sreg:\n // CHECK: @APP\n // CHECK: vmov.f32 s0, s0"}, {"sha": "5ac1af6afd67d33fe02ee7e504057a653c50c27a", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -163,36 +163,6 @@ check!(reg_f32 f32 reg \"mov\");\n // CHECK: @NO_APP\n check!(reg_ptr ptr reg \"mov\");\n \n-// CHECK-LABEL: reg_thumb_i8:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_i8 i8 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_i16:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_i16 i16 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_i32:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_i32 i32 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_f32:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_f32 f32 reg_thumb \"mov\");\n-\n-// CHECK-LABEL: reg_thumb_ptr:\n-// CHECK: @APP\n-// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n-// CHECK: @NO_APP\n-check!(reg_thumb_ptr ptr reg_thumb \"mov\");\n-\n // CHECK-LABEL: sreg_i32:\n // CHECK: @APP\n // CHECK: vmov.f32 s{{[0-9]+}}, s{{[0-9]+}}"}, {"sha": "07d63cb11e08565c7738695bcb27d3121ecc85c5", "filename": "src/test/ui/feature-gates/feature-gate-concat_bytes.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a = concat_bytes!(b'A', b\"BC\"); //~ ERROR use of unstable library feature 'concat_bytes'\n+    assert_eq!(a, &[65, 66, 67]);\n+}"}, {"sha": "4b3ee4c19cecd223ce4d3d4e2bb3b76a0ad02b6d", "filename": "src/test/ui/feature-gates/feature-gate-concat_bytes.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_bytes.stderr?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'concat_bytes'\n+  --> $DIR/feature-gate-concat_bytes.rs:2:13\n+   |\n+LL |     let a = concat_bytes!(b'A', b\"BC\");\n+   |             ^^^^^^^^^^^^\n+   |\n+   = note: see issue #87555 <https://github.com/rust-lang/rust/issues/87555> for more information\n+   = help: add `#![feature(concat_bytes)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9b4a9c2cf811d5393423b65a3e4e20514647ef3e", "filename": "src/test/ui/macros/concat-bytes-error.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,42 @@\n+#![feature(concat_bytes)]\n+\n+fn main() {\n+    concat_bytes!(pie); //~ ERROR expected a byte literal\n+    concat_bytes!(pie, pie); //~ ERROR expected a byte literal\n+    concat_bytes!(\"tnrsi\", \"tnri\"); //~ ERROR cannot concatenate string literals\n+    concat_bytes!(2.8); //~ ERROR cannot concatenate float literals\n+    concat_bytes!(300); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!('a'); //~ ERROR cannot concatenate character literals\n+    concat_bytes!(true, false); //~ ERROR cannot concatenate boolean literals\n+    concat_bytes!(42, b\"va\", b'l'); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!(42, b\"va\", b'l', [1, 2]); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!([\n+        \"hi\", //~ ERROR cannot concatenate string literals\n+    ]);\n+    concat_bytes!([\n+        'a', //~ ERROR cannot concatenate character literals\n+    ]);\n+    concat_bytes!([\n+        true, //~ ERROR cannot concatenate boolean literals\n+    ]);\n+    concat_bytes!([\n+        false, //~ ERROR cannot concatenate boolean literals\n+    ]);\n+    concat_bytes!([\n+        2.6, //~ ERROR cannot concatenate float literals\n+    ]);\n+    concat_bytes!([\n+        265, //~ ERROR numeric literal is out of bounds\n+    ]);\n+    concat_bytes!([\n+        -33, //~ ERROR expected a byte literal\n+    ]);\n+    concat_bytes!([\n+        b\"hi!\", //~ ERROR cannot concatenate doubly nested array\n+    ]);\n+    concat_bytes!([\n+        [5, 6, 7], //~ ERROR cannot concatenate doubly nested array\n+    ]);\n+    concat_bytes!(5u16); //~ ERROR cannot concatenate numeric literals\n+    concat_bytes!([5u16]); //~ ERROR numeric literal is not a `u8`\n+}"}, {"sha": "1fc2d5c4843a027f53b4543be64a40c66261c8b3", "filename": "src/test/ui/macros/concat-bytes-error.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes-error.stderr?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,131 @@\n+error: expected a byte literal\n+  --> $DIR/concat-bytes-error.rs:4:19\n+   |\n+LL |     concat_bytes!(pie);\n+   |                   ^^^\n+   |\n+   = note: only byte literals (like `b\"foo\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\n+\n+error: expected a byte literal\n+  --> $DIR/concat-bytes-error.rs:5:19\n+   |\n+LL |     concat_bytes!(pie, pie);\n+   |                   ^^^  ^^^\n+   |\n+   = note: only byte literals (like `b\"foo\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\n+\n+error: cannot concatenate string literals\n+  --> $DIR/concat-bytes-error.rs:6:19\n+   |\n+LL |     concat_bytes!(\"tnrsi\", \"tnri\");\n+   |                   ^^^^^^^ help: try using a byte string: `b\"tnrsi\"`\n+\n+error: cannot concatenate float literals\n+  --> $DIR/concat-bytes-error.rs:7:19\n+   |\n+LL |     concat_bytes!(2.8);\n+   |                   ^^^\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:8:19\n+   |\n+LL |     concat_bytes!(300);\n+   |                   ^^^ help: try wrapping the number in an array: `[300]`\n+\n+error: cannot concatenate character literals\n+  --> $DIR/concat-bytes-error.rs:9:19\n+   |\n+LL |     concat_bytes!('a');\n+   |                   ^^^ help: try using a byte character: `b'a'`\n+\n+error: cannot concatenate boolean literals\n+  --> $DIR/concat-bytes-error.rs:10:19\n+   |\n+LL |     concat_bytes!(true, false);\n+   |                   ^^^^\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:11:19\n+   |\n+LL |     concat_bytes!(42, b\"va\", b'l');\n+   |                   ^^ help: try wrapping the number in an array: `[42]`\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:12:19\n+   |\n+LL |     concat_bytes!(42, b\"va\", b'l', [1, 2]);\n+   |                   ^^ help: try wrapping the number in an array: `[42]`\n+\n+error: cannot concatenate string literals\n+  --> $DIR/concat-bytes-error.rs:14:9\n+   |\n+LL |         \"hi\",\n+   |         ^^^^\n+\n+error: cannot concatenate character literals\n+  --> $DIR/concat-bytes-error.rs:17:9\n+   |\n+LL |         'a',\n+   |         ^^^ help: try using a byte character: `b'a'`\n+\n+error: cannot concatenate boolean literals\n+  --> $DIR/concat-bytes-error.rs:20:9\n+   |\n+LL |         true,\n+   |         ^^^^\n+\n+error: cannot concatenate boolean literals\n+  --> $DIR/concat-bytes-error.rs:23:9\n+   |\n+LL |         false,\n+   |         ^^^^^\n+\n+error: cannot concatenate float literals\n+  --> $DIR/concat-bytes-error.rs:26:9\n+   |\n+LL |         2.6,\n+   |         ^^^\n+\n+error: numeric literal is out of bounds\n+  --> $DIR/concat-bytes-error.rs:29:9\n+   |\n+LL |         265,\n+   |         ^^^\n+\n+error: expected a byte literal\n+  --> $DIR/concat-bytes-error.rs:32:9\n+   |\n+LL |         -33,\n+   |         ^^^\n+   |\n+   = note: only byte literals (like `b\"foo\"`, `b's'`, and `[3, 4, 5]`) can be passed to `concat_bytes!()`\n+\n+error: cannot concatenate doubly nested array\n+  --> $DIR/concat-bytes-error.rs:35:9\n+   |\n+LL |         b\"hi!\",\n+   |         ^^^^^^\n+   |\n+   = note: byte strings are treated as arrays of bytes\n+   = help: try flattening the array\n+\n+error: cannot concatenate doubly nested array\n+  --> $DIR/concat-bytes-error.rs:38:9\n+   |\n+LL |         [5, 6, 7],\n+   |         ^^^^^^^^^\n+\n+error: cannot concatenate numeric literals\n+  --> $DIR/concat-bytes-error.rs:40:19\n+   |\n+LL |     concat_bytes!(5u16);\n+   |                   ^^^^ help: try wrapping the number in an array: `[5u16]`\n+\n+error: numeric literal is not a `u8`\n+  --> $DIR/concat-bytes-error.rs:41:20\n+   |\n+LL |     concat_bytes!([5u16]);\n+   |                    ^^^^\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "5415cf3fe2235b260012a377725596898bf09b77", "filename": "src/test/ui/macros/concat-bytes.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fconcat-bytes.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,7 @@\n+// run-pass\n+#![feature(concat_bytes)]\n+\n+fn main() {\n+    assert_eq!(concat_bytes!(), &[]);\n+    assert_eq!(concat_bytes!(b'A', b\"BC\", [68, b'E', 70]), b\"ABCDEF\");\n+}"}, {"sha": "3e3c411c478ab27bf8134e9472042de04c5512e5", "filename": "src/test/ui/parser/issues/issue-91461.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    a(_:b:,)\n+    //~^ ERROR: expected identifier, found reserved identifier `_`\n+    //~| ERROR: expected type, found `,`\n+    //~| ERROR: expected type, found `,`\n+}"}, {"sha": "94fcf1721d8c13222af0318f84adb55b63df076d", "filename": "src/test/ui/parser/issues/issue-91461.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600820da45daa50870fe711d53938fc6a52edd35/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr?ref=600820da45daa50870fe711d53938fc6a52edd35", "patch": "@@ -0,0 +1,31 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-91461.rs:2:7\n+   |\n+LL |     a(_:b:,)\n+   |       ^ expected identifier, found reserved identifier\n+\n+error: expected type, found `,`\n+  --> $DIR/issue-91461.rs:2:11\n+   |\n+LL |     a(_:b:,)\n+   |     -    -^ expected type\n+   |     |    |\n+   |     |    tried to parse a type due to this type ascription\n+   |     while parsing this struct\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+\n+error: expected type, found `,`\n+  --> $DIR/issue-91461.rs:2:11\n+   |\n+LL |     a(_:b:,)\n+   |          -^ expected type\n+   |          |\n+   |          tried to parse a type due to this type ascription\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+\n+error: aborting due to 3 previous errors\n+"}]}