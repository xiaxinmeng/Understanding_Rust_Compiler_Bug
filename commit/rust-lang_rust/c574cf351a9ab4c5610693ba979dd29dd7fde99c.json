{"sha": "c574cf351a9ab4c5610693ba979dd29dd7fde99c", "node_id": "C_kwDOAAsO6NoAKGM1NzRjZjM1MWE5YWI0YzU2MTA2OTNiYTk3OWRkMjlkZDdmZGU5OWM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-06T13:24:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-06T13:24:43Z"}, "message": "Merge #11214\n\n11214: feat: poke user when supplying faulty configurations r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "04b429715e0fe9936f81fbc31296b3c9843f394e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b429715e0fe9936f81fbc31296b3c9843f394e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c574cf351a9ab4c5610693ba979dd29dd7fde99c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1u2bCRBK7hj4Ov3rIwAAPz0IAD7h/UBhfcm5VCB5+mqa6sVW\nqlmltyKmCPF7KCjZSX39ngQyqi/Pd9vb2CWMaNMdjaMoa3I0snuStOUEY94DD8FO\n2gR1s6c4yU2j8jewBIXeSz4T5WeMsS4FC1LVRJd6zyPCVpm2DWbsT7hRG6sDST7D\nrHu6akwxryl0vDXpYFXJRYaeudiOjoQK09ml3HKerM0dbkwZHlPI0eZMMAFSwfe6\n3Hs2sNSJBFfSlnSN1rKI6bYeX32Dur5XnDrj12lZOYtvJ5DVJwBFW3bjgPtYjIBt\n8+tJ3wmbpZGEkIQT8e67DlEFmsUd36WjzdSVT45+VdY93WTsKGWehBGQmgaN7O4=\n=l03G\n-----END PGP SIGNATURE-----\n", "payload": "tree 04b429715e0fe9936f81fbc31296b3c9843f394e\nparent 8887d2016f2e87332e4de216aaf0b5d125e0fe11\nparent dd20a6f70145da0adb660a3ba8881b97521ae3c0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641475483 +0000\ncommitter GitHub <noreply@github.com> 1641475483 +0000\n\nMerge #11214\n\n11214: feat: poke user when supplying faulty configurations r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c574cf351a9ab4c5610693ba979dd29dd7fde99c", "html_url": "https://github.com/rust-lang/rust/commit/c574cf351a9ab4c5610693ba979dd29dd7fde99c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c574cf351a9ab4c5610693ba979dd29dd7fde99c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8887d2016f2e87332e4de216aaf0b5d125e0fe11", "url": "https://api.github.com/repos/rust-lang/rust/commits/8887d2016f2e87332e4de216aaf0b5d125e0fe11", "html_url": "https://github.com/rust-lang/rust/commit/8887d2016f2e87332e4de216aaf0b5d125e0fe11"}, {"sha": "dd20a6f70145da0adb660a3ba8881b97521ae3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd20a6f70145da0adb660a3ba8881b97521ae3c0", "html_url": "https://github.com/rust-lang/rust/commit/dd20a6f70145da0adb660a3ba8881b97521ae3c0"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "9a2e43559157b69c96ebd02b728497bf5396db73", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=c574cf351a9ab4c5610693ba979dd29dd7fde99c", "patch": "@@ -150,7 +150,7 @@ fn run_server() -> Result<()> {\n \n     let mut config = Config::new(root_path, initialize_params.capabilities);\n     if let Some(json) = initialize_params.initialization_options {\n-        config.update(json);\n+        let _ = config.update(json);\n     }\n \n     let server_capabilities = rust_analyzer::server_capabilities(&config);"}, {"sha": "de0aba0caa5089c50c30fbc2a2897cc36840ca67", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c574cf351a9ab4c5610693ba979dd29dd7fde99c", "patch": "@@ -341,7 +341,7 @@ config_data! {\n \n impl Default for ConfigData {\n     fn default() -> Self {\n-        ConfigData::from_json(serde_json::Value::Null)\n+        ConfigData::from_json(serde_json::Value::Null, &mut Vec::new())\n     }\n }\n \n@@ -492,16 +492,21 @@ impl Config {\n             snippets: Default::default(),\n         }\n     }\n-    pub fn update(&mut self, mut json: serde_json::Value) {\n+    pub fn update(\n+        &mut self,\n+        mut json: serde_json::Value,\n+    ) -> Result<(), Vec<(String, serde_json::Error)>> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n-            return;\n+            return Ok(());\n         }\n-        self.detached_files = get_field::<Vec<PathBuf>>(&mut json, \"detachedFiles\", None, \"[]\")\n-            .into_iter()\n-            .map(AbsPathBuf::assert)\n-            .collect();\n-        self.data = ConfigData::from_json(json);\n+        let mut errors = Vec::new();\n+        self.detached_files =\n+            get_field::<Vec<PathBuf>>(&mut json, &mut errors, \"detachedFiles\", None, \"[]\")\n+                .into_iter()\n+                .map(AbsPathBuf::assert)\n+                .collect();\n+        self.data = ConfigData::from_json(json, &mut errors);\n         self.snippets.clear();\n         for (name, def) in self.data.completion_snippets.iter() {\n             if def.prefix.is_empty() && def.postfix.is_empty() {\n@@ -524,6 +529,11 @@ impl Config {\n                 None => tracing::info!(\"Invalid snippet {}\", name),\n             }\n         }\n+        if errors.is_empty() {\n+            Ok(())\n+        } else {\n+            Err(errors)\n+        }\n     }\n \n     pub fn json_schema() -> serde_json::Value {\n@@ -1116,10 +1126,11 @@ macro_rules! _config_data {\n         #[derive(Debug, Clone)]\n         struct $name { $($field: $ty,)* }\n         impl $name {\n-            fn from_json(mut json: serde_json::Value) -> $name {\n+            fn from_json(mut json: serde_json::Value, error_sink: &mut Vec<(String, serde_json::Error)>) -> $name {\n                 $name {$(\n                     $field: get_field(\n                         &mut json,\n+                        error_sink,\n                         stringify!($field),\n                         None$(.or(Some(stringify!($alias))))*,\n                         $default,\n@@ -1156,6 +1167,7 @@ use _config_data as config_data;\n \n fn get_field<T: DeserializeOwned>(\n     json: &mut serde_json::Value,\n+    error_sink: &mut Vec<(String, serde_json::Error)>,\n     field: &'static str,\n     alias: Option<&'static str>,\n     default: &str,\n@@ -1174,6 +1186,7 @@ fn get_field<T: DeserializeOwned>(\n                 Ok(it) => Some(it),\n                 Err(e) => {\n                     tracing::warn!(\"Failed to deserialize config field at {}: {:?}\", pointer, e);\n+                    error_sink.push((pointer, e));\n                     None\n                 }\n             })"}, {"sha": "af987230defdfd5ae2efecefe296ee755429ecf5", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=c574cf351a9ab4c5610693ba979dd29dd7fde99c", "patch": "@@ -9,6 +9,7 @@ use std::{\n use always_assert::always;\n use crossbeam_channel::{select, Receiver};\n use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n+use itertools::Itertools;\n use lsp_server::{Connection, Notification, Request};\n use lsp_types::notification::Notification as _;\n use vfs::{ChangeKind, FileId};\n@@ -731,7 +732,17 @@ impl GlobalState {\n                                     // Note that json can be null according to the spec if the client can't\n                                     // provide a configuration. This is handled in Config::update below.\n                                     let mut config = Config::clone(&*this.config);\n-                                    config.update(json.take());\n+                                    if let Err(errors) = config.update(json.take()) {\n+                                        let errors = errors\n+                                            .iter()\n+                                            .format_with(\"\\n\", |(key, e),f| {\n+                                                f(key)?;\n+                                                f(&\": \")?;\n+                                                f(e)\n+                                            });\n+                                        let msg= format!(\"Failed to deserialize config key(s):\\n{}\", errors);\n+                                        this.show_message(lsp_types::MessageType::WARNING, msg);\n+                                    }\n                                     this.update_configuration(config);\n                                 }\n                             }"}, {"sha": "78aa41191591eb97348a7dd79d6a2970b86eb3ad", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c574cf351a9ab4c5610693ba979dd29dd7fde99c/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=c574cf351a9ab4c5610693ba979dd29dd7fde99c", "patch": "@@ -137,7 +137,7 @@ impl<'a> Project<'a> {\n             },\n         );\n         config.discovered_projects = Some(discovered_projects);\n-        config.update(self.config);\n+        let _ = config.update(self.config);\n \n         Server::new(tmp_dir, config)\n     }"}]}