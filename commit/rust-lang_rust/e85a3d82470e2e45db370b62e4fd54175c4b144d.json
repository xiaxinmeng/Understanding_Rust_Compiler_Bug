{"sha": "e85a3d82470e2e45db370b62e4fd54175c4b144d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NWEzZDgyNDcwZTJlNDVkYjM3MGI2MmU0ZmQ1NDE3NWM0YjE0NGQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-25T22:15:49Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-25T22:52:41Z"}, "message": "Demode Num trait and impls", "tree": {"sha": "078c2e710c3a240bc63a5d1bd5192a6cd549652c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078c2e710c3a240bc63a5d1bd5192a6cd549652c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e85a3d82470e2e45db370b62e4fd54175c4b144d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e85a3d82470e2e45db370b62e4fd54175c4b144d", "html_url": "https://github.com/rust-lang/rust/commit/e85a3d82470e2e45db370b62e4fd54175c4b144d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e85a3d82470e2e45db370b62e4fd54175c4b144d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d915678926f4b1c64c5916b01f526844f5521b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d915678926f4b1c64c5916b01f526844f5521b9", "html_url": "https://github.com/rust-lang/rust/commit/2d915678926f4b1c64c5916b01f526844f5521b9"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "f5e4d629726d3c73b67ddb3cdfa224585c148374", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -158,11 +158,11 @@ pure fn logarithm(n: f32, b: f32) -> f32 {\n }\n \n impl f32: num::Num {\n-    pure fn add(&&other: f32)    -> f32 { return self + other; }\n-    pure fn sub(&&other: f32)    -> f32 { return self - other; }\n-    pure fn mul(&&other: f32)    -> f32 { return self * other; }\n-    pure fn div(&&other: f32)    -> f32 { return self / other; }\n-    pure fn modulo(&&other: f32) -> f32 { return self % other; }\n+    pure fn add(other: &f32)    -> f32 { return self + *other; }\n+    pure fn sub(other: &f32)    -> f32 { return self - *other; }\n+    pure fn mul(other: &f32)    -> f32 { return self * *other; }\n+    pure fn div(other: &f32)    -> f32 { return self / *other; }\n+    pure fn modulo(other: &f32) -> f32 { return self % *other; }\n     pure fn neg()                -> f32 { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }"}, {"sha": "56f9cd85db955f050593cad6648b1c245fdbd0be", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -185,11 +185,11 @@ pure fn logarithm(n: f64, b: f64) -> f64 {\n }\n \n impl f64: num::Num {\n-    pure fn add(&&other: f64)    -> f64 { return self + other; }\n-    pure fn sub(&&other: f64)    -> f64 { return self - other; }\n-    pure fn mul(&&other: f64)    -> f64 { return self * other; }\n-    pure fn div(&&other: f64)    -> f64 { return self / other; }\n-    pure fn modulo(&&other: f64) -> f64 { return self % other; }\n+    pure fn add(other: &f64)    -> f64 { return self + *other; }\n+    pure fn sub(other: &f64)    -> f64 { return self - *other; }\n+    pure fn mul(other: &f64)    -> f64 { return self * *other; }\n+    pure fn div(other: &f64)    -> f64 { return self / *other; }\n+    pure fn modulo(other: &f64) -> f64 { return self % *other; }\n     pure fn neg()                -> f64 { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }"}, {"sha": "eaa51814056335992e293dd741d8d572b7731749", "filename": "src/libcore/float.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -139,7 +139,7 @@ fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n \n     // while we still need digits\n     // build stack of digits\n-    while ii > 0u && (frac >= epsilon_prime || exact) {\n+    while ii > 0 && (frac >= epsilon_prime || exact) {\n         // store the next digit\n         frac *= 10.0;\n         let digit = frac as uint;\n@@ -153,25 +153,25 @@ fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n \n     let mut acc;\n     let mut racc = ~\"\";\n-    let mut carry = if frac * 10.0 as uint >= 5u { 1u } else { 0u };\n+    let mut carry = if frac * 10.0 as uint >= 5 { 1 } else { 0 };\n \n     // turn digits into string\n     // using stack of digits\n-    while vec::len(fractionalParts) > 0u {\n+    while fractionalParts.is_not_empty() {\n         let mut adjusted_digit = carry + vec::pop(fractionalParts);\n \n-        if adjusted_digit == 10u {\n-            carry = 1u;\n-            adjusted_digit %= 10u\n+        if adjusted_digit == 10 {\n+            carry = 1;\n+            adjusted_digit %= 10\n         } else {\n-            carry = 0u\n+            carry = 0;\n         };\n \n         racc = uint::str(adjusted_digit) + racc;\n     }\n \n     // pad decimals with trailing zeroes\n-    while str::len(racc) < digits && exact {\n+    while racc.len() < digits && exact {\n         racc += ~\"0\"\n     }\n \n@@ -428,11 +428,11 @@ impl float : Ord {\n }\n \n impl float: num::Num {\n-    pure fn add(&&other: float)    -> float { return self + other; }\n-    pure fn sub(&&other: float)    -> float { return self - other; }\n-    pure fn mul(&&other: float)    -> float { return self * other; }\n-    pure fn div(&&other: float)    -> float { return self / other; }\n-    pure fn modulo(&&other: float) -> float { return self % other; }\n+    pure fn add(other: &float)    -> float { return self + *other; }\n+    pure fn sub(other: &float)    -> float { return self - *other; }\n+    pure fn mul(other: &float)    -> float { return self * *other; }\n+    pure fn div(other: &float)    -> float { return self / *other; }\n+    pure fn modulo(other: &float) -> float { return self % *other; }\n     pure fn neg()                  -> float { return -self;        }\n \n     pure fn to_int()         -> int   { return self as int; }\n@@ -540,11 +540,11 @@ fn test_traits() {\n         let two: U = from_int(2);\n         assert (two.to_int() == 2);\n \n-        assert (ten.add(two) == from_int(12));\n-        assert (ten.sub(two) == from_int(8));\n-        assert (ten.mul(two) == from_int(20));\n-        assert (ten.div(two) == from_int(5));\n-        assert (ten.modulo(two) == from_int(0));\n+        assert (ten.add(&two) == from_int(12));\n+        assert (ten.sub(&two) == from_int(8));\n+        assert (ten.mul(&two) == from_int(20));\n+        assert (ten.div(&two) == from_int(5));\n+        assert (ten.modulo(&two) == from_int(0));\n     }\n \n     test(&10.0);"}, {"sha": "649400e2360fbc6f5f39b0c64a9b6e2e5cc361c5", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -81,11 +81,11 @@ impl T : Eq {\n }\n \n impl T: num::Num {\n-    pure fn add(&&other: T)    -> T { return self + other; }\n-    pure fn sub(&&other: T)    -> T { return self - other; }\n-    pure fn mul(&&other: T)    -> T { return self * other; }\n-    pure fn div(&&other: T)    -> T { return self / other; }\n-    pure fn modulo(&&other: T) -> T { return self % other; }\n+    pure fn add(other: &T)    -> T { return self + *other; }\n+    pure fn sub(other: &T)    -> T { return self - *other; }\n+    pure fn mul(other: &T)    -> T { return self * *other; }\n+    pure fn div(other: &T)    -> T { return self / *other; }\n+    pure fn modulo(other: &T) -> T { return self % *other; }\n     pure fn neg()              -> T { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }\n@@ -250,11 +250,11 @@ fn test_interfaces() {\n         let two: U = from_int(2);\n         assert (two.to_int() == 2);\n \n-        assert (ten.add(two) == from_int(12));\n-        assert (ten.sub(two) == from_int(8));\n-        assert (ten.mul(two) == from_int(20));\n-        assert (ten.div(two) == from_int(5));\n-        assert (ten.modulo(two) == from_int(0));\n+        assert (ten.add(&two) == from_int(12));\n+        assert (ten.sub(&two) == from_int(8));\n+        assert (ten.mul(&two) == from_int(20));\n+        assert (ten.div(&two) == from_int(5));\n+        assert (ten.modulo(&two) == from_int(0));\n         assert (ten.neg() == from_int(-10));\n     }\n "}, {"sha": "585a72d70aedeecc9eef731c7869246e119696cc", "filename": "src/libcore/num.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -2,11 +2,11 @@\n \n trait Num {\n     // FIXME: Trait composition. (#2616)\n-    pure fn add(&&other: self) -> self;\n-    pure fn sub(&&other: self) -> self;\n-    pure fn mul(&&other: self) -> self;\n-    pure fn div(&&other: self) -> self;\n-    pure fn modulo(&&other: self) -> self;\n+    pure fn add(other: &self) -> self;\n+    pure fn sub(other: &self) -> self;\n+    pure fn mul(other: &self) -> self;\n+    pure fn div(other: &self) -> self;\n+    pure fn modulo(other: &self) -> self;\n     pure fn neg() -> self;\n \n     pure fn to_int() -> int;"}, {"sha": "eaaf11dab5d23e184f9201e45e511390673f7f18", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -464,7 +464,7 @@ pure fn byte_slice<T>(s: &str, f: fn(v: &[u8]) -> T) -> T {\n \n /// Convert a string to a vector of characters\n pure fn chars(s: &str) -> ~[char] {\n-    let mut buf = ~[], i = 0u;\n+    let mut buf = ~[], i = 0;\n     let len = len(s);\n     while i < len {\n         let {ch, next} = char_range_at(s, i);"}, {"sha": "f5d2229513d242e84dccb2a14eb1828e9cda7c6e", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -74,11 +74,11 @@ impl T : Eq {\n }\n \n impl T: num::Num {\n-    pure fn add(&&other: T)    -> T { return self + other; }\n-    pure fn sub(&&other: T)    -> T { return self - other; }\n-    pure fn mul(&&other: T)    -> T { return self * other; }\n-    pure fn div(&&other: T)    -> T { return self / other; }\n-    pure fn modulo(&&other: T) -> T { return self % other; }\n+    pure fn add(other: &T)    -> T { return self + *other; }\n+    pure fn sub(other: &T)    -> T { return self - *other; }\n+    pure fn mul(other: &T)    -> T { return self * *other; }\n+    pure fn div(other: &T)    -> T { return self / *other; }\n+    pure fn modulo(other: &T) -> T { return self % *other; }\n     pure fn neg()              -> T { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }"}, {"sha": "f2882b919838e89bfc6485c314e953b33e7c9ba7", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85a3d82470e2e45db370b62e4fd54175c4b144d/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=e85a3d82470e2e45db370b62e4fd54175c4b144d", "patch": "@@ -5,11 +5,11 @@\n fn main() {\n // ints\n     // num\n-    assert 15.add(6) == 21;\n-    assert 15i8.add(6i8) == 21i8;\n-    assert 15i16.add(6i16) == 21i16;\n-    assert 15i32.add(6i32) == 21i32;\n-    assert 15i64.add(6i64) == 21i64;\n+    assert 15.add(&6) == 21;\n+    assert 15i8.add(&6i8) == 21i8;\n+    assert 15i16.add(&6i16) == 21i16;\n+    assert 15i32.add(&6i32) == 21i32;\n+    assert 15i64.add(&6i64) == 21i64;\n     // times\n      15.times(|| false);\n      15i8.times(|| false);\n@@ -19,11 +19,11 @@ fn main() {\n \n // uints\n     // num\n-    assert 15u.add(6u) == 21u;\n-    assert 15u8.add(6u8) == 21u8;\n-    assert 15u16.add(6u16) == 21u16;\n-    assert 15u32.add(6u32) == 21u32;\n-    assert 15u64.add(6u64) == 21u64;\n+    assert 15u.add(&6u) == 21u;\n+    assert 15u8.add(&6u8) == 21u8;\n+    assert 15u16.add(&6u16) == 21u16;\n+    assert 15u32.add(&6u32) == 21u32;\n+    assert 15u64.add(&6u64) == 21u64;\n     // times\n      15u.times(|| false);\n      15u8.times(|| false);"}]}