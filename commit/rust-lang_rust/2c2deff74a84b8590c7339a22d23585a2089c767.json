{"sha": "2c2deff74a84b8590c7339a22d23585a2089c767", "node_id": "C_kwDOAAsO6NoAKDJjMmRlZmY3NGE4NGI4NTkwYzczMzlhMjJkMjM1ODVhMjA4OWM3Njc", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-21T17:48:39Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-21T17:48:39Z"}, "message": "Add regression test for #93161", "tree": {"sha": "f4a463fbfb8c726fe28e3754e510c84c5eba8fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a463fbfb8c726fe28e3754e510c84c5eba8fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c2deff74a84b8590c7339a22d23585a2089c767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2deff74a84b8590c7339a22d23585a2089c767", "html_url": "https://github.com/rust-lang/rust/commit/2c2deff74a84b8590c7339a22d23585a2089c767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c2deff74a84b8590c7339a22d23585a2089c767/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13090889f5b8cbc72b1a14c2cb038dca5727d55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/13090889f5b8cbc72b1a14c2cb038dca5727d55c", "html_url": "https://github.com/rust-lang/rust/commit/13090889f5b8cbc72b1a14c2cb038dca5727d55c"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "9988acbcb73e198918e324cee34336a730b42374", "filename": "src/test/ui/generator/issue-93161.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/2c2deff74a84b8590c7339a22d23585a2089c767/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2deff74a84b8590c7339a22d23585a2089c767/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs?ref=2c2deff74a84b8590c7339a22d23585a2089c767", "patch": "@@ -0,0 +1,93 @@\n+// edition:2021\n+// run-pass\n+\n+#![feature(never_type)]\n+\n+use std::future::Future;\n+\n+// See if we can run a basic `async fn`\n+pub async fn foo(x: &u32, y: u32) -> u32 {\n+    let y = &y;\n+    let z = 9;\n+    let z = &z;\n+    let y = async { *y + *z }.await;\n+    let a = 10;\n+    let a = &a;\n+    *x + y + *a\n+}\n+\n+async fn add(x: u32, y: u32) -> u32 {\n+    let a = async { x + y };\n+    a.await\n+}\n+\n+async fn build_aggregate(a: u32, b: u32, c: u32, d: u32) -> u32 {\n+    let x = (add(a, b).await, add(c, d).await);\n+    x.0 + x.1\n+}\n+\n+enum Never {}\n+fn never() -> Never {\n+    panic!()\n+}\n+\n+async fn includes_never(crash: bool, x: u32) -> u32 {\n+    let mut result = async { x * x }.await;\n+    if !crash {\n+        return result;\n+    }\n+    #[allow(unused)]\n+    let bad = never();\n+    result *= async { x + x }.await;\n+    drop(bad);\n+    result\n+}\n+\n+async fn partial_init(x: u32) -> u32 {\n+    #[allow(unreachable_code)]\n+    let _x: (String, !) = (String::new(), return async { x + x }.await);\n+}\n+\n+async fn read_exact(_from: &mut &[u8], _to: &mut [u8]) -> Option<()> {\n+    Some(())\n+}\n+\n+async fn hello_world() {\n+    let data = [0u8; 1];\n+    let mut reader = &data[..];\n+\n+    let mut marker = [0u8; 1];\n+    read_exact(&mut reader, &mut marker).await.unwrap();\n+}\n+\n+fn run_fut<T>(fut: impl Future<Output = T>) -> T {\n+    use std::sync::Arc;\n+    use std::task::{Context, Poll, Wake, Waker};\n+\n+    struct MyWaker;\n+    impl Wake for MyWaker {\n+        fn wake(self: Arc<Self>) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    let waker = Waker::from(Arc::new(MyWaker));\n+    let mut context = Context::from_waker(&waker);\n+\n+    let mut pinned = Box::pin(fut);\n+    loop {\n+        match pinned.as_mut().poll(&mut context) {\n+            Poll::Pending => continue,\n+            Poll::Ready(v) => return v,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    assert_eq!(run_fut(foo(&x, 7)), 31);\n+    assert_eq!(run_fut(build_aggregate(1, 2, 3, 4)), 10);\n+    assert_eq!(run_fut(includes_never(false, 4)), 16);\n+    assert_eq!(run_fut(partial_init(4)), 8);\n+    run_fut(hello_world());\n+}"}]}