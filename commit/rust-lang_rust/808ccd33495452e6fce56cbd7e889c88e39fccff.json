{"sha": "808ccd33495452e6fce56cbd7e889c88e39fccff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOGNjZDMzNDk1NDUyZTZmY2U1NmNiZDdlODg5Yzg4ZTM5ZmNjZmY=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-02-12T04:18:34Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-02-13T17:47:44Z"}, "message": "RIMOV core::io", "tree": {"sha": "6414ae5d3165f9aefe520e185974ccfaf628ce69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6414ae5d3165f9aefe520e185974ccfaf628ce69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808ccd33495452e6fce56cbd7e889c88e39fccff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808ccd33495452e6fce56cbd7e889c88e39fccff", "html_url": "https://github.com/rust-lang/rust/commit/808ccd33495452e6fce56cbd7e889c88e39fccff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808ccd33495452e6fce56cbd7e889c88e39fccff/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a3f7b8e557aa9ff8e99a11c826ffc6e1147e414", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3f7b8e557aa9ff8e99a11c826ffc6e1147e414", "html_url": "https://github.com/rust-lang/rust/commit/3a3f7b8e557aa9ff8e99a11c826ffc6e1147e414"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c1e47439e9280588aa0c7626e17c5ab83f1f908f", "filename": "src/libcore/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/808ccd33495452e6fce56cbd7e889c88e39fccff/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808ccd33495452e6fce56cbd7e889c88e39fccff/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=808ccd33495452e6fce56cbd7e889c88e39fccff", "patch": "@@ -56,7 +56,7 @@ pub trait Reader {\n     /// Read up to len bytes (or EOF) and put them into bytes (which\n     /// must be at least len bytes long). Return number of bytes read.\n     // FIXME (#2982): This should probably return an error.\n-    fn read(&self, bytes: &[mut u8], len: uint) -> uint;\n+    fn read(&self, bytes: &mut [u8], len: uint) -> uint;\n \n     /// Read a single byte, returning a negative value for EOF or read error.\n     fn read_byte(&self) -> int;\n@@ -416,7 +416,7 @@ fn convert_whence(whence: SeekStyle) -> i32 {\n }\n \n impl *libc::FILE: Reader {\n-    fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n+    fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         unsafe {\n             do vec::as_mut_buf(bytes) |buf_p, buf_len| {\n                 assert buf_len >= len;\n@@ -461,7 +461,7 @@ struct Wrapper<T, C> {\n // duration of its lifetime.\n // FIXME there really should be a better way to do this // #2004\n impl<R: Reader, C> Wrapper<R, C>: Reader {\n-    fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n+    fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         self.base.read(bytes, len)\n     }\n     fn read_byte(&self) -> int { self.base.read_byte() }\n@@ -528,7 +528,7 @@ pub struct BytesReader {\n }\n \n impl BytesReader: Reader {\n-    fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n+    fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         let count = uint::min(len, self.bytes.len() - self.pos);\n \n         let view = vec::view(self.bytes, self.pos, self.bytes.len());"}]}