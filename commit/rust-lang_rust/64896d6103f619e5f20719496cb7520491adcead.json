{"sha": "64896d6103f619e5f20719496cb7520491adcead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ODk2ZDYxMDNmNjE5ZTVmMjA3MTk0OTZjYjc1MjA0OTFhZGNlYWQ=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-08-07T01:11:13Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-08-07T01:11:13Z"}, "message": "libcollections: Fix RingBuf growth for non-power-of-two capacities", "tree": {"sha": "d1526adaed90e7ee3f06cd0a52ba44b418b969f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1526adaed90e7ee3f06cd0a52ba44b418b969f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64896d6103f619e5f20719496cb7520491adcead", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64896d6103f619e5f20719496cb7520491adcead", "html_url": "https://github.com/rust-lang/rust/commit/64896d6103f619e5f20719496cb7520491adcead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64896d6103f619e5f20719496cb7520491adcead/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e19e750185f60e404412f702f8f2edc7bc1245", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e19e750185f60e404412f702f8f2edc7bc1245", "html_url": "https://github.com/rust-lang/rust/commit/51e19e750185f60e404412f702f8f2edc7bc1245"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "84b5c5bb9985bf94fcb37f82403bf2d8c21e071a", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/64896d6103f619e5f20719496cb7520491adcead/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64896d6103f619e5f20719496cb7520491adcead/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=64896d6103f619e5f20719496cb7520491adcead", "patch": "@@ -403,11 +403,11 @@ impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n fn grow<T>(nelts: uint, loptr: &mut uint, elts: &mut Vec<Option<T>>) {\n     assert_eq!(nelts, elts.len());\n     let lo = *loptr;\n-    let newlen = nelts * 2;\n-    elts.reserve(newlen);\n+    elts.reserve(nelts * 2);\n+    let newlen = elts.capacity();\n \n     /* fill with None */\n-    for _ in range(elts.len(), elts.capacity()) {\n+    for _ in range(elts.len(), newlen) {\n         elts.push(None);\n     }\n \n@@ -750,6 +750,47 @@ mod tests {\n         assert_eq!(d.len(), 1);\n     }\n \n+    #[test]\n+    fn test_with_capacity_non_power_two() {\n+        let mut d3 = RingBuf::with_capacity(3);\n+        d3.push(1i);\n+\n+        // X = None, | = lo\n+        // [|1, X, X]\n+        assert_eq!(d3.pop_front(), Some(1));\n+        // [X, |X, X]\n+        assert_eq!(d3.front(), None);\n+\n+        // [X, |3, X]\n+        d3.push(3);\n+        // [X, |3, 6]\n+        d3.push(6);\n+        // [X, X, |6]\n+        assert_eq!(d3.pop_front(), Some(3));\n+\n+        // Pushing the lo past half way point to trigger\n+        // the 'B' scenario for growth\n+        // [9, X, |6]\n+        d3.push(9);\n+        // [9, 12, |6]\n+        d3.push(12);\n+\n+        d3.push(15);\n+        // There used to be a bug here about how the\n+        // RingBuf made growth assumptions about the\n+        // underlying Vec which didn't hold and lead\n+        // to corruption.\n+        // (Vec grows to next power of two)\n+        //good- [9, 12, 15, X, X, X, X, |6]\n+        //bug-  [15, 12, X, X, X, |6, X, X]\n+        assert_eq!(d3.pop_front(), Some(6));\n+\n+        // Which leads us to the following state which\n+        // would be a failure case.\n+        //bug-  [15, 12, X, X, X, X, |X, X]\n+        assert_eq!(d3.front(), Some(&9));\n+    }\n+\n     #[test]\n     fn test_reserve_exact() {\n         let mut d = RingBuf::new();"}]}