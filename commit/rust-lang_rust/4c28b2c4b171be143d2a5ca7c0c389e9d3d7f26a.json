{"sha": "4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjhiMmM0YjE3MWJlMTQzZDJhNWNhN2MwYzM4OWU5ZDNkN2YyNmE=", "commit": {"author": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2018-12-18T02:28:06Z"}, "committer": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2019-01-22T22:45:11Z"}, "message": "Move nontrivial constructors to inherent methods", "tree": {"sha": "83f3fd2112a882dad35c26d4dce57943607c3be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f3fd2112a882dad35c26d4dce57943607c3be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "html_url": "https://github.com/rust-lang/rust/commit/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5971ccc08d8bfadeb0614c4555ffd32c51066cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5971ccc08d8bfadeb0614c4555ffd32c51066cdc", "html_url": "https://github.com/rust-lang/rust/commit/5971ccc08d8bfadeb0614c4555ffd32c51066cdc"}], "stats": {"total": 85, "additions": 60, "deletions": 25}, "files": [{"sha": "8bd064021e6c7699707863222a5e317f914f72f4", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "patch": "@@ -339,8 +339,13 @@ unsafe impl<'a, I, T: 'a> TrustedLen for Cloned<I>\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Cycle<I> {\n-    pub(super) orig: I,\n-    pub(super) iter: I,\n+    orig: I,\n+    iter: I,\n+}\n+impl<I: Clone> Cycle<I> {\n+    pub(super) fn new(iter: I) -> Cycle<I> {\n+        Cycle { orig: iter.clone(), iter }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -380,9 +385,15 @@ impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n #[derive(Clone, Debug)]\n pub struct StepBy<I> {\n-    pub(super) iter: I,\n-    pub(super) step: usize,\n-    pub(super) first_take: bool,\n+    iter: I,\n+    step: usize,\n+    first_take: bool,\n+}\n+impl<I> StepBy<I> {\n+    pub(super) fn new(iter: I, step: usize) -> StepBy<I> {\n+        assert!(step != 0);\n+        StepBy { iter, step: step - 1, first_take: true }\n+    }\n }\n \n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n@@ -867,8 +878,13 @@ impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F>\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Enumerate<I> {\n-    pub(super) iter: I,\n-    pub(super) count: usize,\n+    iter: I,\n+    count: usize,\n+}\n+impl<I> Enumerate<I> {\n+    pub(super) fn new(iter: I) -> Enumerate<I> {\n+        Enumerate { iter, count: 0 }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1028,9 +1044,14 @@ unsafe impl<I> TrustedLen for Enumerate<I>\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Peekable<I: Iterator> {\n-    pub(super) iter: I,\n+    iter: I,\n     /// Remember a peeked value, even if it was None.\n-    pub(super) peeked: Option<Option<I::Item>>,\n+    peeked: Option<Option<I::Item>>,\n+}\n+impl<I: Iterator> Peekable<I> {\n+    pub(super) fn new(iter: I) -> Peekable<I> {\n+        Peekable { iter, peeked: None }\n+    }\n }\n \n // Peekable must remember if a None has been seen in the `.peek()` method.\n@@ -1180,9 +1201,14 @@ impl<I: Iterator> Peekable<I> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct SkipWhile<I, P> {\n-    pub(super) iter: I,\n-    pub(super) flag: bool,\n-    pub(super) predicate: P,\n+    iter: I,\n+    flag: bool,\n+    predicate: P,\n+}\n+impl<I, P> SkipWhile<I, P> {\n+    pub(super) fn new(iter: I, predicate: P) -> SkipWhile<I, P> {\n+        SkipWhile { iter, flag: false, predicate }\n+    }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n@@ -1263,9 +1289,14 @@ impl<I, P> FusedIterator for SkipWhile<I, P>\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct TakeWhile<I, P> {\n-    pub(super) iter: I,\n-    pub(super) flag: bool,\n-    pub(super) predicate: P,\n+    iter: I,\n+    flag: bool,\n+    predicate: P,\n+}\n+impl<I, P> TakeWhile<I, P> {\n+    pub(super) fn new(iter: I, predicate: P) -> TakeWhile<I, P> {\n+        TakeWhile { iter, flag: false, predicate }\n+    }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n@@ -1632,8 +1663,13 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Fuse<I> {\n-    pub(super) iter: I,\n-    pub(super) done: bool\n+    iter: I,\n+    done: bool\n+}\n+impl<I> Fuse<I> {\n+    pub(super) fn new(iter: I) -> Fuse<I> {\n+        Fuse { iter, done: false }\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "44e29fd813a9d11d8f5dff17ada2845a5cbb9354", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "patch": "@@ -366,8 +366,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n     fn step_by(self, step: usize) -> StepBy<Self> where Self: Sized {\n-        assert!(step != 0);\n-        StepBy{iter: self, step: step - 1, first_take: true}\n+        StepBy::new(self, step)\n     }\n \n     /// Takes two iterators and creates a new iterator over both in sequence.\n@@ -771,7 +770,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn enumerate(self) -> Enumerate<Self> where Self: Sized {\n-        Enumerate { iter: self, count: 0 }\n+        Enumerate::new(self)\n     }\n \n     /// Creates an iterator which can use `peek` to look at the next element of\n@@ -817,7 +816,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn peekable(self) -> Peekable<Self> where Self: Sized {\n-        Peekable{iter: self, peeked: None}\n+        Peekable::new(self)\n     }\n \n     /// Creates an iterator that [`skip`]s elements based on a predicate.\n@@ -880,7 +879,7 @@ pub trait Iterator {\n     fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> where\n         Self: Sized, P: FnMut(&Self::Item) -> bool,\n     {\n-        SkipWhile { iter: self, flag: false, predicate }\n+        SkipWhile::new(self, predicate)\n     }\n \n     /// Creates an iterator that yields elements based on a predicate.\n@@ -960,7 +959,7 @@ pub trait Iterator {\n     fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> where\n         Self: Sized, P: FnMut(&Self::Item) -> bool,\n     {\n-        TakeWhile { iter: self, flag: false, predicate }\n+        TakeWhile::new(self, predicate)\n     }\n \n     /// Creates an iterator that skips the first `n` elements.\n@@ -1225,7 +1224,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fuse(self) -> Fuse<Self> where Self: Sized {\n-        Fuse{iter: self, done: false}\n+        Fuse::new(self)\n     }\n \n     /// Do something with each element of an iterator, passing the value on.\n@@ -2310,7 +2309,7 @@ pub trait Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     fn cycle(self) -> Cycle<Self> where Self: Sized + Clone {\n-        Cycle{orig: self.clone(), iter: self}\n+        Cycle::new(self)\n     }\n \n     /// Sums the elements of an iterator."}]}