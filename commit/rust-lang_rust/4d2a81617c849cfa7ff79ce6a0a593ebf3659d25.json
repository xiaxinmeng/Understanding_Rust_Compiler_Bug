{"sha": "4d2a81617c849cfa7ff79ce6a0a593ebf3659d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMmE4MTYxN2M4NDljZmE3ZmY3OWNlNmEwYTU5M2ViZjM2NTlkMjU=", "commit": {"author": {"name": "Michael Huynh", "email": "miqid@outlook.com", "date": "2016-02-22T14:02:40Z"}, "committer": {"name": "Michael Huynh", "email": "miqid@outlook.com", "date": "2016-02-22T14:02:40Z"}, "message": "Correct Iterator trait documentation\n\nFixes several minor spelling errors and includes a suggested style fix.", "tree": {"sha": "c5f79b7deffb4d20cea95b3a24feb653a92aee38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f79b7deffb4d20cea95b3a24feb653a92aee38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d2a81617c849cfa7ff79ce6a0a593ebf3659d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2a81617c849cfa7ff79ce6a0a593ebf3659d25", "html_url": "https://github.com/rust-lang/rust/commit/4d2a81617c849cfa7ff79ce6a0a593ebf3659d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d2a81617c849cfa7ff79ce6a0a593ebf3659d25/comments", "author": {"login": "miqh", "id": 43751307, "node_id": "MDQ6VXNlcjQzNzUxMzA3", "avatar_url": "https://avatars.githubusercontent.com/u/43751307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miqh", "html_url": "https://github.com/miqh", "followers_url": "https://api.github.com/users/miqh/followers", "following_url": "https://api.github.com/users/miqh/following{/other_user}", "gists_url": "https://api.github.com/users/miqh/gists{/gist_id}", "starred_url": "https://api.github.com/users/miqh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miqh/subscriptions", "organizations_url": "https://api.github.com/users/miqh/orgs", "repos_url": "https://api.github.com/users/miqh/repos", "events_url": "https://api.github.com/users/miqh/events{/privacy}", "received_events_url": "https://api.github.com/users/miqh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "miqh", "id": 43751307, "node_id": "MDQ6VXNlcjQzNzUxMzA3", "avatar_url": "https://avatars.githubusercontent.com/u/43751307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miqh", "html_url": "https://github.com/miqh", "followers_url": "https://api.github.com/users/miqh/followers", "following_url": "https://api.github.com/users/miqh/following{/other_user}", "gists_url": "https://api.github.com/users/miqh/gists{/gist_id}", "starred_url": "https://api.github.com/users/miqh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miqh/subscriptions", "organizations_url": "https://api.github.com/users/miqh/orgs", "repos_url": "https://api.github.com/users/miqh/repos", "events_url": "https://api.github.com/users/miqh/events{/privacy}", "received_events_url": "https://api.github.com/users/miqh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a59cf57e02b6e6a5a3bd74eb47b1422eaacc53", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a59cf57e02b6e6a5a3bd74eb47b1422eaacc53", "html_url": "https://github.com/rust-lang/rust/commit/98a59cf57e02b6e6a5a3bd74eb47b1422eaacc53"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "96302acb8d960f1c94b8691ca4c0f2e5d83279ba", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d2a81617c849cfa7ff79ce6a0a593ebf3659d25/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2a81617c849cfa7ff79ce6a0a593ebf3659d25/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=4d2a81617c849cfa7ff79ce6a0a593ebf3659d25", "patch": "@@ -1428,7 +1428,7 @@ pub trait Iterator {\n     /// assert_eq!(6, doubled[2]);\n     /// ```\n     ///\n-    /// Using the 'turbofish' instead of annotationg `doubled`:\n+    /// Using the 'turbofish' instead of annotating `doubled`:\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -1610,7 +1610,7 @@ pub trait Iterator {\n     /// `true`, then so does `all()`. If any of them return `false`, it\n     /// returns `false`.\n     ///\n-    /// `all()` is short-circuting; in other words, it will stop processing\n+    /// `all()` is short-circuiting; in other words, it will stop processing\n     /// as soon as it finds a `false`, given that no matter what else happens,\n     /// the result will also be `false`.\n     ///\n@@ -1660,7 +1660,7 @@ pub trait Iterator {\n     /// `true`, then so does `any()`. If they all return `false`, it\n     /// returns `false`.\n     ///\n-    /// `any()` is short-circuting; in other words, it will stop processing\n+    /// `any()` is short-circuiting; in other words, it will stop processing\n     /// as soon as it finds a `true`, given that no matter what else happens,\n     /// the result will also be `true`.\n     ///\n@@ -1711,7 +1711,7 @@ pub trait Iterator {\n     /// `true`, then `find()` returns `Some(element)`. If they all return\n     /// `false`, it returns `None`.\n     ///\n-    /// `find()` is short-circuting; in other words, it will stop processing\n+    /// `find()` is short-circuiting; in other words, it will stop processing\n     /// as soon as the closure returns `true`.\n     ///\n     /// Because `find()` takes a reference, and many iterators iterate over\n@@ -1762,7 +1762,7 @@ pub trait Iterator {\n     /// returns `true`, then `position()` returns `Some(index)`. If all of\n     /// them return `false`, it returns `None`.\n     ///\n-    /// `position()` is short-circuting; in other words, it will stop\n+    /// `position()` is short-circuiting; in other words, it will stop\n     /// processing as soon as it finds a `true`.\n     ///\n     /// # Overflow Behavior\n@@ -1824,7 +1824,7 @@ pub trait Iterator {\n     /// and if one of them returns `true`, then `rposition()` returns\n     /// `Some(index)`. If all of them return `false`, it returns `None`.\n     ///\n-    /// `rposition()` is short-circuting; in other words, it will stop\n+    /// `rposition()` is short-circuiting; in other words, it will stop\n     /// processing as soon as it finds a `true`.\n     ///\n     /// # Examples\n@@ -2079,7 +2079,7 @@ pub trait Iterator {\n         (ts, us)\n     }\n \n-    /// Creates an iterator which clone()s all of its elements.\n+    /// Creates an iterator which `clone()`s all of its elements.\n     ///\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`."}]}