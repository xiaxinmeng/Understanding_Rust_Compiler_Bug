{"sha": "be742a587704f27f4e503c50f549aa9ec1527fcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNzQyYTU4NzcwNGYyN2Y0ZTUwM2M1MGY1NDlhYTllYzE1MjdmY2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T23:38:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T23:38:34Z"}, "message": "Apply code actions", "tree": {"sha": "fb15d3dd05c64c441c9cddbbce6aee3776d6ddd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb15d3dd05c64c441c9cddbbce6aee3776d6ddd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be742a587704f27f4e503c50f549aa9ec1527fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be742a587704f27f4e503c50f549aa9ec1527fcc", "html_url": "https://github.com/rust-lang/rust/commit/be742a587704f27f4e503c50f549aa9ec1527fcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be742a587704f27f4e503c50f549aa9ec1527fcc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25aebb5225da91d34a2cb946f93435f9f7e82a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/25aebb5225da91d34a2cb946f93435f9f7e82a47", "html_url": "https://github.com/rust-lang/rust/commit/25aebb5225da91d34a2cb946f93435f9f7e82a47"}], "stats": {"total": 365, "additions": 247, "deletions": 118}, "files": [{"sha": "eef16522f8da85c9e59be94058e93fec3c96381b", "filename": "code/package.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/code%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/code%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage.json?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -10,7 +10,8 @@\n     \"vscode\": \"^1.25.0\"\n   },\n   \"scripts\": {\n-    \"compile\": \"tsc -p ./\",\n+    \"vscode:prepublish\": \"tsc -p ./\",\n+    \"compile\": \"tsc -watch -p ./\",\n     \"postinstall\": \"node ./node_modules/vscode/bin/install\"\n   },\n   \"dependencies\": {"}, {"sha": "15a2a904f3161cd0421d53c745f9f1604f05f7d5", "filename": "crates/libeditor/src/edit.rs", "status": "modified", "additions": 31, "deletions": 44, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Flibeditor%2Fsrc%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Flibeditor%2Fsrc%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fedit.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -1,11 +1,11 @@\n use {TextRange, TextUnit};\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct Edit {\n-    pub atoms: Vec<AtomEdit>,\n+    atoms: Vec<AtomEdit>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct AtomEdit {\n     pub delete: TextRange,\n     pub insert: String,\n@@ -22,7 +22,6 @@ impl EditBuilder {\n     }\n \n     pub fn replace(&mut self, range: TextRange, replacement: String) {\n-        let range = self.translate(range);\n         self.atoms.push(AtomEdit { delete: range, insert: replacement })\n     }\n \n@@ -35,59 +34,47 @@ impl EditBuilder {\n     }\n \n     pub fn finish(self) -> Edit {\n-        Edit { atoms: self.atoms }\n-    }\n-\n-    fn translate(&self, range: TextRange) -> TextRange {\n-        let mut range = range;\n-        for atom in self.atoms.iter() {\n-            range = atom.apply_to_range(range)\n-                .expect(\"conflicting edits\");\n+        let mut atoms = self.atoms;\n+        atoms.sort_by_key(|a| a.delete.start());\n+        for (a1, a2) in atoms.iter().zip(atoms.iter().skip(1)) {\n+            assert!(a1.end() <= a2.start())\n         }\n-        range\n+        Edit { atoms }\n     }\n }\n \n impl Edit {\n+    pub fn into_atoms(self) -> Vec<AtomEdit> {\n+        self.atoms\n+    }\n+\n     pub fn apply(&self, text: &str) -> String {\n-        let mut text = text.to_owned();\n+        let mut total_len = text.len();\n         for atom in self.atoms.iter() {\n-            text = atom.apply(&text);\n+            total_len += atom.insert.len();\n+            total_len -= atom.end() - atom.start();\n         }\n-        text\n+        let mut buf = String::with_capacity(total_len);\n+        let mut prev = 0;\n+        for atom in self.atoms.iter() {\n+            if atom.start() > prev {\n+                buf.push_str(&text[prev..atom.start()]);\n+            }\n+            buf.push_str(&atom.insert);\n+            prev = atom.end();\n+        }\n+        buf.push_str(&text[prev..text.len()]);\n+        assert_eq!(buf.len(), total_len);\n+        buf\n     }\n }\n \n impl AtomEdit {\n-    fn apply(&self, text: &str) -> String {\n-        let prefix = &text[\n-            TextRange::from_to(0.into(), self.delete.start())\n-        ];\n-        let suffix = &text[\n-            TextRange::from_to(self.delete.end(), TextUnit::of_str(text))\n-        ];\n-        let mut res = String::with_capacity(prefix.len() + self.insert.len() + suffix.len());\n-        res.push_str(prefix);\n-        res.push_str(&self.insert);\n-        res.push_str(suffix);\n-        res\n+    fn start(&self) -> usize {\n+        u32::from(self.delete.start()) as usize\n     }\n \n-    fn apply_to_position(&self, pos: TextUnit) -> Option<TextUnit> {\n-        if pos <= self.delete.start() {\n-            return Some(pos);\n-        }\n-        if pos < self.delete.end() {\n-            return None;\n-        }\n-        Some(pos - self.delete.len() + TextUnit::of_str(&self.insert))\n-    }\n-\n-    fn apply_to_range(&self, range: TextRange) -> Option<TextRange> {\n-        Some(TextRange::from_to(\n-            self.apply_to_position(range.start())?,\n-            self.apply_to_position(range.end())?,\n-        ))\n+    fn end(&self) -> usize {\n+        u32::from(self.delete.end()) as usize\n     }\n }\n-"}, {"sha": "1e88f1471dcdbc626eef9439229efa728e5736e1", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -19,7 +19,7 @@ pub use self::{\n     line_index::{LineIndex, LineCol},\n     extend_selection::extend_selection,\n     symbols::{FileSymbol, file_symbols},\n-    edit::{EditBuilder, Edit},\n+    edit::{EditBuilder, Edit, AtomEdit},\n     code_actions::{flip_comma},\n };\n "}, {"sha": "8e077ecf095865793ca8130ecfef8cd49360063f", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -11,10 +11,11 @@ serde_derive = \"1.0.71\"\n drop_bomb = \"0.1.0\"\n crossbeam-channel = \"0.2.4\"\n threadpool = \"1.7.1\"\n-flexi_logger = \"0.9.0\"\n+flexi_logger = \"0.9.1\"\n log = \"0.4.3\"\n url_serde = \"0.2.0\"\n languageserver-types = \"0.49.0\"\n+text_unit = { version = \"0.1.2\", features = [\"serde\"] }\n \n libsyntax2 = { path = \"../libsyntax2\" }\n libeditor = { path = \"../libeditor\" }"}, {"sha": "d06a43a82a7d84367be5dd3ce1ab9d7cf11d9777", "filename": "crates/server/src/caps.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fcaps.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -3,34 +3,39 @@ use languageserver_types::{\n     TextDocumentSyncCapability,\n     TextDocumentSyncOptions,\n     TextDocumentSyncKind,\n+    ExecuteCommandOptions,\n };\n \n-pub const SERVER_CAPABILITIES: ServerCapabilities = ServerCapabilities {\n-    text_document_sync: Some(TextDocumentSyncCapability::Options(\n-        TextDocumentSyncOptions {\n-            open_close: Some(true),\n-            change: Some(TextDocumentSyncKind::Full),\n-            will_save: None,\n-            will_save_wait_until: None,\n-            save: None,\n-        }\n-    )),\n-    hover_provider: None,\n-    completion_provider: None,\n-    signature_help_provider: None,\n-    definition_provider: None,\n-    type_definition_provider: None,\n-    implementation_provider: None,\n-    references_provider: None,\n-    document_highlight_provider: None,\n-    document_symbol_provider: Some(true),\n-    workspace_symbol_provider: None,\n-    code_action_provider: Some(true),\n-    code_lens_provider: None,\n-    document_formatting_provider: None,\n-    document_range_formatting_provider: None,\n-    document_on_type_formatting_provider: None,\n-    rename_provider: None,\n-    color_provider: None,\n-    execute_command_provider: None,\n-};\n+pub fn server_capabilities() -> ServerCapabilities {\n+    ServerCapabilities {\n+        text_document_sync: Some(TextDocumentSyncCapability::Options(\n+            TextDocumentSyncOptions {\n+                open_close: Some(true),\n+                change: Some(TextDocumentSyncKind::Full),\n+                will_save: None,\n+                will_save_wait_until: None,\n+                save: None,\n+            }\n+        )),\n+        hover_provider: None,\n+        completion_provider: None,\n+        signature_help_provider: None,\n+        definition_provider: None,\n+        type_definition_provider: None,\n+        implementation_provider: None,\n+        references_provider: None,\n+        document_highlight_provider: None,\n+        document_symbol_provider: Some(true),\n+        workspace_symbol_provider: None,\n+        code_action_provider: Some(true),\n+        code_lens_provider: None,\n+        document_formatting_provider: None,\n+        document_range_formatting_provider: None,\n+        document_on_type_formatting_provider: None,\n+        rename_provider: None,\n+        color_provider: None,\n+        execute_command_provider: Some(ExecuteCommandOptions {\n+            commands: vec![\"apply_code_action\".to_string()],\n+        }),\n+    }\n+}"}, {"sha": "0ed989b32f306b28a3233dfce7a5deaff727f98c", "filename": "crates/server/src/conv.rs", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fconv.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -1,23 +1,23 @@\n-use languageserver_types::{Range, SymbolKind, Position};\n-use libeditor::{LineIndex, LineCol};\n+use languageserver_types::{Range, SymbolKind, Position, TextEdit};\n+use libeditor::{LineIndex, LineCol, Edit, AtomEdit};\n use libsyntax2::{SyntaxKind, TextUnit, TextRange};\n \n pub trait Conv {\n     type Output;\n-    fn conv(&self) -> Self::Output;\n+    fn conv(self) -> Self::Output;\n }\n \n pub trait ConvWith {\n     type Ctx;\n     type Output;\n-    fn conv_with(&self, ctx: &Self::Ctx) -> Self::Output;\n+    fn conv_with(self, ctx: &Self::Ctx) -> Self::Output;\n }\n \n impl Conv for SyntaxKind {\n     type Output = SymbolKind;\n \n-    fn conv(&self) -> <Self as Conv>::Output {\n-        match *self {\n+    fn conv(self) -> <Self as Conv>::Output {\n+        match self {\n             SyntaxKind::FUNCTION => SymbolKind::Function,\n             SyntaxKind::STRUCT => SymbolKind::Struct,\n             SyntaxKind::ENUM => SymbolKind::Enum,\n@@ -35,7 +35,7 @@ impl ConvWith for Position {\n     type Ctx = LineIndex;\n     type Output = TextUnit;\n \n-    fn conv_with(&self, line_index: &LineIndex) -> TextUnit {\n+    fn conv_with(self, line_index: &LineIndex) -> TextUnit {\n         // TODO: UTF-16\n         let line_col = LineCol {\n             line: self.line as u32,\n@@ -49,8 +49,8 @@ impl ConvWith for TextUnit {\n     type Ctx = LineIndex;\n     type Output = Position;\n \n-    fn conv_with(&self, line_index: &LineIndex) -> Position {\n-        let line_col = line_index.line_col(*self);\n+    fn conv_with(self, line_index: &LineIndex) -> Position {\n+        let line_col = line_index.line_col(self);\n         // TODO: UTF-16\n         Position::new(line_col.line as u64, u32::from(line_col.col) as u64)\n     }\n@@ -60,7 +60,7 @@ impl ConvWith for TextRange {\n     type Ctx = LineIndex;\n     type Output = Range;\n \n-    fn conv_with(&self, line_index: &LineIndex) -> Range {\n+    fn conv_with(self, line_index: &LineIndex) -> Range {\n         Range::new(\n             self.start().conv_with(line_index),\n             self.end().conv_with(line_index),\n@@ -72,10 +72,70 @@ impl ConvWith for Range {\n     type Ctx = LineIndex;\n     type Output = TextRange;\n \n-    fn conv_with(&self, line_index: &LineIndex) -> TextRange {\n+    fn conv_with(self, line_index: &LineIndex) -> TextRange {\n         TextRange::from_to(\n             self.start.conv_with(line_index),\n             self.end.conv_with(line_index),\n         )\n     }\n }\n+\n+impl ConvWith for Edit {\n+    type Ctx = LineIndex;\n+    type Output = Vec<TextEdit>;\n+\n+    fn conv_with(self, line_index: &LineIndex) -> Vec<TextEdit> {\n+        self.into_atoms()\n+            .into_iter()\n+            .map_conv_with(line_index)\n+            .collect()\n+    }\n+}\n+\n+impl ConvWith for AtomEdit {\n+    type Ctx = LineIndex;\n+    type Output = TextEdit;\n+\n+    fn conv_with(self, line_index: &LineIndex) -> TextEdit {\n+        TextEdit {\n+            range: self.delete.conv_with(line_index),\n+            new_text: self.insert,\n+        }\n+    }\n+}\n+\n+\n+pub trait MapConvWith<'a>: Sized {\n+    type Ctx;\n+    type Output;\n+\n+    fn map_conv_with(self, ctx: &'a Self::Ctx) -> ConvWithIter<'a, Self, Self::Ctx> {\n+        ConvWithIter { iter: self, ctx }\n+    }\n+}\n+\n+impl<'a, I> MapConvWith<'a> for I\n+    where I: Iterator,\n+          I::Item: ConvWith\n+{\n+    type Ctx = <I::Item as ConvWith>::Ctx;\n+    type Output = <I::Item as ConvWith>::Output;\n+}\n+\n+pub struct ConvWithIter<'a, I, Ctx: 'a> {\n+    iter: I,\n+    ctx: &'a Ctx,\n+}\n+\n+impl<'a, I, Ctx> Iterator for ConvWithIter<'a, I, Ctx>\n+    where\n+        I: Iterator,\n+        I::Item: ConvWith<Ctx=Ctx>,\n+{\n+    type Item = <I::Item as ConvWith>::Output;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.iter.next().map(|item| item.conv_with(self.ctx))\n+    }\n+}\n+"}, {"sha": "3a3ee74bb63d60ce6176d250ba841ea9fda9afeb", "filename": "crates/server/src/dispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fdispatch.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -25,7 +25,7 @@ impl<R: ClientRequest> Responder<R> {\n         let res = match result {\n             Ok(result) => {\n                 RawResponse {\n-                    id: Some(self.id),\n+                    id: self.id,\n                     result: serde_json::to_value(result)?,\n                     error: serde_json::Value::Null,\n                 }\n@@ -125,7 +125,7 @@ fn error_response(id: u64, code: ErrorCode, message: &'static str) -> Result<Raw\n         message: &'static str,\n     }\n     let resp = RawResponse {\n-        id: Some(id),\n+        id,\n         result: serde_json::Value::Null,\n         error: serde_json::to_value(Error {\n             code: code as i32,"}, {"sha": "f247327abf655d7077d28cd0b10113dca930072a", "filename": "crates/server/src/io.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fio.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -34,8 +34,13 @@ pub struct RawNotification {\n \n #[derive(Debug, Serialize, Deserialize)]\n pub struct RawResponse {\n-    pub id: Option<u64>,\n+    // JSON RPC allows this to be null if it was impossible\n+    // to decode the request's id. Ignore this special case\n+    // and just die horribly.\n+    pub id: u64,\n+    #[serde(default)]\n     pub result: Value,\n+    #[serde(default)]\n     pub error: Value,\n }\n "}, {"sha": "c2952465ef90113a25916882d8e7ce8563d167a3", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -27,7 +27,7 @@ mod main_loop;\n \n use threadpool::ThreadPool;\n use crossbeam_channel::bounded;\n-use flexi_logger::Logger;\n+use flexi_logger::{Logger, Duplicate};\n use libanalysis::WorldState;\n \n use ::{\n@@ -38,6 +38,7 @@ pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n \n fn main() -> Result<()> {\n     Logger::with_env()\n+        .duplicate_to_stderr(Duplicate::All)\n         .log_to_file()\n         .directory(\"log\")\n         .start()?;\n@@ -81,7 +82,7 @@ fn initialize(io: &mut Io) -> Result<()> {\n         RawMsg::Request(req) => {\n             let mut req = Some(req);\n             dispatch::handle_request::<req::Initialize, _>(&mut req, |_params, resp| {\n-                let res = req::InitializeResult { capabilities: caps::SERVER_CAPABILITIES };\n+                let res = req::InitializeResult { capabilities: caps::server_capabilities() };\n                 let resp = resp.into_response(Ok(res))?;\n                 io.send(RawMsg::Response(resp));\n                 Ok(())"}, {"sha": "d4ae2a368dfec01885044af381cf08c1e3edf382", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -1,15 +1,18 @@\n+use std::collections::HashMap;\n+\n use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n-    Command\n+    Command, TextDocumentIdentifier, WorkspaceEdit\n };\n use libanalysis::World;\n use libeditor;\n-use serde_json::to_value;\n+use libsyntax2::TextUnit;\n+use serde_json::{to_value, from_value};\n \n use ::{\n     req::{self, Decoration}, Result,\n     util::FilePath,\n-    conv::{Conv, ConvWith},\n+    conv::{Conv, ConvWith, MapConvWith},\n };\n \n pub fn handle_syntax_tree(\n@@ -29,9 +32,9 @@ pub fn handle_extend_selection(\n     let file = world.file_syntax(&path)?;\n     let line_index = world.file_line_index(&path)?;\n     let selections = params.selections.into_iter()\n-        .map(|r| r.conv_with(&line_index))\n+        .map_conv_with(&line_index)\n         .map(|r| libeditor::extend_selection(&file, r).unwrap_or(r))\n-        .map(|r| r.conv_with(&line_index))\n+        .map_conv_with(&line_index)\n         .collect();\n     Ok(req::ExtendSelectionResult { selections })\n }\n@@ -78,18 +81,71 @@ pub fn handle_code_action(\n     let line_index = world.file_line_index(&path)?;\n     let offset = params.range.conv_with(&line_index).start();\n     let ret = if libeditor::flip_comma(&file, offset).is_some() {\n-        Some(vec![apply_code_action_cmd(ActionId::FlipComma)])\n+        let cmd = apply_code_action_cmd(\n+            ActionId::FlipComma,\n+            params.text_document,\n+            offset,\n+        );\n+        Some(vec![cmd])\n     } else {\n         None\n     };\n     Ok(ret)\n }\n \n-fn apply_code_action_cmd(id: ActionId) -> Command {\n+pub fn handle_execute_command(\n+    world: World,\n+    mut params: req::ExecuteCommandParams,\n+) -> Result<req::ApplyWorkspaceEditParams> {\n+    if params.command.as_str() != \"apply_code_action\" {\n+        bail!(\"unknown cmd: {:?}\", params.command);\n+    }\n+    if params.arguments.len() != 1 {\n+        bail!(\"expected single arg, got {}\", params.arguments.len());\n+    }\n+    let arg = params.arguments.pop().unwrap();\n+    let arg: ActionRequest = from_value(arg)?;\n+    match arg.id {\n+        ActionId::FlipComma => {\n+            let path = arg.text_document.file_path()?;\n+            let file = world.file_syntax(&path)?;\n+            let line_index = world.file_line_index(&path)?;\n+            let edit = match libeditor::flip_comma(&file, arg.offset) {\n+                Some(edit) => edit(),\n+                None => bail!(\"command not applicable\"),\n+            };\n+            let mut changes = HashMap::new();\n+            changes.insert(\n+                arg.text_document.uri,\n+                edit.conv_with(&line_index),\n+            );\n+            let edit = WorkspaceEdit {\n+                changes: Some(changes),\n+                document_changes: None,\n+            };\n+\n+            Ok(req::ApplyWorkspaceEditParams { edit })\n+        }\n+    }\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+struct ActionRequest {\n+    id: ActionId,\n+    text_document: TextDocumentIdentifier,\n+    offset: TextUnit,\n+}\n+\n+fn apply_code_action_cmd(id: ActionId, doc: TextDocumentIdentifier, offset: TextUnit) -> Command {\n+    let action_request = ActionRequest {\n+        id,\n+        text_document: doc,\n+        offset,\n+    };\n     Command {\n         title: id.title().to_string(),\n         command: \"apply_code_action\".to_string(),\n-        arguments: Some(vec![to_value(id).unwrap()]),\n+        arguments: Some(vec![to_value(action_request).unwrap()]),\n     }\n }\n "}, {"sha": "5b7093ad7c79403b8e9016839a5f399417f5e6b8", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -6,6 +6,7 @@ use threadpool::ThreadPool;\n use crossbeam_channel::{Sender, Receiver};\n use languageserver_types::Url;\n use libanalysis::{World, WorldState};\n+use serde_json::to_value;\n \n use {\n     req, dispatch,\n@@ -19,6 +20,7 @@ use {\n         publish_decorations,\n         handle_document_symbol,\n         handle_code_action,\n+        handle_execute_command,\n     },\n };\n \n@@ -79,7 +81,9 @@ pub(super) fn main_loop(\n                         on_notification(io, world, pool, &sender, not)?\n                     }\n                     RawMsg::Response(resp) => {\n-                        error!(\"unexpected response: {:?}\", resp)\n+                        if !pending_requests.remove(&resp.id) {\n+                            error!(\"unexpected response: {:?}\", resp)\n+                        }\n                     }\n                 }\n             }\n@@ -107,22 +111,30 @@ fn on_request(\n     handle_request_on_threadpool::<req::CodeActionRequest>(\n         &mut req, pool, world, sender, handle_code_action,\n     )?;\n-//    dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |(), resp| {\n-//        let world = world.snapshot();\n-//        let sender = sender.clone();\n-//        pool.execute(move || {\n-//            let task = match handle_execute_command(world, params) {\n-//                Ok(req) => Task::Request(req),\n-//                Err(e) => Task::Die(e),\n-//            };\n-//            sender.send(task)\n-//        });\n-//\n-//        let resp = resp.into_response(Ok(()))?;\n-//        io.send(RawMsg::Response(resp));\n-//        shutdown = true;\n-//        Ok(())\n-//    })?;\n+    dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |params, resp| {\n+        io.send(RawMsg::Response(resp.into_response(Ok(None))?));\n+\n+        let world = world.snapshot();\n+        let sender = sender.clone();\n+        pool.execute(move || {\n+            let task = match handle_execute_command(world, params) {\n+                Ok(req) => match to_value(req) {\n+                    Err(e) => Task::Die(e.into()),\n+                    Ok(params) => {\n+                        let request = RawRequest {\n+                            id: 0,\n+                            method: <req::ApplyWorkspaceEdit as req::ClientRequest>::METHOD.to_string(),\n+                            params,\n+                        };\n+                        Task::Request(request)\n+                    }\n+                },\n+                Err(e) => Task::Die(e),\n+            };\n+            sender.send(task)\n+        });\n+        Ok(())\n+    })?;\n \n     let mut shutdown = false;\n     dispatch::handle_request::<req::Shutdown, _>(&mut req, |(), resp| {"}, {"sha": "a22ba4bc31f1f722b3f8ad925cb95cd0586493b5", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be742a587704f27f4e503c50f549aa9ec1527fcc/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=be742a587704f27f4e503c50f549aa9ec1527fcc", "patch": "@@ -6,7 +6,8 @@ pub use languageserver_types::{\n     request::*, notification::*,\n     InitializeResult, PublishDiagnosticsParams,\n     DocumentSymbolParams, DocumentSymbolResponse,\n-    CodeActionParams,\n+    CodeActionParams, ApplyWorkspaceEditParams,\n+    ExecuteCommandParams,\n };\n \n "}]}