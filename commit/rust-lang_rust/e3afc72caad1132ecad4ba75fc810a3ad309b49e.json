{"sha": "e3afc72caad1132ecad4ba75fc810a3ad309b49e", "node_id": "C_kwDOAAsO6NoAKGUzYWZjNzJjYWFkMTEzMmVjYWQ0YmE3NWZjODEwYTNhZDMwOWI0OWU", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-09T13:20:59Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-26T23:11:58Z"}, "message": "remove needless return", "tree": {"sha": "4e19f7402fc8415ff23d1c2401ceb255b47f7a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e19f7402fc8415ff23d1c2401ceb255b47f7a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3afc72caad1132ecad4ba75fc810a3ad309b49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3afc72caad1132ecad4ba75fc810a3ad309b49e", "html_url": "https://github.com/rust-lang/rust/commit/e3afc72caad1132ecad4ba75fc810a3ad309b49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3afc72caad1132ecad4ba75fc810a3ad309b49e/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20b8f10dd1965af7854477eddf16e9bba15eed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20b8f10dd1965af7854477eddf16e9bba15eed9", "html_url": "https://github.com/rust-lang/rust/commit/b20b8f10dd1965af7854477eddf16e9bba15eed9"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d2479168ada5463d770924620483586e3171031c", "filename": "clippy_lints/src/use_retain.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3afc72caad1132ecad4ba75fc810a3ad309b49e/clippy_lints%2Fsrc%2Fuse_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3afc72caad1132ecad4ba75fc810a3ad309b49e/clippy_lints%2Fsrc%2Fuse_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_retain.rs?ref=e3afc72caad1132ecad4ba75fc810a3ad309b49e", "patch": "@@ -220,14 +220,14 @@ fn make_sugg(\n }\n \n fn match_acceptable_def_path(cx: &LateContext<'_>, collect_def_id: DefId) -> bool {\n-    return ACCEPTABLE_METHODS\n+    ACCEPTABLE_METHODS\n         .iter()\n-        .any(|&method| match_def_path(cx, collect_def_id, method));\n+        .any(|&method| match_def_path(cx, collect_def_id, method))\n }\n \n fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n     let expr_ty = cx.typeck_results().expr_ty(expr).peel_refs();\n-    return ACCEPTABLE_TYPES\n+    ACCEPTABLE_TYPES\n         .iter()\n-        .any(|&ty| is_type_diagnostic_item(cx, expr_ty, ty));\n+        .any(|&ty| is_type_diagnostic_item(cx, expr_ty, ty))\n }"}]}