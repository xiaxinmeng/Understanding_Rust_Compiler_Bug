{"sha": "133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzM2IzZDA1YjRjYjlkNDFmZDRlMzMzMmEwYmI5ZTBlYWYwYjBkOTQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-08-11T23:17:56Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-08-11T23:19:51Z"}, "message": "Update syntax for function arguments; tweak object system examples to\nmake mutable fields work.", "tree": {"sha": "f7f111350db7403fcd2c7138a4b8b657370a1012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f111350db7403fcd2c7138a4b8b657370a1012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94", "html_url": "https://github.com/rust-lang/rust/commit/133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d0f9d92ffcbc1fb2bd428ceccf7b19d77510796", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d0f9d92ffcbc1fb2bd428ceccf7b19d77510796", "html_url": "https://github.com/rust-lang/rust/commit/5d0f9d92ffcbc1fb2bd428ceccf7b19d77510796"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "c5f2dbaf33ae31f9585df56d86961cf0d04dfef4", "filename": "doc/rust.texi", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=133b3d05b4cb9d41fd4e3332a0bb9e0eaf0b0d94", "patch": "@@ -1305,14 +1305,14 @@ An example function that accepts an alias parameter:\n @example\n type point3d = @{x: int, y: int, z: int@};\n \n-fn extract_z(&point3d p) -> int @{\n+fn extract_z(p: &point3d) -> int @{\n     ret p.z;\n @}\n @end example\n \n An example function that accepts an alias to a mutable value:\n @example\n-fn incr(& mutable int i) @{\n+fn incr(i: &mutable int) @{\n     i = i + 1;\n @}\n @end example\n@@ -1360,10 +1360,10 @@ indicated with the unary @emph{star} operator @code{*}. Examples of such\n \n An example of an explicit-dereference operation performed on box values:\n @example\n-fn takes_boxed(@@int b) @{\n+fn takes_boxed(b: @@int) @{\n @}\n \n-fn takes_unboxed(int b) @{\n+fn takes_unboxed(b: int) @{\n @}\n \n fn main() @{\n@@ -1716,7 +1716,7 @@ mod foo @{\n         helper(3, 4);\n     @}\n \n-    fn helper(int x, int y) @{\n+    fn helper(x: int, y: int) @{\n         @dots{}\n     @}\n @}\n@@ -1754,15 +1754,15 @@ during compilation, returning the implicit @code{()} value.\n \n An example of a function:\n @example\n-fn add(int x, int y) -> int @{\n+fn add(x: int, y: int) -> int @{\n     ret x + y;\n @}\n @end example\n \n A special kind of function can be declared with a @code{!} character where the\n output slot type would normally be. For example:\n @example\n-fn my_err(str s) -> ! @{\n+fn my_err(s: str) -> ! @{\n     log s;\n     fail;\n @}\n@@ -1781,7 +1781,7 @@ with a @code{ret}, @code{be}, or diverging expression. So, if @code{my_err}\n were declared without the @code{!} annotation, the following code would not\n typecheck:\n @example\n-fn f(int i) -> int @{\n+fn f(i: int) -> int @{\n    if (i == 42) @{\n      ret 42;\n    @}\n@@ -1849,7 +1849,7 @@ each} loop or as the argument in a @code{put each} expression.\n \n An example of an iterator:\n @example\n-iter range(int lo, int hi) -> int @{\n+iter range(lo: int, hi: int) -> int @{\n     let i: int = lo;\n     while (i < hi) @{\n         put i;\n@@ -1881,16 +1881,16 @@ constructor function when used in value context (such as a call).\n \n Example of an object item:\n @example\n-obj counter(int state) @{\n+obj counter(state: @@mutable int) @{\n     fn incr() @{\n-       state += 1;\n+       *state += 1;\n     @}\n     fn get() -> int @{\n-       ret state;\n+       ret *state;\n     @}\n @}\n \n-let c: counter = counter(1);\n+let c: counter = counter(@@mutable 1);\n \n c.incr();\n c.incr();\n@@ -2287,7 +2287,7 @@ slot. @xref{Ref.Item.Fn}.\n \n An example of a @code{fn} type:\n @example\n-fn add(int x, int y) -> int @{\n+fn add(x: int, y: int) -> int @{\n   ret x + y;\n @}\n \n@@ -2308,7 +2308,7 @@ constraints and an output slot. @xref{Ref.Item.Iter}.\n \n An example of an @code{iter} type:\n @example\n-iter range(int x, int y) -> int @{\n+iter range(x: int, y: int) -> int @{\n   while (x < y) @{\n     put x;\n     x += 1;\n@@ -2433,31 +2433,31 @@ a client function using both items via the object type:\n @example\n \n type taker =\n-    state obj @{\n+    obj @{\n         fn take(int);\n     @};\n \n-obj adder(mutable int x) @{\n-    fn take(int y) @{\n-        x += y;\n+obj adder(x: @@mutable int) @{\n+    fn take(y: int) @{\n+        *x += y;\n     @}\n @}\n \n-obj sender(chan[int] c) @{\n-    fn take(int z) @{\n+obj sender(c: chan[int]) @{\n+    fn take(z: int) @{\n         c <| z;\n     @}\n @}\n \n-fn give_ints(taker t) @{\n+fn give_ints(t: taker) @{\n     t.take(1);\n     t.take(2);\n     t.take(3);\n @}\n \n let p: port[int] = port();\n \n-let t1: taker = adder(0);\n+let t1: taker = adder(@@mutable 0);\n let t2: taker = sender(chan(p));\n \n give_ints(t1);\n@@ -2939,7 +2939,7 @@ The result of a @code{spawn} expression is a @code{task} value.\n \n An example of a @code{spawn} expression:\n @example\n-fn helper(chan[u8] out) @{\n+fn helper(out: chan[u8]) @{\n     // do some work.\n     out <| result;\n @}\n@@ -3033,7 +3033,7 @@ and residual arguments that was specified during the binding.\n \n An example of a @code{bind} expression:\n @example\n-fn add(int x, int y) -> int @{\n+fn add(x: int, y: int) -> int @{\n     ret x + y;\n @}\n type single_param_fn = fn(int) -> int;\n@@ -3070,7 +3070,7 @@ and transfers control to the caller frame.\n \n An example of a @code{ret} expression:\n @example\n-fn max(int a, int b) -> int @{\n+fn max(a: int, b: int) -> int @{\n    if (a > b) @{\n       ret a;\n    @}\n@@ -3094,7 +3094,7 @@ last expression in a block.\n \n An example of a @code{be} expression:\n @example\n-fn print_loop(int n) @{\n+fn print_loop(n: int) @{\n   if (n <= 0) @{\n     ret;\n   @} else @{\n@@ -3182,7 +3182,7 @@ diagnostic buffer.\n \n An example of a @code{note} expression:\n @example\n-fn read_file_lines(&str path) -> vec[str] @{\n+fn read_file_lines(path: &str) -> vec[str] @{\n     note path;\n     let r: vec[str];\n     let f: file = open_read(path);\n@@ -3514,11 +3514,11 @@ and statically comparing implied states and their\n specifications. @xref{Ref.Typestate}.\n \n @example\n-pred even(&int x) -> bool @{\n+pred even(x: &int) -> bool @{\n     ret x & 1 == 0;\n @}\n \n-fn print_even(int x) : even(x) @{\n+fn print_even(x: int) : even(x) @{\n     print(x);\n @}\n "}]}