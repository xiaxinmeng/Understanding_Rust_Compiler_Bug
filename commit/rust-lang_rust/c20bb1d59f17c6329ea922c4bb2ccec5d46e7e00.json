{"sha": "c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "node_id": "C_kwDOAAsO6NoAKGMyMGJiMWQ1OWYxN2M2MzI5ZWE5MjJjNGJiMmNjZWM1ZDQ2ZTdlMDA", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-14T20:42:15Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-14T20:42:15Z"}, "message": "Update issue-92893.stderr", "tree": {"sha": "4ebc8e216a33710c0e2c02f5ee01f6555b7464fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebc8e216a33710c0e2c02f5ee01f6555b7464fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "html_url": "https://github.com/rust-lang/rust/commit/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7575f9670f3c837def3d186ae09366c75c7632e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7575f9670f3c837def3d186ae09366c75c7632e", "html_url": "https://github.com/rust-lang/rust/commit/e7575f9670f3c837def3d186ae09366c75c7632e"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "af16e5e3fc871ff162a184071c5b94ba0a8b0c29", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "patch": "@@ -362,12 +362,9 @@ impl ScopeTree {\n         self.parent_map.get(&id).cloned().map(|(p, _)| p)\n     }\n \n-    /// Returns the lifetime of the local variable `var_id`\n-    pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {\n-        self.var_map\n-            .get(&var_id)\n-            .cloned()\n-            .unwrap_or_else(|| bug!(\"no enclosing scope for id {:?}\", var_id))\n+    /// Returns the lifetime of the local variable `var_id`, if any.\n+    pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Option<Scope> {\n+        self.var_map.get(&var_id).cloned()\n     }\n \n     /// Returns the scope when the temp created by `expr_id` will be cleaned up."}, {"sha": "d45ae19752e8c0f0019166c143ffdc60c7a95426", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "patch": "@@ -701,17 +701,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let local_id = self.var_local_id(var, for_guard);\n         let source_info = self.source_info(span);\n         self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(local_id) });\n-        let region_scope = self.region_scope_tree.var_scope(var.local_id);\n-        if schedule_drop {\n+        // Altough there is almost always scope for given variable in corner cases\n+        // like #92893 we might get variable with no scope.\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) && schedule_drop{\n             self.schedule_drop(span, region_scope, local_id, DropKind::Storage);\n         }\n         Place::from(local_id)\n     }\n \n     crate fn schedule_drop_for_binding(&mut self, var: HirId, span: Span, for_guard: ForGuard) {\n         let local_id = self.var_local_id(var, for_guard);\n-        let region_scope = self.region_scope_tree.var_scope(var.local_id);\n-        self.schedule_drop(span, region_scope, local_id, DropKind::Value);\n+        if let Some(region_scope) = self.region_scope_tree.var_scope(var.local_id) {\n+            self.schedule_drop(span, region_scope, local_id, DropKind::Value);\n+        }\n     }\n \n     /// Visit all of the primary bindings in a patterns, that is, visit the"}, {"sha": "a4ae89ecada0881e37e5f9bbd0ff6c6035afe11a", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         self.expr_count += 1;\n \n         if let PatKind::Binding(..) = pat.kind {\n-            let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id);\n+            let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id).unwrap();\n             let ty = self.fcx.typeck_results.borrow().pat_ty(pat);\n             self.record(ty, pat.hir_id, Some(scope), None, pat.span, false);\n         }"}, {"sha": "d2bbb4f110114369f8c5b4ebf83d2a6421f7e9f8", "filename": "src/test/ui/mir/issue-92893.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs?ref=c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "patch": "@@ -0,0 +1,7 @@\n+struct Bug<A = [(); (let a = (), 1).1]> {\n+    //~^ `let` expressions are not supported here\n+    //~^^ `let` expressions in this position are unstable [E0658]\n+    a: A\n+}\n+\n+fn main() {}"}, {"sha": "063b5d66feb456f465f593f4f6d6e11dd75bec5a", "filename": "src/test/ui/mir/issue-92893.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr?ref=c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "patch": "@@ -0,0 +1,20 @@\n+error: `let` expressions are not supported here\n+  --> $DIR/issue-92893.rs:1:22\n+   |\n+LL | struct Bug<A = [(); (let a = (), 1).1]> {\n+   |                      ^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/issue-92893.rs:1:22\n+   |\n+LL | struct Bug<A = [(); (let a = (), 1).1]> {\n+   |                      ^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6ed141fa4a5a6dabe6b5b73560265eb98ef81b21", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "patch": "@@ -59,7 +59,7 @@ pub(super) fn check<'tcx>(\n                 if let Some(indexed_extent) = indexed_extent {\n                     let parent_def_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n                     let region_scope_tree = cx.tcx.region_scope_tree(parent_def_id);\n-                    let pat_extent = region_scope_tree.var_scope(pat.hir_id.local_id);\n+                    let pat_extent = region_scope_tree.var_scope(pat.hir_id.local_id).unwrap();\n                     if region_scope_tree.is_subscope_of(indexed_extent, pat_extent) {\n                         return;\n                     }\n@@ -262,7 +262,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                 match res {\n                     Res::Local(hir_id) => {\n                         let parent_def_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                        let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n+                        let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id).unwrap();\n                         if index_used_directly {\n                             self.indexed_directly.insert(\n                                 seqvar.segments[0].ident.name,"}, {"sha": "1ab7f52110ce7c3742aeec202c9ccd4003959e99", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=c20bb1d59f17c6329ea922c4bb2ccec5d46e7e00", "patch": "@@ -160,8 +160,8 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n \n fn is_shadow(cx: &LateContext<'_>, owner: LocalDefId, first: ItemLocalId, second: ItemLocalId) -> bool {\n     let scope_tree = cx.tcx.region_scope_tree(owner.to_def_id());\n-    let first_scope = scope_tree.var_scope(first);\n-    let second_scope = scope_tree.var_scope(second);\n+    let first_scope = scope_tree.var_scope(first).unwrap();\n+    let second_scope = scope_tree.var_scope(second).unwrap();\n     scope_tree.is_subscope_of(second_scope, first_scope)\n }\n "}]}