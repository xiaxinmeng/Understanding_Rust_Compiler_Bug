{"sha": "6bcc33e5b7e32a79865be4893fcc33caf8d831d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiY2MzM2U1YjdlMzJhNzk4NjViZTQ4OTNmY2MzM2NhZjhkODMxZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T17:39:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T17:39:09Z"}, "message": "Better imports", "tree": {"sha": "0dcd37ddfdc8cf4e4fddbed04bd6b03ffb1b5241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dcd37ddfdc8cf4e4fddbed04bd6b03ffb1b5241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bcc33e5b7e32a79865be4893fcc33caf8d831d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcc33e5b7e32a79865be4893fcc33caf8d831d6", "html_url": "https://github.com/rust-lang/rust/commit/6bcc33e5b7e32a79865be4893fcc33caf8d831d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bcc33e5b7e32a79865be4893fcc33caf8d831d6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3820b26a9325b26acd614bcad57d410e7286226e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3820b26a9325b26acd614bcad57d410e7286226e", "html_url": "https://github.com/rust-lang/rust/commit/3820b26a9325b26acd614bcad57d410e7286226e"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "44f967acbc43da5ec826e50e2062f71a3afbccd0", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6bcc33e5b7e32a79865be4893fcc33caf8d831d6/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcc33e5b7e32a79865be4893fcc33caf8d831d6/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=6bcc33e5b7e32a79865be4893fcc33caf8d831d6", "patch": "@@ -8,11 +8,11 @@ use std::{\n use rustc_lexer::unescape::{unescape_literal, Mode};\n \n use crate::{\n-    ast::{AstToken, Comment, RawString, String, Whitespace},\n+    ast::{self, AstToken},\n     TextRange, TextSize,\n };\n \n-impl Comment {\n+impl ast::Comment {\n     pub fn kind(&self) -> CommentKind {\n         kind_by_prefix(self.text())\n     }\n@@ -80,7 +80,7 @@ fn kind_by_prefix(text: &str) -> CommentKind {\n     panic!(\"bad comment text: {:?}\", text)\n }\n \n-impl Whitespace {\n+impl ast::Whitespace {\n     pub fn spans_multiple_lines(&self) -> bool {\n         let text = self.text();\n         text.find('\\n').map_or(false, |idx| text[idx + 1..].contains('\\n'))\n@@ -138,19 +138,19 @@ pub trait HasQuotes: AstToken {\n     }\n }\n \n-impl HasQuotes for String {}\n-impl HasQuotes for RawString {}\n+impl HasQuotes for ast::String {}\n+impl HasQuotes for ast::RawString {}\n \n pub trait HasStringValue: HasQuotes {\n     fn value(&self) -> Option<Cow<'_, str>>;\n }\n \n-impl HasStringValue for String {\n+impl HasStringValue for ast::String {\n     fn value(&self) -> Option<Cow<'_, str>> {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n-        let mut buf = std::string::String::with_capacity(text.len());\n+        let mut buf = String::with_capacity(text.len());\n         let mut has_error = false;\n         unescape_literal(text, Mode::Str, &mut |_, unescaped_char| match unescaped_char {\n             Ok(c) => buf.push(c),\n@@ -166,15 +166,15 @@ impl HasStringValue for String {\n     }\n }\n \n-impl HasStringValue for RawString {\n+impl HasStringValue for ast::RawString {\n     fn value(&self) -> Option<Cow<'_, str>> {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n         Some(Cow::Borrowed(text))\n     }\n }\n \n-impl RawString {\n+impl ast::RawString {\n     pub fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n         let contents_range = self.text_range_between_quotes()?;\n         assert!(TextRange::up_to(contents_range.len()).contains_range(range));\n@@ -500,7 +500,7 @@ pub trait HasFormatSpecifier: AstToken {\n     }\n }\n \n-impl HasFormatSpecifier for String {\n+impl HasFormatSpecifier for ast::String {\n     fn char_ranges(\n         &self,\n     ) -> Option<Vec<(TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>> {\n@@ -521,7 +521,7 @@ impl HasFormatSpecifier for String {\n     }\n }\n \n-impl HasFormatSpecifier for RawString {\n+impl HasFormatSpecifier for ast::RawString {\n     fn char_ranges(\n         &self,\n     ) -> Option<Vec<(TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>> {"}]}