{"sha": "9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNzBkM2EwNTEwN2JkY2FjNmZiNjJkM2JkNTM4MGUxZDdjNzliNWI=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-05-05T22:39:25Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-05-05T22:40:51Z"}, "message": "Add `get_mut` methods to the `RefCell` and `Cell`\n\nThis is safe since the borrow checker ensures that we have the only\nmutable reference to the struct, thus we can safely borrow its interior.\n\nTracking issue is #33444.", "tree": {"sha": "0e3e17d388edf4a919a963a2da841fb3842c6628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e3e17d388edf4a919a963a2da841fb3842c6628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b", "html_url": "https://github.com/rust-lang/rust/commit/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413bafdabf5c5716fd823ac9a6232c48e2ba2902", "url": "https://api.github.com/repos/rust-lang/rust/commits/413bafdabf5c5716fd823ac9a6232c48e2ba2902", "html_url": "https://github.com/rust-lang/rust/commit/413bafdabf5c5716fd823ac9a6232c48e2ba2902"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "19c778b023490282790d9b6993de94a00cc0828f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b", "patch": "@@ -232,6 +232,18 @@ impl<T:Copy> Cell<T> {\n     pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n+    /// that we possess the only reference.\n+    #[inline]\n+    #[unstable(feature = \"cell_get_mut\", issue = \"33444\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -455,6 +467,18 @@ impl<T: ?Sized> RefCell<T> {\n     pub unsafe fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `RefCell` mutably (at compile-time) so there is no\n+    /// need for dynamic checks.\n+    #[inline]\n+    #[unstable(feature = \"cell_get_mut\", issue=\"33444\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}