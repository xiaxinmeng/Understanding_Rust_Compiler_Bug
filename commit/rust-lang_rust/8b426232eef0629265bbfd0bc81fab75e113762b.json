{"sha": "8b426232eef0629265bbfd0bc81fab75e113762b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNDI2MjMyZWVmMDYyOTI2NWJiZmQwYmM4MWZhYjc1ZTExMzc2MmI=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-11-18T15:18:13Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-11-21T13:20:22Z"}, "message": "Check arg/ret sizedness at ExprKind::Path.", "tree": {"sha": "9c8abbd76eb598fd3a7345a584e1ecb0d3ce795b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c8abbd76eb598fd3a7345a584e1ecb0d3ce795b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b426232eef0629265bbfd0bc81fab75e113762b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b426232eef0629265bbfd0bc81fab75e113762b", "html_url": "https://github.com/rust-lang/rust/commit/8b426232eef0629265bbfd0bc81fab75e113762b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b426232eef0629265bbfd0bc81fab75e113762b/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682b33a1103695de3c6520d55204b3c3d45f68ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/682b33a1103695de3c6520d55204b3c3d45f68ec", "html_url": "https://github.com/rust-lang/rust/commit/682b33a1103695de3c6520d55204b3c3d45f68ec"}], "stats": {"total": 92, "additions": 48, "deletions": 44}, "files": [{"sha": "572979d063d2f281aa6464ef7e588c0b12c3e6b9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8b426232eef0629265bbfd0bc81fab75e113762b", "patch": "@@ -3956,6 +3956,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.types.err\n                 };\n \n+                if let ty::FnDef(..) = ty.sty {\n+                    let fn_sig = ty.fn_sig(tcx);\n+                    if !tcx.features().unsized_locals {\n+                        // We want to remove some Sized bounds from std functions,\n+                        // but don't want to expose the removal to stable Rust.\n+                        // i.e. we don't want to allow\n+                        //\n+                        // ```rust\n+                        // drop as fn(str);\n+                        // ```\n+                        //\n+                        // to work in stable even if the Sized bound on `drop` is relaxed.\n+                        for i in 0..fn_sig.inputs().skip_binder().len() {\n+                            let input = tcx.erase_late_bound_regions(&fn_sig.input(i));\n+                            self.require_type_is_sized_deferred(input, expr.span,\n+                                                                traits::SizedArgumentType);\n+                        }\n+                    }\n+                    // Here we want to prevent struct constructors from returning unsized types.\n+                    // There were two cases this happened: fn pointer coercion in stable\n+                    // and usual function call in presense of unsized_locals.\n+                    let output = tcx.erase_late_bound_regions(&fn_sig.output());\n+                    self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n+                }\n+\n                 // We always require that the type provided as the value for\n                 // a type parameter outlives the moment of instantiation.\n                 let substs = self.tables.borrow().node_substs(expr.hir_id);"}, {"sha": "fdf8157dcf833918233aacc1107973455570d2df", "filename": "src/test/ui/issues/issue-30355.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/682b33a1103695de3c6520d55204b3c3d45f68ec/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/682b33a1103695de3c6520d55204b3c3d45f68ec/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr?ref=682b33a1103695de3c6520d55204b3c3d45f68ec", "patch": "@@ -1,22 +0,0 @@\n-error[E0161]: cannot move a value of type X: the size of X cannot be statically determined\n-  --> $DIR/issue-30355.rs:15:6\n-   |\n-LL |     &X(*Y)\n-   |      ^^^^^\n-\n-error[E0161]: cannot move a value of type [u8]: the size of [u8] cannot be statically determined\n-  --> $DIR/issue-30355.rs:15:8\n-   |\n-LL |     &X(*Y)\n-   |        ^^\n-\n-error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n-  --> $DIR/issue-30355.rs:15:8\n-   |\n-LL |     &X(*Y)\n-   |        ^^ cannot move out of here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0161, E0508.\n-For more information about an error, try `rustc --explain E0161`."}, {"sha": "8d5eac06c43795cc630bfcdb8d480eb074a6dc89", "filename": "src/test/ui/issues/issue-30355.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Fissues%2Fissue-30355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Fissues%2Fissue-30355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.rs?ref=8b426232eef0629265bbfd0bc81fab75e113762b", "patch": "@@ -13,9 +13,7 @@ pub struct X([u8]);\n pub static Y: &'static X = {\n     const Y: &'static [u8] = b\"\";\n     &X(*Y)\n-    //~^ ERROR cannot move out\n-    //~^^ ERROR cannot move a\n-    //~^^^ ERROR cannot move a\n+    //~^ ERROR E0277\n };\n \n fn main() {}"}, {"sha": "1b55f20e6b431662ad619ac6c73202c72c734b52", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=8b426232eef0629265bbfd0bc81fab75e113762b", "patch": "@@ -1,22 +1,14 @@\n-error[E0161]: cannot move a value of type X: the size of X cannot be statically determined\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/issue-30355.rs:15:6\n    |\n LL |     &X(*Y)\n-   |      ^^^^^\n-\n-error[E0161]: cannot move a value of type [u8]: the size of [u8] cannot be statically determined\n-  --> $DIR/issue-30355.rs:15:8\n+   |      ^ doesn't have a size known at compile-time\n    |\n-LL |     &X(*Y)\n-   |        ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-30355.rs:15:8\n-   |\n-LL |     &X(*Y)\n-   |        ^^ cannot move out of borrowed content\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0161, E0507.\n-For more information about an error, try `rustc --explain E0161`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8ca88edcb6add6da602ab0aa79b0d1f46e6db111", "filename": "src/test/ui/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs?ref=8b426232eef0629265bbfd0bc81fab75e113762b", "patch": "@@ -23,4 +23,6 @@ fn main() {\n     //~^ERROR E0277\n     udrop::<A<[u8]>>(A { 0: *foo() });\n     //~^ERROR E0277\n+    udrop::<A<[u8]>>(A(*foo()));\n+    //~^ERROR E0277\n }"}, {"sha": "0ca60e8dea0d9a709b768e56e0056bb208217494", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=8b426232eef0629265bbfd0bc81fab75e113762b", "patch": "@@ -20,6 +20,17 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    = note: required because it appears within the type `A<[u8]>`\n    = note: structs must have a statically known size to be initialized\n \n-error: aborting due to 2 previous errors\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/unsized-exprs.rs:26:22\n+   |\n+LL |     udrop::<A<[u8]>>(A(*foo()));\n+   |                      ^ doesn't have a size known at compile-time\n+   |\n+   = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `A<[u8]>`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "3fb5a002e0e3c4e6468f5f8afc1dc0415a16cf37", "filename": "src/test/ui/unsized-locals/unsized-exprs2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b426232eef0629265bbfd0bc81fab75e113762b/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs?ref=8b426232eef0629265bbfd0bc81fab75e113762b", "patch": "@@ -21,6 +21,4 @@ impl std::ops::Add<i32> for A<[u8]> {\n fn main() {\n     udrop::<[u8]>(foo()[..]);\n     //~^ERROR cannot move out of indexed content\n-    // FIXME: should be error\n-    udrop::<A<[u8]>>(A(*foo()));\n }"}]}