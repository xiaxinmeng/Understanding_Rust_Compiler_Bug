{"sha": "b1709d25e12fbffca53c30d05c16854256185900", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzA5ZDI1ZTEyZmJmZmNhNTNjMzBkMDVjMTY4NTQyNTYxODU5MDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-01T19:00:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-01T19:00:08Z"}, "message": "update test", "tree": {"sha": "9c5227def977f6d9c8a29925dca1d838be84e58c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c5227def977f6d9c8a29925dca1d838be84e58c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1709d25e12fbffca53c30d05c16854256185900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1709d25e12fbffca53c30d05c16854256185900", "html_url": "https://github.com/rust-lang/rust/commit/b1709d25e12fbffca53c30d05c16854256185900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1709d25e12fbffca53c30d05c16854256185900/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48433d920ad27ab57a27f087bcdec79ab36bfdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d48433d920ad27ab57a27f087bcdec79ab36bfdc", "html_url": "https://github.com/rust-lang/rust/commit/d48433d920ad27ab57a27f087bcdec79ab36bfdc"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "bca2b8410fa846aad28c80603ddac56442f6d900", "filename": "src/test/run-pass/command-pre-exec.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b1709d25e12fbffca53c30d05c16854256185900/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1709d25e12fbffca53c30d05c16854256185900/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs?ref=b1709d25e12fbffca53c30d05c16854256185900", "patch": "@@ -29,53 +29,53 @@ fn main() {\n \n     let me = env::current_exe().unwrap();\n \n-    let output = Command::new(&me).arg(\"test1\").before_exec(|| {\n+    let output = unsafe { Command::new(&me).arg(\"test1\").pre_exec(|| {\n         println!(\"hello\");\n         Ok(())\n-    }).output().unwrap();\n+    }).output().unwrap() };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert_eq!(output.stdout, b\"hello\\nhello2\\n\");\n \n-    let output = Command::new(&me).arg(\"test2\").before_exec(|| {\n+    let output = unsafe { Command::new(&me).arg(\"test2\").pre_exec(|| {\n         env::set_var(\"FOO\", \"BAR\");\n         Ok(())\n-    }).output().unwrap();\n+    }).output().unwrap() };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());\n \n-    let output = Command::new(&me).arg(\"test3\").before_exec(|| {\n+    let output = unsafe { Command::new(&me).arg(\"test3\").pre_exec(|| {\n         env::set_current_dir(\"/\").unwrap();\n         Ok(())\n-    }).output().unwrap();\n+    }).output().unwrap() };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());\n \n-    let output = Command::new(&me).arg(\"bad\").before_exec(|| {\n+    let output = unsafe { Command::new(&me).arg(\"bad\").pre_exec(|| {\n         Err(Error::from_raw_os_error(102))\n-    }).output().unwrap_err();\n+    }).output().unwrap_err() };\n     assert_eq!(output.raw_os_error(), Some(102));\n \n     let pid = unsafe { libc::getpid() };\n     assert!(pid >= 0);\n-    let output = Command::new(&me).arg(\"empty\").before_exec(move || {\n-        let child = unsafe { libc::getpid() };\n+    let output = unsafe { Command::new(&me).arg(\"empty\").pre_exec(move || {\n+        let child = libc::getpid();\n         assert!(child >= 0);\n         assert!(pid != child);\n         Ok(())\n-    }).output().unwrap();\n+    }).output().unwrap() };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());\n \n     let mem = Arc::new(AtomicUsize::new(0));\n     let mem2 = mem.clone();\n-    let output = Command::new(&me).arg(\"empty\").before_exec(move || {\n+    let output = unsafe { Command::new(&me).arg(\"empty\").pre_exec(move || {\n         assert_eq!(mem2.fetch_add(1, Ordering::SeqCst), 0);\n         Ok(())\n-    }).output().unwrap();\n+    }).output().unwrap() };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());", "previous_filename": "src/test/run-pass/command-before-exec.rs"}]}