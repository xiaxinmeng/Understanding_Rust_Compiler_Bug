{"sha": "d2ba5718508aa16ef908aa004450eb96bf2f3233", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYmE1NzE4NTA4YWExNmVmOTA4YWEwMDQ0NTBlYjk2YmYyZjMyMzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T11:17:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-29T11:17:53Z"}, "message": "Rollup merge of #63880 - RalfJung:miri-meta, r=oli-obk\n\nValidation: check raw wide pointer metadata\n\nWhile I was at it, I also added a missing check for slices not to be too big.\n\nr? @oli-obk\nFixes https://github.com/rust-lang/miri/issues/918", "tree": {"sha": "41a94bb9b8164b9d00319c73f8b9ce394f4deadb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41a94bb9b8164b9d00319c73f8b9ce394f4deadb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2ba5718508aa16ef908aa004450eb96bf2f3233", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZ7RiCRBK7hj4Ov3rIwAAdHIIAG+wviylyUC+wHOIl27MQEp+\nBnyFzQGGmV3DjotwIRibSrC2+LodpL90wP1rj7fv1Ks0D8oiRi+kr+dTqMTpHBHF\n8R8PgLpo+V5KMGg8Ho/o5iE94j/xZzw46Uite12aYy8Aw3VWZPm+1DIeYEW3QOxv\nEEKuKS4ysA8CpZfVIUUVLur9WLrtxXY56wTrBsN70jHKxFMczvIArcx3Tk/2junw\nSxBxsNNPI1YUqBTcrZuPTdFbbP5jBQUUNd36CHKnrVRZyYyV+EcuMl2Jk0Ph9Gm3\nGeNI1F0mSauAViBP8laJa+M60lbLApGiLtO0HvhoEcVn8xI2KS3NXI8yxGEyghg=\n=m0s7\n-----END PGP SIGNATURE-----\n", "payload": "tree 41a94bb9b8164b9d00319c73f8b9ce394f4deadb\nparent e4e6b01ca110adfb0a580a35a6352a32c3e6789a\nparent 04580b6235188ffd6bb20387e8eeb9a102fafb50\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567077473 +0200\ncommitter GitHub <noreply@github.com> 1567077473 +0200\n\nRollup merge of #63880 - RalfJung:miri-meta, r=oli-obk\n\nValidation: check raw wide pointer metadata\n\nWhile I was at it, I also added a missing check for slices not to be too big.\n\nr? @oli-obk\nFixes https://github.com/rust-lang/miri/issues/918\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ba5718508aa16ef908aa004450eb96bf2f3233", "html_url": "https://github.com/rust-lang/rust/commit/d2ba5718508aa16ef908aa004450eb96bf2f3233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2ba5718508aa16ef908aa004450eb96bf2f3233/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e6b01ca110adfb0a580a35a6352a32c3e6789a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e6b01ca110adfb0a580a35a6352a32c3e6789a", "html_url": "https://github.com/rust-lang/rust/commit/e4e6b01ca110adfb0a580a35a6352a32c3e6789a"}, {"sha": "04580b6235188ffd6bb20387e8eeb9a102fafb50", "url": "https://api.github.com/repos/rust-lang/rust/commits/04580b6235188ffd6bb20387e8eeb9a102fafb50", "html_url": "https://github.com/rust-lang/rust/commit/04580b6235188ffd6bb20387e8eeb9a102fafb50"}], "stats": {"total": 278, "additions": 177, "deletions": 101}, "files": [{"sha": "c2505547c5b4fe2103ccadd20db8588f25aff88e", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 54, "deletions": 35, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d2ba5718508aa16ef908aa004450eb96bf2f3233/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ba5718508aa16ef908aa004450eb96bf2f3233/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=d2ba5718508aa16ef908aa004450eb96bf2f3233", "patch": "@@ -11,7 +11,7 @@ use std::hash::Hash;\n \n use super::{\n     GlobalAlloc, InterpResult,\n-    OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n+    Scalar, OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n };\n \n macro_rules! throw_validation_failure {\n@@ -250,6 +250,47 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         self.path.truncate(path_len);\n         Ok(())\n     }\n+\n+    fn check_wide_ptr_meta(\n+        &mut self,\n+        meta: Option<Scalar<M::PointerTag>>,\n+        pointee: TyLayout<'tcx>,\n+    ) -> InterpResult<'tcx> {\n+        let tail = self.ecx.tcx.struct_tail_erasing_lifetimes(pointee.ty, self.ecx.param_env);\n+        match tail.sty {\n+            ty::Dynamic(..) => {\n+                let vtable = meta.unwrap();\n+                try_validation!(\n+                    self.ecx.memory.check_ptr_access(\n+                        vtable,\n+                        3*self.ecx.tcx.data_layout.pointer_size, // drop, size, align\n+                        self.ecx.tcx.data_layout.pointer_align.abi,\n+                    ),\n+                    \"dangling or unaligned vtable pointer in wide pointer or too small vtable\",\n+                    self.path\n+                );\n+                try_validation!(self.ecx.read_drop_type_from_vtable(vtable),\n+                    \"invalid drop fn in vtable\", self.path);\n+                try_validation!(self.ecx.read_size_and_align_from_vtable(vtable),\n+                    \"invalid size or align in vtable\", self.path);\n+                // FIXME: More checks for the vtable.\n+            }\n+            ty::Slice(..) | ty::Str => {\n+                let _len = try_validation!(meta.unwrap().to_usize(self.ecx),\n+                    \"non-integer slice length in wide pointer\", self.path);\n+                // We do not check that `len * elem_size <= isize::MAX`:\n+                // that is only required for references, and there it falls out of the\n+                // \"dereferencable\" check performed by Stacked Borrows.\n+            }\n+            ty::Foreign(..) => {\n+                // Unsized, but not wide.\n+            }\n+            _ =>\n+                bug!(\"Unexpected unsized type tail: {:?}\", tail),\n+        }\n+\n+        Ok(())\n+    }\n }\n \n impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n@@ -341,56 +382,34 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 }\n             }\n             ty::RawPtr(..) => {\n+                // Check pointer part.\n                 if self.ref_tracking_for_consts.is_some() {\n                     // Integers/floats in CTFE: For consistency with integers, we do not\n                     // accept undef.\n                     let _ptr = try_validation!(value.to_scalar_ptr(),\n                         \"undefined address in raw pointer\", self.path);\n-                    let _meta = try_validation!(value.to_meta(),\n-                        \"uninitialized data in raw fat pointer metadata\", self.path);\n                 } else {\n                     // Remain consistent with `usize`: Accept anything.\n                 }\n+\n+                // Check metadata.\n+                let meta = try_validation!(value.to_meta(),\n+                    \"uninitialized data in wide pointer metadata\", self.path);\n+                let layout = self.ecx.layout_of(value.layout.ty.builtin_deref(true).unwrap().ty)?;\n+                if layout.is_unsized() {\n+                    self.check_wide_ptr_meta(meta, layout)?;\n+                }\n             }\n             _ if ty.is_box() || ty.is_region_ptr() => {\n-                // Handle fat pointers.\n+                // Handle wide pointers.\n                 // Check metadata early, for better diagnostics\n                 let ptr = try_validation!(value.to_scalar_ptr(),\n                     \"undefined address in pointer\", self.path);\n                 let meta = try_validation!(value.to_meta(),\n-                    \"uninitialized data in fat pointer metadata\", self.path);\n+                    \"uninitialized data in wide pointer metadata\", self.path);\n                 let layout = self.ecx.layout_of(value.layout.ty.builtin_deref(true).unwrap().ty)?;\n                 if layout.is_unsized() {\n-                    let tail = self.ecx.tcx.struct_tail_erasing_lifetimes(layout.ty,\n-                                                                          self.ecx.param_env);\n-                    match tail.sty {\n-                        ty::Dynamic(..) => {\n-                            let vtable = meta.unwrap();\n-                            try_validation!(\n-                                self.ecx.memory.check_ptr_access(\n-                                    vtable,\n-                                    3*self.ecx.tcx.data_layout.pointer_size, // drop, size, align\n-                                    self.ecx.tcx.data_layout.pointer_align.abi,\n-                                ),\n-                                \"dangling or unaligned vtable pointer or too small vtable\",\n-                                self.path\n-                            );\n-                            try_validation!(self.ecx.read_drop_type_from_vtable(vtable),\n-                                \"invalid drop fn in vtable\", self.path);\n-                            try_validation!(self.ecx.read_size_and_align_from_vtable(vtable),\n-                                \"invalid size or align in vtable\", self.path);\n-                            // FIXME: More checks for the vtable.\n-                        }\n-                        ty::Slice(..) | ty::Str => {\n-                            try_validation!(meta.unwrap().to_usize(self.ecx),\n-                                \"non-integer slice length in fat pointer\", self.path);\n-                        }\n-                        ty::Foreign(..) => {\n-                            // Unsized, but not fat.\n-                        }\n-                        _ =>\n-                            bug!(\"Unexpected unsized type tail: {:?}\", tail),\n-                    }\n+                    self.check_wide_ptr_meta(meta, layout)?;\n                 }\n                 // Make sure this is dereferencable and all.\n                 let (size, align) = self.ecx.size_and_align_of(meta, layout)?"}, {"sha": "765ed60ee9742a10965730de39e64293a3ca394c", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "renamed", "additions": 49, "deletions": 24, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d2ba5718508aa16ef908aa004450eb96bf2f3233/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ba5718508aa16ef908aa004450eb96bf2f3233/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=d2ba5718508aa16ef908aa004450eb96bf2f3233", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n #![allow(unused)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n@@ -28,7 +29,9 @@ struct BadSliceRepr {\n union SliceTransmute {\n     repr: SliceRepr,\n     bad: BadSliceRepr,\n+    addr: usize,\n     slice: &'static [u8],\n+    raw_slice: *const [u8],\n     str: &'static str,\n     my_str: &'static MyStr,\n     my_slice: &'static MySliceBool,\n@@ -59,7 +62,9 @@ union DynTransmute {\n     repr: DynRepr,\n     repr2: DynRepr2,\n     bad: BadDynRepr,\n+    addr: usize,\n     rust: &'static dyn Trait,\n+    raw_rust: *const dyn Trait,\n }\n \n trait Trait {}\n@@ -72,39 +77,37 @@ struct MyStr(str);\n struct MySlice<T: ?Sized>(bool, T);\n type MySliceBool = MySlice<[bool]>;\n \n+// # str\n // OK\n-const A: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 1 } }.str};\n+const STR_VALID: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 1 } }.str};\n // bad str\n-const B: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n+const STR_TOO_LONG: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n //~^ ERROR it is undefined behavior to use this value\n // bad str\n-const C: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n+const STR_LENGTH_PTR: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n //~^ ERROR it is undefined behavior to use this value\n // bad str in user-defined unsized type\n-const C2: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n+const MY_STR_LENGTH_PTR: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n //~^ ERROR it is undefined behavior to use this value\n \n-// OK\n-const A2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 1 } }.slice};\n-// bad slice\n-const B2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n+// invalid UTF-8\n+const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n //~^ ERROR it is undefined behavior to use this value\n-// bad slice\n-const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n+// invalid UTF-8 in user-defined str-like\n+const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n //~^ ERROR it is undefined behavior to use this value\n \n-// bad trait object\n-const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n-//~^ ERROR it is undefined behavior to use this value\n-// bad trait object\n-const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+// # slice\n+// OK\n+const SLICE_VALID: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 1 } }.slice};\n+// bad slice: length uninit\n+const SLICE_LENGTH_UNINIT: &[u8] = unsafe { SliceTransmute { addr: 42 }.slice};\n //~^ ERROR it is undefined behavior to use this value\n-// bad trait object\n-const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+// bad slice: length too big\n+const SLICE_TOO_LONG: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n //~^ ERROR it is undefined behavior to use this value\n-\n-// bad data *inside* the trait object\n-const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+// bad slice: length not an int\n+const SLICE_LENGTH_PTR: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n //~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the slice\n@@ -120,12 +123,34 @@ const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false\n const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n //~^ ERROR it is undefined behavior to use this value\n \n-// invalid UTF-8\n-const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n+// # raw slice\n+const RAW_SLICE_VALID: *const [u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 1 } }.raw_slice}; // ok\n+const RAW_SLICE_TOO_LONG: *const [u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.raw_slice}; // ok because raw\n+const RAW_SLICE_MUCH_TOO_LONG: *const [u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: usize::max_value() } }.raw_slice}; // ok because raw\n+const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe { SliceTransmute { addr: 42 }.raw_slice};\n //~^ ERROR it is undefined behavior to use this value\n-// invalid UTF-8 in user-defined str-like\n-const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n+\n+// # trait object\n+// bad trait object\n+const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+//~^ ERROR it is undefined behavior to use this value\n+// bad trait object\n+const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+//~^ ERROR it is undefined behavior to use this value\n+// bad trait object\n+const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+//~^ ERROR it is undefined behavior to use this value\n+\n+// bad data *inside* the trait object\n+const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+//~^ ERROR it is undefined behavior to use this value\n+\n+// # raw trait object\n+const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 0 } }.rust};\n+//~^ ERROR it is undefined behavior to use this value\n+const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.raw_rust};\n //~^ ERROR it is undefined behavior to use this value\n+const RAW_TRAIT_OBJ_CONTENT_INVALID: *const dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl } as *const _; // ok because raw\n \n fn main() {\n }", "previous_filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.rs"}, {"sha": "88d8af802619306667f00e503ddf72a0295dda92", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "renamed", "additions": 74, "deletions": 42, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/d2ba5718508aa16ef908aa004450eb96bf2f3233/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2ba5718508aa16ef908aa004450eb96bf2f3233/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=d2ba5718508aa16ef908aa004450eb96bf2f3233", "patch": "@@ -1,115 +1,147 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:78:1\n+  --> $DIR/ub-wide-ptr.rs:84:1\n    |\n-LL | const B: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n+LL | const STR_TOO_LONG: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:81:1\n+  --> $DIR/ub-wide-ptr.rs:87:1\n    |\n-LL | const C: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n+LL | const STR_LENGTH_PTR: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:84:1\n+  --> $DIR/ub-wide-ptr.rs:90:1\n    |\n-LL | const C2: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n+LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:90:1\n+  --> $DIR/ub-wide-ptr.rs:94:1\n    |\n-LL | const B2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n-\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:93:1\n-   |\n-LL | const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n+LL | const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:97:1\n+  --> $DIR/ub-wide-ptr.rs:97:1\n    |\n-LL | const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer or too small vtable\n+LL | const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:100:1\n+  --> $DIR/ub-wide-ptr.rs:104:1\n    |\n-LL | const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer or too small vtable\n+LL | const SLICE_LENGTH_UNINIT: &[u8] = unsafe { SliceTransmute { addr: 42 }.slice};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in wide pointer metadata\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:103:1\n+  --> $DIR/ub-wide-ptr.rs:107:1\n    |\n-LL | const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer or too small vtable\n+LL | const SLICE_TOO_LONG: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:107:1\n+  --> $DIR/ub-wide-ptr.rs:110:1\n    |\n-LL | const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n+LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:111:1\n+  --> $DIR/ub-wide-ptr.rs:114:1\n    |\n LL | const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:117:1\n+  --> $DIR/ub-wide-ptr.rs:120:1\n    |\n LL | const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:120:1\n+  --> $DIR/ub-wide-ptr.rs:123:1\n    |\n LL | const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:124:1\n+  --> $DIR/ub-wide-ptr.rs:130:1\n    |\n-LL | const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n+LL | const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe { SliceTransmute { addr: 42 }.raw_slice};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in wide pointer metadata\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub-fat-ptr.rs:127:1\n+  --> $DIR/ub-wide-ptr.rs:135:1\n    |\n-LL | const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0\n+LL | const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:138:1\n+   |\n+LL | const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:141:1\n+   |\n+LL | const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:145:1\n+   |\n+LL | const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:149:1\n+   |\n+LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 0 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:151:1\n+   |\n+LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.raw_rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0080`.", "previous_filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr"}]}