{"sha": "4a51e9c5493ff80d3783a51d130a87a08b8de74d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNTFlOWM1NDkzZmY4MGQzNzgzYTUxZDEzMGE4N2EwOGI4ZGU3NGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-31T05:54:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-06-06T23:51:24Z"}, "message": "Fix resolve to not permit refs to type vars from outer fns\n(Fixes #14603)", "tree": {"sha": "e761b846e420c33979c1a89d5008352fd997267e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e761b846e420c33979c1a89d5008352fd997267e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a51e9c5493ff80d3783a51d130a87a08b8de74d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a51e9c5493ff80d3783a51d130a87a08b8de74d", "html_url": "https://github.com/rust-lang/rust/commit/4a51e9c5493ff80d3783a51d130a87a08b8de74d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a51e9c5493ff80d3783a51d130a87a08b8de74d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fecd10428bbefd162a75512acb807dd65dcb1dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fecd10428bbefd162a75512acb807dd65dcb1dd", "html_url": "https://github.com/rust-lang/rust/commit/3fecd10428bbefd162a75512acb807dd65dcb1dd"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "9bfa0e10aedeff3ba653d0e483356b144c51c8eb", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4a51e9c5493ff80d3783a51d130a87a08b8de74d", "patch": "@@ -266,8 +266,8 @@ enum RibKind {\n               // parent;   method itself\n     MethodRibKind(NodeId, MethodSort),\n \n-    // We passed through a function *item* scope. Disallow upvars.\n-    OpaqueFunctionRibKind,\n+    // We passed through an item scope. Disallow upvars.\n+    ItemRibKind,\n \n     // We're in a constant item. Can't refer to dynamic stuff.\n     ConstantItemRibKind\n@@ -3418,7 +3418,8 @@ impl<'a> Resolver<'a> {\n                 def = d;\n                 is_ty_param = false;\n             }\n-            DlDef(d @ DefTyParam(..)) => {\n+            DlDef(d @ DefTyParam(..)) |\n+            DlDef(d @ DefSelfTy(..)) => {\n                 def = d;\n                 is_ty_param = true;\n             }\n@@ -3451,6 +3452,13 @@ impl<'a> Resolver<'a> {\n                     } => {\n                       // ok\n                     }\n+\n+                    DefSelfTy(did) if {\n+                        did == item_id\n+                    } => {\n+                      // ok\n+                    }\n+\n                     _ => {\n                     if !is_ty_param {\n                         // This was an attempt to access an upvar inside a\n@@ -3475,7 +3483,7 @@ impl<'a> Resolver<'a> {\n                     }\n                   }\n                 }\n-                OpaqueFunctionRibKind => {\n+                ItemRibKind => {\n                     if !is_ty_param {\n                         // This was an attempt to access an upvar inside a\n                         // named function item. This is not allowed, so we\n@@ -3575,7 +3583,7 @@ impl<'a> Resolver<'a> {\n                 self.with_type_parameter_rib(HasTypeParameters(generics,\n                                                                item.id,\n                                                                0,\n-                                                               NormalRibKind),\n+                                                               ItemRibKind),\n                                              |this| {\n                     visit::walk_item(this, item, ());\n                 });\n@@ -3585,7 +3593,7 @@ impl<'a> Resolver<'a> {\n                 self.with_type_parameter_rib(HasTypeParameters(generics,\n                                                                item.id,\n                                                                0,\n-                                                               NormalRibKind),\n+                                                               ItemRibKind),\n                                              |this| {\n                     visit::walk_item(this, item, ());\n                 });\n@@ -3604,7 +3612,8 @@ impl<'a> Resolver<'a> {\n \n             ItemTrait(ref generics, _, ref traits, ref methods) => {\n                 // Create a new rib for the self type.\n-                let self_type_rib = Rib::new(NormalRibKind);\n+                let self_type_rib = Rib::new(ItemRibKind);\n+\n                 // plain insert (no renaming)\n                 let name = self.type_self_ident.name;\n                 self_type_rib.bindings.borrow_mut()\n@@ -3686,7 +3695,7 @@ impl<'a> Resolver<'a> {\n                                 this.with_type_parameter_rib(\n                                     HasTypeParameters(\n                                         generics, foreign_item.id, 0,\n-                                        NormalRibKind),\n+                                        ItemRibKind),\n                                     |this| visit::walk_foreign_item(this,\n                                                                 *foreign_item,\n                                                                 ()));\n@@ -3702,13 +3711,13 @@ impl<'a> Resolver<'a> {\n             }\n \n             ItemFn(fn_decl, _, _, ref generics, block) => {\n-                self.resolve_function(OpaqueFunctionRibKind,\n+                self.resolve_function(ItemRibKind,\n                                       Some(fn_decl),\n                                       HasTypeParameters\n                                         (generics,\n                                          item.id,\n                                          0,\n-                                         OpaqueFunctionRibKind),\n+                                         ItemRibKind),\n                                       block);\n             }\n \n@@ -3890,7 +3899,7 @@ impl<'a> Resolver<'a> {\n         self.with_type_parameter_rib(HasTypeParameters(generics,\n                                                        id,\n                                                        0,\n-                                                       OpaqueFunctionRibKind),\n+                                                       ItemRibKind),\n                                      |this| {\n             // Resolve the type parameters.\n             this.resolve_type_parameters(&generics.ty_params);\n@@ -5119,7 +5128,7 @@ impl<'a> Resolver<'a> {\n                                 self.value_ribs.borrow().iter().rev().advance(|rib| {\n                                     let res = match *rib {\n                                         Rib { bindings: _, kind: MethodRibKind(_, _) } => true,\n-                                        Rib { bindings: _, kind: OpaqueFunctionRibKind } => false,\n+                                        Rib { bindings: _, kind: ItemRibKind } => false,\n                                         _ => return true, // Keep advancing\n                                     };\n "}, {"sha": "ce3c8c52b0e477726a0d3151ef35e76ebbf17483", "filename": "src/test/compile-fail/issue-12796.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs?ref=4a51e9c5493ff80d3783a51d130a87a08b8de74d", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: missing `Self` type param in the substitution of `fn(Self)`\n-\n trait Trait {\n     fn outer(self) {\n         fn inner(_: Self) {\n+            //~^ ERROR can't use type parameters from outer function\n+            //~^^ ERROR use of undeclared type name `Self`\n         }\n     }\n }"}, {"sha": "39e1e117cd0ab5be9a8128b57df7e8f5356a7034", "filename": "src/test/compile-fail/issue-5997-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs?ref=4a51e9c5493ff80d3783a51d130a87a08b8de74d", "patch": "@@ -10,8 +10,8 @@\n \n fn f<Z>() -> bool {\n     enum E { V(Z) }\n-    //~^ ERROR can't use type parameters from outer function in the\n-\n+    //~^ ERROR can't use type parameters from outer function\n+    //~^^ ERROR use of undeclared type name `Z`\n     true\n }\n "}, {"sha": "341fe173a03f4d7d0b43eed77f3ab4a6cff79ce5", "filename": "src/test/compile-fail/resolve-type-param-in-item-in-trait.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a51e9c5493ff80d3783a51d130a87a08b8de74d/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs?ref=4a51e9c5493ff80d3783a51d130a87a08b8de74d", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #14603: Check for references to type parameters from the\n+// outer scope (in this case, the trait) used on items in an inner\n+// scope (in this case, the enum).\n+\n+trait TraitA<A> {\n+    fn outer(self) {\n+        enum Foo<B> {\n+            Variance(A)\n+                //~^ ERROR can't use type parameters from outer function\n+                //~^^ ERROR use of undeclared type name `A`\n+        }\n+    }\n+}\n+\n+trait TraitB<A> {\n+    fn outer(self) {\n+        struct Foo<B>(A);\n+                //~^ ERROR can't use type parameters from outer function\n+                //~^^ ERROR use of undeclared type name `A`\n+    }\n+}\n+\n+trait TraitC<A> {\n+    fn outer(self) {\n+        struct Foo<B> { a: A }\n+                //~^ ERROR can't use type parameters from outer function\n+                //~^^ ERROR use of undeclared type name `A`\n+    }\n+}\n+\n+trait TraitD<A> {\n+    fn outer(self) {\n+        fn foo<B>(a: A) { }\n+                //~^ ERROR can't use type parameters from outer function\n+                //~^^ ERROR use of undeclared type name `A`\n+    }\n+}\n+\n+fn main() { }"}]}