{"sha": "74ea16301e2e6fb96ac8414761cf227775e64dfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZWExNjMwMWUyZTZmYjk2YWM4NDE0NzYxY2YyMjc3NzVlNjRkZmQ=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-11T19:06:05Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-11T19:10:06Z"}, "message": "skip the uninhabitated check and comments", "tree": {"sha": "5bbaa2232ffa96371ce0555199d7dadf8740d0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bbaa2232ffa96371ce0555199d7dadf8740d0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ea16301e2e6fb96ac8414761cf227775e64dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ea16301e2e6fb96ac8414761cf227775e64dfd", "html_url": "https://github.com/rust-lang/rust/commit/74ea16301e2e6fb96ac8414761cf227775e64dfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ea16301e2e6fb96ac8414761cf227775e64dfd/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ee91e77e8106357df63fc2d4b6f04f36ccd2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ee91e77e8106357df63fc2d4b6f04f36ccd2da", "html_url": "https://github.com/rust-lang/rust/commit/67ee91e77e8106357df63fc2d4b6f04f36ccd2da"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "0463cb2b7655310be2d7ad0c999c6cff50901cfb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -315,7 +315,28 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// [the reference]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\n+    /// The `must_not_suspend` lint detects values that are marked with the `#[must_not_suspend]`\n+    /// attribute being held across yield points. A \"yield\" point is usually a `.await` in an async\n+    /// function.\n+    ///\n+    /// This attribute can be used to mark values that are semantically incorrect across yields\n+    /// (like certain types of timers), values that have async alternatives, and values that\n+    /// regularly cause problems with the `Send`-ness of async fn's returned futures (like\n+    /// `MutexGuard`'s)\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #[must_not_suspend]\n+    /// struct SyncThing {}\n+    ///\n+    /// async fn yield() {}\n+    ///\n+    /// pub async fn uhoh() {\n+    ///     let guard = SyncThing {};\n+    ///     yield().await;\n+    /// }\n+    /// ```\n     pub MUST_NOT_SUSPEND,\n     Warn,\n     \"Use of a `#[must_not_suspend]` value across a yield point\","}, {"sha": "3e59fc4f551594ec22b7725e5efc9b6c628b8ae1", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -1018,15 +1018,15 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n     fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n-            Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {\n+            Target::Struct | Target::Enum | Target::Union | Target::Trait => true,\n+            _ => {\n                 self.tcx\n                     .sess\n-                    .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, `impl Trait`, or `dyn Trait`\")\n-                        .span_label(*span, \"is a function\")\n+                    .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, or trait\")\n+                        .span_label(*span, \"is not a struct, enum, or trait\")\n                         .emit();\n                 false\n             }\n-            _ => true,\n         }\n     }\n "}, {"sha": "c4c09a55a6e0060bba267dc7766ef66b80935bd0", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -124,7 +124,6 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n \n                 check_must_not_suspend_ty(\n                     self.fcx,\n-                    ty::ParamEnv::empty(),\n                     ty,\n                     hir_id,\n                     expr,\n@@ -454,7 +453,6 @@ impl<'a, 'tcx> Visitor<'tcx> for ArmPatCollector<'a> {\n // for creating must_use diagnostics\n pub fn check_must_not_suspend_ty<'tcx>(\n     fcx: &FnCtxt<'_, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n     hir_id: HirId,\n     expr: Option<&'tcx Expr<'tcx>>,\n@@ -464,8 +462,10 @@ pub fn check_must_not_suspend_ty<'tcx>(\n     descr_post: &str,\n     plural_len: usize,\n ) -> bool {\n+    debug!(\"FOUND TYPE: {:?}\", ty);\n     if ty.is_unit()\n-        || fcx.tcx.is_ty_uninhabited_from(fcx.tcx.parent_module(hir_id).to_def_id(), ty, param_env)\n+    // || fcx.tcx.is_ty_uninhabited_from(fcx.tcx.parent_module(hir_id).to_def_id(), ty, fcx.param_env)\n+    // FIXME: should this check is_ty_uninhabited_from\n     {\n         return true;\n     }\n@@ -478,7 +478,6 @@ pub fn check_must_not_suspend_ty<'tcx>(\n             let descr_pre = &format!(\"{}boxed \", descr_pre);\n             check_must_not_suspend_ty(\n                 fcx,\n-                param_env,\n                 boxed_ty,\n                 hir_id,\n                 expr,\n@@ -547,36 +546,31 @@ pub fn check_must_not_suspend_ty<'tcx>(\n         }\n         ty::Tuple(ref tys) => {\n             let mut has_emitted = false;\n-            /*\n-            let spans = if let hir::ExprKind::Tup(comps) = &expr.kind {\n+            let spans = if let Some(hir::ExprKind::Tup(comps)) = expr.map(|e| &e.kind) {\n                 debug_assert_eq!(comps.len(), tys.len());\n                 comps.iter().map(|e| e.span).collect()\n             } else {\n                 vec![]\n             };\n-            */\n-            let spans = vec![];\n             for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n                 let descr_post = &format!(\" in tuple element {}\", i);\n                 let span = *spans.get(i).unwrap_or(&source_span);\n                 if check_must_not_suspend_ty(\n-                    fcx, param_env, ty, hir_id, expr, span, yield_span, descr_pre, descr_post,\n-                    plural_len,\n+                    fcx, ty, hir_id, expr, span, yield_span, descr_pre, descr_post, plural_len,\n                 ) {\n                     has_emitted = true;\n                 }\n             }\n             has_emitted\n         }\n-        ty::Array(ty, len) => match len.try_eval_usize(fcx.tcx, param_env) {\n+        ty::Array(ty, len) => match len.try_eval_usize(fcx.tcx, fcx.param_env) {\n             // If the array is empty we don't lint, to avoid false positives\n             Some(0) | None => false,\n             // If the array is definitely non-empty, we can do `#[must_use]` checking.\n             Some(n) => {\n                 let descr_pre = &format!(\"{}array{} of \", descr_pre, plural_suffix,);\n                 check_must_not_suspend_ty(\n                     fcx,\n-                    param_env,\n                     ty,\n                     hir_id,\n                     expr,"}, {"sha": "1f823fc559d40b4fd99f2c854805391f296b00f9", "filename": "src/test/ui/lint/must_not_suspend/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -17,7 +17,7 @@ fn bar() -> Box<Umm> {\n async fn other() {}\n \n pub async fn uhoh() {\n-    let _guard = bar(); //~ boxed `Umm` held across\n+    let _guard = bar(); //~ ERROR boxed `Umm` held across\n     other().await;\n }\n "}, {"sha": "1554408c174ce92350685bab1f0c54ccfaa4c6fd", "filename": "src/test/ui/lint/must_not_suspend/feature-gate-must_not_suspend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#[must_not_suspend = \"You gotta use Umm's, ya know?\"] //~ the `#[must_not_suspend]`\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"] //~ ERROR the `#[must_not_suspend]`\n struct Umm {\n     _i: i64\n }"}, {"sha": "5aa1abb14d3fa1e35b89b5d38aa541f01f77ea34", "filename": "src/test/ui/lint/must_not_suspend/other_items.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend] //~ ERROR attribute should be\n+mod inner {}\n+\n+fn main() {}"}, {"sha": "41c8896921b0f35bf34e1cacdf6d3633500a6503", "filename": "src/test/ui/lint/must_not_suspend/other_items.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.stderr?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -0,0 +1,10 @@\n+error: `must_not_suspend` attribute should be applied to a struct, enum, or trait\n+  --> $DIR/other_items.rs:5:1\n+   |\n+LL | #[must_not_suspend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+LL | mod inner {}\n+   | ------------ is not a struct, enum, or trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "5b1fa5e272118470b48831153aa6ce091b1a37e0", "filename": "src/test/ui/lint/must_not_suspend/return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -2,7 +2,7 @@\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n \n-#[must_not_suspend] //~ attribute should be\n+#[must_not_suspend] //~ ERROR attribute should be\n fn foo() -> i32 {\n     0\n }"}, {"sha": "fdada85eb4d1caf761044bc01ee7872a4cc07034", "filename": "src/test/ui/lint/must_not_suspend/return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -1,12 +1,12 @@\n-error: `must_not_suspend` attribute should be applied to a struct, enum, `impl Trait`, or `dyn Trait`\n+error: `must_not_suspend` attribute should be applied to a struct, enum, or trait\n   --> $DIR/return.rs:5:1\n    |\n LL |   #[must_not_suspend]\n    |   ^^^^^^^^^^^^^^^^^^^\n LL | / fn foo() -> i32 {\n LL | |     0\n LL | | }\n-   | |_- is a function\n+   | |_- is not a struct, enum, or trait\n \n error: aborting due to previous error\n "}, {"sha": "6c911cb4b0f09d03cd7cfef2d38558519affb7fd", "filename": "src/test/ui/lint/must_not_suspend/trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -18,8 +18,8 @@ fn r#dyn() -> Box<dyn Wow> {\n async fn other() {}\n \n pub async fn uhoh() {\n-    let _guard1 = r#impl(); //~ implementer of `Wow` held across\n-    let _guard2 = r#dyn(); //~ boxed `Wow` trait object held across\n+    let _guard1 = r#impl(); //~ ERROR implementer of `Wow` held across\n+    let _guard2 = r#dyn(); //~ ERROR boxed `Wow` trait object held across\n \n     other().await;\n }"}, {"sha": "d3a19f704324ddefa3d910a5d788d5bbb53233fa", "filename": "src/test/ui/lint/must_not_suspend/unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -17,7 +17,7 @@ fn bar() -> Umm {\n async fn other() {}\n \n pub async fn uhoh() {\n-    let _guard = bar(); //~ `Umm` held across\n+    let _guard = bar(); //~ ERROR `Umm` held across\n     other().await;\n }\n "}, {"sha": "50a696ba52322adb11dab5942328ae665f85fb2d", "filename": "src/test/ui/lint/must_not_suspend/warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ea16301e2e6fb96ac8414761cf227775e64dfd/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=74ea16301e2e6fb96ac8414761cf227775e64dfd", "patch": "@@ -17,7 +17,7 @@ fn bar() -> Umm {\n async fn other() {}\n \n pub async fn uhoh() {\n-    let _guard = bar(); //~ `Umm` held across\n+    let _guard = bar(); //~ WARNING `Umm` held across\n     other().await;\n }\n "}]}