{"sha": "bbed61d3d2489eb974d52e327b4fe63e361426ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZWQ2MWQzZDI0ODllYjk3NGQ1MmUzMjdiNGZlNjNlMzYxNDI2Y2U=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-10T14:01:24Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-10T16:17:59Z"}, "message": "Extend `ExternCrate` to cover externs inferred from `use` or paths", "tree": {"sha": "d44f913b5739257e4e08d3f57e97beb8afbd306f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d44f913b5739257e4e08d3f57e97beb8afbd306f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbed61d3d2489eb974d52e327b4fe63e361426ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbed61d3d2489eb974d52e327b4fe63e361426ce", "html_url": "https://github.com/rust-lang/rust/commit/bbed61d3d2489eb974d52e327b4fe63e361426ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbed61d3d2489eb974d52e327b4fe63e361426ce/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9b70c394e7f341b4016fce4cbf763d404b26f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b70c394e7f341b4016fce4cbf763d404b26f9", "html_url": "https://github.com/rust-lang/rust/commit/4b9b70c394e7f341b4016fce4cbf763d404b26f9"}], "stats": {"total": 224, "additions": 173, "deletions": 51}, "files": [{"sha": "0e33c64333dab24155535ba75c98268cefd14d96", "filename": "src/librustc/ich/impls_cstore.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -12,6 +12,7 @@\n //! from rustc::middle::cstore in no particular order.\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+use ich::StableHashingContext;\n \n use middle;\n \n@@ -47,12 +48,32 @@ impl_stable_hash_for!(enum middle::cstore::LinkagePreference {\n });\n \n impl_stable_hash_for!(struct middle::cstore::ExternCrate {\n-    def_id,\n+    src,\n     span,\n-    direct,\n-    path_len\n+    direct\n });\n \n+impl<'a> HashStable<StableHashingContext<'a>> for middle::cstore::ExternCrateSource {\n+    fn hash_stable<W: StableHasherResult>(\n+        &self,\n+        hcx: &mut StableHashingContext<'a>,\n+        hasher: &mut StableHasher<W>,\n+    ) {\n+        use middle::cstore::ExternCrateSource::*;\n+\n+        ::std::mem::discriminant(self).hash_stable(hcx, hasher);\n+\n+        match *self {\n+            Extern { def_id, path_len } => {\n+                def_id.hash_stable(hcx, hasher);\n+                path_len.hash_stable(hcx, hasher);\n+            }\n+            Use { path_len } => path_len.hash_stable(hcx, hasher),\n+            Path => {}\n+        }\n+    }\n+}\n+\n impl_stable_hash_for!(struct middle::cstore::CrateSource {\n     dylib,\n     rlib,"}, {"sha": "6208a8a767c108b7d1cbb26f5481ad162c0780da", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -148,10 +148,7 @@ pub enum LoadedMacro {\n \n #[derive(Copy, Clone, Debug)]\n pub struct ExternCrate {\n-    /// def_id of an `extern crate` in the current crate that caused\n-    /// this crate to be loaded; note that there could be multiple\n-    /// such ids\n-    pub def_id: DefId,\n+    pub src: ExternCrateSource,\n \n     /// span of the extern crate that caused this to be loaded\n     pub span: Span,\n@@ -160,11 +157,28 @@ pub struct ExternCrate {\n     /// crate referenced above. If false, then this crate is a dep\n     /// of the crate.\n     pub direct: bool,\n+}\n \n-    /// Number of links to reach the extern crate `def_id`\n-    /// declaration; used to select the extern crate with the shortest\n-    /// path\n-    pub path_len: usize,\n+#[derive(Copy, Clone, Debug)]\n+pub enum ExternCrateSource {\n+    /// Crate is loaded by `extern crate`.\n+    Extern {\n+        /// def_id of the item in the current crate that caused\n+        /// this crate to be loaded; note that there could be multiple\n+        /// such ids\n+        def_id: DefId,\n+\n+        /// Number of links to reach the extern crate `def_id`\n+        /// declaration; used to select the extern crate with the shortest\n+        /// path\n+        path_len: usize,\n+    },\n+    // Crate is loaded by `use`.\n+    Use {\n+        path_len: usize,\n+    },\n+    /// Crate is implicitly loaded by an absolute or an `extern::` path.\n+    Path,\n }\n \n pub struct EncodedMetadata {\n@@ -357,9 +371,23 @@ impl CrateStore for DummyCrateStore {\n }\n \n pub trait CrateLoader {\n-    fn process_item(&mut self, item: &ast::Item, defs: &Definitions);\n+    fn process_extern_crate(&mut self, item: &ast::Item, defs: &Definitions) -> CrateNum;\n+\n+    fn process_path_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+    ) -> CrateNum;\n+\n+    fn process_use_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+        id: ast::NodeId,\n+        defs: &Definitions,\n+    ) -> CrateNum;\n+\n     fn postprocess(&mut self, krate: &ast::Crate);\n-    fn resolve_crate_from_path(&mut self, name: Symbol, span: Span) -> CrateNum;\n }\n \n // This method is used when generating the command line to pass through to"}, {"sha": "771bdcc55e39749e59c3ae1bc796fa2101e7946e", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -11,6 +11,7 @@\n use hir::map::DefPathData;\n use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, Ty, TyCtxt};\n+use middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax::symbol::InternedString;\n@@ -95,21 +96,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 //    `extern crate` manually, we put the `extern\n                 //    crate` as the parent. So you wind up with\n                 //    something relative to the current crate.\n-                // 2. for an indirect crate, where there is no extern\n-                //    crate, we just prepend the crate name.\n+                // 2. for an extern inferred from a path or an indirect crate,\n+                //    where there is no explicit `extern crate`, we just prepend\n+                //    the crate name.\n                 //\n                 // Returns `None` for the local crate.\n                 if cnum != LOCAL_CRATE {\n                     let opt_extern_crate = self.extern_crate(cnum.as_def_id());\n-                    let opt_extern_crate = opt_extern_crate.and_then(|extern_crate| {\n-                        if extern_crate.direct {\n-                            Some(extern_crate.def_id)\n-                        } else {\n-                            None\n-                        }\n-                    });\n-                    if let Some(extern_crate_def_id) = opt_extern_crate {\n-                        self.push_item_path(buffer, extern_crate_def_id);\n+                    if let Some(ExternCrate {\n+                        src: ExternCrateSource::Extern { def_id, .. },\n+                        direct: true,\n+                        ..\n+                    }) = *opt_extern_crate\n+                    {\n+                        self.push_item_path(buffer, def_id);\n                     } else {\n                         buffer.push(&self.crate_name(cnum).as_str());\n                     }\n@@ -137,14 +137,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // followed by the path to the item within the crate and return.\n             if cur_def.index == CRATE_DEF_INDEX {\n                 match *self.extern_crate(cur_def) {\n-                    Some(ref extern_crate) if extern_crate.direct => {\n-                        self.push_item_path(buffer, extern_crate.def_id);\n-                        cur_path.iter().rev().map(|segment| buffer.push(&segment)).count();\n+                    Some(ExternCrate {\n+                        src: ExternCrateSource::Extern { def_id, .. },\n+                        direct: true,\n+                        ..\n+                    }) => {\n+                        self.push_item_path(buffer, def_id);\n+                        cur_path.iter().rev().for_each(|segment| buffer.push(&segment));\n                         return true;\n                     }\n                     None => {\n                         buffer.push(&self.crate_name(cur_def.krate).as_str());\n-                        cur_path.iter().rev().map(|segment| buffer.push(&segment)).count();\n+                        cur_path.iter().rev().for_each(|segment| buffer.push(&segment));\n                         return true;\n                     }\n                     _ => {},"}, {"sha": "268624cf430938508adc6b38c7def2a6a7de0e06", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 79, "deletions": 13, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -25,7 +25,7 @@ use rustc_back::PanicStrategy;\n use rustc_back::target::TargetTriple;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n-use rustc::middle::cstore::{validate_crate_name, ExternCrate};\n+use rustc::middle::cstore::{validate_crate_name, ExternCrate, ExternCrateSource};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n@@ -367,16 +367,31 @@ impl<'a> CrateLoader<'a> {\n         let cmeta = self.cstore.get_crate_data(cnum);\n         let mut old_extern_crate = cmeta.extern_crate.borrow_mut();\n \n+        fn path_len_reverse(src: ExternCrateSource) -> cmp::Reverse<usize> {\n+            cmp::Reverse(match src {\n+                ExternCrateSource::Extern { path_len, .. } |\n+                ExternCrateSource::Use { path_len } => path_len,\n+                _ => usize::max_value(),\n+            })\n+        }\n+\n         // Prefer:\n         // - something over nothing (tuple.0);\n         // - direct extern crate to indirect (tuple.1);\n         // - shorter paths to longer (tuple.2).\n-        let new_rank = (true, extern_crate.direct, !extern_crate.path_len);\n+        let new_rank = (\n+            true,\n+            extern_crate.direct,\n+            path_len_reverse(extern_crate.src),\n+        );\n         let old_rank = match *old_extern_crate {\n-            None => (false, false, !0),\n-            Some(ref c) => (true, c.direct, !c.path_len),\n+            None => (false, false, cmp::Reverse(usize::max_value())),\n+            Some(ref c) => (\n+                true,\n+                c.direct,\n+                path_len_reverse(c.src),\n+            ),\n         };\n-\n         if old_rank >= new_rank {\n             return; // no change needed\n         }\n@@ -1045,7 +1060,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         }\n     }\n \n-    fn process_item(&mut self, item: &ast::Item, definitions: &Definitions) {\n+    fn process_extern_crate(&mut self, item: &ast::Item, definitions: &Definitions) -> CrateNum {\n         match item.node {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\"resolving extern crate stmt. ident: {} orig_name: {:?}\",\n@@ -1071,17 +1086,68 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n \n                 let def_id = definitions.opt_local_def_id(item.id).unwrap();\n                 let path_len = definitions.def_path(def_id.index).data.len();\n-\n-                let extern_crate = ExternCrate { def_id, span: item.span, direct: true, path_len };\n-                self.update_extern_crate(cnum, extern_crate, &mut FxHashSet());\n+                self.update_extern_crate(\n+                    cnum,\n+                    ExternCrate {\n+                        src: ExternCrateSource::Extern { def_id, path_len },\n+                        span: item.span,\n+                        direct: true,\n+                    },\n+                    &mut FxHashSet(),\n+                );\n                 self.cstore.add_extern_mod_stmt_cnum(item.id, cnum);\n+                cnum\n             }\n-            _ => {}\n+            _ => bug!(),\n         }\n     }\n \n-    fn resolve_crate_from_path(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        self.resolve_crate(&None, name, name, None, None, span, PathKind::Crate,\n-                           DepKind::Explicit).0\n+    fn process_path_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+    ) -> CrateNum {\n+        let cnum = self.resolve_crate(\n+            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+        ).0;\n+\n+        self.update_extern_crate(\n+            cnum,\n+            ExternCrate {\n+                src: ExternCrateSource::Path,\n+                span,\n+                direct: true,\n+            },\n+            &mut FxHashSet(),\n+        );\n+\n+        cnum\n+    }\n+\n+    fn process_use_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+        id: ast::NodeId,\n+        definitions: &Definitions,\n+    ) -> CrateNum {\n+        let cnum = self.resolve_crate(\n+            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+        ).0;\n+\n+        let def_id = definitions.opt_local_def_id(id).unwrap();\n+        let path_len = definitions.def_path(def_id.index).data.len();\n+\n+        self.update_extern_crate(\n+            cnum,\n+            ExternCrate {\n+                src: ExternCrateSource::Use { path_len },\n+                span,\n+                direct: true,\n+            },\n+            &mut FxHashSet(),\n+        );\n+\n+        cnum\n     }\n }"}, {"sha": "f4e2136a5a1153db3ab74c61294c719543c695dd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -252,10 +252,7 @@ impl<'a> Resolver<'a> {\n             }\n \n             ItemKind::ExternCrate(orig_name) => {\n-                self.crate_loader.process_item(item, &self.definitions);\n-\n-                // n.b. we don't need to look at the path option here, because cstore already did\n-                let crate_id = self.cstore.extern_mod_stmt_cnum_untracked(item.id).unwrap();\n+                let crate_id = self.crate_loader.process_extern_crate(item, &self.definitions);\n                 let module =\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(module);\n@@ -302,7 +299,8 @@ impl<'a> Resolver<'a> {\n                 self.current_module = module;\n             }\n \n-            ItemKind::ForeignMod(..) => self.crate_loader.process_item(item, &self.definitions),\n+            // Handled in `rustc_metadata::{native_libs,link_args}`\n+            ItemKind::ForeignMod(..) => {}\n \n             // These items live in the value namespace.\n             ItemKind::Static(_, m, _) => {"}, {"sha": "aeb31460416cd86dded465df51c3e2db87feb047", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -3258,7 +3258,7 @@ impl<'a> Resolver<'a> {\n                        prev_name == keywords::CrateRoot.name() &&\n                        self.session.features_untracked().extern_absolute_paths {\n                         // `::extern_crate::a::b`\n-                        let crate_id = self.crate_loader.resolve_crate_from_path(name, ident.span);\n+                        let crate_id = self.crate_loader.process_path_extern(name, ident.span);\n                         let crate_root =\n                             self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                         self.populate_module_if_necessary(crate_root);"}, {"sha": "37c62a7b0b45b276ab49270c3987195583e32123", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -627,7 +627,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         }\n                     } else if is_extern && !token::is_path_segment_keyword(source) {\n                         let crate_id =\n-                            self.crate_loader.resolve_crate_from_path(source.name, directive.span);\n+                            self.resolver.crate_loader.process_use_extern(\n+                                source.name,\n+                                directive.span,\n+                                directive.id,\n+                                &self.resolver.definitions,\n+                            );\n                         let crate_root =\n                             self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                         self.populate_module_if_necessary(crate_root);"}, {"sha": "34a9b57c9dc3de8a78f3e6515863925a475bf1f8", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbed61d3d2489eb974d52e327b4fe63e361426ce/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=bbed61d3d2489eb974d52e327b4fe63e361426ce", "patch": "@@ -42,6 +42,7 @@ use rustc::hir;\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::map::{Node, NodeItem};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::CrateType::CrateTypeExecutable;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n@@ -112,10 +113,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n         for &n in self.tcx.crates().iter() {\n             let span = match *self.tcx.extern_crate(n.as_def_id()) {\n-                Some(ref c) => c.span,\n+                Some(ExternCrate { span, .. }) => span,\n                 None => {\n-                    debug!(\"Skipping crate {}, no data\", n);\n-                    continue;\n+                    bug!(\"no data for crate {}\", n);\n                 }\n             };\n             let lo_loc = self.span_utils.sess.codemap().lookup_char_pos(span.lo());"}]}