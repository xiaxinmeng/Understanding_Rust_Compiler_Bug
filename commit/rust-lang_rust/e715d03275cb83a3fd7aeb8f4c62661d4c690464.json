{"sha": "e715d03275cb83a3fd7aeb8f4c62661d4c690464", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTVkMDMyNzVjYjgzYTNmZDdhZWI4ZjRjNjI2NjFkNGM2OTA0NjQ=", "commit": {"author": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-12T10:47:17Z"}, "committer": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-12T10:47:17Z"}, "message": "Remove env vars instead of setting them to an empty string", "tree": {"sha": "a78fded7b969e3ec061a077862e636680bd1003e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78fded7b969e3ec061a077862e636680bd1003e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e715d03275cb83a3fd7aeb8f4c62661d4c690464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e715d03275cb83a3fd7aeb8f4c62661d4c690464", "html_url": "https://github.com/rust-lang/rust/commit/e715d03275cb83a3fd7aeb8f4c62661d4c690464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e715d03275cb83a3fd7aeb8f4c62661d4c690464/comments", "author": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "html_url": "https://github.com/rust-lang/rust/commit/2e9eba7f380f5fd99df92deaa03e00faa519b1a4"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "596978f002b669cc00c6cc0d5feebce14561a93c", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=e715d03275cb83a3fd7aeb8f4c62661d4c690464", "patch": "@@ -14,6 +14,7 @@ pub struct Command {\n     program: Program,\n     args: Vec<OsString>,\n     env: Vec<(OsString, OsString)>,\n+    env_remove: Vec<OsString>,\n }\n \n #[derive(Clone)]\n@@ -41,6 +42,7 @@ impl Command {\n             program,\n             args: Vec::new(),\n             env: Vec::new(),\n+            env_remove: Vec::new(),\n         }\n     }\n \n@@ -75,6 +77,17 @@ impl Command {\n         self.env.push((key.to_owned(), value.to_owned()));\n     }\n \n+    pub fn env_remove<K>(&mut self, key: K) -> &mut Command\n+        where K: AsRef<OsStr>,\n+    {\n+        self._env_remove(key.as_ref());\n+        self\n+    }\n+\n+    fn _env_remove(&mut self, key: &OsStr) {\n+        self.env_remove.push(key.to_owned());\n+    }\n+\n     pub fn output(&mut self) -> io::Result<Output> {\n         self.command().output()\n     }\n@@ -100,6 +113,9 @@ impl Command {\n         };\n         ret.args(&self.args);\n         ret.envs(self.env.clone());\n+        for k in &self.env_remove {\n+            ret.env_remove(k);\n+        }\n         return ret\n     }\n "}, {"sha": "74cde92974c04f547d47d51cf8ef113791425d69", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=e715d03275cb83a3fd7aeb8f4c62661d4c690464", "patch": "@@ -532,6 +532,9 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n     for &(ref k, ref v) in &sess.target.target.options.link_env {\n         cmd.env(k, v);\n     }\n+    for k in &sess.target.target.options.link_env_remove {\n+        cmd.env_remove(k);\n+    }\n \n     if sess.opts.debugging_opts.print_link_args {\n         println!(\"{:?}\", &cmd);"}, {"sha": "f7551aa768dfc6ac457844525df7defac6267a38", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=e715d03275cb83a3fd7aeb8f4c62661d4c690464", "patch": "@@ -52,18 +52,18 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n-pub fn macos_link_env() -> Vec<(String, String)> {\n-    let mut env = Vec::with_capacity(2);\n-    // Ignore the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n+pub fn macos_link_env_remove() -> Vec<String> {\n+    let mut env_remove = Vec::with_capacity(2);\n+    // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n     // may occur when we're linking a custom build script while targeting iOS for example.\n     if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n         if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\") {\n-            env.push((\"SDKROOT\".to_string(), String::new()))\n+            env_remove.push(\"SDKROOT\".to_string())\n         }\n     }\n     // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n     // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n     // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n-    env.push((\"IPHONEOS_DEPLOYMENT_TARGET\".to_string(), String::new()));\n-    env\n+    env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".to_string());\n+    env_remove\n }"}, {"sha": "27d05823bf21e15bf50fde7239d164a05633f0bd", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=e715d03275cb83a3fd7aeb8f4c62661d4c690464", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n-    base.link_env.extend(super::apple_base::macos_link_env());\n+    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = true;\n     base.eliminate_frame_pointer = false;\n "}, {"sha": "82e74f317de23d200fbe2bcf3060868abc905c07", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e715d03275cb83a3fd7aeb8f4c62661d4c690464", "patch": "@@ -580,8 +580,10 @@ pub struct TargetOptions {\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n \n-    /// Environment variables to be set before invoking the linker.\n+    /// Environment variables to be set for the linker invocation.\n     pub link_env: Vec<(String, String)>,\n+    /// Environment variables to be removed for the linker invocation.\n+    pub link_env_remove: Vec<String>,\n \n     /// Extra arguments to pass to the external assembler (when used)\n     pub asm_args: Vec<String>,\n@@ -843,6 +845,7 @@ impl Default for TargetOptions {\n             post_link_objects_crt: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n+            link_env_remove: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n             allow_asm: true,\n@@ -1118,6 +1121,7 @@ impl Target {\n         key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n+        key!(link_env_remove, list);\n         key!(asm_args, list);\n         key!(cpu);\n         key!(features);\n@@ -1334,6 +1338,7 @@ impl ToJson for Target {\n         target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n+        target_option_val!(link_env_remove);\n         target_option_val!(asm_args);\n         target_option_val!(cpu);\n         target_option_val!(features);"}, {"sha": "d059e44c5c82ac82656bcc7399c452dadfb6ee72", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e715d03275cb83a3fd7aeb8f4c62661d4c690464/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=e715d03275cb83a3fd7aeb8f4c62661d4c690464", "patch": "@@ -6,7 +6,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n-    base.link_env.extend(super::apple_base::macos_link_env());\n+    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = true;\n \n     // Clang automatically chooses a more specific target based on"}]}