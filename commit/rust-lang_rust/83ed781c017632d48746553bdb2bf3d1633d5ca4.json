{"sha": "83ed781c017632d48746553bdb2bf3d1633d5ca4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZWQ3ODFjMDE3NjMyZDQ4NzQ2NTUzYmRiMmJmM2QxNjMzZDVjYTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-11T13:03:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-11T14:06:55Z"}, "message": "Address comments + Fix tests", "tree": {"sha": "8c14951d07f5a9e2d3be24e60a87925657003392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c14951d07f5a9e2d3be24e60a87925657003392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83ed781c017632d48746553bdb2bf3d1633d5ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83ed781c017632d48746553bdb2bf3d1633d5ca4", "html_url": "https://github.com/rust-lang/rust/commit/83ed781c017632d48746553bdb2bf3d1633d5ca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83ed781c017632d48746553bdb2bf3d1633d5ca4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f064cae3d9d0d33951a44c30d83696563244572", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f064cae3d9d0d33951a44c30d83696563244572", "html_url": "https://github.com/rust-lang/rust/commit/3f064cae3d9d0d33951a44c30d83696563244572"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "b96ac19c1ea61a4dea12bcadd3b9bc02884873bf", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83ed781c017632d48746553bdb2bf3d1633d5ca4/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ed781c017632d48746553bdb2bf3d1633d5ca4/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=83ed781c017632d48746553bdb2bf3d1633d5ca4", "patch": "@@ -416,6 +416,8 @@ mod test {\n \n     use syntax_pos::DUMMY_SP;\n     use syntax::ast::*;\n+    use syntax::attr;\n+    use syntax::source_map::dummy_spanned;\n     use syntax::symbol::Symbol;\n     use syntax::with_globals;\n "}, {"sha": "aa176c892588388eab36d82ea0f931af791f137d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83ed781c017632d48746553bdb2bf3d1633d5ca4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ed781c017632d48746553bdb2bf3d1633d5ca4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=83ed781c017632d48746553bdb2bf3d1633d5ca4", "patch": "@@ -1351,12 +1351,17 @@ pub enum StrStyle {\n     Raw(u16),\n }\n \n-/// A literal.\n+/// An AST literal.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Lit {\n-    pub node: LitKind,\n+    /// The original literal token as written in source code.\n     pub token: token::Lit,\n+    /// The original literal suffix as written in source code.\n     pub suffix: Option<Symbol>,\n+    /// The \"semantic\" representation of the literal lowered from the original tokens.\n+    /// Strings are unescaped, hexadecimal forms are eliminated, etc.\n+    /// FIXME: Remove this and only create the semantic representation during lowering to HIR.\n+    pub node: LitKind,\n     pub span: Span,\n }\n "}, {"sha": "53195421ddceeb90f3cb4b25a14a0fab54aa9683", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ed781c017632d48746553bdb2bf3d1633d5ca4/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ed781c017632d48746553bdb2bf3d1633d5ca4/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=83ed781c017632d48746553bdb2bf3d1633d5ca4", "patch": "@@ -27,7 +27,7 @@ macro_rules! err {\n \n impl LitKind {\n     /// Converts literal token with a suffix into a semantic literal.\n-    /// Works speculatively and may return `None` is diagnostic handler is not passed.\n+    /// Works speculatively and may return `None` if diagnostic handler is not passed.\n     /// If diagnostic handler is passed, always returns `Some`,\n     /// possibly after reporting non-fatal errors and recovery.\n     fn from_lit_token(\n@@ -166,7 +166,7 @@ impl LitKind {\n \n impl Lit {\n     /// Converts literal token with a suffix into an AST literal.\n-    /// Works speculatively and may return `None` is diagnostic handler is not passed.\n+    /// Works speculatively and may return `None` if diagnostic handler is not passed.\n     /// If diagnostic handler is passed, may return `Some`,\n     /// possibly after reporting non-fatal errors and recovery, or `None` for irrecoverable errors.\n     crate fn from_token("}]}