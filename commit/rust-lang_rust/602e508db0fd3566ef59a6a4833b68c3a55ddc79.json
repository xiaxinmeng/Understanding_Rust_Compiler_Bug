{"sha": "602e508db0fd3566ef59a6a4833b68c3a55ddc79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMmU1MDhkYjBmZDM1NjZlZjU5YTZhNDgzM2I2OGMzYTU1ZGRjNzk=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-01-30T18:25:07Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-01T19:00:35Z"}, "message": "Update LLVM to rust-llvm-2015-01-30", "tree": {"sha": "6b36732e509b31b7c7b9d044d358da45f79ae2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b36732e509b31b7c7b9d044d358da45f79ae2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/602e508db0fd3566ef59a6a4833b68c3a55ddc79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/602e508db0fd3566ef59a6a4833b68c3a55ddc79", "html_url": "https://github.com/rust-lang/rust/commit/602e508db0fd3566ef59a6a4833b68c3a55ddc79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/602e508db0fd3566ef59a6a4833b68c3a55ddc79/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682f867bbfff97e3aef55bdf228d279e45f25cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/682f867bbfff97e3aef55bdf228d279e45f25cd9", "html_url": "https://github.com/rust-lang/rust/commit/682f867bbfff97e3aef55bdf228d279e45f25cd9"}], "stats": {"total": 471, "additions": 268, "deletions": 203}, "files": [{"sha": "eb7dae66538fb23e5e278f12ea66a6910fffc5d7", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 53, "deletions": 43, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=602e508db0fd3566ef59a6a4833b68c3a55ddc79", "patch": "@@ -64,8 +64,9 @@ use libc::{c_uint, c_ushort, uint64_t, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n use debuginfo::{DIBuilderRef, DIDescriptor,\n                 DIFile, DILexicalBlock, DISubprogram, DIType,\n-                DIBasicType, DIDerivedType, DICompositeType,\n-                DIVariable, DIGlobalVariable, DIArray, DISubrange};\n+                DIBasicType, DIDerivedType, DICompositeType, DIScope,\n+                DIVariable, DIGlobalVariable, DIArray, DISubrange,\n+                DITemplateTypeParameter, DIEnumerator, DINameSpace};\n \n pub mod archive_ro;\n pub mod diagnostic;\n@@ -443,6 +444,9 @@ pub type TypeRef = *mut Type_opaque;\n pub enum Value_opaque {}\n pub type ValueRef = *mut Value_opaque;\n #[allow(missing_copy_implementations)]\n+pub enum Metadata_opaque {}\n+pub type MetadataRef = *mut Metadata_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum BasicBlock_opaque {}\n pub type BasicBlockRef = *mut BasicBlock_opaque;\n #[allow(missing_copy_implementations)]\n@@ -502,18 +506,19 @@ pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_v\n \n pub mod debuginfo {\n     pub use self::DIDescriptorFlags::*;\n-    use super::{ValueRef};\n+    use super::{MetadataRef};\n \n     #[allow(missing_copy_implementations)]\n     pub enum DIBuilder_opaque {}\n     pub type DIBuilderRef = *mut DIBuilder_opaque;\n \n-    pub type DIDescriptor = ValueRef;\n+    pub type DIDescriptor = MetadataRef;\n     pub type DIScope = DIDescriptor;\n     pub type DILocation = DIDescriptor;\n     pub type DIFile = DIScope;\n     pub type DILexicalBlock = DIScope;\n     pub type DISubprogram = DIScope;\n+    pub type DINameSpace = DIScope;\n     pub type DIType = DIDescriptor;\n     pub type DIBasicType = DIType;\n     pub type DIDerivedType = DIType;\n@@ -522,6 +527,8 @@ pub mod debuginfo {\n     pub type DIGlobalVariable = DIDescriptor;\n     pub type DIArray = DIDescriptor;\n     pub type DISubrange = DIDescriptor;\n+    pub type DIEnumerator = DIDescriptor;\n+    pub type DITemplateTypeParameter = DIDescriptor;\n \n     #[derive(Copy)]\n     pub enum DIDescriptorFlags {\n@@ -1779,8 +1786,8 @@ extern {\n                                        Flags: c_uint,\n                                        isOptimized: bool,\n                                        Fn: ValueRef,\n-                                       TParam: ValueRef,\n-                                       Decl: ValueRef)\n+                                       TParam: DIArray,\n+                                       Decl: DIDescriptor)\n                                        -> DISubprogram;\n \n     pub fn LLVMDIBuilderCreateBasicType(Builder: DIBuilderRef,\n@@ -1808,7 +1815,7 @@ extern {\n                                          DerivedFrom: DIType,\n                                          Elements: DIArray,\n                                          RunTimeLang: c_uint,\n-                                         VTableHolder: ValueRef,\n+                                         VTableHolder: DIType,\n                                          UniqueId: *const c_char)\n                                          -> DICompositeType;\n \n@@ -1825,25 +1832,25 @@ extern {\n                                          -> DIDerivedType;\n \n     pub fn LLVMDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,\n-                                           Scope: DIDescriptor,\n+                                           Scope: DIScope,\n                                            File: DIFile,\n                                            Line: c_uint,\n                                            Col: c_uint)\n                                            -> DILexicalBlock;\n \n     pub fn LLVMDIBuilderCreateStaticVariable(Builder: DIBuilderRef,\n-                                             Context: DIDescriptor,\n+                                             Context: DIScope,\n                                              Name: *const c_char,\n                                              LinkageName: *const c_char,\n                                              File: DIFile,\n                                              LineNo: c_uint,\n                                              Ty: DIType,\n                                              isLocalToUnit: bool,\n                                              Val: ValueRef,\n-                                             Decl: ValueRef)\n+                                             Decl: DIDescriptor)\n                                              -> DIGlobalVariable;\n \n-    pub fn LLVMDIBuilderCreateLocalVariable(Builder: DIBuilderRef,\n+    pub fn LLVMDIBuilderCreateVariable(Builder: DIBuilderRef,\n                                             Tag: c_uint,\n                                             Scope: DIDescriptor,\n                                             Name: *const c_char,\n@@ -1852,6 +1859,8 @@ extern {\n                                             Ty: DIType,\n                                             AlwaysPreserve: bool,\n                                             Flags: c_uint,\n+                                            AddrOps: *const i64,\n+                                            AddrOpsCount: c_uint,\n                                             ArgNo: c_uint)\n                                             -> DIVariable;\n \n@@ -1882,79 +1891,80 @@ extern {\n     pub fn LLVMDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,\n                                            Val: ValueRef,\n                                            VarInfo: DIVariable,\n+                                           AddrOps: *const i64,\n+                                           AddrOpsCount: c_uint,\n                                            InsertAtEnd: BasicBlockRef)\n                                            -> ValueRef;\n \n     pub fn LLVMDIBuilderInsertDeclareBefore(Builder: DIBuilderRef,\n                                             Val: ValueRef,\n                                             VarInfo: DIVariable,\n+                                            AddrOps: *const i64,\n+                                            AddrOpsCount: c_uint,\n                                             InsertBefore: ValueRef)\n                                             -> ValueRef;\n \n     pub fn LLVMDIBuilderCreateEnumerator(Builder: DIBuilderRef,\n                                          Name: *const c_char,\n                                          Val: c_ulonglong)\n-                                         -> ValueRef;\n+                                         -> DIEnumerator;\n \n     pub fn LLVMDIBuilderCreateEnumerationType(Builder: DIBuilderRef,\n-                                              Scope: ValueRef,\n+                                              Scope: DIScope,\n                                               Name: *const c_char,\n-                                              File: ValueRef,\n+                                              File: DIFile,\n                                               LineNumber: c_uint,\n                                               SizeInBits: c_ulonglong,\n                                               AlignInBits: c_ulonglong,\n-                                              Elements: ValueRef,\n-                                              ClassType: ValueRef)\n-                                              -> ValueRef;\n+                                              Elements: DIArray,\n+                                              ClassType: DIType)\n+                                              -> DIType;\n \n     pub fn LLVMDIBuilderCreateUnionType(Builder: DIBuilderRef,\n-                                        Scope: ValueRef,\n+                                        Scope: DIScope,\n                                         Name: *const c_char,\n-                                        File: ValueRef,\n+                                        File: DIFile,\n                                         LineNumber: c_uint,\n                                         SizeInBits: c_ulonglong,\n                                         AlignInBits: c_ulonglong,\n                                         Flags: c_uint,\n-                                        Elements: ValueRef,\n+                                        Elements: DIArray,\n                                         RunTimeLang: c_uint,\n                                         UniqueId: *const c_char)\n-                                        -> ValueRef;\n+                                        -> DIType;\n \n     pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);\n \n     pub fn LLVMDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,\n-                                                    Scope: ValueRef,\n+                                                    Scope: DIScope,\n                                                     Name: *const c_char,\n-                                                    Ty: ValueRef,\n-                                                    File: ValueRef,\n+                                                    Ty: DIType,\n+                                                    File: DIFile,\n                                                     LineNo: c_uint,\n                                                     ColumnNo: c_uint)\n-                                                    -> ValueRef;\n-\n-    pub fn LLVMDIBuilderCreateOpDeref(IntType: TypeRef) -> ValueRef;\n+                                                    -> DITemplateTypeParameter;\n \n-    pub fn LLVMDIBuilderCreateOpPlus(IntType: TypeRef) -> ValueRef;\n+    pub fn LLVMDIBuilderCreateOpDeref() -> i64;\n \n-    pub fn LLVMDIBuilderCreateComplexVariable(Builder: DIBuilderRef,\n-                                              Tag: c_uint,\n-                                              Scope: ValueRef,\n-                                              Name: *const c_char,\n-                                              File: ValueRef,\n-                                              LineNo: c_uint,\n-                                              Ty: ValueRef,\n-                                              AddrOps: *const ValueRef,\n-                                              AddrOpsCount: c_uint,\n-                                              ArgNo: c_uint)\n-                                              -> ValueRef;\n+    pub fn LLVMDIBuilderCreateOpPlus() -> i64;\n \n     pub fn LLVMDIBuilderCreateNameSpace(Builder: DIBuilderRef,\n-                                        Scope: ValueRef,\n+                                        Scope: DIScope,\n                                         Name: *const c_char,\n-                                        File: ValueRef,\n+                                        File: DIFile,\n                                         LineNo: c_uint)\n-                                        -> ValueRef;\n+                                        -> DINameSpace;\n+\n+    pub fn LLVMDIBuilderCreateDebugLocation(Context: ContextRef,\n+                                            Line: c_uint,\n+                                            Column: c_uint,\n+                                            Scope: DIScope,\n+                                            InlinedAt: MetadataRef)\n+                                            -> ValueRef;\n \n-    pub fn LLVMDICompositeTypeSetTypeArray(CompositeType: ValueRef, TypeArray: ValueRef);\n+    pub fn LLVMDICompositeTypeSetTypeArray(Builder: DIBuilderRef,\n+                                           CompositeType: DIType,\n+                                           TypeArray: DIArray);\n     pub fn LLVMWriteTypeToString(Type: TypeRef, s: RustStringRef);\n     pub fn LLVMWriteValueToString(value_ref: ValueRef, s: RustStringRef);\n "}, {"sha": "1aac612299d0397c5c8ec5bc20da8b2953acd7df", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=602e508db0fd3566ef59a6a4833b68c3a55ddc79", "patch": "@@ -780,10 +780,6 @@ pub fn C_i32(ccx: &CrateContext, i: i32) -> ValueRef {\n     C_integral(Type::i32(ccx), i as u64, true)\n }\n \n-pub fn C_i64(ccx: &CrateContext, i: i64) -> ValueRef {\n-    C_integral(Type::i64(ccx), i as u64, true)\n-}\n-\n pub fn C_u64(ccx: &CrateContext, i: u64) -> ValueRef {\n     C_integral(Type::i64(ccx), i, false)\n }"}, {"sha": "7edac0025786906d606242358978935cb6d341f3", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=602e508db0fd3566ef59a6a4833b68c3a55ddc79", "patch": "@@ -197,7 +197,7 @@ use metadata::csearch;\n use middle::subst::{self, Substs};\n use trans::{self, adt, machine, type_of};\n use trans::common::{self, NodeIdAndSpan, CrateContext, FunctionContext, Block,\n-                    C_bytes, C_i32, C_i64, NormalizingClosureTyper};\n+                    C_bytes, NormalizingClosureTyper};\n use trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n use trans::monomorphize;\n use trans::type_::Type;\n@@ -702,7 +702,7 @@ enum VariableAccess<'a> {\n     DirectVariable { alloca: ValueRef },\n     // The llptr given is an alloca containing the start of some pointer chain\n     // leading to the variable's content.\n-    IndirectVariable { alloca: ValueRef, address_operations: &'a [ValueRef] }\n+    IndirectVariable { alloca: ValueRef, address_operations: &'a [i64] }\n }\n \n enum VariableKind {\n@@ -928,10 +928,10 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                               env_index);\n \n     let address_operations = unsafe {\n-        [llvm::LLVMDIBuilderCreateOpDeref(Type::i64(cx).to_ref()),\n-         llvm::LLVMDIBuilderCreateOpPlus(Type::i64(cx).to_ref()),\n-         C_i64(cx, byte_offset_of_var_in_env as i64),\n-         llvm::LLVMDIBuilderCreateOpDeref(Type::i64(cx).to_ref())]\n+        [llvm::LLVMDIBuilderCreateOpDeref(),\n+         llvm::LLVMDIBuilderCreateOpPlus(),\n+         byte_offset_of_var_in_env as i64,\n+         llvm::LLVMDIBuilderCreateOpDeref()]\n     };\n \n     let address_op_count = if captured_by_ref {\n@@ -969,7 +969,7 @@ pub fn create_match_binding_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let scope_metadata = scope_metadata(bcx.fcx, binding.id, binding.span);\n     let aops = unsafe {\n-        [llvm::LLVMDIBuilderCreateOpDeref(bcx.ccx().int_type().to_ref())]\n+        [llvm::LLVMDIBuilderCreateOpDeref()]\n     };\n     // Regardless of the actual type (`T`) we're always passed the stack slot (alloca)\n     // for the binding. For ByRef bindings that's a `T*` but for ByMove bindings we\n@@ -1699,11 +1699,11 @@ fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     };\n \n     let name = CString::from_slice(name.get().as_bytes());\n-    let (var_alloca, var_metadata) = match variable_access {\n-        DirectVariable { alloca } => (\n-            alloca,\n-            unsafe {\n-                llvm::LLVMDIBuilderCreateLocalVariable(\n+    match (variable_access, [].as_slice()) {\n+        (DirectVariable { alloca }, address_operations) |\n+        (IndirectVariable {alloca, address_operations}, _) => {\n+            let metadata = unsafe {\n+                llvm::LLVMDIBuilderCreateVariable(\n                     DIB(cx),\n                     dwarf_tag,\n                     scope_metadata,\n@@ -1713,38 +1713,25 @@ fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     type_metadata,\n                     cx.sess().opts.optimize != config::No,\n                     0,\n-                    argument_index)\n-            }\n-        ),\n-        IndirectVariable { alloca, address_operations } => (\n-            alloca,\n-            unsafe {\n-                llvm::LLVMDIBuilderCreateComplexVariable(\n-                    DIB(cx),\n-                    dwarf_tag,\n-                    scope_metadata,\n-                    name.as_ptr(),\n-                    file_metadata,\n-                    loc.line as c_uint,\n-                    type_metadata,\n                     address_operations.as_ptr(),\n                     address_operations.len() as c_uint,\n                     argument_index)\n-            }\n-        )\n-    };\n-\n-    set_debug_location(cx, InternalDebugLocation::new(scope_metadata,\n+            };\n+            set_debug_location(cx, InternalDebugLocation::new(scope_metadata,\n                                                       loc.line,\n                                                       loc.col.to_usize()));\n-    unsafe {\n-        let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n-            DIB(cx),\n-            var_alloca,\n-            var_metadata,\n-            bcx.llbb);\n+            unsafe {\n+                let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n+                    DIB(cx),\n+                    alloca,\n+                    metadata,\n+                    address_operations.as_ptr(),\n+                    address_operations.len() as c_uint,\n+                    bcx.llbb);\n \n-        llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n+                llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n+            }\n+        }\n     }\n \n     match variable_kind {\n@@ -2716,7 +2703,7 @@ fn set_members_of_composite_type(cx: &CrateContext,\n \n     unsafe {\n         let type_array = create_DIArray(DIB(cx), &member_metadata[]);\n-        llvm::LLVMDICompositeTypeSetTypeArray(composite_type_metadata, type_array);\n+        llvm::LLVMDICompositeTypeSetTypeArray(DIB(cx), composite_type_metadata, type_array);\n     }\n }\n \n@@ -3150,12 +3137,14 @@ fn set_debug_location(cx: &CrateContext, debug_location: InternalDebugLocation)\n             // Always set the column to zero like Clang and GCC\n             let col = UNKNOWN_COLUMN_NUMBER;\n             debug!(\"setting debug location to {} {}\", line, col);\n-            let elements = [C_i32(cx, line as i32), C_i32(cx, col as i32),\n-                            scope, ptr::null_mut()];\n+\n             unsafe {\n-                metadata_node = llvm::LLVMMDNodeInContext(debug_context(cx).llcontext,\n-                                                          elements.as_ptr(),\n-                                                          elements.len() as c_uint);\n+                metadata_node = llvm::LLVMDIBuilderCreateDebugLocation(\n+                    debug_context(cx).llcontext,\n+                    line as c_uint,\n+                    col as c_uint,\n+                    scope,\n+                    ptr::null_mut());\n             }\n         }\n         UnknownLocation => {"}, {"sha": "2d54c4f559b1acbfe1867950c3a25bfb2f76b693", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=602e508db0fd3566ef59a6a4833b68c3a55ddc79", "patch": "@@ -1 +1 @@\n-Subproject commit b820135911e17c7a46b901db56baa48e5155bf46\n+Subproject commit 2d54c4f559b1acbfe1867950c3a25bfb2f76b693"}, {"sha": "8ca81ab3d68eadd3edf1b48e832c7d50cfa1fb8c", "filename": "src/rustllvm/ExecutionEngineWrapper.cpp", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FExecutionEngineWrapper.cpp?ref=602e508db0fd3566ef59a6a4833b68c3a55ddc79", "patch": "@@ -82,21 +82,24 @@ extern \"C\" LLVMExecutionEngineRef LLVMBuildExecutionEngine(\n     InitializeNativeTargetAsmPrinter();\n     InitializeNativeTargetAsmParser();\n \n-    std::unique_ptr<Module> m(unwrap(mod));\n-    RustJITMemoryManager *mm = unwrap(mref);\n-\n     std::string error_str;\n     TargetOptions options;\n \n     options.JITEmitDebugInfo = true;\n     options.NoFramePointerElim = true;\n \n-    ExecutionEngine *ee = EngineBuilder(std::move(m))\n-        .setEngineKind(EngineKind::JIT)\n-        .setErrorStr(&error_str)\n-        .setMCJITMemoryManager(mm)\n-        .setTargetOptions(options)\n-        .create();\n+    ExecutionEngine *ee =\n+    #if LLVM_VERSION_MINOR <= 5\n+        EngineBuilder(unwrap(mod))\n+            .setMCJITMemoryManager(unwrap(mref))\n+    #else\n+        EngineBuilder(std::unique_ptr<Module>(unwrap(mod)))\n+            .setMCJITMemoryManager(std::unique_ptr<RustJITMemoryManager>(unwrap(mref)))\n+    #endif\n+            .setEngineKind(EngineKind::JIT)\n+            .setErrorStr(&error_str)\n+            .setTargetOptions(options)\n+            .create();\n \n     if (!ee)\n         LLVMRustSetLastError(error_str.c_str());"}, {"sha": "aaf6d8df29cadca7c9a1ef005698db269410d032", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 168, "deletions": 101, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=602e508db0fd3566ef59a6a4833b68c3a55ddc79", "patch": "@@ -228,8 +228,22 @@ extern \"C\" LLVMValueRef LLVMInlineAsm(LLVMTypeRef Ty,\n \n typedef DIBuilder* DIBuilderRef;\n \n+#if LLVM_VERSION_MINOR >= 6\n+typedef struct LLVMOpaqueMetadata *LLVMMetadataRef;\n+\n+namespace llvm {\n+DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMMetadataRef)\n+\n+inline Metadata **unwrap(LLVMMetadataRef *Vals) {\n+  return reinterpret_cast<Metadata**>(Vals);\n+}\n+}\n+#else\n+typedef LLVMValueRef LLVMMetadataRef;\n+#endif\n+\n template<typename DIT>\n-DIT unwrapDI(LLVMValueRef ref) {\n+DIT unwrapDI(LLVMMetadataRef ref) {\n     return DIT(ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n@@ -257,7 +271,7 @@ extern \"C\" void LLVMDIBuilderFinalize(DIBuilderRef Builder) {\n     Builder->finalize();\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateCompileUnit(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateCompileUnit(\n     DIBuilderRef Builder,\n     unsigned Lang,\n     const char* File,\n@@ -277,17 +291,17 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateCompileUnit(\n                                            SplitName));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateFile(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateFile(\n     DIBuilderRef Builder,\n     const char* Filename,\n     const char* Directory) {\n     return wrap(Builder->createFile(Filename, Directory));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateSubroutineType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateSubroutineType(\n     DIBuilderRef Builder,\n-    LLVMValueRef File,\n-    LLVMValueRef ParameterTypes) {\n+    LLVMMetadataRef File,\n+    LLVMMetadataRef ParameterTypes) {\n     return wrap(Builder->createSubroutineType(\n         unwrapDI<DIFile>(File),\n #if LLVM_VERSION_MINOR >= 6\n@@ -297,22 +311,22 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateSubroutineType(\n #endif\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateFunction(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateFunction(\n     DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n     const char* LinkageName,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNo,\n-    LLVMValueRef Ty,\n+    LLVMMetadataRef Ty,\n     bool isLocalToUnit,\n     bool isDefinition,\n     unsigned ScopeLine,\n     unsigned Flags,\n     bool isOptimized,\n     LLVMValueRef Fn,\n-    LLVMValueRef TParam,\n-    LLVMValueRef Decl) {\n+    LLVMMetadataRef TParam,\n+    LLVMMetadataRef Decl) {\n     return wrap(Builder->createFunction(\n         unwrapDI<DIScope>(Scope), Name, LinkageName,\n         unwrapDI<DIFile>(File), LineNo,\n@@ -323,7 +337,7 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateFunction(\n         unwrapDI<MDNode*>(Decl)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateBasicType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateBasicType(\n     DIBuilderRef Builder,\n     const char* Name,\n     uint64_t SizeInBits,\n@@ -334,29 +348,29 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateBasicType(\n         AlignInBits, Encoding));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreatePointerType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreatePointerType(\n     DIBuilderRef Builder,\n-    LLVMValueRef PointeeTy,\n+    LLVMMetadataRef PointeeTy,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     const char* Name) {\n     return wrap(Builder->createPointerType(\n         unwrapDI<DIType>(PointeeTy), SizeInBits, AlignInBits, Name));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStructType(\n     DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     unsigned Flags,\n-    LLVMValueRef DerivedFrom,\n-    LLVMValueRef Elements,\n+    LLVMMetadataRef DerivedFrom,\n+    LLVMMetadataRef Elements,\n     unsigned RunTimeLang,\n-    LLVMValueRef VTableHolder,\n+    LLVMMetadataRef VTableHolder,\n     const char *UniqueId) {\n     return wrap(Builder->createStructType(\n         unwrapDI<DIDescriptor>(Scope),\n@@ -376,28 +390,28 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n         ));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateMemberType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateMemberType(\n     DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNo,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     uint64_t OffsetInBits,\n     unsigned Flags,\n-    LLVMValueRef Ty) {\n+    LLVMMetadataRef Ty) {\n     return wrap(Builder->createMemberType(\n         unwrapDI<DIDescriptor>(Scope), Name,\n         unwrapDI<DIFile>(File), LineNo,\n         SizeInBits, AlignInBits, OffsetInBits, Flags,\n         unwrapDI<DIType>(Ty)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateLexicalBlock(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock(\n     DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n-    LLVMValueRef File,\n+    LLVMMetadataRef Scope,\n+    LLVMMetadataRef File,\n     unsigned Line,\n     unsigned Col) {\n     return wrap(Builder->createLexicalBlock(\n@@ -409,17 +423,17 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateLexicalBlock(\n         ));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateStaticVariable(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStaticVariable(\n     DIBuilderRef Builder,\n-    LLVMValueRef Context,\n+    LLVMMetadataRef Context,\n     const char* Name,\n     const char* LinkageName,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNo,\n-    LLVMValueRef Ty,\n+    LLVMMetadataRef Ty,\n     bool isLocalToUnit,\n     LLVMValueRef Val,\n-    LLVMValueRef Decl = NULL) {\n+    LLVMMetadataRef Decl = NULL) {\n #if LLVM_VERSION_MINOR == 6\n     return wrap(Builder->createGlobalVariable(unwrapDI<DIDescriptor>(Context),\n #else\n@@ -431,105 +445,154 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateStaticVariable(\n         LineNo,\n         unwrapDI<DIType>(Ty),\n         isLocalToUnit,\n-        unwrap(Val),\n+        cast<Constant>(unwrap(Val)),\n         unwrapDI<MDNode*>(Decl)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateLocalVariable(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVariable(\n     DIBuilderRef Builder,\n     unsigned Tag,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNo,\n-    LLVMValueRef Ty,\n+    LLVMMetadataRef Ty,\n     bool AlwaysPreserve,\n     unsigned Flags,\n+    int64_t* AddrOps,\n+    unsigned AddrOpsCount,\n     unsigned ArgNo) {\n+#if LLVM_VERSION_MINOR < 6\n+    if (AddrOpsCount > 0) {\n+        SmallVector<llvm::Value *, 16> addr_ops;\n+        llvm::Type *Int64Ty = Type::getInt64Ty(VMContext);\n+        for (int i = 0; i < AddrOpsCount; ++i)\n+            addr_ops.push_back(ConstantInt::get(Int64Ty, AddrOps[i]));\n+\n+        return wrap(Builder->createComplexVariable(\n+            Tag,\n+            unwrapDI<DIDescriptor>(Scope),\n+            Name,\n+            unwrapDI<DIFile>(File),\n+            LineNo,\n+            unwrapDI<DIType>(Ty),\n+            addr_ops,\n+            ArgNo\n+        ));\n+    }\n+#endif\n     return wrap(Builder->createLocalVariable(Tag,\n         unwrapDI<DIDescriptor>(Scope), Name,\n         unwrapDI<DIFile>(File),\n         LineNo,\n         unwrapDI<DIType>(Ty), AlwaysPreserve, Flags, ArgNo));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateArrayType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateArrayType(\n     DIBuilderRef Builder,\n     uint64_t Size,\n     uint64_t AlignInBits,\n-    LLVMValueRef Ty,\n-    LLVMValueRef Subscripts) {\n+    LLVMMetadataRef Ty,\n+    LLVMMetadataRef Subscripts) {\n     return wrap(Builder->createArrayType(Size, AlignInBits,\n         unwrapDI<DIType>(Ty),\n         unwrapDI<DIArray>(Subscripts)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateVectorType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVectorType(\n     DIBuilderRef Builder,\n     uint64_t Size,\n     uint64_t AlignInBits,\n-    LLVMValueRef Ty,\n-    LLVMValueRef Subscripts) {\n+    LLVMMetadataRef Ty,\n+    LLVMMetadataRef Subscripts) {\n     return wrap(Builder->createVectorType(Size, AlignInBits,\n         unwrapDI<DIType>(Ty),\n         unwrapDI<DIArray>(Subscripts)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderGetOrCreateSubrange(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderGetOrCreateSubrange(\n     DIBuilderRef Builder,\n     int64_t Lo,\n     int64_t Count) {\n     return wrap(Builder->getOrCreateSubrange(Lo, Count));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderGetOrCreateArray(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(\n     DIBuilderRef Builder,\n-    LLVMValueRef* Ptr,\n+    LLVMMetadataRef* Ptr,\n     unsigned Count) {\n     return wrap(Builder->getOrCreateArray(\n-        ArrayRef<Value*>(reinterpret_cast<Value**>(Ptr), Count)));\n+        ArrayRef<Metadata*>(unwrap(Ptr), Count)));\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n     DIBuilderRef Builder,\n     LLVMValueRef Val,\n-    LLVMValueRef VarInfo,\n+    LLVMMetadataRef VarInfo,\n+    int64_t* AddrOps,\n+    unsigned AddrOpsCount,\n     LLVMBasicBlockRef InsertAtEnd) {\n+#if LLVM_VERSION_MINOR >= 6\n+    DIExpression Expr;\n+    if (AddrOpsCount == 0) {\n+      Expr = Builder->createExpression();\n+    } else {\n+      llvm::ArrayRef<int64_t> addr_ops(AddrOps, AddrOpsCount);\n+      Expr = Builder->createExpression(addr_ops);\n+    }\n+#endif\n     return wrap(Builder->insertDeclare(\n         unwrap(Val),\n         unwrapDI<DIVariable>(VarInfo),\n+#if LLVM_VERSION_MINOR >= 6\n+        Expr,\n+#endif\n         unwrap(InsertAtEnd)));\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareBefore(\n     DIBuilderRef Builder,\n     LLVMValueRef Val,\n-    LLVMValueRef VarInfo,\n+    LLVMMetadataRef VarInfo,\n+    int64_t* AddrOps,\n+    unsigned AddrOpsCount,\n     LLVMValueRef InsertBefore) {\n+#if LLVM_VERSION_MINOR >= 6\n+    DIExpression Expr;\n+    if (AddrOpsCount == 0) {\n+      Expr = Builder->createExpression();\n+    } else {\n+      llvm::ArrayRef<int64_t> addr_ops(AddrOps, AddrOpsCount);\n+      Expr = Builder->createExpression(addr_ops);\n+    }\n+#endif\n     return wrap(Builder->insertDeclare(\n         unwrap(Val),\n         unwrapDI<DIVariable>(VarInfo),\n+#if LLVM_VERSION_MINOR >= 6\n+        Expr,\n+#endif\n         unwrap<Instruction>(InsertBefore)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateEnumerator(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateEnumerator(\n     DIBuilderRef Builder,\n     const char* Name,\n     uint64_t Val)\n {\n     return wrap(Builder->createEnumerator(Name, Val));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateEnumerationType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateEnumerationType(\n     DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n-    LLVMValueRef Elements,\n-    LLVMValueRef ClassType)\n+    LLVMMetadataRef Elements,\n+    LLVMMetadataRef ClassType)\n {\n     return wrap(Builder->createEnumerationType(\n         unwrapDI<DIDescriptor>(Scope),\n@@ -542,16 +605,16 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateEnumerationType(\n         unwrapDI<DIType>(ClassType)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateUnionType(\n     DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     unsigned Flags,\n-    LLVMValueRef Elements,\n+    LLVMMetadataRef Elements,\n     unsigned RunTimeLang,\n     const char* UniqueId)\n {\n@@ -577,12 +640,12 @@ extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n }\n #endif\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateTemplateTypeParameter(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateTemplateTypeParameter(\n     DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n-    LLVMValueRef Ty,\n-    LLVMValueRef File,\n+    LLVMMetadataRef Ty,\n+    LLVMMetadataRef File,\n     unsigned LineNo,\n     unsigned ColumnNo)\n {\n@@ -595,47 +658,21 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateTemplateTypeParameter(\n       ColumnNo));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateOpDeref(LLVMTypeRef IntTy)\n+extern \"C\" int64_t LLVMDIBuilderCreateOpDeref()\n {\n-    return LLVMConstInt(IntTy, DIBuilder::OpDeref, true);\n+    return dwarf::DW_OP_deref;\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateOpPlus(LLVMTypeRef IntTy)\n+extern \"C\" int64_t LLVMDIBuilderCreateOpPlus()\n {\n-    return LLVMConstInt(IntTy, DIBuilder::OpPlus, true);\n+    return dwarf::DW_OP_plus;\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateComplexVariable(\n+extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateNameSpace(\n     DIBuilderRef Builder,\n-    unsigned Tag,\n-    LLVMValueRef Scope,\n-    const char *Name,\n-    LLVMValueRef File,\n-    unsigned LineNo,\n-    LLVMValueRef Ty,\n-    LLVMValueRef* AddrOps,\n-    unsigned AddrOpsCount,\n-    unsigned ArgNo)\n-{\n-    llvm::ArrayRef<llvm::Value*> addr_ops((llvm::Value**)AddrOps, AddrOpsCount);\n-\n-    return wrap(Builder->createComplexVariable(\n-        Tag,\n-        unwrapDI<DIDescriptor>(Scope),\n-        Name,\n-        unwrapDI<DIFile>(File),\n-        LineNo,\n-        unwrapDI<DIType>(Ty),\n-        addr_ops,\n-        ArgNo\n-    ));\n-}\n-\n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateNameSpace(\n-    DIBuilderRef Builder,\n-    LLVMValueRef Scope,\n+    LLVMMetadataRef Scope,\n     const char* Name,\n-    LLVMValueRef File,\n+    LLVMMetadataRef File,\n     unsigned LineNo)\n {\n     return wrap(Builder->createNameSpace(\n@@ -646,16 +683,39 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateNameSpace(\n }\n \n extern \"C\" void LLVMDICompositeTypeSetTypeArray(\n-    LLVMValueRef CompositeType,\n-    LLVMValueRef TypeArray)\n+    DIBuilderRef Builder,\n+    LLVMMetadataRef CompositeType,\n+    LLVMMetadataRef TypeArray)\n {\n #if LLVM_VERSION_MINOR >= 6\n-    unwrapDI<DICompositeType>(CompositeType).setArrays(unwrapDI<DIArray>(TypeArray));\n+    DICompositeType tmp = unwrapDI<DICompositeType>(CompositeType);\n+    Builder->replaceArrays(tmp, unwrapDI<DIArray>(TypeArray));\n #else\n     unwrapDI<DICompositeType>(CompositeType).setTypeArray(unwrapDI<DIArray>(TypeArray));\n #endif\n }\n \n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateDebugLocation(\n+  LLVMContextRef Context,\n+  unsigned Line,\n+  unsigned Column,\n+  LLVMMetadataRef Scope,\n+  LLVMMetadataRef InlinedAt) {\n+\n+    LLVMContext& context = *unwrap(Context);\n+\n+    DebugLoc debug_loc = DebugLoc::get(Line,\n+                                       Column,\n+                                       unwrapDI<MDNode*>(Scope),\n+                                       unwrapDI<MDNode*>(InlinedAt));\n+\n+#if LLVM_VERSION_MINOR >= 6\n+    return wrap(MetadataAsValue::get(context, debug_loc.getAsMDNode(context)));\n+#else\n+    return wrap(debug_loc.getAsMDNode(context));\n+#endif\n+}\n+\n extern \"C\" void LLVMWriteTypeToString(LLVMTypeRef Type, RustStringRef str) {\n     raw_rust_string_ostream os(str);\n     unwrap<llvm::Type>(Type)->print(os);\n@@ -690,7 +750,14 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     }\n \n     std::string Err;\n+\n+#if LLVM_VERSION_MINOR >= 6\n+    raw_string_ostream Stream(Err);\n+    DiagnosticPrinterRawOStream DP(Stream);\n+    if (Linker::LinkModules(Dst, *Src, [&](const DiagnosticInfo &DI) { DI.print(DP); })) {\n+#else\n     if (Linker::LinkModules(Dst, *Src, Linker::DestroySource, &Err)) {\n+#endif\n         LLVMRustSetLastError(Err.c_str());\n         return false;\n     }\n@@ -772,7 +839,7 @@ extern \"C\" const char*\n #if LLVM_VERSION_MINOR >= 6\n LLVMRustArchiveReadSection(OwningBinary<Archive> *ob, char *name, size_t *size) {\n \n-    std::unique_ptr<Archive> &ar = ob->getBinary();\n+    Archive *ar = ob->getBinary();\n #else\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {\n #endif"}, {"sha": "e159e9729b635a2c416931c41a9361676045f091", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/602e508db0fd3566ef59a6a4833b68c3a55ddc79/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=602e508db0fd3566ef59a6a4833b68c3a55ddc79", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2015-01-18\n+2015-01-30"}]}