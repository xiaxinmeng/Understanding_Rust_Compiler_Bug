{"sha": "36f2816a1e070d33c27c07f176e692d87781d228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZjI4MTZhMWUwNzBkMzNjMjdjMDdmMTc2ZTY5MmQ4Nzc4MWQyMjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-11T00:49:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-28T14:58:20Z"}, "message": "proc_macro: Use an item's tokens if available\n\nThis partly resolves the `FIXME` located in `src/libproc_macro/lib.rs` when\ninterpreting interpolated tokens. All instances of `ast::Item` which have a list\nof tokens attached to them now use that list of tokens to losslessly get\nconverted into a `TokenTree` instead of going through stringification and losing\nspan information.\n\ncc #43081", "tree": {"sha": "358266d54f268dea9a64cfa6cd7ba5c2ffe1eb34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/358266d54f268dea9a64cfa6cd7ba5c2ffe1eb34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f2816a1e070d33c27c07f176e692d87781d228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f2816a1e070d33c27c07f176e692d87781d228", "html_url": "https://github.com/rust-lang/rust/commit/36f2816a1e070d33c27c07f176e692d87781d228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f2816a1e070d33c27c07f176e692d87781d228/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2f7624ecb743e9db8e135113f396a7956623e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2f7624ecb743e9db8e135113f396a7956623e7", "html_url": "https://github.com/rust-lang/rust/commit/9b2f7624ecb743e9db8e135113f396a7956623e7"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "0f0d4138062ff8861237b8181e6e9d6430c3e28c", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/36f2816a1e070d33c27c07f176e692d87781d228/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f2816a1e070d33c27c07f176e692d87781d228/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=36f2816a1e070d33c27c07f176e692d87781d228", "patch": "@@ -509,14 +509,26 @@ impl TokenTree {\n             Ident(ident) | Lifetime(ident) => TokenNode::Term(Term(ident.name)),\n             Literal(..) | DocComment(..) => TokenNode::Literal(self::Literal(token)),\n \n-            Interpolated(ref nt) => __internal::with_sess(|(sess, _)| {\n-                TokenNode::Group(Delimiter::None, TokenStream(nt.1.force(|| {\n-                    // FIXME(jseyfried): Avoid this pretty-print + reparse hack\n-                    let name = \"<macro expansion>\".to_owned();\n-                    let source = pprust::token_to_string(&token);\n-                    parse_stream_from_source_str(name, source, sess, Some(span))\n-                })))\n-            }),\n+            Interpolated(ref nt) => {\n+                let mut node = None;\n+                if let Nonterminal::NtItem(ref item) = nt.0 {\n+                    if let Some(ref tokens) = item.tokens {\n+                        node = Some(TokenNode::Group(Delimiter::None,\n+                                                     TokenStream(tokens.clone())));\n+                    }\n+                }\n+\n+                node.unwrap_or_else(|| {\n+                    __internal::with_sess(|(sess, _)| {\n+                        TokenNode::Group(Delimiter::None, TokenStream(nt.1.force(|| {\n+                            // FIXME(jseyfried): Avoid this pretty-print + reparse hack\n+                            let name = \"<macro expansion>\".to_owned();\n+                            let source = pprust::token_to_string(&token);\n+                            parse_stream_from_source_str(name, source, sess, Some(span))\n+                        })))\n+                    })\n+                })\n+            }\n \n             OpenDelim(..) | CloseDelim(..) => unreachable!(),\n             Whitespace | Comment | Shebang(..) | Eof => unreachable!(),"}]}