{"sha": "68041b42fc4a915321c31895f4544e8e70a0c4c8", "node_id": "C_kwDOAAsO6NoAKDY4MDQxYjQyZmM0YTkxNTMyMWMzMTg5NWY0NTQ0ZThlNzBhMGM0Yzg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-18T09:19:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-21T07:35:49Z"}, "message": "Print one character per test instead of one line", "tree": {"sha": "05253cb1476440b3da954da32ff18883cfa7b263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05253cb1476440b3da954da32ff18883cfa7b263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68041b42fc4a915321c31895f4544e8e70a0c4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68041b42fc4a915321c31895f4544e8e70a0c4c8", "html_url": "https://github.com/rust-lang/rust/commit/68041b42fc4a915321c31895f4544e8e70a0c4c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68041b42fc4a915321c31895f4544e8e70a0c4c8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30931eeecb047d1729d7c709af4036e20f20c5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/30931eeecb047d1729d7c709af4036e20f20c5ea", "html_url": "https://github.com/rust-lang/rust/commit/30931eeecb047d1729d7c709af4036e20f20c5ea"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "72aa140d66a2b98ed6e8bea54d55b14f0cb99d83", "filename": "tests/compiletest.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68041b42fc4a915321c31895f4544e8e70a0c4c8/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68041b42fc4a915321c31895f4544e8e70a0c4c8/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=68041b42fc4a915321c31895f4544e8e70a0c4c8", "patch": "@@ -48,8 +48,17 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n-    // Pass on all arguments as filters.\n-    let path_filter = std::env::args().skip(1);\n+    // Pass on all unknown arguments as filters.\n+    let mut quiet = false;\n+    let path_filter = std::env::args().skip(1).filter(|arg| {\n+        match &**arg {\n+            \"--quiet\" => {\n+                quiet = true;\n+                false\n+            }\n+            _ => true,\n+        }\n+    });\n \n     let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n \n@@ -76,6 +85,7 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n             ],\n             envs: vec![],\n         }),\n+        quiet,\n     };\n     ui_test::run_tests(config)\n }"}, {"sha": "f33f8cd83f3383bd762c2e2a6252aac148ff7d17", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/68041b42fc4a915321c31895f4544e8e70a0c4c8/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68041b42fc4a915321c31895f4544e8e70a0c4c8/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=68041b42fc4a915321c31895f4544e8e70a0c4c8", "patch": "@@ -46,6 +46,8 @@ pub struct Config {\n     /// Can be used to override what command to run instead of `cargo` to build the\n     /// dependencies in `manifest_path`\n     pub dependency_builder: Option<DependencyBuilder>,\n+    /// Print one character per test instead of one line\n+    pub quiet: bool,\n }\n \n #[derive(Debug)]\n@@ -125,10 +127,38 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n \n         // A channel for the messages emitted by the individual test threads.\n         let (finish_file, finished_files) = crossbeam::channel::unbounded();\n+        enum TestResult {\n+            Ok,\n+            Failed,\n+            Ignored,\n+        }\n \n         s.spawn(|_| {\n-            for msg in finished_files {\n-                eprintln!(\"{msg}\");\n+            if config.quiet {\n+                for (i, (_, result)) in finished_files.into_iter().enumerate() {\n+                    // Humans start counting at 1\n+                    let i = i + 1;\n+                    match result {\n+                        TestResult::Ok => eprint!(\"{}\", \".\".green()),\n+                        TestResult::Failed => eprint!(\"{}\", \"F\".red().bold()),\n+                        TestResult::Ignored => eprint!(\"{}\", \"i\".yellow()),\n+                    }\n+                    if i % 100 == 0 {\n+                        eprintln!(\" {i}\");\n+                    }\n+                }\n+            } else {\n+                for (msg, result) in finished_files {\n+                    eprint!(\"{msg} ... \");\n+                    eprintln!(\n+                        \"{}\",\n+                        match result {\n+                            TestResult::Ok => \"ok\".green(),\n+                            TestResult::Failed => \"FAILED\".red().bold(),\n+                            TestResult::Ignored => \"ignored (in-test comment)\".yellow(),\n+                        }\n+                    );\n+                }\n             }\n         });\n \n@@ -151,12 +181,7 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                     // Ignore file if only/ignore rules do (not) apply\n                     if !test_file_conditions(&comments, &target, &config) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n-                        let msg = format!(\n-                            \"{} ... {}\",\n-                            path.display(),\n-                            \"ignored (in-test comment)\".yellow()\n-                        );\n-                        finish_file.send(msg)?;\n+                        finish_file.send((path.display().to_string(), TestResult::Ignored))?;\n                         continue;\n                     }\n                     // Run the test for all revisions\n@@ -171,12 +196,11 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                         if !revision.is_empty() {\n                             write!(msg, \"(revision `{revision}`) \").unwrap();\n                         }\n-                        write!(msg, \"... \").unwrap();\n                         if errors.is_empty() {\n-                            write!(msg, \"{}\", \"ok\".green()).unwrap();\n+                            finish_file.send((msg, TestResult::Ok))?;\n                             succeeded.fetch_add(1, Ordering::Relaxed);\n                         } else {\n-                            write!(msg, \"{}\", \"FAILED\".red().bold()).unwrap();\n+                            finish_file.send((msg, TestResult::Failed))?;\n                             failures.lock().unwrap().push((\n                                 path.clone(),\n                                 m,\n@@ -185,7 +209,6 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                                 stderr,\n                             ));\n                         }\n-                        finish_file.send(msg)?;\n                     }\n                 }\n                 Ok(())"}, {"sha": "2032988ed384dcd8daee4b2ddf12dd1b04346dba", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68041b42fc4a915321c31895f4544e8e70a0c4c8/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68041b42fc4a915321c31895f4544e8e70a0c4c8/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=68041b42fc4a915321c31895f4544e8e70a0c4c8", "patch": "@@ -18,6 +18,7 @@ fn config() -> Config {\n         output_conflict_handling: OutputConflictHandling::Error,\n         dependencies_crate_manifest_path: None,\n         dependency_builder: None,\n+        quiet: false,\n     }\n }\n "}]}