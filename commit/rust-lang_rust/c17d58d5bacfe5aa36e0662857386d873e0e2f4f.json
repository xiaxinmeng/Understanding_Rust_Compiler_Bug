{"sha": "c17d58d5bacfe5aa36e0662857386d873e0e2f4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxN2Q1OGQ1YmFjZmU1YWEzNmUwNjYyODU3Mzg2ZDg3M2UwZTJmNGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-18T07:33:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-18T07:33:11Z"}, "message": "rustdoc: Extract boilerplate from gen tests", "tree": {"sha": "f36b8b5d2897bad9fe38740680fc11a01dac4145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36b8b5d2897bad9fe38740680fc11a01dac4145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17d58d5bacfe5aa36e0662857386d873e0e2f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17d58d5bacfe5aa36e0662857386d873e0e2f4f", "html_url": "https://github.com/rust-lang/rust/commit/c17d58d5bacfe5aa36e0662857386d873e0e2f4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17d58d5bacfe5aa36e0662857386d873e0e2f4f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0142e807ddd4059e3d4d2c0dd4b5aa13eab3c19a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0142e807ddd4059e3d4d2c0dd4b5aa13eab3c19a", "html_url": "https://github.com/rust-lang/rust/commit/0142e807ddd4059e3d4d2c0dd4b5aa13eab3c19a"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "63bcaa024c4f7fddfa8ce0553e716f5385ef308e", "filename": "src/rustdoc/gen.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c17d58d5bacfe5aa36e0662857386d873e0e2f4f/src%2Frustdoc%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17d58d5bacfe5aa36e0662857386d873e0e2f4f/src%2Frustdoc%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fgen.rs?ref=c17d58d5bacfe5aa36e0662857386d873e0e2f4f", "patch": "@@ -131,6 +131,13 @@ fn write_fn(\n \n #[cfg(test)]\n mod tests {\n+    fn render(source: str) -> str {\n+        let srv = astsrv::mk_srv_from_str(source);\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = attr_pass::mk_pass()(srv, doc);\n+        write_markdown_str(doc)\n+    }\n+\n     fn write_markdown_str(\n         doc: doc::cratedoc\n     ) -> str {\n@@ -142,57 +149,40 @@ mod tests {\n \n     #[test]\n     fn write_markdown_should_write_crate_header() {\n-        let source = \"\";\n-        let ast = parse::from_str(source);\n-        let doc = extract::extract(ast, \"belch\");\n+        let srv = astsrv::mk_srv_from_str(\"\");\n+        let doc = extract::from_srv(srv, \"belch\");\n+        let doc = attr_pass::mk_pass()(srv, doc);\n         let markdown = write_markdown_str(doc);\n         assert str::contains(markdown, \"# Crate belch\");\n     }\n \n     #[test]\n     fn write_markdown_should_write_function_header() {\n-        let source = \"fn func() { }\";\n-        let ast = parse::from_str(source);\n-        let doc = extract::extract(ast, \"\");\n-        let markdown = write_markdown_str(doc);\n+        let markdown = render(\"fn func() { }\");\n         assert str::contains(markdown, \"## Function `func`\");\n     }\n \n     #[test]\n     fn write_markdown_should_write_mod_headers() {\n-        let source = \"mod moo { }\";\n-        let ast = parse::from_str(source);\n-        let doc = extract::extract(ast, \"\");\n-        let markdown = write_markdown_str(doc);\n+        let markdown = render(\"mod moo { }\");\n         assert str::contains(markdown, \"## Module `moo`\");\n     }\n \n     #[test]\n     fn should_leave_blank_line_after_header() {\n-        let source = \"mod morp { }\";\n-        let ast = parse::from_str(source);\n-        let doc = extract::extract(ast, \"\");\n-        let markdown = write_markdown_str(doc);\n+        let markdown = render(\"mod morp { }\");\n         assert str::contains(markdown, \"Module `morp`\\n\\n\");\n     }\n \n     #[test]\n     fn should_leave_blank_line_between_fn_header_and_brief() {\n-        let source = \"#[doc(brief = \\\"brief\\\")] fn a() { }\";\n-        let srv = astsrv::mk_srv_from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        let markdown = write_markdown_str(doc);\n+        let markdown = render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n         assert str::contains(markdown, \"Function `a`\\n\\nbrief\");\n     }\n \n     #[test]\n     fn should_leve_blank_line_after_brief() {\n-        let source = \"#[doc(brief = \\\"brief\\\")] fn a() { }\";\n-        let srv = astsrv::mk_srv_from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = attr_pass::mk_pass()(srv, doc);\n-        let markdown = write_markdown_str(doc);\n+        let markdown = render(\"#[doc(brief = \\\"brief\\\")] fn a() { }\");\n         assert str::contains(markdown, \"brief\\n\\n\");\n     }\n }\n\\ No newline at end of file"}]}