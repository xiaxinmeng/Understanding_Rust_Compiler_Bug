{"sha": "966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NmU5ZGIyYjgzODAyZGZiNTVkNTViZDNhMjZlNjlkY2VkMWJiZDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-01T07:40:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-01T07:40:07Z"}, "message": "Extract libeditor", "tree": {"sha": "6d3bda084eab1221bcad7602aa26a2c307850a72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d3bda084eab1221bcad7602aa26a2c307850a72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "html_url": "https://github.com/rust-lang/rust/commit/966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9189ed2db8cb1934e677a17fcc6282c66306df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9189ed2db8cb1934e677a17fcc6282c66306df1", "html_url": "https://github.com/rust-lang/rust/commit/b9189ed2db8cb1934e677a17fcc6282c66306df1"}], "stats": {"total": 188, "additions": 138, "deletions": 50}, "files": [{"sha": "d616133528aaad7121c198baf2d39e9e32cd32f8", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -5,7 +5,7 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n license = \"MIT OR Apache-2.0\"\n \n [workspace]\n-members = [ \"tools\", \"cli\" ]\n+members = [ \"tools\", \"cli\", \"libeditor\" ]\n \n [dependencies]\n unicode-xid = \"0.1.0\""}, {"sha": "0044841ed34b034fbd7785e8f8053ea7014af096", "filename": "cli/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2Fsrc%2Fmain.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -52,7 +52,7 @@ fn main() -> Result<()> {\n fn parse() -> Result<String> {\n     let text = read_stdin()?;\n     let start = Instant::now();\n-    let file = libsyntax2::parse(text);\n+    let file = libsyntax2::parse(&text);\n     eprintln!(\"elapsed {:?}\", start.elapsed());\n     let tree = libsyntax2::utils::dump_tree(&file);\n     Ok(tree)\n@@ -74,7 +74,7 @@ fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n         None => bail!(\"No test found at line {} at {}\", line, file.display()),\n         Some((_start_line, test)) => test,\n     };\n-    let file = libsyntax2::parse(test.text.clone());\n+    let file = libsyntax2::parse(&test.text);\n     let tree = libsyntax2::utils::dump_tree(&file);\n     Ok((test.text, tree))\n }"}, {"sha": "3a27051b2f25c7ec64a71a7c673b90343ed2f604", "filename": "code/native/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/code%2Fnative%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/code%2Fnative%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fnative%2FCargo.toml?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -16,4 +16,4 @@ neon-build = \"0.2.0\"\n \n [dependencies]\n neon = \"0.2.0\"\n-libsyntax2 = { path = \"../../\" }\n+libeditor = { path = \"../../libeditor\" }"}, {"sha": "aae7ad2f394136065c8c06730e1041a1124a1384", "filename": "code/native/src/lib.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/code%2Fnative%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/code%2Fnative%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fnative%2Fsrc%2Flib.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -1,42 +1,20 @@\n #[macro_use]\n extern crate neon;\n-extern crate libsyntax2;\n+extern crate libeditor;\n \n-use libsyntax2::{\n-    TextRange,\n-    File,\n-    utils::dump_tree,\n-    SyntaxKind::*,\n-    algo,\n-};\n use neon::prelude::*;\n \n pub struct Wrapper {\n-    inner: File,\n+    inner: libeditor::File,\n }\n \n-impl Wrapper {\n-    fn highlight(&self) -> Vec<(TextRange, &'static str)> {\n-        let mut res = Vec::new();\n-        let syntax = self.inner.syntax();\n-        for node in algo::walk::preorder(syntax.as_ref()) {\n-            if node.kind() == ERROR {\n-                res.push((node.range(), \"error\"))\n-            }\n-        }\n-        res\n-    }\n-}\n-\n-\n-\n declare_types! {\n     /// A class for generating greeting strings.\n     pub class RustFile for Wrapper {\n         init(mut cx) {\n             let text = cx.argument::<JsString>(0)?.value();\n             Ok(Wrapper {\n-                inner: File::parse(&text)\n+                inner: libeditor::File::new(&text)\n             })\n         }\n \n@@ -45,7 +23,7 @@ declare_types! {\n             let tree = {\n                 let guard = cx.lock();\n                 let wrapper = this.borrow(&guard);\n-                dump_tree(&wrapper.inner.syntax())\n+                wrapper.inner.syntax_tree()\n             };\n             Ok(cx.string(tree.as_str()).upcast())\n         }\n@@ -55,15 +33,15 @@ declare_types! {\n             let highlights = {\n                 let guard = cx.lock();\n                 let wrapper = this.borrow(&guard);\n-                wrapper.highlight()\n+                wrapper.inner.highlight()\n             };\n             let res = cx.empty_array();\n-            for (i, (range, tag)) in highlights.into_iter().enumerate() {\n-                let start: u32 = range.start().into();\n-                let end: u32 = range.end().into();\n+            for (i, hl) in highlights.into_iter().enumerate() {\n+                let start: u32 = hl.range.start().into();\n+                let end: u32 = hl.range.end().into();\n                 let start = cx.number(start);\n                 let end = cx.number(end);\n-                let tag = cx.string(tag);\n+                let tag = cx.string(hl.tag);\n                 let hl = cx.empty_array();\n                 hl.set(&mut cx, 0, start)?;\n                 hl.set(&mut cx, 1, end)?;"}, {"sha": "1a532ce2ff4816169b310195f7740e3f34a2d336", "filename": "libeditor/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/libeditor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/libeditor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2FCargo.toml?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"libeditor\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+publish = false\n+\n+[dependencies]\n+libsyntax2 = { path = \"../\" }\n+text_unit = \"0.1.2\""}, {"sha": "119bdb2d6fb2dac16db497db7ef5de95af9a59ff", "filename": "libeditor/src/lib.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/libeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/libeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Fsrc%2Flib.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -0,0 +1,53 @@\n+extern crate libsyntax2;\n+extern crate text_unit;\n+\n+use libsyntax2::{\n+    algo::walk,\n+    SyntaxKind::*,\n+};\n+use text_unit::TextRange;\n+\n+pub struct File {\n+    inner: libsyntax2::File\n+}\n+\n+pub struct HighlightedRange {\n+    pub range: TextRange,\n+    pub tag: &'static str,\n+}\n+\n+impl File {\n+    pub fn new(text: &str) -> File {\n+        File {\n+            inner: libsyntax2::File::parse(text)\n+        }\n+    }\n+\n+    pub fn highlight(&self) -> Vec<HighlightedRange> {\n+        let syntax = self.inner.syntax();\n+        let mut res = Vec::new();\n+        for node in walk::preorder(syntax.as_ref()) {\n+            let tag = match node.kind() {\n+                ERROR => \"error\",\n+                COMMENT | DOC_COMMENT => \"comment\",\n+                STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n+                ATTR => \"attribute\",\n+                NAME_REF => \"text\",\n+                NAME => \"function\",\n+                INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n+                LIFETIME => \"parameter\",\n+                k if k.is_keyword() => \"keyword\",\n+                _ => continue,\n+            };\n+            res.push(HighlightedRange {\n+                range: node.range(),\n+                tag\n+            })\n+        }\n+        res\n+    }\n+\n+    pub fn syntax_tree(&self) -> String {\n+        ::libsyntax2::utils::dump_tree(&self.inner.syntax())\n+    }\n+}"}, {"sha": "ad0f2d8fb5d577ca8c4b6145c21f82894031ac7b", "filename": "src/algo/walk.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Falgo%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Falgo%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Falgo%2Fwalk.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -6,7 +6,6 @@ pub fn preorder<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = SyntaxNodeR\n         WalkEvent::Exit(_) => None,\n     })\n }\n-\n #[derive(Debug, Copy, Clone)]\n pub enum WalkEvent<'a> {\n     Enter(SyntaxNodeRef<'a>),"}, {"sha": "caf5fb7ef4fc28ccb0941c30bc7cc9cb4388457d", "filename": "src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -9,7 +9,7 @@ pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n impl File<Arc<SyntaxRoot>> {\n     pub fn parse(text: &str) -> Self {\n         File {\n-            syntax: ::parse(text.to_owned()),\n+            syntax: ::parse(text),\n         }\n     }\n }"}, {"sha": "611b87492863781eb7fbd3538b263bdbd951e526", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -45,7 +45,7 @@ pub use {\n     yellow::{SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot},\n };\n \n-pub fn parse(text: String) -> SyntaxNode {\n+pub fn parse(text: &str) -> SyntaxNode {\n     let tokens = tokenize(&text);\n     parser_impl::parse::<yellow::GreenBuilder>(text, &tokens)\n }"}, {"sha": "66a0b6fc05a2164aacc67929f3fa26c93ffabd7e", "filename": "src/parser_impl/event.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fparser_impl%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fparser_impl%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_impl%2Fevent.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -76,7 +76,7 @@ pub(crate) enum Event {\n     },\n }\n \n-pub(super) fn process(builder: &mut impl Sink, tokens: &[Token], events: Vec<Event>) {\n+pub(super) fn process<'a>(builder: &mut impl Sink<'a>, tokens: &[Token], events: Vec<Event>) {\n     let mut idx = 0;\n \n     let mut holes = Vec::new();"}, {"sha": "2791c8da559fc2ce42ee097b3c72bbd851322bef", "filename": "src/parser_impl/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fparser_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fparser_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_impl%2Fmod.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -14,10 +14,10 @@ use {\n \n use SyntaxKind::{self, EOF, TOMBSTONE};\n \n-pub(crate) trait Sink {\n+pub(crate) trait Sink<'a> {\n     type Tree;\n \n-    fn new(text: String) -> Self;\n+    fn new(text: &'a str) -> Self;\n \n     fn leaf(&mut self, kind: SyntaxKind, len: TextUnit);\n     fn start_internal(&mut self, kind: SyntaxKind);\n@@ -27,9 +27,9 @@ pub(crate) trait Sink {\n }\n \n /// Parse a sequence of tokens into the representative node tree\n-pub(crate) fn parse<S: Sink>(text: String, tokens: &[Token]) -> S::Tree {\n+pub(crate) fn parse<'a, S: Sink<'a>>(text: &'a str, tokens: &[Token]) -> S::Tree {\n     let events = {\n-        let input = input::ParserInput::new(&text, tokens);\n+        let input = input::ParserInput::new(text, tokens);\n         let parser_impl = ParserImpl::new(&input);\n         let mut parser_api = Parser(parser_impl);\n         grammar::file(&mut parser_api);"}, {"sha": "cbcd0c4e1443fa2106832a8be99ef2a65dfe1923", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -169,6 +169,47 @@ pub enum SyntaxKind {\n use self::SyntaxKind::*;\n \n impl SyntaxKind {\n+    pub fn is_keyword(self) -> bool {\n+        match self {\n+            | USE_KW\n+            | FN_KW\n+            | STRUCT_KW\n+            | ENUM_KW\n+            | TRAIT_KW\n+            | IMPL_KW\n+            | TRUE_KW\n+            | FALSE_KW\n+            | AS_KW\n+            | EXTERN_KW\n+            | CRATE_KW\n+            | MOD_KW\n+            | PUB_KW\n+            | SELF_KW\n+            | SUPER_KW\n+            | IN_KW\n+            | WHERE_KW\n+            | FOR_KW\n+            | LOOP_KW\n+            | WHILE_KW\n+            | IF_KW\n+            | ELSE_KW\n+            | MATCH_KW\n+            | CONST_KW\n+            | STATIC_KW\n+            | MUT_KW\n+            | UNSAFE_KW\n+            | TYPE_KW\n+            | REF_KW\n+            | LET_KW\n+            | MOVE_KW\n+            | AUTO_KW\n+            | DEFAULT_KW\n+            | UNION_KW\n+                => true,\n+            _ => false\n+        }\n+    }\n+\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n             SEMI => &SyntaxInfo { name: \"SEMI\" },"}, {"sha": "4e2ee56c3b377c38542e3faec49564c55bfa017a", "filename": "src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -24,6 +24,16 @@ pub enum SyntaxKind {\n use self::SyntaxKind::*;\n \n impl SyntaxKind {\n+    pub fn is_keyword(self) -> bool {\n+        match self {\n+{%- for kw in concat(a=keywords, b=contextual_keywords) %}\n+            | {{kw | upper}}_KW\n+{%- endfor %}\n+                => true,\n+            _ => false\n+        }\n+    }\n+\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n {%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}"}, {"sha": "dbe646cd749116fb186503fe1cd1cdb618fc8bc3", "filename": "src/yellow/builder.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fyellow%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/src%2Fyellow%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fbuilder.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -4,20 +4,18 @@ use {\n     SyntaxKind, TextRange, TextUnit,\n };\n \n-pub(crate) struct GreenBuilder {\n-    text: String,\n+pub(crate) struct GreenBuilder<'a> {\n+    text: &'a str,\n     stack: Vec<GreenNodeBuilder>,\n     pos: TextUnit,\n     root: Option<GreenNode>,\n     errors: Vec<SyntaxError>,\n }\n \n-impl GreenBuilder {}\n-\n-impl Sink for GreenBuilder {\n+impl<'a> Sink<'a> for GreenBuilder<'a> {\n     type Tree = SyntaxNode;\n \n-    fn new(text: String) -> Self {\n+    fn new(text: &'a str) -> Self {\n         GreenBuilder {\n             text,\n             stack: Vec::new(),"}, {"sha": "af2ae11bb3769cf0dc6f08505481d5e343b6eece", "filename": "tests/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966e9db2b83802dfb55d55bd3a26e69dced1bbd7/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=966e9db2b83802dfb55d55bd3a26e69dced1bbd7", "patch": "@@ -8,7 +8,7 @@ use testutils::dir_tests;\n #[test]\n fn parser_tests() {\n     dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n-        let file = parse(text.to_string());\n+        let file = parse(text);\n         dump_tree(&file)\n     })\n }"}]}