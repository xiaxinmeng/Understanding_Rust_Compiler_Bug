{"sha": "408ae0fcb9d154691470ce8fc644394c20a97405", "node_id": "C_kwDOAAsO6NoAKDQwOGFlMGZjYjlkMTU0NjkxNDcwY2U4ZmM2NDQzOTRjMjBhOTc0MDU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-05T16:19:14Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-12T17:14:17Z"}, "message": "Feed `resolutions` query instead of it being a thin wrapper around an untracked field", "tree": {"sha": "41336e8ac93d8c1e58e620feab82a8ce7b3c6daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41336e8ac93d8c1e58e620feab82a8ce7b3c6daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/408ae0fcb9d154691470ce8fc644394c20a97405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/408ae0fcb9d154691470ce8fc644394c20a97405", "html_url": "https://github.com/rust-lang/rust/commit/408ae0fcb9d154691470ce8fc644394c20a97405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/408ae0fcb9d154691470ce8fc644394c20a97405/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "html_url": "https://github.com/rust-lang/rust/commit/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "e8656e0dbc2ab705d51e470cb0c00e8cee3ce57b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=408ae0fcb9d154691470ce8fc644394c20a97405", "patch": "@@ -817,7 +817,6 @@ pub fn create_global_ctxt<'tcx>(\n                 lint_store,\n                 arena,\n                 hir_arena,\n-                untracked_resolutions,\n                 untracked,\n                 krate,\n                 dep_graph,\n@@ -832,8 +831,9 @@ pub fn create_global_ctxt<'tcx>(\n \n     let mut qcx = QueryContext { gcx };\n     qcx.enter(|tcx| {\n-        tcx.feed_unit_query()\n-            .resolver_for_lowering(tcx.arena.alloc(Steal::new(untracked_resolver_for_lowering)))\n+        let feed = tcx.feed_unit_query();\n+        feed.resolver_for_lowering(tcx.arena.alloc(Steal::new(untracked_resolver_for_lowering)));\n+        feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n     });\n     qcx\n }"}, {"sha": "ca058cc3c6d8de5b56ddb482fc5b2c6dffa95d48", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=408ae0fcb9d154691470ce8fc644394c20a97405", "patch": "@@ -31,6 +31,7 @@ macro_rules! arena_types {\n             [decode] borrowck_result:\n                 rustc_middle::mir::BorrowCheckResult<'tcx>,\n             [] resolver: rustc_data_structures::steal::Steal<rustc_middle::ty::ResolverAstLowering>,\n+            [] resolutions: rustc_middle::ty::ResolverGlobalCtxt,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,"}, {"sha": "4315247eace262eac7b0304f24350acf2ddbdcd8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=408ae0fcb9d154691470ce8fc644394c20a97405", "patch": "@@ -27,7 +27,7 @@ rustc_queries! {\n     }\n \n     query resolutions(_: ()) -> &'tcx ty::ResolverGlobalCtxt {\n-        eval_always\n+        feedable\n         no_hash\n         desc { \"getting the resolver outputs\" }\n     }"}, {"sha": "276aadcb66be4e4f0cb1394fb3ff7cb188f212e8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408ae0fcb9d154691470ce8fc644394c20a97405/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=408ae0fcb9d154691470ce8fc644394c20a97405", "patch": "@@ -428,8 +428,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     untracked: Untracked,\n-    /// Output of the resolver.\n-    pub(crate) untracked_resolutions: ty::ResolverGlobalCtxt,\n+\n     /// The entire crate as AST. This field serves as the input for the hir_crate query,\n     /// which lowers it from AST to HIR. It must not be read or used by anything else.\n     pub untracked_crate: Steal<Lrc<ast::Crate>>,\n@@ -592,7 +591,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n-        untracked_resolutions: ty::ResolverGlobalCtxt,\n         untracked: Untracked,\n         krate: Lrc<ast::Crate>,\n         dep_graph: DepGraph,\n@@ -622,7 +620,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n             untracked,\n-            untracked_resolutions,\n             untracked_crate: Steal::new(krate),\n             on_disk_cache,\n             queries,\n@@ -2407,7 +2404,6 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n     providers.module_reexports =\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {"}]}