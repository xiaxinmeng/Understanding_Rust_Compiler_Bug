{"sha": "cb52065d55e5ba1383aa155880a5e6661e6415a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTIwNjVkNTVlNWJhMTM4M2FhMTU1ODgwYTVlNjY2MWU2NDE1YTc=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-19T10:31:41Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-19T10:31:41Z"}, "message": "replace libc::nanosleep with wasi::poll_oneoff", "tree": {"sha": "3ede9feb39b4eb26bf866763cb2c922e0f4ba5cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ede9feb39b4eb26bf866763cb2c922e0f4ba5cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb52065d55e5ba1383aa155880a5e6661e6415a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb52065d55e5ba1383aa155880a5e6661e6415a7", "html_url": "https://github.com/rust-lang/rust/commit/cb52065d55e5ba1383aa155880a5e6661e6415a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb52065d55e5ba1383aa155880a5e6661e6415a7/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23cc850ff18652c7b75fa423f9dfff5526a239a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23cc850ff18652c7b75fa423f9dfff5526a239a7", "html_url": "https://github.com/rust-lang/rust/commit/23cc850ff18652c7b75fa423f9dfff5526a239a7"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "eedc584dde500262e7bc8c109eafa5a6eec8db2a", "filename": "src/libstd/sys/wasi/thread.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cb52065d55e5ba1383aa155880a5e6661e6415a7/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb52065d55e5ba1383aa155880a5e6661e6415a7/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs?ref=cb52065d55e5ba1383aa155880a5e6661e6415a7", "patch": "@@ -1,7 +1,7 @@\n use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n-use crate::sys::cvt;\n+use crate::mem;\n use crate::sys::{unsupported, Void};\n use crate::time::Duration;\n use libc;\n@@ -28,19 +28,28 @@ impl Thread {\n     }\n \n     pub fn sleep(dur: Duration) {\n-        let mut secs = dur.as_secs();\n-        let mut nsecs = dur.subsec_nanos() as i32;\n-\n-        unsafe {\n-            while secs > 0 || nsecs > 0 {\n-                let mut ts = libc::timespec {\n-                    tv_sec: cmp::min(libc::time_t::max_value() as u64, secs) as libc::time_t,\n-                    tv_nsec: nsecs,\n-                };\n-                secs -= ts.tv_sec as u64;\n-                cvt(libc::nanosleep(&ts, &mut ts)).unwrap();\n-                nsecs = 0;\n-            }\n+        let nanos = dur.as_nanos();\n+        assert!(nanos <= u64::max_value() as u128);\n+\n+        let clock = wasi::raw::__wasi_subscription_u_clock_t {\n+            identifier: 0,\n+            clock_id: wasi::CLOCK_MONOTONIC,\n+            timeout: nanos as u64,\n+            precision: 0,\n+            flags: 0,\n+        };\n+\n+        let in_ = [wasi::Subscription {\n+            userdata: 0,\n+            type_: wasi::EVENTTYPE_CLOCK,\n+            u: wasi::raw::__wasi_subscription_u { clock: clock },\n+        }];\n+        let mut out: [wasi::Event; 1] = [unsafe { mem::zeroed() }];\n+        let n = wasi::poll_oneoff(&in_, &mut out).unwrap();\n+        let wasi::Event { userdata, error, type_, .. } = out[0];\n+        match (n, userdata, error) {\n+            (1, 0, 0) if type_ == wasi::EVENTTYPE_CLOCK => {}\n+            _ => panic!(\"thread::sleep(): unexpected result of poll_oneof\"),\n         }\n     }\n "}]}