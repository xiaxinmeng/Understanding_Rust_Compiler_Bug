{"sha": "2c6b7b93230d4dcc99608538b43530e9e520215b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNmI3YjkzMjMwZDRkY2M5OTYwODUzOGI0MzUzMGU5ZTUyMDIxNWI=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-03-17T15:28:44Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-03-17T18:24:49Z"}, "message": "remove FIXME(#2543) and avoid bad copies", "tree": {"sha": "9bf2cd58f3d628e001f22400c752d76664773257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bf2cd58f3d628e001f22400c752d76664773257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6b7b93230d4dcc99608538b43530e9e520215b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6b7b93230d4dcc99608538b43530e9e520215b", "html_url": "https://github.com/rust-lang/rust/commit/2c6b7b93230d4dcc99608538b43530e9e520215b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6b7b93230d4dcc99608538b43530e9e520215b/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd007559dbb9b149244cfb1184002971ea04a6cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd007559dbb9b149244cfb1184002971ea04a6cd", "html_url": "https://github.com/rust-lang/rust/commit/fd007559dbb9b149244cfb1184002971ea04a6cd"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "69213f236e1dd07fcce6839f41a2f871e3e4b17f", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c6b7b93230d4dcc99608538b43530e9e520215b/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6b7b93230d4dcc99608538b43530e9e520215b/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=2c6b7b93230d4dcc99608538b43530e9e520215b", "patch": "@@ -627,8 +627,15 @@ fn path_node(ids: Vec<Ident>) -> ast::Path {\n }\n \n fn path_name_i(idents: &[Ident]) -> String {\n-    // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n-    idents.iter().map(|i| i.to_string()).collect::<Vec<String>>().join(\"::\")\n+    let mut path_name = \"\".to_string();\n+    let mut idents_iter = idents.iter().peekable();\n+    while let Some(ident) = idents_iter.next() {\n+        path_name.push_str(&ident.name.as_str());\n+        if let Some(_) = idents_iter.peek() {\n+            path_name.push_str(\"::\")\n+        }\n+    }\n+    path_name\n }\n \n fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n@@ -681,7 +688,6 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     // gensym information.\n \n     let span = ignored_span(cx, test.span);\n-    let path = test.path.clone();\n     let ecx = &cx.ext_cx;\n     let self_id = ecx.ident_of(\"self\");\n     let test_id = ecx.ident_of(\"test\");\n@@ -693,10 +699,11 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     // creates $name: $expr\n     let field = |name, expr| ecx.field_imm(span, ecx.ident_of(name), expr);\n \n-    debug!(\"encoding {}\", path_name_i(&path[..]));\n-\n     // path to the #[test] function: \"foo::bar::baz\"\n-    let path_string = path_name_i(&path[..]);\n+    let path_string = path_name_i(&test.path[..]);\n+\n+    debug!(\"encoding {}\", path_string);\n+\n     let name_expr = ecx.expr_str(span, Symbol::intern(&path_string));\n \n     // self::test::StaticTestName($name_expr)\n@@ -743,7 +750,7 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n             diag.bug(\"expected to find top-level re-export name, but found None\");\n         }\n     };\n-    visible_path.extend(path);\n+    visible_path.extend_from_slice(&test.path[..]);\n \n     // Rather than directly give the test function to the test\n     // harness, we create a wrapper like one of the following:"}]}