{"sha": "c5559c1648b0810e5dff9f94935fba52e9a9e833", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTU5YzE2NDhiMDgxMGU1ZGZmOWY5NDkzNWZiYTUyZTlhOWU4MzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-02T10:10:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-02T10:10:43Z"}, "message": "Merge pull request #2605 from mikerite/dogfood_target_dir\n\nMake dogfood test output to seperate directory", "tree": {"sha": "fd99d6ed2578a68ca3fd36c75630f99cb351d678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd99d6ed2578a68ca3fd36c75630f99cb351d678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5559c1648b0810e5dff9f94935fba52e9a9e833", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJawgGjCRBK7hj4Ov3rIwAAdHIIAFFPsXTmssyva8eV7muUEX61\nXIRMVIaoTuYQikU/OguGR7d3tn+Kdr+q3yi504CyGMTLaq/vcqvZMvO6aFYC4OGD\nGbPVwbOQCXDKacbKZxQkR4J42AaccqBtZreBZZNsFIUxr6aH8CCtcXaJz68qnJ2x\nVwsOmRJKCEwNDqkWDw56JV7hroDsVzoBa6RB2ALQlAcZt6BY6GjytH/S+a/E3YuQ\nuOKg3KIpp9+ZFFoTZ4E2PYFeBtz37EvIlaZjz2eZzyWst+0qWeGUANGt7ryJljvI\nlN5+lVitYMcfRChF7J1rF5H+sfaqlRvbRAmaapjDyL6aKY+PgdwwvReexwmGykU=\n=JJr7\n-----END PGP SIGNATURE-----\n", "payload": "tree fd99d6ed2578a68ca3fd36c75630f99cb351d678\nparent 83e210935dcddb20d2dbaacd9db6e05bd9bd6bca\nparent add4434ee37d8ee87df63852cf86f02d4c3992a1\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1522663843 +0200\ncommitter GitHub <noreply@github.com> 1522663843 +0200\n\nMerge pull request #2605 from mikerite/dogfood_target_dir\n\nMake dogfood test output to seperate directory"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5559c1648b0810e5dff9f94935fba52e9a9e833", "html_url": "https://github.com/rust-lang/rust/commit/c5559c1648b0810e5dff9f94935fba52e9a9e833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5559c1648b0810e5dff9f94935fba52e9a9e833/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca", "html_url": "https://github.com/rust-lang/rust/commit/83e210935dcddb20d2dbaacd9db6e05bd9bd6bca"}, {"sha": "add4434ee37d8ee87df63852cf86f02d4c3992a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/add4434ee37d8ee87df63852cf86f02d4c3992a1", "html_url": "https://github.com/rust-lang/rust/commit/add4434ee37d8ee87df63852cf86f02d4c3992a1"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "1b21cf8c5ff46f7fabf4474c6a6466c735ce82b1", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=c5559c1648b0810e5dff9f94935fba52e9a9e833", "patch": "@@ -3,6 +3,7 @@ use rustc::ty;\n use rustc::hir;\n use syntax::ast::RangeLimits;\n use utils::{self, higher};\n+use utils::higher::Range;\n use consts::{constant, Constant};\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n@@ -73,10 +74,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n \n                 // Index is a constant range\n                 if let Some(range) = higher::range(index) {\n-                    let start = range.start.map(|start| constant(cx, start).map(|(c, _)| c));\n-                    let end = range.end.map(|end| constant(cx, end).map(|(c, _)| c));\n-\n-                    if let Some((start, end)) = to_const_range(&start, &end, range.limits, size) {\n+                    if let Some((start, end)) = to_const_range(cx, range, size) {\n                         if start > size || end > size {\n                             utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"range is out of bounds\");\n                         }\n@@ -102,20 +100,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n \n /// Returns an option containing a tuple with the start and end (exclusive) of\n /// the range.\n-fn to_const_range(\n-    start: &Option<Option<Constant>>,\n-    end: &Option<Option<Constant>>,\n-    limits: RangeLimits,\n-    array_size: u128,\n-) -> Option<(u128, u128)> {\n-    let start = match *start {\n+fn to_const_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, range: Range, array_size: u128) -> Option<(u128, u128)> {\n+    let s = range.start.map(|expr| constant(cx, expr).map(|(c, _)| c));\n+    let start = match s {\n         Some(Some(Constant::Int(x))) => x,\n         Some(_) => return None,\n         None => 0,\n     };\n \n-    let end = match *end {\n-        Some(Some(Constant::Int(x))) => if limits == RangeLimits::Closed {\n+    let e = range.end.map(|expr| constant(cx, expr).map(|(c, _)| c));\n+    let end = match e {\n+        Some(Some(Constant::Int(x))) => if range.limits == RangeLimits::Closed {\n             x + 1\n         } else {\n             x"}, {"sha": "423be2106d168e65e275c638406f8f5e6ea6154b", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=c5559c1648b0810e5dff9f94935fba52e9a9e833", "patch": "@@ -680,9 +680,7 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    #[allow(unused_attributes)]\n-    // ^ required because `cyclomatic_complexity` attribute shows up as unused\n-    #[cyclomatic_complexity = \"30\"]\n+    #[allow(cyclomatic_complexity)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if in_macro(expr.span) {\n             return;\n@@ -889,6 +887,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, name:\n     }\n \n     /// Check for `*or(foo())`.\n+    #[allow(too_many_arguments)]\n     fn check_general_case(\n         cx: &LateContext,\n         name: &str,"}, {"sha": "1f96ec2b237c2e8d64fda593df4390ffd9a1e374", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=c5559c1648b0810e5dff9f94935fba52e9a9e833", "patch": "@@ -316,6 +316,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n         b.rules.hash(&mut self.s);\n     }\n \n+    #[allow(many_single_char_names)]\n     pub fn hash_expr(&mut self, e: &Expr) {\n         if let Some(e) = constant_simple(self.cx, e) {\n             return e.hash(&mut self.s);"}, {"sha": "f71de382cade90b1bff3385cd521c7910c8cb5ce", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5559c1648b0810e5dff9f94935fba52e9a9e833/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c5559c1648b0810e5dff9f94935fba52e9a9e833", "patch": "@@ -1103,7 +1103,7 @@ pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n \n     let mut nest_level = 0;\n \n-    for line in lines.into_iter() {\n+    for line in lines {\n         if line.contains(\"/*\") {\n             nest_level += 1;\n             continue;"}, {"sha": "aac5e97f3114cd6507258143de4a980afb99501e", "filename": "src/main.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5559c1648b0810e5dff9f94935fba52e9a9e833/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5559c1648b0810e5dff9f94935fba52e9a9e833/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=c5559c1648b0810e5dff9f94935fba52e9a9e833", "patch": "@@ -77,10 +77,30 @@ where\n     if cfg!(windows) {\n         path.set_extension(\"exe\");\n     }\n+\n+    let target_dir = std::env::var_os(\"CLIPPY_DOGFOOD\")\n+        .map(|_| {\n+            std::env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n+                || {\n+                    let mut fallback = std::ffi::OsString::new();\n+                    fallback.push(\"clippy_dogfood\");\n+                    fallback\n+                },\n+                |d| {\n+                    std::path::PathBuf::from(d)\n+                        .join(\"target\")\n+                        .join(\"dogfood\")\n+                        .into_os_string()\n+                },\n+            )\n+        })\n+        .map(|p| (\"CARGO_TARGET_DIR\", p));\n+\n     let exit_status = std::process::Command::new(\"cargo\")\n         .args(&args)\n         .env(\"RUSTC_WRAPPER\", path)\n         .env(\"CLIPPY_ARGS\", clippy_args)\n+        .envs(target_dir)\n         .spawn()\n         .expect(\"could not run cargo\")\n         .wait()"}, {"sha": "a2d4da9a1ca4a75565e83c4e0cff78f6d95d5100", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5559c1648b0810e5dff9f94935fba52e9a9e833/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5559c1648b0810e5dff9f94935fba52e9a9e833/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=c5559c1648b0810e5dff9f94935fba52e9a9e833", "patch": "@@ -15,6 +15,7 @@ fn dogfood() {\n             .arg(\"cargo-clippy\")\n             .arg(\"--manifest-path\")\n             .arg(root_dir.join(\"Cargo.toml\"))\n+            .env(\"CLIPPY_DOGFOOD\", \"true\")\n             .output()\n             .unwrap();\n         println!(\"status: {}\", output.status);"}]}