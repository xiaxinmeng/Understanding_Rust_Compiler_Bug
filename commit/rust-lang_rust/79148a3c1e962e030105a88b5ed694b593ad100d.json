{"sha": "79148a3c1e962e030105a88b5ed694b593ad100d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MTQ4YTNjMWU5NjJlMDMwMTA1YTg4YjVlZDY5NGI1OTNhZDEwMGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-30T19:02:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Extract potential_stores_for_load and potential_loads_of_store functions", "tree": {"sha": "29df6d759e4b03f196af6c5f3e30a5fb0594052a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29df6d759e4b03f196af6c5f3e30a5fb0594052a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79148a3c1e962e030105a88b5ed694b593ad100d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79148a3c1e962e030105a88b5ed694b593ad100d", "html_url": "https://github.com/rust-lang/rust/commit/79148a3c1e962e030105a88b5ed694b593ad100d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79148a3c1e962e030105a88b5ed694b593ad100d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5a2a8509d1e4208bf626037a9c190ff371f12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5a2a8509d1e4208bf626037a9c190ff371f12d", "html_url": "https://github.com/rust-lang/rust/commit/af5a2a8509d1e4208bf626037a9c190ff371f12d"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "cf4da032ff68952ff02675314ed782ecafc32345", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/79148a3c1e962e030105a88b5ed694b593ad100d/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79148a3c1e962e030105a88b5ed694b593ad100d/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=79148a3c1e962e030105a88b5ed694b593ad100d", "patch": "@@ -31,6 +31,36 @@ struct StackSlotUsage {\n     stack_store: HashSet<Inst>,\n }\n \n+impl StackSlotUsage {\n+    fn potential_stores_for_load(&self, ctx: &Context, load: Inst) -> Vec<Inst> {\n+        self.stack_store.iter().cloned().filter(|&store| {\n+            match spatial_overlap(&ctx.func, load, store) {\n+                SpatialOverlap::No => false, // Can never be the source of the loaded value.\n+                SpatialOverlap::Partial | SpatialOverlap::Full => true,\n+            }\n+        }).filter(|&store| {\n+            match temporal_order(ctx, load, store) {\n+                TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n+                TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n+            }\n+        }).collect::<Vec<Inst>>()\n+    }\n+\n+    fn potential_loads_of_store(&self, ctx: &Context, store: Inst) -> Vec<Inst> {\n+        self.stack_load.iter().cloned().filter(|&load| {\n+            match spatial_overlap(&ctx.func, store, load) {\n+                SpatialOverlap::No => false, // Can never be the source of the loaded value.\n+                SpatialOverlap::Partial | SpatialOverlap::Full => true,\n+            }\n+        }).filter(|&load| {\n+            match temporal_order(ctx, store, load) {\n+                TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n+                TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n+            }\n+        }).collect::<Vec<Inst>>()\n+    }\n+}\n+\n struct OptimizeContext<'a> {\n     ctx: &'a mut Context,\n     stack_slot_usage_map: BTreeMap<OrdStackSlot, StackSlotUsage>,\n@@ -103,31 +133,20 @@ pub(super) fn optimize_function(\n             continue;\n         }\n \n-        for load in users.stack_load.clone().drain() {\n+        for load in users.stack_load.clone().into_iter() {\n             let load_ebb = opt_ctx.ctx.func.layout.inst_ebb(load).unwrap();\n             let loaded_value = opt_ctx.ctx.func.dfg.inst_results(load)[0];\n             let loaded_type = opt_ctx.ctx.func.dfg.value_type(loaded_value);\n \n-            let ctx = &*opt_ctx.ctx;\n-            let potential_stores = users.stack_store.iter().cloned().filter(|&store| {\n-                match spatial_overlap(&ctx.func, load, store) {\n-                    SpatialOverlap::No => false, // Can never be the source of the loaded value.\n-                    SpatialOverlap::Partial | SpatialOverlap::Full => true,\n-                }\n-            }).filter(|&store| {\n-                match temporal_order(ctx, load, store) {\n-                    TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n-                    TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n-                }\n-            }).collect::<Vec<Inst>>();\n+            let potential_stores = users.potential_stores_for_load(&opt_ctx.ctx, load);\n \n             for &store in &potential_stores {\n                 println!(\n                     \"Potential store -> load forwarding {} -> {} ({:?}, {:?})\",\n                     opt_ctx.ctx.func.dfg.display_inst(store, None),\n                     opt_ctx.ctx.func.dfg.display_inst(load, None),\n                     spatial_overlap(&opt_ctx.ctx.func, store, load),\n-                    temporal_order(&*opt_ctx.ctx, store, load),\n+                    temporal_order(&opt_ctx.ctx, store, load),\n                 );\n             }\n \n@@ -150,27 +169,16 @@ pub(super) fn optimize_function(\n             }\n         }\n \n-        for store in users.stack_store.clone().drain() {\n-            let ctx = &*opt_ctx.ctx;\n-            let potential_loads = users.stack_load.iter().cloned().filter(|&load| {\n-                match spatial_overlap(&ctx.func, store, load) {\n-                    SpatialOverlap::No => false, // Can never be the source of the loaded value.\n-                    SpatialOverlap::Partial | SpatialOverlap::Full => true,\n-                }\n-            }).filter(|&load| {\n-                match temporal_order(ctx, store, load) {\n-                    TemporalOrder::NeverBefore => false, // Can never be the source of the loaded value.\n-                    TemporalOrder::MaybeBefore | TemporalOrder::DefinitivelyBefore => true,\n-                }\n-            }).collect::<Vec<Inst>>();\n+        for store in users.stack_store.clone().into_iter() {\n+            let potential_loads = users.potential_loads_of_store(&opt_ctx.ctx, store);\n \n             for &load in &potential_loads {\n                 println!(\n                     \"Potential load from store {} <- {} ({:?}, {:?})\",\n                     opt_ctx.ctx.func.dfg.display_inst(load, None),\n                     opt_ctx.ctx.func.dfg.display_inst(store, None),\n-                    spatial_overlap(&ctx.func, store, load),\n-                    temporal_order(&*opt_ctx.ctx, store, load),\n+                    spatial_overlap(&opt_ctx.ctx.func, store, load),\n+                    temporal_order(&opt_ctx.ctx, store, load),\n                 );\n             }\n "}]}