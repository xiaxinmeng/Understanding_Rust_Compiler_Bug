{"sha": "cc66a7ff20d0c8626661fe6f53daab265537425f", "node_id": "C_kwDOAAsO6NoAKGNjNjZhN2ZmMjBkMGM4NjI2NjYxZmU2ZjUzZGFhYjI2NTUzNzQyNWY", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-19T03:59:36Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-19T04:08:52Z"}, "message": "Eliminate eof token state", "tree": {"sha": "8c98f43e8d5fb7f4967fdb92f4f892cfaf13e8d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c98f43e8d5fb7f4967fdb92f4f892cfaf13e8d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc66a7ff20d0c8626661fe6f53daab265537425f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHnjtQACgkQ+boUO5X/\nbYL5Tw//W1HRhra1067Prrv4k/eRKj4ecbEc8E37s9HdpSOALBU8M/igzKQU3cRR\nv6BC9sKo/7LnuPLft/MJOZwnW3r/fJFPV5+1Gmd+T34FApH7nIPzZe8dPWrl0qnw\n5pS3SBCD2o5cnpGRg57SfTyGR+pmyOAsEQ/lUvKBc+htToBoYb0ujjJstrDQs3tu\nRrKzmQNsFxIa0ezm0C9MDS/Zyf8VI5dskUZ2vL6jlc3YignAkttvYHX9Z61cvPyT\njwtewZCyXvLgpsHfHLf7Nm3LiTgCj+VOjMiW9YUZ3Pe9xfpZ35sK7DzNx1bqOmkD\nSItxmPLYT1yOo+ec3t8XE9PcB7Q+/StLR8Oh3/XUAQgQLK1MHbOKC/WkigjG7WBk\nyUsU2Hgv6t5QxmnWIA1zV9Kn4NgwV8xxZTJz/UjI709eqTeLkopHqfi0pv1Y0Pdl\n5ywrxZvfTwR1bLlAMwWVL4iv0ysI+XB8ajKzfnlqH/NaoDh+54zWmmvz8/kQjHeC\nzSw2S09MLuhp9i/lSgMY3mjLOcrfq6wDKVY5k8JhDeBLqQklWxswU5rB4cS9W6Uh\nO2kizTZoxe9NQvHU+z3lFkVjnlOHYaXsIkZN5Ty/jqCv6xq1mi4jiPuv9Q+KPNda\nPwWR3ixdvsTL5azLsG7s1I5xx7OB/xZM1QPA3AWhU/VjKFLVUEs=\n=nEFM\n-----END PGP SIGNATURE-----", "payload": "tree 8c98f43e8d5fb7f4967fdb92f4f892cfaf13e8d5\nparent 6e8b06015e7f0cfa05208c2d83e0a9140f62ab7a\nauthor David Tolnay <dtolnay@gmail.com> 1642564776 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1642565332 -0800\n\nEliminate eof token state\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc66a7ff20d0c8626661fe6f53daab265537425f", "html_url": "https://github.com/rust-lang/rust/commit/cc66a7ff20d0c8626661fe6f53daab265537425f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc66a7ff20d0c8626661fe6f53daab265537425f/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8b06015e7f0cfa05208c2d83e0a9140f62ab7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8b06015e7f0cfa05208c2d83e0a9140f62ab7a", "html_url": "https://github.com/rust-lang/rust/commit/6e8b06015e7f0cfa05208c2d83e0a9140f62ab7a"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "0c9d4ef0e950d9c488fa92e8c8d822e595b17b54", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cc66a7ff20d0c8626661fe6f53daab265537425f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc66a7ff20d0c8626661fe6f53daab265537425f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=cc66a7ff20d0c8626661fe6f53daab265537425f", "patch": "@@ -167,14 +167,9 @@ pub enum Token {\n     Break(BreakToken),\n     Begin(BeginToken),\n     End,\n-    Eof,\n }\n \n impl Token {\n-    crate fn is_eof(&self) -> bool {\n-        matches!(self, Token::Eof)\n-    }\n-\n     pub fn is_hardbreak_tok(&self) -> bool {\n         matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n     }\n@@ -187,7 +182,6 @@ impl fmt::Display for Token {\n             Token::Break(_) => f.write_str(\"BREAK\"),\n             Token::Begin(_) => f.write_str(\"BEGIN\"),\n             Token::End => f.write_str(\"END\"),\n-            Token::Eof => f.write_str(\"EOF\"),\n         }\n     }\n }\n@@ -233,6 +227,9 @@ pub struct Printer {\n     print_stack: Vec<PrintStackElem>,\n     /// Buffered indentation to avoid writing trailing whitespace\n     pending_indentation: isize,\n+    /// The token most recently popped from the left boundary of the\n+    /// ring-buffer for printing\n+    last_printed: Option<Token>,\n }\n \n #[derive(Clone)]\n@@ -241,39 +238,36 @@ struct BufEntry {\n     size: isize,\n }\n \n-impl Default for BufEntry {\n-    fn default() -> Self {\n-        BufEntry { token: Token::Eof, size: 0 }\n-    }\n-}\n-\n impl Printer {\n     pub fn new() -> Self {\n         let linewidth = 78;\n-        let mut buf = RingBuffer::new();\n-        buf.advance_right();\n         Printer {\n             out: String::new(),\n             margin: linewidth as isize,\n             space: linewidth as isize,\n             left: 0,\n             right: 0,\n-            buf,\n+            buf: RingBuffer::new(),\n             left_total: 0,\n             right_total: 0,\n             scan_stack: VecDeque::new(),\n             print_stack: Vec::new(),\n             pending_indentation: 0,\n+            last_printed: None,\n         }\n     }\n \n-    pub fn last_token(&self) -> Token {\n-        self.buf[self.right].token.clone()\n+    pub fn last_token(&self) -> Option<&Token> {\n+        self.last_token_still_buffered().or_else(|| self.last_printed.as_ref())\n+    }\n+\n+    pub fn last_token_still_buffered(&self) -> Option<&Token> {\n+        self.buf.last().map(|last| &last.token)\n     }\n \n     /// Be very careful with this!\n-    pub fn replace_last_token(&mut self, t: Token) {\n-        self.buf[self.right].token = t;\n+    pub fn replace_last_token_still_buffered(&mut self, t: Token) {\n+        self.buf.last_mut().unwrap().token = t;\n     }\n \n     fn scan_eof(&mut self) {\n@@ -323,7 +317,7 @@ impl Printer {\n \n     fn scan_string(&mut self, s: Cow<'static, str>) {\n         if self.scan_stack.is_empty() {\n-            self.print_string(s);\n+            self.print_string(&s);\n         } else {\n             self.right += 1;\n             let len = s.len() as isize;\n@@ -459,7 +453,7 @@ impl Printer {\n         }\n     }\n \n-    fn print_string(&mut self, s: Cow<'static, str>) {\n+    fn print_string(&mut self, s: &str) {\n         let len = s.len() as isize;\n         // assert!(len <= space);\n         self.space -= len;\n@@ -473,21 +467,21 @@ impl Printer {\n         self.out.reserve(self.pending_indentation as usize);\n         self.out.extend(std::iter::repeat(' ').take(self.pending_indentation as usize));\n         self.pending_indentation = 0;\n-        self.out.push_str(&s);\n+        self.out.push_str(s);\n     }\n \n     fn print(&mut self, token: Token, l: isize) {\n-        match token {\n-            Token::Begin(b) => self.print_begin(b, l),\n+        match &token {\n+            Token::Begin(b) => self.print_begin(*b, l),\n             Token::End => self.print_end(),\n-            Token::Break(b) => self.print_break(b, l),\n+            Token::Break(b) => self.print_break(*b, l),\n             Token::String(s) => {\n                 let len = s.len() as isize;\n                 assert_eq!(len, l);\n                 self.print_string(s);\n             }\n-            Token::Eof => panic!(), // Eof should never get here.\n         }\n+        self.last_printed = Some(token);\n     }\n \n     // Convenience functions to talk to the printer.\n@@ -542,7 +536,10 @@ impl Printer {\n     }\n \n     pub fn is_beginning_of_line(&self) -> bool {\n-        self.last_token().is_eof() || self.last_token().is_hardbreak_tok()\n+        match self.last_token() {\n+            Some(last_token) => last_token.is_hardbreak_tok(),\n+            None => true,\n+        }\n     }\n \n     pub fn hardbreak_tok_offset(off: isize) -> Token {"}, {"sha": "86b87614c1986c094e30d22bbf53e53be819a97e", "filename": "compiler/rustc_ast_pretty/src/pp/ring.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc66a7ff20d0c8626661fe6f53daab265537425f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc66a7ff20d0c8626661fe6f53daab265537425f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs?ref=cc66a7ff20d0c8626661fe6f53daab265537425f", "patch": "@@ -26,13 +26,6 @@ impl<T> RingBuffer<T> {\n         self.data.push_back(value);\n     }\n \n-    pub fn advance_right(&mut self)\n-    where\n-        T: Default,\n-    {\n-        self.data.push_back(T::default());\n-    }\n-\n     pub fn advance_left(&mut self) {\n         self.data.pop_front().unwrap();\n         self.offset += 1;\n@@ -41,6 +34,14 @@ impl<T> RingBuffer<T> {\n     pub fn clear(&mut self) {\n         self.data.clear();\n     }\n+\n+    pub fn last(&self) -> Option<&T> {\n+        self.data.back()\n+    }\n+\n+    pub fn last_mut(&mut self) -> Option<&mut T> {\n+        self.data.back_mut()\n+    }\n }\n \n impl<T> Index<usize> for RingBuffer<T> {"}, {"sha": "044f6b228dc0b762e49579a2b46d2953ac60f203", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc66a7ff20d0c8626661fe6f53daab265537425f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc66a7ff20d0c8626661fe6f53daab265537425f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=cc66a7ff20d0c8626661fe6f53daab265537425f", "patch": "@@ -329,9 +329,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             CommentStyle::BlankLine => {\n                 // We need to do at least one, possibly two hardbreaks.\n                 let twice = match self.last_token() {\n-                    pp::Token::String(s) => \";\" == s,\n-                    pp::Token::Begin(_) => true,\n-                    pp::Token::End => true,\n+                    Some(pp::Token::String(s)) => \";\" == s,\n+                    Some(pp::Token::Begin(_)) => true,\n+                    Some(pp::Token::End) => true,\n                     _ => false,\n                 };\n                 if twice {\n@@ -687,11 +687,15 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn break_offset_if_not_bol(&mut self, n: usize, off: isize) {\n         if !self.is_beginning_of_line() {\n             self.break_offset(n, off)\n-        } else if off != 0 && self.last_token().is_hardbreak_tok() {\n-            // We do something pretty sketchy here: tuck the nonzero\n-            // offset-adjustment we were going to deposit along with the\n-            // break into the previous hardbreak.\n-            self.replace_last_token(pp::Printer::hardbreak_tok_offset(off));\n+        } else if off != 0 {\n+            if let Some(last_token) = self.last_token_still_buffered() {\n+                if last_token.is_hardbreak_tok() {\n+                    // We do something pretty sketchy here: tuck the nonzero\n+                    // offset-adjustment we were going to deposit along with the\n+                    // break into the previous hardbreak.\n+                    self.replace_last_token_still_buffered(pp::Printer::hardbreak_tok_offset(off));\n+                }\n+            }\n         }\n     }\n "}]}