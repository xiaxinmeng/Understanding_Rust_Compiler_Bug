{"sha": "30d019d52088eef214a492a252f85038df79f129", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZDAxOWQ1MjA4OGVlZjIxNGE0OTJhMjUyZjg1MDM4ZGY3OWYxMjk=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-09T16:32:23Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:46:39Z"}, "message": "Add record debug information.", "tree": {"sha": "0c6c4adee77c11b01d15ed3d8245e7b520bd7ff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6c4adee77c11b01d15ed3d8245e7b520bd7ff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30d019d52088eef214a492a252f85038df79f129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30d019d52088eef214a492a252f85038df79f129", "html_url": "https://github.com/rust-lang/rust/commit/30d019d52088eef214a492a252f85038df79f129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30d019d52088eef214a492a252f85038df79f129/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43ed8f1bd249f4d758c2451a422a6d7395a52df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43ed8f1bd249f4d758c2451a422a6d7395a52df", "html_url": "https://github.com/rust-lang/rust/commit/f43ed8f1bd249f4d758c2451a422a6d7395a52df"}], "stats": {"total": 199, "additions": 177, "deletions": 22}, "files": [{"sha": "1e5cbadc4492884a042b9ee240fb750194f51107", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 169, "deletions": 20, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/30d019d52088eef214a492a252f85038df79f129/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d019d52088eef214a492a252f85038df79f129/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=30d019d52088eef214a492a252f85038df79f129", "patch": "@@ -74,6 +74,15 @@ fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n \n ////////////////\n \n+type debug_ctxt = {\n+    llmetadata: metadata_cache,\n+    //llmod: ValueRef,\n+    //opt: bool,\n+    names: trans_common::namegen\n+};\n+\n+////////////////\n+\n type metadata<T> = {node: ValueRef, data: T};\n \n type file_md = {path: str};\n@@ -134,7 +143,7 @@ fn cached_metadata<copy T>(cache: metadata_cache, mdtag: int,\n \n fn get_compile_unit_metadata(cx: @crate_ctxt, full_path: str)\n     -> @metadata<compile_unit_md> {\n-    let cache = cx.llmetadata;\n+    let cache = get_cache(cx);\n     alt cached_metadata::<@metadata<compile_unit_md>>(cache, CompileUnitTag,\n                         {|md| md.data.path == full_path}) {\n       option::some(md) { ret md; }\n@@ -166,37 +175,45 @@ fn get_compile_unit_metadata(cx: @crate_ctxt, full_path: str)\n     ret mdval;\n }\n \n+fn get_cache(cx: @crate_ctxt) -> metadata_cache {\n+    option::get(cx.dbg_cx).llmetadata\n+}\n+\n fn get_file_metadata(cx: @crate_ctxt, full_path: str) -> @metadata<file_md> {\n-    let cache = cx.llmetadata;\n+    let cache = get_cache(cx);;\n+    let tg = FileDescriptorTag;\n     alt cached_metadata::<@metadata<file_md>>(\n-        cache, FileDescriptorTag,\n-        {|md|\n-         md.data.path == full_path}) {\n-      option::some(md) { ret md; }\n-      option::none. {}\n+        cache, tg, {|md| md.data.path == full_path}) {\n+        option::some(md) { ret md; }\n+        option::none. {}\n     }\n     let fname = fs::basename(full_path);\n     let path = fs::dirname(full_path);\n     let unit_node = get_compile_unit_metadata(cx, full_path).node;\n-    let file_md = [lltag(FileDescriptorTag),\n+    let file_md = [lltag(tg),\n                    llstr(fname),\n                    llstr(path),\n                    unit_node];\n     let val = llmdnode(file_md);\n     let mdval = @{node: val, data: {path: full_path}};\n-    update_cache(cache, FileDescriptorTag, file_metadata(mdval));\n+    update_cache(cache, tg, file_metadata(mdval));\n     ret mdval;\n }\n \n+fn line_from_span(cm: codemap::codemap, sp: codemap::span) -> uint {\n+    codemap::lookup_char_pos(cm, sp.lo).line\n+}\n+\n fn get_block_metadata(cx: @block_ctxt) -> @metadata<block_md> {\n-    let cache = bcx_ccx(cx).llmetadata;\n+    let cache = get_cache(bcx_ccx(cx));\n     let start = codemap::lookup_char_pos(bcx_ccx(cx).sess.get_codemap(),\n                                          cx.sp.lo);\n     let fname = start.filename;\n     let end = codemap::lookup_char_pos(bcx_ccx(cx).sess.get_codemap(),\n                                        cx.sp.hi);\n+    let tg = LexicalBlockTag;\n     alt cached_metadata::<@metadata<block_md>>(\n-        cache, LexicalBlockTag,\n+        cache, tg,\n         {|md| start == md.data.start && end == md.data.end}) {\n       option::some(md) { ret md; }\n       option::none. {}\n@@ -210,7 +227,7 @@ fn get_block_metadata(cx: @block_ctxt) -> @metadata<block_md> {\n       option::some(v) { vec::len(v) as int }\n       option::none. { 0 }\n     };\n-    let lldata = [lltag(LexicalBlockTag),\n+    let lldata = [lltag(tg),\n                   parent,\n                   lli32(start.line as int),\n                   lli32(start.col as int),\n@@ -219,7 +236,7 @@ fn get_block_metadata(cx: @block_ctxt) -> @metadata<block_md> {\n                  ];\n       let val = llmdnode(lldata);\n       let mdval = @{node: val, data: {start: start, end: end}};\n-      update_cache(cache, LexicalBlockTag, block_metadata(mdval));\n+      update_cache(cache, tg, block_metadata(mdval));\n       ret mdval;\n }\n \n@@ -229,7 +246,7 @@ fn size_and_align_of<T>() -> (int, int) {\n \n fn get_basic_type_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty)\n     -> @metadata<tydesc_md> {\n-    let cache = cx.llmetadata;\n+    let cache = get_cache(cx);\n     let tg = BasicTypeDescriptorTag;\n     alt cached_metadata::<@metadata<tydesc_md>>(\n         cache, tg,\n@@ -315,6 +332,82 @@ fn get_pointer_type_metadata(cx: @crate_ctxt, t: ty::t, span: codemap::span,\n     ret mdval;\n }\n \n+type struct_ctxt = {\n+    file: ValueRef,\n+    name: str,\n+    line: int,\n+    mutable members: [ValueRef],\n+    mutable total_size: int,\n+    align: int\n+};\n+\n+fn finish_structure(cx: @struct_ctxt) -> ValueRef {\n+    let lldata = [lltag(StructureTypeTag),\n+                  cx.file,\n+                  llstr(cx.name), // type name\n+                  cx.file, // source file definition\n+                  lli32(cx.line), // source line definition\n+                  lli64(cx.total_size), // size of members\n+                  lli64(cx.align), // align\n+                  lli64(0), // offset\n+                  lli32(0), // flags\n+                  llnull(), // derived from\n+                  llmdnode(cx.members), // members\n+                  lli32(0),  // runtime language\n+                  llnull()\n+                 ];\n+    ret llmdnode(lldata);\n+}\n+\n+fn create_structure(file: @metadata<file_md>, name: str, line: int)\n+    -> @struct_ctxt {\n+    let cx = @{file: file.node,\n+               name: name,\n+               line: line,\n+               mutable members: [],\n+               mutable total_size: 0,\n+               align: 64 //XXX different alignment per arch?\n+              }; \n+    ret cx;\n+}\n+\n+fn add_member(cx: @struct_ctxt, name: str, line: int, size: int, align: int,\n+              ty: ValueRef) {\n+    let lldata = [lltag(MemberTag),\n+                  cx.file,\n+                  llstr(name),\n+                  cx.file,\n+                  lli32(line),\n+                  lli64(size * 8),\n+                  lli64(align * 8),\n+                  lli64(cx.total_size),\n+                  lli32(0),\n+                  ty];\n+    cx.total_size += size * 8;\n+    cx.members += [llmdnode(lldata)];\n+}\n+\n+fn get_record_metadata(cx: @crate_ctxt, t: ty::t, fields: [ast::ty_field],\n+                       span: codemap::span) -> @metadata<tydesc_md> {\n+    let fname = filename_from_span(cx, span);\n+    let file_node = get_file_metadata(cx, fname);\n+    let scx = create_structure(file_node,\n+                               option::get(cx.dbg_cx).names.next(\"rec\"),\n+                               line_from_span(cx.sess.get_codemap(),\n+                                              span) as int);\n+    for field in fields {\n+        //let field_t = option::get(ccx_tcx(cx).ast_ty_to_ty_cache.get(field.node.mt.ty));\n+        let field_t = ty::get_field(ccx_tcx(cx), t, field.node.ident).mt.ty;\n+        let ty_md = get_ty_metadata(cx, field_t, field.node.mt.ty);\n+        let (size, align) = member_size_and_align(field.node.mt.ty);\n+        add_member(scx, field.node.ident,\n+                   line_from_span(cx.sess.get_codemap(), field.span) as int,\n+                   size as int, align as int, ty_md.node);\n+    }\n+    let mdval = @{node: finish_structure(scx), data:{hash: t}};\n+    ret mdval;\n+}\n+\n fn get_boxed_type_metadata(cx: @crate_ctxt, outer: ty::t, inner: ty::t,\n                            span: codemap::span, boxed: @metadata<tydesc_md>)\n     -> @metadata<tydesc_md> {\n@@ -352,7 +445,7 @@ fn get_boxed_type_metadata(cx: @crate_ctxt, outer: ty::t, inner: ty::t,\n                     lli64(0),\n                     lli32(0),\n                     refcount_type.node];\n-    let size = 64; //XXX size of inner\n+    let size = 64; //XXX member_size_and_align(???)\n     let boxed_member = [lltag(MemberTag),\n                         file_node.node,\n                         llstr(\"boxed\"),\n@@ -379,15 +472,57 @@ fn get_boxed_type_metadata(cx: @crate_ctxt, outer: ty::t, inner: ty::t,\n                   lli32(0) // runtime language\n                  ];\n     let llnode = llmdnode(lldata);\n-    let mdval = @{node: llnode, data: {hash: ty::hash_ty(outer)}};\n+    let mdval = @{node: llnode, data: {hash: outer}};\n     //update_cache(cache, tg, tydesc_metadata(mdval));\n     llvm::LLVMAddNamedMetadataOperand(cx.llmod, as_buf(\"llvm.dbg.ty\"),\n                                       str::byte_len(\"llvm.dbg.ty\"),\n                                       llnode);\n     ret mdval;\n }\n \n+fn member_size_and_align(ty: @ast::ty) -> (int, int) {\n+    alt ty.node {\n+      ast::ty_bool. { size_and_align_of::<bool>() }\n+      ast::ty_int(m) { alt m {\n+        ast::ty_char. { size_and_align_of::<char>() }\n+        ast::ty_i. { size_and_align_of::<int>() }\n+        ast::ty_i8. { size_and_align_of::<i8>() }\n+        ast::ty_i16. { size_and_align_of::<i16>() }\n+        ast::ty_i32. { size_and_align_of::<i32>() }\n+      }}\n+      ast::ty_uint(m) { alt m {\n+        ast::ty_u. { size_and_align_of::<uint>() }\n+        ast::ty_u8. { size_and_align_of::<i8>() }\n+        ast::ty_u16. { size_and_align_of::<u16>() }\n+        ast::ty_u32. { size_and_align_of::<u32>() }\n+      }}\n+      ast::ty_float(m) { alt m {\n+        ast::ty_f. { size_and_align_of::<float>() }\n+        ast::ty_f32. { size_and_align_of::<f32>() }\n+        ast::ty_f64. { size_and_align_of::<f64>() }\n+      }}\n+      ast::ty_box(_) | ast::ty_uniq(_) {\n+        size_and_align_of::<ctypes::uintptr_t>()\n+      }\n+      ast::ty_rec(fields) {\n+        let total_size = 0;\n+        for field in fields {\n+            let (size, _) = member_size_and_align(field.node.mt.ty);\n+            total_size += size;\n+        }\n+        (total_size, 64) //XXX different align for other arches?\n+      }\n+    }\n+}\n+\n fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_md> {\n+    /*let cache = get_cache(cx);\n+    alt cached_metadata::<@metadata<tydesc_md>>(\n+        cache, tg, {|md| t == md.data.hash}) {\n+      option::some(md) { ret md; }\n+      option::none. {}\n+    }*/\n+\n     fn t_to_ty(cx: @crate_ctxt, t: ty::t, span: codemap::span) -> @ast::ty {\n         let ty = alt ty::struct(ccx_tcx(cx), t) {\n           ty::ty_nil. { ast::ty_nil }\n@@ -400,9 +535,20 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n                                         mut: mt.mut}) }\n           ty::ty_uniq(mt) { ast::ty_uniq({ty: t_to_ty(cx, mt.ty, span),\n                                           mut: mt.mut}) }\n+          ty::ty_rec(fields) {\n+            let fs = [];\n+            for field in fields {\n+                fs += [{node: {ident: field.ident,\n+                               mt: {ty: t_to_ty(cx, field.mt.ty, span),\n+                                    mut: field.mt.mut}},\n+                        span: span}];\n+            }\n+            ast::ty_rec(fs)\n+          }\n         };\n         ret @{node: ty, span: span};\n     }\n+\n     alt ty.node {\n       ast::ty_box(mt) {\n         let inner_t = alt ty::struct(ccx_tcx(cx), t) {\n@@ -423,6 +569,9 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n         let inferred = t_to_ty(cx, t, ty.span);\n         ret get_ty_metadata(cx, t, inferred);\n       }\n+      ast::ty_rec(fields) {\n+        ret get_record_metadata(cx, t, fields, ty.span);\n+      }\n       _ { ret get_basic_type_metadata(cx, t, ty); }\n     };\n }\n@@ -442,7 +591,7 @@ fn filename_from_span(cx: @crate_ctxt, sp: codemap::span) -> str {\n fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n     -> @metadata<local_var_md> unsafe {\n     let cx = bcx_ccx(bcx);\n-    let cache = cx.llmetadata;\n+    let cache = get_cache(cx);\n     alt cached_metadata::<@metadata<local_var_md>>(\n         cache, AutoVariableTag, {|md| md.data.id == local.node.id}) {\n       option::some(md) { ret md; }\n@@ -540,7 +689,7 @@ fn get_arg_metadata(bcx: @block_ctxt, arg: ast::arg)\n     -> @metadata<argument_md> unsafe {\n     let fcx = bcx_fcx(bcx);\n     let cx = fcx_ccx(fcx);\n-    let cache = cx.llmetadata;\n+    let cache = get_cache(cx);\n     alt cached_metadata::<@metadata<argument_md>>(\n         cache, ArgVariableTag, {|md| md.data.id == arg.id}) {\n       option::some(md) { ret md; }\n@@ -641,7 +790,7 @@ fn add_line_info(cx: @block_ctxt, llinstr: ValueRef) {\n fn get_function_metadata(fcx: @fn_ctxt, item: @ast::item,\n                          llfndecl: ValueRef) -> @metadata<subprogram_md> {\n     let cx = fcx_ccx(fcx);\n-    let cache = cx.llmetadata;\n+    let cache = get_cache(cx);\n     alt cached_metadata::<@metadata<subprogram_md>>(\n         cache, SubprogramTag, {|md| md.data.name == item.ident &&\n                                     /*sub.path == ??*/ true}) {\n@@ -708,4 +857,4 @@ fn get_function_metadata(fcx: @fn_ctxt, item: @ast::item,\n       _ { let _ = get_retval_metadata(fcx, ret_ty); }\n     }*/\n     ret mdval;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e92095f67e56c280aaa39fb3d698e5bd7e06c1c3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30d019d52088eef214a492a252f85038df79f129/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d019d52088eef214a492a252f85038df79f129/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=30d019d52088eef214a492a252f85038df79f129", "patch": "@@ -5673,6 +5673,12 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     let sha1s = map::mk_hashmap::<ty::t, str>(hasher, eqer);\n     let short_names = map::mk_hashmap::<ty::t, str>(hasher, eqer);\n     let crate_map = decl_crate_map(sess, link_meta.name, llmod);\n+    let dbg_cx = if sess.get_opts().debuginfo {\n+        option::some(@{llmetadata: map::new_int_hash(),\n+                       names: namegen(0)})\n+    } else {\n+        option::none\n+    };\n     let ccx =\n         @{sess: sess,\n           llmod: llmod,\n@@ -5723,7 +5729,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           shape_cx: shape::mk_ctxt(llmod),\n           gc_cx: gc::mk_ctxt(),\n           crate_map: crate_map,\n-          llmetadata: map::new_int_hash()};\n+          dbg_cx: dbg_cx};\n     let cx = new_local_ctxt(ccx);\n     collect_items(ccx, crate);\n     collect_tag_ctors(ccx, crate);"}, {"sha": "c7333ef74115aac448cc4a4f759bf6091ed10dec", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30d019d52088eef214a492a252f85038df79f129/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d019d52088eef214a492a252f85038df79f129/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=30d019d52088eef214a492a252f85038df79f129", "patch": "@@ -117,7 +117,7 @@ type crate_ctxt =\n      shape_cx: shape::ctxt,\n      gc_cx: gc::ctxt,\n      crate_map: ValueRef,\n-     llmetadata: debuginfo::metadata_cache};\n+     dbg_cx: option::t<@debuginfo::debug_ctxt>};\n \n type local_ctxt =\n     {path: [str],"}]}