{"sha": "3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNzE1N2RjMWE4YjZkYmU4MDgzYmRiY2I3ODBlNDkwZWI2YjBmMGU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-25T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-31T20:06:29Z"}, "message": "Assert that locals have storage when used\n\nThe validator in visit_local asserts that local has a stroage when used,\nbut visit_local is never called so validation is ineffective.\n\nUse super_statement and super_terminator to ensure that locals are visited.", "tree": {"sha": "489a1398d1b5598d437bbcb047ffeb5429dc325e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489a1398d1b5598d437bbcb047ffeb5429dc325e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e", "html_url": "https://github.com/rust-lang/rust/commit/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7612ac1499258025077f1fd05d2f429f9accfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7612ac1499258025077f1fd05d2f429f9accfb", "html_url": "https://github.com/rust-lang/rust/commit/4f7612ac1499258025077f1fd05d2f429f9accfb"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "1868d3b47f2ab943a028cd0461d7186fc55c5fc0", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e", "patch": "@@ -5,10 +5,10 @@ use crate::dataflow::{Analysis, ResultsCursor};\n use crate::util::storage::AlwaysLiveLocals;\n \n use super::MirPass;\n-use rustc_middle::mir::{\n-    interpret::Scalar,\n-    visit::{PlaceContext, Visitor},\n-};\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::interpret::Scalar;\n+use rustc_middle::mir::traversal;\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n     AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceRef,\n     Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n@@ -52,6 +52,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n             tcx,\n             param_env,\n             mir_phase,\n+            reachable_blocks: traversal::reachable_as_bitset(body),\n             storage_liveness,\n             place_cache: Vec::new(),\n         }\n@@ -157,6 +158,7 @@ struct TypeChecker<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     mir_phase: MirPhase,\n+    reachable_blocks: BitSet<BasicBlock>,\n     storage_liveness: ResultsCursor<'a, 'tcx, MaybeStorageLive>,\n     place_cache: Vec<PlaceRef<'tcx>>,\n }\n@@ -232,7 +234,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n-        if context.is_use() {\n+        if self.reachable_blocks.contains(location.block) && context.is_use() {\n             // Uses of locals must occur while the local's storage is allocated.\n             self.storage_liveness.seek_after_primary_effect(location);\n             let locals_with_storage = self.storage_liveness.get();\n@@ -249,13 +251,16 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     }\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n-        // `Operand::Copy` is only supposed to be used with `Copy` types.\n-        if let Operand::Copy(place) = operand {\n-            let ty = place.ty(&self.body.local_decls, self.tcx).ty;\n-            let span = self.body.source_info(location).span;\n-\n-            if !ty.is_copy_modulo_regions(self.tcx.at(span), self.param_env) {\n-                self.fail(location, format!(\"`Operand::Copy` with non-`Copy` type {}\", ty));\n+        // This check is somewhat expensive, so only run it when -Zvalidate-mir is passed.\n+        if self.tcx.sess.opts.debugging_opts.validate_mir {\n+            // `Operand::Copy` is only supposed to be used with `Copy` types.\n+            if let Operand::Copy(place) = operand {\n+                let ty = place.ty(&self.body.local_decls, self.tcx).ty;\n+                let span = self.body.source_info(location).span;\n+\n+                if !ty.is_copy_modulo_regions(self.tcx.at(span), self.param_env) {\n+                    self.fail(location, format!(\"`Operand::Copy` with non-`Copy` type {}\", ty));\n+                }\n             }\n         }\n \n@@ -341,6 +346,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             _ => {}\n         }\n+\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n@@ -489,6 +496,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop => {}\n         }\n+\n+        self.super_terminator(terminator, location);\n     }\n \n     fn visit_source_scope(&mut self, scope: &SourceScope) {"}, {"sha": "530164edd468278073cbf036d0393f6fd3c37d60", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e", "patch": "@@ -23,6 +23,7 @@ pub trait Receiver { }\n pub struct Result<T, E> { _a: T, _b: E }\n \n impl Copy for usize {}\n+impl Copy for &usize {}\n \n #[lang = \"drop_in_place\"]\n pub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) {}"}, {"sha": "135792e9372050750a24ba94808880210b230f0d", "filename": "src/test/run-make-fulldeps/min-global-align/min_global_align.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2Fmin_global_align.rs?ref=3b7157dc1a8b6dbe8083bdbcb780e490eb6b0f0e", "patch": "@@ -14,6 +14,8 @@ trait Sized {}\n \n #[lang = \"copy\"]\n trait Copy {}\n+impl Copy for bool {}\n+impl Copy for &bool {}\n \n #[lang = \"freeze\"]\n trait Freeze {}"}]}