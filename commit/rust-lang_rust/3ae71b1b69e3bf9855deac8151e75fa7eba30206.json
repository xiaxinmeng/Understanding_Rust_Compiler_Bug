{"sha": "3ae71b1b69e3bf9855deac8151e75fa7eba30206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZTcxYjFiNjllM2JmOTg1NWRlYWM4MTUxZTc1ZmE3ZWJhMzAyMDY=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-12-28T18:55:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-01-13T13:50:04Z"}, "message": "the reference was inferring values that didn't fit into their target type", "tree": {"sha": "8d49105903dd3734e841f1365488333ebdaa40c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d49105903dd3734e841f1365488333ebdaa40c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae71b1b69e3bf9855deac8151e75fa7eba30206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae71b1b69e3bf9855deac8151e75fa7eba30206", "html_url": "https://github.com/rust-lang/rust/commit/3ae71b1b69e3bf9855deac8151e75fa7eba30206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae71b1b69e3bf9855deac8151e75fa7eba30206/comments", "author": null, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8796e012cbfa0bf63522e409edc10cbac5afaacd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8796e012cbfa0bf63522e409edc10cbac5afaacd", "html_url": "https://github.com/rust-lang/rust/commit/8796e012cbfa0bf63522e409edc10cbac5afaacd"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "87104b4526f72b670ec916aec08ce7c6627dc57b", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ae71b1b69e3bf9855deac8151e75fa7eba30206/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ae71b1b69e3bf9855deac8151e75fa7eba30206/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=3ae71b1b69e3bf9855deac8151e75fa7eba30206", "patch": "@@ -3677,10 +3677,10 @@ sites are:\n \n * `let` statements where an explicit type is given.\n \n-   For example, `128` is coerced to have type `i8` in the following:\n+   For example, `42` is coerced to have type `i8` in the following:\n \n    ```rust\n-   let _: i8 = 128;\n+   let _: i8 = 42;\n    ```\n \n * `static` and `const` statements (similar to `let` statements).\n@@ -3690,36 +3690,36 @@ sites are:\n   The value being coerced is the actual parameter, and it is coerced to\n   the type of the formal parameter.\n \n-  For example, `128` is coerced to have type `i8` in the following:\n+  For example, `42` is coerced to have type `i8` in the following:\n \n   ```rust\n   fn bar(_: i8) { }\n \n   fn main() {\n-      bar(128);\n+      bar(42);\n   }\n   ```\n \n * Instantiations of struct or variant fields\n \n-  For example, `128` is coerced to have type `i8` in the following:\n+  For example, `42` is coerced to have type `i8` in the following:\n \n   ```rust\n   struct Foo { x: i8 }\n \n   fn main() {\n-      Foo { x: 128 };\n+      Foo { x: 42 };\n   }\n   ```\n \n * Function results, either the final line of a block if it is not\n   semicolon-terminated or any expression in a `return` statement\n \n-  For example, `128` is coerced to have type `i8` in the following:\n+  For example, `42` is coerced to have type `i8` in the following:\n \n   ```rust\n   fn foo() -> i8 {\n-      128\n+      42\n   }\n   ```\n "}]}