{"sha": "4b2cc22031d56a4846bc0ad4e65e19892db734c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMmNjMjIwMzFkNTZhNDg0NmJjMGFkNGU2NWUxOTg5MmRiNzM0YzQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-30T17:59:49Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-30T18:03:40Z"}, "message": "std::iterator: Introduce trait ExactSizeHint\n\nThe trait `ExactSizeHint` is introduced to solve a few small niggles:\n\n* We can't reverse (`.invert()`) an enumeration iterator\n* for a vector, we have `v.iter().position(f)` but `v.rposition(f)`.\n* We can't reverse `Zip` even if both iterators are from vectors\n\n`ExactSizeHint` is an empty trait that is intended to indicate that an\niterator, for example `VecIterator`, knows its exact finite size and\nreports it correctly using `.size_hint()`. Only adaptors that preserve\nthis at all times, can expose this trait further. (Where here we say\nfinite for fitting in uint).", "tree": {"sha": "fd0936df8c0f8eddda113da78792ceb18616fdf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd0936df8c0f8eddda113da78792ceb18616fdf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b2cc22031d56a4846bc0ad4e65e19892db734c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2cc22031d56a4846bc0ad4e65e19892db734c4", "html_url": "https://github.com/rust-lang/rust/commit/4b2cc22031d56a4846bc0ad4e65e19892db734c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b2cc22031d56a4846bc0ad4e65e19892db734c4/comments", "author": null, "committer": null, "parents": [{"sha": "0ac3e023d86fa84ed38bca3d34003b494fd28acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac3e023d86fa84ed38bca3d34003b494fd28acf", "html_url": "https://github.com/rust-lang/rust/commit/0ac3e023d86fa84ed38bca3d34003b494fd28acf"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "19596421cb28587a2b8d6c6f015ef1a4918d771b", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4b2cc22031d56a4846bc0ad4e65e19892db734c4/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2cc22031d56a4846bc0ad4e65e19892db734c4/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=4b2cc22031d56a4846bc0ad4e65e19892db734c4", "patch": "@@ -616,6 +616,26 @@ pub trait RandomAccessIterator<A>: Iterator<A> {\n     fn idx(&self, index: uint) -> Option<A>;\n }\n \n+/// An iterator that knows its exact length\n+///\n+/// This trait is a helper for iterators like the vector iterator, so that\n+/// it can support double-ended enumeration.\n+///\n+/// `Iterator::size_hint` *must* return the exact size of the iterator.\n+/// Note that the size must fit in `uint`.\n+pub trait ExactSizeHint {}\n+\n+// All adaptors that preserve the size of the wrapped iterator are fine\n+// Adaptors that may overflow in `size_hint` are not, i.e. `Chain`.\n+impl<T: ExactSizeHint> ExactSizeHint for Enumerate<T> {}\n+impl<'self, A, T: ExactSizeHint> ExactSizeHint for Inspect<'self, A, T> {}\n+impl<T: ExactSizeHint> ExactSizeHint for Invert<T> {}\n+impl<'self, A, B, T: ExactSizeHint> ExactSizeHint for Map<'self, A, B, T> {}\n+impl<A, T: ExactSizeHint> ExactSizeHint for Peekable<A, T> {}\n+impl<T: ExactSizeHint> ExactSizeHint for Skip<T> {}\n+impl<T: ExactSizeHint> ExactSizeHint for Take<T> {}\n+impl<T: ExactSizeHint, U: ExactSizeHint> ExactSizeHint for Zip<T, U> {}\n+\n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n pub struct Invert<T> {\n@@ -1094,6 +1114,21 @@ impl<A, T: Iterator<A>> Iterator<(uint, A)> for Enumerate<T> {\n     }\n }\n \n+impl<A, T: DoubleEndedIterator<A> + ExactSizeHint> DoubleEndedIterator<(uint, A)>\n+for Enumerate<T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<(uint, A)> {\n+        match self.iter.next_back() {\n+            Some(a) => {\n+                let (len, _) = self.iter.size_hint();\n+                let ret = Some((self.count + len, a));\n+                ret\n+            }\n+            _ => None\n+        }\n+    }\n+}\n+\n impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerate<T> {\n     #[inline]\n     fn indexable(&self) -> uint {"}, {"sha": "6ddb2a72286520b2042b0e5d2bf5e511d2487d0b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b2cc22031d56a4846bc0ad4e65e19892db734c4/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2cc22031d56a4846bc0ad4e65e19892db734c4/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4b2cc22031d56a4846bc0ad4e65e19892db734c4", "patch": "@@ -2319,6 +2319,9 @@ iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n pub type RevIterator<'self, T> = Invert<VecIterator<'self, T>>;\n \n+impl<'self, T> ExactSizeHint for VecIterator<'self, T> {}\n+impl<'self, T> ExactSizeHint for VecMutIterator<'self, T> {}\n+\n impl<'self, T> Clone for VecIterator<'self, T> {\n     fn clone(&self) -> VecIterator<'self, T> { *self }\n }"}]}