{"sha": "849b4c448339c70785078860f17b50b1c09a037b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OWI0YzQ0ODMzOWM3MDc4NTA3ODg2MGYxN2I1MGIxYzA5YTAzN2I=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-01T21:09:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-18T01:41:29Z"}, "message": "ty::layout: replicate `layout_of` setup for `fn_abi_of_{fn_ptr,instance}`.", "tree": {"sha": "7503f39dd878631a42f8d37f60f90ef5b2d01cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7503f39dd878631a42f8d37f60f90ef5b2d01cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/849b4c448339c70785078860f17b50b1c09a037b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/849b4c448339c70785078860f17b50b1c09a037b", "html_url": "https://github.com/rust-lang/rust/commit/849b4c448339c70785078860f17b50b1c09a037b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/849b4c448339c70785078860f17b50b1c09a037b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8e830f6d6f2772e3136086ed40533d54f3e5ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8e830f6d6f2772e3136086ed40533d54f3e5ae", "html_url": "https://github.com/rust-lang/rust/commit/1b8e830f6d6f2772e3136086ed40533d54f3e5ae"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "6317e1d5d1abadae487ff4db4987e530e4b8dc75", "filename": "src/abi/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/849b4c448339c70785078860f17b50b1c09a037b/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849b4c448339c70785078860f17b50b1c09a037b/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=849b4c448339c70785078860f17b50b1c09a037b", "patch": "@@ -5,7 +5,7 @@ mod pass_mode;\n mod returning;\n \n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n \n@@ -53,7 +53,7 @@ pub(crate) fn get_function_sig<'tcx>(\n     inst: Instance<'tcx>,\n ) -> Signature {\n     assert!(!inst.substs.needs_infer());\n-    clif_sig_from_fn_abi(tcx, triple, &FnAbi::of_instance(&RevealAllLayoutCx(tcx), inst, &[]))\n+    clif_sig_from_fn_abi(tcx, triple, &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, &[]))\n }\n \n /// Instance must be monomorphized\n@@ -355,9 +355,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         .map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx)))\n         .collect::<Vec<_>>();\n     let fn_abi = if let Some(instance) = instance {\n-        FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), instance, &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, &extra_args)\n     } else {\n-        FnAbi::of_fn_ptr(&RevealAllLayoutCx(fx.tcx), fn_ty.fn_sig(fx.tcx), &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), &extra_args)\n     };\n \n     let is_cold = instance\n@@ -525,7 +525,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                     def: ty::InstanceDef::Virtual(drop_instance.def_id(), 0),\n                     substs: drop_instance.substs,\n                 };\n-                let fn_abi = FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), virtual_drop, &[]);\n+                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, &[]);\n \n                 let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n                 let sig = fx.bcx.import_signature(sig);\n@@ -534,7 +534,7 @@ pub(crate) fn codegen_drop<'tcx>(\n             _ => {\n                 assert!(!matches!(drop_instance.def, InstanceDef::Virtual(_, _)));\n \n-                let fn_abi = FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), drop_instance, &[]);\n+                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(drop_instance, &[]);\n \n                 let arg_value = drop_place.place_ref(\n                     fx,"}, {"sha": "872c7edc791ff6a49b6b9291fda6cc085a3e91d7", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/849b4c448339c70785078860f17b50b1c09a037b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849b4c448339c70785078860f17b50b1c09a037b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=849b4c448339c70785078860f17b50b1c09a037b", "patch": "@@ -3,8 +3,7 @@\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n-use rustc_middle::ty::layout::FnAbiExt;\n-use rustc_target::abi::call::FnAbi;\n+use rustc_middle::ty::layout::FnAbiOf;\n \n use crate::constant::ConstantCx;\n use crate::prelude::*;\n@@ -62,7 +61,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         instance,\n         symbol_name,\n         mir,\n-        fn_abi: Some(FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n+        fn_abi: Some(RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n \n         bcx,\n         block_map,"}, {"sha": "4a8be89460fcf221a2ed5ddce1a178fef810711d", "filename": "src/common.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/849b4c448339c70785078860f17b50b1c09a037b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849b4c448339c70785078860f17b50b1c09a037b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=849b4c448339c70785078860f17b50b1c09a037b", "patch": "@@ -1,5 +1,7 @@\n use rustc_index::vec::IndexVec;\n-use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers};\n+use rustc_middle::ty::layout::{\n+    FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers,\n+};\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -266,6 +268,20 @@ impl<'tcx> LayoutOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     }\n }\n \n+impl<'tcx> FnAbiOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+    ) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_fn_abi_err(err, span, fn_abi_request)\n+    }\n+}\n+\n impl<'tcx> layout::HasTyCtxt<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n@@ -378,6 +394,43 @@ impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n     }\n }\n \n+impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+    ) -> ! {\n+        if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            match fn_abi_request {\n+                FnAbiRequest::OfFnPtr { sig, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_fn_ptr({}, {:?})` failed: {}\",\n+                        sig,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+                FnAbiRequest::OfInstance { instance, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_instance({}, {:?})` failed: {}\",\n+                        instance,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> layout::HasTyCtxt<'tcx> for RevealAllLayoutCx<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.0"}, {"sha": "5c4991f1fb667382809dc2bfc00896653a75072e", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/849b4c448339c70785078860f17b50b1c09a037b/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849b4c448339c70785078860f17b50b1c09a037b/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=849b4c448339c70785078860f17b50b1c09a037b", "patch": "@@ -129,9 +129,7 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(uv)\n-            if fx.tcx.is_static(uv.def.did) =>\n-        {\n+        ConstKind::Unevaluated(uv) if fx.tcx.is_static(uv.def.did) => {\n             assert!(uv.substs(fx.tcx).is_empty());\n             assert!(uv.promoted.is_none());\n "}, {"sha": "0b80ef1c04e7636d28c56a4f4822ac7394fd9402", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/849b4c448339c70785078860f17b50b1c09a037b/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849b4c448339c70785078860f17b50b1c09a037b/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=849b4c448339c70785078860f17b50b1c09a037b", "patch": "@@ -61,9 +61,8 @@ use cranelift_codegen::{\n     write::{FuncWriter, PlainWriter},\n };\n \n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_session::config::OutputType;\n-use rustc_target::abi::call::FnAbi;\n \n use crate::prelude::*;\n \n@@ -81,7 +80,7 @@ impl CommentWriter {\n             vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n-                format!(\"abi {:?}\", FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n+                format!(\"abi {:?}\", RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n                 String::new(),\n             ]\n         } else {"}]}