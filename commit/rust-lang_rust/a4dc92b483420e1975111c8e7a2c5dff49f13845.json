{"sha": "a4dc92b483420e1975111c8e7a2c5dff49f13845", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZGM5MmI0ODM0MjBlMTk3NTExMWM4ZTdhMmM1ZGZmNDlmMTM4NDU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-21T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-21T00:00:00Z"}, "message": "Introduce a temporary for discriminant value in MatchBranchSimplification\n\nThe optimization introduces additional uses of the discriminant operand, but\ndoes not ensure that it is still valid to evaluate it or that it still\nevaluates to the same value.\n\nEvaluate it once at original position, and store the result in a new temporary.", "tree": {"sha": "c65e5ebf86fc57961f822b51435f93831315ce0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c65e5ebf86fc57961f822b51435f93831315ce0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4dc92b483420e1975111c8e7a2c5dff49f13845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4dc92b483420e1975111c8e7a2c5dff49f13845", "html_url": "https://github.com/rust-lang/rust/commit/a4dc92b483420e1975111c8e7a2c5dff49f13845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4dc92b483420e1975111c8e7a2c5dff49f13845/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "html_url": "https://github.com/rust-lang/rust/commit/f965120ad3dbe7d4d6b90a16cc7028eb6363b983"}], "stats": {"total": 357, "additions": 309, "deletions": 48}, "files": [{"sha": "06690dcbf6eb7aae23c859b953f3272c6b98b4ce", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -38,19 +38,16 @@ pub struct MatchBranchSimplification;\n \n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        // FIXME: This optimization can result in unsoundness, because it introduces\n-        // additional uses of a place holding the discriminant value without ensuring that\n-        // it is valid to do so.\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n             return;\n         }\n \n         let param_env = tcx.param_env(body.source.def_id());\n-        let bbs = body.basic_blocks_mut();\n+        let (bbs, local_decls) = body.basic_blocks_and_local_decls_mut();\n         'outer: for bb_idx in bbs.indices() {\n             let (discr, val, switch_ty, first, second) = match bbs[bb_idx].terminator().kind {\n                 TerminatorKind::SwitchInt {\n-                    discr: Operand::Copy(ref place) | Operand::Move(ref place),\n+                    discr: ref discr @ (Operand::Copy(_) | Operand::Move(_)),\n                     switch_ty,\n                     ref targets,\n                     ..\n@@ -59,7 +56,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                     if target == targets.otherwise() {\n                         continue;\n                     }\n-                    (place, value, switch_ty, target, targets.otherwise())\n+                    (discr, value, switch_ty, target, targets.otherwise())\n                 }\n                 // Only optimize switch int statements\n                 _ => continue,\n@@ -99,6 +96,10 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             // Take ownership of items now that we know we can optimize.\n             let discr = discr.clone();\n \n+            // Introduce a temporary for the discriminant value.\n+            let source_info = bbs[bb_idx].terminator().source_info;\n+            let discr_local = local_decls.push(LocalDecl::new(switch_ty, source_info.span));\n+\n             // We already checked that first and second are different blocks,\n             // and bb_idx has a different terminator from both of them.\n             let (from, first, second) = bbs.pick3_mut(bb_idx, first, second);\n@@ -127,7 +128,11 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                                 rustc_span::DUMMY_SP,\n                             );\n                             let op = if f_b { BinOp::Eq } else { BinOp::Ne };\n-                            let rhs = Rvalue::BinaryOp(op, Operand::Copy(discr.clone()), const_cmp);\n+                            let rhs = Rvalue::BinaryOp(\n+                                op,\n+                                Operand::Copy(Place::from(discr_local)),\n+                                const_cmp,\n+                            );\n                             Statement {\n                                 source_info: f.source_info,\n                                 kind: StatementKind::Assign(box (*lhs, rhs)),\n@@ -138,7 +143,16 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                     _ => unreachable!(),\n                 }\n             });\n+\n+            from.statements\n+                .push(Statement { source_info, kind: StatementKind::StorageLive(discr_local) });\n+            from.statements.push(Statement {\n+                source_info,\n+                kind: StatementKind::Assign(box (Place::from(discr_local), Rvalue::Use(discr))),\n+            });\n             from.statements.extend(new_stmts);\n+            from.statements\n+                .push(Statement { source_info, kind: StatementKind::StorageDead(discr_local) });\n             from.terminator_mut().kind = first.terminator().kind.clone();\n         }\n     }"}, {"sha": "d3a29aa5d51c191f942c45cf4eb765664ceab1d8", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -10,6 +10,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:35:9: 35:10\n       let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:35:12: 35:13\n       let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:35:15: 35:16\n++     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n           let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n@@ -33,10 +34,13 @@\n           StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:16:9: 16:10\n           StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:18:5: 33:6\n -         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n-+         _2 = Ne(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:22\n-+         _3 = Eq(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:21\n++         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n++         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n++         _2 = Ne(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:22\n++         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:21\n +         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:22\n +         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:21\n++         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n +         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n       }\n   "}, {"sha": "d3a29aa5d51c191f942c45cf4eb765664ceab1d8", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -10,6 +10,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:35:9: 35:10\n       let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:35:12: 35:13\n       let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:35:15: 35:16\n++     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:13:9: 13:10\n           let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n@@ -33,10 +34,13 @@\n           StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:16:9: 16:10\n           StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:18:5: 33:6\n -         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n-+         _2 = Ne(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:22\n-+         _3 = Eq(_1, const 7_i32);        // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:21\n++         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n++         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n++         _2 = Ne(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:20:13: 20:22\n++         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:21\n +         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:22\n +         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:21\n++         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n +         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:19:9: 19:10\n       }\n   "}, {"sha": "ba963e3fe920bce99359f450a13e7b6cf0c22b33", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -6,12 +6,16 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:6:25: 6:25\n       let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n++     let mut _4: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n -         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n-+         _2 = Eq(_3, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n++         _4 = move _3;                    // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n++         _2 = Eq(_4, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n +         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n       }\n   "}, {"sha": "ba963e3fe920bce99359f450a13e7b6cf0c22b33", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -6,12 +6,16 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:6:25: 6:25\n       let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n++     let mut _4: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n -         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n-+         _2 = Eq(_3, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n++         _4 = move _3;                    // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n++         _2 = Eq(_4, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n +         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26\n       }\n   "}, {"sha": "1f46d3777bed8442b165731739b676b12932355f", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -0,0 +1,116 @@\n+- // MIR for `match_nested_if` before MatchBranchSimplification\n++ // MIR for `match_nested_if` after MatchBranchSimplification\n+  \n+  fn match_nested_if() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:38:25: 38:29\n+      let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:39:9: 39:12\n+      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:39:21: 39:23\n+      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n++     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      scope 1 {\n+          debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:39:9: 39:12\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:39:9: 39:12\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:39:21: 39:23\n+          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n+          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n+-         switchInt(_6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         _7 = _6;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:42: 40:47\n++         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      }\n+  \n+      bb1: {\n+          _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:30: 40:34\n+          goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      }\n+  \n+      bb2: {\n+          _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:42: 40:47\n+          goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      }\n+  \n+      bb3: {\n+          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:47: 40:48\n+-         switchInt(_5) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         _8 = _5;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n++         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      }\n+  \n+      bb4: {\n+          _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n+          goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      }\n+  \n+      bb5: {\n+          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:50: 40:54\n+          goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      }\n+  \n+      bb6: {\n+          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:67: 40:68\n+-         switchInt(_4) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _9 = _4;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n++         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb7: {\n+          _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n+          goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb8: {\n+          _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:70: 40:74\n+          goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb9: {\n+          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:87: 40:88\n+-         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:95: 40:96\n++         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:41:14: 41:19\n++         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb10: {\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:95: 40:96\n+          _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:92: 40:96\n+          goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:39:15: 42:6\n+      }\n+  \n+      bb11: {\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:95: 40:96\n+          _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:14: 41:19\n+          goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:39:15: 42:6\n+      }\n+  \n+      bb12: {\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:42:6: 42:7\n+          _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:43:5: 43:8\n+          StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:44:1: 44:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:44:2: 44:2\n+      }\n+  }\n+  "}, {"sha": "1f46d3777bed8442b165731739b676b12932355f", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -0,0 +1,116 @@\n+- // MIR for `match_nested_if` before MatchBranchSimplification\n++ // MIR for `match_nested_if` after MatchBranchSimplification\n+  \n+  fn match_nested_if() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:38:25: 38:29\n+      let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:39:9: 39:12\n+      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:39:21: 39:23\n+      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n++     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      scope 1 {\n+          debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:39:9: 39:12\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:39:9: 39:12\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:39:21: 39:23\n+          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n+          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:24: 40:28\n+-         switchInt(_6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         _7 = _6;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:42: 40:47\n++         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      }\n+  \n+      bb1: {\n+          _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:30: 40:34\n+          goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      }\n+  \n+      bb2: {\n+          _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:42: 40:47\n+          goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:21: 40:48\n+      }\n+  \n+      bb3: {\n+          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:47: 40:48\n+-         switchInt(_5) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         _8 = _5;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n++         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n++         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      }\n+  \n+      bb4: {\n+          _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:62: 40:67\n+          goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      }\n+  \n+      bb5: {\n+          _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:50: 40:54\n+          goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:18: 40:68\n+      }\n+  \n+      bb6: {\n+          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:67: 40:68\n+-         switchInt(_4) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _9 = _4;                         // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n++         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb7: {\n+          _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:40:82: 40:87\n+          goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb8: {\n+          _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:70: 40:74\n+          goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb9: {\n+          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:87: 40:88\n+-         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:95: 40:96\n++         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:41:14: 41:19\n++         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n++         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 40:88\n+      }\n+  \n+      bb10: {\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:95: 40:96\n+          _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:40:92: 40:96\n+          goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:39:15: 42:6\n+      }\n+  \n+      bb11: {\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:95: 40:96\n+          _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:41:14: 41:19\n+          goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:39:15: 42:6\n+      }\n+  \n+      bb12: {\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:42:6: 42:7\n+          _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:43:5: 43:8\n+          StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:44:1: 44:2\n+          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:44:2: 44:2\n+      }\n+  }\n+  "}, {"sha": "e95a62aeeb0b9c86bef337c17c2c04057fb5e064", "filename": "src/test/mir-opt/matches_reduce_branches.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -1,7 +1,7 @@\n-// compile-flags: -Zunsound-mir-opts\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR matches_reduce_branches.foo.MatchBranchSimplification.diff\n // EMIT_MIR matches_reduce_branches.bar.MatchBranchSimplification.diff\n+// EMIT_MIR matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff\n \n fn foo(bar: Option<()>) {\n     if matches!(bar, None) {\n@@ -35,9 +35,17 @@ fn bar(i: i32) -> (bool, bool, bool, bool) {\n     (a, b, c, d)\n }\n \n+fn match_nested_if() -> bool {\n+    let val = match () {\n+        () if if if if true {true} else {false} {true} else {false} {true} else {false} => true,\n+        _ => false,\n+    };\n+    val\n+}\n \n fn main() {\n   let _ = foo(None);\n   let _ = foo(Some(()));\n   let _ = bar(0);\n+  let _ = match_nested_if();\n }"}, {"sha": "dc3a6a36d9eef6e735fefc68aee2f1d1994387e1", "filename": "src/test/mir-opt/not_equal_false.opt.InstCombine.diff", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc92b483420e1975111c8e7a2c5dff49f13845/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff?ref=a4dc92b483420e1975111c8e7a2c5dff49f13845", "patch": "@@ -8,61 +8,52 @@\n       let mut _3: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n       let mut _4: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _5: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+      let mut _6: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+      let mut _7: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+      let mut _8: bool;                    // in scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _3 = discriminant(_1);           // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n-          switchInt(move _3) -> [0_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+          StorageLive(_6);                 // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+          _6 = move _3;                    // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+          _2 = Eq(_6, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n+          goto -> bb4;                     // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21\n       }\n   \n       bb1: {\n           _0 = const true;                 // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n-          goto -> bb4;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+          goto -> bb3;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n       }\n   \n       bb2: {\n-          _0 = const false;                // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n-          goto -> bb4;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n-      }\n-  \n-      bb3: {\n           StorageLive(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _5 = discriminant(_1);           // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n-          switchInt(move _5) -> [1_isize: bb9, otherwise: bb8]; // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+          StorageLive(_7);                 // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+          _7 = move _5;                    // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+          _4 = Eq(_7, const 1_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n+          goto -> bb5;                     // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45\n       }\n   \n-      bb4: {\n+      bb3: {\n           StorageDead(_4);                 // scope 0 at $DIR/not_equal_false.rs:4:45: 4:46\n           StorageDead(_2);                 // scope 0 at $DIR/not_equal_false.rs:4:45: 4:46\n           return;                          // scope 0 at $DIR/not_equal_false.rs:5:2: 5:2\n       }\n   \n-      bb5: {\n-          _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb6: {\n-          _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb7: {\n-          switchInt(move _2) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n-      }\n-  \n-      bb8: {\n-          _4 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          goto -> bb10;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb9: {\n-          _4 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          goto -> bb10;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      bb4: {\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n       }\n   \n-      bb10: {\n-          switchInt(move _4) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+      bb5: {\n+          StorageLive(_8);                 // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+          _8 = move _4;                    // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+-         _0 = Ne(_8, const false);        // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n++         _0 = _8;                         // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+          StorageDead(_8);                 // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n+          goto -> bb3;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46\n       }\n   }\n   "}]}