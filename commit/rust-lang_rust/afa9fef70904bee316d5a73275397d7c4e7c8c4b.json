{"sha": "afa9fef70904bee316d5a73275397d7c4e7c8c4b", "node_id": "C_kwDOAAsO6NoAKGFmYTlmZWY3MDkwNGJlZTMxNmQ1YTczMjc1Mzk3ZDdjNGU3YzhjNGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-14T14:20:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-14T14:20:59Z"}, "message": "Auto merge of #112418 - ferrocene:pa-mir-opt-panic, r=ozkanonur,saethlin\n\nAdd support for targets without unwinding in `mir-opt`, and improve `--bless` for it\n\nThe main goal of this PR is to add support for targets without unwinding support in the `mir-opt` test suite, by adding the `EMIT_MIR_FOR_EACH_PANIC_STRATEGY` comment. Similarly to 32bit vs 64bit, when that comment is present, blessed output files will have the `.panic-unwind` or `.panic-abort` suffix, and the right one will be chosen depending on the target's panic strategy.\n\nThe `EMIT_MIR_FOR_EACH_PANIC_STRATEGY` comment replaced all the `ignore-wasm32` comments in the `mir-opt` test suite, as those comments were added due to `wasm32` being a target without unwinding support. The comment was also added on other tests that were only executed on x86 but were still panic strategy dependent.\n\nThe `mir-opt` suite was then blessed, which caused a ton of churn as most of the existing output files had to be renamed and (mostly) duplicated with the abort strategy.\n\n---\n\nAfter [asking on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/mir-opt.20tests.20and.20panic.3Dabort), the main concern about this change is it'd make blessing the `mir-opt` suite even harder, as you'd need to both bless it with an unwinding target and an aborting target. This exacerbated the current situation, where you'd need to bless it with a 32bit and a 64bit target already.\n\nBecause of that, this PR also makes significant enhancements to `--bless` for the `mir-opt` suite, where it will automatically bless the suite four times with different targets, while requiring minimal cross-compilation.\n\nTo handle the 32bit vs 64bit blessing, there is now an hardcoded list of target mapping between 32bit and 64bit. The goal of the list is to find a related target that will *probably* work without requiring additional cross-compilation toolchains on the system. If a mapping is found, bootstrap will bless the suite with both targets, otherwise just with the current target.\n\nTo handle the panic strategy blessing (abort vs unwind), I had to resort to what I call \"synthetic targets\". For each of the target we're blessing (so either the current one, or a 32bit and a 64bit depending on the previous paragraph), bootstrap will extract the JSON spec of the target and change it to include `\"panic-strategy\": \"abort\"`. It will then build the standard library with this synthetic target, and bless the `mir-opt` suite with it.\n\nAs a result of these changes, blessing the `mir-opt` suite will actually bless it two or four times with different targets, ensuring all possible variants are actually blessed.\n\n---\n\nThis PR is best reviewed commit-by-commit.\n\nr? `@jyn514`\ncc `@saethlin` `@oli-obk`", "tree": {"sha": "f4c520b318d66dbbcfd1c1aeb5962ff8154386c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c520b318d66dbbcfd1c1aeb5962ff8154386c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa9fef70904bee316d5a73275397d7c4e7c8c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa9fef70904bee316d5a73275397d7c4e7c8c4b", "html_url": "https://github.com/rust-lang/rust/commit/afa9fef70904bee316d5a73275397d7c4e7c8c4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa9fef70904bee316d5a73275397d7c4e7c8c4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0eac438ace0ba305b4633328b00474fbbf5120", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0eac438ace0ba305b4633328b00474fbbf5120", "html_url": "https://github.com/rust-lang/rust/commit/7b0eac438ace0ba305b4633328b00474fbbf5120"}, {"sha": "f67809ac1dca66e98c0999634212532974e43b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67809ac1dca66e98c0999634212532974e43b97", "html_url": "https://github.com/rust-lang/rust/commit/f67809ac1dca66e98c0999634212532974e43b97"}], "stats": {"total": 11944, "additions": 11693, "deletions": 251}, "files": [{"sha": "d0b379409369f26be661f61a37fbe4e0032ccdc4", "filename": "library/std/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -36,6 +36,8 @@ fn main() {\n         || target.contains(\"nintendo-3ds\")\n         || target.contains(\"vita\")\n         || target.contains(\"nto\")\n+        // See src/bootstrap/synthetic_targets.rs\n+        || env::var(\"RUSTC_BOOTSTRAP_SYNTHETIC_TARGET\").is_ok()\n     {\n         // These platforms don't have any special requirements.\n     } else {"}, {"sha": "7c8e3536df588aec6c9440d743dbdbc794f2be43", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1650,7 +1650,8 @@ impl<'a> Builder<'a> {\n             }\n         };\n         cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n-        if self.cc[&target].args().iter().any(|arg| arg == \"-gz\") {\n+        if !self.config.dry_run() && self.cc.borrow()[&target].args().iter().any(|arg| arg == \"-gz\")\n+        {\n             rustflags.arg(\"-Clink-arg=-gz\");\n         }\n         cargo.env("}, {"sha": "ade3bfed11f9c32090f026578ff505fbfdd0a42c", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 53, "deletions": 49, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -89,7 +89,7 @@ fn new_cc_build(build: &Build, target: TargetSelection) -> cc::Build {\n     cfg\n }\n \n-pub fn find(build: &mut Build) {\n+pub fn find(build: &Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n     let targets = build\n@@ -100,60 +100,64 @@ pub fn find(build: &mut Build) {\n         .chain(iter::once(build.build))\n         .collect::<HashSet<_>>();\n     for target in targets.into_iter() {\n-        let mut cfg = new_cc_build(build, target);\n-        let config = build.config.target_config.get(&target);\n-        if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n-            cfg.compiler(cc);\n-        } else {\n-            set_compiler(&mut cfg, Language::C, target, config, build);\n-        }\n+        find_target(build, target);\n+    }\n+}\n \n-        let compiler = cfg.get_compiler();\n-        let ar = if let ar @ Some(..) = config.and_then(|c| c.ar.clone()) {\n-            ar\n-        } else {\n-            cc2ar(compiler.path(), target)\n-        };\n+pub fn find_target(build: &Build, target: TargetSelection) {\n+    let mut cfg = new_cc_build(build, target);\n+    let config = build.config.target_config.get(&target);\n+    if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n+        cfg.compiler(cc);\n+    } else {\n+        set_compiler(&mut cfg, Language::C, target, config, build);\n+    }\n \n-        build.cc.insert(target, compiler.clone());\n-        let cflags = build.cflags(target, GitRepo::Rustc, CLang::C);\n+    let compiler = cfg.get_compiler();\n+    let ar = if let ar @ Some(..) = config.and_then(|c| c.ar.clone()) {\n+        ar\n+    } else {\n+        cc2ar(compiler.path(), target)\n+    };\n \n-        // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n-        // We'll need one anyways if the target triple is also a host triple\n-        let mut cfg = new_cc_build(build, target);\n-        cfg.cpp(true);\n-        let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n-            cfg.compiler(cxx);\n-            true\n-        } else if build.hosts.contains(&target) || build.build == target {\n-            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n-            true\n-        } else {\n-            // Use an auto-detected compiler (or one configured via `CXX_target_triple` env vars).\n-            cfg.try_get_compiler().is_ok()\n-        };\n+    build.cc.borrow_mut().insert(target, compiler.clone());\n+    let cflags = build.cflags(target, GitRepo::Rustc, CLang::C);\n \n-        // for VxWorks, record CXX compiler which will be used in lib.rs:linker()\n-        if cxx_configured || target.contains(\"vxworks\") {\n-            let compiler = cfg.get_compiler();\n-            build.cxx.insert(target, compiler);\n-        }\n+    // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n+    // We'll need one anyways if the target triple is also a host triple\n+    let mut cfg = new_cc_build(build, target);\n+    cfg.cpp(true);\n+    let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n+        cfg.compiler(cxx);\n+        true\n+    } else if build.hosts.contains(&target) || build.build == target {\n+        set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n+        true\n+    } else {\n+        // Use an auto-detected compiler (or one configured via `CXX_target_triple` env vars).\n+        cfg.try_get_compiler().is_ok()\n+    };\n \n-        build.verbose(&format!(\"CC_{} = {:?}\", &target.triple, build.cc(target)));\n-        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target.triple, cflags));\n-        if let Ok(cxx) = build.cxx(target) {\n-            let cxxflags = build.cflags(target, GitRepo::Rustc, CLang::Cxx);\n-            build.verbose(&format!(\"CXX_{} = {:?}\", &target.triple, cxx));\n-            build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target.triple, cxxflags));\n-        }\n-        if let Some(ar) = ar {\n-            build.verbose(&format!(\"AR_{} = {:?}\", &target.triple, ar));\n-            build.ar.insert(target, ar);\n-        }\n+    // for VxWorks, record CXX compiler which will be used in lib.rs:linker()\n+    if cxx_configured || target.contains(\"vxworks\") {\n+        let compiler = cfg.get_compiler();\n+        build.cxx.borrow_mut().insert(target, compiler);\n+    }\n \n-        if let Some(ranlib) = config.and_then(|c| c.ranlib.clone()) {\n-            build.ranlib.insert(target, ranlib);\n-        }\n+    build.verbose(&format!(\"CC_{} = {:?}\", &target.triple, build.cc(target)));\n+    build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target.triple, cflags));\n+    if let Ok(cxx) = build.cxx(target) {\n+        let cxxflags = build.cflags(target, GitRepo::Rustc, CLang::Cxx);\n+        build.verbose(&format!(\"CXX_{} = {:?}\", &target.triple, cxx));\n+        build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target.triple, cxxflags));\n+    }\n+    if let Some(ar) = ar {\n+        build.verbose(&format!(\"AR_{} = {:?}\", &target.triple, ar));\n+        build.ar.borrow_mut().insert(target, ar);\n+    }\n+\n+    if let Some(ranlib) = config.and_then(|c| c.ranlib.clone()) {\n+        build.ranlib.borrow_mut().insert(target, ranlib);\n     }\n }\n "}, {"sha": "14c3ef79a78f2d1f35ff7fa12a022a5b8c9c7989", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -169,6 +169,11 @@ impl Step for Std {\n             cargo.arg(\"-p\").arg(krate);\n         }\n \n+        // See src/bootstrap/synthetic_targets.rs\n+        if target.is_synthetic() {\n+            cargo.env(\"RUSTC_BOOTSTRAP_SYNTHETIC_TARGET\", \"1\");\n+        }\n+\n         let _guard = builder.msg(\n             Kind::Build,\n             compiler.stage,\n@@ -314,7 +319,7 @@ fn copy_self_contained_objects(\n         }\n     } else if target.ends_with(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n-            let src = compiler_file(builder, builder.cc(target), target, CLang::C, obj);\n+            let src = compiler_file(builder, &builder.cc(target), target, CLang::C, obj);\n             let target = libdir_self_contained.join(obj);\n             builder.copy(&src, &target);\n             target_deps.push((target, DependencyType::TargetSelfContained));\n@@ -995,8 +1000,13 @@ fn rustc_llvm_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelect\n         && !target.contains(\"apple\")\n         && !target.contains(\"solaris\")\n     {\n-        let file =\n-            compiler_file(builder, builder.cxx(target).unwrap(), target, CLang::Cxx, \"libstdc++.a\");\n+        let file = compiler_file(\n+            builder,\n+            &builder.cxx(target).unwrap(),\n+            target,\n+            CLang::Cxx,\n+            \"libstdc++.a\",\n+        );\n         cargo.env(\"LLVM_STATIC_STDCPP\", file);\n     }\n     if builder.llvm_link_shared() {\n@@ -1267,6 +1277,9 @@ pub fn compiler_file(\n     c: CLang,\n     file: &str,\n ) -> PathBuf {\n+    if builder.config.dry_run() {\n+        return PathBuf::new();\n+    }\n     let mut cmd = Command::new(compiler);\n     cmd.args(builder.cflags(target, GitRepo::Rustc, c));\n     cmd.arg(format!(\"-print-file-name={}\", file));"}, {"sha": "8ee63e561ba789846787ce670090067168e2dfae", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -429,6 +429,7 @@ impl std::str::FromStr for RustcLto {\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n     file: Option<Interned<String>>,\n+    synthetic: bool,\n }\n \n /// Newtype over `Vec<TargetSelection>` so we can implement custom parsing logic\n@@ -460,7 +461,15 @@ impl TargetSelection {\n         let triple = INTERNER.intern_str(triple);\n         let file = file.map(|f| INTERNER.intern_str(f));\n \n-        Self { triple, file }\n+        Self { triple, file, synthetic: false }\n+    }\n+\n+    pub fn create_synthetic(triple: &str, file: &str) -> Self {\n+        Self {\n+            triple: INTERNER.intern_str(triple),\n+            file: Some(INTERNER.intern_str(file)),\n+            synthetic: true,\n+        }\n     }\n \n     pub fn rustc_target_arg(&self) -> &str {\n@@ -478,6 +487,11 @@ impl TargetSelection {\n     pub fn ends_with(&self, needle: &str) -> bool {\n         self.triple.ends_with(needle)\n     }\n+\n+    // See src/bootstrap/synthetic_targets.rs\n+    pub fn is_synthetic(&self) -> bool {\n+        self.synthetic\n+    }\n }\n \n impl fmt::Display for TargetSelection {"}, {"sha": "a34a594f137988152cf048165c9facf18e521de0", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -170,6 +170,10 @@ fn make_win_dist(\n     target: TargetSelection,\n     builder: &Builder<'_>,\n ) {\n+    if builder.config.dry_run() {\n+        return;\n+    }\n+\n     //Ask gcc where it keeps its stuff\n     let mut cmd = Command::new(builder.cc(target));\n     cmd.arg(\"-print-search-dirs\");"}, {"sha": "d7e77aeb338f6208e4f73d31314896e2e3938ff4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -61,6 +61,7 @@ mod run;\n mod sanity;\n mod setup;\n mod suggest;\n+mod synthetic_targets;\n mod tarball;\n mod test;\n mod tool;\n@@ -226,10 +227,10 @@ pub struct Build {\n \n     // Runtime state filled in later on\n     // C/C++ compilers and archiver for all targets\n-    cc: HashMap<TargetSelection, cc::Tool>,\n-    cxx: HashMap<TargetSelection, cc::Tool>,\n-    ar: HashMap<TargetSelection, PathBuf>,\n-    ranlib: HashMap<TargetSelection, PathBuf>,\n+    cc: RefCell<HashMap<TargetSelection, cc::Tool>>,\n+    cxx: RefCell<HashMap<TargetSelection, cc::Tool>>,\n+    ar: RefCell<HashMap<TargetSelection, PathBuf>>,\n+    ranlib: RefCell<HashMap<TargetSelection, PathBuf>>,\n     // Miscellaneous\n     // allow bidirectional lookups: both name -> path and path -> name\n     crates: HashMap<Interned<String>, Crate>,\n@@ -451,10 +452,10 @@ impl Build {\n             miri_info,\n             rustfmt_info,\n             in_tree_llvm_info,\n-            cc: HashMap::new(),\n-            cxx: HashMap::new(),\n-            ar: HashMap::new(),\n-            ranlib: HashMap::new(),\n+            cc: RefCell::new(HashMap::new()),\n+            cxx: RefCell::new(HashMap::new()),\n+            ar: RefCell::new(HashMap::new()),\n+            ranlib: RefCell::new(HashMap::new()),\n             crates: HashMap::new(),\n             crate_paths: HashMap::new(),\n             is_sudo,\n@@ -482,7 +483,7 @@ impl Build {\n         }\n \n         build.verbose(\"finding compilers\");\n-        cc_detect::find(&mut build);\n+        cc_detect::find(&build);\n         // When running `setup`, the profile is about to change, so any requirements we have now may\n         // be different on the next invocation. Don't check for them until the next time x.py is\n         // run. This is ok because `setup` never runs any build commands, so it won't fail if commands are missing.\n@@ -1103,16 +1104,22 @@ impl Build {\n     }\n \n     /// Returns the path to the C compiler for the target specified.\n-    fn cc(&self, target: TargetSelection) -> &Path {\n-        self.cc[&target].path()\n+    fn cc(&self, target: TargetSelection) -> PathBuf {\n+        if self.config.dry_run() {\n+            return PathBuf::new();\n+        }\n+        self.cc.borrow()[&target].path().into()\n     }\n \n     /// Returns a list of flags to pass to the C compiler for the target\n     /// specified.\n     fn cflags(&self, target: TargetSelection, which: GitRepo, c: CLang) -> Vec<String> {\n+        if self.config.dry_run() {\n+            return Vec::new();\n+        }\n         let base = match c {\n-            CLang::C => &self.cc[&target],\n-            CLang::Cxx => &self.cxx[&target],\n+            CLang::C => self.cc.borrow()[&target].clone(),\n+            CLang::Cxx => self.cxx.borrow()[&target].clone(),\n         };\n \n         // Filter out -O and /O (the optimization flags) that we picked up from\n@@ -1153,41 +1160,53 @@ impl Build {\n     }\n \n     /// Returns the path to the `ar` archive utility for the target specified.\n-    fn ar(&self, target: TargetSelection) -> Option<&Path> {\n-        self.ar.get(&target).map(|p| &**p)\n+    fn ar(&self, target: TargetSelection) -> Option<PathBuf> {\n+        if self.config.dry_run() {\n+            return None;\n+        }\n+        self.ar.borrow().get(&target).cloned()\n     }\n \n     /// Returns the path to the `ranlib` utility for the target specified.\n-    fn ranlib(&self, target: TargetSelection) -> Option<&Path> {\n-        self.ranlib.get(&target).map(|p| &**p)\n+    fn ranlib(&self, target: TargetSelection) -> Option<PathBuf> {\n+        if self.config.dry_run() {\n+            return None;\n+        }\n+        self.ranlib.borrow().get(&target).cloned()\n     }\n \n     /// Returns the path to the C++ compiler for the target specified.\n-    fn cxx(&self, target: TargetSelection) -> Result<&Path, String> {\n-        match self.cxx.get(&target) {\n-            Some(p) => Ok(p.path()),\n+    fn cxx(&self, target: TargetSelection) -> Result<PathBuf, String> {\n+        if self.config.dry_run() {\n+            return Ok(PathBuf::new());\n+        }\n+        match self.cxx.borrow().get(&target) {\n+            Some(p) => Ok(p.path().into()),\n             None => {\n                 Err(format!(\"target `{}` is not configured as a host, only as a target\", target))\n             }\n         }\n     }\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n-    fn linker(&self, target: TargetSelection) -> Option<&Path> {\n-        if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.as_ref())\n+    fn linker(&self, target: TargetSelection) -> Option<PathBuf> {\n+        if self.config.dry_run() {\n+            return Some(PathBuf::new());\n+        }\n+        if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.clone())\n         {\n             Some(linker)\n         } else if target.contains(\"vxworks\") {\n             // need to use CXX compiler as linker to resolve the exception functions\n             // that are only existed in CXX libraries\n-            Some(self.cxx[&target].path())\n+            Some(self.cxx.borrow()[&target].path().into())\n         } else if target != self.config.build\n             && util::use_host_linker(target)\n             && !target.contains(\"msvc\")\n         {\n             Some(self.cc(target))\n         } else if self.config.use_lld && !self.is_fuse_ld_lld(target) && self.build == target {\n-            Some(&self.initial_lld)\n+            Some(self.initial_lld.clone())\n         } else {\n             None\n         }"}, {"sha": "4752b1f7ea1e405e6c74b27ddd7fb96f8c4623b0", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -605,7 +605,7 @@ fn configure_cmake(\n     }\n \n     let (cc, cxx) = match builder.config.llvm_clang_cl {\n-        Some(ref cl) => (cl.as_ref(), cl.as_ref()),\n+        Some(ref cl) => (cl.into(), cl.into()),\n         None => (builder.cc(target), builder.cxx(target).unwrap()),\n     };\n \n@@ -656,9 +656,9 @@ fn configure_cmake(\n                     .define(\"CMAKE_CXX_COMPILER_LAUNCHER\", ccache);\n             }\n         }\n-        cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n-            .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx))\n-            .define(\"CMAKE_ASM_COMPILER\", sanitize_cc(cc));\n+        cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n+            .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cxx))\n+            .define(\"CMAKE_ASM_COMPILER\", sanitize_cc(&cc));\n     }\n \n     cfg.build_arg(\"-j\").build_arg(builder.jobs().to_string());\n@@ -698,15 +698,15 @@ fn configure_cmake(\n         if ar.is_absolute() {\n             // LLVM build breaks if `CMAKE_AR` is a relative path, for some reason it\n             // tries to resolve this path in the LLVM build directory.\n-            cfg.define(\"CMAKE_AR\", sanitize_cc(ar));\n+            cfg.define(\"CMAKE_AR\", sanitize_cc(&ar));\n         }\n     }\n \n     if let Some(ranlib) = builder.ranlib(target) {\n         if ranlib.is_absolute() {\n             // LLVM build breaks if `CMAKE_RANLIB` is a relative path, for some reason it\n             // tries to resolve this path in the LLVM build directory.\n-            cfg.define(\"CMAKE_RANLIB\", sanitize_cc(ranlib));\n+            cfg.define(\"CMAKE_RANLIB\", sanitize_cc(&ranlib));\n         }\n     }\n "}, {"sha": "7eeac9025c9b7a5b5876183a0cc774926c4f62a6", "filename": "src/bootstrap/synthetic_targets.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fsynthetic_targets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Fsynthetic_targets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsynthetic_targets.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,82 @@\n+//! In some cases, parts of bootstrap need to change part of a target spec just for one or a few\n+//! steps. Adding these targets to rustc proper would \"leak\" this implementation detail of\n+//! bootstrap, and would make it more complex to apply additional changes if the need arises.\n+//!\n+//! To address that problem, this module implements support for \"synthetic targets\". Synthetic\n+//! targets are custom target specs generated using builtin target specs as their base. You can use\n+//! one of the target specs already defined in this module, or create new ones by adding a new step\n+//! that calls create_synthetic_target.\n+\n+use crate::builder::{Builder, ShouldRun, Step};\n+use crate::config::TargetSelection;\n+use crate::Compiler;\n+use std::process::{Command, Stdio};\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub(crate) struct MirOptPanicAbortSyntheticTarget {\n+    pub(crate) compiler: Compiler,\n+    pub(crate) base: TargetSelection,\n+}\n+\n+impl Step for MirOptPanicAbortSyntheticTarget {\n+    type Output = TargetSelection;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.never()\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        create_synthetic_target(builder, self.compiler, \"miropt-abort\", self.base, |spec| {\n+            spec.insert(\"panic-strategy\".into(), \"abort\".into());\n+        })\n+    }\n+}\n+\n+fn create_synthetic_target(\n+    builder: &Builder<'_>,\n+    compiler: Compiler,\n+    suffix: &str,\n+    base: TargetSelection,\n+    customize: impl FnOnce(&mut serde_json::Map<String, serde_json::Value>),\n+) -> TargetSelection {\n+    if base.contains(\"synthetic\") {\n+        // This check is not strictly needed, but nothing currently needs recursive synthetic\n+        // targets. If the need arises, removing this in the future *SHOULD* be safe.\n+        panic!(\"cannot create synthetic targets with other synthetic targets as their base\");\n+    }\n+\n+    let name = format!(\"{base}-synthetic-{suffix}\");\n+    let path = builder.out.join(\"synthetic-target-specs\").join(format!(\"{name}.json\"));\n+    std::fs::create_dir_all(path.parent().unwrap()).unwrap();\n+\n+    if builder.config.dry_run() {\n+        std::fs::write(&path, b\"dry run\\n\").unwrap();\n+        return TargetSelection::create_synthetic(&name, path.to_str().unwrap());\n+    }\n+\n+    let mut cmd = Command::new(builder.rustc(compiler));\n+    cmd.arg(\"--target\").arg(base.rustc_target_arg());\n+    cmd.args([\"-Zunstable-options\", \"--print\", \"target-spec-json\"]);\n+    cmd.stdout(Stdio::piped());\n+\n+    let output = cmd.spawn().unwrap().wait_with_output().unwrap();\n+    if !output.status.success() {\n+        panic!(\"failed to gather the target spec for {base}\");\n+    }\n+\n+    let mut spec: serde_json::Value = serde_json::from_slice(&output.stdout).unwrap();\n+    let spec_map = spec.as_object_mut().unwrap();\n+\n+    // The `is-builtin` attribute of a spec needs to be removed, otherwise rustc will complain.\n+    spec_map.remove(\"is-builtin\");\n+\n+    customize(spec_map);\n+\n+    std::fs::write(&path, &serde_json::to_vec_pretty(&spec).unwrap()).unwrap();\n+    let target = TargetSelection::create_synthetic(&name, path.to_str().unwrap());\n+    crate::cc_detect::find_target(builder, target);\n+\n+    target\n+}"}, {"sha": "13a10b0d3a506c45b05712d1de71dc258f4be750", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 104, "deletions": 4, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -23,13 +23,30 @@ use crate::doc::DocumentationFormat;\n use crate::flags::Subcommand;\n use crate::llvm;\n use crate::render_tests::add_flags_and_try_run_tests;\n+use crate::synthetic_targets::MirOptPanicAbortSyntheticTarget;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t, up_to_date};\n use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/local/tmp/work\";\n \n+// mir-opt tests have different variants depending on whether a target is 32bit or 64bit, and\n+// blessing them requires blessing with each target. To aid developers, when blessing the mir-opt\n+// test suite the corresponding target of the opposite pointer size is also blessed.\n+//\n+// This array serves as the known mappings between 32bit and 64bit targets. If you're developing on\n+// a target where a target with the opposite pointer size exists, feel free to add it here.\n+const MIR_OPT_BLESS_TARGET_MAPPING: &[(&str, &str)] = &[\n+    // (32bit, 64bit)\n+    (\"i686-unknown-linux-gnu\", \"x86_64-unknown-linux-gnu\"),\n+    (\"i686-unknown-linux-musl\", \"x86_64-unknown-linux-musl\"),\n+    (\"i686-pc-windows-msvc\", \"x86_64-pc-windows-msvc\"),\n+    (\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"),\n+    (\"i686-apple-darwin\", \"x86_64-apple-darwin\"),\n+    (\"i686-apple-darwin\", \"aarch64-apple-darwin\"),\n+];\n+\n fn try_run(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     if !builder.fail_fast {\n         if !builder.try_run(cmd) {\n@@ -1261,8 +1278,6 @@ default_test!(RunPassValgrind {\n     suite: \"run-pass-valgrind\"\n });\n \n-default_test!(MirOpt { path: \"tests/mir-opt\", mode: \"mir-opt\", suite: \"mir-opt\" });\n-\n default_test!(Codegen { path: \"tests/codegen\", mode: \"codegen\", suite: \"codegen\" });\n \n default_test!(CodegenUnits {\n@@ -1299,6 +1314,91 @@ host_test!(RunMakeFullDeps {\n \n default_test!(Assembly { path: \"tests/assembly\", mode: \"assembly\", suite: \"assembly\" });\n \n+// For the mir-opt suite we do not use macros, as we need custom behavior when blessing.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct MirOpt {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for MirOpt {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.suite_path(\"tests/mir-opt\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(MirOpt { compiler, target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let run = |target| {\n+            builder.ensure(Compiletest {\n+                compiler: self.compiler,\n+                target: target,\n+                mode: \"mir-opt\",\n+                suite: \"mir-opt\",\n+                path: \"tests/mir-opt\",\n+                compare_mode: None,\n+            })\n+        };\n+\n+        // We use custom logic to bless the mir-opt suite: mir-opt tests have multiple variants\n+        // (32bit vs 64bit, and panic=abort vs panic=unwind), and all of them needs to be blessed.\n+        // When blessing, we try best-effort to also bless the other variants, to aid developers.\n+        if builder.config.cmd.bless() {\n+            let targets = MIR_OPT_BLESS_TARGET_MAPPING\n+                .iter()\n+                .filter(|(target_32bit, target_64bit)| {\n+                    *target_32bit == &*self.target.triple || *target_64bit == &*self.target.triple\n+                })\n+                .next()\n+                .map(|(target_32bit, target_64bit)| {\n+                    let target_32bit = TargetSelection::from_user(target_32bit);\n+                    let target_64bit = TargetSelection::from_user(target_64bit);\n+\n+                    // Running compiletest requires a C compiler to be available, but it might not\n+                    // have been detected by bootstrap if the target we're testing wasn't in the\n+                    // --target flags.\n+                    if !builder.cc.borrow().contains_key(&target_32bit) {\n+                        crate::cc_detect::find_target(builder, target_32bit);\n+                    }\n+                    if !builder.cc.borrow().contains_key(&target_64bit) {\n+                        crate::cc_detect::find_target(builder, target_64bit);\n+                    }\n+\n+                    vec![target_32bit, target_64bit]\n+                })\n+                .unwrap_or_else(|| {\n+                    eprintln!(\n+                        \"\\\n+Note that not all variants of mir-opt tests are going to be blessed, as no mapping between\n+a 32bit and a 64bit target was found for {target}.\n+You can add that mapping by changing MIR_OPT_BLESS_TARGET_MAPPING in src/bootstrap/test.rs\",\n+                        target = self.target,\n+                    );\n+                    vec![self.target]\n+                });\n+\n+            for target in targets {\n+                run(target);\n+\n+                let panic_abort_target = builder.ensure(MirOptPanicAbortSyntheticTarget {\n+                    compiler: self.compiler,\n+                    base: target,\n+                });\n+                run(panic_abort_target);\n+            }\n+        } else {\n+            run(self.target);\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct Compiletest {\n     compiler: Compiler,\n@@ -1667,7 +1767,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         // Note that if we encounter `PATH` we make sure to append to our own `PATH`\n         // rather than stomp over it.\n         if target.contains(\"msvc\") {\n-            for &(ref k, ref v) in builder.cc[&target].env() {\n+            for &(ref k, ref v) in builder.cc.borrow()[&target].env() {\n                 if k != \"PATH\" {\n                     cmd.env(k, v);\n                 }\n@@ -1692,7 +1792,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--adb-path\").arg(\"adb\");\n         cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n-        if target.contains(\"android\") {\n+        if target.contains(\"android\") && !builder.config.dry_run() {\n             // Assume that cc for this target comes from the android sysroot\n             cmd.arg(\"--android-cross-path\")\n                 .arg(builder.cc(target).parent().unwrap().parent().unwrap());"}, {"sha": "96341b69df046bd29a8b27ebac9b5d702942349d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -855,7 +855,7 @@ impl<'a> Builder<'a> {\n         if compiler.host.contains(\"msvc\") {\n             let curpaths = env::var_os(\"PATH\").unwrap_or_default();\n             let curpaths = env::split_paths(&curpaths).collect::<Vec<_>>();\n-            for &(ref k, ref v) in self.cc[&compiler.host].env() {\n+            for &(ref k, ref v) in self.cc.borrow()[&compiler.host].env() {\n                 if k != \"PATH\" {\n                     continue;\n                 }"}, {"sha": "1b46c42fa4cf10533c2d1c5decf330f0859f5653", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -131,6 +131,15 @@ pub enum PanicStrategy {\n     Abort,\n }\n \n+impl PanicStrategy {\n+    pub(crate) fn for_miropt_test_tools(&self) -> miropt_test_tools::PanicStrategy {\n+        match self {\n+            PanicStrategy::Unwind => miropt_test_tools::PanicStrategy::Unwind,\n+            PanicStrategy::Abort => miropt_test_tools::PanicStrategy::Abort,\n+        }\n+    }\n+}\n+\n /// Configuration for compiletest\n #[derive(Debug, Default, Clone)]\n pub struct Config {\n@@ -572,7 +581,7 @@ pub struct TargetCfg {\n     #[serde(rename = \"target-endian\", default)]\n     endian: Endian,\n     #[serde(rename = \"panic-strategy\", default)]\n-    panic: PanicStrategy,\n+    pub(crate) panic: PanicStrategy,\n }\n \n impl TargetCfg {"}, {"sha": "7c6668b1c5ddfe80e0accc08952ce285fd401a46", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -3565,6 +3565,7 @@ impl<'test> TestCx<'test> {\n         let files = miropt_test_tools::files_for_miropt_test(\n             &self.testpaths.file,\n             self.config.get_pointer_width(),\n+            self.config.target_cfg().panic.for_miropt_test_tools(),\n         );\n \n         let mut out = Vec::new();\n@@ -3582,25 +3583,24 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn check_mir_dump(&self) {\n-        let test_file_contents = fs::read_to_string(&self.testpaths.file).unwrap();\n-\n         let test_dir = self.testpaths.file.parent().unwrap();\n         let test_crate =\n             self.testpaths.file.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n \n-        let mut bit_width = String::new();\n-        if test_file_contents.lines().any(|l| l == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\") {\n-            bit_width = format!(\".{}bit\", self.config.get_pointer_width());\n-        }\n+        let suffix = miropt_test_tools::output_file_suffix(\n+            &self.testpaths.file,\n+            self.config.get_pointer_width(),\n+            self.config.target_cfg().panic.for_miropt_test_tools(),\n+        );\n \n         if self.config.bless {\n             for e in\n-                glob(&format!(\"{}/{}.*{}.mir\", test_dir.display(), test_crate, bit_width)).unwrap()\n+                glob(&format!(\"{}/{}.*{}.mir\", test_dir.display(), test_crate, suffix)).unwrap()\n             {\n                 std::fs::remove_file(e.unwrap()).unwrap();\n             }\n             for e in\n-                glob(&format!(\"{}/{}.*{}.diff\", test_dir.display(), test_crate, bit_width)).unwrap()\n+                glob(&format!(\"{}/{}.*{}.diff\", test_dir.display(), test_crate, suffix)).unwrap()\n             {\n                 std::fs::remove_file(e.unwrap()).unwrap();\n             }\n@@ -3609,6 +3609,7 @@ impl<'test> TestCx<'test> {\n         let files = miropt_test_tools::files_for_miropt_test(\n             &self.testpaths.file,\n             self.config.get_pointer_width(),\n+            self.config.target_cfg().panic.for_miropt_test_tools(),\n         );\n         for miropt_test_tools::MiroptTestFiles { from_file, to_file, expected_file, passes: _ } in\n             files"}, {"sha": "e33ecfe8eab2408e7012ac248aa0e74152e0434d", "filename": "src/tools/miropt-test-tools/src/lib.rs", "status": "modified", "additions": 44, "deletions": 9, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,5 @@\n use std::fs;\n+use std::path::Path;\n \n pub struct MiroptTestFiles {\n     pub expected_file: std::path::PathBuf,\n@@ -8,18 +9,52 @@ pub struct MiroptTestFiles {\n     pub passes: Vec<String>,\n }\n \n-pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<MiroptTestFiles> {\n+pub enum PanicStrategy {\n+    Unwind,\n+    Abort,\n+}\n+\n+pub fn output_file_suffix(\n+    testfile: &Path,\n+    bit_width: u32,\n+    panic_strategy: PanicStrategy,\n+) -> String {\n+    let mut each_bit_width = false;\n+    let mut each_panic_strategy = false;\n+    for line in fs::read_to_string(testfile).unwrap().lines() {\n+        if line == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\" {\n+            each_bit_width = true;\n+        }\n+        if line == \"// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\" {\n+            each_panic_strategy = true;\n+        }\n+    }\n+\n+    let mut suffix = String::new();\n+    if each_bit_width {\n+        suffix.push_str(&format!(\".{}bit\", bit_width));\n+    }\n+    if each_panic_strategy {\n+        match panic_strategy {\n+            PanicStrategy::Unwind => suffix.push_str(\".panic-unwind\"),\n+            PanicStrategy::Abort => suffix.push_str(\".panic-abort\"),\n+        }\n+    }\n+    suffix\n+}\n+\n+pub fn files_for_miropt_test(\n+    testfile: &std::path::Path,\n+    bit_width: u32,\n+    panic_strategy: PanicStrategy,\n+) -> Vec<MiroptTestFiles> {\n     let mut out = Vec::new();\n     let test_file_contents = fs::read_to_string(&testfile).unwrap();\n \n     let test_dir = testfile.parent().unwrap();\n     let test_crate = testfile.file_stem().unwrap().to_str().unwrap().replace('-', \"_\");\n \n-    let bit_width = if test_file_contents.lines().any(|l| l == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\") {\n-        format!(\".{}bit\", bit_width)\n-    } else {\n-        String::new()\n-    };\n+    let suffix = output_file_suffix(testfile, bit_width, panic_strategy);\n \n     for l in test_file_contents.lines() {\n         if l.starts_with(\"// EMIT_MIR \") {\n@@ -37,7 +72,7 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n                 passes.push(trimmed.split('.').last().unwrap().to_owned());\n                 let test_against = format!(\"{}.after.mir\", trimmed);\n                 from_file = format!(\"{}.before.mir\", trimmed);\n-                expected_file = format!(\"{}{}.diff\", trimmed, bit_width);\n+                expected_file = format!(\"{}{}.diff\", trimmed, suffix);\n                 assert!(test_names.next().is_none(), \"two mir pass names specified for MIR diff\");\n                 to_file = Some(test_against);\n             } else if let Some(first_pass) = test_names.next() {\n@@ -51,7 +86,7 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n                 assert!(test_names.next().is_none(), \"three mir pass names specified for MIR diff\");\n \n                 expected_file =\n-                    format!(\"{}{}.{}-{}.diff\", test_name, bit_width, first_pass, second_pass);\n+                    format!(\"{}{}.{}-{}.diff\", test_name, suffix, first_pass, second_pass);\n                 let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n                 from_file = format!(\"{}.{}.mir\", test_name, first_pass);\n                 to_file = Some(second_file);\n@@ -64,7 +99,7 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n                 let extension = cap.get(1).unwrap().as_str();\n \n                 expected_file =\n-                    format!(\"{}{}{}\", test_name.trim_end_matches(extension), bit_width, extension,);\n+                    format!(\"{}{}{}\", test_name.trim_end_matches(extension), suffix, extension,);\n                 from_file = test_name.to_string();\n                 assert!(test_names.next().is_none(), \"two mir pass names specified for MIR dump\");\n                 to_file = None;"}, {"sha": "c307bcb93902da31aaf4b0e1c7f58dd0aa4d970b", "filename": "src/tools/tidy/src/mir_opt_tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,6 @@\n //! Tidy check to ensure that mir opt directories do not have stale files or dashes in file names\n \n+use miropt_test_tools::PanicStrategy;\n use std::collections::HashSet;\n use std::path::{Path, PathBuf};\n \n@@ -24,8 +25,10 @@ fn check_unused_files(path: &Path, bless: bool, bad: &mut bool) {\n \n     for file in rs_files {\n         for bw in [32, 64] {\n-            for output_file in miropt_test_tools::files_for_miropt_test(&file, bw) {\n-                output_files.remove(&output_file.expected_file);\n+            for ps in [PanicStrategy::Unwind, PanicStrategy::Abort] {\n+                for output_file in miropt_test_tools::files_for_miropt_test(&file, bw, ps) {\n+                    output_files.remove(&output_file.expected_file);\n+                }\n             }\n         }\n     }"}, {"sha": "6351d58f7d2aca23c62da074cb394f5cbd777d3a", "filename": "tests/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,64 @@\n+// MIR for `main` after SimplifyCfg-elaborate-drops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +0:11\n+    let mut _1: [u32; 3];                // in scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n+    let mut _4: &mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+    let mut _5: u32;                     // in scope 0 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n+    let _7: usize;                       // in scope 0 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n+    let mut _8: usize;                   // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+    let mut _9: bool;                    // in scope 0 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n+        let mut _2: usize;               // in scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n+            let _3: *mut usize;          // in scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+            scope 3 {\n+                debug z => _3;           // in scope 3 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+                scope 4 {\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+1:9: +1:14\n+        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at $DIR/array_index_is_temporary.rs:+1:17: +1:29\n+        StorageLive(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+2:9: +2:14\n+        _2 = const 1_usize;              // scope 1 at $DIR/array_index_is_temporary.rs:+2:17: +2:18\n+        StorageLive(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:9: +3:10\n+        StorageLive(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+        _4 = &mut _2;                    // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+        _3 = &raw mut (*_4);             // scope 2 at $DIR/array_index_is_temporary.rs:+3:25: +3:31\n+        StorageDead(_4);                 // scope 2 at $DIR/array_index_is_temporary.rs:+3:31: +3:32\n+        StorageLive(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:12: +4:29\n+        StorageLive(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n+        _6 = _3;                         // scope 4 at $DIR/array_index_is_temporary.rs:+4:25: +4:26\n+        _5 = foo(move _6) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/array_index_is_temporary.rs:+4:21: +4:27\n+                                         // mir::Constant\n+                                         // + span: $DIR/array_index_is_temporary.rs:17:21: 17:24\n+                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_6);                 // scope 4 at $DIR/array_index_is_temporary.rs:+4:26: +4:27\n+        StorageLive(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n+        _7 = _2;                         // scope 3 at $DIR/array_index_is_temporary.rs:+4:7: +4:8\n+        _8 = Len(_1);                    // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+        _9 = Lt(_7, _8);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> [success: bb2, unwind unreachable]; // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:9\n+    }\n+\n+    bb2: {\n+        _1[_7] = move _5;                // scope 3 at $DIR/array_index_is_temporary.rs:+4:5: +4:29\n+        StorageDead(_5);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:28: +4:29\n+        StorageDead(_7);                 // scope 3 at $DIR/array_index_is_temporary.rs:+4:29: +4:30\n+        _0 = const ();                   // scope 0 at $DIR/array_index_is_temporary.rs:+0:11: +5:2\n+        StorageDead(_3);                 // scope 2 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n+        StorageDead(_2);                 // scope 1 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n+        StorageDead(_1);                 // scope 0 at $DIR/array_index_is_temporary.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/array_index_is_temporary.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "4be382fac8c32cf671c6fb99cdc4cd5d99773ab1", "filename": "tests/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "950429fb6bca441104204e188c92564ecc0cc94b", "filename": "tests/mir-opt/array_index_is_temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Farray_index_is_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Farray_index_is_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Farray_index_is_temporary.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Retagging (from Stacked Borrows) relies on the array index being a fresh\n // temporary, so that side-effects cannot change it.\n // Test that this is indeed the case."}, {"sha": "2c0a3af73027e50a0b401b0744a46faa09128752", "filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.panic-abort.mir", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,80 @@\n+// MIR for `main` before ElaborateDrops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:+0:11: +0:11\n+    let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n+    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:+3:5: +3:12\n+    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+3:10: +3:11\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:+1:9: +1:10\n+    }\n+    scope 2 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n+        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n+        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> [return: bb1, unwind: bb9]; // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:8:5: 8:23\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:+2:14: +2:22\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:8:14: 8:20\n+                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+        drop(_5) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n+        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n+        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n+        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:9:5: 9:9\n+                                         // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(<ZST>) }\n+    }\n+\n+    bb4: {\n+        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n+        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:+3:12: +3:13\n+        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:+0:11: +4:2\n+        drop(_1) -> [return: bb5, unwind: bb9]; // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+    }\n+\n+    bb5: {\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:+4:2: +4:2\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_7) -> [return: bb7, unwind terminate]; // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_1) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+    }\n+\n+    bb8 (cleanup): {\n+        drop(_5) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+    }\n+\n+    bb9 (cleanup): {\n+        resume;                          // scope 0 at $DIR/box_expr.rs:+0:1: +4:2\n+    }\n+}"}, {"sha": "bac5b21dfad1fb6406474e1634c45c893e574527", "filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.mir"}, {"sha": "780420bda9fcae682828b3dfc4c1b9887856aa0e", "filename": "tests/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n #![feature(rustc_attrs, stmt_expr_attributes)]\n "}, {"sha": "33dd4a902650666c14dfada13b0c125061e23d72", "filename": "tests/mir-opt/combine_array_len.norm2.InstSimplify.panic-abort.diff", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,77 @@\n+- // MIR for `norm2` before InstSimplify\n++ // MIR for `norm2` after InstSimplify\n+  \n+  fn norm2(_1: [f32; 2]) -> f32 {\n+      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:+0:26: +0:29\n+      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n+      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:+2:15: +2:16\n+      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n+      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:+2:13: +2:17\n+      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:8\n+      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:5: +3:6\n+      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:7: +3:8\n+      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:14\n+      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:11: +3:12\n+      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:+3:13: +3:14\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:+1:9: +1:10\n+          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:+2:9: +2:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_array_len.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+          _3 = const 0_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:15: +1:16\n+-         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n++         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+      }\n+  \n+      bb1: {\n+          _2 = _1[_3];                     // scope 0 at $DIR/combine_array_len.rs:+1:13: +1:17\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_array_len.rs:+1:17: +1:18\n+          StorageLive(_6);                 // scope 1 at $DIR/combine_array_len.rs:+2:9: +2:10\n+          StorageLive(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n+          _7 = const 1_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:15: +2:16\n+-         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n++         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+      }\n+  \n+      bb2: {\n+          _6 = _1[_7];                     // scope 1 at $DIR/combine_array_len.rs:+2:13: +2:17\n+          StorageDead(_7);                 // scope 1 at $DIR/combine_array_len.rs:+2:17: +2:18\n+          StorageLive(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n+          StorageLive(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n+          _11 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:6\n+          StorageLive(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          _12 = _2;                        // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          _10 = Mul(move _11, move _12);   // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:8\n+          StorageDead(_12);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          StorageDead(_11);                // scope 2 at $DIR/combine_array_len.rs:+3:7: +3:8\n+          StorageLive(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n+          StorageLive(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n+          _14 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:12\n+          StorageLive(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _15 = _6;                        // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _13 = Mul(move _14, move _15);   // scope 2 at $DIR/combine_array_len.rs:+3:11: +3:14\n+          StorageDead(_15);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_14);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          _0 = Add(move _10, move _13);    // scope 2 at $DIR/combine_array_len.rs:+3:5: +3:14\n+          StorageDead(_13);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_10);                // scope 2 at $DIR/combine_array_len.rs:+3:13: +3:14\n+          StorageDead(_6);                 // scope 1 at $DIR/combine_array_len.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_array_len.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/combine_array_len.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "0777007cefa687c26657e946c9ae927685d628d7", "filename": "tests/mir-opt/combine_array_len.norm2.InstSimplify.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/combine_array_len.norm2.InstSimplify.diff"}, {"sha": "e971ab4781eee5de924c484373748e8ed6d3e7d7", "filename": "tests/mir-opt/combine_array_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: InstSimplify\n // EMIT_MIR combine_array_len.norm2.InstSimplify.diff\n "}, {"sha": "c19f9ee105ffe05e84f2f939616145447ab62d32", "filename": "tests/mir-opt/combine_clone_of_primitives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: InstSimplify\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n // EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstSimplify.diff\n "}, {"sha": "6ca960935ba57794e4bab33b725ac77898142f69", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstSimplify.panic-abort.diff", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,74 @@\n+- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` before InstSimplify\n++ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstSimplify\n+  \n+  fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n+      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+      let mut _2: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _3: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let _4: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _6: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let _7: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _8: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let mut _9: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let _10: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _4 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+-         _3 = &(*_4);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n++         _3 = _4;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _2 = <T as Clone>::clone(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+                                           // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:8: 8:9\n+          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          _7 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _6 = &(*_7);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-                                          // + literal: Const { ty: for<'a> fn(&'a u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n++         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      }\n+  \n+      bb2: {\n+          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:10: 9:11\n+          StorageLive(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          _10 = &((*_1).2: [f32; 3]);      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _9 = &(*_10);                    // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-                                          // + literal: Const { ty: for<'a> fn(&'a [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n++         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      }\n+  \n+      bb3: {\n+          StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n+          _0 = MyThing::<T> { v: move _2, i: move _5, a: move _8 }; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n+          StorageDead(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          StorageDead(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:15: +0:15\n+      }\n+  }\n+  "}, {"sha": "bb0811a7abb2d146f6d2c25aa9601f2656e63d8e", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstSimplify.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstSimplify.diff"}, {"sha": "6ac460db86f8114e9e8c3ae6c0e18edfe36064e2", "filename": "tests/mir-opt/const_prop/aggregate.foo.ConstProp.panic-abort.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/aggregate.foo.ConstProp.diff"}, {"sha": "6ac460db86f8114e9e8c3ae6c0e18edfe36064e2", "filename": "tests/mir-opt/const_prop/aggregate.foo.ConstProp.panic-unwind.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `foo` before ConstProp\n++ // MIR for `foo` after ConstProp\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n+      let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+      let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+      let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+      let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n+      let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n+      let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+      scope 1 {\n+          debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n+          let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          scope 2 {\n+              debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+          StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+          StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+          _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+          _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+          StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n+-         _3 = (_4.0: i32);                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+-         _2 = Add(move _3, const 1_i32);  // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n++         _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n++         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n+          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n+          StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n+          StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+          StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+          StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+          StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+          _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+          _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+          StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n+-         _7 = (_8.1: i32);                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+-         _6 = Add(move _7, const 2_i32);  // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n++         _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n++         _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n+          StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n+          StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n+          StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "2ef6d74e52846abc966636764c231d6284b16110", "filename": "tests/mir-opt/const_prop/aggregate.foo.PreCodegen.after.panic-abort.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/aggregate.foo.PreCodegen.after.mir"}, {"sha": "2ef6d74e52846abc966636764c231d6284b16110", "filename": "tests/mir-opt/const_prop/aggregate.foo.PreCodegen.after.panic-unwind.mir", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.foo.PreCodegen.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,49 @@\n+// MIR for `foo` after PreCodegen\n+\n+fn foo(_1: u8) -> () {\n+    debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9\n+    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15\n+    let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+    let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+    let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+    let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26\n+    let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24\n+    let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20\n+    scope 1 {\n+        debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14\n+        let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        scope 2 {\n+            debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14\n+        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+        StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+        _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22\n+        _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23\n+        StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23\n+        _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25\n+        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29\n+        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29\n+        StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30\n+        StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15\n+        StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+        StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+        StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+        _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20\n+        _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24\n+        StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24\n+        _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26\n+        _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30\n+        StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30\n+        StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31\n+        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2\n+        StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "130c0a8d38c8664066377ca9b8b7f52ffed0dccf", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.panic-abort.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+      let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+      let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n+      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+          _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+-         _2 = (_3.1: u8);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+-         _1 = Add(move _2, const 0_u8);   // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n++         _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n++         _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n+          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n+          StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+          StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+-         _5 = _1;                         // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n++         _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+          _4 = foo(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+                                           // mir::Constant\n+                                           // + span: $DIR/aggregate.rs:9:5: 9:8\n+                                           // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n+          StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n+          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "0411972661eb745648a5bf42f499beb97909f4d0", "filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/aggregate.main.ConstProp.diff"}, {"sha": "06243db8b7e80d218219ac1e475bd12cccb17bde", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.panic-abort.mir", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,39 @@\n+// MIR for `main` after PreCodegen\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n+    let _1: u8;                          // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+    let mut _2: u8;                      // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+    let mut _3: (i32, u8, i32);          // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+    let _4: ();                          // in scope 0 at $DIR/aggregate.rs:+2:5: +2:11\n+    let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:9: +2:10\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        _3 = (const 0_i32, const 1_u8, const 2_i32); // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        _2 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+        _1 = const 1_u8;                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n+        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n+        StorageLive(_4);                 // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+        StorageLive(_5);                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+        _5 = const 1_u8;                 // scope 1 at $DIR/aggregate.rs:+2:9: +2:10\n+        _4 = foo(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/aggregate.rs:+2:5: +2:11\n+                                         // mir::Constant\n+                                         // + span: $DIR/aggregate.rs:9:5: 9:8\n+                                         // + literal: Const { ty: fn(u8) {foo}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_5);                 // scope 1 at $DIR/aggregate.rs:+2:10: +2:11\n+        StorageDead(_4);                 // scope 1 at $DIR/aggregate.rs:+2:11: +2:12\n+        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+3:1: +3:2\n+        return;                          // scope 0 at $DIR/aggregate.rs:+3:2: +3:2\n+    }\n+}"}, {"sha": "05d4bf8b52e79ddf15301f48345f31defb8c854c", "filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/aggregate.main.PreCodegen.after.mir"}, {"sha": "62cd3dd688982ea0b5e91c67832297771a7a555c", "filename": "tests/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -O\n "}, {"sha": "0859a1671da8be6f23296350f50da52cdda35c8b", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.32bit.panic-abort.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+-         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "439b2a3e16b458fde72d7328c8436f8e48f9fdc9", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.32bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.32bit.diff"}, {"sha": "0859a1671da8be6f23296350f50da52cdda35c8b", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.64bit.panic-abort.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/array_index.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          _2 = [const 0_u32, const 1_u32, const 2_u32, const 3_u32]; // scope 0 at $DIR/array_index.rs:+1:18: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+          _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:+1:31: +1:32\n+-         _4 = Len(_2);                    // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _5 = const true;                 // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/array_index.rs:+1:18: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/array_index.rs:+1:33: +1:34\n+          _0 = const ();                   // scope 0 at $DIR/array_index.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/array_index.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/array_index.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "439b2a3e16b458fde72d7328c8436f8e48f9fdc9", "filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.64bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.64bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/array_index.main.ConstProp.64bit.diff"}, {"sha": "f85d23b9789ebf5712b2f0c7734d6c63b5cca3ff", "filename": "tests/mir-opt/const_prop/array_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n "}, {"sha": "5ec96b440b9c5763a2602815203a7985698174a2", "filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.panic-abort.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:9: +1:10\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_div_by_zero.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:9: +2:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb1: {\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb2: {\n+          _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:14: +2:19\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+2:18: +2:19\n+          _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/bad_op_div_by_zero.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "900061a484b3884b85d103d4c532b93ba6ac05d5", "filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.diff"}, {"sha": "963084bf7e5bf037e1ddc3f1156e1de80b190514", "filename": "tests/mir-opt/const_prop/bad_op_div_by_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // EMIT_MIR bad_op_div_by_zero.main.ConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "fa9a2a09ba3d771124f962898774773ed41af2d0", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.panic-abort.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+      let mut _4: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _5: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _6: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _z => _2;              // in scope 2 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n+          _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n++         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> [success: bb1, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb1: {\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> [success: bb2, unwind unreachable]; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+      }\n+  \n+      bb2: {\n+          _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+          _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "85d6b5e3d003e76a558443037e77b7506435cf94", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff"}, {"sha": "9d7d2aa10443e1882b404e7ad66501b418923d74", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: ConstProp\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // EMIT_MIR bad_op_mod_by_zero.main.ConstProp.diff\n #[allow(unconditional_panic)]\n fn main() {"}, {"sha": "ebe38a8f29403db7e0e1ab883c43748aff3b65fe", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,57 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n+      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          scope 2 {\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              scope 3 {\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      }\n+  \n+      bb1: {\n+-         _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _5 = (*_1)[3 of 4];              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "d72675c2d1157b228810e8ab487e6112554236f8", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff"}, {"sha": "ebe38a8f29403db7e0e1ab883c43748aff3b65fe", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,57 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+0:11: +0:11\n+      let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+      let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          scope 2 {\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              scope 3 {\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+                                           // mir::Constant\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      }\n+  \n+      bb1: {\n+-         _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _5 = (*_1)[3 of 4];              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "d72675c2d1157b228810e8ab487e6112554236f8", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff"}, {"sha": "7931c4f02ae6795ca4ba11525d518951799c122d", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: ConstProp\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // compile-flags: -Zmir-enable-passes=+NormalizeArrayLen\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH"}, {"sha": "2cc0b98acfdfc482c35752f1a45b17f6b8f32890", "filename": "tests/mir-opt/const_prop/boxes.main.ConstProp.panic-abort.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+-         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n+-         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n++         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n++         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n+          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/boxes.rs:13:14: 14:18\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n+          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n+          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+2:17: +2:18\n+          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +3:12\n+          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+3:11: +3:12\n+          drop(_3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n+      }\n+  \n+      bb2: {\n+          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n+          _0 = const ();                   // scope 0 at $DIR/boxes.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/boxes.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "b0e86e7537f13ddd9f274d038beeaf9d7cb07c8b", "filename": "tests/mir-opt/const_prop/boxes.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/boxes.main.ConstProp.diff"}, {"sha": "9407759cb127b30d8dd10d5c5aba6de8f14f4c64", "filename": "tests/mir-opt/const_prop/boxes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboxes.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,7 +1,7 @@\n // unit-test: ConstProp\n // compile-flags: -O\n // ignore-emscripten compiled with panic=abort by default\n-// ignore-wasm32\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // ignore-wasm64\n \n #![feature(rustc_attrs, stmt_expr_attributes)]"}, {"sha": "ba318d8eb35c13ca560f93d4052bdd18420fc249", "filename": "tests/mir-opt/const_prop/checked_add.main.ConstProp.panic-abort.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n+      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:+1:9: +1:10\n+-         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_2.0: u32);           // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n++         _1 = const 2_u32;                // scope 0 at $DIR/checked_add.rs:+1:18: +1:23\n+          _0 = const ();                   // scope 0 at $DIR/checked_add.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/checked_add.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/checked_add.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "96d0d25664a41d15d7aa54c8a942626c08b476fe", "filename": "tests/mir-opt/const_prop/checked_add.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/checked_add.main.ConstProp.diff"}, {"sha": "fd40876cbc221e31231adab6a848fb71f4dfa764", "filename": "tests/mir-opt/const_prop/checked_add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "1999a128c63bf5c6d25be3986e31513b49601bd9", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.panic-abort.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +0:11\n+      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n+      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n+          StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:9:13: 9:16\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n+          StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:38: +2:39\n+          StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:39: +2:40\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+          StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+          _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:10: +3:11\n+          _4 = read(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:5: +3:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:10:5: 10:9\n+                                           // + literal: Const { ty: fn(usize) {read}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:11: +3:12\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:+3:12: +3:13\n+          _0 = const ();                   // scope 0 at $DIR/const_prop_fails_gracefully.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/const_prop_fails_gracefully.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "d75fae30b5386395f8a725b6256b3cc19cb094d6", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff"}, {"sha": "c92831f926d3c402fee5ad811f015ed1b1216f07", "filename": "tests/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n #[inline(never)]\n fn read(_: usize) { }"}, {"sha": "0ed292674338fe62b046d0a61e403b9f5d41534e", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.panic-abort.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `hello` before ConstProp\n++ // MIR for `hello` after ConstProp\n+  \n+  fn hello() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n+      let mut _1: bool;                    // in scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+          _1 = const _;                    // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+-         switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n++         switchInt(const false) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/control_flow_simplification.rs:+1:8: +1:21\n+      }\n+  \n+      bb1: {\n+          _2 = begin_panic::<&str>(const \"explicit panic\") -> unwind unreachable; // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n+                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_1);                 // scope 0 at $DIR/control_flow_simplification.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "7e77c18d5758ee8c5930c1c07c4e16f9245e69aa", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff"}, {"sha": "9f7528f0ce170e3b547c45c7845377b4dadcea2f", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.panic-abort.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.mir"}, {"sha": "9f7528f0ce170e3b547c45c7845377b4dadcea2f", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.panic-unwind.mir", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,9 @@\n+// MIR for `hello` before PreCodegen\n+\n+fn hello() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/control_flow_simplification.rs:+0:14: +0:14\n+\n+    bb0: {\n+        return;                          // scope 0 at $DIR/control_flow_simplification.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "21d727b3e50d931c143560a42f6e86bc8af9584e", "filename": "tests/mir-opt/const_prop/control_flow_simplification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -Zmir-opt-level=1\n "}, {"sha": "a58d29d2fe17b93301c94ee8a1dbf6cd3c449bf3", "filename": "tests/mir-opt/const_prop/indirect.main.ConstProp.panic-abort.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:+1:9: +1:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _2 = const 2_u32 as u8 (IntToInt); // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n++         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n++         _1 = const 3_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n+          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:+1:28: +1:29\n+          _0 = const ();                   // scope 0 at $DIR/indirect.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/indirect.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "f4c0c5c5e7fb0b9388988e68e5c18b46f5adcdf7", "filename": "tests/mir-opt/const_prop/indirect.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/indirect.main.ConstProp.diff"}, {"sha": "72af6cd95b8db1c8feab3989bbd50bde5302dbc4", "filename": "tests/mir-opt/const_prop/indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Findirect.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "951de4c3e33ca46e409b5e200d74259c793c31ce", "filename": "tests/mir-opt/const_prop/inherit_overflow.main.ConstProp.panic-abort.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n+      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      scope 1 {\n+      }\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n+          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+-         _4 = CheckedAdd(_2, _3);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+-         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n++         _4 = const (0_u8, true);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_4.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n++         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n+          _0 = const ();                   // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n+          return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "0ac7fa43d5b45c8c8156790d54d5d8399fd26a5f", "filename": "tests/mir-opt/const_prop/inherit_overflow.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/inherit_overflow.main.ConstProp.diff"}, {"sha": "6ebd364121ab7f1d194a4f9a459161d548b31472", "filename": "tests/mir-opt/const_prop/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finherit_overflow.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -Zmir-enable-passes=+Inline\n "}, {"sha": "061fd39e8b07e0ac32f42a4ef076c068f5d29741", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.panic-abort.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n+      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          _2 = (const (), const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n+          _1 = encode(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_66971.rs:18:5: 18:11\n+                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:22: +1:23\n+          return;                          // scope 0 at $DIR/issue_66971.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "2652694097c4f2847fbf5171bebaf5f61403b09f", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.diff"}, {"sha": "a0242ec633f9e3bed979cafd6f6f8f6c9a94c2d2", "filename": "tests/mir-opt/const_prop/issue_66971.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -Z mir-opt-level=3\n "}, {"sha": "99844045bb5e733040ea6cb70d141c22f38d15a6", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.panic-abort.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_67019.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n+      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+-         _3 = (const 1_u8, const 2_u8);   // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n++         _3 = const (1_u8, 2_u8);         // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n+          _2 = (move _3,);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:18: +1:19\n+          _1 = test(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_67019.rs:13:5: 13:9\n+                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:19: +1:20\n+          return;                          // scope 0 at $DIR/issue_67019.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "54c9200d6721e194c935e22b5e1a345af0c809dd", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.diff"}, {"sha": "66b577f5b5f802385cbe3a816a3ac91d38a1a2f9", "filename": "tests/mir-opt/const_prop/issue_67019.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -Z mir-opt-level=3\n "}, {"sha": "6794cfd81df12d7160ccd0bf513f1f82cfaa3d8d", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.panic-abort.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+-         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _1 = _2[2 of 3];                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "33bbad2f422ba0ebddd14dbe28e6c97f7575c303", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.diff"}, {"sha": "6794cfd81df12d7160ccd0bf513f1f82cfaa3d8d", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.panic-abort.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/large_array_index.rs:+0:11: +0:11\n+      let _1: u8;                          // in scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+      let mut _2: [u8; 5000];              // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+      let _3: usize;                       // in scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+      let mut _4: usize;                   // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      let mut _5: bool;                    // in scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/large_array_index.rs:+2:9: +2:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/large_array_index.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n+          StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+          _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n+-         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _1 = _2[2 of 3];                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+          StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "33bbad2f422ba0ebddd14dbe28e6c97f7575c303", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.diff"}, {"sha": "6c03fe9d9c2f7a1782a0d45650a5dffcf2ef5b3f", "filename": "tests/mir-opt/const_prop/large_array_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: ConstProp\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // compile-flags: -Zmir-enable-passes=+NormalizeArrayLen\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n "}, {"sha": "b9da74e30b094ee3f0de83cb2b31fbf9d118b5d7", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +0:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n+          _1 = foo() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n+                                           // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+2:5: +2:13\n+          (_1.0: i32) = const 42_i32;      // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+3:5: +3:13\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n+-         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "374151057acdab36c74c43feeffb0269aedd0952", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff"}, {"sha": "30ea5714ae49aed4b7d802d2165fa706d4818b3e", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_aggregate_partial_read.main.ConstProp.diff"}, {"sha": "b090dfc92b64d8e7966414cc60ccc41111190b39", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.panic-abort.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          scope 2 {\n+              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              scope 3 {\n+                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  scope 4 {\n+                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n+          _1 = foo() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n+                                           // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+-         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n++         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+-         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n++         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "3048122d8fff752dad09c88fef9dc0cd6ae3e880", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff"}, {"sha": "4e7c0597a29f3b9956608e5dbc925c660c2cdd71", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_unprop_assign.main.ConstProp.diff"}, {"sha": "24c78ab992f15ea48b66eab8e75fb9e606f15c9e", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.32bit.panic-abort.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+-         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      }\n+  \n+      bb1: {\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "6641220db69665f6dde54637c8d1c9761c38a877", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.32bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.32bit.diff"}, {"sha": "24c78ab992f15ea48b66eab8e75fb9e606f15c9e", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.64bit.panic-abort.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/repeat.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+          StorageLive(_3);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n+          StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+          _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n+-         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+      }\n+  \n+      bb1: {\n+-         _2 = _3[_4];                     // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _1 = Add(move _2, const 0_u32);  // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n++         _2 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _1 = const 42_u32;               // scope 0 at $DIR/repeat.rs:+1:18: +1:32\n+          StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n+          StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "6641220db69665f6dde54637c8d1c9761c38a877", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.64bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.64bit.diff"}, {"sha": "21dba84af375c4824f8ada2964771df2f19f9d14", "filename": "tests/mir-opt/const_prop/repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: ConstProp\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // compile-flags: -Zmir-enable-passes=+NormalizeArrayLen\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n "}, {"sha": "e0daf107522d48d0b40d71c4c808a4cf995271b7", "filename": "tests/mir-opt/const_prop/return_place.add.ConstProp.panic-abort.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `add` before ConstProp\n++ // MIR for `add` after ConstProp\n+  \n+  fn add() -> u32 {\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n+      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+  \n+      bb0: {\n+-         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+      }\n+  \n+      bb1: {\n+-         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n++         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+          return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "5ebd8a52079d7e4e7377e7024c218636d6e38c88", "filename": "tests/mir-opt/const_prop/return_place.add.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/return_place.add.ConstProp.diff"}, {"sha": "58b2acfbad2a1de0ebc505e6f0dc41af11b9aa27", "filename": "tests/mir-opt/const_prop/return_place.add.PreCodegen.before.panic-abort.mir", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,16 @@\n+// MIR for `add` before PreCodegen\n+\n+fn add() -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n+    let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+\n+    bb0: {\n+        _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+    }\n+\n+    bb1: {\n+        _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "b12d84fa4790ab02059b01692cdfc246b83efc29", "filename": "tests/mir-opt/const_prop/return_place.add.PreCodegen.before.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/return_place.add.PreCodegen.before.mir"}, {"sha": "0576b02a845626ec7a53264f4e575c7fe08322ab", "filename": "tests/mir-opt/const_prop/return_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: ConstProp\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // compile-flags: -C overflow-checks=on\n \n // EMIT_MIR return_place.add.ConstProp.diff"}, {"sha": "11bbe9da10f87c25133a199319740db6c8c16b8d", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.panic-abort.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+      let _2: ();                          // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+      let mut _3: u32;                     // in scope 0 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n+          _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n++         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+          _2 = consume(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/scalar_literal_propagation.rs:6:5: 6:12\n+                                           // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n+          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n+          _0 = const ();                   // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "c2f97a0f62219768d6295a1c01da1979698d4d78", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff"}, {"sha": "dfe41e6145bdd433eab3a89d47aa4fa589bf58de", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: ConstProp\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // EMIT_MIR scalar_literal_propagation.main.ConstProp.diff\n fn main() {\n     let x = 1;"}, {"sha": "cd8ee121a25714c16bcf678c64ad38d28b2173bf", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.panic-abort.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8bd2b48d6d6af884ea4a167ffdc9834a62ee1120", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff"}, {"sha": "cd8ee121a25714c16bcf678c64ad38d28b2173bf", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.panic-abort.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:+1:7: +1:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:8:6: 8:19\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb1, unwind unreachable]; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+      }\n+  \n+      bb1: {\n+-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8bd2b48d6d6af884ea4a167ffdc9834a62ee1120", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff"}, {"sha": "e91724536f91897cbb647461e5fcb7c74a5cca1c", "filename": "tests/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: ConstProp\n // compile-flags: -Zmir-enable-passes=+InstSimplify\n // EMIT_MIR_FOR_EACH_BIT_WIDTH"}, {"sha": "e334faa15cb91839360a6769e9a7ac972b1145b0", "filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.panic-abort.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+-         switchInt(_1) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n++         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+      }\n+  \n+      bb1: {\n+          _0 = foo(const -1_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          _0 = foo(const 0_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "664b7839ffc28fb5bbde0633c424cd16ea54cb7f", "filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.diff"}, {"sha": "865dd488f001f4cac7583251ab9bfb430aaabe44", "filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `main` before SimplifyConstCondition-after-const-prop\n++ // MIR for `main` after SimplifyConstCondition-after-const-prop\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:+1:11: +1:12\n+-         switchInt(const 1_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n++         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:+1:5: +1:12\n+      }\n+  \n+      bb1: {\n+          _0 = foo(const -1_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          _0 = foo(const 0_i32) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/switch_int.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "ef2c4d5faa613e068bb0d28a828af36bb2580b1d", "filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff"}, {"sha": "bf708c8298e16eecf5926a124ff90e484f834907", "filename": "tests/mir-opt/const_prop/switch_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,6 @@\n // unit-test: ConstProp\n // compile-flags: -Zmir-enable-passes=+SimplifyConstCondition-after-const-prop\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n #[inline(never)]\n fn foo(_: i32) { }\n "}, {"sha": "f9ae4da800b0e919d4f25d227cb0d0948bb1fc66", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.panic-abort.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +0:11\n+      let _1: (u32, u32);                  // in scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+      let mut _3: (u32, u32);              // in scope 0 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n+-         _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n++         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n+          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+-         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n++         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+          _2 = consume(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/tuple_literal_propagation.rs:7:5: 7:12\n+                                           // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n+          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n+          _0 = const ();                   // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "e4a7c0d1e72044bac22b311438f8badd47d3ffb8", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff"}, {"sha": "5890a343f26c3caa63dc6df2ee74717a75f70ea9", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // unit-test: ConstProp\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // EMIT_MIR tuple_literal_propagation.main.ConstProp.diff\n fn main() {\n     let x = (1, 2);"}, {"sha": "00d22c9313e610639f48bc682bb4c0a447c00d4e", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.panic-abort.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/borrowed_local.rs:+0:11: +0:15\n+      let mut _1: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _2: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          _1 = const 5_u8;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _2 = &_1;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _3 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _4 = &_3;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _0 = cmp_ref(_2, _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/borrowed_local.rs:+8:13: +8:45\n+                                           // mir::Constant\n+                                           // + span: $DIR/borrowed_local.rs:24:29: 24:36\n+                                           // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> bool {cmp_ref}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _0 = opaque::<u8>(_3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n+                                           // mir::Constant\n+                                           // + span: $DIR/borrowed_local.rs:28:28: 28:34\n+                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/borrowed_local.rs:+15:13: +15:21\n+      }\n+  }\n+  "}, {"sha": "51707e71661c5e7b872d78b2e4b2a450583ae3da", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.diff"}, {"sha": "a89b64441d0c8e815f13638851194bc2d06f9ec6", "filename": "tests/mir-opt/copy-prop/borrowed_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "e52005cd457fde3268b957dc0f36243c6a4a5540", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.panic-abort.diff", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,65 @@\n+- // MIR for `foo` before CopyProp\n++ // MIR for `foo` after CopyProp\n+  \n+  fn foo() -> i32 {\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n+      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n+      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n+          _1 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/branch.rs:+1:13: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:14:13: 14:16\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          _3 = cond() -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:16:16: 16:20\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+      }\n+  \n+      bb3: {\n+          _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+          _4 = val() -> [return: bb5, unwind unreachable]; // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:19:9: 19:12\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n+          _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n+          _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n+          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n+          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+      }\n+  }\n+  "}, {"sha": "b78c19d78d045b295f9fd519a0f2fca536b14aa6", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.diff"}, {"sha": "c8af1aa7bf9f72f68207d539ce37f31357411456", "filename": "tests/mir-opt/copy-prop/branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n //! Tests that we bail out when there are multiple assignments to the same local.\n // unit-test: CopyProp\n fn val() -> i32 {"}, {"sha": "1c7b6494d6dcc1e4d88a509f8e58a6eeca1258cb", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.panic-abort.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.diff"}, {"sha": "1c7b6494d6dcc1e4d88a509f8e58a6eeca1258cb", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.panic-unwind.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `arg_src` before CopyProp\n++ // MIR for `arg_src` after CopyProp\n+  \n+  fn arg_src(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n+      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n++         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n++         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n+-         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "3c494af01c0a5aae28bc81702a6a5979305233c2", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.panic-abort.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `bar` before CopyProp\n++ // MIR for `bar` after CopyProp\n+  \n+  fn bar(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _2 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "24bca32207fa91031526f943c094aa5fe62aa3ec", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.diff"}, {"sha": "7ab6ebb7d53e00d3f41a1eacc7d7e92e07a1736d", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.baz.CopyProp.panic-abort.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/copy_propagation_arg.baz.CopyProp.diff"}, {"sha": "7ab6ebb7d53e00d3f41a1eacc7d7e92e07a1736d", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.baz.CopyProp.panic-unwind.diff", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,18 @@\n+- // MIR for `baz` before CopyProp\n++ // MIR for `baz` after CopyProp\n+  \n+  fn baz(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:23: +0:26\n+      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "5845be331a5e382beea2654270cbefe04f5698d5", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.panic-abort.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `foo` before CopyProp\n++ // MIR for `foo` after CopyProp\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _2 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "87708f340054383a3e484c3b94ca3eeeaefaa162", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.diff"}, {"sha": "671860da50d251109f85a865da8d955566dd9c9f", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Check that CopyProp does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n // unit-test: CopyProp"}, {"sha": "ab136769085257b7e195e8f8a360636129010cba", "filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.panic-abort.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: NotCopy) -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/custom_move_arg.rs:+0:19: +0:19\n+      let mut _2: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+-         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<NotCopy>(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n++         _0 = opaque::<NotCopy>(_1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n+                                           // mir::Constant\n+                                           // + span: $DIR/custom_move_arg.rs:16:24: 16:30\n+                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<NotCopy>(_3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n++         _0 = opaque::<NotCopy>(_1) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n+                                           // mir::Constant\n+                                           // + span: $DIR/custom_move_arg.rs:20:24: 20:30\n+                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/custom_move_arg.rs:+10:9: +10:17\n+      }\n+  }\n+  "}, {"sha": "160f47bdd8f7eb62e71f1f696a8b94c1aeea7c70", "filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.diff"}, {"sha": "a90db08fa517ab9fa8277fbf7a4f2fcce9f47eb8", "filename": "tests/mir-opt/copy-prop/custom_move_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "37158af7648c38a1f7fce046eeacf57dc9362563", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.panic-abort.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `main` before CopyProp\n++ // MIR for `main` after CopyProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:+4:9: +4:10\n+      let _5: ();                          // in scope 0 at $DIR/cycle.rs:+6:5: +6:12\n+      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:+6:10: +6:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n+              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n++                 debug z => _2;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+          _1 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:10:17: 10:20\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n+-         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+-         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n+-         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _4 = _3;                         // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+-         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n++         _1 = _2;                         // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          _5 = std::mem::drop::<i32>(move _6) -> [return: bb2, unwind unreachable]; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:15:5: 15:9\n+                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n+          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:+6:12: +6:13\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +7:2\n+-         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n+-         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "23d92ed1ac5b9e5b9eb026d2bd64b1bd510e242c", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.diff"}, {"sha": "56ec7539734fd925a4c7ff3094b5b1e8bd95e2b4", "filename": "tests/mir-opt/copy-prop/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n //! Tests that cyclic assignments don't hang CopyProp, and result in reasonable code.\n // unit-test: CopyProp\n fn val() -> i32 {"}, {"sha": "8de0a56c58cd66e72dca5696a9f601bbab7cbd6b", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.panic-abort.mir", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,29 @@\n+// MIR for `f` after CopyProp\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_79191.rs:+0:6: +0:11\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_79191.rs:+0:23: +0:28\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _2;                   // in scope 1 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        _2 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n+        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n+        _1 = _2;                         // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10\n+        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        _4 = _1;                         // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:9: +4:10\n+        return;                          // scope 0 at $DIR/dead_stores_79191.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "c56418d8893f2125ca4004d14a2f35fc2e2b8c33", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.mir"}, {"sha": "4260d35b1947064ee883a6069ea03eecc9c4a8f8", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: CopyProp\n \n fn id<T>(x: T) -> T {"}, {"sha": "606b94f3e70f42ad990a573c36cced0b4af64d57", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.panic-abort.mir", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,29 @@\n+// MIR for `f` after CopyProp\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_better.rs:+0:10: +0:15\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_better.rs:+0:27: +0:32\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _2;                   // in scope 1 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        _2 = _1;                         // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n+        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_better.rs:+2:5: +2:10\n+        _1 = _2;                         // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10\n+        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        _4 = _1;                         // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:9: +4:10\n+        return;                          // scope 0 at $DIR/dead_stores_better.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "f355421732e45d72852d36657eb99b7201d788b1", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.mir"}, {"sha": "c5962db6a40defca4312b141862c03e47aefe764", "filename": "tests/mir-opt/copy-prop/dead_stores_better.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n // that that pass enables this one to do more optimizations.\n "}, {"sha": "701cdda0fceb51553e8ef4984a2a76ae505d8e09", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.panic-abort.diff", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,138 @@\n+- // MIR for `main` before CopyProp\n++ // MIR for `main` after CopyProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_107511.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n+      let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _5: usize;                   // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _6: &[i32];                  // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _7: &[i32; 4];               // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _9: ();                      // in scope 0 at $DIR/issue_107511.rs:+0:1: +9:2\n+      let _10: ();                         // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _11: std::option::Option<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _12: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _13: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _14: isize;                  // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n+      let mut _15: !;                      // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n+      let mut _17: i32;                    // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let _18: usize;                      // in scope 0 at $DIR/issue_107511.rs:+7:18: +7:19\n+      let mut _19: usize;                  // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let mut _20: bool;                   // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      scope 1 {\n+          debug sum => _1;                 // in scope 1 at $DIR/issue_107511.rs:+1:9: +1:16\n+          let _2: [i32; 4];                // in scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          scope 2 {\n+              debug a => _2;               // in scope 2 at $DIR/issue_107511.rs:+2:9: +2:10\n+              let mut _8: std::ops::Range<usize>; // in scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+              scope 3 {\n+                  debug iter => _8;        // in scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+                  let _16: usize;          // in scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  scope 4 {\n+                      debug i => _16;      // in scope 4 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n+          _1 = const 0_i32;                // scope 0 at $DIR/issue_107511.rs:+1:19: +1:20\n+          StorageLive(_2);                 // scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          _2 = [const 0_i32, const 10_i32, const 20_i32, const 30_i32]; // scope 1 at $DIR/issue_107511.rs:+2:13: +2:28\n+          StorageLive(_3);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageLive(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageLive(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          _7 = &_2;                        // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          _6 = move _7 as &[i32] (Pointer(Unsize)); // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageDead(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:18\n+          _5 = core::slice::<impl [i32]>::len(move _6) -> [return: bb1, unwind unreachable]; // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:11:19: 11:22\n+                                           // + literal: Const { ty: for<'a> fn(&'a [i32]) -> usize {core::slice::<impl [i32]>::len}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n+                                           // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          StorageLive(_8);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _8 = move _3;                    // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_10);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_11);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_12);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_13);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _13 = &mut _8;                   // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _12 = &mut (*_13);               // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> [return: bb4, unwind unreachable]; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:11:14: 11:24\n+                                           // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_12);                // scope 3 at $DIR/issue_107511.rs:+6:23: +6:24\n+          _14 = discriminant(_11);         // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+      }\n+  \n+      bb5: {\n+-         StorageLive(_16);                // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+          _16 = ((_11 as Some).0: usize);  // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+          StorageLive(_17);                // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         StorageLive(_18);                // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n+-         _18 = _16;                       // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n+          _19 = Len(_2);                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         _20 = Lt(_18, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _18) -> [success: bb8, unwind unreachable]; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         _20 = Lt(_16, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _16) -> [success: bb8, unwind unreachable]; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+      }\n+  \n+      bb6: {\n+          unreachable;                     // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+      }\n+  \n+      bb7: {\n+          _0 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_8);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_3);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_2);                 // scope 1 at $DIR/issue_107511.rs:+9:1: +9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_107511.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/issue_107511.rs:+9:2: +9:2\n+      }\n+  \n+      bb8: {\n+-         _17 = _2[_18];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         _17 = _2[_16];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+          _1 = Add(_1, move _17);          // scope 4 at $DIR/issue_107511.rs:+7:9: +7:20\n+          StorageDead(_17);                // scope 4 at $DIR/issue_107511.rs:+7:19: +7:20\n+-         StorageDead(_18);                // scope 4 at $DIR/issue_107511.rs:+7:20: +7:21\n+-         _10 = const ();                  // scope 4 at $DIR/issue_107511.rs:+6:25: +8:6\n+-         StorageDead(_16);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         _9 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+      }\n+  }\n+  "}, {"sha": "e09ccb831199898efd7943175feca3f4c2ccfead", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.diff"}, {"sha": "ce6fcc17b5722bb46273c3eaa444d2f132b2045b", "filename": "tests/mir-opt/copy-prop/issue_107511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: CopyProp\n \n // EMIT_MIR issue_107511.main.CopyProp.diff"}, {"sha": "b1ab5b542065c3f6a304b2a5cb86d33ec5887ab6", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.panic-abort.diff", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: T) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/move_arg.rs:+0:19: +0:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/move_arg.rs:+0:25: +0:25\n+      let _2: T;                           // in scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n+      let _3: ();                          // in scope 0 at $DIR/move_arg.rs:+2:5: +2:12\n+      let mut _4: T;                       // in scope 0 at $DIR/move_arg.rs:+2:7: +2:8\n+      let mut _5: T;                       // in scope 0 at $DIR/move_arg.rs:+2:10: +2:11\n+      scope 1 {\n+-         debug b => _2;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n++         debug b => _1;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/move_arg.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n+-         StorageLive(_4);                 // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n+-         _4 = _1;                         // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n+-         StorageLive(_5);                 // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n+-         _5 = _2;                         // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n+-         _3 = g::<T>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n++         _3 = g::<T>(_1, _1) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_arg.rs:8:5: 8:6\n+                                           // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_5);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n+-         StorageDead(_4);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n+          StorageDead(_3);                 // scope 1 at $DIR/move_arg.rs:+2:12: +2:13\n+          _0 = const ();                   // scope 0 at $DIR/move_arg.rs:+0:25: +3:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/move_arg.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/move_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "650bd66a7d73eeea88340abfe8bc942a28dc4f11", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.diff"}, {"sha": "a3a04e57bc1fac45b24f3f80c0bfae3a2790aeba", "filename": "tests/mir-opt/copy-prop/move_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Test that we do not move multiple times from the same local.\n // unit-test: CopyProp\n "}, {"sha": "0871f64efedff1b499c404dcc3ba33d737eec53d", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.panic-abort.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: Foo) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/move_projection.rs:+0:17: +0:21\n+      let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+-         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _3 = move (_2.0: u8);            // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<Foo>(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n++         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _0 = opaque::<Foo>(_1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:20:28: 20:34\n+                                           // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _0 = opaque::<u8>(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:23:28: 23:34\n+                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/move_projection.rs:+12:13: +12:21\n+      }\n+  }\n+  "}, {"sha": "beb85d68a660c33c0abc059e2612e0cdd905ee5d", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.diff"}, {"sha": "40f51ce8406a67754af0adba469959705a895f52", "filename": "tests/mir-opt/copy-prop/move_projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: CopyProp\n \n #![feature(custom_mir, core_intrinsics)]"}, {"sha": "f4d8e4ed67db826ac374700ba06cd746e3a6af95", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.panic-abort.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `demiraw` before CopyProp\n++ // MIR for `demiraw` after CopyProp\n+  \n+  fn demiraw(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:12: +0:17\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:23: +0:23\n+      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let mut _4: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+2:22: +2:29\n+      let _6: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _7: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _5: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 4 {\n+-                 debug c => _5;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+          scope 3 {\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n+          _4 = &mut (*_2);                 // scope 3 at $DIR/reborrow.rs:+2:22: +2:29\n+          _3 = &mut (*_4);                 // scope 1 at $DIR/reborrow.rs:+2:22: +2:29\n+          StorageDead(_4);                 // scope 1 at $DIR/reborrow.rs:+2:31: +2:32\n+-         StorageLive(_5);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _5 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_7);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _7 = _5;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = opaque::<*mut u8>(move _7) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n++         _6 = opaque::<*mut u8>(_2) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:39:5: 39:11\n+                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_7);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:23: +5:2\n+-         StorageDead(_5);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "b4a2482456636ae4d4dc16844c7d70d4fac4b81d", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.diff"}, {"sha": "3f34ec1600dac6bbcd4f2578ec50a0d2f54b0a50", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.panic-abort.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `miraw` before CopyProp\n++ // MIR for `miraw` after CopyProp\n+  \n+  fn miraw(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n+      let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _4: *mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 4 {\n+-                 debug c => _4;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 4 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+          scope 3 {\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &raw mut _1;                // scope 0 at $DIR/reborrow.rs:+1:13: +1:23\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          _3 = &raw mut (*_2);             // scope 3 at $DIR/reborrow.rs:+2:22: +2:33\n+-         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _4 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          StorageLive(_5);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = _4;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _5 = opaque::<*mut u8>(move _6) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n++         _5 = opaque::<*mut u8>(_2) -> [return: bb1, unwind unreachable]; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:31:5: 31:11\n+                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_5);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "a6a6c05b24ae9c4163cc0261979eb4c30b92e003", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.diff"}, {"sha": "59f87b5b911fe71a30974c2eebc2490407e73ea0", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.panic-abort.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `remut` before CopyProp\n++ // MIR for `remut` after CopyProp\n+  \n+  fn remut(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n+      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          _3 = &mut (*_2);                 // scope 1 at $DIR/reborrow.rs:+2:13: +2:20\n+-         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _5 = opaque::<&mut u8>(move _6) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n++         _5 = opaque::<&mut u8>(move _2) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:15:5: 15:11\n+                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "f3d26cc6e2bfee0ad2b550e7062d16d48b9be018", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.diff"}, {"sha": "08bb6d8b22b0a93ad39690eb2c9c10b7b2b3420e", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.panic-abort.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `reraw` before CopyProp\n++ // MIR for `reraw` after CopyProp\n+  \n+  fn reraw(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n+      let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n+          let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/reborrow.rs:+2:9: +2:10\n+              let _4: &mut u8;             // in scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug c => _4;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n++                 debug c => _2;           // in scope 3 at $DIR/reborrow.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+          _2 = &mut _1;                    // scope 0 at $DIR/reborrow.rs:+1:13: +1:19\n+          StorageLive(_3);                 // scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n+          _3 = &raw mut (*_2);             // scope 1 at $DIR/reborrow.rs:+2:13: +2:24\n+-         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n+-         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n+          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _5 = opaque::<&mut u8>(move _6) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n++         _5 = opaque::<&mut u8>(move _2) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:23:5: 23:11\n+                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "63e42b4dc7711460accc18d22f621b52d3f8cf4a", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.diff"}, {"sha": "c37ba5e5c4ca2fcd1aaa6a7c38385eeb8337da5a", "filename": "tests/mir-opt/copy-prop/reborrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Check that CopyProp considers reborrows as not mutating the pointer.\n // unit-test: CopyProp\n "}, {"sha": "be96743c36279751b529ee7b1ea97f0be8726386", "filename": "tests/mir-opt/dataflow-const-prop/checked.main.DataflowConstProp.panic-abort.diff", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,80 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/checked.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/checked.rs:+1:9: +1:10\n+      let mut _4: i32;                     // in scope 0 at $DIR/checked.rs:+3:13: +3:14\n+      let mut _5: i32;                     // in scope 0 at $DIR/checked.rs:+3:17: +3:18\n+      let mut _6: (i32, bool);             // in scope 0 at $DIR/checked.rs:+3:13: +3:18\n+      let mut _9: i32;                     // in scope 0 at $DIR/checked.rs:+6:13: +6:14\n+      let mut _10: (i32, bool);            // in scope 0 at $DIR/checked.rs:+6:13: +6:18\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/checked.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/checked.rs:+2:9: +2:10\n+          scope 2 {\n+              debug b => _2;               // in scope 2 at $DIR/checked.rs:+2:9: +2:10\n+              let _3: i32;                 // in scope 2 at $DIR/checked.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug c => _3;           // in scope 3 at $DIR/checked.rs:+3:9: +3:10\n+                  let _7: i32;             // in scope 3 at $DIR/checked.rs:+5:9: +5:10\n+                  scope 4 {\n+                      debug d => _7;       // in scope 4 at $DIR/checked.rs:+5:9: +5:10\n+                      let _8: i32;         // in scope 4 at $DIR/checked.rs:+6:9: +6:10\n+                      scope 5 {\n+                          debug e => _8;   // in scope 5 at $DIR/checked.rs:+6:9: +6:10\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/checked.rs:+1:9: +1:10\n+          _1 = const 1_i32;                // scope 0 at $DIR/checked.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/checked.rs:+2:9: +2:10\n+          _2 = const 2_i32;                // scope 1 at $DIR/checked.rs:+2:13: +2:14\n+          StorageLive(_3);                 // scope 2 at $DIR/checked.rs:+3:9: +3:10\n+          StorageLive(_4);                 // scope 2 at $DIR/checked.rs:+3:13: +3:14\n+-         _4 = _1;                         // scope 2 at $DIR/checked.rs:+3:13: +3:14\n++         _4 = const 1_i32;                // scope 2 at $DIR/checked.rs:+3:13: +3:14\n+          StorageLive(_5);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n+-         _5 = _2;                         // scope 2 at $DIR/checked.rs:+3:17: +3:18\n+-         _6 = CheckedAdd(_4, _5);         // scope 2 at $DIR/checked.rs:+3:13: +3:18\n+-         assert(!move (_6.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _4, move _5) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/checked.rs:+3:13: +3:18\n++         _5 = const 2_i32;                // scope 2 at $DIR/checked.rs:+3:17: +3:18\n++         _6 = CheckedAdd(const 1_i32, const 2_i32); // scope 2 at $DIR/checked.rs:+3:13: +3:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_i32, const 2_i32) -> [success: bb1, unwind unreachable]; // scope 2 at $DIR/checked.rs:+3:13: +3:18\n+      }\n+  \n+      bb1: {\n+-         _3 = move (_6.0: i32);           // scope 2 at $DIR/checked.rs:+3:13: +3:18\n++         _3 = const 3_i32;                // scope 2 at $DIR/checked.rs:+3:13: +3:18\n+          StorageDead(_5);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n+          StorageDead(_4);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n+          StorageLive(_7);                 // scope 3 at $DIR/checked.rs:+5:9: +5:10\n+          _7 = const _;                    // scope 3 at $DIR/checked.rs:+5:13: +5:21\n+          StorageLive(_8);                 // scope 4 at $DIR/checked.rs:+6:9: +6:10\n+          StorageLive(_9);                 // scope 4 at $DIR/checked.rs:+6:13: +6:14\n+-         _9 = _7;                         // scope 4 at $DIR/checked.rs:+6:13: +6:14\n+-         _10 = CheckedAdd(_9, const 1_i32); // scope 4 at $DIR/checked.rs:+6:13: +6:18\n+-         assert(!move (_10.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _9, const 1_i32) -> [success: bb2, unwind unreachable]; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n++         _9 = const i32::MAX;             // scope 4 at $DIR/checked.rs:+6:13: +6:14\n++         _10 = CheckedAdd(const i32::MAX, const 1_i32); // scope 4 at $DIR/checked.rs:+6:13: +6:18\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const i32::MAX, const 1_i32) -> [success: bb2, unwind unreachable]; // scope 4 at $DIR/checked.rs:+6:13: +6:18\n+      }\n+  \n+      bb2: {\n+-         _8 = move (_10.0: i32);          // scope 4 at $DIR/checked.rs:+6:13: +6:18\n++         _8 = const i32::MIN;             // scope 4 at $DIR/checked.rs:+6:13: +6:18\n+          StorageDead(_9);                 // scope 4 at $DIR/checked.rs:+6:17: +6:18\n+          _0 = const ();                   // scope 0 at $DIR/checked.rs:+0:11: +7:2\n+          StorageDead(_8);                 // scope 4 at $DIR/checked.rs:+7:1: +7:2\n+          StorageDead(_7);                 // scope 3 at $DIR/checked.rs:+7:1: +7:2\n+          StorageDead(_3);                 // scope 2 at $DIR/checked.rs:+7:1: +7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/checked.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/checked.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/checked.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "944afed8f465abd701e2c10dc3f59997cfc1364e", "filename": "tests/mir-opt/dataflow-const-prop/checked.main.DataflowConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dataflow-const-prop/checked.main.DataflowConstProp.diff"}, {"sha": "1c301460f5d6a88dc5d821f8d8eb7b6649a86e11", "filename": "tests/mir-opt/dataflow-const-prop/checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: DataflowConstProp\n // compile-flags: -Coverflow-checks=on\n "}, {"sha": "ff95cba98ad6b2f627a0445fe642225b96a58bcc", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.panic-abort.diff", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,39 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n+      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+      scope 1 {\n+      }\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:9:13: 9:47\n+          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _4: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+-         _4 = CheckedAdd(_2, _3);         // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+-         assert(!move (_4.1: bool), \"attempt to compute `{} + {}`, which would overflow\", _2, _3) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n++         _4 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n++         assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> [success: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_4.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n++         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n+          _0 = const ();                   // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n+          return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "1edcc28e68c150d84cdaad7eaf105d497971537b", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff"}, {"sha": "964c58966f009546fe623c1e49274ef65d4f1a2b", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: DataflowConstProp\n // compile-flags: -Zmir-enable-passes=+Inline\n "}, {"sha": "7a9ab39e0e59c44b9ef652b96346167c6f48eb47", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.panic-abort.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_without_sb.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+2:5: +2:15\n+      let mut _3: &i32;                    // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+      let _4: &i32;                        // in scope 0 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+      let _5: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+4:5: +4:20\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/ref_without_sb.rs:+1:9: +1:14\n+          let _6: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          scope 2 {\n+              debug b => _6;               // in scope 2 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+1:9: +1:14\n+          _1 = const 0_i32;                // scope 0 at $DIR/ref_without_sb.rs:+1:17: +1:18\n+          StorageLive(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          StorageLive(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          _4 = &_1;                        // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          _3 = &(*_4);                     // scope 1 at $DIR/ref_without_sb.rs:+2:12: +2:14\n+          _2 = escape::<i32>(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/ref_without_sb.rs:+2:5: +2:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_without_sb.rs:13:5: 13:11\n+                                           // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/ref_without_sb.rs:+2:14: +2:15\n+          StorageDead(_4);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n+          StorageDead(_2);                 // scope 1 at $DIR/ref_without_sb.rs:+2:15: +2:16\n+          _1 = const 1_i32;                // scope 1 at $DIR/ref_without_sb.rs:+3:5: +3:10\n+          StorageLive(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n+          _5 = some_function() -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/ref_without_sb.rs:+4:5: +4:20\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_without_sb.rs:15:5: 15:18\n+                                           // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:20: +4:21\n+          StorageLive(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          _6 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+6:13: +6:14\n+          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +7:2\n+          StorageDead(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/ref_without_sb.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "70ef17afd659ce57a1d30f233a15f16160d631ea", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.diff"}, {"sha": "4ac0a5b3298ac5498a1b561a0800b727ab87236f", "filename": "tests/mir-opt/dataflow-const-prop/ref_without_sb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: DataflowConstProp\n \n #[inline(never)]"}, {"sha": "ee857e716e2c0bbaacefc159d723ec94fe414602", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.panic-abort.diff", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,54 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/sibling_ptr.rs:+0:11: +0:11\n+      let mut _1: (u8, u8);                // in scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/sibling_ptr.rs:+2:5: +5:6\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:18\n+      let mut _5: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/sibling_ptr.rs:+1:9: +1:14\n+          let _6: u8;                      // in scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          scope 2 {\n+              let _3: *mut u8;             // in scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+              scope 3 {\n+                  debug p => _3;           // in scope 3 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+              }\n+          }\n+          scope 4 {\n+              debug x1 => _6;              // in scope 4 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n+          _1 = (const 0_u8, const 0_u8);   // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n+          StorageLive(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+2:5: +5:6\n+          StorageLive(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+          _3 = &raw mut (_1.0: u8);        // scope 2 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+          StorageLive(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n+          StorageLive(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+          _5 = _3;                         // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+          _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/sibling_ptr.rs:16:12: 16:15\n+                                           // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:17: +4:18\n+          (*_4) = const 1_u8;              // scope 3 at $DIR/sibling_ptr.rs:+4:9: +4:22\n+          StorageDead(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:22: +4:23\n+          _2 = const ();                   // scope 2 at $DIR/sibling_ptr.rs:+2:5: +5:6\n+          StorageDead(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+5:5: +5:6\n+          StorageDead(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+5:5: +5:6\n+          StorageLive(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          _6 = (_1.1: u8);                 // scope 1 at $DIR/sibling_ptr.rs:+6:14: +6:17\n+          _0 = const ();                   // scope 0 at $DIR/sibling_ptr.rs:+0:11: +7:2\n+          StorageDead(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/sibling_ptr.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "6ca569f3d8e5b79230caca4cba562d8c5394da54", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.diff"}, {"sha": "87842f347e48c354bd068fdf547bd3d632aedec6", "filename": "tests/mir-opt/dataflow-const-prop/sibling_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // This attempts to modify `x.1` via a pointer derived from `addr_of_mut!(x.0)`.\n // According to Miri, that is UB. However, T-opsem has not finalized that\n // decision and as such we cannot rely on it in optimizations. Consequently,"}, {"sha": "94e9595a0e332a07307a8e250640e85ba79f48ee", "filename": "tests/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.panic-abort.diff", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/terminator.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/terminator.rs:+1:9: +1:10\n+      let _2: ();                          // in scope 0 at $DIR/terminator.rs:+3:5: +3:15\n+      let mut _3: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:10\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/terminator.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/terminator.rs:+1:9: +1:10\n+          _1 = const 1_i32;                // scope 0 at $DIR/terminator.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n+          StorageLive(_3);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n+          StorageLive(_4);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n+-         _4 = _1;                         // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n+-         _3 = Add(move _4, const 1_i32);  // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n++         _4 = const 1_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n++         _3 = const 2_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n+          StorageDead(_4);                 // scope 1 at $DIR/terminator.rs:+3:13: +3:14\n+-         _2 = foo(move _3) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n++         _2 = foo(const 2_i32) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/terminator.rs:10:5: 10:8\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/terminator.rs:+3:14: +3:15\n+          StorageDead(_2);                 // scope 1 at $DIR/terminator.rs:+3:15: +3:16\n+          _0 = const ();                   // scope 0 at $DIR/terminator.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/terminator.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/terminator.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "9854beaeb217cfb35da56d25182f6d2b90383c64", "filename": "tests/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.diff"}, {"sha": "114dbeca5acf11ace5b86764520a457b9139a50c", "filename": "tests/mir-opt/dataflow-const-prop/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: DataflowConstProp\n \n fn foo(n: i32) {}"}, {"sha": "23cd812cabe54267d08b4cd95e05d90637ac55b1", "filename": "tests/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.panic-abort.diff", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,76 @@\n+- // MIR for `cycle` before DeadStoreElimination\n++ // MIR for `cycle` after DeadStoreElimination\n+  \n+  fn cycle(_1: i32, _2: i32, _3: i32) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/cycle.rs:+0:10: +0:15\n+      debug y => _2;                       // in scope 0 at $DIR/cycle.rs:+0:22: +0:27\n+      debug z => _3;                       // in scope 0 at $DIR/cycle.rs:+0:34: +0:39\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:46: +0:46\n+-     let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:+0:1: +9:2\n+-     let mut _5: bool;                    // in scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+-     let _6: i32;                         // in scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+-     let mut _7: i32;                     // in scope 0 at $DIR/cycle.rs:+5:13: +5:14\n+-     let mut _8: i32;                     // in scope 0 at $DIR/cycle.rs:+6:13: +6:14\n+-     let mut _9: i32;                     // in scope 0 at $DIR/cycle.rs:+7:13: +7:17\n+-     let mut _10: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+-     let _11: ();                         // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+-     let mut _12: !;                      // in scope 0 at $DIR/cycle.rs:+3:5: +8:6\n++     let mut _4: bool;                    // in scope 0 at $DIR/cycle.rs:+3:11: +3:17\n++     let _5: i32;                         // in scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+      scope 1 {\n+-         debug temp => _6;                // in scope 1 at $DIR/cycle.rs:+4:13: +4:17\n++         debug temp => _5;                // in scope 1 at $DIR/cycle.rs:+4:13: +4:17\n+      }\n+  \n+      bb0: {\n+          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+-         _5 = cond() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n++         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n++         _4 = cond() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:13:11: 13:15\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+-         switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n++         switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:+3:11: +3:17\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_6);                 // scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+-         _6 = _3;                         // scope 0 at $DIR/cycle.rs:+4:20: +4:21\n+-         StorageLive(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n+-         _7 = _2;                         // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n+-         _3 = move _7;                    // scope 1 at $DIR/cycle.rs:+5:9: +5:14\n+-         StorageDead(_7);                 // scope 1 at $DIR/cycle.rs:+5:13: +5:14\n+-         StorageLive(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n+-         _8 = _1;                         // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n+-         _2 = move _8;                    // scope 1 at $DIR/cycle.rs:+6:9: +6:14\n+-         StorageDead(_8);                 // scope 1 at $DIR/cycle.rs:+6:13: +6:14\n+-         StorageLive(_9);                 // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n+-         _9 = _6;                         // scope 1 at $DIR/cycle.rs:+7:13: +7:17\n+-         _1 = move _9;                    // scope 1 at $DIR/cycle.rs:+7:9: +7:17\n+-         StorageDead(_9);                 // scope 1 at $DIR/cycle.rs:+7:16: +7:17\n+-         _4 = const ();                   // scope 0 at $DIR/cycle.rs:+3:18: +8:6\n+-         StorageDead(_6);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n++         StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:+4:13: +4:17\n+          StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n++         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n+          goto -> bb1;                     // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+      }\n+  \n+      bb4: {\n+-         StorageLive(_11);                // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+3:5: +8:6\n+-         StorageDead(_11);                // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n+-         StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n++         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+8:5: +8:6\n+          return;                          // scope 0 at $DIR/cycle.rs:+9:2: +9:2\n+      }\n+  }\n+  "}, {"sha": "2776ff51d85a12a25fc64f9470e83d50f77962b4", "filename": "tests/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff"}, {"sha": "cd34fe96e8c64b718022972318f94a9924dcb623", "filename": "tests/mir-opt/dead-store-elimination/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fcycle.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: DeadStoreElimination\n \n #[inline(never)]"}, {"sha": "89de03000ae70728207525ad571ac8d2a6ac7549", "filename": "tests/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,100 @@\n+- // MIR for `is_line_doc_comment_2` before DeduplicateBlocks\n++ // MIR for `is_line_doc_comment_2` after DeduplicateBlocks\n+  \n+  fn is_line_doc_comment_2(_1: &str) -> bool {\n+      debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:+0:36: +0:37\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:+0:48: +0:52\n+      let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+      let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _5: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _6: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      let mut _7: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      let mut _8: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      let mut _9: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+          _3 = &(*_1);                     // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+          _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:11: +1:23\n+                                           // mir::Constant\n+                                           // + span: $DIR/deduplicate_blocks.rs:6:13: 6:21\n+                                           // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:+1:22: +1:23\n+          _7 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          _8 = const 4_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          _9 = Ge(move _7, move _8);       // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+          switchInt(move _9) -> [0: bb6, otherwise: bb2]; // scope 0 at $DIR/deduplicate_blocks.rs:+2:9: +2:37\n+      }\n+  \n+      bb2: {\n+          switchInt((*_2)[0 of 4]) -> [47: bb3, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb3: {\n+          switchInt((*_2)[1 of 4]) -> [47: bb4, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb4: {\n+          switchInt((*_2)[2 of 4]) -> [47: bb5, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb5: {\n+-         switchInt((*_2)[3 of 4]) -> [47: bb11, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[3 of 4]) -> [47: bb10, otherwise: bb6]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb6: {\n+          _4 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _5 = const 3_usize;              // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          _6 = Ge(move _4, move _5);       // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+          switchInt(move _6) -> [0: bb10, otherwise: bb7]; // scope 0 at $DIR/deduplicate_blocks.rs:+3:9: +3:31\n+      }\n+  \n+      bb7: {\n+          switchInt((*_2)[0 of 3]) -> [47: bb8, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb8: {\n+          switchInt((*_2)[1 of 3]) -> [47: bb9, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb9: {\n+-         switchInt((*_2)[2 of 3]) -> [47: bb12, 33: bb13, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n++         switchInt((*_2)[2 of 3]) -> [47: bb11, 33: bb11, otherwise: bb10]; // scope 0 at $DIR/deduplicate_blocks.rs:+1:5: +1:23\n+      }\n+  \n+      bb10: {\n+-         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+5:14: +5:19\n+-     }\n+- \n+-     bb11: {\n+          _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n++         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+2:41: +2:46\n+      }\n+  \n+-     bb12: {\n+-         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+3:35: +3:39\n+-     }\n+- \n+-     bb13: {\n++     bb11: {\n+          _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n+-         goto -> bb14;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n++         goto -> bb12;                    // scope 0 at $DIR/deduplicate_blocks.rs:+4:35: +4:39\n+      }\n+  \n+-     bb14: {\n++     bb12: {\n+          StorageDead(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/deduplicate_blocks.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "c4ebf1ca834f9574096abb15fbbaf6ff14cdff4b", "filename": "tests/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff"}, {"sha": "0c38c7f215e0ae5712846b71e1b69648aeff4c88", "filename": "tests/mir-opt/deduplicate_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdeduplicate_blocks.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: DeduplicateBlocks\n \n // EMIT_MIR deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff"}, {"sha": "6458b06f0e08ea2c7b3247b5afc7491ad17afd26", "filename": "tests/mir-opt/derefer_complex_case.main.Derefer.panic-abort.diff", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,109 @@\n+- // MIR for `main` before Derefer\n++ // MIR for `main` after Derefer\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:+0:11: +0:11\n+      let mut _1: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:18: +1:26\n+      let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n+      let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _8: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _9: &mut std::slice::Iter<'_, i32>; // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+      let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+      let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n+      let mut _14: &[i32; 2];              // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n++     let mut _15: &i32;                   // in scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      scope 1 {\n+          debug iter => _4;                // in scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          let _12: i32;                    // in scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+          scope 2 {\n+              debug foo => _12;            // in scope 2 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _14 = const _;                   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n+                                           // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }\n+          _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind: bb8]; // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n+                                           // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n+          StorageLive(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _4 = move _1;                    // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+      }\n+  \n+      bb2: {\n+          StorageLive(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _7 = <std::slice::Iter<'_, i32> as Iterator>::next(move _8) -> [return: bb3, unwind: bb8]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n+                                           // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:25: +1:26\n+          _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      }\n+  \n+      bb4: {\n+          StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+-         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n++         _15 = deref_copy ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n++         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:+1:10: +1:13\n+          StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n+          _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:+1:34: +1:37\n+          _6 = std::mem::drop::<i32>(move _13) -> [return: bb7, unwind: bb8]; // scope 2 at $DIR/derefer_complex_case.rs:+1:29: +1:38\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_complex_case.rs:6:29: 6:33\n+                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          unreachable;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+      }\n+  \n+      bb6: {\n+          _0 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          return;                          // scope 0 at $DIR/derefer_complex_case.rs:+2:2: +2:2\n+      }\n+  \n+      bb7: {\n+          StorageDead(_13);                // scope 2 at $DIR/derefer_complex_case.rs:+1:37: +1:38\n+          StorageDead(_12);                // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:+1:39: +1:40\n+          _5 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:+1:5: +1:40\n+      }\n+  \n+      bb8 (cleanup): {\n+          resume;                          // scope 0 at $DIR/derefer_complex_case.rs:+0:1: +2:2\n+      }\n+  }\n+  "}, {"sha": "fa3eeedc40fffee479371c748617291fe96cd852", "filename": "tests/mir-opt/derefer_complex_case.main.Derefer.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_complex_case.main.Derefer.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/derefer_complex_case.main.Derefer.diff"}, {"sha": "cc619879ef3a73a3d958c79c9fcc359b28951ea6", "filename": "tests/mir-opt/derefer_complex_case.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_complex_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_complex_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_complex_case.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,6 @@\n // unit-test: Derefer\n // EMIT_MIR derefer_complex_case.main.Derefer.diff\n-// ignore-wasm32\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n fn main() {\n     for &foo in &[42, 43] { drop(foo) }"}, {"sha": "92c8f2059e86d8265d32e9e265fc218a7fc1d576", "filename": "tests/mir-opt/derefer_inline_test.main.Derefer.panic-abort.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `main` before Derefer\n++ // MIR for `main` after Derefer\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_inline_test.rs:+0:11: +0:11\n+      let _1: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n+      let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n+          StorageLive(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n+          _2 = f() -> [return: bb1, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_inline_test.rs:10:14: 10:15\n+                                           // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _1 = Box::<Box<u32>>::new(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_inline_test.rs:10:5: 10:13\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: fn(Box<u32>) -> Box<Box<u32>> {Box::<Box<u32>>::new}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n+          drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n+          _0 = const ();                   // scope 0 at $DIR/derefer_inline_test.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/derefer_inline_test.rs:+2:2: +2:2\n+      }\n+  \n+      bb4 (cleanup): {\n+          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/derefer_inline_test.rs:+0:1: +2:2\n+      }\n+  }\n+  "}, {"sha": "426d4fb213cdb1653a9c218b02e0e201f881941e", "filename": "tests/mir-opt/derefer_inline_test.main.Derefer.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/derefer_inline_test.main.Derefer.diff"}, {"sha": "7ac330e51025e809aee9201e9b4b155737228636", "filename": "tests/mir-opt/derefer_inline_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_inline_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_inline_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,6 @@\n // unit-test: Derefer\n // EMIT_MIR derefer_inline_test.main.Derefer.diff\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n #[inline]\n fn f() -> Box<u32> {"}, {"sha": "5a218df95b724a9304da43bf276d0485ca7505ac", "filename": "tests/mir-opt/derefer_terminator_test.main.Derefer.panic-abort.diff", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,96 @@\n+- // MIR for `main` before Derefer\n++ // MIR for `main` after Derefer\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +0:11\n+      let _1: bool;                        // in scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n+      let _3: ();                          // in scope 0 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n+      let mut _4: &&&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+      let _5: &&&bool;                     // in scope 0 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n+      let _6: &&bool;                      // in scope 0 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n+      let _7: &bool;                       // in scope 0 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n++     let mut _10: &&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n++     let mut _11: &&bool;                 // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n++     let mut _12: &bool;                  // in scope 0 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+      scope 1 {\n+          debug b => _1;                   // in scope 1 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n+          let _2: bool;                    // in scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n+          scope 2 {\n+              debug d => _2;               // in scope 2 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n+              let _8: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n+              let _9: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+              scope 3 {\n+                  debug x => _8;           // in scope 3 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n+              }\n+              scope 4 {\n+                  debug y => _9;           // in scope 4 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+1:9: +1:10\n+          _1 = foo() -> [return: bb1, unwind: bb6]; // scope 0 at $DIR/derefer_terminator_test.rs:+1:13: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n+                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+2:9: +2:10\n+          _2 = foo() -> [return: bb2, unwind: bb6]; // scope 1 at $DIR/derefer_terminator_test.rs:+2:13: +2:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/derefer_terminator_test.rs:7:13: 7:16\n+                                           // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageLive(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +6:6\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+          StorageLive(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n+          StorageLive(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n+          StorageLive(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n+          _7 = &_1;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:19: +3:21\n+          _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:18: +3:21\n+          _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:17: +3:21\n+          _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:+3:15: +3:22\n+-         switchInt((*(*(*(*_4))))) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n++         switchInt((*_12)) -> [0: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:+3:5: +3:22\n+      }\n+  \n+      bb3: {\n+          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n+          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+5:18: +5:20\n+      }\n+  \n+      bb4: {\n+          StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:22: +4:23\n+          _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:+4:26: +4:27\n+          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:+4:17: +4:29\n+          StorageDead(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n+          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:+4:28: +4:29\n+      }\n+  \n+      bb5: {\n+          StorageDead(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageDead(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:+6:5: +6:6\n+          StorageLive(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+7:9: +7:10\n+          _9 = const 42_i32;               // scope 2 at $DIR/derefer_terminator_test.rs:+7:13: +7:15\n+          _0 = const ();                   // scope 0 at $DIR/derefer_terminator_test.rs:+0:11: +8:2\n+          StorageDead(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/derefer_terminator_test.rs:+8:2: +8:2\n+      }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/derefer_terminator_test.rs:+0:1: +8:2\n+      }\n+  }\n+  "}, {"sha": "ab2388d1323a85cb6f0ab499ef9c1915fa0c6fc3", "filename": "tests/mir-opt/derefer_terminator_test.main.Derefer.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/derefer_terminator_test.main.Derefer.diff"}, {"sha": "164aa733a246c7bd7f6b93bd7421ff9ea8cc4556", "filename": "tests/mir-opt/derefer_terminator_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_terminator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fderefer_terminator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_terminator_test.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,6 @@\n // unit-test: Derefer\n // EMIT_MIR derefer_terminator_test.main.Derefer.diff\n-// ignore-wasm32\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n fn main() {\n     let b = foo();"}, {"sha": "c039fc76b7694da5bfc99def4b67753155abfaf5", "filename": "tests/mir-opt/dest-prop/branch.foo.DestinationPropagation.panic-abort.diff", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,75 @@\n+- // MIR for `foo` before DestinationPropagation\n++ // MIR for `foo` after DestinationPropagation\n+  \n+  fn foo() -> i32 {\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n+      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n+      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      scope 1 {\n+-         debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n++         debug x => _0;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          scope 2 {\n+-             debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n++             debug y => _0;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n+-         _1 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/branch.rs:+1:13: +1:18\n++         nop;                             // scope 0 at $DIR/branch.rs:+1:9: +1:10\n++         _0 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/branch.rs:+1:13: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:14:13: 14:16\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n++         nop;                             // scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          _3 = cond() -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:16:16: 16:20\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+      }\n+  \n+      bb3: {\n+-         _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n++         nop;                             // scope 1 at $DIR/branch.rs:+4:9: +4:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+          _4 = val() -> [return: bb5, unwind unreachable]; // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:19:9: 19:12\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n+-         _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n++         nop;                             // scope 1 at $DIR/branch.rs:+7:9: +7:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n+-         _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n+-         StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n++         nop;                             // scope 2 at $DIR/branch.rs:+10:5: +10:6\n++         nop;                             // scope 1 at $DIR/branch.rs:+11:1: +11:2\n++         nop;                             // scope 0 at $DIR/branch.rs:+11:1: +11:2\n+          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+      }\n+  }\n+  "}, {"sha": "b7416d389ef7b7c15c2038eaf057f5592977aafd", "filename": "tests/mir-opt/dest-prop/branch.foo.DestinationPropagation.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.foo.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/branch.foo.DestinationPropagation.diff"}, {"sha": "5007aafb62f8c9ac59fd3917ac08b7ab65aea9a3", "filename": "tests/mir-opt/dest-prop/branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fbranch.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n //! Tests that assignment in both branches of an `if` are eliminated.\n // unit-test: DestinationPropagation\n fn val() -> i32 {"}, {"sha": "4343a593542ba6647b3be73e5fa82e497373fbcb", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.diff"}, {"sha": "4343a593542ba6647b3be73e5fa82e497373fbcb", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `arg_src` before DestinationPropagation\n++ // MIR for `arg_src` after DestinationPropagation\n+  \n+  fn arg_src(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n+      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n++         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n++         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n+-         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n++         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "2e1bb2a79ecac9099e392b803962bf421de71aed", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.panic-abort.diff", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,32 @@\n+- // MIR for `bar` before DestinationPropagation\n++ // MIR for `bar` after DestinationPropagation\n+  \n+  fn bar(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+-         StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+-         _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+-         _2 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n++         _2 = dummy(move _1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "a61e741f73dcdebc29644ffdbfc6c6f5deeb0501", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff"}, {"sha": "bc88787e64b2d543cbdaa5c1075f0ba16b13ba1c", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.panic-abort.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.diff"}, {"sha": "bc88787e64b2d543cbdaa5c1075f0ba16b13ba1c", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `baz` before DestinationPropagation\n++ // MIR for `baz` after DestinationPropagation\n+  \n+  fn baz(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:23: +0:26\n+      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+-         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "fce57a0359220d78d271864c94d466ceed9c9af2", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.panic-abort.diff", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,32 @@\n+- // MIR for `foo` before DestinationPropagation\n++ // MIR for `foo` after DestinationPropagation\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+-         _2 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n++         _1 = dummy(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:12:9: 12:14\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+-         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "c7fbecac5c47f2f30b67b3d01e99b5dee30006f5", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff"}, {"sha": "1f8d588925c4e5031eda5d5554e9ec4bc8cf104e", "filename": "tests/mir-opt/dest-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Check that DestinationPropagation does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n // unit-test: DestinationPropagation"}, {"sha": "35947cace2968174ecb0f7888096db788b8351d4", "filename": "tests/mir-opt/dest-prop/cycle.main.DestinationPropagation.panic-abort.diff", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,77 @@\n+- // MIR for `main` before DestinationPropagation\n++ // MIR for `main` after DestinationPropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:+4:9: +4:10\n+      let _5: ();                          // in scope 0 at $DIR/cycle.rs:+6:5: +6:12\n+      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:+6:10: +6:11\n+      scope 1 {\n+-         debug x => _1;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n++         debug x => _6;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          scope 2 {\n+-             debug y => _2;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n++             debug y => _6;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n+              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n++                 debug z => _6;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+-         _1 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n++         nop;                             // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n++         _6 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:10:17: 10:20\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+-         _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n+-         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+-         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n+-         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _4 = _3;                         // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+-         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n++         nop;                             // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n++         nop;                             // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n++         nop;                             // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n++         nop;                             // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n++         nop;                             // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n++         nop;                             // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n++         nop;                             // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n++         nop;                             // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+-         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+-         _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n++         nop;                             // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n++         nop;                             // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          _5 = std::mem::drop::<i32>(move _6) -> [return: bb2, unwind unreachable]; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:15:5: 15:9\n+                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+-         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n++         nop;                             // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n+          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:+6:12: +6:13\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +7:2\n+-         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n+-         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n++         nop;                             // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n++         nop;                             // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n++         nop;                             // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "b06f069a2e4ff492b4576ef8593053f4f3b2d9b3", "filename": "tests/mir-opt/dest-prop/cycle.main.DestinationPropagation.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff"}, {"sha": "9bc0cb05a35148e1e3f13395f049a45cc47350ad", "filename": "tests/mir-opt/dest-prop/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fcycle.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n //! Tests that cyclic assignments don't hang DestinationPropagation, and result in reasonable code.\n // unit-test: DestinationPropagation\n fn val() -> i32 {"}, {"sha": "5882e0aee109a9531db8a148a26526517efa031b", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.f.DestinationPropagation.after.panic-abort.mir", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,34 @@\n+// MIR for `f` after DestinationPropagation\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_79191.rs:+0:6: +0:11\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_79191.rs:+0:23: +0:28\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _3;                   // in scope 1 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        nop;                             // scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+        _3 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n+        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n+        nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n+        nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n+        _1 = move _3;                    // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10\n+        nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n+        nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _1) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_79191.rs:13:5: 13:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        nop;                             // scope 1 at $DIR/dead_stores_79191.rs:+4:9: +4:10\n+        nop;                             // scope 0 at $DIR/dead_stores_79191.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/dead_stores_79191.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "b9d4b59d2f7a1cfe27a25523850a93f307910f70", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.f.DestinationPropagation.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/dead_stores_79191.f.DestinationPropagation.after.mir"}, {"sha": "2f95ba0e326a4d7e42f5b0f4c8a76a1f32551220", "filename": "tests/mir-opt/dest-prop/dead_stores_79191.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_79191.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // unit-test: DestinationPropagation\n \n fn id<T>(x: T) -> T {"}, {"sha": "f4568111d2e15e6207fbb4d8d0dc4e813a49293f", "filename": "tests/mir-opt/dest-prop/dead_stores_better.f.DestinationPropagation.after.panic-abort.mir", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,33 @@\n+// MIR for `f` after DestinationPropagation\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_better.rs:+0:10: +0:15\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_better.rs:+0:27: +0:32\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _1;                   // in scope 1 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        nop;                             // scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+        nop;                             // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n+        nop;                             // scope 1 at $DIR/dead_stores_better.rs:+3:9: +3:10\n+        nop;                             // scope 1 at $DIR/dead_stores_better.rs:+3:9: +3:10\n+        nop;                             // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10\n+        nop;                             // scope 1 at $DIR/dead_stores_better.rs:+3:9: +3:10\n+        nop;                             // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        nop;                             // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _1) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_better.rs:17:5: 17:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        nop;                             // scope 1 at $DIR/dead_stores_better.rs:+4:9: +4:10\n+        nop;                             // scope 0 at $DIR/dead_stores_better.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/dead_stores_better.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "9eb0e09bf1b212e92c18b356395dacd4ffb36e3f", "filename": "tests/mir-opt/dest-prop/dead_stores_better.f.DestinationPropagation.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.f.DestinationPropagation.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/dead_stores_better.f.DestinationPropagation.after.mir"}, {"sha": "e67653c57e4d21e23763349093839bbbcf37d8b2", "filename": "tests/mir-opt/dest-prop/dead_stores_better.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fdead_stores_better.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n // that that pass enables this one to do more optimizations.\n "}, {"sha": "0b0eb03b652f919fadc02eb76b88ed7da20b8b97", "filename": "tests/mir-opt/dest-prop/simple.nrvo.DestinationPropagation.panic-abort.diff", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,43 @@\n+- // MIR for `nrvo` before DestinationPropagation\n++ // MIR for `nrvo` after DestinationPropagation\n+  \n+  fn nrvo(_1: for<'a> fn(&'a mut [u8; 1024])) -> [u8; 1024] {\n+      debug init => _1;                    // in scope 0 at $DIR/simple.rs:+0:9: +0:13\n+      let mut _0: [u8; 1024];              // return place in scope 0 at $DIR/simple.rs:+0:39: +0:49\n+      let mut _2: [u8; 1024];              // in scope 0 at $DIR/simple.rs:+1:9: +1:16\n+      let _3: ();                          // in scope 0 at $DIR/simple.rs:+2:5: +2:19\n+      let mut _4: for<'a> fn(&'a mut [u8; 1024]); // in scope 0 at $DIR/simple.rs:+2:5: +2:9\n+      let mut _5: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:+2:10: +2:18\n+      let mut _6: &mut [u8; 1024];         // in scope 0 at $DIR/simple.rs:+2:10: +2:18\n+      scope 1 {\n+          debug buf => _2;                 // in scope 1 at $DIR/simple.rs:+1:9: +1:16\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/simple.rs:+1:9: +1:16\n+          _2 = [const 0_u8; 1024];         // scope 0 at $DIR/simple.rs:+1:19: +1:28\n+          StorageLive(_3);                 // scope 1 at $DIR/simple.rs:+2:5: +2:19\n+-         StorageLive(_4);                 // scope 1 at $DIR/simple.rs:+2:5: +2:9\n+-         _4 = _1;                         // scope 1 at $DIR/simple.rs:+2:5: +2:9\n++         nop;                             // scope 1 at $DIR/simple.rs:+2:5: +2:9\n++         nop;                             // scope 1 at $DIR/simple.rs:+2:5: +2:9\n+          StorageLive(_5);                 // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+          StorageLive(_6);                 // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+          _6 = &mut _2;                    // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+          _5 = &mut (*_6);                 // scope 1 at $DIR/simple.rs:+2:10: +2:18\n+-         _3 = move _4(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/simple.rs:+2:5: +2:19\n++         _3 = move _1(move _5) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/simple.rs:+2:5: +2:19\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 1 at $DIR/simple.rs:+2:18: +2:19\n+-         StorageDead(_4);                 // scope 1 at $DIR/simple.rs:+2:18: +2:19\n++         nop;                             // scope 1 at $DIR/simple.rs:+2:18: +2:19\n+          StorageDead(_6);                 // scope 1 at $DIR/simple.rs:+2:19: +2:20\n+          StorageDead(_3);                 // scope 1 at $DIR/simple.rs:+2:19: +2:20\n+          _0 = _2;                         // scope 1 at $DIR/simple.rs:+3:5: +3:8\n+          StorageDead(_2);                 // scope 0 at $DIR/simple.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/simple.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "c2a3a0025840ab8090a9f0d7f98cd12f50096fb8", "filename": "tests/mir-opt/dest-prop/simple.nrvo.DestinationPropagation.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fsimple.nrvo.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/simple.nrvo.DestinationPropagation.diff"}, {"sha": "0bcb2924f1dd9f2b7af0c2598b686a5fbedad95a", "filename": "tests/mir-opt/dest-prop/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Fsimple.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n //! Copy of `nrvo-simple.rs`, to ensure that full dest-prop handles it too.\n // unit-test: DestinationPropagation\n // EMIT_MIR simple.nrvo.DestinationPropagation.diff"}, {"sha": "61cdc26dcdc80a90fa9cb001bfce7aac2171a20a", "filename": "tests/mir-opt/dest-prop/union.main.DestinationPropagation.panic-abort.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `main` before DestinationPropagation\n++ // MIR for `main` after DestinationPropagation\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/union.rs:+0:11: +0:11\n+      let _1: main::Un;                    // in scope 0 at $DIR/union.rs:+5:9: +5:11\n+      let mut _2: u32;                     // in scope 0 at $DIR/union.rs:+5:23: +5:28\n+      let mut _3: u32;                     // in scope 0 at $DIR/union.rs:+7:10: +7:26\n+      scope 1 {\n+          debug un => _1;                  // in scope 1 at $DIR/union.rs:+5:9: +5:11\n+          scope 2 {\n+          }\n+          scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:16:5: 16:27\n+              debug _x => _3;              // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/union.rs:+5:9: +5:11\n+          StorageLive(_2);                 // scope 0 at $DIR/union.rs:+5:23: +5:28\n+          _2 = val() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/union.rs:+5:23: +5:28\n+                                           // mir::Constant\n+                                           // + span: $DIR/union.rs:14:23: 14:26\n+                                           // + literal: Const { ty: fn() -> u32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/union.rs:+5:29: +5:30\n+          StorageLive(_3);                 // scope 1 at $DIR/union.rs:+7:10: +7:26\n+          StorageDead(_3);                 // scope 1 at $DIR/union.rs:+7:26: +7:27\n+          StorageDead(_1);                 // scope 0 at $DIR/union.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/union.rs:+8:2: +8:2\n+      }\n+  }\n+  "}, {"sha": "457fc830874dad2bf2e1bf2caf0066745f41d2d7", "filename": "tests/mir-opt/dest-prop/union.main.DestinationPropagation.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/union.main.DestinationPropagation.diff"}, {"sha": "4bc6f28c6c297f4a1e588cb451c608de6d78a093", "filename": "tests/mir-opt/dest-prop/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n //! Tests that we can propagate into places that are projections into unions\n // compile-flags: -Zunsound-mir-opts\n fn val() -> u32 {"}, {"sha": "e8f0b25c59b35b74b713a69e29955214cd9bf9d1", "filename": "tests/mir-opt/dest-prop/unreachable.f.DestinationPropagation.panic-abort.diff", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,86 @@\n+- // MIR for `f` before DestinationPropagation\n++ // MIR for `f` after DestinationPropagation\n+  \n+  fn f(_1: T) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/unreachable.rs:+0:19: +0:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable.rs:+0:25: +0:25\n+      let _2: T;                           // in scope 0 at $DIR/unreachable.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/unreachable.rs:+2:8: +2:13\n+      let _4: ();                          // in scope 0 at $DIR/unreachable.rs:+3:9: +3:16\n+      let mut _5: T;                       // in scope 0 at $DIR/unreachable.rs:+3:11: +3:12\n+      let mut _6: T;                       // in scope 0 at $DIR/unreachable.rs:+3:14: +3:15\n+      let _7: ();                          // in scope 0 at $DIR/unreachable.rs:+5:9: +5:16\n+      let mut _8: T;                       // in scope 0 at $DIR/unreachable.rs:+5:11: +5:12\n+      let mut _9: T;                       // in scope 0 at $DIR/unreachable.rs:+5:14: +5:15\n+      scope 1 {\n+-         debug b => _2;                   // in scope 1 at $DIR/unreachable.rs:+1:9: +1:10\n++         debug b => _1;                   // in scope 1 at $DIR/unreachable.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/unreachable.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/unreachable.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/unreachable.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/unreachable.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n+          _3 = const false;                // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n+-         goto -> bb3;                     // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n++         goto -> bb1;                     // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_4);                 // scope 1 at $DIR/unreachable.rs:+3:9: +3:16\n+-         StorageLive(_5);                 // scope 1 at $DIR/unreachable.rs:+3:11: +3:12\n+-         _5 = _1;                         // scope 1 at $DIR/unreachable.rs:+3:11: +3:12\n+-         StorageLive(_6);                 // scope 1 at $DIR/unreachable.rs:+3:14: +3:15\n+-         _6 = _2;                         // scope 1 at $DIR/unreachable.rs:+3:14: +3:15\n+-         _4 = g::<T>(move _5, move _6) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/unreachable.rs:+3:9: +3:16\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable.rs:12:9: 12:10\n+-                                          // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb2: {\n+-         StorageDead(_6);                 // scope 1 at $DIR/unreachable.rs:+3:15: +3:16\n+-         StorageDead(_5);                 // scope 1 at $DIR/unreachable.rs:+3:15: +3:16\n+-         StorageDead(_4);                 // scope 1 at $DIR/unreachable.rs:+3:16: +3:17\n+-         _0 = const ();                   // scope 1 at $DIR/unreachable.rs:+2:14: +4:6\n+-         goto -> bb5;                     // scope 1 at $DIR/unreachable.rs:+2:5: +6:6\n+-     }\n+- \n+-     bb3: {\n+          StorageLive(_7);                 // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n+-         StorageLive(_8);                 // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n+-         _8 = _2;                         // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n++         nop;                             // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n++         nop;                             // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n+          StorageLive(_9);                 // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n+-         _9 = _2;                         // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n+-         _7 = g::<T>(move _8, move _9) -> [return: bb4, unwind unreachable]; // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n++         _9 = _1;                         // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n++         _7 = g::<T>(move _1, move _9) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable.rs:14:9: 14:10\n+                                           // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+-     bb4: {\n++     bb2: {\n+          StorageDead(_9);                 // scope 1 at $DIR/unreachable.rs:+5:15: +5:16\n+-         StorageDead(_8);                 // scope 1 at $DIR/unreachable.rs:+5:15: +5:16\n++         nop;                             // scope 1 at $DIR/unreachable.rs:+5:15: +5:16\n+          StorageDead(_7);                 // scope 1 at $DIR/unreachable.rs:+5:16: +5:17\n+          _0 = const ();                   // scope 1 at $DIR/unreachable.rs:+4:12: +6:6\n+-         goto -> bb5;                     // scope 1 at $DIR/unreachable.rs:+2:5: +6:6\n++         goto -> bb3;                     // scope 1 at $DIR/unreachable.rs:+2:5: +6:6\n+      }\n+  \n+-     bb5: {\n++     bb3: {\n+          StorageDead(_3);                 // scope 1 at $DIR/unreachable.rs:+6:5: +6:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/unreachable.rs:+7:1: +7:2\n++         nop;                             // scope 0 at $DIR/unreachable.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/unreachable.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "ae63d724d0a51bfc6f205e4254e6209aa10b58c6", "filename": "tests/mir-opt/dest-prop/unreachable.f.DestinationPropagation.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/dest-prop/unreachable.f.DestinationPropagation.diff"}, {"sha": "e950dbbf5c917763046846b91840a027ad28f39d", "filename": "tests/mir-opt/dest-prop/unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdest-prop%2Funreachable.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Check that unreachable code is removed after the destination propagation.\n // Regression test for issue #105428.\n //"}, {"sha": "a10c5a79019681711155f36d610b04670db37172", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.panic-abort.diff", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,129 @@\n+- // MIR for `float_to_exponential_common` before ConstProp\n++ // MIR for `float_to_exponential_common` after ConstProp\n+  \n+  fn float_to_exponential_common(_1: &mut Formatter<'_>, _2: &T, _3: bool) -> Result<(), std::fmt::Error> {\n+      debug fmt => _1;                     // in scope 0 at $DIR/funky_arms.rs:+0:35: +0:38\n+      debug num => _2;                     // in scope 0 at $DIR/funky_arms.rs:+0:60: +0:63\n+      debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:+0:69: +0:74\n+      let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at $DIR/funky_arms.rs:+0:85: +0:91\n+      let _4: bool;                        // in scope 0 at $DIR/funky_arms.rs:+4:9: +4:19\n+      let mut _5: &std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+      let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/funky_arms.rs:+13:30: +13:45\n+      let mut _8: &std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+13:30: +13:45\n+      let mut _9: isize;                   // in scope 0 at $DIR/funky_arms.rs:+13:12: +13:27\n+      let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+15:43: +15:46\n+      let mut _12: &T;                     // in scope 0 at $DIR/funky_arms.rs:+15:48: +15:51\n+      let mut _13: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:+15:53: +15:57\n+      let mut _14: u32;                    // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:79\n+      let mut _15: u32;                    // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:75\n+      let mut _16: usize;                  // in scope 0 at $DIR/funky_arms.rs:+15:59: +15:68\n+      let mut _17: bool;                   // in scope 0 at $DIR/funky_arms.rs:+15:81: +15:86\n+      let mut _18: &mut std::fmt::Formatter<'_>; // in scope 0 at $DIR/funky_arms.rs:+17:46: +17:49\n+      let mut _19: &T;                     // in scope 0 at $DIR/funky_arms.rs:+17:51: +17:54\n+      let mut _20: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:+17:56: +17:60\n+      let mut _21: bool;                   // in scope 0 at $DIR/funky_arms.rs:+17:62: +17:67\n+      scope 1 {\n+          debug force_sign => _4;          // in scope 1 at $DIR/funky_arms.rs:+4:9: +4:19\n+          let _6: core::num::flt2dec::Sign; // in scope 1 at $DIR/funky_arms.rs:+8:9: +8:13\n+          scope 2 {\n+              debug sign => _6;            // in scope 2 at $DIR/funky_arms.rs:+8:9: +8:13\n+              scope 3 {\n+                  debug precision => _10;  // in scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n+                  let _10: usize;          // in scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_4);                 // scope 0 at $DIR/funky_arms.rs:+4:9: +4:19\n+          StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+          _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+          _4 = Formatter::<'_>::sign_plus(move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/funky_arms.rs:+4:22: +4:37\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:16:26: 16:35\n+                                           // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> bool {Formatter::<'_>::sign_plus}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 0 at $DIR/funky_arms.rs:+4:36: +4:37\n+          StorageLive(_6);                 // scope 1 at $DIR/funky_arms.rs:+8:9: +8:13\n+          switchInt(_4) -> [0: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:+8:16: +8:32\n+      }\n+  \n+      bb2: {\n+-         _6 = MinusPlus;                  // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n++         _6 = const MinusPlus;            // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x01)) }\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+10:17: +10:41\n+      }\n+  \n+      bb3: {\n+-         _6 = Minus;                      // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n++         _6 = const Minus;                // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: Sign, val: Value(Scalar(0x00)) }\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:+9:18: +9:38\n+      }\n+  \n+      bb4: {\n+          StorageLive(_7);                 // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+          StorageLive(_8);                 // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+          _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+          _7 = Formatter::<'_>::precision(move _8) -> [return: bb5, unwind unreachable]; // scope 3 at $DIR/funky_arms.rs:+13:30: +13:45\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:25:34: 25:43\n+                                           // + literal: Const { ty: for<'a> fn(&'a Formatter<'_>) -> Option<usize> {Formatter::<'_>::precision}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_8);                 // scope 3 at $DIR/funky_arms.rs:+13:44: +13:45\n+          _9 = discriminant(_7);           // scope 3 at $DIR/funky_arms.rs:+13:12: +13:27\n+          switchInt(move _9) -> [1: bb6, otherwise: bb8]; // scope 3 at $DIR/funky_arms.rs:+13:12: +13:27\n+      }\n+  \n+      bb6: {\n+          _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n+          StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n+          _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n+          StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n+          StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n+          _15 = _10 as u32 (IntToInt);     // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n+          _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n+          StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79\n+          _0 = float_to_exponential_common_exact::<T>(_1, _2, move _13, move _14, _3) -> [return: bb7, unwind unreachable]; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:27:9: 27:42\n+                                           // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n+          StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n+          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n+      }\n+  \n+      bb8: {\n+          StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n+          _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n+          _0 = float_to_exponential_common_shortest::<T>(_1, _2, move _20, _3) -> [return: bb9, unwind unreachable]; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:29:9: 29:45\n+                                           // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n+          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n+      }\n+  \n+      bb10: {\n+          StorageDead(_6);                 // scope 1 at $DIR/funky_arms.rs:+19:1: +19:2\n+          StorageDead(_4);                 // scope 0 at $DIR/funky_arms.rs:+19:1: +19:2\n+          StorageDead(_7);                 // scope 0 at $DIR/funky_arms.rs:+19:1: +19:2\n+          return;                          // scope 0 at $DIR/funky_arms.rs:+19:2: +19:2\n+      }\n+  }\n+  "}, {"sha": "8a4a16825195c83a4ac97a72005aa5a5b29ab34b", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff"}, {"sha": "6b4f4c80560b7ba0de98411ad6a21bc6f034e4f4", "filename": "tests/mir-opt/funky_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Ffunky_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Ffunky_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // compile-flags: --crate-type lib -Cdebug-assertions=no\n \n #![feature(flt2dec)]"}, {"sha": "16e8c2a8e5813d23d6358e718a7efb1f9c17d3e7", "filename": "tests/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.panic-abort.mir", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,82 @@\n+// MIR for `main::{closure#0}` 0 generator_drop\n+/* generator_layout = GeneratorLayout {\n+    field_tys: {\n+        _0: GeneratorSavedTy {\n+            ty: std::string::String,\n+            source_info: SourceInfo {\n+                span: $DIR/generator_drop_cleanup.rs:11:13: 11:15 (#0),\n+                scope: scope[0],\n+            },\n+            ignore_for_traits: false,\n+        },\n+    },\n+    variant_fields: {\n+        Unresumed(0): [],\n+        Returned (1): [],\n+        Panicked (2): [],\n+        Suspend0 (3): [_0],\n+    },\n+    storage_conflicts: BitMatrix(1x1) {\n+        (_0, _0),\n+    },\n+} */\n+\n+fn main::{closure#0}(_1: *mut [generator@$DIR/generator_drop_cleanup.rs:10:15: 10:17]) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    let mut _2: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    let _3: std::string::String;         // in scope 0 at $DIR/generator_drop_cleanup.rs:+1:13: +1:15\n+    let _4: ();                          // in scope 0 at $DIR/generator_drop_cleanup.rs:+2:9: +2:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+2:9: +2:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:18: +0:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    let mut _8: u32;                     // in scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    scope 1 {\n+        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator_drop_cleanup.rs:+1:13: +1:15\n+    }\n+\n+    bb0: {\n+        _8 = discriminant((*_1));        // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+        switchInt(move _8) -> [0: bb5, 3: bb8, otherwise: bb9]; // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    }\n+\n+    bb1: {\n+        StorageDead(_5);                 // scope 1 at $DIR/generator_drop_cleanup.rs:+2:13: +2:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator_drop_cleanup.rs:+2:14: +2:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n+    }\n+\n+    bb2: {\n+        nop;                             // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n+        goto -> bb6;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n+    }\n+\n+    bb3: {\n+        return;                          // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    }\n+\n+    bb5: {\n+        goto -> bb7;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    }\n+\n+    bb6: {\n+        goto -> bb3;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+3:5: +3:6\n+    }\n+\n+    bb7: {\n+        goto -> bb4;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    }\n+\n+    bb8: {\n+        StorageLive(_4);                 // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+        StorageLive(_5);                 // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+        goto -> bb1;                     // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    }\n+\n+    bb9: {\n+        return;                          // scope 0 at $DIR/generator_drop_cleanup.rs:+0:15: +3:6\n+    }\n+}"}, {"sha": "afe518642146fcd0c40e9b63678fabe8137e5812", "filename": "tests/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir"}, {"sha": "7e0d7bb59a5adc88945831121fe2587b79a6ac04", "filename": "tests/mir-opt/generator_drop_cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_drop_cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_drop_cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_drop_cleanup.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,6 @@\n #![feature(generators, generator_trait)]\n \n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n // Regression test for #58892, generator drop shims should not have blocks\n // spuriously marked as cleanup"}, {"sha": "5b24dd4602f4f549c1a32c4566d9eb81a766224c", "filename": "tests/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.panic-abort.mir", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,89 @@\n+// MIR for `main::{closure#0}` before StateTransform\n+\n+fn main::{closure#0}(_1: [generator@$DIR/generator_storage_dead_unwind.rs:22:16: 22:18], _2: ()) -> ()\n+yields ()\n+ {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator_storage_dead_unwind.rs:+0:19: +0:19\n+    let _3: Foo;                         // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+1:13: +1:14\n+    let _5: ();                          // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+    let _7: ();                          // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+4:9: +4:16\n+    let mut _8: Foo;                     // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+4:14: +4:15\n+    let _9: ();                          // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+5:9: +5:16\n+    let mut _10: Bar;                    // in scope 0 at $DIR/generator_storage_dead_unwind.rs:+5:14: +5:15\n+    scope 1 {\n+        debug a => _3;                   // in scope 1 at $DIR/generator_storage_dead_unwind.rs:+1:13: +1:14\n+        let _4: Bar;                     // in scope 1 at $DIR/generator_storage_dead_unwind.rs:+2:13: +2:14\n+        scope 2 {\n+            debug b => _4;               // in scope 2 at $DIR/generator_storage_dead_unwind.rs:+2:13: +2:14\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+1:13: +1:14\n+        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator_storage_dead_unwind.rs:+1:17: +1:23\n+        StorageLive(_4);                 // scope 1 at $DIR/generator_storage_dead_unwind.rs:+2:13: +2:14\n+        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator_storage_dead_unwind.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+        StorageLive(_6);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+        _6 = ();                         // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb6]; // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:9: +3:14\n+    }\n+\n+    bb1: {\n+        StorageDead(_6);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:14: +3:15\n+        StorageLive(_7);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:9: +4:16\n+        StorageLive(_8);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:14: +4:15\n+        _8 = move _3;                    // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:14: +4:15\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:9: +4:16\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator_storage_dead_unwind.rs:26:9: 26:13\n+                                         // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_8);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+4:16: +4:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:9: +5:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:14: +5:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:14: +5:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind unreachable]; // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:9: +5:16\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator_storage_dead_unwind.rs:27:9: 27:13\n+                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_10);                // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+5:16: +5:17\n+        _0 = const ();                   // scope 0 at $DIR/generator_storage_dead_unwind.rs:+0:19: +6:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+    }\n+\n+    bb4: {\n+        StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb5, unwind unreachable]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+    }\n+\n+    bb5: {\n+        return;                          // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:6: +6:6\n+    }\n+\n+    bb6: {\n+        StorageDead(_6);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator_storage_dead_unwind.rs:+3:14: +3:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_3) -> [return: bb7, unwind unreachable]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+    }\n+\n+    bb7: {\n+        StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb8, unwind unreachable]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+    }\n+\n+    bb8: {\n+        generator_drop;                  // scope 0 at $DIR/generator_storage_dead_unwind.rs:+0:16: +6:6\n+    }\n+}"}, {"sha": "32b472ebeeb58e43df541a2aa453343e09bff42b", "filename": "tests/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir"}, {"sha": "664f7ef67e3237723ccf407ae5ad314289ad24e5", "filename": "tests/mir-opt/generator_storage_dead_unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n // Test that we generate StorageDead on unwind paths for generators.\n //"}, {"sha": "8c68e215e4af76edd97c8a953c1cc0b8681afd05", "filename": "tests/mir-opt/inline/asm_unwind.main.Inline.panic-abort.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/asm_unwind.rs:+0:15: +0:15\n+      let _1: ();                          // in scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n++     scope 1 (inlined foo) {              // at $DIR/asm_unwind.rs:21:5: 21:10\n++         let _2: D;                       // in scope 1 at $DIR/asm_unwind.rs:15:9: 15:11\n++         scope 2 {\n++             debug _d => const D;         // in scope 2 at $DIR/asm_unwind.rs:15:9: 15:11\n++             scope 3 {\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n+-         _1 = foo() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/asm_unwind.rs:21:5: 21:8\n+-                                          // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }\n++         StorageLive(_2);                 // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n++         asm!(\"\", options(MAY_UNWIND)) -> [return: bb2, unwind terminate]; // scope 3 at $DIR/asm_unwind.rs:16:14: 16:54\n+      }\n+  \n+      bb1: {\n++         StorageDead(_2);                 // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n+          StorageDead(_1);                 // scope 0 at $DIR/asm_unwind.rs:+1:10: +1:11\n+          _0 = const ();                   // scope 0 at $DIR/asm_unwind.rs:+0:15: +2:2\n+          return;                          // scope 0 at $DIR/asm_unwind.rs:+2:2: +2:2\n++     }\n++ \n++     bb2: {\n++         drop(_2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n+      }\n+  }\n+  "}, {"sha": "ba1bfec05d21831bbfe7ce1077c011d9f5203947", "filename": "tests/mir-opt/inline/asm_unwind.main.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/asm_unwind.main.Inline.diff"}, {"sha": "a977ebf1bb7b303a3184488541886b7bc1cc4b0c", "filename": "tests/mir-opt/inline/asm_unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fasm_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fasm_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,6 @@\n // Tests inlining of `may_unwind` inline assembly.\n //\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // needs-asm-support\n #![feature(asm_unwind)]\n "}, {"sha": "8b03006782b2c106ae14214018333283e0b0af6e", "filename": "tests/mir-opt/inline/caller_with_trivial_bound.foo.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.foo.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/caller_with_trivial_bound.foo.Inline.diff"}, {"sha": "a8f101d488cae8798a4d9c27d165937ba87f55c1", "filename": "tests/mir-opt/inline/caller_with_trivial_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcaller_with_trivial_bound.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // needs-unwind\n \n #![crate_type = \"lib\"]"}, {"sha": "a4cb48e66c101507304ddd978776d719e32d5a4f", "filename": "tests/mir-opt/inline/cycle.f.Inline.panic-abort.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `f` before Inline\n++ // MIR for `f` after Inline\n+  \n+  fn f(_1: impl Fn()) -> () {\n+      debug g => _1;                       // in scope 0 at $DIR/cycle.rs:+0:6: +0:7\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:20: +0:20\n+      let _2: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+      let mut _3: &impl Fn();              // in scope 0 at $DIR/cycle.rs:+1:5: +1:6\n+      let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+          StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:6\n+          _3 = &_1;                        // scope 0 at $DIR/cycle.rs:+1:5: +1:6\n+          StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+          _4 = ();                         // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+          _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+1:5: +1:8\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:6:5: 6:6\n+                                           // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+1:7: +1:8\n+          StorageDead(_3);                 // scope 0 at $DIR/cycle.rs:+1:7: +1:8\n+          StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:8: +1:9\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:20: +2:2\n+          drop(_1) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+2:1: +2:2\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8da597577431be007ec8e0e9aba11feca384a20e", "filename": "tests/mir-opt/inline/cycle.f.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/cycle.f.Inline.diff"}, {"sha": "faa0b120ed5437141b5d0f3e49dc3689ac67acd5", "filename": "tests/mir-opt/inline/cycle.g.Inline.panic-abort.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `g` before Inline\n++ // MIR for `g` after Inline\n+  \n+  fn g() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:8: +0:8\n+      let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let mut _3: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let _4: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n+-         _1 = f::<fn() {main}>(main) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         _2 = main;                       // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n+                                           // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:12:5: 12:6\n+-                                          // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(<ZST>) }\n+-                                          // mir::Constant\n+                                           // + span: $DIR/cycle.rs:12:7: 12:11\n+                                           // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n++         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _3 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _4 = move (*_3)() -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n+      }\n+  \n+      bb1: {\n++         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:12: +1:13\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:8: +2:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n++     }\n++ \n++     bb2: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         drop(_2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/cycle.rs:7:1: 7:2\n+      }\n+  }\n+  "}, {"sha": "53bf14a0ab6e92123f3bdd3cd1f3700fa8af38c1", "filename": "tests/mir-opt/inline/cycle.g.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/cycle.g.Inline.diff"}, {"sha": "55a0f92197bcc156e65f9f048631d6f06ce0565c", "filename": "tests/mir-opt/inline/cycle.main.Inline.panic-abort.diff", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,63 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let mut _3: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let _4: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n++             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++                     debug g => main;     // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n++                     let _6: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n++                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++                     }\n++                 }\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n+-         _1 = f::<fn() {g}>(g) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         _2 = g;                          // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n+                                           // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:17:5: 17:6\n+-                                          // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(<ZST>) }\n+-                                          // mir::Constant\n+                                           // + span: $DIR/cycle.rs:17:7: 17:8\n+                                           // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n++         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _3 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _6 = main() -> [return: bb2, unwind unreachable]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:10\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n++     }\n++ \n++     bb2: {\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         drop(_2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/cycle.rs:7:1: 7:2\n+      }\n+  }\n+  "}, {"sha": "7a39aae1baf5dbf1bfebb6008f8f22b58c555646", "filename": "tests/mir-opt/inline/cycle.main.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/cycle.main.Inline.diff"}, {"sha": "af2ca895cc63770ce6ffb2fc1978cbc20bfcfb61", "filename": "tests/mir-opt/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n // EMIT_MIR cycle.f.Inline.diff\n #[inline(always)]"}, {"sha": "2e5afd6cece6a1cf302501c67820cccd8eec64be", "filename": "tests/mir-opt/inline/dyn_trait.get_query.Inline.panic-abort.diff", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,54 @@\n+- // MIR for `get_query` before Inline\n++ // MIR for `get_query` after Inline\n+  \n+  fn get_query(_1: &T) -> () {\n+      debug t => _1;                       // in scope 0 at $DIR/dyn_trait.rs:+0:31: +0:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:38: +0:38\n+      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn_trait.rs:+1:9: +1:10\n+      let mut _3: &T;                      // in scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n+      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn_trait.rs:+2:23: +2:24\n+      scope 1 {\n+          debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:+1:9: +1:10\n++         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn_trait.rs:35:5: 35:25\n++             debug c => _4;               // in scope 2 at $DIR/dyn_trait.rs:27:36: 27:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn_trait.rs:28:5: 28:16\n++                 debug c => _5;           // in scope 3 at $DIR/dyn_trait.rs:21:27: 21:28\n++             }\n++         }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:9: +1:10\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:22: +1:23\n+          _2 = <Q as Query>::cache::<T>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/dyn_trait.rs:+1:13: +1:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn_trait.rs:34:13: 34:21\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: for<'a> fn(&'a T) -> &'a <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:23: +1:24\n+          StorageLive(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n+          _4 = &(*_2);                     // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n+-         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/dyn_trait.rs:+2:5: +2:25\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++         _5 = _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:28:14: 28:15\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(_5) -> [return: bb2, unwind unreachable]; // scope 3 at $DIR/dyn_trait.rs:22:5: 22:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn_trait.rs:35:5: 35:22\n+-                                          // + literal: Const { ty: for<'a> fn(&'a <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n++                                          // + span: $DIR/dyn_trait.rs:22:7: 22:20\n++                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn_trait.rs:28:15: 28:16\n+          StorageDead(_4);                 // scope 1 at $DIR/dyn_trait.rs:+2:24: +2:25\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/dyn_trait.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "75d9bd54d5ba927db5c3a219c7f9a718bd06f709", "filename": "tests/mir-opt/inline/dyn_trait.get_query.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/dyn_trait.get_query.Inline.diff"}, {"sha": "46a1ea59bc27ac4feb582b74049314ee6ffa68a9", "filename": "tests/mir-opt/inline/dyn_trait.mk_cycle.Inline.panic-abort.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `mk_cycle` before Inline\n++ // MIR for `mk_cycle` after Inline\n+  \n+  fn mk_cycle(_1: &dyn Cache<V = V>) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn_trait.rs:+0:27: +0:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:49: +0:49\n+      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n+          _2 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n+          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn_trait.rs:22:7: 22:20\n+                                           // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:21: +1:22\n+          return;                          // scope 0 at $DIR/dyn_trait.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "925c95988b795e0b67540407a61fa24ae1da47b3", "filename": "tests/mir-opt/inline/dyn_trait.mk_cycle.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff"}, {"sha": "0faeec0bbab27405d5dc83efb9f540e711158c68", "filename": "tests/mir-opt/inline/dyn_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n #![crate_type = \"lib\"]\n \n use std::fmt::Debug;"}, {"sha": "5d84f0f508a1c073f777e15bd58b8e34263bfc85", "filename": "tests/mir-opt/inline/dyn_trait.try_execute_query.Inline.panic-abort.diff", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,33 @@\n+- // MIR for `try_execute_query` before Inline\n++ // MIR for `try_execute_query` after Inline\n+  \n+  fn try_execute_query(_1: &C) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn_trait.rs:+0:36: +0:37\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn_trait.rs:+0:43: +0:43\n+      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+      let mut _3: &C;                      // in scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n++     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn_trait.rs:28:5: 28:16\n++         debug c => _2;                   // in scope 1 at $DIR/dyn_trait.rs:21:27: 21:28\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n+-         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:16\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(_2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/dyn_trait.rs:22:5: 22:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn_trait.rs:28:5: 28:13\n+-                                          // + literal: Const { ty: for<'a> fn(&'a (dyn Cache<V = <C as Cache>::V> + 'a)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n++                                          // + span: $DIR/dyn_trait.rs:22:7: 22:20\n++                                          // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn_trait.rs:+1:15: +1:16\n+          return;                          // scope 0 at $DIR/dyn_trait.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "f4e5272abfc8a16a16707ef2b631dae33efe958e", "filename": "tests/mir-opt/inline/dyn_trait.try_execute_query.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff"}, {"sha": "967186b1989a6ad290319723a42ad53090325f51", "filename": "tests/mir-opt/inline/exponential_runtime.main.Inline.panic-abort.diff", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,175 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/exponential_runtime.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++     scope 1 (inlined <() as G>::call) {  // at $DIR/exponential_runtime.rs:87:5: 87:22\n++         let _2: ();                      // in scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         let _3: ();                      // in scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         let _4: ();                      // in scope 1 at $DIR/exponential_runtime.rs:76:9: 76:25\n++         scope 2 (inlined <() as F>::call) { // at $DIR/exponential_runtime.rs:74:9: 74:25\n++             let _5: ();                  // in scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++             let _6: ();                  // in scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++             let _7: ();                  // in scope 2 at $DIR/exponential_runtime.rs:64:9: 64:25\n++             scope 3 (inlined <() as E>::call) { // at $DIR/exponential_runtime.rs:62:9: 62:25\n++                 let _8: ();              // in scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++                 let _9: ();              // in scope 3 at $DIR/exponential_runtime.rs:51:9: 51:25\n++                 let _10: ();             // in scope 3 at $DIR/exponential_runtime.rs:52:9: 52:25\n++                 scope 4 (inlined <() as D>::call) { // at $DIR/exponential_runtime.rs:50:9: 50:25\n++                     let _11: ();         // in scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++                     let _12: ();         // in scope 4 at $DIR/exponential_runtime.rs:39:9: 39:25\n++                     let _13: ();         // in scope 4 at $DIR/exponential_runtime.rs:40:9: 40:25\n++                     scope 5 (inlined <() as C>::call) { // at $DIR/exponential_runtime.rs:38:9: 38:25\n++                         let _14: ();     // in scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++                         let _15: ();     // in scope 5 at $DIR/exponential_runtime.rs:27:9: 27:25\n++                         let _16: ();     // in scope 5 at $DIR/exponential_runtime.rs:28:9: 28:25\n++                         scope 6 (inlined <() as B>::call) { // at $DIR/exponential_runtime.rs:26:9: 26:25\n++                             let _17: (); // in scope 6 at $DIR/exponential_runtime.rs:14:9: 14:25\n++                             let _18: (); // in scope 6 at $DIR/exponential_runtime.rs:15:9: 15:25\n++                             let _19: (); // in scope 6 at $DIR/exponential_runtime.rs:16:9: 16:25\n++                         }\n++                     }\n++                 }\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n+-         _1 = <() as G>::call() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_2);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_3);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_4);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_5);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageLive(_6);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageLive(_7);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageLive(_8);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageLive(_9);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageLive(_10);                // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageLive(_11);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageLive(_12);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageLive(_13);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageLive(_14);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageLive(_15);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageLive(_16);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageLive(_17);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageLive(_18);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageLive(_19);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         _17 = <() as A>::call() -> [return: bb12, unwind unreachable]; // scope 6 at $DIR/exponential_runtime.rs:14:9: 14:25\n+                                           // mir::Constant\n+-                                          // + span: $DIR/exponential_runtime.rs:87:5: 87:20\n+-                                          // + literal: Const { ty: fn() {<() as G>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/exponential_runtime.rs:14:9: 14:23\n++                                          // + literal: Const { ty: fn() {<() as A>::call}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_4);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageDead(_3);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageDead(_2);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n+          StorageDead(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:22: +1:23\n+          _0 = const ();                   // scope 0 at $DIR/exponential_runtime.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/exponential_runtime.rs:+2:2: +2:2\n++     }\n++ \n++     bb2: {\n++         StorageDead(_7);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_6);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         StorageDead(_5);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _3 = <() as F>::call() -> [return: bb3, unwind unreachable]; // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb3: {\n++         _4 = <() as F>::call() -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/exponential_runtime.rs:76:9: 76:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:76:9: 76:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb4: {\n++         StorageDead(_10);                // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageDead(_9);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         StorageDead(_8);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         _6 = <() as E>::call() -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n++                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb5: {\n++         _7 = <() as E>::call() -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/exponential_runtime.rs:64:9: 64:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:64:9: 64:23\n++                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb6: {\n++         StorageDead(_13);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageDead(_12);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         StorageDead(_11);                // scope 3 at $DIR/exponential_runtime.rs:50:9: 50:25\n++         _9 = <() as D>::call() -> [return: bb7, unwind unreachable]; // scope 3 at $DIR/exponential_runtime.rs:51:9: 51:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:51:9: 51:23\n++                                          // + literal: Const { ty: fn() {<() as D>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb7: {\n++         _10 = <() as D>::call() -> [return: bb4, unwind unreachable]; // scope 3 at $DIR/exponential_runtime.rs:52:9: 52:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:52:9: 52:23\n++                                          // + literal: Const { ty: fn() {<() as D>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb8: {\n++         StorageDead(_16);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageDead(_15);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         StorageDead(_14);                // scope 4 at $DIR/exponential_runtime.rs:38:9: 38:25\n++         _12 = <() as C>::call() -> [return: bb9, unwind unreachable]; // scope 4 at $DIR/exponential_runtime.rs:39:9: 39:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:39:9: 39:23\n++                                          // + literal: Const { ty: fn() {<() as C>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb9: {\n++         _13 = <() as C>::call() -> [return: bb6, unwind unreachable]; // scope 4 at $DIR/exponential_runtime.rs:40:9: 40:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:40:9: 40:23\n++                                          // + literal: Const { ty: fn() {<() as C>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb10: {\n++         StorageDead(_19);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageDead(_18);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         StorageDead(_17);                // scope 5 at $DIR/exponential_runtime.rs:26:9: 26:25\n++         _15 = <() as B>::call() -> [return: bb11, unwind unreachable]; // scope 5 at $DIR/exponential_runtime.rs:27:9: 27:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:27:9: 27:23\n++                                          // + literal: Const { ty: fn() {<() as B>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb11: {\n++         _16 = <() as B>::call() -> [return: bb8, unwind unreachable]; // scope 5 at $DIR/exponential_runtime.rs:28:9: 28:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:28:9: 28:23\n++                                          // + literal: Const { ty: fn() {<() as B>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb12: {\n++         _18 = <() as A>::call() -> [return: bb13, unwind unreachable]; // scope 6 at $DIR/exponential_runtime.rs:15:9: 15:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:15:9: 15:23\n++                                          // + literal: Const { ty: fn() {<() as A>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb13: {\n++         _19 = <() as A>::call() -> [return: bb10, unwind unreachable]; // scope 6 at $DIR/exponential_runtime.rs:16:9: 16:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:16:9: 16:23\n++                                          // + literal: Const { ty: fn() {<() as A>::call}, val: Value(<ZST>) }\n+      }\n+  }\n+  "}, {"sha": "7fad6aba82ec195e2478d55cfa569f6affceb9e9", "filename": "tests/mir-opt/inline/exponential_runtime.main.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/exponential_runtime.main.Inline.diff"}, {"sha": "cfa9ff210f846225c8c0a44565b4330412a386b5", "filename": "tests/mir-opt/inline/exponential_runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Checks that code with exponential runtime does not have exponential behavior in inlining.\n \n trait A {"}, {"sha": "abb0263d7e48d18f701410617f057758e126d945", "filename": "tests/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.panic-abort.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `inlined_no_sanitize` before Inline\n++ // MIR for `inlined_no_sanitize` after Inline\n+  \n+  fn inlined_no_sanitize() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:37: +0:37\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n++     scope 1 (inlined no_sanitize) {      // at $DIR/inline_compatibility.rs:25:5: 25:18\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n+-         _1 = no_sanitize() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_compatibility.rs:25:5: 25:16\n+-                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:18: +1:19\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:37: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "de4462227fd8d1aeca7a872f75abd2012e481804", "filename": "tests/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.panic-unwind.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -4,14 +4,14 @@\n   fn inlined_no_sanitize() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:37: +0:37\n       let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n-+     scope 1 (inlined no_sanitize) {      // at $DIR/inline_compatibility.rs:24:5: 24:18\n++     scope 1 (inlined no_sanitize) {      // at $DIR/inline_compatibility.rs:25:5: 25:18\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n -         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_compatibility.rs:24:5: 24:16\n+-                                          // + span: $DIR/inline_compatibility.rs:25:5: 25:16\n -                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n -     }\n - ", "previous_filename": "tests/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff"}, {"sha": "e758127265ebd8d004323127e3dc86cd0e6982de", "filename": "tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-abort.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `inlined_target_feature` before Inline\n++ // MIR for `inlined_target_feature` after Inline\n+  \n+  fn inlined_target_feature() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:40: +0:40\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n++     scope 1 (inlined target_feature) {   // at $DIR/inline_compatibility.rs:14:5: 14:21\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n+-         _1 = target_feature() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_compatibility.rs:14:5: 14:19\n+-                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:21: +1:22\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:40: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "9eb565bd0e71e61aefa62262b70fb3d3c627e731", "filename": "tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.panic-unwind.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -4,14 +4,14 @@\n   fn inlined_target_feature() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:40: +0:40\n       let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n-+     scope 1 (inlined target_feature) {   // at $DIR/inline_compatibility.rs:13:5: 13:21\n++     scope 1 (inlined target_feature) {   // at $DIR/inline_compatibility.rs:14:5: 14:21\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n -         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_compatibility.rs:13:5: 13:19\n+-                                          // + span: $DIR/inline_compatibility.rs:14:5: 14:19\n -                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n -     }\n - ", "previous_filename": "tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff"}, {"sha": "124435cd258ef85672f12bf1d4db7f1212c2f251", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.panic-abort.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `not_inlined_c_variadic` before Inline\n++ // MIR for `not_inlined_c_variadic` after Inline\n+  \n+  fn not_inlined_c_variadic() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:40: +0:40\n+      let _1: u32;                         // in scope 0 at $DIR/inline_compatibility.rs:+1:9: +1:10\n+      scope 1 {\n+          debug s => _1;                   // in scope 1 at $DIR/inline_compatibility.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:9: +1:10\n+          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_compatibility.rs:+1:13: +1:52\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline_compatibility.rs:43:13: 43:16\n+                                           // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:40: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "775f3af76b6cfd2ac2ebc023c63bac76bc9c3193", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.panic-unwind.diff", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:9: +1:10\n           _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline_compatibility.rs:+1:13: +1:52\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_compatibility.rs:42:13: 42:16\n+                                           // + span: $DIR/inline_compatibility.rs:43:13: 43:16\n                                            // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(<ZST>) }\n       }\n   ", "previous_filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.diff"}, {"sha": "21dc2ee8da1f88d679ff12ea9a864d9b5b6997d8", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.panic-abort.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `not_inlined_no_sanitize` before Inline\n++ // MIR for `not_inlined_no_sanitize` after Inline\n+  \n+  fn not_inlined_no_sanitize() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:41: +0:41\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n+          _1 = no_sanitize() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline_compatibility.rs:30:5: 30:16\n+                                           // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:18: +1:19\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:41: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8ef5b8ba98e5ed7b85aba50e1a184882e81e1f0d", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.panic-unwind.diff", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -9,7 +9,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n           _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_compatibility.rs:29:5: 29:16\n+                                           // + span: $DIR/inline_compatibility.rs:30:5: 30:16\n                                            // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n       }\n   ", "previous_filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff"}, {"sha": "02feec05befdea29e70312a68e7d7849d4050af8", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `not_inlined_target_feature` before Inline\n++ // MIR for `not_inlined_target_feature` after Inline\n+  \n+  fn not_inlined_target_feature() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:44: +0:44\n+      let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n+          _1 = target_feature() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline_compatibility.rs:19:5: 19:19\n+                                           // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:21: +1:22\n+          _0 = const ();                   // scope 0 at $DIR/inline_compatibility.rs:+0:44: +2:2\n+          return;                          // scope 0 at $DIR/inline_compatibility.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "2523162dfff921dcabf3372166037ab31b903603", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -9,7 +9,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n           _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_compatibility.rs:18:5: 18:19\n+                                           // + span: $DIR/inline_compatibility.rs:19:5: 19:19\n                                            // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n       }\n   ", "previous_filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff"}, {"sha": "1527fea1c93c1c57d27dcc0384aad28177912540", "filename": "tests/mir-opt/inline/inline_compatibility.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,7 @@\n // Checks that only functions with compatible attributes are inlined.\n //\n // only-x86_64\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n \n #![crate_type = \"lib\"]\n #![feature(no_sanitize)]"}, {"sha": "228a34a492ebd1ad35a64bf55d3918416561172b", "filename": "tests/mir-opt/inline/inline_cycle.one.Inline.panic-abort.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `one` before Inline\n++ // MIR for `one` after Inline\n+  \n+  fn one() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n+      let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:15:5: 15:24\n++         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:44:9: 44:23\n++             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:29:9: 29:31\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n+-         _1 = <C as Call>::call() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n++         _1 = <C as Call>::call() -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/inline_cycle.rs:37:9: 37:28\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline_cycle.rs:15:5: 15:22\n++                                          // + span: $DIR/inline_cycle.rs:37:9: 37:26\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:24: +1:25\n+          _0 = const ();                   // scope 0 at $DIR/inline_cycle.rs:+0:10: +2:2\n+          return;                          // scope 0 at $DIR/inline_cycle.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "f6ba69a1d294072736b4e0bd24fe7d87749e4a09", "filename": "tests/mir-opt/inline/inline_cycle.one.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_cycle.one.Inline.diff"}, {"sha": "42a6914c96516680b7c0212fc030c381d64cd75b", "filename": "tests/mir-opt/inline/inline_cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Check that inliner handles various forms of recursion and doesn't fall into\n // an infinite inlining cycle. The particular outcome of inlining is not\n // crucial otherwise."}, {"sha": "123fa5cb9132f7b25101cca1db95cda89c424547", "filename": "tests/mir-opt/inline/inline_cycle.two.Inline.panic-abort.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `two` before Inline\n++ // MIR for `two` after Inline\n+  \n+  fn two() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n+      let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++     let mut _2: fn() {f};                // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:55:5: 55:8\n++     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:50:5: 50:12\n++         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:54:22: 54:23\n++         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8\n++             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 scope 4 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:60:5: 60:12\n++                     debug f => f;        // in scope 4 at $DIR/inline_cycle.rs:54:22: 54:23\n++                     let _5: ();          // in scope 4 at $DIR/inline_cycle.rs:55:5: 55:8\n++                     scope 5 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8\n++                     }\n++                 }\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n+-         _1 = call::<fn() {f}>(f) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++         StorageLive(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++         _2 = f;                          // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline_cycle.rs:50:5: 50:9\n+-                                          // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n+-                                          // mir::Constant\n+                                           // + span: $DIR/inline_cycle.rs:50:10: 50:11\n+                                           // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n++         StorageLive(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _5 = f() -> [return: bb1, unwind unreachable]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8\n++         StorageDead(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:12: +1:13\n+          _0 = const ();                   // scope 0 at $DIR/inline_cycle.rs:+0:10: +2:2\n+          return;                          // scope 0 at $DIR/inline_cycle.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "48f0bd10301834497767e45a5d9e437c4292fdef", "filename": "tests/mir-opt/inline/inline_cycle.two.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_cycle.two.Inline.diff"}, {"sha": "25a97cf0210181885a77976ad10afb53fa7bc13e", "filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.panic-abort.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle_generic.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:10:5: 10:24\n++         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:39:9: 39:31\n++             scope 3 (inlined <A as Call>::call) { // at $DIR/inline_cycle_generic.rs:32:9: 32:28\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n+-         _1 = <C as Call>::call() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n++         _1 = <B<C> as Call>::call() -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/inline_cycle_generic.rs:24:9: 24:31\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline_cycle_generic.rs:10:5: 10:22\n+-                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/inline_cycle_generic.rs:24:9: 24:29\n++                                          // + literal: Const { ty: fn() {<B<C> as Call>::call}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:24: +1:25\n+          _0 = const ();                   // scope 0 at $DIR/inline_cycle_generic.rs:+0:11: +2:2\n+          return;                          // scope 0 at $DIR/inline_cycle_generic.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "8696e624b2237d9782466dadf2fb59c16de23974", "filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.diff"}, {"sha": "ef261b04c8085e9cba79b0d43635ae04be41a46e", "filename": "tests/mir-opt/inline/inline_cycle_generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Check that inliner handles various forms of recursion and doesn't fall into\n // an infinite inlining cycle. The particular outcome of inlining is not\n // crucial otherwise."}, {"sha": "a818e7355baa74f53681f5cbb517a42c7d7a8edc", "filename": "tests/mir-opt/inline/inline_diverging.f.Inline.panic-abort.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `f` before Inline\n++ // MIR for `f` after Inline\n+  \n+  fn f() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_diverging.rs:+0:12: +0:12\n+      let mut _1: !;                       // in scope 0 at $DIR/inline_diverging.rs:+0:12: +2:2\n+      let _2: !;                           // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n++     scope 1 (inlined sleep) {            // at $DIR/inline_diverging.rs:8:5: 8:12\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n+-         _2 = sleep() -> unwind unreachable; // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_diverging.rs:8:5: 8:10\n+-                                          // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n++         goto -> bb1;                     // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:12\n++     }\n++ \n++     bb1: {\n++         goto -> bb1;                     // scope 1 at $DIR/inline_diverging.rs:39:5: 39:12\n+      }\n+  }\n+  "}, {"sha": "b49191f495b945d3e601ee9e1500b322fe67111b", "filename": "tests/mir-opt/inline/inline_diverging.f.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_diverging.f.Inline.diff"}, {"sha": "77a156a513e60dda89bc284febb588f979886026", "filename": "tests/mir-opt/inline/inline_diverging.g.Inline.panic-abort.diff", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,49 @@\n+- // MIR for `g` before Inline\n++ // MIR for `g` after Inline\n+  \n+  fn g(_1: i32) -> u32 {\n+      debug i => _1;                       // in scope 0 at $DIR/inline_diverging.rs:+0:10: +0:11\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/inline_diverging.rs:+0:21: +0:24\n+      let mut _2: bool;                    // in scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+      let mut _3: i32;                     // in scope 0 at $DIR/inline_diverging.rs:+1:8: +1:9\n+      let mut _4: i32;                     // in scope 0 at $DIR/inline_diverging.rs:+2:9: +2:10\n+      let mut _5: !;                       // in scope 0 at $DIR/inline_diverging.rs:+3:12: +5:6\n+      let _6: !;                           // in scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n++     scope 1 (inlined panic) {            // at $DIR/inline_diverging.rs:16:9: 16:16\n++         let mut _7: !;                   // in scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:9\n+          _3 = _1;                         // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:9\n+          _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_diverging.rs:+1:12: +1:13\n+          switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/inline_diverging.rs:+1:8: +1:13\n+      }\n+  \n+      bb1: {\n+          StorageLive(_4);                 // scope 0 at $DIR/inline_diverging.rs:+2:9: +2:10\n+          _4 = _1;                         // scope 0 at $DIR/inline_diverging.rs:+2:9: +2:10\n+          _0 = move _4 as u32 (IntToInt);  // scope 0 at $DIR/inline_diverging.rs:+2:9: +2:17\n+          StorageDead(_4);                 // scope 0 at $DIR/inline_diverging.rs:+2:16: +2:17\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_diverging.rs:+5:5: +5:6\n+          return;                          // scope 0 at $DIR/inline_diverging.rs:+6:2: +6:2\n+      }\n+  \n+      bb2: {\n+          StorageLive(_6);                 // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n+-         _6 = panic() -> unwind unreachable; // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n++         StorageLive(_7);                 // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n++         _7 = begin_panic::<&str>(const \"explicit panic\") -> unwind unreachable; // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline_diverging.rs:16:9: 16:14\n+-                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n++                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n++                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+      }\n+  }\n+  "}, {"sha": "4f22ad43700ac27e783bea4682f95e4e87abc22b", "filename": "tests/mir-opt/inline/inline_diverging.g.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_diverging.g.Inline.diff"}, {"sha": "b864cbdfad0dc4817726d8d3f8900fe5ec7542bf", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.panic-abort.diff", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,51 @@\n+- // MIR for `h` before Inline\n++ // MIR for `h` after Inline\n+  \n+  fn h() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_diverging.rs:+0:12: +0:12\n+      let _1: (!, !);                      // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++     let mut _7: ();                      // in scope 0 at $DIR/inline_diverging.rs:27:13: 27:16\n++     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline_diverging.rs:22:5: 22:22\n++         debug f => _2;                   // in scope 1 at $DIR/inline_diverging.rs:26:36: 26:37\n++         let mut _3: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         let mut _4: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n++         let mut _5: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14\n++         let mut _6: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n++         scope 2 {\n++             debug a => _4;               // in scope 2 at $DIR/inline_diverging.rs:27:9: 27:10\n++             scope 3 {\n++                 debug b => _6;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n++             }\n++         }\n++         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n++             scope 5 (inlined sleep) {    // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n+-         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep) -> unwind unreachable; // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         StorageLive(_2);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         _2 = sleep;                      // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline_diverging.rs:22:5: 22:15\n+-                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(<ZST>) }\n+-                                          // mir::Constant\n+                                           // + span: $DIR/inline_diverging.rs:22:16: 22:21\n+                                           // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n++         StorageLive(_4);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         StorageLive(_6);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         StorageLive(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         _3 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         StorageLive(_7);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         _7 = const ();                   // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n++     }\n++ \n++     bb1: {\n++         goto -> bb1;                     // scope 5 at $DIR/inline_diverging.rs:39:5: 39:12\n+      }\n+  }\n+  "}, {"sha": "78cd47c5f4bf4f845a18fda65a2214abb5e95d49", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff"}, {"sha": "febf1a8a6bf57c3ea8c172c6864cdaf8c1c2f12b", "filename": "tests/mir-opt/inline/inline_diverging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,6 +1,6 @@\n // Tests inlining of diverging calls.\n //\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n #![crate_type = \"lib\"]\n \n // EMIT_MIR inline_diverging.f.Inline.diff"}, {"sha": "21a8bf09254ef03dba6cc8bb2746f48185572b39", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.panic-abort.diff", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,127 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_generator.rs:+0:11: +0:11\n+      let _1: std::ops::GeneratorState<i32, bool>; // in scope 0 at $DIR/inline_generator.rs:+1:9: +1:11\n+      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n+      let mut _3: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n+      let mut _4: [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n++     let mut _5: bool;                    // in scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n+      scope 1 {\n+          debug _r => _1;                  // in scope 1 at $DIR/inline_generator.rs:+1:9: +1:11\n+      }\n++     scope 2 (inlined g) {                // at $DIR/inline_generator.rs:9:28: 9:31\n++     }\n++     scope 3 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new) { // at $DIR/inline_generator.rs:9:14: 9:32\n++         debug pointer => _3;             // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         scope 4 {\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new_unchecked) { // at $SRC_DIR/core/src/pin.rs:LL:COL\n++                 debug pointer => _3;     // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++             }\n++         }\n++     }\n++     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline_generator.rs:9:33: 9:46\n++         debug a => _5;                   // in scope 6 at $DIR/inline_generator.rs:15:6: 15:7\n++         let mut _6: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _7: u32;                 // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _8: i32;                 // in scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         let mut _9: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _10: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_generator.rs:+1:9: +1:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n+          StorageLive(_4);                 // scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n+-         _4 = g() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_generator.rs:9:28: 9:29\n+-                                          // + literal: Const { ty: fn() -> impl Generator<bool> {g}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb1: {\n++         _4 = [generator@$DIR/inline_generator.rs:15:5: 15:8 (#0)]; // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n++                                          // generator\n++                                          // + def_id: DefId(0:7 ~ inline_generator[e37e]::g::{closure#0})\n++                                          // + substs: [\n++                                          //     bool,\n++                                          //     i32,\n++                                          //     bool,\n++                                          //     {bool, i32},\n++                                          //     (),\n++                                          // ]\n++                                          // + movability: Movable\n+          _3 = &mut _4;                    // scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n+-         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_generator.rs:9:14: 9:22\n+-                                          // + user_ty: UserType(0)\n+-                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]) -> Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> {Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb2: {\n++         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> { pointer: move _3 }; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_generator.rs:+1:31: +1:32\n+-         _1 = <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_generator.rs:9:33: 9:39\n+-                                          // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n++         StorageLive(_5);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n++         _5 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n++         _6 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         _7 = discriminant((*_6));        // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         switchInt(move _7) -> [0: bb2, 1: bb6, 3: bb7, otherwise: bb8]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n+      }\n+  \n+-     bb3: {\n++     bb1: {\n++         StorageDead(_5);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_generator.rs:+1:45: +1:46\n+          StorageDead(_4);                 // scope 0 at $DIR/inline_generator.rs:+1:46: +1:47\n+          _0 = const ();                   // scope 0 at $DIR/inline_generator.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_generator.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline_generator.rs:+2:2: +2:2\n++     }\n++ \n++     bb2: {\n++         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         switchInt(_5) -> [0: bb3, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++     }\n++ \n++     bb3: {\n++         _8 = const 13_i32;               // scope 6 at $DIR/inline_generator.rs:15:35: 15:37\n++         goto -> bb5;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++     }\n++ \n++     bb4: {\n++         _8 = const 7_i32;                // scope 6 at $DIR/inline_generator.rs:15:24: 15:25\n++         goto -> bb5;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++     }\n++ \n++     bb5: {\n++         _1 = GeneratorState::<i32, bool>::Yielded(move _8); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         _9 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         discriminant((*_9)) = 3;         // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:11: 15:39\n++     }\n++ \n++     bb6: {\n++         assert(const false, \"generator resumed after completion\") -> [success: bb6, unwind unreachable]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++     }\n++ \n++     bb7: {\n++         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n++         _1 = GeneratorState::<i32, bool>::Complete(_5); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         discriminant((*_10)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:41: 15:41\n++     }\n++ \n++     bb8: {\n++         unreachable;                     // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n+      }\n+  }\n+  "}, {"sha": "0dcae1e4d45f98a5c6a757b6b1e5d2152b53ee81", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff"}, {"sha": "61f1da897bd1059f76a6201a7345daab5cb690fb", "filename": "tests/mir-opt/inline/inline_generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;"}, {"sha": "3b3b29af3942f0d6dfceffa2fb0d4b3e9f1820bd", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.panic-abort.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_into_box_place.rs:+0:11: +0:11\n+      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n+      let mut _2: std::vec::Vec<u32>;      // in scope 0 at $DIR/inline_into_box_place.rs:+1:38: +1:48\n+      scope 1 {\n+          debug _x => _1;                  // in scope 1 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n+      }\n++     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline_into_box_place.rs:8:38: 8:48\n++         let mut _3: alloc::raw_vec::RawVec<u32>; // in scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++     }\n++     scope 3 (inlined Box::<Vec<u32>>::new) { // at $DIR/inline_into_box_place.rs:8:29: 8:49\n++         debug x => _2;                   // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _4: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _5: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _6: *mut u8;             // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _7: *const std::vec::Vec<u32>; // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         scope 4 {\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:38: +1:48\n+-         _2 = Vec::<u32>::new() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_into_box_place.rs:+1:38: +1:48\n++         StorageLive(_3);                 // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _3 = const _;                    // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline_into_box_place.rs:8:38: 8:46\n+-                                          // + user_ty: UserType(2)\n+-                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++                                          // + user_ty: UserType(0)\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n++         _2 = Vec::<u32> { buf: move _3, len: const 0_usize }; // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_3);                 // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _4 = SizeOf(std::vec::Vec<u32>); // scope 4 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _5 = AlignOf(std::vec::Vec<u32>); // scope 4 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb2, unwind unreachable]; // scope 4 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         _1 = Box::<Vec<u32>>::new(move _2) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:49\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_into_box_place.rs:8:29: 8:37\n+-                                          // + user_ty: UserType(1)\n+-                                          // + literal: Const { ty: fn(Vec<u32>) -> Box<Vec<u32>> {Box::<Vec<u32>>::new}, val: Value(<ZST>) }\n++         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n++         return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2\n+      }\n+  \n+      bb2: {\n++         _1 = ShallowInitBox(move _6, std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _7 = (((_1.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         (*_7) = move _2;                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:48: +1:49\n+          _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2\n+-         drop(_1) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n+-     }\n+- \n+-     bb3: {\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n+-         return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2\n++         drop(_1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n+      }\n+  }\n+  "}, {"sha": "a5129e0e8c8e11fbf53c11186d47fd35d6498635", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.diff"}, {"sha": "bc578ec90e8427bcd2a9578c27271a64213b9152", "filename": "tests/mir-opt/inline/inline_into_box_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,5 +1,5 @@\n // ignore-endian-big\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // ignore-debug MIR alignment checks in std alter the diff, breaking the test\n // compile-flags: -Z mir-opt-level=4\n "}, {"sha": "755ef3fa3d8a9e469a224bbbe259cad0f712ab03", "filename": "tests/mir-opt/inline/inline_options.main.Inline.after.panic-abort.mir", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,55 @@\n+// MIR for `main` after Inline\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/inline_options.rs:+0:11: +0:11\n+    let _1: ();                          // in scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n+    let _2: ();                          // in scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+    scope 1 (inlined inlined::<u32>) {   // at $DIR/inline_options.rs:11:5: 11:21\n+        let _3: ();                      // in scope 1 at $DIR/inline_options.rs:17:23: 17:26\n+        let _4: ();                      // in scope 1 at $DIR/inline_options.rs:17:28: 17:31\n+        let _5: ();                      // in scope 1 at $DIR/inline_options.rs:17:33: 17:36\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n+        _1 = not_inlined() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_options.rs:+1:5: +1:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline_options.rs:10:5: 10:16\n+                                         // + literal: Const { ty: fn() {not_inlined}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_1);                 // scope 0 at $DIR/inline_options.rs:+1:18: +1:19\n+        StorageLive(_2);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageLive(_3);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageLive(_4);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageLive(_5);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        _3 = g() -> [return: bb3, unwind unreachable]; // scope 1 at $DIR/inline_options.rs:17:23: 17:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline_options.rs:17:23: 17:24\n+                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_5);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageDead(_4);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageDead(_3);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageDead(_2);                 // scope 0 at $DIR/inline_options.rs:+2:21: +2:22\n+        _0 = const ();                   // scope 0 at $DIR/inline_options.rs:+0:11: +3:2\n+        return;                          // scope 0 at $DIR/inline_options.rs:+3:2: +3:2\n+    }\n+\n+    bb3: {\n+        _4 = g() -> [return: bb4, unwind unreachable]; // scope 1 at $DIR/inline_options.rs:17:28: 17:31\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline_options.rs:17:28: 17:29\n+                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n+    }\n+\n+    bb4: {\n+        _5 = g() -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/inline_options.rs:17:33: 17:36\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline_options.rs:17:33: 17:34\n+                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n+    }\n+}"}, {"sha": "a2938ead0dc141b4fd2d70815edf4b0041c97b49", "filename": "tests/mir-opt/inline/inline_options.main.Inline.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_options.main.Inline.after.mir"}, {"sha": "b247ecd0bc0a124a04237df65453a49cbf0a008a", "filename": "tests/mir-opt/inline/inline_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // Checks that inlining threshold can be controlled with\n // inline-mir-threshold and inline-hint-threshold options.\n //"}, {"sha": "d8521bb1d6280f65e1403d65b24d6ad678c1c4aa", "filename": "tests/mir-opt/inline/inline_shims.clone.Inline.panic-abort.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `clone` before Inline\n++ // MIR for `clone` after Inline\n+  \n+  fn clone(_1: fn(A, B)) -> fn(A, B) {\n+      debug f => _1;                       // in scope 0 at $DIR/inline_shims.rs:+0:20: +0:21\n+      let mut _0: fn(A, B);                // return place in scope 0 at $DIR/inline_shims.rs:+0:36: +0:44\n+      let mut _2: &fn(A, B);               // in scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n++     scope 1 (inlined <fn(A, B) as Clone>::clone - shim(fn(A, B))) { // at $DIR/inline_shims.rs:6:7: 6:14\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n+          _2 = &_1;                        // scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n+-         _0 = <fn(A, B) as Clone>::clone(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_shims.rs:+1:5: +1:14\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_shims.rs:6:7: 6:12\n+-                                          // + literal: Const { ty: for<'a> fn(&'a fn(A, B)) -> fn(A, B) {<fn(A, B) as Clone>::clone}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb1: {\n++         _0 = (*_2);                      // scope 1 at $SRC_DIR/core/src/clone.rs:LL:COL\n+          StorageDead(_2);                 // scope 0 at $DIR/inline_shims.rs:+1:13: +1:14\n+          return;                          // scope 0 at $DIR/inline_shims.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "09dd35c4c68b142af5c59ecf219ebcd5ce983aa9", "filename": "tests/mir-opt/inline/inline_shims.clone.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_shims.clone.Inline.diff"}, {"sha": "49b36f0d91b6e4c49101821f394e310dd01ef8ad", "filename": "tests/mir-opt/inline/inline_shims.drop.Inline.panic-abort.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `drop` before Inline\n++ // MIR for `drop` after Inline\n+  \n+  fn drop(_1: *mut Vec<A>, _2: *mut Option<B>) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/inline_shims.rs:+0:19: +0:20\n+      debug b => _2;                       // in scope 0 at $DIR/inline_shims.rs:+0:35: +0:36\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_shims.rs:+0:54: +0:54\n+      let _3: ();                          // in scope 0 at $DIR/inline_shims.rs:+1:14: +1:40\n+      let mut _4: *mut std::vec::Vec<A>;   // in scope 0 at $DIR/inline_shims.rs:+1:38: +1:39\n+      let mut _5: *mut std::option::Option<B>; // in scope 0 at $DIR/inline_shims.rs:+2:38: +2:39\n+      scope 1 {\n++         scope 3 (inlined std::ptr::drop_in_place::<Vec<A>> - shim(Some(Vec<A>))) { // at $DIR/inline_shims.rs:11:14: 11:40\n++             let mut _6: &mut std::vec::Vec<A>; // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++             let mut _7: ();              // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++         }\n+      }\n+      scope 2 {\n++         scope 4 (inlined std::ptr::drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline_shims.rs:12:14: 12:40\n++             let mut _8: isize;           // in scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++             let mut _9: isize;           // in scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++         }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/inline_shims.rs:+1:5: +1:42\n+          StorageLive(_4);                 // scope 1 at $DIR/inline_shims.rs:+1:38: +1:39\n+          _4 = _1;                         // scope 1 at $DIR/inline_shims.rs:+1:38: +1:39\n+-         _3 = std::ptr::drop_in_place::<Vec<A>>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/inline_shims.rs:+1:14: +1:40\n++         StorageLive(_6);                 // scope 1 at $DIR/inline_shims.rs:+1:14: +1:40\n++         StorageLive(_7);                 // scope 1 at $DIR/inline_shims.rs:+1:14: +1:40\n++         _6 = &mut (*_4);                 // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++         _7 = <Vec<A> as Drop>::drop(move _6) -> [return: bb2, unwind unreachable]; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline_shims.rs:11:14: 11:37\n+-                                          // + literal: Const { ty: unsafe fn(*mut Vec<A>) {std::ptr::drop_in_place::<Vec<A>>}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++                                          // + literal: Const { ty: for<'a> fn(&'a mut Vec<A>) {<Vec<A> as Drop>::drop}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_7);                 // scope 1 at $DIR/inline_shims.rs:+1:14: +1:40\n++         StorageDead(_6);                 // scope 1 at $DIR/inline_shims.rs:+1:14: +1:40\n+          StorageDead(_4);                 // scope 1 at $DIR/inline_shims.rs:+1:39: +1:40\n+          StorageDead(_3);                 // scope 0 at $DIR/inline_shims.rs:+1:41: +1:42\n+          StorageLive(_5);                 // scope 2 at $DIR/inline_shims.rs:+2:38: +2:39\n+          _5 = _2;                         // scope 2 at $DIR/inline_shims.rs:+2:38: +2:39\n+-         _0 = std::ptr::drop_in_place::<Option<B>>(move _5) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_shims.rs:12:14: 12:37\n+-                                          // + literal: Const { ty: unsafe fn(*mut Option<B>) {std::ptr::drop_in_place::<Option<B>>}, val: Value(<ZST>) }\n++         StorageLive(_8);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n++         StorageLive(_9);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n++         _8 = discriminant((*_5));        // scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++         switchInt(move _8) -> [0: bb3, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+      }\n+  \n+      bb2: {\n++         drop(((*_4).0: alloc::raw_vec::RawVec<A>)) -> [return: bb1, unwind unreachable]; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++     }\n++ \n++     bb3: {\n++         StorageDead(_9);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n++         StorageDead(_8);                 // scope 2 at $DIR/inline_shims.rs:+2:14: +2:40\n+          StorageDead(_5);                 // scope 2 at $DIR/inline_shims.rs:+2:39: +2:40\n+          return;                          // scope 0 at $DIR/inline_shims.rs:+3:2: +3:2\n++     }\n++ \n++     bb4: {\n++         drop((((*_5) as Some).0: B)) -> [return: bb3, unwind unreachable]; // scope 4 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+      }\n+  }\n+  "}, {"sha": "36ddb189e0d3365eabea7fa2a977a89d9cb29fdf", "filename": "tests/mir-opt/inline/inline_shims.drop.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_shims.drop.Inline.diff"}, {"sha": "eafbb962efb7359a7b95d80cd783f28dcb443f71", "filename": "tests/mir-opt/inline/inline_shims.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_shims.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n #![crate_type = \"lib\"]\n \n // EMIT_MIR inline_shims.clone.Inline.diff"}, {"sha": "451c90b160550c9dde48791942f04fd43020a2bd", "filename": "tests/mir-opt/inline/inline_specialization.main.Inline.panic-abort.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.panic-abort.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline_specialization.rs:+0:11: +0:11\n+      let _1: u32;                         // in scope 0 at $DIR/inline_specialization.rs:+1:9: +1:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/inline_specialization.rs:+1:9: +1:10\n+      }\n++     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline_specialization.rs:6:13: 6:38\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline_specialization.rs:+1:9: +1:10\n+-         _1 = <Vec<()> as Foo>::bar() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_specialization.rs:+1:13: +1:38\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_specialization.rs:6:13: 6:36\n+-                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb1: {\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline_specialization.rs:15:31: 15:34\n+          _0 = const ();                   // scope 0 at $DIR/inline_specialization.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline_specialization.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/inline_specialization.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "9dde9994d1d1ffae9dc23e221579b3df8168552e", "filename": "tests/mir-opt/inline/inline_specialization.main.Inline.panic-unwind.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.panic-unwind.diff?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_specialization.main.Inline.diff"}, {"sha": "0311531dc3fa214fee87f396e2b74d5e402a2499", "filename": "tests/mir-opt/inline/inline_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_specialization.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n #![feature(specialization)]\n \n // EMIT_MIR inline_specialization.main.Inline.diff"}, {"sha": "a9d2168c2ec15b3602a1f4f46765cffec2efb0bf", "filename": "tests/mir-opt/inline/inline_trait_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // compile-flags: -Z span_free_formats\n \n fn main() {"}, {"sha": "a6496bf5f0de663864d453e98c4d1d41da11489b", "filename": "tests/mir-opt/inline/inline_trait_method.test.Inline.after.panic-abort.mir", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,21 @@\n+// MIR for `test` after Inline\n+\n+fn test(_1: &dyn X) -> u32 {\n+    debug x => _1;                       // in scope 0 at $DIR/inline_trait_method.rs:+0:9: +0:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/inline_trait_method.rs:+0:23: +0:26\n+    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n+        _2 = &(*_1);                     // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n+        _0 = <dyn X as X>::y(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_trait_method.rs:+1:5: +1:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline_trait_method.rs:10:7: 10:8\n+                                         // + literal: Const { ty: for<'a> fn(&'a dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_2);                 // scope 0 at $DIR/inline_trait_method.rs:+1:9: +1:10\n+        return;                          // scope 0 at $DIR/inline_trait_method.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "a9020a5bbb7c4ab68235313cd9a18199e420bd9e", "filename": "tests/mir-opt/inline/inline_trait_method.test.Inline.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_trait_method.test.Inline.after.mir"}, {"sha": "62ec7ebde6a994094a40083fa71ce2fa189851cb", "filename": "tests/mir-opt/inline/inline_trait_method_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.rs?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32 compiled with panic=abort by default\n+// EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // compile-flags: -Z span_free_formats -Z mir-opt-level=4\n \n // EMIT_MIR inline_trait_method_2.test2.Inline.after.mir"}, {"sha": "8e37c7dca6c014f674d6d13decef94685983589d", "filename": "tests/mir-opt/inline/inline_trait_method_2.test2.Inline.after.panic-abort.mir", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.panic-abort.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "patch": "@@ -0,0 +1,28 @@\n+// MIR for `test2` after Inline\n+\n+fn test2(_1: &dyn X) -> bool {\n+    debug x => _1;                       // in scope 0 at $DIR/inline_trait_method_2.rs:+0:10: +0:11\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline_trait_method_2.rs:+0:24: +0:28\n+    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+    let mut _3: &dyn X;                  // in scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+    scope 1 (inlined test) {             // at $DIR/inline_trait_method_2.rs:6:5: 6:12\n+        debug x => _2;                   // in scope 1 at $DIR/inline_trait_method_2.rs:10:9: 10:10\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        StorageLive(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        _3 = &(*_1);                     // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        StorageDead(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n+        _0 = <dyn X as X>::y(_2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/inline_trait_method_2.rs:11:5: 11:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline_trait_method_2.rs:11:7: 11:8\n+                                         // + literal: Const { ty: for<'a> fn(&'a dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_2);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:11: +1:12\n+        return;                          // scope 0 at $DIR/inline_trait_method_2.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "a4bbecf3b876e14980e6552ecb3b1a861b6fe818", "filename": "tests/mir-opt/inline/inline_trait_method_2.test2.Inline.after.panic-unwind.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/afa9fef70904bee316d5a73275397d7c4e7c8c4b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.panic-unwind.mir?ref=afa9fef70904bee316d5a73275397d7c4e7c8c4b", "previous_filename": "tests/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir"}]}