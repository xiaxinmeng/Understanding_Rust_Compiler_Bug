{"sha": "62ea39a1c95037dbdbfb49dc1b89d1b67562fddf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZWEzOWExYzk1MDM3ZGJkYmZiNDlkYzFiODlkMWI2NzU2MmZkZGY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-04T01:04:14Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-04T07:00:19Z"}, "message": "Inline and remove `constructor_intersects_pattern()`.\n\nThis is a 2% instruction count win on `unicode_normalization-check-clean`.", "tree": {"sha": "1749c5a66bdbf360da9e86d73bdcebda50fcdbfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1749c5a66bdbf360da9e86d73bdcebda50fcdbfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ea39a1c95037dbdbfb49dc1b89d1b67562fddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ea39a1c95037dbdbfb49dc1b89d1b67562fddf", "html_url": "https://github.com/rust-lang/rust/commit/62ea39a1c95037dbdbfb49dc1b89d1b67562fddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ea39a1c95037dbdbfb49dc1b89d1b67562fddf/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a1a3b9013221b90a9b02ecd23614b6e2fcf6a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1a3b9013221b90a9b02ecd23614b6e2fcf6a2d", "html_url": "https://github.com/rust-lang/rust/commit/9a1a3b9013221b90a9b02ecd23614b6e2fcf6a2d"}], "stats": {"total": 59, "additions": 26, "deletions": 33}, "files": [{"sha": "6d33c23dfdeb8341a40ff82d4a6606c3934621f8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/62ea39a1c95037dbdbfb49dc1b89d1b67562fddf/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ea39a1c95037dbdbfb49dc1b89d1b67562fddf/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=62ea39a1c95037dbdbfb49dc1b89d1b67562fddf", "patch": "@@ -1625,36 +1625,6 @@ fn split_grouped_constructors<'p, 'tcx>(\n     split_ctors\n }\n \n-/// Checks whether there exists any shared value in either `ctor` or `pat` by intersecting them.\n-fn constructor_intersects_pattern<'p, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    ctor: &Constructor<'tcx>,\n-    pat: &'p Pat<'tcx>,\n-) -> Option<SmallVec<[&'p Pat<'tcx>; 2]>> {\n-    if should_treat_range_exhaustively(tcx, ctor) {\n-        match (IntRange::from_ctor(tcx, param_env, ctor), IntRange::from_pat(tcx, param_env, pat)) {\n-            (Some(ctor), Some(pat)) => {\n-                ctor.intersection(&pat).map(|_| {\n-                    let (pat_lo, pat_hi) = pat.range.into_inner();\n-                    let (ctor_lo, ctor_hi) = ctor.range.into_inner();\n-                    assert!(pat_lo <= ctor_lo && ctor_hi <= pat_hi);\n-                    smallvec![]\n-                })\n-            }\n-            _ => None,\n-        }\n-    } else {\n-        // Fallback for non-ranges and ranges that involve floating-point numbers, which are not\n-        // conveniently handled by `IntRange`. For these cases, the constructor may not be a range\n-        // so intersection actually devolves into being covered by the pattern.\n-        match constructor_covered_by_range(tcx, param_env, ctor, pat) {\n-            Ok(true) => Some(smallvec![]),\n-            Ok(false) | Err(ErrorReported) => None,\n-        }\n-    }\n-}\n-\n fn constructor_covered_by_range<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -1845,9 +1815,32 @@ fn specialize<'p, 'a: 'p, 'tcx>(\n         PatKind::Constant { .. } |\n         PatKind::Range { .. } => {\n             // If the constructor is a:\n-            //      Single value: add a row if the pattern contains the constructor.\n-            //      Range: add a row if the constructor intersects the pattern.\n-            constructor_intersects_pattern(cx.tcx, cx.param_env, constructor, pat)\n+            // - Single value: add a row if the pattern contains the constructor.\n+            // - Range: add a row if the constructor intersects the pattern.\n+            if should_treat_range_exhaustively(cx.tcx, constructor) {\n+                match (IntRange::from_ctor(cx.tcx, cx.param_env, constructor),\n+                       IntRange::from_pat(cx.tcx, cx.param_env, pat)) {\n+                    (Some(ctor), Some(pat)) => {\n+                        ctor.intersection(&pat).map(|_| {\n+                            let (pat_lo, pat_hi) = pat.range.into_inner();\n+                            let (ctor_lo, ctor_hi) = ctor.range.into_inner();\n+                            assert!(pat_lo <= ctor_lo && ctor_hi <= pat_hi);\n+                            smallvec![]\n+                        })\n+                    }\n+                    _ => None,\n+                }\n+            } else {\n+                // Fallback for non-ranges and ranges that involve\n+                // floating-point numbers, which are not conveniently handled\n+                // by `IntRange`. For these cases, the constructor may not be a\n+                // range so intersection actually devolves into being covered\n+                // by the pattern.\n+                match constructor_covered_by_range(cx.tcx, cx.param_env, constructor, pat) {\n+                    Ok(true) => Some(smallvec![]),\n+                    Ok(false) | Err(ErrorReported) => None,\n+                }\n+            }\n         }\n \n         PatKind::Array { ref prefix, ref slice, ref suffix } |"}]}