{"sha": "6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYmU5MmU2ZWZmNmNjMWIxY2M0YjlmZGRmMTFiZmU3OWM0MzA1Nzk=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-24T12:40:57Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-24T12:40:57Z"}, "message": "Cleanup LruCache doc.", "tree": {"sha": "28808c9412d72a60e714a2f0f3f9dc34a4e06fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28808c9412d72a60e714a2f0f3f9dc34a4e06fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579", "html_url": "https://github.com/rust-lang/rust/commit/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2", "html_url": "https://github.com/rust-lang/rust/commit/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "45e971a675f56c6095bec4e001e45706cd2ea7d2", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579", "patch": "@@ -97,7 +97,7 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     ///\n     /// ```\n     /// use std::collections::LruCache;\n-    /// let mut cache: LruCache<int, &str> = LruCache::new(10u);\n+    /// let mut cache: LruCache<int, &str> = LruCache::new(10);\n     /// ```\n     pub fn new(capacity: uint) -> LruCache<K, V> {\n         let cache = LruCache {\n@@ -118,7 +118,7 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     ///\n     /// ```\n     /// use std::collections::LruCache;\n-    /// let mut cache = LruCache::new(2u);\n+    /// let mut cache = LruCache::new(2);\n     ///\n     /// cache.put(1i, \"a\");\n     /// cache.put(2, \"b\");\n@@ -161,7 +161,7 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     ///\n     /// ```\n     /// use std::collections::LruCache;\n-    /// let mut cache = LruCache::new(2u);\n+    /// let mut cache = LruCache::new(2);\n     ///\n     /// cache.put(1i, \"a\");\n     /// cache.put(2, \"b\");\n@@ -195,7 +195,7 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     ///\n     /// ```\n     /// use std::collections::LruCache;\n-    /// let mut cache = LruCache::new(2u);\n+    /// let mut cache = LruCache::new(2);\n     ///\n     /// cache.put(2i, \"a\");\n     ///\n@@ -217,7 +217,7 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     ///\n     /// ```\n     /// use std::collections::LruCache;\n-    /// let mut cache: LruCache<int, &str> = LruCache::new(2u);\n+    /// let mut cache: LruCache<int, &str> = LruCache::new(2);\n     /// assert_eq!(cache.capacity(), 2);\n     /// ```\n     pub fn capacity(&self) -> uint {\n@@ -231,7 +231,7 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     ///\n     /// ```\n     /// use std::collections::LruCache;\n-    /// let mut cache = LruCache::new(2u);\n+    /// let mut cache = LruCache::new(2);\n     ///\n     /// cache.put(1i, \"a\");\n     /// cache.put(2, \"b\");\n@@ -241,16 +241,15 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     /// assert_eq!(cache.get(&2), Some(&\"b\"));\n     /// assert_eq!(cache.get(&3), Some(&\"c\"));\n     ///\n-    /// cache.change_capacity(3u);\n+    /// cache.change_capacity(3);\n     /// cache.put(1i, \"a\");\n     /// cache.put(2, \"b\");\n-    /// cache.put(3, \"c\");\n     ///\n     /// assert_eq!(cache.get(&1), Some(&\"a\"));\n     /// assert_eq!(cache.get(&2), Some(&\"b\"));\n     /// assert_eq!(cache.get(&3), Some(&\"c\"));\n     ///\n-    /// cache.change_capacity(1u);\n+    /// cache.change_capacity(1);\n     ///\n     /// assert_eq!(cache.get(&1), None);\n     /// assert_eq!(cache.get(&2), None);"}]}