{"sha": "74804fa3e706d6217127bc6b8d2bf019a4653e74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ODA0ZmEzZTcwNmQ2MjE3MTI3YmM2YjhkMmJmMDE5YTQ2NTNlNzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T05:38:06Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T05:38:06Z"}, "message": "rustc_parser: cleanup imports", "tree": {"sha": "7f90f47988869bb0bcc4b9e6739a9f2f04450fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f90f47988869bb0bcc4b9e6739a9f2f04450fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74804fa3e706d6217127bc6b8d2bf019a4653e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74804fa3e706d6217127bc6b8d2bf019a4653e74", "html_url": "https://github.com/rust-lang/rust/commit/74804fa3e706d6217127bc6b8d2bf019a4653e74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74804fa3e706d6217127bc6b8d2bf019a4653e74/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeaaf8f640c919074983edd8366ab3d10321f2b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeaaf8f640c919074983edd8366ab3d10321f2b5", "html_url": "https://github.com/rust-lang/rust/commit/aeaaf8f640c919074983edd8366ab3d10321f2b5"}], "stats": {"total": 134, "additions": 58, "deletions": 76}, "files": [{"sha": "26727c5c1db6039702653ed28a54400d13211777", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -3806,7 +3806,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n- \"rustc_target\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\","}, {"sha": "fb5cb742ab651dbd5a4af95cc6489f57c7ba8367", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -12,12 +12,11 @@ doctest = false\n [dependencies]\n bitflags = \"1.0\"\n log = \"0.4\"\n-syntax_pos = { path = \"../libsyntax_pos\" }\n-syntax = { path = \"../libsyntax\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n-rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "30e056e52d25acd58b770a1d27145e2cb81fc5fd", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -10,6 +10,7 @@\n \n use crate::validate_attr;\n use rustc_feature::Features;\n+use rustc_errors::Applicability;\n use syntax::attr::HasAttrs;\n use syntax::feature_gate::{feature_err, get_features};\n use syntax::attr;\n@@ -21,7 +22,6 @@ use syntax::sess::ParseSess;\n use syntax::util::map_in_place::MapInPlace;\n use syntax_pos::symbol::sym;\n \n-use errors::Applicability;\n use smallvec::SmallVec;\n \n /// A folder that strips out items that do not belong in the current configuration."}, {"sha": "ddcfea189800413e35c77da51d2a5e70bcaeacbd", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,16 +1,15 @@\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{FatalError, DiagnosticBuilder};\n+use rustc_lexer::Base;\n+use rustc_lexer::unescape;\n use syntax::token::{self, Token, TokenKind};\n use syntax::sess::ParseSess;\n-use syntax::symbol::{sym, Symbol};\n use syntax::util::comments;\n-\n-use errors::{FatalError, DiagnosticBuilder};\n+use syntax_pos::symbol::{sym, Symbol};\n use syntax_pos::{BytePos, Pos, Span};\n-use rustc_lexer::Base;\n-use rustc_lexer::unescape;\n \n use std::char;\n use std::convert::TryInto;\n-use rustc_data_structures::sync::Lrc;\n use log::debug;\n \n mod tokentrees;"}, {"sha": "5791c6396c5840b351648ee0c4438215a76e0db0", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,13 +1,11 @@\n-use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::Span;\n-\n use super::{StringReader, UnmatchedBrace};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::PResult;\n use syntax::print::pprust::token_to_string;\n use syntax::token::{self, Token};\n use syntax::tokenstream::{DelimSpan, IsJoint::{self, *}, TokenStream, TokenTree, TreeAndJoint};\n-\n-use errors::PResult;\n+use syntax_pos::Span;\n \n impl<'a> StringReader<'a> {\n     crate fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {"}, {"sha": "edfebc7de94032ce457640ca893113b247db7d09", "filename": "src/librustc_parse/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -2,9 +2,9 @@\n // http://www.unicode.org/Public/security/10.0.0/confusables.txt\n \n use super::StringReader;\n-use errors::{Applicability, DiagnosticBuilder};\n-use syntax_pos::{BytePos, Pos, Span, symbol::kw};\n use crate::token;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use syntax_pos::{BytePos, Pos, Span, symbol::kw};\n \n #[rustfmt::skip] // for line breaks\n const UNICODE_ARRAY: &[(char, &str, char)] = &["}, {"sha": "a222f3f00c4633fe4a0a47f2ad8d7be6b15d6944", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -8,7 +8,7 @@ use syntax::sess::ParseSess;\n use syntax::token::{self, Nonterminal};\n use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n-use errors::{PResult, FatalError, Level, Diagnostic};\n+use rustc_errors::{PResult, FatalError, Level, Diagnostic};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{Span, SourceFile, FileName};\n \n@@ -53,7 +53,7 @@ pub enum DirectoryOwnership {\n macro_rules! panictry_buffer {\n     ($handler:expr, $e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-        use errors::FatalError;\n+        use rustc_errors::FatalError;\n         match $e {\n             Ok(e) => e,\n             Err(errs) => {"}, {"sha": "b2ae934ce64746f879ab94d8e277205cb10ebd07", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,10 +1,10 @@\n use super::{SeqSep, Parser, TokenType, PathStyle};\n+use rustc_errors::PResult;\n use syntax::attr;\n use syntax::ast;\n use syntax::util::comments;\n use syntax::token::{self, Nonterminal};\n use syntax_pos::{Span, Symbol};\n-use errors::PResult;\n \n use log::debug;\n "}, {"sha": "ba125cacab48b78a79a7c4e4178dd89cd90d133e", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,25 +1,22 @@\n use super::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType, SeqSep, Parser};\n \n-use syntax::ast::{\n-    self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n-    Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n-};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{self, PResult, Applicability, DiagnosticBuilder, Handler, pluralize};\n+use rustc_error_codes::*;\n+use syntax::ast::{self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item};\n+use syntax::ast::{ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n use syntax::token::{self, TokenKind, token_can_begin_expr};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::symbol::{kw, sym};\n use syntax::ThinVec;\n use syntax::util::parser::AssocOp;\n use syntax::struct_span_err;\n-\n-use errors::{PResult, Applicability, DiagnosticBuilder, pluralize};\n-use rustc_data_structures::fx::FxHashSet;\n+use syntax_pos::symbol::{kw, sym};\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n+\n use log::{debug, trace};\n use std::mem;\n \n-use rustc_error_codes::*;\n-\n const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n \n /// Creates a placeholder argument.\n@@ -61,10 +58,10 @@ pub enum Error {\n }\n \n impl Error {\n-    fn span_err<S: Into<MultiSpan>>(\n+    fn span_err(\n         self,\n-        sp: S,\n-        handler: &errors::Handler,\n+        sp: impl Into<MultiSpan>,\n+        handler: &Handler,\n     ) -> DiagnosticBuilder<'_> {\n         match self {\n             Error::FileNotFoundForModule {\n@@ -212,7 +209,7 @@ impl<'a> Parser<'a> {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }\n \n-    pub(super) fn diagnostic(&self) -> &'a errors::Handler {\n+    pub(super) fn diagnostic(&self) -> &'a Handler {\n         &self.sess.span_diagnostic\n     }\n "}, {"sha": "3cd4988ce0be5a5a505d2ce6dce5a1ce6dffb8e1", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -4,23 +4,20 @@ use super::pat::{GateOr, PARAM_EXPECTED};\n use super::diagnostics::Error;\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n-use syntax::ast::{\n-    self, DUMMY_NODE_ID, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode,\n-    Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm, Ty, TyKind,\n-    FunctionRetTy, Param, FnDecl, BinOpKind, BinOp, UnOp, Mac, AnonConst, Field, Lit,\n-};\n+use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_errors::{PResult, Applicability};\n+use syntax::ast::{self, DUMMY_NODE_ID, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode};\n+use syntax::ast::{Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm, Ty, TyKind};\n+use syntax::ast::{FunctionRetTy, Param, FnDecl, BinOpKind, BinOp, UnOp, Mac, AnonConst, Field, Lit};\n use syntax::token::{self, Token, TokenKind};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::source_map::{self, Span};\n use syntax::util::classify;\n use syntax::util::literal::LitError;\n use syntax::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n-use syntax_pos::symbol::{kw, sym};\n-use syntax_pos::Symbol;\n-use errors::{PResult, Applicability};\n+use syntax_pos::source_map::{self, Span};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n use std::mem;\n-use rustc_data_structures::thin_vec::ThinVec;\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of"}, {"sha": "32819cca42b23f3300e985efa220335125d21621", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,11 +1,11 @@\n use super::Parser;\n \n+use rustc_errors::PResult;\n use syntax::ast::{self, WhereClause, GenericParam, GenericParamKind, GenericBounds, Attribute};\n use syntax::token;\n use syntax::source_map::DUMMY_SP;\n use syntax_pos::symbol::{kw, sym};\n \n-use errors::PResult;\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`."}, {"sha": "ccf78e6402b3c06c789384c4f763c5a85640d25f", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -3,6 +3,8 @@ use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n \n+use rustc_errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n+use rustc_error_codes::*;\n use syntax::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n@@ -14,16 +16,13 @@ use syntax::ptr::P;\n use syntax::ThinVec;\n use syntax::token;\n use syntax::tokenstream::{DelimSpan, TokenTree, TokenStream};\n-use syntax::source_map::{self, respan, Span};\n use syntax::struct_span_err;\n use syntax_pos::BytePos;\n+use syntax_pos::source_map::{self, respan, Span};\n use syntax_pos::symbol::{kw, sym, Symbol};\n \n-use rustc_error_codes::*;\n-\n use log::debug;\n use std::mem;\n-use errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n \n pub(super) type ItemInfo = (Ident, ItemKind, Option<Vec<Attribute>>);\n "}, {"sha": "07e99cfe01292cab7ed680b28ebe1f50d019f711", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -14,23 +14,20 @@ use diagnostics::Error;\n use crate::{Directory, DirectoryOwnership};\n use crate::lexer::UnmatchedBrace;\n \n-use syntax::ast::{\n-    self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident, StrLit,\n-    IsAsync, MacArgs, MacDelimiter, Mutability, Visibility, VisibilityKind, Unsafety,\n-};\n-\n+use rustc_errors::{PResult, Applicability, DiagnosticBuilder, FatalError};\n+use rustc_data_structures::thin_vec::ThinVec;\n+use syntax::ast::{self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident, StrLit};\n+use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, Visibility, VisibilityKind, Unsafety};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token::{self, Token, TokenKind, DelimToken};\n use syntax::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use syntax::sess::ParseSess;\n-use syntax::source_map::respan;\n use syntax::struct_span_err;\n use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use syntax_pos::source_map::respan;\n use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n-use rustc_data_structures::thin_vec::ThinVec;\n-use errors::{PResult, Applicability, DiagnosticBuilder, FatalError};\n use log::debug;\n \n use std::borrow::Cow;"}, {"sha": "5b8526caa412fb5e772e85f6216e62f276fa8a76", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -4,13 +4,12 @@ use super::diagnostics::Error;\n \n use crate::{new_sub_parser_from_file, DirectoryOwnership};\n \n+use rustc_errors::PResult;\n use syntax::attr;\n use syntax::ast::{self, Ident, Attribute, ItemKind, Mod, Crate};\n use syntax::token::{self, TokenKind};\n-use syntax::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n-\n+use syntax_pos::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n use syntax_pos::symbol::sym;\n-use errors::PResult;\n \n use std::path::{self, Path, PathBuf};\n "}, {"sha": "42ece96adb99ab1dc8a261e89ec22b7ebb08a19a", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,15 +1,15 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n+use rustc_errors::{PResult, Applicability, DiagnosticBuilder};\n use syntax::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n use syntax::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n use syntax::mut_visit::{noop_visit_pat, noop_visit_mac, MutVisitor};\n use syntax::ptr::P;\n use syntax::print::pprust;\n use syntax::ThinVec;\n use syntax::token;\n-use syntax::source_map::{respan, Span, Spanned};\n+use syntax_pos::source_map::{respan, Span, Spanned};\n use syntax_pos::symbol::{kw, sym};\n-use errors::{PResult, Applicability, DiagnosticBuilder};\n \n type Expected = Option<&'static str>;\n "}, {"sha": "70c3458e7c0203095c5cb53249a94c741f95e56e", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,16 +1,16 @@\n use super::{Parser, TokenType};\n use crate::maybe_whole;\n+use rustc_errors::{PResult, Applicability, pluralize};\n use syntax::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n use syntax::ast::{AnonConst, GenericArg, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n use syntax::ast::MacArgs;\n use syntax::ThinVec;\n use syntax::token::{self, Token};\n-use syntax::source_map::{Span, BytePos};\n+use syntax_pos::source_map::{Span, BytePos};\n use syntax_pos::symbol::{kw, sym};\n \n use std::mem;\n use log::debug;\n-use errors::{PResult, Applicability, pluralize};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]"}, {"sha": "943b6ecc8255456feaa86f8f260608fc2d7a67f3", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -6,18 +6,18 @@ use super::diagnostics::Error;\n use crate::maybe_whole;\n use crate::DirectoryOwnership;\n \n+use rustc_errors::{PResult, Applicability};\n use syntax::ThinVec;\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::{DUMMY_NODE_ID, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n use syntax::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac};\n use syntax::util::classify;\n use syntax::token;\n-use syntax::source_map::{respan, Span};\n-use syntax::symbol::{kw, sym};\n+use syntax_pos::source_map::{respan, Span};\n+use syntax_pos::symbol::{kw, sym};\n \n use std::mem;\n-use errors::{PResult, Applicability};\n \n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items."}, {"sha": "84ffef68e9a661af0cbe72851c9d2118aadb5da9", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -3,19 +3,17 @@ use super::item::ParamCfg;\n \n use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n \n+use rustc_errors::{PResult, Applicability, pluralize};\n+use rustc_error_codes::*;\n use syntax::ptr::P;\n use syntax::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n use syntax::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n use syntax::ast::{Mutability, AnonConst, Mac};\n use syntax::token::{self, Token};\n-use syntax::source_map::Span;\n use syntax::struct_span_fatal;\n+use syntax_pos::source_map::Span;\n use syntax_pos::symbol::kw;\n \n-use errors::{PResult, Applicability, pluralize};\n-\n-use rustc_error_codes::*;\n-\n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n ///"}, {"sha": "97e9cb8dcdf6fc9bf339a513de5166c23001db59", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74804fa3e706d6217127bc6b8d2bf019a4653e74/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=74804fa3e706d6217127bc6b8d2bf019a4653e74", "patch": "@@ -1,6 +1,6 @@\n //! Meta-syntax validation logic of attributes for post-expansion.\n \n-use errors::{PResult, Applicability};\n+use rustc_errors::{PResult, Applicability};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MetaItem, MetaItemKind};\n use syntax::attr::mk_name_value_item_str;"}]}