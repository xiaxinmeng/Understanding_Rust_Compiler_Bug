{"sha": "4fe3727c391ec5bf18019f304d87132a3e3c5211", "node_id": "C_kwDOAAsO6NoAKDRmZTM3MjdjMzkxZWM1YmYxODAxOWYzMDRkODcxMzJhM2UzYzUyMTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T15:08:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T15:08:04Z"}, "message": "Auto merge of #9701 - smoelius:improve-possible-borrower, r=Jarcho\n\nImprove `possible_borrower`\n\nThis PR makes several improvements to `clippy_uitls::mir::possible_borrower`. These changes benefit both `needless_borrow` and `redundant clone`.\n\n1. **Use the compiler's `MaybeStorageLive` analysis**\n\nI could spot not functional differences between the one in the compiler and the one in Clippy's repository. So, I removed the latter in favor of the the former.\n\n2. **Make `PossibleBorrower` a dataflow analysis instead of a visitor**\n\nThe main benefit of this change is that allows `possible_borrower` to take advantage of statements' relative locations, which is easier to do in an analysis than in a visitor.\n\nThis is easier to illustrate with an example, so consider this one:\n```rust\n    fn foo(cx: &LateContext<'_>, lint: &'static Lint) {\n        cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(&String::new()));\n        //                                                                          ^\n    }\n```\nWe would like to flag the `&` pointed to by the `^` for removal. `foo`'s MIR begins like this:\n```rust\nfn span_lint::foo::{closure#0}(_1: [closure@$DIR/needless_borrow.rs:396:68: 396:74], _2: &mut rustc_errors::diagnostic_builder::DiagnosticBuilder<'_, ()>) -> &mut rustc_errors::diagnostic_builder::DiagnosticBuilder<'_, ()> {\n    debug diag => _2;                    // in scope 0 at $DIR/needless_borrow.rs:396:69: 396:73\n    let mut _0: &mut rustc_errors::diagnostic_builder::DiagnosticBuilder<'_, ()>; // return place in scope 0 at $DIR/needless_borrow.rs:396:75: 396:75\n    let mut _3: &mut rustc_errors::diagnostic_builder::DiagnosticBuilder<'_, ()>; // in scope 0 at $DIR/needless_borrow.rs:396:75: 396:100\n    let mut _4: &mut rustc_errors::diagnostic_builder::DiagnosticBuilder<'_, ()>; // in scope 0 at $DIR/needless_borrow.rs:396:75: 396:100\n    let mut _5: &std::string::String;    // in scope 0 at $DIR/needless_borrow.rs:396:85: 396:99\n    let _6: std::string::String;         // in scope 0 at $DIR/needless_borrow.rs:396:86: 396:99\n\n    bb0: {\n        StorageLive(_3);                 // scope 0 at $DIR/needless_borrow.rs:396:75: 396:100\n        StorageLive(_4);                 // scope 0 at $DIR/needless_borrow.rs:396:75: 396:100\n        _4 = &mut (*_2);                 // scope 0 at $DIR/needless_borrow.rs:396:75: 396:100\n        StorageLive(_5);                 // scope 0 at $DIR/needless_borrow.rs:396:85: 396:99\n        StorageLive(_6);                 // scope 0 at $DIR/needless_borrow.rs:396:86: 396:99\n        _6 = std::string::String::new() -> bb1; // scope 0 at $DIR/needless_borrow.rs:396:86: 396:99\n                                         // mir::Constant\n                                         // + span: $DIR/needless_borrow.rs:396:86: 396:97\n                                         // + literal: Const { ty: fn() -> std::string::String {std::string::String::new}, val: Value(<ZST>) }\n    }\n\n    bb1: {\n        _5 = &_6;                        // scope 0 at $DIR/needless_borrow.rs:396:85: 396:99\n        _3 = rustc_errors::diagnostic_builder::DiagnosticBuilder::<'_, ()>::note::<&std::string::String>(move _4, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/needless_borrow.rs:396:75: 396:100\n                                         // mir::Constant\n                                         // + span: $DIR/needless_borrow.rs:396:80: 396:84\n                                         // + literal: Const { ty: for<'a> fn(&'a mut rustc_errors::diagnostic_builder::DiagnosticBuilder<'_, ()>, &std::string::String) -> &'a mut rustc_errors::diagnostic_builder::DiagnosticBuilder<'_, ()> {rustc_errors::diagnostic_builder::DiagnosticBuilder::<'_, ()>::note::<&std::string::String>}, val: Value(<ZST>) }\n    }\n```\nThe call to `diag.note` appears in `bb1` on the line beginning with `_3 =`. The `String` is owned by `_6`. So, in the call to `diag.note`, we would like to know whether there are any references to `_6` besides `_5`.\n\nThe old, visitor approach did not consider the relative locations of statements. So all borrows were treated the same, *even if they occurred after the location of interest*.\n\nFor example, before the `_3 = ...` call, the possible borrowers of `_6` would be just `_5`. But after the call, the possible borrowers would include `_2`, `_3`, and `_4`.\n\nSo, in a sense, the call from which we are try to remove the needless borrow is trying to prevent us from removing the needless borrow(!).\n\nWith an analysis, things do not get so muddled. We can determine the set of possible borrowers at any specific location, e.g., using a `ResultsCursor`.\n\n3. **Change `only_borrowers` to `at_most_borrowers`**\n\n`possible_borrowers` exposed a function `only_borrowers` that determined whether the borrowers of some local were *exactly* some set `S`. But, from what I can tell, this was overkill. For the lints that currently use `possible_borrower` (`needless_borrow` and `redundant_clone`), all we really want to know is whether there are borrowers *other than* those in `S`. (Put another way, we only care about the subset relation in one direction.) The new function `at_most_borrowers` takes this more tailored approach.\n\n4. **Compute relations \"on the fly\" rather than using `transitive_relation`**\n\nThe visitor would compute and store the transitive closure of the possible borrower relation for an entire MIR body.\n\nBut with an analysis, there is effectively a different possible borrower relation at each location in the body. Computing and storing a transitive closure at each location would not be practical.\n\nSo the new approach is to compute the transitive closure on the fly, as needed. But the new approach might actually be more efficient, as I now explain.\n\nIn all current uses of `at_most_borrowers` (previously `only_borrowers`), the size of the set of borrowers `S` is at most 2. So you need only check at most three borrowers to determine whether the subset relation holds. That is, once you have found a third borrower, you can stop, since you know the relation cannot hold.\n\nNote that `transitive_relation` is still used by `clippy_uitls::mir::possible_origin` (a kind of \"subroutine\" of `possible_borrower`).\n\ncc: `@Jarcho`\n\n---\n\nchangelog: [`needless_borrow`], [`redundant_clone`]: Now track references better and detect more cases\n[#9701](https://github.com/rust-lang/rust-clippy/pull/9701)\n<!-- changelog_checked -->", "tree": {"sha": "5c7e6dee4e474bc0a22e57091556161851282863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c7e6dee4e474bc0a22e57091556161851282863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe3727c391ec5bf18019f304d87132a3e3c5211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe3727c391ec5bf18019f304d87132a3e3c5211", "html_url": "https://github.com/rust-lang/rust/commit/4fe3727c391ec5bf18019f304d87132a3e3c5211", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe3727c391ec5bf18019f304d87132a3e3c5211/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6e6fd623a896a37c1d6defed56b7d98273d4fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6e6fd623a896a37c1d6defed56b7d98273d4fa", "html_url": "https://github.com/rust-lang/rust/commit/8a6e6fd623a896a37c1d6defed56b7d98273d4fa"}, {"sha": "4dbd8ad34e7f6820f6e9e99531353e7ffe37b76a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbd8ad34e7f6820f6e9e99531353e7ffe37b76a", "html_url": "https://github.com/rust-lang/rust/commit/4dbd8ad34e7f6820f6e9e99531353e7ffe37b76a"}], "stats": {"total": 486, "additions": 277, "deletions": 209}, "files": [{"sha": "c8e54d7b8e0c350446c0fe0f0eee6ac0e221fe38", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -54,7 +54,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Msrv\n \n                         diag.span_suggestion(\n                             expr.span,\n-                            &format!(\"replace with `ptr::slice_from_raw_parts{mutbl_fn_str}`\"),\n+                            format!(\"replace with `ptr::slice_from_raw_parts{mutbl_fn_str}`\"),\n                             sugg,\n                             rustc_errors::Applicability::HasPlaceholders,\n                         );"}, {"sha": "728941b8b3d9ab007fea377f4b2a6824ceca957e", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -1282,10 +1282,10 @@ fn referent_used_exactly_once<'tcx>(\n             possible_borrowers.push((body_owner_local_def_id, PossibleBorrowerMap::new(cx, mir)));\n         }\n         let possible_borrower = &mut possible_borrowers.last_mut().unwrap().1;\n-        // If `only_borrowers` were used here, the `copyable_iterator::warn` test would fail. The reason is\n-        // that `PossibleBorrowerVisitor::visit_terminator` considers `place.local` a possible borrower of\n-        // itself. See the comment in that method for an explanation as to why.\n-        possible_borrower.bounded_borrowers(&[local], &[local, place.local], place.local, location)\n+        // If `place.local` were not included here, the `copyable_iterator::warn` test would fail. The\n+        // reason is that `PossibleBorrowerVisitor::visit_terminator` considers `place.local` a possible\n+        // borrower of itself. See the comment in that method for an explanation as to why.\n+        possible_borrower.at_most_borrowers(cx, &[local, place.local], place.local, location)\n             && used_exactly_once(mir, place.local).unwrap_or(false)\n     } else {\n         false"}, {"sha": "9891955a4efe8a11ca49e2d157429f5ab29f2c22", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -377,7 +377,7 @@ fn check_format_in_format_args(cx: &LateContext<'_>, call_site: Span, name: Symb\n         call_site,\n         &format!(\"`format!` in `{name}!` args\"),\n         |diag| {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"combine the `format!(..)` arguments with the outer `{name}!(..)` call\"\n             ));\n             diag.help(\"or consider changing `format!` to `format_args!`\");"}, {"sha": "b8d4abdbb781acacba0f3910ff55526347ea8b9c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                         );\n                         diag.span_label(\n                             def.variants[variants_size[1].ind].span,\n-                            &if variants_size[1].fields_size.is_empty() {\n+                            if variants_size[1].fields_size.is_empty() {\n                                 \"the second-largest variant carries no data at all\".to_owned()\n                             } else {\n                                 format!("}, {"sha": "9eba46756299c57bc178a48fc92b65a4af99fc38", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -361,7 +361,7 @@ fn check_for_is_empty<'tcx>(\n             db.span_note(span, \"`is_empty` defined here\");\n         }\n         if let Some(self_kind) = self_kind {\n-            db.note(&output.expected_sig(self_kind));\n+            db.note(output.expected_sig(self_kind));\n         }\n     });\n }"}, {"sha": "68334c3e8f7c75c2fee5858fd314a440149d2fa8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -336,7 +336,7 @@ pub fn read_conf(sess: &Session, path: &io::Result<Option<PathBuf>>) -> Conf {\n         Ok(Some(path)) => path,\n         Ok(None) => return Conf::default(),\n         Err(error) => {\n-            sess.struct_err(&format!(\"error finding Clippy's configuration file: {error}\"))\n+            sess.struct_err(format!(\"error finding Clippy's configuration file: {error}\"))\n                 .emit();\n             return Conf::default();\n         },"}, {"sha": "1953ee8a717525a9ab3ac883bc0def758fa5875b", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -77,7 +77,7 @@ pub(super) fn check<'tcx>(\n                                 applicability,\n                             );\n \n-                            diag.note(&format!(\n+                            diag.note(format!(\n                                 \"`{name}` is of type `{int_name}`, making it ineligible for `Iterator::enumerate`\"\n                             ));\n                         },"}, {"sha": "af7c0563555792bfabba1cf1776cf44abaf66225", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                                 let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,\n-                                    &help,\n+                                    help,\n                                     format!(\"async {}{ret_snip}\", &header_snip[..ret_pos]),\n                                     Applicability::MachineApplicable\n                                 );"}, {"sha": "c795c1d9a16c321b9a9260df72206653d8516558", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n \n                     let test_span = expr.span.until(then.span);\n                     span_lint_and_then(cx, MANUAL_STRIP, strippings[0], &format!(\"stripping a {kind_word} manually\"), |diag| {\n-                        diag.span_note(test_span, &format!(\"the {kind_word} was tested here\"));\n+                        diag.span_note(test_span, format!(\"the {kind_word} was tested here\"));\n                         multispan_sugg(\n                             diag,\n                             &format!(\"try using the `strip_{kind_word}` method\"),"}, {"sha": "122088f4857cd5925b37b8c744fecaf34b3578ed", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -36,7 +36,7 @@ pub fn check(\n                 expr.span,\n                 &format!(\"calling `to_string` on `{arg_ty}`\"),\n                 |diag| {\n-                    diag.help(&format!(\n+                    diag.help(format!(\n                         \"`{self_ty}` implements `ToString` through a slower blanket impl, but `{deref_self_ty}` has a fast specialization of `ToString`\"\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;"}, {"sha": "279175e20c37fcd5126f908a4cd32ba4663e4a04", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -29,7 +29,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n                         application = Applicability::Unspecified;\n                         diag.span_help(\n                             pat.span,\n-                            &format!(\"for this change `{}` has to be mutable\", snippet(cx, pat.span, \"..\")),\n+                            format!(\"for this change `{}` has to be mutable\", snippet(cx, pat.span, \"..\")),\n                         );\n                     }\n                 }"}, {"sha": "4c6328481e438817cf82f843466ff3f406dc456f", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -84,7 +84,7 @@ pub(super) fn check<'tcx>(\n                 suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{unwrap_snippet}, \")));\n             }\n \n-            diag.multipart_suggestion(&format!(\"use `{suggest}` instead\"), suggestion, applicability);\n+            diag.multipart_suggestion(format!(\"use `{suggest}` instead\"), suggestion, applicability);\n         });\n     }\n }"}, {"sha": "d00708e828eaeb791391a8797bd6980d8e36399a", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -167,7 +167,7 @@ fn check_manual_split_once_indirect(\n             };\n             diag.span_suggestion_verbose(\n                 local.span,\n-                &format!(\"try `{r}split_once`\"),\n+                format!(\"try `{r}split_once`\"),\n                 format!(\"let ({lhs}, {rhs}) = {self_snip}.{r}split_once({pat_snip}){unwrap};\"),\n                 app,\n             );"}, {"sha": "47e2e744112c5a1dc89d29c1d27d0033a9edf3bf", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -62,7 +62,7 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(cx, UNNECESSARY_LAZY_EVALUATIONS, expr.span, msg, |diag| {\n                         diag.span_suggestion(\n                             span,\n-                            &format!(\"use `{simplify_using}(..)` instead\"),\n+                            format!(\"use `{simplify_using}(..)` instead\"),\n                             format!(\"{simplify_using}({})\", snippet(cx, body_expr.span, \"..\")),\n                             applicability,\n                         );"}, {"sha": "5a9387b34cc1931a68adf7ae5f3fa013e3d72592", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -284,7 +284,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion(\n                         assign.lhs_span,\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         let_snippet,\n                         Applicability::MachineApplicable,\n                     );\n@@ -304,7 +304,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         format!(\"{let_snippet} = \"),\n                         applicability,\n                     );\n@@ -335,7 +335,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"declare `{binding_name}` here\"),\n                         format!(\"{let_snippet} = \"),\n                         applicability,\n                     );"}, {"sha": "7376ab0c846d954c7c3c39e75b177a83e5f4ff82", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -125,7 +125,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n             if is_string { \"string\" } else { \"byte string\" }\n         ),\n         |diag| {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"octal escapes are not supported, `\\\\0` is always a null {}\",\n                 if is_string { \"character\" } else { \"byte\" }\n             ));\n@@ -139,7 +139,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n             // suggestion 2: unambiguous null byte\n             diag.span_suggestion(\n                 span,\n-                &format!(\n+                format!(\n                     \"if the null {} is intended, disambiguate using\",\n                     if is_string { \"character\" } else { \"byte\" }\n                 ),"}, {"sha": "015f6c14e7612f2c724711b9fed7f8786c433f02", "filename": "clippy_lints/src/operators/misrefactored_assign_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -50,7 +50,7 @@ fn lint_misrefactored_assign_op(\n                 let long = format!(\"{snip_a} = {}\", sugg::make_binop(op.into(), a, r));\n                 diag.span_suggestion(\n                     expr.span,\n-                    &format!(\n+                    format!(\n                         \"did you mean `{snip_a} = {snip_a} {} {snip_r}` or `{long}`? Consider replacing it with\",\n                         op.as_str()\n                     ),"}, {"sha": "0e7c5cca7240bd02ba8a0523905de512d6930b8f", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // `res = clone(arg)` can be turned into `res = move arg;`\n                 // if `arg` is the only borrow of `cloned` at this point.\n \n-                if cannot_move_out || !possible_borrower.only_borrowers(&[arg], cloned, loc) {\n+                if cannot_move_out || !possible_borrower.at_most_borrowers(cx, &[arg], cloned, loc) {\n                     continue;\n                 }\n \n@@ -178,7 +178,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // StorageDead(pred_arg);\n                 // res = to_path_buf(cloned);\n                 // ```\n-                if cannot_move_out || !possible_borrower.only_borrowers(&[arg, cloned], local, loc) {\n+                if cannot_move_out || !possible_borrower.at_most_borrowers(cx, &[arg, cloned], local, loc) {\n                     continue;\n                 }\n "}, {"sha": "f35bfb0b4ed884c01f8a1641e8a0e71e31c783f1", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     |diag| {\n                                         diag.span_note(\n                                             trait_method_span,\n-                                            &format!(\"existing `{method_name}` defined here\"),\n+                                            format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );\n@@ -151,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                         // iterate on trait_spans?\n                                         diag.span_note(\n                                             trait_spans[0],\n-                                            &format!(\"existing `{method_name}` defined here\"),\n+                                            format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );"}, {"sha": "17e9cc5f6b7c7a7d72a5fd73fed5f043c366708d", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -132,7 +132,7 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n                 applicability,\n             );\n             if !is_xor_based {\n-                diag.note(&format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n+                diag.note(format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n             }\n         },\n     );\n@@ -214,7 +214,7 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                                 Applicability::MaybeIncorrect,\n                             );\n                             diag.note(\n-                                &format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n+                                format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n                             );\n                         }\n                     });"}, {"sha": "af0242348ac295facaeff4a24e661b6c8863e3e6", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -77,7 +77,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -91,7 +91,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute to `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -119,16 +119,16 @@ pub(super) fn check<'tcx>(\n                     ),\n                     |diag| {\n                         if let Some(same_adt_did) = same_adt_did {\n-                            diag.note(&format!(\n+                            diag.note(format!(\n                                 \"two instances of the same generic type (`{}`) may have different layouts\",\n                                 cx.tcx.item_name(same_adt_did)\n                             ));\n                         } else {\n                             if from_ty_orig.peel_refs() != from_ty {\n-                                diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                                diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                             }\n                             if to_ty_orig.peel_refs() != to_ty {\n-                                diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                                diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                             }\n                         }\n                     },\n@@ -146,7 +146,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty {\n-                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -163,7 +163,7 @@ pub(super) fn check<'tcx>(\n                     &format!(\"transmute into `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty {\n-                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n+                            diag.note(format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );"}, {"sha": "b79d4e915a2718b70ae063b686aa7ad66918ddd0", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n             &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n             |diag| {\n                 if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                    let sugg = arg.as_ty(&to_ty.to_string()).to_string();\n+                    let sugg = arg.as_ty(to_ty.to_string()).to_string();\n                     diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n                 }\n             },"}, {"sha": "871c3fadbba71b84f7c1d18364f44fb40fb9293f", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -61,7 +61,7 @@ pub(super) fn check<'tcx>(\n                 \"transmute from an integer to a pointer\",\n                 |diag| {\n                     if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                        diag.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()), Applicability::Unspecified);\n+                        diag.span_suggestion(e.span, \"try\", arg.as_ty(to_ty.to_string()), Applicability::Unspecified);\n                     }\n                 },\n             );"}, {"sha": "f9b9a66b5fa461b17e2e99dd41da1dfd8192ccaf", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             &format!(\"usage of `{outer_sym}<{generic_snippet}>`\"),\n             |diag| {\n                 diag.span_suggestion(hir_ty.span, \"try\", format!(\"{generic_snippet}\"), applicability);\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{generic_snippet}` is already a pointer, `{outer_sym}<{generic_snippet}>` allocates a pointer on the heap\"\n                 ));\n             },\n@@ -78,7 +78,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                     format!(\"{outer_sym}<{generic_snippet}>\"),\n                     applicability,\n                 );\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n             },\n@@ -91,10 +91,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             hir_ty.span,\n             &format!(\"usage of `{outer_sym}<{inner_sym}<{generic_snippet}>>`\"),\n             |diag| {\n-                diag.note(&format!(\n+                diag.note(format!(\n                     \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n-                diag.help(&format!(\n+                diag.help(format!(\n                     \"consider using just `{outer_sym}<{generic_snippet}>` or `{inner_sym}<{generic_snippet}>`\"\n                 ));\n             },"}, {"sha": "ef9f740f7047c08b00c022b2ca6c74c7e7ab162d", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -129,7 +129,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n \n                 if arg_snippets_without_empty_blocks.is_empty() {\n                     db.multipart_suggestion(\n-                        &format!(\"use {singular}unit literal{plural} instead\"),\n+                        format!(\"use {singular}unit literal{plural} instead\"),\n                         args_to_recover\n                             .iter()\n                             .map(|arg| (arg.span, \"()\".to_string()))\n@@ -142,7 +142,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                     let it_or_them = if plural { \"them\" } else { \"it\" };\n                     db.span_suggestion(\n                         expr.span,\n-                        &format!(\n+                        format!(\n                             \"{or}move the expression{empty_or_s} in front of the call and replace {it_or_them} with the unit literal `()`\"\n                         ),\n                         sugg,"}, {"sha": "df3350388817ed9ca3765d3bd6c1a45882611353", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -377,7 +377,7 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n                     // print!(\"\\n\"), write!(f, \"\\n\")\n \n                     diag.multipart_suggestion(\n-                        &format!(\"use `{name}ln!` instead\"),\n+                        format!(\"use `{name}ln!` instead\"),\n                         vec![(name_span, format!(\"{name}ln\")), (format_string_span, String::new())],\n                         Applicability::MachineApplicable,\n                     );\n@@ -388,7 +388,7 @@ fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_c\n                     let newline_span = format_string_span.with_lo(hi - BytePos(3)).with_hi(hi - BytePos(1));\n \n                     diag.multipart_suggestion(\n-                        &format!(\"use `{name}ln!` instead\"),\n+                        format!(\"use `{name}ln!` instead\"),\n                         vec![(name_span, format!(\"{name}ln\")), (newline_span, String::new())],\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "812f6fe71a0a0c7faf9efd8b002055072082dafb", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -17,7 +17,7 @@ use std::env;\n fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{lint}\",\n                 &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n                     // extract just major + minor version and ignore patch versions"}, {"sha": "d262b335d99d3adf782a59eaa02f88c84db50908", "filename": "clippy_utils/src/mir/maybe_storage_live.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8a6e6fd623a896a37c1d6defed56b7d98273d4fa/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6e6fd623a896a37c1d6defed56b7d98273d4fa/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs?ref=8a6e6fd623a896a37c1d6defed56b7d98273d4fa", "patch": "@@ -1,52 +0,0 @@\n-use rustc_index::bit_set::BitSet;\n-use rustc_middle::mir;\n-use rustc_mir_dataflow::{AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis};\n-\n-/// Determines liveness of each local purely based on `StorageLive`/`Dead`.\n-#[derive(Copy, Clone)]\n-pub(super) struct MaybeStorageLive;\n-\n-impl<'tcx> AnalysisDomain<'tcx> for MaybeStorageLive {\n-    type Domain = BitSet<mir::Local>;\n-    const NAME: &'static str = \"maybe_storage_live\";\n-\n-    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n-        // bottom = dead\n-        BitSet::new_empty(body.local_decls.len())\n-    }\n-\n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut Self::Domain) {\n-        for arg in body.args_iter() {\n-            state.insert(arg);\n-        }\n-    }\n-}\n-\n-impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n-    type Idx = mir::Local;\n-\n-    fn statement_effect(&self, trans: &mut impl GenKill<Self::Idx>, stmt: &mir::Statement<'tcx>, _: mir::Location) {\n-        match stmt.kind {\n-            mir::StatementKind::StorageLive(l) => trans.gen(l),\n-            mir::StatementKind::StorageDead(l) => trans.kill(l),\n-            _ => (),\n-        }\n-    }\n-\n-    fn terminator_effect(\n-        &self,\n-        _trans: &mut impl GenKill<Self::Idx>,\n-        _terminator: &mir::Terminator<'tcx>,\n-        _loc: mir::Location,\n-    ) {\n-    }\n-\n-    fn call_return_effect(\n-        &self,\n-        _trans: &mut impl GenKill<Self::Idx>,\n-        _block: mir::BasicBlock,\n-        _return_places: CallReturnPlaces<'_, 'tcx>,\n-    ) {\n-        // Nothing to do when a call returns successfully\n-    }\n-}"}, {"sha": "26c0015e87e0fb1aeab8e20f0c21faf6498c940c", "filename": "clippy_utils/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_utils%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_utils%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fmod.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -5,8 +5,6 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::TyCtxt;\n \n-mod maybe_storage_live;\n-\n mod possible_borrower;\n pub use possible_borrower::PossibleBorrowerMap;\n "}, {"sha": "395d46e7a2f8af088f359177ebe4ebf4f4e08c39", "filename": "clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 172, "deletions": 102, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -1,92 +1,137 @@\n-use super::{\n-    maybe_storage_live::MaybeStorageLive, possible_origin::PossibleOriginVisitor,\n-    transitive_relation::TransitiveRelation,\n-};\n+use super::possible_origin::PossibleOriginVisitor;\n use crate::ty::is_copy;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n-use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::TypeVisitor};\n-use rustc_mir_dataflow::{Analysis, ResultsCursor};\n+use rustc_middle::mir::{\n+    self, visit::Visitor as _, BasicBlock, Local, Location, Mutability, Statement, StatementKind, Terminator,\n+};\n+use rustc_middle::ty::{self, visit::TypeVisitor, TyCtxt};\n+use rustc_mir_dataflow::{\n+    fmt::DebugWithContext, impls::MaybeStorageLive, lattice::JoinSemiLattice, Analysis, AnalysisDomain,\n+    CallReturnPlaces, ResultsCursor,\n+};\n+use std::borrow::Cow;\n use std::ops::ControlFlow;\n \n /// Collects the possible borrowers of each local.\n /// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n /// possible borrowers of `a`.\n #[allow(clippy::module_name_repetitions)]\n-struct PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n-    possible_borrower: TransitiveRelation,\n+struct PossibleBorrowerAnalysis<'b, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     body: &'b mir::Body<'tcx>,\n-    cx: &'a LateContext<'tcx>,\n     possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n }\n \n-impl<'a, 'b, 'tcx> PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n-    fn new(\n-        cx: &'a LateContext<'tcx>,\n-        body: &'b mir::Body<'tcx>,\n-        possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n-    ) -> Self {\n+#[derive(Clone, Debug, Eq, PartialEq)]\n+struct PossibleBorrowerState {\n+    map: FxIndexMap<Local, BitSet<Local>>,\n+    domain_size: usize,\n+}\n+\n+impl PossibleBorrowerState {\n+    fn new(domain_size: usize) -> Self {\n         Self {\n-            possible_borrower: TransitiveRelation::default(),\n-            cx,\n-            body,\n-            possible_origin,\n+            map: FxIndexMap::default(),\n+            domain_size,\n         }\n     }\n \n-    fn into_map(\n-        self,\n-        cx: &'a LateContext<'tcx>,\n-        maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive>,\n-    ) -> PossibleBorrowerMap<'b, 'tcx> {\n-        let mut map = FxHashMap::default();\n-        for row in (1..self.body.local_decls.len()).map(mir::Local::from_usize) {\n-            if is_copy(cx, self.body.local_decls[row].ty) {\n-                continue;\n-            }\n+    #[allow(clippy::similar_names)]\n+    fn add(&mut self, borrowed: Local, borrower: Local) {\n+        self.map\n+            .entry(borrowed)\n+            .or_insert(BitSet::new_empty(self.domain_size))\n+            .insert(borrower);\n+    }\n+}\n \n-            let mut borrowers = self.possible_borrower.reachable_from(row, self.body.local_decls.len());\n-            borrowers.remove(mir::Local::from_usize(0));\n+impl<C> DebugWithContext<C> for PossibleBorrowerState {\n+    fn fmt_with(&self, _ctxt: &C, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        <_ as std::fmt::Debug>::fmt(self, f)\n+    }\n+    fn fmt_diff_with(&self, _old: &Self, _ctxt: &C, _f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        unimplemented!()\n+    }\n+}\n+\n+impl JoinSemiLattice for PossibleBorrowerState {\n+    fn join(&mut self, other: &Self) -> bool {\n+        let mut changed = false;\n+        for (&borrowed, borrowers) in other.map.iter() {\n             if !borrowers.is_empty() {\n-                map.insert(row, borrowers);\n+                changed |= self\n+                    .map\n+                    .entry(borrowed)\n+                    .or_insert(BitSet::new_empty(self.domain_size))\n+                    .union(borrowers);\n             }\n         }\n+        changed\n+    }\n+}\n \n-        let bs = BitSet::new_empty(self.body.local_decls.len());\n-        PossibleBorrowerMap {\n-            map,\n-            maybe_live,\n-            bitset: (bs.clone(), bs),\n+impl<'b, 'tcx> AnalysisDomain<'tcx> for PossibleBorrowerAnalysis<'b, 'tcx> {\n+    type Domain = PossibleBorrowerState;\n+\n+    const NAME: &'static str = \"possible_borrower\";\n+\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        PossibleBorrowerState::new(body.local_decls.len())\n+    }\n+\n+    fn initialize_start_block(&self, _body: &mir::Body<'tcx>, _entry_set: &mut Self::Domain) {}\n+}\n+\n+impl<'b, 'tcx> PossibleBorrowerAnalysis<'b, 'tcx> {\n+    fn new(\n+        tcx: TyCtxt<'tcx>,\n+        body: &'b mir::Body<'tcx>,\n+        possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n+    ) -> Self {\n+        Self {\n+            tcx,\n+            body,\n+            possible_origin,\n         }\n     }\n }\n \n-impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n-    fn visit_assign(&mut self, place: &mir::Place<'tcx>, rvalue: &mir::Rvalue<'_>, _location: mir::Location) {\n-        let lhs = place.local;\n-        match rvalue {\n-            mir::Rvalue::Ref(_, _, borrowed) => {\n-                self.possible_borrower.add(borrowed.local, lhs);\n-            },\n-            other => {\n-                if ContainsRegion\n-                    .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n-                    .is_continue()\n-                {\n-                    return;\n-                }\n-                rvalue_locals(other, |rhs| {\n-                    if lhs != rhs {\n-                        self.possible_borrower.add(rhs, lhs);\n+impl<'b, 'tcx> Analysis<'tcx> for PossibleBorrowerAnalysis<'b, 'tcx> {\n+    fn apply_call_return_effect(\n+        &self,\n+        _state: &mut Self::Domain,\n+        _block: BasicBlock,\n+        _return_places: CallReturnPlaces<'_, 'tcx>,\n+    ) {\n+    }\n+\n+    fn apply_statement_effect(&self, state: &mut Self::Domain, statement: &Statement<'tcx>, _location: Location) {\n+        if let StatementKind::Assign(box (place, rvalue)) = &statement.kind {\n+            let lhs = place.local;\n+            match rvalue {\n+                mir::Rvalue::Ref(_, _, borrowed) => {\n+                    state.add(borrowed.local, lhs);\n+                },\n+                other => {\n+                    if ContainsRegion\n+                        .visit_ty(place.ty(&self.body.local_decls, self.tcx).ty)\n+                        .is_continue()\n+                    {\n+                        return;\n                     }\n-                });\n-            },\n+                    rvalue_locals(other, |rhs| {\n+                        if lhs != rhs {\n+                            state.add(rhs, lhs);\n+                        }\n+                    });\n+                },\n+            }\n         }\n     }\n \n-    fn visit_terminator(&mut self, terminator: &mir::Terminator<'_>, _loc: mir::Location) {\n+    fn apply_terminator_effect(&self, state: &mut Self::Domain, terminator: &Terminator<'tcx>, _location: Location) {\n         if let mir::TerminatorKind::Call {\n             args,\n             destination: mir::Place { local: dest, .. },\n@@ -126,10 +171,10 @@ impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b,\n \n             for y in mutable_variables {\n                 for x in &immutable_borrowers {\n-                    self.possible_borrower.add(*x, y);\n+                    state.add(*x, y);\n                 }\n                 for x in &mutable_borrowers {\n-                    self.possible_borrower.add(*x, y);\n+                    state.add(*x, y);\n                 }\n             }\n         }\n@@ -165,73 +210,98 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n     }\n }\n \n-/// Result of `PossibleBorrowerVisitor`.\n+/// Result of `PossibleBorrowerAnalysis`.\n #[allow(clippy::module_name_repetitions)]\n pub struct PossibleBorrowerMap<'b, 'tcx> {\n-    /// Mapping `Local -> its possible borrowers`\n-    pub map: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n-    maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive>,\n-    // Caches to avoid allocation of `BitSet` on every query\n-    pub bitset: (BitSet<mir::Local>, BitSet<mir::Local>),\n+    body: &'b mir::Body<'tcx>,\n+    possible_borrower: ResultsCursor<'b, 'tcx, PossibleBorrowerAnalysis<'b, 'tcx>>,\n+    maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive<'b>>,\n+    pushed: BitSet<Local>,\n+    stack: Vec<Local>,\n }\n \n-impl<'a, 'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n-    pub fn new(cx: &'a LateContext<'tcx>, mir: &'b mir::Body<'tcx>) -> Self {\n+impl<'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n+    pub fn new(cx: &LateContext<'tcx>, mir: &'b mir::Body<'tcx>) -> Self {\n         let possible_origin = {\n             let mut vis = PossibleOriginVisitor::new(mir);\n             vis.visit_body(mir);\n             vis.into_map(cx)\n         };\n-        let maybe_storage_live_result = MaybeStorageLive\n+        let possible_borrower = PossibleBorrowerAnalysis::new(cx.tcx, mir, possible_origin)\n             .into_engine(cx.tcx, mir)\n-            .pass_name(\"redundant_clone\")\n+            .pass_name(\"possible_borrower\")\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n-        let mut vis = PossibleBorrowerVisitor::new(cx, mir, possible_origin);\n-        vis.visit_body(mir);\n-        vis.into_map(cx, maybe_storage_live_result)\n-    }\n-\n-    /// Returns true if the set of borrowers of `borrowed` living at `at` matches with `borrowers`.\n-    pub fn only_borrowers(&mut self, borrowers: &[mir::Local], borrowed: mir::Local, at: mir::Location) -> bool {\n-        self.bounded_borrowers(borrowers, borrowers, borrowed, at)\n+        let maybe_live = MaybeStorageLive::new(Cow::Owned(BitSet::new_empty(mir.local_decls.len())))\n+            .into_engine(cx.tcx, mir)\n+            .pass_name(\"possible_borrower\")\n+            .iterate_to_fixpoint()\n+            .into_results_cursor(mir);\n+        PossibleBorrowerMap {\n+            body: mir,\n+            possible_borrower,\n+            maybe_live,\n+            pushed: BitSet::new_empty(mir.local_decls.len()),\n+            stack: Vec::with_capacity(mir.local_decls.len()),\n+        }\n     }\n \n-    /// Returns true if the set of borrowers of `borrowed` living at `at` includes at least `below`\n-    /// but no more than `above`.\n-    pub fn bounded_borrowers(\n+    /// Returns true if the set of borrowers of `borrowed` living at `at` includes no more than\n+    /// `borrowers`.\n+    /// Notes:\n+    /// 1. It would be nice if `PossibleBorrowerMap` could store `cx` so that `at_most_borrowers`\n+    /// would not require it to be passed in. But a `PossibleBorrowerMap` is stored in `LintPass`\n+    /// `Dereferencing`, which outlives any `LateContext`.\n+    /// 2. In all current uses of `at_most_borrowers`, `borrowers` is a slice of at most two\n+    /// elements. Thus, `borrowers.contains(...)` is effectively a constant-time operation. If\n+    /// `at_most_borrowers`'s uses were to expand beyond this, its implementation might have to be\n+    /// adjusted.\n+    pub fn at_most_borrowers(\n         &mut self,\n-        below: &[mir::Local],\n-        above: &[mir::Local],\n+        cx: &LateContext<'tcx>,\n+        borrowers: &[mir::Local],\n         borrowed: mir::Local,\n         at: mir::Location,\n     ) -> bool {\n-        self.maybe_live.seek_after_primary_effect(at);\n+        if is_copy(cx, self.body.local_decls[borrowed].ty) {\n+            return true;\n+        }\n \n-        self.bitset.0.clear();\n-        let maybe_live = &mut self.maybe_live;\n-        if let Some(bitset) = self.map.get(&borrowed) {\n-            for b in bitset.iter().filter(move |b| maybe_live.contains(*b)) {\n-                self.bitset.0.insert(b);\n+        self.possible_borrower.seek_before_primary_effect(at);\n+        self.maybe_live.seek_before_primary_effect(at);\n+\n+        let possible_borrower = &self.possible_borrower.get().map;\n+        let maybe_live = &self.maybe_live;\n+\n+        self.pushed.clear();\n+        self.stack.clear();\n+\n+        if let Some(borrowers) = possible_borrower.get(&borrowed) {\n+            for b in borrowers.iter() {\n+                if self.pushed.insert(b) {\n+                    self.stack.push(b);\n+                }\n             }\n         } else {\n-            return false;\n+            // Nothing borrows `borrowed` at `at`.\n+            return true;\n         }\n \n-        self.bitset.1.clear();\n-        for b in below {\n-            self.bitset.1.insert(*b);\n-        }\n-\n-        if !self.bitset.0.superset(&self.bitset.1) {\n-            return false;\n-        }\n+        while let Some(borrower) = self.stack.pop() {\n+            if maybe_live.contains(borrower) && !borrowers.contains(&borrower) {\n+                return false;\n+            }\n \n-        for b in above {\n-            self.bitset.0.remove(*b);\n+            if let Some(borrowers) = possible_borrower.get(&borrower) {\n+                for b in borrowers.iter() {\n+                    if self.pushed.insert(b) {\n+                        self.stack.push(b);\n+                    }\n+                }\n+            }\n         }\n \n-        self.bitset.0.is_empty()\n+        true\n     }\n \n     pub fn local_is_alive_at(&mut self, local: mir::Local, at: mir::Location) -> bool {"}, {"sha": "8f25fea678f19df58aded7d4add8a5f288e7e32e", "filename": "tests/ui/manual_retain.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fmanual_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fmanual_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.fixed?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_retain)]\n-#![allow(unused)]\n+#![allow(unused, clippy::redundant_clone)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::BinaryHeap;"}, {"sha": "e6b3995a689b3d077b22da927959d31f59389a9a", "filename": "tests/ui/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_retain)]\n-#![allow(unused)]\n+#![allow(unused, clippy::redundant_clone)]\n use std::collections::BTreeMap;\n use std::collections::BTreeSet;\n use std::collections::BinaryHeap;"}, {"sha": "31e1cb6c3d7f7efd0e083c67233079d557f11947", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(lint_reasons)]\n+#![feature(custom_inner_attributes, lint_reasons, rustc_private)]\n #![allow(\n     unused,\n     clippy::uninlined_format_args,\n@@ -491,3 +491,14 @@ mod issue_9782_method_variant {\n         S.foo::<&[u8; 100]>(&a);\n     }\n }\n+\n+extern crate rustc_lint;\n+extern crate rustc_span;\n+\n+#[allow(dead_code)]\n+mod span_lint {\n+    use rustc_lint::{LateContext, Lint, LintContext};\n+    fn foo(cx: &LateContext<'_>, lint: &'static Lint) {\n+        cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(String::new()));\n+    }\n+}"}, {"sha": "55c2738fcf273c812c30105fc84e8090ea4fe927", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(lint_reasons)]\n+#![feature(custom_inner_attributes, lint_reasons, rustc_private)]\n #![allow(\n     unused,\n     clippy::uninlined_format_args,\n@@ -491,3 +491,14 @@ mod issue_9782_method_variant {\n         S.foo::<&[u8; 100]>(&a);\n     }\n }\n+\n+extern crate rustc_lint;\n+extern crate rustc_span;\n+\n+#[allow(dead_code)]\n+mod span_lint {\n+    use rustc_lint::{LateContext, Lint, LintContext};\n+    fn foo(cx: &LateContext<'_>, lint: &'static Lint) {\n+        cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(&String::new()));\n+    }\n+}"}, {"sha": "98a48d68317b495e9b50713d97aa4d470e2ab4ed", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -216,5 +216,11 @@ error: the borrowed expression implements the required traits\n LL |         foo(&a);\n    |             ^^ help: change this to: `a`\n \n-error: aborting due to 36 previous errors\n+error: the borrowed expression implements the required traits\n+  --> $DIR/needless_borrow.rs:502:85\n+   |\n+LL |         cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(&String::new()));\n+   |                                                                                     ^^^^^^^^^^^^^^ help: change this to: `String::new()`\n+\n+error: aborting due to 37 previous errors\n "}, {"sha": "a157b6a6f9adbfd417b10fd0ed51734ab7f63f6f", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -239,3 +239,9 @@ fn false_negative_5707() {\n     let _z = x.clone(); // pr 7346 can't lint on `x`\n     drop(y);\n }\n+\n+#[allow(unused, clippy::manual_retain)]\n+fn possible_borrower_improvements() {\n+    let mut s = String::from(\"foobar\");\n+    s = s.chars().filter(|&c| c != 'o').collect();\n+}"}, {"sha": "430672e8b8df2ffc470a47146ffd59db0b35fbe6", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -239,3 +239,9 @@ fn false_negative_5707() {\n     let _z = x.clone(); // pr 7346 can't lint on `x`\n     drop(y);\n }\n+\n+#[allow(unused, clippy::manual_retain)]\n+fn possible_borrower_improvements() {\n+    let mut s = String::from(\"foobar\");\n+    s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+}"}, {"sha": "1bacc2c76af1597f3b044506ed4e4f081a3b9251", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fe3727c391ec5bf18019f304d87132a3e3c5211/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=4fe3727c391ec5bf18019f304d87132a3e3c5211", "patch": "@@ -179,5 +179,17 @@ note: this value is dropped without further use\n LL |     foo(&x.clone(), move || {\n    |          ^\n \n-error: aborting due to 15 previous errors\n+error: redundant clone\n+  --> $DIR/redundant_clone.rs:246:40\n+   |\n+LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+   |                                        ^^^^^^^^^^^ help: remove this\n+   |\n+note: this value is dropped without further use\n+  --> $DIR/redundant_clone.rs:246:9\n+   |\n+LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 16 previous errors\n "}]}