{"sha": "ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOGQzMjg1MGQxYzMyYWFhNTkzY2E5ZTQyZTEyN2NmYTg4ZWM5Yzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-30T18:17:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-30T18:17:38Z"}, "message": "Merge pull request #2413 from flip1995/assign_ops\n\nImproved suggestion on misrefactored_assign_op lint", "tree": {"sha": "36a2eec9bba726c08b08077da135a6ba7281a508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36a2eec9bba726c08b08077da135a6ba7281a508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJacLbCCRBK7hj4Ov3rIwAAdHIIAGalWtwHQDIFtdw8/1ZEZBR6\nwh63/BFPDUtGv7dQ3E5gxobg/ydjM474Cd3MlUk0cXgb1lSNUtNcpOqoG50B0hMv\n+bd6n7AHwf5JMDIoImhiJCfbeBOVrJP+qsC2TJ7dMy3ExNEAoA18O9ylTjiedZhF\n4qygE2ooW5WRKvpL6RNRABlgtNh0TnvxoJBZ1eafzhMgyNVqlwn4omBPesNiFkV9\n40r2lmLQkYO3kzgnnuTc4v/lj3VwgNydn72Gh9dwGn8ViTkQ5zfkqSOe5v13WAGC\n1+a4ei4vfI8OqCCmbi7LonCpVi4X5zclcvwasxKxyzPrERWJodnDoHkizt3HBiQ=\n=OAOk\n-----END PGP SIGNATURE-----\n", "payload": "tree 36a2eec9bba726c08b08077da135a6ba7281a508\nparent 8123495e0f36c429a865645a15a2bbb02e9a0c0f\nparent bd421cb5a5937ce42ddddd392ec743c8154f5d56\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1517336258 +0100\ncommitter GitHub <noreply@github.com> 1517336258 +0100\n\nMerge pull request #2413 from flip1995/assign_ops\n\nImproved suggestion on misrefactored_assign_op lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "html_url": "https://github.com/rust-lang/rust/commit/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8123495e0f36c429a865645a15a2bbb02e9a0c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8123495e0f36c429a865645a15a2bbb02e9a0c0f", "html_url": "https://github.com/rust-lang/rust/commit/8123495e0f36c429a865645a15a2bbb02e9a0c0f"}, {"sha": "bd421cb5a5937ce42ddddd392ec743c8154f5d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd421cb5a5937ce42ddddd392ec743c8154f5d56", "html_url": "https://github.com/rust-lang/rust/commit/bd421cb5a5937ce42ddddd392ec743c8154f5d56"}], "stats": {"total": 185, "additions": 154, "deletions": 31}, "files": [{"sha": "d285e71bd16644ecf76c4629544230b6098cb440", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "patch": "@@ -1,4 +1,5 @@\n use rustc::hir;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::*;\n use syntax::ast;\n use utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n@@ -87,19 +88,29 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                 });\n                 if let hir::ExprBinary(binop, ref l, ref r) = rhs.node {\n                     if op.node == binop.node {\n-                        let lint = |assignee: &hir::Expr, rhs: &hir::Expr| {\n+                        let lint = |assignee: &hir::Expr, rhs_other: &hir::Expr| {\n                             span_lint_and_then(\n                                 cx,\n                                 MISREFACTORED_ASSIGN_OP,\n                                 expr.span,\n                                 \"variable appears on both sides of an assignment operation\",\n                                 |db| if let (Some(snip_a), Some(snip_r)) =\n-                                    (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n+                                    (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs_other.span))\n                                 {\n+                                    let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n+                                    let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n+                                    let long = format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n                                     db.span_suggestion(\n                                         expr.span,\n-                                        \"replace it with\",\n-                                        format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                        &format!(\"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n+                                                 snip_a, snip_a, op.node.as_str(), snip_r,\n+                                                 long),\n+                                        format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r)\n+                                    );\n+                                    db.span_suggestion(\n+                                        expr.span,\n+                                        \"or\",\n+                                        long\n                                     );\n                                 },\n                             );\n@@ -189,23 +200,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                             );\n                         }\n                     };\n-                    // a = a op b\n-                    if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, l) {\n-                        lint(assignee, r);\n-                    }\n-                    // a = b commutative_op a\n-                    if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, r) {\n-                        match op.node {\n-                            hir::BiAdd |\n-                            hir::BiMul |\n-                            hir::BiAnd |\n-                            hir::BiOr |\n-                            hir::BiBitXor |\n-                            hir::BiBitAnd |\n-                            hir::BiBitOr => {\n-                                lint(assignee, l);\n-                            },\n-                            _ => {},\n+\n+                    let mut visitor = ExprVisitor {\n+                        assignee: assignee,\n+                        counter: 0,\n+                        cx: cx\n+                    };\n+\n+                    walk_expr(&mut visitor, e);\n+\n+                    if visitor.counter == 1 {\n+                        // a = a op b\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, l) {\n+                            lint(assignee, r);\n+                        }\n+                        // a = b commutative_op a\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, r) {\n+                            match op.node {\n+                                hir::BiAdd |\n+                                hir::BiMul |\n+                                hir::BiAnd |\n+                                hir::BiOr |\n+                                hir::BiBitXor |\n+                                hir::BiBitAnd |\n+                                hir::BiBitOr => {\n+                                    lint(assignee, l);\n+                                },\n+                                _ => {},\n+                            }\n                         }\n                     }\n                 }\n@@ -222,3 +244,22 @@ fn is_commutative(op: hir::BinOp_) -> bool {\n         BiSub | BiDiv | BiRem | BiShl | BiShr | BiLt | BiLe | BiGe | BiGt => false,\n     }\n }\n+\n+struct ExprVisitor<'a, 'tcx: 'a> {\n+    assignee: &'a hir::Expr,\n+    counter: u8,\n+    cx: &'a LateContext<'a, 'tcx>,\n+}\n+\n+impl<'a, 'tcx: 'a> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+        if SpanlessEq::new(self.cx).ignore_fn().eq_expr(self.assignee, &expr) {\n+            self.counter += 1;\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "2d3adc2a661f945822a7b8db423e923cc42a3f74", "filename": "tests/ui/assign_ops2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "patch": "@@ -2,7 +2,7 @@\n \n \n #[allow(unused_assignments)]\n-#[warn(misrefactored_assign_op)]\n+#[warn(misrefactored_assign_op, assign_op_pattern)]\n fn main() {\n     let mut a = 5;\n     a += a + 1;\n@@ -13,6 +13,10 @@ fn main() {\n     a /= a / 2;\n     a %= a % 5;\n     a &= a & 1;\n+    a *= a * a;\n+    a = a * a * a;\n+    a = a * 42 * a;\n+    a = a * 2 + a;\n     a -= 1 - a;\n     a /= 5 / a;\n     a %= 42 % a;"}, {"sha": "2858af1f8c0b5493291ec1943867d97ba23b19df", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 87, "deletions": 9, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "patch": "@@ -2,51 +2,129 @@ error: variable appears on both sides of an assignment operation\n  --> $DIR/assign_ops2.rs:8:5\n   |\n 8 |     a += a + 1;\n-  |     ^^^^^^^^^^ help: replace it with: `a += 1`\n+  |     ^^^^^^^^^^\n   |\n   = note: `-D misrefactored-assign-op` implied by `-D warnings`\n+help: Did you mean a = a + 1 or a = a + a + 1? Consider replacing it with\n+  |\n+8 |     a += 1;\n+  |     ^^^^^^\n+help: or\n+  |\n+8 |     a = a + a + 1;\n+  |     ^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n  --> $DIR/assign_ops2.rs:9:5\n   |\n 9 |     a += 1 + a;\n-  |     ^^^^^^^^^^ help: replace it with: `a += 1`\n+  |     ^^^^^^^^^^\n+help: Did you mean a = a + 1 or a = a + 1 + a? Consider replacing it with\n+  |\n+9 |     a += 1;\n+  |     ^^^^^^\n+help: or\n+  |\n+9 |     a = a + 1 + a;\n+  |     ^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:10:5\n    |\n 10 |     a -= a - 1;\n-   |     ^^^^^^^^^^ help: replace it with: `a -= 1`\n+   |     ^^^^^^^^^^\n+help: Did you mean a = a - 1 or a = a - (a - 1)? Consider replacing it with\n+   |\n+10 |     a -= 1;\n+   |     ^^^^^^\n+help: or\n+   |\n+10 |     a = a - (a - 1);\n+   |     ^^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:11:5\n    |\n 11 |     a *= a * 99;\n-   |     ^^^^^^^^^^^ help: replace it with: `a *= 99`\n+   |     ^^^^^^^^^^^\n+help: Did you mean a = a * 99 or a = a * a * 99? Consider replacing it with\n+   |\n+11 |     a *= 99;\n+   |     ^^^^^^^\n+help: or\n+   |\n+11 |     a = a * a * 99;\n+   |     ^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:12:5\n    |\n 12 |     a *= 42 * a;\n-   |     ^^^^^^^^^^^ help: replace it with: `a *= 42`\n+   |     ^^^^^^^^^^^\n+help: Did you mean a = a * 42 or a = a * 42 * a? Consider replacing it with\n+   |\n+12 |     a *= 42;\n+   |     ^^^^^^^\n+help: or\n+   |\n+12 |     a = a * 42 * a;\n+   |     ^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:13:5\n    |\n 13 |     a /= a / 2;\n-   |     ^^^^^^^^^^ help: replace it with: `a /= 2`\n+   |     ^^^^^^^^^^\n+help: Did you mean a = a / 2 or a = a / (a / 2)? Consider replacing it with\n+   |\n+13 |     a /= 2;\n+   |     ^^^^^^\n+help: or\n+   |\n+13 |     a = a / (a / 2);\n+   |     ^^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:14:5\n    |\n 14 |     a %= a % 5;\n-   |     ^^^^^^^^^^ help: replace it with: `a %= 5`\n+   |     ^^^^^^^^^^\n+help: Did you mean a = a % 5 or a = a % (a % 5)? Consider replacing it with\n+   |\n+14 |     a %= 5;\n+   |     ^^^^^^\n+help: or\n+   |\n+14 |     a = a % (a % 5);\n+   |     ^^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:15:5\n    |\n 15 |     a &= a & 1;\n-   |     ^^^^^^^^^^ help: replace it with: `a &= 1`\n+   |     ^^^^^^^^^^\n+help: Did you mean a = a & 1 or a = a & a & 1? Consider replacing it with\n+   |\n+15 |     a &= 1;\n+   |     ^^^^^^\n+help: or\n+   |\n+15 |     a = a & a & 1;\n+   |     ^^^^^^^^^^^^^\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:16:5\n+   |\n+16 |     a *= a * a;\n+   |     ^^^^^^^^^^\n+help: Did you mean a = a * a or a = a * a * a? Consider replacing it with\n+   |\n+16 |     a *= a;\n+   |     ^^^^^^\n+help: or\n+   |\n+16 |     a = a * a * a;\n+   |     ^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}