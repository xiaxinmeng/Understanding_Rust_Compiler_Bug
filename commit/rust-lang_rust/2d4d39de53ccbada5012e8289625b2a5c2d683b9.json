{"sha": "2d4d39de53ccbada5012e8289625b2a5c2d683b9", "node_id": "C_kwDOAAsO6NoAKDJkNGQzOWRlNTNjY2JhZGE1MDEyZTgyODk2MjViMmE1YzJkNjgzYjk", "commit": {"author": {"name": "Jirka Vebr", "email": "jirkavebr@gmail.com", "date": "2023-02-16T12:05:08Z"}, "committer": {"name": "Jirka Vebr", "email": "jirkavebr@gmail.com", "date": "2023-02-16T12:05:33Z"}, "message": "Add the `let_underscore_untyped` lint", "tree": {"sha": "8f3ad75a58d01d51511792e58f0e7bd7cddcdbf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3ad75a58d01d51511792e58f0e7bd7cddcdbf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4d39de53ccbada5012e8289625b2a5c2d683b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCAAyFiEETIK5e7AnTTVwmxKOXZiyBdhD34MFAmPuHBcUHGppcmthdmVi\nckBnbWFpbC5jb20ACgkQXZiyBdhD34MiBQ//evc0te1cVD94TUWucg+CvUI/+4YG\nkIdzm884otkQeOfg3vYB/dOU1C9wCshz81xi8j17OP79ZDj2twBM2af0YSCXs+m2\n2Ic3RUHzK4yYxKkPgnQJI6oK7T4e764EYjxg9xFj/zLBmqCKYxZMOlSwMUTbPPR+\nAuTaNDCRgIfI0Fm3V7mnVfRQI3UNtHeFU9XFjD0nxCCMA1v8x7GZn1so93INZMm0\nE2lg05z5zrDm5IwgHjEMH700eCXEcSB5Lgduu3WWLABxwHXfNnfg0E3mRXGeRPmD\nCkosgQEfAcsmfv7OFxlviLvURqVePCkHuS5/TnLSZFunT3kSpfkqTJacgsFQhXZN\nHJywylKSgfjgzoUjTBf1SXvTfJnmZM5Quz/GMvue0uzZTiC0HJGkS0yYF50wYCu3\nsqfplKRYm6nZW7CVoYmpQG+Ig1dUTI7AKkYR83mhQPFnT6JMofnikVI8RfkgQwAO\nASjFHyYyPXaIUpJsAkjCPX2cnJraynP7kNbjw4ipyCNallr33chvUKDpUYXyUEtZ\n8Dnt33+7XVbdgMk/s44gMS1yqVcR0VUyk5LLcTDqRPOoBV7e8ZXBb0HoGqcsOhKO\n4OAhPpUSuz2t7Itqw3NBTLVUShT7+PUCanLIfUZ/y6ifbQy98noLDX5cjl5htGwM\nLuy8X4BGEC/mhAU=\n=s+7R\n-----END PGP SIGNATURE-----", "payload": "tree 8f3ad75a58d01d51511792e58f0e7bd7cddcdbf0\nparent 5b6795f50b521b11393d39f823d8a3e5b262b134\nauthor Jirka Vebr <jirkavebr@gmail.com> 1676549108 +0100\ncommitter Jirka Vebr <jirkavebr@gmail.com> 1676549133 +0100\n\nAdd the `let_underscore_untyped` lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4d39de53ccbada5012e8289625b2a5c2d683b9", "html_url": "https://github.com/rust-lang/rust/commit/2d4d39de53ccbada5012e8289625b2a5c2d683b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4d39de53ccbada5012e8289625b2a5c2d683b9/comments", "author": {"login": "JirkaVebr", "id": 361072, "node_id": "MDQ6VXNlcjM2MTA3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/361072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JirkaVebr", "html_url": "https://github.com/JirkaVebr", "followers_url": "https://api.github.com/users/JirkaVebr/followers", "following_url": "https://api.github.com/users/JirkaVebr/following{/other_user}", "gists_url": "https://api.github.com/users/JirkaVebr/gists{/gist_id}", "starred_url": "https://api.github.com/users/JirkaVebr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JirkaVebr/subscriptions", "organizations_url": "https://api.github.com/users/JirkaVebr/orgs", "repos_url": "https://api.github.com/users/JirkaVebr/repos", "events_url": "https://api.github.com/users/JirkaVebr/events{/privacy}", "received_events_url": "https://api.github.com/users/JirkaVebr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JirkaVebr", "id": 361072, "node_id": "MDQ6VXNlcjM2MTA3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/361072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JirkaVebr", "html_url": "https://github.com/JirkaVebr", "followers_url": "https://api.github.com/users/JirkaVebr/followers", "following_url": "https://api.github.com/users/JirkaVebr/following{/other_user}", "gists_url": "https://api.github.com/users/JirkaVebr/gists{/gist_id}", "starred_url": "https://api.github.com/users/JirkaVebr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JirkaVebr/subscriptions", "organizations_url": "https://api.github.com/users/JirkaVebr/orgs", "repos_url": "https://api.github.com/users/JirkaVebr/repos", "events_url": "https://api.github.com/users/JirkaVebr/events{/privacy}", "received_events_url": "https://api.github.com/users/JirkaVebr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b6795f50b521b11393d39f823d8a3e5b262b134", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6795f50b521b11393d39f823d8a3e5b262b134", "html_url": "https://github.com/rust-lang/rust/commit/5b6795f50b521b11393d39f823d8a3e5b262b134"}], "stats": {"total": 184, "additions": 172, "deletions": 12}, "files": [{"sha": "c8165caff44986a2ae2ab99f60ed24e23bfcd4e4", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -4494,6 +4494,7 @@ Released 2018-09-13\n [`let_underscore_future`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n+[`let_underscore_untyped`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug"}, {"sha": "8fa028c62072e8c78957f54cd7bffa9a211d62a0", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -224,6 +224,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::let_underscore::LET_UNDERSCORE_FUTURE_INFO,\n     crate::let_underscore::LET_UNDERSCORE_LOCK_INFO,\n     crate::let_underscore::LET_UNDERSCORE_MUST_USE_INFO,\n+    crate::let_underscore::LET_UNDERSCORE_UNTYPED_INFO,\n     crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,\n     crate::lifetimes::NEEDLESS_LIFETIMES_INFO,\n     crate::literal_representation::DECIMAL_LITERAL_REPRESENTATION_INFO,"}, {"sha": "7600777fab97039f41f4064d664386d6f9d372bd", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -90,7 +90,45 @@ declare_clippy_lint! {\n     \"non-binding `let` on a future\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `let _ = <expr>` without a type annotation, and suggests to either provide one,\n+    /// or remove the `let` keyword altogether.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `let _ = <expr>` expression ignores the value of `<expr>` but will remain doing so even\n+    /// if the type were to change, thus potentially introducing subtle bugs. By supplying a type\n+    /// annotation, one will be forced to re-visit the decision to ignore the value in such cases.\n+    ///\n+    /// ### Known problems\n+    /// The `_ = <expr>` is not properly supported by some tools (e.g. IntelliJ) and may seem odd\n+    /// to many developers. This lint also partially overlaps with the other `let_underscore_*`\n+    /// lints.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo() -> Result<u32, ()> {\n+    ///     Ok(123)\n+    /// }\n+    /// let _ = foo();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo() -> Result<u32, ()> {\n+    ///     Ok(123)\n+    /// }\n+    /// // Either provide a type annotation:\n+    /// let _: Result<u32, ()> = foo();\n+    /// // \u2026or drop the let keyword:\n+    /// _ = foo();\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub LET_UNDERSCORE_UNTYPED,\n+    pedantic,\n+    \"non-binding `let` without a type annotation\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE, LET_UNDERSCORE_UNTYPED]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::PARKING_LOT_MUTEX_GUARD,\n@@ -148,6 +186,18 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     \"consider explicitly using function result\",\n                 );\n             }\n+\n+            if local.pat.default_binding_modes && local.ty.is_none() {\n+                // When `default_binding_modes` is true, the `let` keyword is present.\n+                span_lint_and_help(\n+                    cx,\n+                    LET_UNDERSCORE_UNTYPED,\n+                    local.span,\n+                    \"non-binding `let` without a type annotation\",\n+                    None,\n+                    \"consider adding a type annotation or removing the `let` keyword\",\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "bcb33c5c7e37e713f2b04e0d276e2d16eda5f44a", "filename": "tests/ui/let_underscore_untyped.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Flet_underscore_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Flet_underscore_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.rs?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -0,0 +1,54 @@\n+#![allow(unused)]\n+#![warn(clippy::let_underscore_untyped)]\n+\n+use std::future::Future;\n+use std::{boxed::Box, fmt::Display};\n+\n+fn a() -> u32 {\n+    1\n+}\n+\n+fn b<T>(x: T) -> T {\n+    x\n+}\n+\n+fn c() -> impl Display {\n+    1\n+}\n+\n+fn d(x: &u32) -> &u32 {\n+    x\n+}\n+\n+fn e() -> Result<u32, ()> {\n+    Ok(1)\n+}\n+\n+fn f() -> Box<dyn Display> {\n+    Box::new(1)\n+}\n+\n+fn main() {\n+    let _ = a();\n+    let _ = b(1);\n+    let _ = c();\n+    let _ = d(&1);\n+    let _ = e();\n+    let _ = f();\n+\n+    _ = a();\n+    _ = b(1);\n+    _ = c();\n+    _ = d(&1);\n+    _ = e();\n+    _ = f();\n+\n+    let _: u32 = a();\n+    let _: u32 = b(1);\n+    let _: &u32 = d(&1);\n+    let _: Result<_, _> = e();\n+    let _: Box<_> = f();\n+\n+    #[allow(clippy::let_underscore_untyped)]\n+    let _ = a();\n+}"}, {"sha": "36c3d1214d6b3e1831a5b605fdf1e351466e7b4f", "filename": "tests/ui/let_underscore_untyped.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Flet_underscore_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Flet_underscore_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.stderr?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -0,0 +1,51 @@\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:32:5\n+   |\n+LL |     let _ = a();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+   = note: `-D clippy::let-underscore-untyped` implied by `-D warnings`\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:33:5\n+   |\n+LL |     let _ = b(1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:34:5\n+   |\n+LL |     let _ = c();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:35:5\n+   |\n+LL |     let _ = d(&1);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:36:5\n+   |\n+LL |     let _ = e();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:37:5\n+   |\n+LL |     let _ = f();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "8e2f11389f8988442f8bcbf80fc724be571d5809", "filename": "tests/ui/map_flatten_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.fixed?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_untyped)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n #![allow(clippy::redundant_closure)]"}, {"sha": "a783a99c4ffd39907be0348b289af6c702bdbfe8", "filename": "tests/ui/map_flatten_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmap_flatten_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmap_flatten_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.rs?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_untyped)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n #![allow(clippy::redundant_closure)]"}, {"sha": "c91f0b9ae94fec2626997de308d60c006d6ffaa4", "filename": "tests/ui/map_flatten_fixable.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.stderr?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -1,49 +1,49 @@\n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:17:47\n+  --> $DIR/map_flatten_fixable.rs:18:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:18:47\n+  --> $DIR/map_flatten_fixable.rs:19:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:19:47\n+  --> $DIR/map_flatten_fixable.rs:20:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:20:47\n+  --> $DIR/map_flatten_fixable.rs:21:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:23:47\n+  --> $DIR/map_flatten_fixable.rs:24:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `flat_map` and remove the `.flatten()`: `flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on `Option`\n-  --> $DIR/map_flatten_fixable.rs:26:40\n+  --> $DIR/map_flatten_fixable.rs:27:40\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                        ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Result`\n-  --> $DIR/map_flatten_fixable.rs:29:42\n+  --> $DIR/map_flatten_fixable.rs:30:42\n    |\n LL |     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n    |                                          ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:38:10\n+  --> $DIR/map_flatten_fixable.rs:39:10\n    |\n LL |           .map(|n| match n {\n    |  __________^\n@@ -72,7 +72,7 @@ LL ~         });\n    |\n \n error: called `map(..).flatten()` on `Option`\n-  --> $DIR/map_flatten_fixable.rs:58:10\n+  --> $DIR/map_flatten_fixable.rs:59:10\n    |\n LL |           .map(|_| {\n    |  __________^"}, {"sha": "1519e4da9348a482ca2fda1dd94e7373b722e173", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -4,6 +4,7 @@\n #![allow(\n     clippy::disallowed_names,\n     clippy::default_trait_access,\n+    clippy::let_underscore_untyped,\n     clippy::missing_docs_in_private_items,\n     clippy::missing_safety_doc,\n     clippy::non_ascii_literal,"}, {"sha": "4643e09e2702835ac9803b6050b49f1ba7267171", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d39de53ccbada5012e8289625b2a5c2d683b9/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=2d4d39de53ccbada5012e8289625b2a5c2d683b9", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:104:5\n+  --> $DIR/methods.rs:105:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n-  --> $DIR/methods.rs:125:13\n+  --> $DIR/methods.rs:126:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^"}]}