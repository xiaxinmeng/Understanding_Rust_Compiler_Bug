{"sha": "63ac49638b32fd9daebb36e75ee213580503bf9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYWM0OTYzOGIzMmZkOWRhZWJiMzZlNzVlZTIxMzU4MDUwM2JmOWU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-18T14:19:47Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-18T14:19:47Z"}, "message": "Support match_pattern_separator_break_point config option", "tree": {"sha": "84b224da22d9104dd9b0d9b3392f1fb4a29df048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b224da22d9104dd9b0d9b3392f1fb4a29df048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ac49638b32fd9daebb36e75ee213580503bf9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ac49638b32fd9daebb36e75ee213580503bf9e", "html_url": "https://github.com/rust-lang/rust/commit/63ac49638b32fd9daebb36e75ee213580503bf9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ac49638b32fd9daebb36e75ee213580503bf9e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3567cec94620db57005e8511bb69f26ae389804", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3567cec94620db57005e8511bb69f26ae389804", "html_url": "https://github.com/rust-lang/rust/commit/a3567cec94620db57005e8511bb69f26ae389804"}], "stats": {"total": 95, "additions": 75, "deletions": 20}, "files": [{"sha": "e49d8a99ad525e9299ee5f871d79a39d120f8069", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=63ac49638b32fd9daebb36e75ee213580503bf9e", "patch": "@@ -25,7 +25,7 @@ use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n use items::{span_hi_for_arg, span_lo_for_arg};\n use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n             struct_lit_shape, struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, ListTactic, Separator, SeparatorTactic};\n+            ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n use patterns::{can_be_overflowed_pat, TuplePatField};\n use rewrite::{Rewrite, RewriteContext};\n@@ -473,6 +473,7 @@ where\n         } else {\n             SeparatorTactic::Vertical\n         },\n+        separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n         ends_with_newline: ends_with_newline,\n         preserve_newline: false,\n@@ -555,6 +556,7 @@ fn rewrite_closure_fn_decl(\n         tactic: tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n+        separator_place: SeparatorPlace::Back,\n         shape: arg_shape,\n         ends_with_newline: false,\n         preserve_newline: true,\n@@ -1578,6 +1580,7 @@ fn rewrite_match_arms(\n         // We will add/remove commas inside `arm.rewrite()`, and hence no separator here.\n         separator: \"\",\n         trailing_separator: SeparatorTactic::Never,\n+        separator_place: SeparatorPlace::Back,\n         shape: arm_shape,\n         ends_with_newline: true,\n         preserve_newline: true,\n@@ -1659,6 +1662,7 @@ fn rewrite_match_pattern(\n         tactic: tactic,\n         separator: \" |\",\n         trailing_separator: SeparatorTactic::Never,\n+        separator_place: context.config.match_pattern_separator_break_point(),\n         shape: pat_shape,\n         ends_with_newline: false,\n         preserve_newline: false,\n@@ -2161,6 +2165,7 @@ where\n         } else {\n             context.config.trailing_comma()\n         },\n+        separator_place: SeparatorPlace::Back,\n         shape: shape,\n         ends_with_newline: context.use_block_indent() && tactic == DefinitiveListTactic::Vertical,\n         preserve_newline: false,\n@@ -2761,6 +2766,7 @@ where\n         tactic: tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n+        separator_place: SeparatorPlace::Back,\n         shape: shape,\n         ends_with_newline: false,\n         preserve_newline: false,"}, {"sha": "e5dfb12f4c491a778a2872aaddf5bf94fd7486c5", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=63ac49638b32fd9daebb36e75ee213580503bf9e", "patch": "@@ -17,7 +17,7 @@ use Shape;\n use codemap::SpanUtils;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, Separator, SeparatorTactic};\n+            ListItem, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use types::{rewrite_path, PathContext};\n use utils;\n@@ -496,6 +496,7 @@ fn rewrite_use_list(\n         } else {\n             SeparatorTactic::Never\n         },\n+        separator_place: SeparatorPlace::Back,\n         shape: nested_shape,\n         ends_with_newline: ends_with_newline,\n         preserve_newline: true,"}, {"sha": "99b189d341c723d02714f8c017dc98738cfcd7f8", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=63ac49638b32fd9daebb36e75ee213580503bf9e", "patch": "@@ -24,7 +24,7 @@ use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, ListTactic, Separator, SeparatorTactic};\n+            ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use types::join_bounds;\n use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_abi,\n@@ -481,6 +481,7 @@ impl<'a> FmtVisitor<'a> {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n             trailing_separator: self.config.trailing_comma(),\n+            separator_place: SeparatorPlace::Back,\n             shape: shape,\n             ends_with_newline: true,\n             preserve_newline: true,\n@@ -2267,6 +2268,7 @@ fn rewrite_args(\n         } else {\n             trailing_comma\n         },\n+        separator_place: SeparatorPlace::Back,\n         shape: Shape::legacy(budget, indent),\n         ends_with_newline: tactic.ends_with_newline(context.config.fn_args_layout()),\n         preserve_newline: true,\n@@ -2462,6 +2464,7 @@ where\n         } else {\n             context.config.trailing_comma()\n         },\n+        separator_place: SeparatorPlace::Back,\n         shape: shape,\n         ends_with_newline: tactic.ends_with_newline(context.config.generics_indent()),\n         preserve_newline: true,\n@@ -2574,6 +2577,7 @@ fn rewrite_where_clause_rfc_style(\n         tactic: DefinitiveListTactic::Vertical,\n         separator: \",\",\n         trailing_separator: comma_tactic,\n+        separator_place: SeparatorPlace::Back,\n         shape: clause_shape,\n         ends_with_newline: true,\n         preserve_newline: true,\n@@ -2685,6 +2689,7 @@ fn rewrite_where_clause(\n         tactic: tactic,\n         separator: \",\",\n         trailing_separator: comma_tactic,\n+        separator_place: SeparatorPlace::Back,\n         shape: Shape::legacy(budget, offset),\n         ends_with_newline: tactic.ends_with_newline(context.config.where_pred_indent()),\n         preserve_newline: true,"}, {"sha": "ea34cdfc4801f403cccfa791b15b7e99b6517d31", "filename": "src/lists.rs", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=63ac49638b32fd9daebb36e75ee213580503bf9e", "patch": "@@ -61,6 +61,7 @@ pub struct ListFormatting<'a> {\n     pub tactic: DefinitiveListTactic,\n     pub separator: &'a str,\n     pub trailing_separator: SeparatorTactic,\n+    pub separator_place: SeparatorPlace,\n     pub shape: Shape,\n     // Non-expressions, e.g. items, will have a new line at the end of the list.\n     // Important for comment styles.\n@@ -70,6 +71,19 @@ pub struct ListFormatting<'a> {\n     pub config: &'a Config,\n }\n \n+impl<'a> ListFormatting<'a> {\n+    pub fn needs_trailing_separator(&self) -> bool {\n+        match self.trailing_separator {\n+            // We always put separator in front.\n+            SeparatorTactic::Always => true,\n+            SeparatorTactic::Vertical => self.tactic == DefinitiveListTactic::Vertical,\n+            SeparatorTactic::Never => {\n+                self.tactic == DefinitiveListTactic::Vertical && self.separator_place.is_front()\n+            }\n+        }\n+    }\n+}\n+\n impl AsRef<ListItem> for ListItem {\n     fn as_ref(&self) -> &ListItem {\n         self\n@@ -165,6 +179,32 @@ impl Separator {\n     }\n }\n \n+/// Where to put separator.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+pub enum SeparatorPlace {\n+    Front,\n+    Back,\n+}\n+\n+impl_enum_serialize_and_deserialize!(SeparatorPlace, Front, Back);\n+\n+impl SeparatorPlace {\n+    pub fn is_front(&self) -> bool {\n+        *self == SeparatorPlace::Front\n+    }\n+\n+    pub fn is_back(&self) -> bool {\n+        *self == SeparatorPlace::Back\n+    }\n+\n+    pub fn from_tactic(default: SeparatorPlace, tactic: DefinitiveListTactic) -> SeparatorPlace {\n+        match tactic {\n+            DefinitiveListTactic::Vertical => default,\n+            _ => SeparatorPlace::Back,\n+        }\n+    }\n+}\n+\n pub fn definitive_tactic<I, T>(\n     items: I,\n     tactic: ListTactic,\n@@ -214,11 +254,12 @@ where\n \n     // Now that we know how we will layout, we can decide for sure if there\n     // will be a trailing separator.\n-    let mut trailing_separator = needs_trailing_separator(formatting.trailing_separator, tactic);\n+    let mut trailing_separator = formatting.needs_trailing_separator();\n     let mut result = String::new();\n     let cloned_items = items.clone();\n     let mut iter = items.into_iter().enumerate().peekable();\n     let mut item_max_width: Option<usize> = None;\n+    let mut sep_place = SeparatorPlace::from_tactic(formatting.separator_place, tactic);\n \n     let mut line_len = 0;\n     let indent_str = &formatting.shape.indent.to_string(formatting.config);\n@@ -258,13 +299,16 @@ where\n                     result.push('\\n');\n                     result.push_str(indent_str);\n                     line_len = 0;\n-                    if tactic == DefinitiveListTactic::Mixed && formatting.ends_with_newline {\n+                    if formatting.ends_with_newline {\n                         if last {\n                             separate = true;\n                         } else {\n                             trailing_separator = true;\n                         }\n                     }\n+                    sep_place = formatting.separator_place;\n+                } else {\n+                    sep_place = SeparatorPlace::Back;\n                 }\n \n                 if line_len > 0 {\n@@ -314,6 +358,10 @@ where\n             item_max_width = None;\n         }\n \n+        if separate && sep_place.is_front() && !first {\n+            result.push_str(formatting.separator.trim());\n+            result.push(' ');\n+        }\n         result.push_str(&inner_item[..]);\n \n         // Post-comments\n@@ -330,7 +378,7 @@ where\n             result.push_str(&formatted_comment);\n         }\n \n-        if separate {\n+        if separate && sep_place.is_back() {\n             result.push_str(formatting.separator);\n         }\n \n@@ -642,17 +690,6 @@ where\n     }\n }\n \n-fn needs_trailing_separator(\n-    separator_tactic: SeparatorTactic,\n-    list_tactic: DefinitiveListTactic,\n-) -> bool {\n-    match separator_tactic {\n-        SeparatorTactic::Always => true,\n-        SeparatorTactic::Vertical => list_tactic == DefinitiveListTactic::Vertical,\n-        SeparatorTactic::Never => false,\n-    }\n-}\n-\n /// Returns the count and total width of the list items.\n fn calculate_width<I, T>(items: I) -> (usize, usize)\n where\n@@ -762,6 +799,7 @@ pub fn struct_lit_formatting<'a>(\n         } else {\n             context.config.trailing_comma()\n         },\n+        separator_place: SeparatorPlace::Back,\n         shape: shape,\n         ends_with_newline: ends_with_newline,\n         preserve_newline: true,"}, {"sha": "455c4ad5ae41ad849cf1ec53f4733bb125239b78", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=63ac49638b32fd9daebb36e75ee213580503bf9e", "patch": "@@ -23,7 +23,7 @@ use config::{IndentStyle, Style, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens};\n use items::{format_generics_item_list, generics_shape_from_config};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n-            SeparatorTactic};\n+            SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp, wrap_str};\n \n@@ -365,6 +365,7 @@ where\n         } else {\n             context.config.trailing_comma()\n         },\n+        separator_place: SeparatorPlace::Back,\n         shape: list_shape,\n         ends_with_newline: tactic.ends_with_newline(context.config.fn_call_style()),\n         preserve_newline: true,"}, {"sha": "5c48acbb9d0e58cbdfe7e2ca31b6bb97e2c2a591", "filename": "src/vertical.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=63ac49638b32fd9daebb36e75ee213580503bf9e", "patch": "@@ -20,7 +20,8 @@ use codemap::SpanUtils;\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n use items::{rewrite_struct_field, rewrite_struct_field_prefix};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n+            SeparatorPlace};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{contains_skip, is_attributes_extendable, mk_sp};\n \n@@ -257,6 +258,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         tactic: tactic,\n         separator: \",\",\n         trailing_separator: context.config.trailing_comma(),\n+        separator_place: SeparatorPlace::Back,\n         shape: item_shape,\n         ends_with_newline: true,\n         preserve_newline: true,"}, {"sha": "5777a871d050b1fe3c74a061887b65b1c83151ec", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac49638b32fd9daebb36e75ee213580503bf9e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=63ac49638b32fd9daebb36e75ee213580503bf9e", "patch": "@@ -24,7 +24,8 @@ use config::{BraceStyle, Config};\n use expr::{format_expr, ExprType};\n use items::{format_impl, format_trait, rewrite_associated_impl_type, rewrite_associated_type,\n             rewrite_static, rewrite_type_alias};\n-use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorTactic};\n+use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n+            SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n@@ -917,6 +918,7 @@ impl Rewrite for ast::MetaItem {\n                     tactic: DefinitiveListTactic::Mixed,\n                     separator: \",\",\n                     trailing_separator: SeparatorTactic::Never,\n+                    separator_place: SeparatorPlace::Back,\n                     shape: item_shape,\n                     ends_with_newline: false,\n                     preserve_newline: false,"}]}