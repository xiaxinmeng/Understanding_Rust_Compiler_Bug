{"sha": "4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "node_id": "C_kwDOAAsO6NoAKDRhZGZiYmZiYWRmMGZiNzRkZWUwNWQ0YmM1MTEwZTAwNTk2YzU5MTk", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-18T15:00:49Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-18T15:00:49Z"}, "message": "partially support panic message in `MirEvalError`", "tree": {"sha": "c27745fec4ba5940e1db0421deac3d73a31d2ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c27745fec4ba5940e1db0421deac3d73a31d2ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "html_url": "https://github.com/rust-lang/rust/commit/4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "html_url": "https://github.com/rust-lang/rust/commit/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f"}], "stats": {"total": 244, "additions": 199, "deletions": 45}, "files": [{"sha": "ea682f5cbde3578c3beca86aac7e587a35ab898a", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -187,6 +187,15 @@ impl Body {\n         pretty::print_body_hir(db, self, owner)\n     }\n \n+    pub fn pretty_print_expr(\n+        &self,\n+        db: &dyn DefDatabase,\n+        owner: DefWithBodyId,\n+        expr: ExprId,\n+    ) -> String {\n+        pretty::print_expr_hir(db, self, owner, expr)\n+    }\n+\n     fn new(\n         db: &dyn DefDatabase,\n         owner: DefWithBodyId,"}, {"sha": "318f654c16fa12511e8d439bfa1b946f9fe1e19d", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -61,6 +61,17 @@ pub(super) fn print_body_hir(db: &dyn DefDatabase, body: &Body, owner: DefWithBo\n     p.buf\n }\n \n+pub(super) fn print_expr_hir(\n+    _db: &dyn DefDatabase,\n+    body: &Body,\n+    _owner: DefWithBodyId,\n+    expr: ExprId,\n+) -> String {\n+    let mut p = Printer { body, buf: String::new(), indent_level: 0, needs_indent: false };\n+    p.print_expr(expr);\n+    p.buf\n+}\n+\n macro_rules! w {\n     ($dst:expr, $($arg:tt)*) => {\n         { let _ = write!($dst, $($arg)*); }"}, {"sha": "13aa6130be8b60fcda70eafc57945de1770df583", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -201,7 +201,7 @@ macro_rules! format_args {\n }\n \n fn main() {\n-    $crate::fmt::Arguments::new_v1(&[\"\", \" \", ], &[$crate::fmt::ArgumentV1::new(&(arg1(a, b, c)), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(arg2), $crate::fmt::Debug::fmt), ]);\n+    ::core::fmt::Arguments::new_v1(&[\"\", \" \", ], &[::core::fmt::ArgumentV1::new(&(arg1(a, b, c)), ::core::fmt::Display::fmt), ::core::fmt::ArgumentV1::new(&(arg2), ::core::fmt::Debug::fmt), ]);\n }\n \"##]],\n     );\n@@ -229,7 +229,7 @@ macro_rules! format_args {\n }\n \n fn main() {\n-    $crate::fmt::Arguments::new_v1(&[\"\", \" \", ], &[$crate::fmt::ArgumentV1::new(&(a::<A, B>()), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(b), $crate::fmt::Debug::fmt), ]);\n+    ::core::fmt::Arguments::new_v1(&[\"\", \" \", ], &[::core::fmt::ArgumentV1::new(&(a::<A, B>()), ::core::fmt::Display::fmt), ::core::fmt::ArgumentV1::new(&(b), ::core::fmt::Debug::fmt), ]);\n }\n \"##]],\n     );\n@@ -262,7 +262,7 @@ macro_rules! format_args {\n }\n \n fn main() {\n-    $crate::fmt::Arguments::new_v1(&[r#\"\"#, r#\",mismatch,\"\"#, r#\"\",\"\"#, r#\"\"\"#, ], &[$crate::fmt::ArgumentV1::new(&(location_csv_pat(db, &analysis, vfs, &sm, pat_id)), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(mismatch.expected.display(db)), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(mismatch.actual.display(db)), $crate::fmt::Display::fmt), ]);\n+    ::core::fmt::Arguments::new_v1(&[r#\"\"#, r#\",mismatch,\"\"#, r#\"\",\"\"#, r#\"\"\"#, ], &[::core::fmt::ArgumentV1::new(&(location_csv_pat(db, &analysis, vfs, &sm, pat_id)), ::core::fmt::Display::fmt), ::core::fmt::ArgumentV1::new(&(mismatch.expected.display(db)), ::core::fmt::Display::fmt), ::core::fmt::ArgumentV1::new(&(mismatch.actual.display(db)), ::core::fmt::Display::fmt), ]);\n }\n \"##]],\n     );\n@@ -296,7 +296,7 @@ macro_rules! format_args {\n }\n \n fn main() {\n-    $crate::fmt::Arguments::new_v1(&[\"xxx\", \"y\", \"zzz\", ], &[$crate::fmt::ArgumentV1::new(&(2), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(b), $crate::fmt::Debug::fmt), ]);\n+    ::core::fmt::Arguments::new_v1(&[\"xxx\", \"y\", \"zzz\", ], &[::core::fmt::ArgumentV1::new(&(2), ::core::fmt::Display::fmt), ::core::fmt::ArgumentV1::new(&(b), ::core::fmt::Debug::fmt), ]);\n }\n \"##]],\n     );\n@@ -327,7 +327,7 @@ macro_rules! format_args {\n fn main() {\n     let _ =\n         /* error: no rule matches input tokens *//* parse error: expected field name or number */\n-$crate::fmt::Arguments::new_v1(&[\"\", \" \", ], &[$crate::fmt::ArgumentV1::new(&(a.), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(), $crate::fmt::Debug::fmt), ]);\n+::core::fmt::Arguments::new_v1(&[\"\", \" \", ], &[::core::fmt::ArgumentV1::new(&(a.), ::core::fmt::Display::fmt), ::core::fmt::ArgumentV1::new(&(), ::core::fmt::Debug::fmt), ]);\n }\n \"##]],\n     );"}, {"sha": "0640ba774bb044443f0cb050ff4399b7cf9d1eaa", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -363,16 +363,14 @@ fn format_args_expand_general(\n                     quote!(#ident)\n                 };\n                 let formatter = match &*format_spec {\n-                    \"?\" => quote!(#DOLLAR_CRATE::fmt::Debug::fmt),\n-                    \"\" => quote!(#DOLLAR_CRATE::fmt::Display::fmt),\n+                    \"?\" => quote!(::core::fmt::Debug::fmt),\n+                    \"\" => quote!(::core::fmt::Display::fmt),\n                     _ => {\n                         // FIXME: implement the rest and return expand error here\n-                        quote!(#DOLLAR_CRATE::fmt::Display::fmt)\n+                        quote!(::core::fmt::Display::fmt)\n                     }\n                 };\n-                arg_tts.push(\n-                    quote! { #DOLLAR_CRATE::fmt::ArgumentV1::new(&(#arg_tree), #formatter), },\n-                );\n+                arg_tts.push(quote! { ::core::fmt::ArgumentV1::new(&(#arg_tree), #formatter), });\n             }\n             '}' => {\n                 if format_iter.peek() == Some(&'}') {\n@@ -400,7 +398,7 @@ fn format_args_expand_general(\n     });\n     let arg_tts = arg_tts.into_iter().flat_map(|arg| arg.token_trees);\n     let expanded = quote! {\n-        #DOLLAR_CRATE::fmt::Arguments::new_v1(&[##part_tts], &[##arg_tts])\n+        ::core::fmt::Arguments::new_v1(&[##part_tts], &[##arg_tts])\n     };\n     ExpandResult { value: expanded, err }\n }"}, {"sha": "10a251ba784334ad0475e4030d8f74f2fc2a944c", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -362,6 +362,8 @@ pub mod known {\n         gt,\n         le,\n         lt,\n+        // known fields of lang items\n+        pieces,\n         // lang items\n         add_assign,\n         add,"}, {"sha": "b4b5fdd8916c4d9096427577d6227647196ed449", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -26,9 +26,11 @@ fn simplify(e: ConstEvalError) -> ConstEvalError {\n #[track_caller]\n fn check_fail(ra_fixture: &str, error: impl FnOnce(ConstEvalError) -> bool) {\n     let (db, file_id) = TestDB::with_single_file(ra_fixture);\n-    match eval_goal(&db, file_id).map_err(simplify) {\n+    match eval_goal(&db, file_id) {\n         Ok(_) => panic!(\"Expected fail, but it succeeded\"),\n-        Err(e) => assert!(error(e)),\n+        Err(e) => {\n+            assert!(error(simplify(e.clone())), \"Actual error was: {}\", pretty_print_err(e, db))\n+        }\n     }\n }\n \n@@ -38,13 +40,7 @@ fn check_number(ra_fixture: &str, answer: i128) {\n     let r = match eval_goal(&db, file_id) {\n         Ok(t) => t,\n         Err(e) => {\n-            let mut err = String::new();\n-            let span_formatter = |file, range| format!(\"{:?} {:?}\", file, range);\n-            match e {\n-                ConstEvalError::MirLowerError(e) => e.pretty_print(&mut err, &db, span_formatter),\n-                ConstEvalError::MirEvalError(e) => e.pretty_print(&mut err, &db, span_formatter),\n-            }\n-            .unwrap();\n+            let err = pretty_print_err(e, db);\n             panic!(\"Error in evaluating goal: {}\", err);\n         }\n     };\n@@ -64,6 +60,17 @@ fn check_number(ra_fixture: &str, answer: i128) {\n     }\n }\n \n+fn pretty_print_err(e: ConstEvalError, db: TestDB) -> String {\n+    let mut err = String::new();\n+    let span_formatter = |file, range| format!(\"{:?} {:?}\", file, range);\n+    match e {\n+        ConstEvalError::MirLowerError(e) => e.pretty_print(&mut err, &db, span_formatter),\n+        ConstEvalError::MirEvalError(e) => e.pretty_print(&mut err, &db, span_formatter),\n+    }\n+    .unwrap();\n+    err\n+}\n+\n fn eval_goal(db: &TestDB, file_id: FileId) -> Result<Const, ConstEvalError> {\n     let module_id = db.module_for_file(file_id);\n     let def_map = module_id.def_map(db);\n@@ -2187,6 +2194,20 @@ fn const_trait_assoc() {\n     );\n }\n \n+#[test]\n+fn panic_messages() {\n+    check_fail(\n+        r#\"\n+    //- minicore: panic\n+    const GOAL: u8 = {\n+        let x: u16 = 2;\n+        panic!(\"hello\");\n+    };\n+    \"#,\n+        |e| e == ConstEvalError::MirEvalError(MirEvalError::Panic(\"hello\".to_string())),\n+    );\n+}\n+\n #[test]\n fn exec_limits() {\n     check_fail("}, {"sha": "9ff58b27bb47fb307cc797525c42a389eb955a25", "filename": "crates/hir-ty/src/mir/eval/shim.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Fshim.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -153,10 +153,49 @@ impl Evaluator<'_> {\n         use LangItem::*;\n         let mut args = args.iter();\n         match x {\n-            // FIXME: we want to find the panic message from arguments, but it wouldn't work\n-            // currently even if we do that, since macro expansion of panic related macros\n-            // is dummy.\n-            PanicFmt | BeginPanic => Err(MirEvalError::Panic(\"<format-args>\".to_string())),\n+            BeginPanic => Err(MirEvalError::Panic(\"<unknown-panic-payload>\".to_string())),\n+            PanicFmt => {\n+                let message = (|| {\n+                    let arguments_struct =\n+                        self.db.lang_item(self.crate_id, LangItem::FormatArguments)?.as_struct()?;\n+                    let arguments_layout = self\n+                        .layout_adt(arguments_struct.into(), Substitution::empty(Interner))\n+                        .ok()?;\n+                    let arguments_field_pieces =\n+                        self.db.struct_data(arguments_struct).variant_data.field(&name![pieces])?;\n+                    let pieces_offset = arguments_layout\n+                        .fields\n+                        .offset(u32::from(arguments_field_pieces.into_raw()) as usize)\n+                        .bytes_usize();\n+                    let ptr_size = self.ptr_size();\n+                    let arg = args.next()?;\n+                    let pieces_array_addr =\n+                        Address::from_bytes(&arg[pieces_offset..pieces_offset + ptr_size]).ok()?;\n+                    let pieces_array_len = usize::from_le_bytes(\n+                        (&arg[pieces_offset + ptr_size..pieces_offset + 2 * ptr_size])\n+                            .try_into()\n+                            .ok()?,\n+                    );\n+                    let mut message = \"\".to_string();\n+                    for i in 0..pieces_array_len {\n+                        let piece_ptr_addr = pieces_array_addr.offset(2 * i * ptr_size);\n+                        let piece_addr =\n+                            Address::from_bytes(self.read_memory(piece_ptr_addr, ptr_size).ok()?)\n+                                .ok()?;\n+                        let piece_len = usize::from_le_bytes(\n+                            self.read_memory(piece_ptr_addr.offset(ptr_size), ptr_size)\n+                                .ok()?\n+                                .try_into()\n+                                .ok()?,\n+                        );\n+                        let piece_data = self.read_memory(piece_addr, piece_len).ok()?;\n+                        message += &std::string::String::from_utf8_lossy(piece_data);\n+                    }\n+                    Some(message)\n+                })()\n+                .unwrap_or_else(|| \"<format-args-evaluation-failed>\".to_string());\n+                Err(MirEvalError::Panic(message))\n+            }\n             SliceLen => {\n                 let arg = args\n                     .next()"}, {"sha": "292a771baf91940a4c36758f8d57b212834ac9d0", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -81,7 +81,7 @@ pub enum MirLowerError {\n     UnresolvedMethod(String),\n     UnresolvedField,\n     UnsizedTemporary(Ty),\n-    MissingFunctionDefinition,\n+    MissingFunctionDefinition(DefWithBodyId, ExprId),\n     TypeMismatch(TypeMismatch),\n     /// This should be never happen. Type mismatch should catch everything.\n     TypeError(&'static str),\n@@ -113,6 +113,22 @@ impl MirLowerError {\n                     ConstEvalError::MirEvalError(e) => e.pretty_print(f, db, span_formatter)?,\n                 }\n             }\n+            MirLowerError::MissingFunctionDefinition(owner, x) => {\n+                let body = db.body(*owner);\n+                writeln!(\n+                    f,\n+                    \"Missing function definition for {}\",\n+                    body.pretty_print_expr(db.upcast(), *owner, *x)\n+                )?;\n+            }\n+            MirLowerError::TypeMismatch(e) => {\n+                writeln!(\n+                    f,\n+                    \"Type mismatch: Expected {}, found {}\",\n+                    e.expected.display(db),\n+                    e.actual.display(db),\n+                )?;\n+            }\n             MirLowerError::LayoutError(_)\n             | MirLowerError::UnsizedTemporary(_)\n             | MirLowerError::IncompleteExpr\n@@ -122,8 +138,6 @@ impl MirLowerError {\n             | MirLowerError::RecordLiteralWithoutPath\n             | MirLowerError::UnresolvedMethod(_)\n             | MirLowerError::UnresolvedField\n-            | MirLowerError::MissingFunctionDefinition\n-            | MirLowerError::TypeMismatch(_)\n             | MirLowerError::TypeError(_)\n             | MirLowerError::NotSupported(_)\n             | MirLowerError::ContinueWithoutLoop\n@@ -599,7 +613,7 @@ impl<'ctx> MirLowerCtx<'ctx> {\n                         };\n                         self.lower_call_and_args(func, args.iter().copied(), place, current, self.is_uninhabited(expr_id), expr_id.into())\n                     }\n-                    TyKind::Error => return Err(MirLowerError::MissingFunctionDefinition),\n+                    TyKind::Error => return Err(MirLowerError::MissingFunctionDefinition(self.owner, expr_id)),\n                     _ => return Err(MirLowerError::TypeError(\"function call on bad type\")),\n                 }\n             }"}, {"sha": "9f5f1ea3255aab69c486c6a764065c36600bbdf4", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -1475,13 +1475,12 @@ fn regression_11688_3() {\n         struct Ar<T, const N: u8>(T);\n         fn f<const LEN: usize, T, const BASE: u8>(\n             num_zeros: usize,\n-        ) -> dyn Iterator<Item = [Ar<T, BASE>; LEN]> {\n+        ) -> &dyn Iterator<Item = [Ar<T, BASE>; LEN]> {\n             loop {}\n         }\n         fn dynamic_programming() {\n-            for board in f::<9, u8, 7>(1) {\n-              //^^^^^ [Ar<u8, 7>; 9]\n-            }\n+            let board = f::<9, u8, 7>(1).next();\n+              //^^^^^ Option<[Ar<u8, 7>; 9]>\n         }\n         \"#,\n     );"}, {"sha": "db98bf2f9bcbeed60ca890ce8d6e47e98a9bab53", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -474,7 +474,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5769..5777,\n+                                        range: 9164..9172,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -487,7 +487,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5801..5805,\n+                                        range: 9196..9200,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -511,7 +511,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5769..5777,\n+                                        range: 9164..9172,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -524,7 +524,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5801..5805,\n+                                        range: 9196..9200,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -548,7 +548,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5769..5777,\n+                                        range: 9164..9172,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -561,7 +561,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 5801..5805,\n+                                        range: 9196..9200,\n                                     },\n                                 ),\n                                 tooltip: \"\","}, {"sha": "22cef049838947b043986b261b981985aa1433d6", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4adfbbfbadf0fb74dee05d4bc5110e00596c5919/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=4adfbbfbadf0fb74dee05d4bc5110e00596c5919", "patch": "@@ -23,7 +23,7 @@\n //!     drop:\n //!     eq: sized\n //!     error: fmt\n-//!     fmt: result\n+//!     fmt: result, transmute, coerce_unsized\n //!     fn:\n //!     from: sized\n //!     future: pin\n@@ -37,14 +37,15 @@\n //!     non_zero:\n //!     option: panic\n //!     ord: eq, option\n-//!     panic:\n+//!     panic: fmt\n //!     pin:\n //!     range:\n //!     result:\n //!     send: sized\n //!     sized:\n //!     slice:\n //!     sync: sized\n+//!     transmute:\n //!     try: infallible\n //!     unsize: sized\n \n@@ -289,8 +290,8 @@ pub mod convert {\n     // endregion:infallible\n }\n \n-// region:drop\n pub mod mem {\n+    // region:drop\n     // region:manually_drop\n     #[lang = \"manually_drop\"]\n     #[repr(transparent)]\n@@ -323,15 +324,23 @@ pub mod mem {\n             result\n         }\n     }\n+    // endregion:drop\n+\n+    // region:transmute\n+    extern \"rust-intrinsic\" {\n+        pub fn transmute<Src, Dst>(src: Src) -> Dst;\n+    }\n+    // endregion:transmute\n }\n \n pub mod ptr {\n+    // region:drop\n     #[lang = \"drop_in_place\"]\n     pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n         unsafe { drop_in_place(to_drop) }\n     }\n+    // endregion:drop\n }\n-// endregion:drop\n \n pub mod ops {\n     // region:coerce_unsized\n@@ -812,6 +821,38 @@ pub mod fmt {\n         fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n     }\n \n+    extern \"C\" {\n+        type Opaque;\n+    }\n+\n+    #[lang = \"format_argument\"]\n+    pub struct ArgumentV1<'a> {\n+        value: &'a Opaque,\n+        formatter: fn(&Opaque, &mut Formatter<'_>) -> Result,\n+    }\n+\n+    impl<'a> ArgumentV1<'a> {\n+        pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n+            use crate::mem::transmute;\n+            unsafe { ArgumentV1 { formatter: transmute(f), value: transmute(x) } }\n+        }\n+    }\n+\n+    #[lang = \"format_arguments\"]\n+    pub struct Arguments<'a> {\n+        pieces: &'a [&'static str],\n+        args: &'a [ArgumentV1<'a>],\n+    }\n+\n+    impl<'a> Arguments<'a> {\n+        pub const fn new_v1(\n+            pieces: &'a [&'static str],\n+            args: &'a [ArgumentV1<'a>],\n+        ) -> Arguments<'a> {\n+            Arguments { pieces, args }\n+        }\n+    }\n+\n     // region:derive\n     #[rustc_builtin_macro]\n     pub macro Debug($item:item) {}\n@@ -1147,8 +1188,17 @@ pub mod iter {\n \n // region:panic\n mod panic {\n-    pub macro panic_2021($($t:tt)+) {\n-        /* Nothing yet */\n+    pub macro panic_2021 {\n+        ($($t:tt)+) => (\n+            $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))\n+        ),\n+    }\n+}\n+\n+mod panicking {\n+    #[lang = \"panic_fmt\"]\n+    pub const fn panic_fmt(fmt: crate::fmt::Arguments<'_>) -> ! {\n+        loop {}\n     }\n }\n // endregion:panic\n@@ -1166,6 +1216,17 @@ mod macros {\n     pub(crate) use panic;\n     // endregion:panic\n \n+    // region:fmt\n+    #[macro_export]\n+    #[rustc_builtin_macro]\n+    macro_rules! const_format_args {\n+        ($fmt:expr) => {{ /* compiler built-in */ }};\n+        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};\n+    }\n+\n+    pub(crate) use const_format_args;\n+    // endregion:fmt\n+\n     // region:derive\n     pub(crate) mod builtin {\n         #[rustc_builtin_macro]"}]}