{"sha": "eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOTU4ZTFiMmU0OThmNDc1MWFjN2MzNmNiMmFlYjRjZTJhYjY4YTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-17T08:31:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-17T08:31:37Z"}, "message": "Rollup merge of #60018 - RalfJung:miri-test-libstd, r=oli-obk\n\nMiri now supports entropy, but is still slow\n\nAdjust the `cfg` and their comments in the test suites accordingly.", "tree": {"sha": "6e1c2fac1877bdabc52c519385f0af67527fee65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e1c2fac1877bdabc52c519385f0af67527fee65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJctuRpCRBK7hj4Ov3rIwAAdHIIAHgFcfbF62zycXVcIKBEfQZY\nXyef58S11G+X8sxDkPoDyECS38ca7hr3P46MmD5ksC6NiLJGtr+3nCBxcKYVA96V\nUp0VW5upNV5up7BRXRlSmtxcyWCS5rhFNgfpXDKHj3ynCambng9wDibR5sUxGEPh\nygpp/Jf+Fn5mq/CHUwKWnhMFohXqA+9JpRTWoKxHCRBZCeDzC9Iuoomabziu3sTk\nm0VpKDb0x1h+GiuTeGnjDRLjGF8TxB2YdTIh3T0Gt6/3NMVOH00Sbf5hSE47BtjB\nGiG1c/hP0Dwewp34BGQW94ZC30caRhkcDLY6D4nWj8PlDMVUtDwE8EJv/9fe3Nc=\n=bKl5\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e1c2fac1877bdabc52c519385f0af67527fee65\nparent 23e8aaf4719972884ca825165a0de3ac8a2aaf9e\nparent d55e4b7a259b887202be91708f839a75b234697c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555489897 +0200\ncommitter GitHub <noreply@github.com> 1555489897 +0200\n\nRollup merge of #60018 - RalfJung:miri-test-libstd, r=oli-obk\n\nMiri now supports entropy, but is still slow\n\nAdjust the `cfg` and their comments in the test suites accordingly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0", "html_url": "https://github.com/rust-lang/rust/commit/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23e8aaf4719972884ca825165a0de3ac8a2aaf9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e8aaf4719972884ca825165a0de3ac8a2aaf9e", "html_url": "https://github.com/rust-lang/rust/commit/23e8aaf4719972884ca825165a0de3ac8a2aaf9e"}, {"sha": "d55e4b7a259b887202be91708f839a75b234697c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55e4b7a259b887202be91708f839a75b234697c", "html_url": "https://github.com/rust-lang/rust/commit/d55e4b7a259b887202be91708f839a75b234697c"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "0685fa943c0b87a78c4312cb4e8cee7789b0776c", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0", "patch": "@@ -282,7 +282,7 @@ fn assert_covariance() {\n //\n // Destructors must be called exactly once per element.\n #[test]\n-#[cfg(not(miri))] // Miri does not support panics nor entropy\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn panic_safe() {\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n "}, {"sha": "ad2cd7c95eb8fc381acb684cb3b0ae62d228b37c", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0", "patch": "@@ -389,7 +389,7 @@ fn test_reverse() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support entropy\n+#[cfg(not(miri))] // Miri is too slow\n fn test_sort() {\n     let mut rng = thread_rng();\n \n@@ -466,10 +466,19 @@ fn test_sort() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support entropy\n fn test_sort_stability() {\n-    for len in (2..25).chain(500..510) {\n-        for _ in 0..10 {\n+    #[cfg(not(miri))] // Miri is too slow\n+    let large_range = 500..510;\n+    #[cfg(not(miri))] // Miri is too slow\n+    let rounds = 10;\n+\n+    #[cfg(miri)]\n+    let large_range = 0..0; // empty range\n+    #[cfg(miri)]\n+    let rounds = 1;\n+\n+    for len in (2..25).chain(large_range) {\n+        for _ in 0..rounds {\n             let mut counts = [0; 10];\n \n             // create a vector like [(6, 1), (5, 1), (6, 2), ...],\n@@ -1397,7 +1406,7 @@ fn test_box_slice_clone() {\n #[test]\n #[allow(unused_must_use)] // here, we care about the side effects of `.clone()`\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads nor entropy\n+#[cfg(not(miri))] // Miri does not support threads\n fn test_box_slice_clone_panics() {\n     use std::sync::Arc;\n     use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -1589,7 +1598,7 @@ thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n-#[cfg(not(miri))] // Miri does not support threads nor entropy\n+#[cfg(not(miri))] // Miri does not support threads\n fn panic_safe() {\n     let prev = panic::take_hook();\n     panic::set_hook(Box::new(move |info| {"}, {"sha": "acf6b03791f01ad27baed0bcc0ddef31e11985cc", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=eb958e1b2e498f4751ac7c36cb2aeb4ce2ab68a0", "patch": "@@ -1024,22 +1024,31 @@ fn test_rotate_right() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n-#[cfg(not(miri))] // Miri does not support entropy\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n     use rand::{FromEntropy, Rng, rngs::SmallRng, seq::SliceRandom};\n \n+    #[cfg(not(miri))] // Miri is too slow\n+    let large_range = 500..510;\n+    #[cfg(not(miri))] // Miri is too slow\n+    let rounds = 100;\n+\n+    #[cfg(miri)]\n+    let large_range = 0..0; // empty range\n+    #[cfg(miri)]\n+    let rounds = 1;\n+\n     let mut v = [0; 600];\n     let mut tmp = [0; 600];\n     let mut rng = SmallRng::from_entropy();\n \n-    for len in (2..25).chain(500..510) {\n+    for len in (2..25).chain(large_range) {\n         let v = &mut v[0..len];\n         let tmp = &mut tmp[0..len];\n \n         for &modulus in &[5, 10, 100, 1000] {\n-            for _ in 0..100 {\n+            for _ in 0..rounds {\n                 for i in 0..len {\n                     v[i] = rng.gen::<i32>() % modulus;\n                 }\n@@ -1095,7 +1104,7 @@ fn sort_unstable() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n-#[cfg(not(miri))] // Miri does not support entropy\n+#[cfg(not(miri))] // Miri is too slow\n fn partition_at_index() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use rand::rngs::SmallRng;"}]}