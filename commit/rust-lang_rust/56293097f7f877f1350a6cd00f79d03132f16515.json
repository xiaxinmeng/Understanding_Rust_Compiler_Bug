{"sha": "56293097f7f877f1350a6cd00f79d03132f16515", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjkzMDk3ZjdmODc3ZjEzNTBhNmNkMDBmNzlkMDMxMzJmMTY1MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T18:58:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T18:58:06Z"}, "message": "Auto merge of #78711 - m-ou-se:rollup-pxqnny7, r=m-ou-se\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #77950 (Add support for SHA256 source file hashing)\n - #78624 (Sync rustc_codegen_cranelift)\n - #78626 (Improve errors about #[deprecated] attribute)\n - #78659 (Corrected suggestion for generic parameters in `function_item_references` lint)\n - #78687 (Suggest library/std when running all stage 0 tests)\n - #78699 (Show more error information in lldb_batchmode)\n - #78709 (Fix panic in bootstrap for non-workspace path dependencies.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "242ed3ef549823385a123d21916252a017414f50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/242ed3ef549823385a123d21916252a017414f50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56293097f7f877f1350a6cd00f79d03132f16515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56293097f7f877f1350a6cd00f79d03132f16515", "html_url": "https://github.com/rust-lang/rust/commit/56293097f7f877f1350a6cd00f79d03132f16515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56293097f7f877f1350a6cd00f79d03132f16515/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cdf5b882da9e8b7c73b5cadeb7745cb68f6ff63", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cdf5b882da9e8b7c73b5cadeb7745cb68f6ff63", "html_url": "https://github.com/rust-lang/rust/commit/5cdf5b882da9e8b7c73b5cadeb7745cb68f6ff63"}, {"sha": "a65507b47da110cc4a998036a18aaea77f8ddb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a65507b47da110cc4a998036a18aaea77f8ddb81", "html_url": "https://github.com/rust-lang/rust/commit/a65507b47da110cc4a998036a18aaea77f8ddb81"}], "stats": {"total": 1374, "additions": 886, "deletions": 488}, "files": [{"sha": "3d40ded19dd5ae37853323577f0b7ba5c762b2da", "filename": "Cargo.lock", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1928,6 +1928,17 @@ dependencies = [\n  \"opaque-debug 0.2.3\",\n ]\n \n+[[package]]\n+name = \"md-5\"\n+version = \"0.9.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b5a279bb9607f9f53c22d496eade00d138d1bdcccd07d74650387cf94942a15\"\n+dependencies = [\n+ \"block-buffer 0.9.0\",\n+ \"digest 0.9.0\",\n+ \"opaque-debug 0.3.0\",\n+]\n+\n [[package]]\n name = \"mdbook\"\n version = \"0.4.3\"\n@@ -2467,7 +2478,7 @@ checksum = \"54be6e404f5317079812fc8f9f5279de376d8856929e21c184ecf6bbd692a11d\"\n dependencies = [\n  \"maplit\",\n  \"pest\",\n- \"sha-1\",\n+ \"sha-1 0.8.2\",\n ]\n \n [[package]]\n@@ -3281,14 +3292,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1c267f15c3cfc82a8a441d2bf86bcccf299d1eb625822468e3d8ee6f7c5a1c89\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n- \"md-5\",\n+ \"md-5 0.8.0\",\n  \"rustc-ap-rustc_arena\",\n  \"rustc-ap-rustc_data_structures\",\n  \"rustc-ap-rustc_index\",\n  \"rustc-ap-rustc_macros\",\n  \"rustc-ap-rustc_serialize\",\n  \"scoped-tls\",\n- \"sha-1\",\n+ \"sha-1 0.8.2\",\n  \"tracing\",\n  \"unicode-width\",\n ]\n@@ -4138,14 +4149,15 @@ name = \"rustc_span\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n- \"md-5\",\n+ \"md-5 0.9.1\",\n  \"rustc_arena\",\n  \"rustc_data_structures\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"scoped-tls\",\n- \"sha-1\",\n+ \"sha-1 0.9.1\",\n+ \"sha2\",\n  \"tracing\",\n  \"unicode-width\",\n ]\n@@ -4510,6 +4522,19 @@ dependencies = [\n  \"opaque-debug 0.2.3\",\n ]\n \n+[[package]]\n+name = \"sha-1\"\n+version = \"0.9.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"170a36ea86c864a3f16dd2687712dd6646f7019f301e57537c7f4dc9f5916770\"\n+dependencies = [\n+ \"block-buffer 0.9.0\",\n+ \"cfg-if 0.1.10\",\n+ \"cpuid-bool\",\n+ \"digest 0.9.0\",\n+ \"opaque-debug 0.3.0\",\n+]\n+\n [[package]]\n name = \"sha2\"\n version = \"0.9.1\""}, {"sha": "2fd625c2a6c260a6fefda2f61555f3d0c2981374", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -637,19 +637,15 @@ pub struct Deprecation {\n }\n \n /// Finds the deprecation attribute. `None` if none exists.\n-pub fn find_deprecation(sess: &Session, attrs: &[Attribute], item_sp: Span) -> Option<Deprecation> {\n-    find_deprecation_generic(sess, attrs.iter(), item_sp)\n+pub fn find_deprecation(sess: &Session, attrs: &[Attribute]) -> Option<(Deprecation, Span)> {\n+    find_deprecation_generic(sess, attrs.iter())\n }\n \n-fn find_deprecation_generic<'a, I>(\n-    sess: &Session,\n-    attrs_iter: I,\n-    item_sp: Span,\n-) -> Option<Deprecation>\n+fn find_deprecation_generic<'a, I>(sess: &Session, attrs_iter: I) -> Option<(Deprecation, Span)>\n where\n     I: Iterator<Item = &'a Attribute>,\n {\n-    let mut depr: Option<Deprecation> = None;\n+    let mut depr: Option<(Deprecation, Span)> = None;\n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -658,8 +654,11 @@ where\n             continue;\n         }\n \n-        if depr.is_some() {\n-            struct_span_err!(diagnostic, item_sp, E0550, \"multiple deprecated attributes\").emit();\n+        if let Some((_, span)) = &depr {\n+            struct_span_err!(diagnostic, attr.span, E0550, \"multiple deprecated attributes\")\n+                .span_label(attr.span, \"repeated deprecation attribute\")\n+                .span_label(*span, \"first deprecation attribute\")\n+                .emit();\n             break;\n         }\n \n@@ -780,7 +779,7 @@ where\n         sess.mark_attr_used(&attr);\n \n         let is_since_rustc_version = sess.check_name(attr, sym::rustc_deprecated);\n-        depr = Some(Deprecation { since, note, suggestion, is_since_rustc_version });\n+        depr = Some((Deprecation { since, note, suggestion, is_since_rustc_version }, attr.span));\n     }\n \n     depr"}, {"sha": "8c94a0aa5e6ebe7beba14d52e5ed817053529f8e", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/bootstrap_rustc.yml", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fbootstrap_rustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fbootstrap_rustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fbootstrap_rustc.yml?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -0,0 +1,44 @@\n+name: Bootstrap rustc using cg_clif\n+\n+on:\n+  - push\n+\n+jobs:\n+  bootstrap_rustc:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - name: Cache cargo installed crates\n+      uses: actions/cache@v2\n+      with:\n+        path: ~/.cargo/bin\n+        key: ${{ runner.os }}-cargo-installed-crates\n+\n+    - name: Cache cargo registry and index\n+      uses: actions/cache@v2\n+      with:\n+        path: |\n+            ~/.cargo/registry\n+            ~/.cargo/git\n+        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v2\n+      with:\n+        path: target\n+        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        ./prepare.sh\n+\n+    - name: Test\n+      run: |\n+        # Enable backtraces for easier debugging\n+        export RUST_BACKTRACE=1\n+\n+        ./scripts/test_bootstrap.sh"}, {"sha": "e6d3375fb1bab6240d6d309259aa84657547a559", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -51,4 +51,13 @@ jobs:\n         export COMPILE_RUNS=2\n         export RUN_RUNS=2\n \n-        ./test.sh --release\n+        ./test.sh\n+\n+    - name: Package prebuilt cg_clif\n+      run: tar cvfJ cg_clif.tar.xz build\n+\n+    - name: Upload prebuilt cg_clif\n+      uses: actions/upload-artifact@v2\n+      with:\n+        name: cg_clif-${{ runner.os }}\n+        path: cg_clif.tar.xz"}, {"sha": "18196bce0094597d583e6e4420c32e0d85022f73", "filename": "compiler/rustc_codegen_cranelift/.gitignore", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.gitignore?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -6,7 +6,7 @@ perf.data\n perf.data.old\n *.events\n *.string*\n-/build_sysroot/sysroot\n+/build\n /build_sysroot/sysroot_src\n /rust\n /rand"}, {"sha": "2889fac77f6a4616fd9b976932cd09a15a91c738", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -44,15 +44,15 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -70,7 +70,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n@@ -79,17 +79,17 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-shared\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n \n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -100,7 +100,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-module\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -112,7 +112,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-native\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"raw-cpuid\",\n@@ -122,7 +122,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-object\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -135,7 +135,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-simplejit\"\n version = \"0.67.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4fd90dccabb266e983740e1f5daf8bde9266b286\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#44cbdecea03c360ea82e6482f0cf6c614effef21\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"cranelift-entity\","}, {"sha": "f8a5e13ed54c177be18e3dd234369b02b79a4d85", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -2,41 +2,56 @@\n \n > \u26a0\u26a0\u26a0 Certain kinds of FFI don't work yet. \u26a0\u26a0\u26a0\n \n-The goal of this project is to create an alternative codegen backend for the rust compiler based on [Cranelift](https://github.com/bytecodealliance/wasmtime/blob/master/cranelift). This has the potential to improve compilation times in debug mode. If your project doesn't use any of the things listed under \"Not yet supported\", it should work fine. If not please open an issue.\n+The goal of this project is to create an alternative codegen backend for the rust compiler based on [Cranelift](https://github.com/bytecodealliance/wasmtime/blob/master/cranelift).\n+This has the potential to improve compilation times in debug mode.\n+If your project doesn't use any of the things listed under \"Not yet supported\", it should work fine.\n+If not please open an issue.\n \n-## Building\n+## Building and testing\n \n ```bash\n $ git clone https://github.com/bjorn3/rustc_codegen_cranelift.git\n $ cd rustc_codegen_cranelift\n $ ./prepare.sh # download and patch sysroot src and install hyperfine for benchmarking\n-$ ./test.sh --release\n+$ ./build.sh\n ```\n \n+To run the test suite replace the last command with:\n+\n+```bash\n+$ ./test.sh\n+```\n+\n+This will implicitly build cg_clif too. Both `build.sh` and `test.sh` accept a `--debug` argument to\n+build in debug mode.\n+\n+Alternatively you can download a pre built version from [GHA]. It is listed in the artifacts section\n+of workflow runs. Unfortunately due to GHA restrictions you need to be logged in to access it.\n+\n+[GHA]: https://github.com/bjorn3/rustc_codegen_cranelift/actions?query=branch%3Amaster+event%3Apush+is%3Asuccess\n+\n ## Usage\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n \n ### Cargo\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/cargo.sh run\n+$ $cg_clif_dir/build/cargo.sh run\n ```\n \n This should build and run your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n \n-If you compiled cg_clif in debug mode (aka you didn't pass `--release` to `./test.sh`) you should set `CHANNEL=\"debug\"`.\n-\n ### Rustc\n \n > You should prefer using the Cargo method.\n \n ```bash\n-$ $cg_clif_dir/target/release/cg_clif my_crate.rs\n+$ $cg_clif_dir/build/cg_clif my_crate.rs\n ```\n \n ### Jit mode\n@@ -47,13 +62,13 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/cargo.sh jit\n+$ $cg_clif_dir/build/cargo.sh jit\n ```\n \n or\n \n ```bash\n-$ $cg_clif_dir/target/release/cg_clif --jit my_crate.rs\n+$ $cg_clif_dir/build/cg_clif --jit my_crate.rs\n ```\n \n ### Shell\n@@ -62,7 +77,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/target/release/cg_clif - --jit\n+    echo \"$@\" | $cg_clif_dir/build/cg_clif - --jit\n }\n \n function jit() {"}, {"sha": "f9a87e68a046a7f7c7960f5a1ee0858685886e17", "filename": "compiler/rustc_codegen_cranelift/build.sh", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -0,0 +1,47 @@\n+#!/bin/bash\n+set -e\n+\n+# Settings\n+export CHANNEL=\"release\"\n+build_sysroot=1\n+target_dir='build'\n+while [[ $# != 0 ]]; do\n+    case $1 in\n+        \"--debug\")\n+            export CHANNEL=\"debug\"\n+            ;;\n+        \"--without-sysroot\")\n+            build_sysroot=0\n+            ;;\n+        \"--target-dir\")\n+            target_dir=$2\n+            shift\n+            ;;\n+        *)\n+            echo \"Unknown flag '$1'\"\n+            echo \"Usage: ./build.sh [--debug] [--without-sysroot] [--target-dir DIR]\"\n+            ;;\n+    esac\n+    shift\n+done\n+\n+# Build cg_clif\n+export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n+if [[ \"$CHANNEL\" == \"release\" ]]; then\n+    cargo build --release\n+else\n+    cargo build\n+fi\n+\n+rm -rf $target_dir\n+mkdir $target_dir\n+cp -a target/$CHANNEL/cg_clif{,_build_sysroot} target/$CHANNEL/*rustc_codegen_cranelift* $target_dir/\n+cp -a rust-toolchain scripts/config.sh scripts/cargo.sh $target_dir\n+\n+if [[ \"$build_sysroot\" == \"1\" ]]; then\n+    echo \"[BUILD] sysroot\"\n+    export CG_CLIF_INCR_CACHE_DISABLED=1\n+    dir=$(pwd)\n+    cd $target_dir\n+    time $dir/build_sysroot/build_sysroot.sh\n+fi"}, {"sha": "eba15c0dd4308ee2eb8218d3455917554c29eac3", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/build_sysroot.sh", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -3,25 +3,28 @@\n # Requires the CHANNEL env var to be set to `debug` or `release.`\n \n set -e\n-cd $(dirname \"$0\")\n \n-pushd ../ >/dev/null\n-source ./scripts/config.sh\n-popd >/dev/null\n+source ./config.sh\n \n-# Cleanup for previous run\n-#     v Clean target dir except for build scripts and incremental cache\n-rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n-rm -r sysroot/ 2>/dev/null || true\n+dir=$(pwd)\n \n # Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n # build scripts are still compiled using cg_llvm.\n-export RUSTC=$(pwd)/../\"target/\"$CHANNEL\"/cg_clif_build_sysroot\"\n+export RUSTC=$dir\"/cg_clif_build_sysroot\"\n export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n \n+cd $(dirname \"$0\")\n+\n+# Cleanup for previous run\n+#     v Clean target dir except for build scripts and incremental cache\n+rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n+\n+# We expect the target dir in the default location. Guard against the user changing it.\n+export CARGO_TARGET_DIR=target\n+\n # Build libs\n export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\"\n-if [[ \"$1\" == \"--release\" ]]; then\n+if [[ \"$1\" != \"--debug\" ]]; then\n     sysroot_channel='release'\n     # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n     # FIXME Enable -Zmir-opt-level=2 again once it doesn't ice anymore\n@@ -32,5 +35,5 @@ else\n fi\n \n # Copy files to sysroot\n-mkdir -p sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n-cp -r target/$TARGET_TRIPLE/$sysroot_channel/deps/* sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+mkdir -p $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/\n+cp -a target/$TARGET_TRIPLE/$sysroot_channel/deps/* $dir/sysroot/lib/rustlib/$TARGET_TRIPLE/lib/"}, {"sha": "d0fb09ce745d4daf860ed9d70d223880d46dc587", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/prepare_sysroot_src.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -12,7 +12,7 @@ fi\n \n rm -rf $DST_DIR\n mkdir -p $DST_DIR/library\n-cp -r $SRC_DIR/library $DST_DIR/\n+cp -a $SRC_DIR/library $DST_DIR/\n \n pushd $DST_DIR\n echo \"[GIT] init\""}, {"sha": "5a69c862d016d616d967d413d42b598cea2d934f", "filename": "compiler/rustc_codegen_cranelift/clean_all.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1,5 +1,5 @@\n #!/bin/bash --verbose\n set -e\n \n-rm -rf target/ build_sysroot/{sysroot/,sysroot_src/,target/} perf.data{,.old}\n+rm -rf target/ build/ build_sysroot/{sysroot_src/,target/} perf.data{,.old}\n rm -rf rand/ regex/ simple-raytracer/"}, {"sha": "f0a0a6ad42ef52af66cc35678e57cb2b415b783d", "filename": "compiler/rustc_codegen_cranelift/docs/env_vars.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fenv_vars.md", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fenv_vars.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fenv_vars.md?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -9,7 +9,4 @@\n     object files when their content should have been changed by a change to cg_clif.</dd>\n     <dt>CG_CLIF_DISPLAY_CG_TIME</dt>\n     <dd>If \"1\", display the time it took to perform codegen for a crate</dd>\n-    <dt>CG_CLIF_FUNCTION_SECTIONS</dt>\n-    <dd>Use a single section for each function. This will often reduce the executable size at the\n-        cost of making linking significantly slower.</dd>\n </dl>"}, {"sha": "ce07fe83df18f2b09f663113aad431002e98e956", "filename": "compiler/rustc_codegen_cranelift/example/mini_core.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -48,6 +48,7 @@ unsafe impl Copy for u8 {}\n unsafe impl Copy for u16 {}\n unsafe impl Copy for u32 {}\n unsafe impl Copy for u64 {}\n+unsafe impl Copy for u128 {}\n unsafe impl Copy for usize {}\n unsafe impl Copy for i8 {}\n unsafe impl Copy for i16 {}\n@@ -283,6 +284,15 @@ impl PartialEq for u64 {\n     }\n }\n \n+impl PartialEq for u128 {\n+    fn eq(&self, other: &u128) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &u128) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n impl PartialEq for usize {\n     fn eq(&self, other: &usize) -> bool {\n         (*self) == (*other)"}, {"sha": "4a8375afac3cef46815d38becae87267dcc7461c", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -287,6 +287,8 @@ fn main() {\n     assert_eq!(repeat[0], Some(42));\n     assert_eq!(repeat[1], Some(42));\n \n+    from_decimal_string();\n+\n     #[cfg(not(jit))]\n     test_tls();\n \n@@ -446,3 +448,23 @@ fn check_niche_behavior () {\n         intrinsics::abort();\n     }\n }\n+\n+fn from_decimal_string() {\n+    loop {\n+        let multiplier = 1;\n+\n+        take_multiplier_ref(&multiplier);\n+\n+        if multiplier == 1 {\n+            break;\n+        }\n+\n+        unreachable();\n+    }\n+}\n+\n+fn take_multiplier_ref(_multiplier: &u128) {}\n+\n+fn unreachable() -> ! {\n+    panic(\"unreachable\")\n+}"}, {"sha": "cb512a4aa335e65106967ed7470bd5b45949a0c5", "filename": "compiler/rustc_codegen_cranelift/example/std_example.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -315,13 +315,13 @@ fn test_checked_mul() {\n     assert_eq!(1i8.checked_mul(-128i8), Some(-128i8));\n     assert_eq!((-128i8).checked_mul(-128i8), None);\n \n-    assert_eq!(1u64.checked_mul(u64::max_value()), Some(u64::max_value()));\n-    assert_eq!(u64::max_value().checked_mul(u64::max_value()), None);\n-    assert_eq!(1i64.checked_mul(i64::max_value()), Some(i64::max_value()));\n-    assert_eq!(i64::max_value().checked_mul(i64::max_value()), None);\n-    assert_eq!((-1i64).checked_mul(i64::min_value() + 1), Some(i64::max_value()));\n-    assert_eq!(1i64.checked_mul(i64::min_value()), Some(i64::min_value()));\n-    assert_eq!(i64::min_value().checked_mul(i64::min_value()), None);\n+    assert_eq!(1u64.checked_mul(u64::MAX), Some(u64::MAX));\n+    assert_eq!(u64::MAX.checked_mul(u64::MAX), None);\n+    assert_eq!(1i64.checked_mul(i64::MAX), Some(i64::MAX));\n+    assert_eq!(i64::MAX.checked_mul(i64::MAX), None);\n+    assert_eq!((-1i64).checked_mul(i64::MIN + 1), Some(i64::MAX));\n+    assert_eq!(1i64.checked_mul(i64::MIN), Some(i64::MIN));\n+    assert_eq!(i64::MIN.checked_mul(i64::MIN), None);\n }\n \n #[derive(PartialEq)]"}, {"sha": "0ca96be9ae731fdcecf8e10ade0c9f3130b6b8d6", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1 +1 @@\n-nightly-2020-10-26\n+nightly-2020-10-31"}, {"sha": "e63daa40f354099a4b3fdbe3612f73dfb7b8ac70", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo.sh", "status": "renamed", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1,19 +1,13 @@\n #!/bin/bash\n \n-if [ -z $CHANNEL ]; then\n-export CHANNEL='release'\n-fi\n-\n-pushd $(dirname \"$0\") >/dev/null\n-source scripts/config.sh\n+dir=$(dirname \"$0\")\n+source $dir/config.sh\n \n # read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat rust-toolchain)\n-\n-popd >/dev/null\n+TOOLCHAIN=$(cat $dir/rust-toolchain)\n \n cmd=$1\n-shift\n+shift || true\n \n if [[ \"$cmd\" = \"jit\" ]]; then\n cargo +${TOOLCHAIN} rustc $@ -- --jit", "previous_filename": "compiler/rustc_codegen_cranelift/cargo.sh"}, {"sha": "af181f4f724395dab2f756b25ef948ecbeb6a0fb", "filename": "compiler/rustc_codegen_cranelift/scripts/config.sh", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -39,18 +39,19 @@ echo\n export RUSTC_WRAPPER=\n fi\n \n-export RUSTC=$(pwd)/\"target/\"$CHANNEL\"/cg_clif\"\n+dir=$(cd $(dirname \"$BASH_SOURCE\"); pwd)\n+\n+export RUSTC=$dir\"/cg_clif\"\n export RUSTFLAGS=$linker\n export RUSTDOCFLAGS=$linker' -Ztrim-diagnostic-paths=no -Cpanic=abort -Zpanic-abort-tests '\\\n-'-Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n+'-Zcodegen-backend='$dir'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$dir'/sysroot'\n \n # FIXME remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then\n    export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n fi\n \n-export LD_LIBRARY_PATH=\"$(pwd)/target/out:$(pwd)/build_sysroot/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib:\\\n-$(pwd)/target/\"$CHANNEL\":$(rustc --print sysroot)/lib\"\n+export LD_LIBRARY_PATH=\"$dir:$(rustc --print sysroot)/lib:$dir/target/out:$dir/sysroot/lib/rustlib/\"$TARGET_TRIPLE\"/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n \n export CG_CLIF_DISPLAY_CG_TIME=1"}, {"sha": "3327c10089d9b0847fe9fbdccf12c03f91aab412", "filename": "compiler/rustc_codegen_cranelift/scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1,9 +1,8 @@\n #!/bin/bash\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n-CHANNEL=\"release\"\n pushd $(dirname \"$0\")/../\n-source scripts/config.sh\n+source build/config.sh\n popd\n PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS --jit $0\n #*/"}, {"sha": "541b3c6563bab74816241c2f94d33ec5fb164684", "filename": "compiler/rustc_codegen_cranelift/scripts/rustup.sh", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -26,6 +26,15 @@ case $1 in\n         git add rust-toolchain build_sysroot/Cargo.lock\n         git commit -m \"Rustup to $(rustc -V)\"\n         ;;\n+    \"push\")\n+\tcg_clif=$(pwd)\n+\tpushd ../rust\n+\tbranch=update_cg_clif-$(date +%Y-%m-%d)\n+\tgit checkout -b $branch\n+\tgit subtree pull --prefix=compiler/rustc_codegen_cranelift/ https://github.com/bjorn3/rustc_codegen_cranelift.git master\n+\tgit push -u my $branch\n+\tpopd\n+\t;;\n     *)\n         echo \"Unknown command '$1'\"\n         echo \"Usage: ./rustup.sh prepare|commit\""}, {"sha": "7f43f81a6cdcd4aa9f5a539d7c9b50c898f70dce", "filename": "compiler/rustc_codegen_cranelift/scripts/test_bootstrap.sh", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -0,0 +1,65 @@\n+#!/bin/bash\n+set -e\n+\n+cd $(dirname \"$0\")/../\n+\n+./build.sh\n+source build/config.sh\n+\n+echo \"[TEST] Bootstrap of rustc\"\n+git clone https://github.com/rust-lang/rust.git || true\n+pushd rust\n+git fetch\n+git checkout -- .\n+git checkout $(rustc -V | cut -d' ' -f3 | tr -d '(')\n+\n+git apply - <<EOF\n+diff --git a/.gitmodules b/.gitmodules\n+index 984113151de..c1e9d960d56 100644\n+--- a/.gitmodules\n++++ b/.gitmodules\n+@@ -34,10 +34,6 @@\n+ [submodule \"src/doc/edition-guide\"]\n+ \tpath = src/doc/edition-guide\n+ \turl = https://github.com/rust-lang/edition-guide.git\n+-[submodule \"src/llvm-project\"]\n+-\tpath = src/llvm-project\n+-\turl = https://github.com/rust-lang/llvm-project.git\n+-\tbranch = rustc/11.0-2020-10-12\n+ [submodule \"src/doc/embedded-book\"]\n+ \tpath = src/doc/embedded-book\n+ \turl = https://github.com/rust-embedded/book.git\n+diff --git a/compiler/rustc_data_structures/Cargo.toml b/compiler/rustc_data_structures/Cargo.toml\n+index 23e689fcae7..5f077b765b6 100644\n+--- a/compiler/rustc_data_structures/Cargo.toml\n++++ b/compiler/rustc_data_structures/Cargo.toml\n+@@ -32,7 +32,6 @@ tempfile = \"3.0.5\"\n+\n+ [dependencies.parking_lot]\n+ version = \"0.11\"\n+-features = [\"nightly\"]\n+\n+ [target.'cfg(windows)'.dependencies]\n+ winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }\n+EOF\n+\n+cat > config.toml <<EOF\n+[llvm]\n+ninja = false\n+\n+[build]\n+rustc = \"$(pwd)/../build/cg_clif\"\n+cargo = \"$(rustup which cargo)\"\n+full-bootstrap = true\n+local-rebuild = true\n+\n+[rust]\n+codegen-backends = [\"cranelift\"]\n+EOF\n+\n+rm -r compiler/rustc_codegen_cranelift/{Cargo.*,src}\n+cp ../Cargo.* compiler/rustc_codegen_cranelift/\n+cp -r ../src compiler/rustc_codegen_cranelift/src\n+\n+./x.py build --stage 1 library/std\n+popd"}, {"sha": "d941b73c81bcc01a4796a69ea0fff796e9a5e337", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -0,0 +1,123 @@\n+#!/bin/bash\n+\n+set -e\n+\n+source build/config.sh\n+export CG_CLIF_INCR_CACHE_DISABLED=1\n+MY_RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+\n+function no_sysroot_tests() {\n+    echo \"[BUILD] mini_core\"\n+    $MY_RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n+\n+    echo \"[BUILD] example\"\n+    $MY_RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n+\n+    if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n+        echo \"[JIT] mini_core_hello_world\"\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+    else\n+        echo \"[JIT] mini_core_hello_world (skipped)\"\n+    fi\n+\n+    echo \"[AOT] mini_core_hello_world\"\n+    $MY_RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n+    # (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n+\n+    echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n+    $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n+}\n+\n+function base_sysroot_tests() {\n+    echo \"[AOT] alloc_example\"\n+    $MY_RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/alloc_example\n+\n+    if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n+        echo \"[JIT] std_example\"\n+        $MY_RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n+    else\n+        echo \"[JIT] std_example (skipped)\"\n+    fi\n+\n+    echo \"[AOT] dst_field_align\"\n+    # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n+    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n+\n+    echo \"[AOT] std_example\"\n+    $MY_RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/std_example arg\n+\n+    echo \"[AOT] subslice-patterns-const-eval\"\n+    $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n+\n+    echo \"[AOT] track-caller-attribute\"\n+    $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/track-caller-attribute\n+\n+    echo \"[AOT] mod_bench\"\n+    $MY_RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUN_WRAPPER ./target/out/mod_bench\n+\n+    pushd rand\n+    rm -r ./target || true\n+    ../build/cargo.sh test --workspace\n+    popd\n+}\n+\n+function extended_sysroot_tests() {\n+    pushd simple-raytracer\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n+        hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n+        \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n+        \"../build/cargo.sh build\"\n+\n+        echo \"[BENCH RUN] ebobby/simple-raytracer\"\n+        cp ./target/debug/main ./raytracer_cg_clif\n+        hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n+    else\n+        echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n+        echo \"[COMPILE] ebobby/simple-raytracer\"\n+        ../cargo.sh build\n+        echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n+    fi\n+    popd\n+\n+    pushd build_sysroot/sysroot_src/library/core/tests\n+    echo \"[TEST] libcore\"\n+    rm -r ./target || true\n+    ../../../../../build/cargo.sh test\n+    popd\n+\n+    pushd regex\n+    echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n+    ../build/cargo.sh clean\n+    # Make sure `[codegen mono items] start` doesn't poison the diff\n+    ../build/cargo.sh build --example shootout-regex-dna\n+    cat examples/regexdna-input.txt | ../build/cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n+    diff -u res.txt examples/regexdna-output.txt\n+\n+    echo \"[TEST] rust-lang/regex tests\"\n+    ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+    popd\n+}\n+\n+case \"$1\" in\n+    \"no_sysroot\")\n+        no_sysroot_tests\n+        ;;\n+    \"base_sysroot\")\n+        base_sysroot_tests\n+        ;;\n+    \"extended_sysroot\")\n+        extended_sysroot_tests\n+        ;;\n+    *)\n+        echo \"unknown test suite\"\n+        ;;\n+esac"}, {"sha": "01073d26e832a98fd68cf6ac7463c6fe17abde98", "filename": "compiler/rustc_codegen_cranelift/src/abi/comments.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -11,9 +11,9 @@ use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, impl Module>) {\n-    fx.add_global_comment(format!(\n-        \"kind  loc.idx   param    pass mode                            ty\"\n-    ));\n+    fx.add_global_comment(\n+        \"kind  loc.idx   param    pass mode                            ty\".to_string(),\n+    );\n }\n \n pub(super) fn add_arg_comment<'tcx>(\n@@ -56,9 +56,9 @@ pub(super) fn add_arg_comment<'tcx>(\n \n pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     fx.add_global_comment(String::new());\n-    fx.add_global_comment(format!(\n-        \"kind  local ty                              size align (abi,pref)\"\n-    ));\n+    fx.add_global_comment(\n+        \"kind  local ty                              size align (abi,pref)\".to_string(),\n+    );\n }\n \n pub(super) fn add_local_place_comments<'tcx>("}, {"sha": "81091728692f3f4d21017fb04a977bcb7066e1ca", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -300,7 +300,7 @@ impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n         return_ty: Ty<'tcx>,\n     ) -> CValue<'tcx> {\n         let (input_tys, args): (Vec<_>, Vec<_>) = args\n-            .into_iter()\n+            .iter()\n             .map(|arg| {\n                 (\n                     self.clif_type(arg.layout().ty).unwrap(),\n@@ -421,34 +421,31 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n \n         // While this is normally an optimization to prevent an unnecessary copy when an argument is\n         // not mutated by the current function, this is necessary to support unsized arguments.\n-        match arg_kind {\n-            ArgKind::Normal(Some(val)) => {\n-                if let Some((addr, meta)) = val.try_to_ptr() {\n-                    let local_decl = &fx.mir.local_decls[local];\n-                    //                       v this ! is important\n-                    let internally_mutable = !val.layout().ty.is_freeze(\n-                        fx.tcx.at(local_decl.source_info.span),\n-                        ParamEnv::reveal_all(),\n-                    );\n-                    if local_decl.mutability == mir::Mutability::Not && !internally_mutable {\n-                        // We wont mutate this argument, so it is fine to borrow the backing storage\n-                        // of this argument, to prevent a copy.\n-\n-                        let place = if let Some(meta) = meta {\n-                            CPlace::for_ptr_with_extra(addr, meta, val.layout())\n-                        } else {\n-                            CPlace::for_ptr(addr, val.layout())\n-                        };\n-\n-                        #[cfg(debug_assertions)]\n-                        self::comments::add_local_place_comments(fx, place, local);\n-\n-                        assert_eq!(fx.local_map.push(place), local);\n-                        continue;\n-                    }\n+        if let ArgKind::Normal(Some(val)) = arg_kind {\n+            if let Some((addr, meta)) = val.try_to_ptr() {\n+                let local_decl = &fx.mir.local_decls[local];\n+                //                       v this ! is important\n+                let internally_mutable = !val.layout().ty.is_freeze(\n+                    fx.tcx.at(local_decl.source_info.span),\n+                    ParamEnv::reveal_all(),\n+                );\n+                if local_decl.mutability == mir::Mutability::Not && !internally_mutable {\n+                    // We wont mutate this argument, so it is fine to borrow the backing storage\n+                    // of this argument, to prevent a copy.\n+\n+                    let place = if let Some(meta) = meta {\n+                        CPlace::for_ptr_with_extra(addr, meta, val.layout())\n+                    } else {\n+                        CPlace::for_ptr(addr, val.layout())\n+                    };\n+\n+                    #[cfg(debug_assertions)]\n+                    self::comments::add_local_place_comments(fx, place, local);\n+\n+                    assert_eq!(fx.local_map.push(place), local);\n+                    continue;\n                 }\n             }\n-            _ => {}\n         }\n \n         let place = make_local_place(fx, local, layout, is_ssa);\n@@ -500,7 +497,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         .tcx\n         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));\n \n-    let destination = destination.map(|(place, bb)| (trans_place(fx, place), bb));\n+    let destination = destination.map(|(place, bb)| (codegen_place(fx, place), bb));\n \n     // Handle special calls like instrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n@@ -553,8 +550,8 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     // Unpack arguments tuple for closures\n     let args = if fn_sig.abi == Abi::RustCall {\n         assert_eq!(args.len(), 2, \"rust-call abi requires two arguments\");\n-        let self_arg = trans_operand(fx, &args[0]);\n-        let pack_arg = trans_operand(fx, &args[1]);\n+        let self_arg = codegen_operand(fx, &args[0]);\n+        let pack_arg = codegen_operand(fx, &args[1]);\n \n         let tupled_arguments = match pack_arg.layout().ty.kind() {\n             ty::Tuple(ref tupled_arguments) => tupled_arguments,\n@@ -568,8 +565,8 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         }\n         args\n     } else {\n-        args.into_iter()\n-            .map(|arg| trans_operand(fx, arg))\n+        args.iter()\n+            .map(|arg| codegen_operand(fx, arg))\n             .collect::<Vec<_>>()\n     };\n \n@@ -613,7 +610,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 let nop_inst = fx.bcx.ins().nop();\n                 fx.add_comment(nop_inst, \"indirect call\");\n             }\n-            let func = trans_operand(fx, func).load_scalar(fx);\n+            let func = codegen_operand(fx, func).load_scalar(fx);\n             (\n                 Some(func),\n                 args.get(0)"}, {"sha": "6c5916550ff639f52a99c14bd8ce34c0321f4da0", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -123,15 +123,15 @@ fn codegen_inner(\n         .unwrap();\n \n     let mut ctx = Context::new();\n-    ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig.clone());\n+    ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n     {\n         let mut func_ctx = FunctionBuilderContext::new();\n         let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n \n         let block = bcx.create_block();\n         bcx.switch_to_block(block);\n         let args = (&[usize_ty, usize_ty])\n-            .into_iter()\n+            .iter()\n             .map(|&ty| bcx.append_block_param(block, ty))\n             .collect::<Vec<Value>>();\n "}, {"sha": "9a970efbcfd0b6c653e936a7de28aed4426d129a", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -132,7 +132,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             }\n \n             // ok, don't skip this\n-            return false;\n+            false\n         })\n     }\n "}, {"sha": "2f0157c257b98cb74ad02b18ab1e02b2ed5d629a", "filename": "compiler/rustc_codegen_cranelift/src/atomic_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fatomic_shim.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -7,7 +7,7 @@ use crate::prelude::*;\n \n #[cfg(all(feature = \"jit\", unix))]\n #[no_mangle]\n-pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n+static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n     libc::PTHREAD_MUTEX_INITIALIZER;\n \n pub(crate) fn init_global_lock("}, {"sha": "9e32259716f5105508d59d8bc0edbc01a5b30f7c", "filename": "compiler/rustc_codegen_cranelift/src/backend.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbackend.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -73,7 +73,7 @@ impl WriteDebugInfo for ObjectProduct {\n         // FIXME use SHT_X86_64_UNWIND for .eh_frame\n         let section_id = self.object.add_section(\n             segment,\n-            name.clone(),\n+            name,\n             if id == SectionId::EhFrame {\n                 SectionKind::ReadOnlyData\n             } else {\n@@ -198,9 +198,9 @@ pub(crate) fn make_module(sess: &Session, name: String) -> ObjectModule {\n         cranelift_module::default_libcall_names(),\n     )\n     .unwrap();\n-    if std::env::var(\"CG_CLIF_FUNCTION_SECTIONS\").is_ok() {\n-        builder.per_function_section(true);\n-    }\n-    let module = ObjectModule::new(builder);\n-    module\n+    // Unlike cg_llvm, cg_clif defaults to disabling -Zfunction-sections. For cg_llvm binary size\n+    // is important, while cg_clif cares more about compilation times. Enabling -Zfunction-sections\n+    // can easily double the amount of time necessary to perform linking.\n+    builder.per_function_section(sess.opts.debugging_opts.function_sections.unwrap_or(false));\n+    ObjectModule::new(builder)\n }"}, {"sha": "5474e5960f100a03f9626a8ff3e504db380adf41", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::adjustment::PointerCast;\n \n use crate::prelude::*;\n \n-pub(crate) fn trans_fn<'tcx>(\n+pub(crate) fn codegen_fn<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx, impl Module>,\n     instance: Instance<'tcx>,\n     linkage: Linkage,\n@@ -202,7 +202,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n         fx.bcx.ins().nop();\n         for stmt in &bb_data.statements {\n             fx.set_debug_loc(stmt.source_info);\n-            trans_stmt(fx, block, stmt);\n+            codegen_stmt(fx, block, stmt);\n         }\n \n         #[cfg(debug_assertions)]\n@@ -258,7 +258,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n                         continue;\n                     }\n                 }\n-                let cond = trans_operand(fx, cond).load_scalar(fx);\n+                let cond = codegen_operand(fx, cond).load_scalar(fx);\n \n                 let target = fx.get_block(*target);\n                 let failure = fx.bcx.create_block();\n@@ -276,8 +276,8 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n \n                 match msg {\n                     AssertKind::BoundsCheck { ref len, ref index } => {\n-                        let len = trans_operand(fx, len).load_scalar(fx);\n-                        let index = trans_operand(fx, index).load_scalar(fx);\n+                        let len = codegen_operand(fx, len).load_scalar(fx);\n+                        let index = codegen_operand(fx, index).load_scalar(fx);\n                         let location = fx\n                             .get_caller_location(bb_data.terminator().source_info.span)\n                             .load_scalar(fx);\n@@ -301,7 +301,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n                 switch_ty,\n                 targets,\n             } => {\n-                let discr = trans_operand(fx, discr).load_scalar(fx);\n+                let discr = codegen_operand(fx, discr).load_scalar(fx);\n \n                 if switch_ty.kind() == fx.tcx.types.bool.kind() {\n                     assert_eq!(targets.iter().count(), 1);\n@@ -396,14 +396,14 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::DropAndReplace { .. }\n             | TerminatorKind::GeneratorDrop => {\n-                bug!(\"shouldn't exist at trans {:?}\", bb_data.terminator());\n+                bug!(\"shouldn't exist at codegen {:?}\", bb_data.terminator());\n             }\n             TerminatorKind::Drop {\n                 place,\n                 target,\n                 unwind: _,\n             } => {\n-                let drop_place = trans_place(fx, *place);\n+                let drop_place = codegen_place(fx, *place);\n                 crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n \n                 let target_block = fx.get_block(*target);\n@@ -416,7 +416,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     fx.bcx.finalize();\n }\n \n-fn trans_stmt<'tcx>(\n+fn codegen_stmt<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     #[allow(unused_variables)] cur_block: Block,\n     stmt: &Statement<'tcx>,\n@@ -439,19 +439,19 @@ fn trans_stmt<'tcx>(\n             place,\n             variant_index,\n         } => {\n-            let place = trans_place(fx, **place);\n+            let place = codegen_place(fx, **place);\n             crate::discriminant::codegen_set_discriminant(fx, place, *variant_index);\n         }\n         StatementKind::Assign(to_place_and_rval) => {\n-            let lval = trans_place(fx, to_place_and_rval.0);\n+            let lval = codegen_place(fx, to_place_and_rval.0);\n             let dest_layout = lval.layout();\n             match &to_place_and_rval.1 {\n                 Rvalue::Use(operand) => {\n-                    let val = trans_operand(fx, operand);\n+                    let val = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n-                    let place = trans_place(fx, *place);\n+                    let place = codegen_place(fx, *place);\n                     let ref_ = place.place_ref(fx, lval.layout());\n                     lval.write_cvalue(fx, ref_);\n                 }\n@@ -460,29 +460,29 @@ fn trans_stmt<'tcx>(\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::BinaryOp(bin_op, lhs, rhs) => {\n-                    let lhs = trans_operand(fx, lhs);\n-                    let rhs = trans_operand(fx, rhs);\n+                    let lhs = codegen_operand(fx, lhs);\n+                    let rhs = codegen_operand(fx, rhs);\n \n                     let res = crate::num::codegen_binop(fx, *bin_op, lhs, rhs);\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::CheckedBinaryOp(bin_op, lhs, rhs) => {\n-                    let lhs = trans_operand(fx, lhs);\n-                    let rhs = trans_operand(fx, rhs);\n+                    let lhs = codegen_operand(fx, lhs);\n+                    let rhs = codegen_operand(fx, rhs);\n \n                     let res = if !fx.tcx.sess.overflow_checks() {\n                         let val =\n-                            crate::num::trans_int_binop(fx, *bin_op, lhs, rhs).load_scalar(fx);\n+                            crate::num::codegen_int_binop(fx, *bin_op, lhs, rhs).load_scalar(fx);\n                         let is_overflow = fx.bcx.ins().iconst(types::I8, 0);\n                         CValue::by_val_pair(val, is_overflow, lval.layout())\n                     } else {\n-                        crate::num::trans_checked_int_binop(fx, *bin_op, lhs, rhs)\n+                        crate::num::codegen_checked_int_binop(fx, *bin_op, lhs, rhs)\n                     };\n \n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::UnaryOp(un_op, operand) => {\n-                    let operand = trans_operand(fx, operand);\n+                    let operand = codegen_operand(fx, operand);\n                     let layout = operand.layout();\n                     let val = operand.load_scalar(fx);\n                     let res = match un_op {\n@@ -500,7 +500,7 @@ fn trans_stmt<'tcx>(\n                             ty::Int(IntTy::I128) => {\n                                 // FIXME remove this case once ineg.i128 works\n                                 let zero = CValue::const_val(fx, layout, 0);\n-                                crate::num::trans_int_binop(fx, BinOp::Sub, zero, operand)\n+                                crate::num::codegen_int_binop(fx, BinOp::Sub, zero, operand)\n                             }\n                             ty::Int(_) => CValue::by_val(fx.bcx.ins().ineg(val), layout),\n                             ty::Float(_) => CValue::by_val(fx.bcx.ins().fneg(val), layout),\n@@ -534,11 +534,11 @@ fn trans_stmt<'tcx>(\n                 | Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, to_ty)\n                 | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), operand, to_ty) => {\n                     let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n-                    let operand = trans_operand(fx, operand);\n+                    let operand = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n                 Rvalue::Cast(CastKind::Misc, operand, to_ty) => {\n-                    let operand = trans_operand(fx, operand);\n+                    let operand = codegen_operand(fx, operand);\n                     let from_ty = operand.layout().ty;\n                     let to_ty = fx.monomorphize(to_ty);\n \n@@ -639,7 +639,7 @@ fn trans_stmt<'tcx>(\n                     operand,\n                     _to_ty,\n                 ) => {\n-                    let operand = trans_operand(fx, operand);\n+                    let operand = codegen_operand(fx, operand);\n                     match *operand.layout().ty.kind() {\n                         ty::Closure(def_id, substs) => {\n                             let instance = Instance::resolve_closure(\n@@ -657,18 +657,18 @@ fn trans_stmt<'tcx>(\n                     }\n                 }\n                 Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), operand, _to_ty) => {\n-                    let operand = trans_operand(fx, operand);\n+                    let operand = codegen_operand(fx, operand);\n                     operand.unsize_value(fx, lval);\n                 }\n                 Rvalue::Discriminant(place) => {\n-                    let place = trans_place(fx, *place);\n+                    let place = codegen_place(fx, *place);\n                     let value = place.to_cvalue(fx);\n                     let discr =\n                         crate::discriminant::codegen_get_discriminant(fx, value, dest_layout);\n                     lval.write_cvalue(fx, discr);\n                 }\n                 Rvalue::Repeat(operand, times) => {\n-                    let operand = trans_operand(fx, operand);\n+                    let operand = codegen_operand(fx, operand);\n                     let times = fx\n                         .monomorphize(times)\n                         .eval(fx.tcx, ParamEnv::reveal_all())\n@@ -706,7 +706,7 @@ fn trans_stmt<'tcx>(\n                     }\n                 }\n                 Rvalue::Len(place) => {\n-                    let place = trans_place(fx, *place);\n+                    let place = codegen_place(fx, *place);\n                     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                     let len = codegen_array_len(fx, place);\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n@@ -753,14 +753,14 @@ fn trans_stmt<'tcx>(\n                 }\n                 Rvalue::Aggregate(kind, operands) => match **kind {\n                     AggregateKind::Array(_ty) => {\n-                        for (i, operand) in operands.into_iter().enumerate() {\n-                            let operand = trans_operand(fx, operand);\n+                        for (i, operand) in operands.iter().enumerate() {\n+                            let operand = codegen_operand(fx, operand);\n                             let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n                             let to = lval.place_index(fx, index);\n                             to.write_cvalue(fx, operand);\n                         }\n                     }\n-                    _ => unreachable!(\"shouldn't exist at trans {:?}\", to_place_and_rval.1),\n+                    _ => unreachable!(\"shouldn't exist at codegen {:?}\", to_place_and_rval.1),\n                 },\n             }\n         }\n@@ -813,20 +813,20 @@ fn trans_stmt<'tcx>(\n                     assert!(!alignstack);\n \n                     assert_eq!(inputs.len(), 2);\n-                    let leaf = trans_operand(fx, &inputs[0].1).load_scalar(fx); // %eax\n-                    let subleaf = trans_operand(fx, &inputs[1].1).load_scalar(fx); // %ecx\n+                    let leaf = codegen_operand(fx, &inputs[0].1).load_scalar(fx); // %eax\n+                    let subleaf = codegen_operand(fx, &inputs[1].1).load_scalar(fx); // %ecx\n \n                     let (eax, ebx, ecx, edx) =\n                         crate::intrinsics::codegen_cpuid_call(fx, leaf, subleaf);\n \n                     assert_eq!(outputs.len(), 4);\n-                    trans_place(fx, outputs[0])\n+                    codegen_place(fx, outputs[0])\n                         .write_cvalue(fx, CValue::by_val(eax, fx.layout_of(fx.tcx.types.u32)));\n-                    trans_place(fx, outputs[1])\n+                    codegen_place(fx, outputs[1])\n                         .write_cvalue(fx, CValue::by_val(ebx, fx.layout_of(fx.tcx.types.u32)));\n-                    trans_place(fx, outputs[2])\n+                    codegen_place(fx, outputs[2])\n                         .write_cvalue(fx, CValue::by_val(ecx, fx.layout_of(fx.tcx.types.u32)));\n-                    trans_place(fx, outputs[3])\n+                    codegen_place(fx, outputs[3])\n                         .write_cvalue(fx, CValue::by_val(edx, fx.layout_of(fx.tcx.types.u32)));\n                 }\n                 \"xgetbv\" => {\n@@ -892,7 +892,7 @@ fn codegen_array_len<'tcx>(\n     }\n }\n \n-pub(crate) fn trans_place<'tcx>(\n+pub(crate) fn codegen_place<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     place: Place<'tcx>,\n ) -> CPlace<'tcx> {\n@@ -938,7 +938,7 @@ pub(crate) fn trans_place<'tcx>(\n                         let ptr = cplace.to_ptr();\n                         cplace = CPlace::for_ptr(\n                             ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * (from as i64)),\n-                            fx.layout_of(fx.tcx.mk_array(elem_ty, u64::from(to) - u64::from(from))),\n+                            fx.layout_of(fx.tcx.mk_array(elem_ty, to - from)),\n                         );\n                     }\n                     ty::Slice(elem_ty) => {\n@@ -964,16 +964,16 @@ pub(crate) fn trans_place<'tcx>(\n     cplace\n }\n \n-pub(crate) fn trans_operand<'tcx>(\n+pub(crate) fn codegen_operand<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     operand: &Operand<'tcx>,\n ) -> CValue<'tcx> {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => {\n-            let cplace = trans_place(fx, *place);\n+            let cplace = codegen_place(fx, *place);\n             cplace.to_cvalue(fx)\n         }\n-        Operand::Constant(const_) => crate::constant::trans_constant(fx, const_),\n+        Operand::Constant(const_) => crate::constant::codegen_constant(fx, const_),\n     }\n }\n "}, {"sha": "71ef4d2267368467d97492a6e1919298a3762ae8", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -24,22 +24,16 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n         self.time_passes = config.opts.prints.is_empty()\n             && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n \n-        // FIXME workaround for an ICE\n-        config.opts.debugging_opts.trim_diagnostic_paths = false;\n-\n         config.opts.cg.panic = Some(PanicStrategy::Abort);\n         config.opts.debugging_opts.panic_abort_tests = true;\n         config.opts.maybe_sysroot = Some(\n-            std::env::current_exe()\n-                .unwrap()\n-                .parent()\n-                .unwrap()\n-                .parent()\n-                .unwrap()\n-                .parent()\n-                .unwrap()\n-                .join(\"build_sysroot\")\n-                .join(\"sysroot\"),\n+            config.opts.maybe_sysroot.clone().unwrap_or(\n+                std::env::current_exe()\n+                    .unwrap()\n+                    .parent()\n+                    .unwrap()\n+                    .join(\"sysroot\"),\n+            ),\n         );\n     }\n }"}, {"sha": "165d33dcfb50919a625fd0d60cdf51052a82ca1f", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif_build_sysroot.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif_build_sysroot.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -44,9 +44,6 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n             return;\n         }\n \n-        // FIXME workaround for an ICE\n-        config.opts.debugging_opts.trim_diagnostic_paths = false;\n-\n         config.opts.cg.panic = Some(PanicStrategy::Abort);\n         config.opts.debugging_opts.panic_abort_tests = true;\n         config.opts.maybe_sysroot = Some("}, {"sha": "57204de1135be435c524b2fbbb3ce69d608da6ff", "filename": "compiler/rustc_codegen_cranelift/src/cast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -181,12 +181,10 @@ pub(crate) fn clif_int_or_float_cast(\n                 fx.bcx.ins().select(has_overflow, max_val, val)\n             };\n             fx.bcx.ins().ireduce(to_ty, val)\n+        } else if to_signed {\n+            fx.bcx.ins().fcvt_to_sint_sat(to_ty, from)\n         } else {\n-            if to_signed {\n-                fx.bcx.ins().fcvt_to_sint_sat(to_ty, from)\n-            } else {\n-                fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n-            }\n+            fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n         }\n     } else if from_ty.is_float() && to_ty.is_float() {\n         // float -> float"}, {"sha": "d6a38bdafc9ba36c413b4a302af57884d1ad9a60", "filename": "compiler/rustc_codegen_cranelift/src/codegen_i128.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -21,9 +21,9 @@ pub(crate) fn maybe_codegen<'tcx>(\n     match bin_op {\n         BinOp::BitAnd | BinOp::BitOr | BinOp::BitXor => {\n             assert!(!checked);\n-            return None;\n+            None\n         }\n-        BinOp::Add | BinOp::Sub if !checked => return None,\n+        BinOp::Add | BinOp::Sub if !checked => None,\n         BinOp::Add => {\n             let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n             return Some(if is_signed {\n@@ -57,7 +57,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 };\n                 fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty)\n             };\n-            return Some(res);\n+            Some(res)\n         }\n         BinOp::Div => {\n             assert!(!checked);\n@@ -77,7 +77,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => {\n             assert!(!checked);\n-            return None;\n+            None\n         }\n         BinOp::Shl | BinOp::Shr => {\n             let is_overflow = if checked {"}, {"sha": "eda77bf19d3547f4b3e18b5b03d81d478ab6b412", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -406,7 +406,7 @@ impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n             caller.line as u32,\n             caller.col_display as u32 + 1,\n         ));\n-        crate::constant::trans_const_value(self, const_loc, self.tcx.caller_location_ty())\n+        crate::constant::codegen_const_value(self, const_loc, self.tcx.caller_location_ty())\n     }\n \n     pub(crate) fn triple(&self) -> &target_lexicon::Triple {"}, {"sha": "ce1d5ed2e61780686600c738a02109c3949980a1", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -106,7 +106,7 @@ fn codegen_static_ref<'tcx>(\n     CPlace::for_ptr(crate::pointer::Pointer::new(global_ptr), layout)\n }\n \n-pub(crate) fn trans_constant<'tcx>(\n+pub(crate) fn codegen_constant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n@@ -151,10 +151,10 @@ pub(crate) fn trans_constant<'tcx>(\n         | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n     };\n \n-    trans_const_value(fx, const_val, const_.ty)\n+    codegen_const_value(fx, const_val, const_.ty)\n }\n \n-pub(crate) fn trans_const_value<'tcx>(\n+pub(crate) fn codegen_const_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     const_val: ConstValue<'tcx>,\n     ty: Ty<'tcx>,\n@@ -164,7 +164,7 @@ pub(crate) fn trans_const_value<'tcx>(\n \n     if layout.is_zst() {\n         return CValue::by_ref(\n-            crate::Pointer::const_addr(fx, i64::try_from(layout.align.pref.bytes()).unwrap()),\n+            crate::Pointer::dangling(layout.align.pref),\n             layout,\n         );\n     }\n@@ -188,7 +188,7 @@ pub(crate) fn trans_const_value<'tcx>(\n             match x {\n                 Scalar::Raw { data, size } => {\n                     assert_eq!(u64::from(size), layout.size.bytes());\n-                    return CValue::const_val(fx, layout, data);\n+                    CValue::const_val(fx, layout, data)\n                 }\n                 Scalar::Ptr(ptr) => {\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n@@ -232,7 +232,7 @@ pub(crate) fn trans_const_value<'tcx>(\n                     } else {\n                         base_addr\n                     };\n-                    return CValue::by_val(val, layout);\n+                    CValue::by_val(val, layout)\n                 }\n             }\n         }\n@@ -276,7 +276,7 @@ fn data_id_for_alloc_id(\n ) -> DataId {\n     module\n         .declare_data(\n-            &format!(\"__alloc_{:x}\", alloc_id.0),\n+            &format!(\".L__alloc_{:x}\", alloc_id.0),\n             Linkage::Local,\n             mutability == rustc_hir::Mutability::Mut,\n             false,\n@@ -293,14 +293,12 @@ fn data_id_for_static(\n     let rlinkage = tcx.codegen_fn_attrs(def_id).linkage;\n     let linkage = if definition {\n         crate::linkage::get_static_linkage(tcx, def_id)\n+    } else if rlinkage == Some(rustc_middle::mir::mono::Linkage::ExternalWeak)\n+        || rlinkage == Some(rustc_middle::mir::mono::Linkage::WeakAny)\n+    {\n+        Linkage::Preemptible\n     } else {\n-        if rlinkage == Some(rustc_middle::mir::mono::Linkage::ExternalWeak)\n-            || rlinkage == Some(rustc_middle::mir::mono::Linkage::WeakAny)\n-        {\n-            Linkage::Preemptible\n-        } else {\n-            Linkage::Import\n-        }\n+        Linkage::Import\n     };\n \n     let instance = Instance::mono(tcx, def_id).polymorphize(tcx);"}, {"sha": "f6f795e45615c9d39c898f89e1eac52b68a3fcd9", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -195,9 +195,7 @@ impl Writer for WriterRelocate {\n                     });\n                     self.write_udata(0, size)\n                 }\n-                _ => {\n-                    return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n-                }\n+                _ => Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe)),\n             },\n         }\n     }"}, {"sha": "d226755d85de0eb631ce6f5978dd5251c74c5434", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -49,7 +49,7 @@ fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n \n pub(crate) const MD5_LEN: usize = 16;\n \n-pub fn make_file_info(hash: SourceFileHash) -> Option<FileInfo> {\n+pub(crate) fn make_file_info(hash: SourceFileHash) -> Option<FileInfo> {\n     if hash.kind == SourceFileHashAlgorithm::Md5 {\n         let mut buf = [0u8; MD5_LEN];\n         buf.copy_from_slice(hash.hash_bytes());\n@@ -190,7 +190,7 @@ impl<'tcx> DebugContext<'tcx> {\n             if current_file_changed {\n                 let file_id = line_program_add_file(line_program, line_strings, &file);\n                 line_program.row().file = file_id;\n-                last_file = Some(file.clone());\n+                last_file = Some(file);\n             }\n \n             line_program.row().line = line;"}, {"sha": "68138404c2436819efc9ca440681f85db1d7a1c6", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -55,6 +55,7 @@ impl<'tcx> UnwindContext<'tcx> {\n             UnwindInfo::WindowsX64(_) => {\n                 // FIXME implement this\n             }\n+            unwind_info => unimplemented!(\"{:?}\", unwind_info),\n         }\n     }\n "}, {"sha": "3f47df7d844b326dc47cc4a7dfd12bae2da29cf0", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -94,7 +94,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n     let args = std::iter::once(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string())\n-        .chain(args.split(\" \"))\n+        .chain(args.split(' '))\n         .map(|arg| CString::new(arg).unwrap())\n         .collect::<Vec<_>>();\n     let mut argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n@@ -151,7 +151,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n             }\n             let dlsym_name = if cfg!(target_os = \"macos\") {\n                 // On macOS `dlsym` expects the name without leading `_`.\n-                assert!(name.starts_with(\"_\"), \"{:?}\", name);\n+                assert!(name.starts_with('_'), \"{:?}\", name);\n                 &name[1..]\n             } else {\n                 &name"}, {"sha": "a11dc57ee64536ce9893d0033e77932bff09e133", "filename": "compiler/rustc_codegen_cranelift/src/driver/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -64,11 +64,11 @@ fn codegen_mono_items<'tcx>(\n \n     for (mono_item, (linkage, visibility)) in mono_items {\n         let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-        trans_mono_item(cx, mono_item, linkage);\n+        codegen_mono_item(cx, mono_item, linkage);\n     }\n }\n \n-fn trans_mono_item<'tcx, M: Module>(\n+fn codegen_mono_item<'tcx, M: Module>(\n     cx: &mut crate::CodegenCx<'tcx, M>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n@@ -80,7 +80,7 @@ fn trans_mono_item<'tcx, M: Module>(\n                 crate::PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).name));\n             debug_assert!(!inst.substs.needs_infer());\n             tcx.sess\n-                .time(\"codegen fn\", || crate::base::trans_fn(cx, inst, linkage));\n+                .time(\"codegen fn\", || crate::base::codegen_fn(cx, inst, linkage));\n         }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(&mut cx.constants_cx, def_id);"}, {"sha": "04aac780125d93a354eff2a1f5ef18a69e5fda16", "filename": "compiler/rustc_codegen_cranelift/src/inline_asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                 inputs.push((\n                     reg,\n                     new_slot(reg.reg_class()),\n-                    crate::base::trans_operand(fx, value).load_scalar(fx),\n+                    crate::base::codegen_operand(fx, value).load_scalar(fx),\n                 ));\n             }\n             InlineAsmOperand::Out {\n@@ -64,7 +64,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                     outputs.push((\n                         reg,\n                         new_slot(reg.reg_class()),\n-                        crate::base::trans_place(fx, place),\n+                        crate::base::codegen_place(fx, place),\n                     ));\n                 }\n             }\n@@ -79,13 +79,13 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                 inputs.push((\n                     reg,\n                     new_slot(reg.reg_class()),\n-                    crate::base::trans_operand(fx, in_value).load_scalar(fx),\n+                    crate::base::codegen_operand(fx, in_value).load_scalar(fx),\n                 ));\n                 if let Some(out_place) = out_place {\n                     outputs.push((\n                         reg,\n                         new_slot(reg.reg_class()),\n-                        crate::base::trans_place(fx, out_place),\n+                        crate::base::codegen_place(fx, out_place),\n                     ));\n                 }\n             }"}, {"sha": "171445f2d71b62840204f24837e835ea7c3712ee", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         llvm.x86.sse2.cmp.ps | llvm.x86.sse2.cmp.pd, (c x, c y, o kind) {\n             let kind_const = crate::constant::mir_operand_get_const_val(fx, kind).expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-            let flt_cc = match kind_const.val.try_to_bits(Size::from_bytes(1)).expect(&format!(\"kind not scalar: {:?}\", kind_const)) {\n+            let flt_cc = match kind_const.val.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind_const)) {\n                 0 => FloatCC::Equal,\n                 1 => FloatCC::LessThan,\n                 2 => FloatCC::LessThanOrEqual,\n@@ -84,7 +84,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.psrli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).expect(&format!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };\n@@ -94,7 +94,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.pslli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).expect(&format!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };"}, {"sha": "a5f45b7abf4c802118edab6131b5a16303163ed6", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -9,6 +9,7 @@ pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n use crate::prelude::*;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n \n macro intrinsic_pat {\n     (_) => {\n@@ -30,10 +31,10 @@ macro intrinsic_arg {\n         $arg\n     },\n     (c $fx:expr, $arg:ident) => {\n-        trans_operand($fx, $arg)\n+        codegen_operand($fx, $arg)\n     },\n     (v $fx:expr, $arg:ident) => {\n-        trans_operand($fx, $arg).load_scalar($fx)\n+        codegen_operand($fx, $arg).load_scalar($fx)\n     }\n }\n \n@@ -89,7 +90,7 @@ macro call_intrinsic_match {\n                     assert!($substs.is_noop());\n                     if let [$(ref $arg),*] = *$args {\n                         let ($($arg,)*) = (\n-                            $(trans_operand($fx, $arg),)*\n+                            $(codegen_operand($fx, $arg),)*\n                         );\n                         let res = $fx.easy_call(stringify!($func), &[$($arg),*], $fx.tcx.types.$ty);\n                         $ret.write_cvalue($fx, res);\n@@ -576,7 +577,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 \"unchecked_shr\" => BinOp::Shr,\n                 _ => unreachable!(\"intrinsic {}\", intrinsic),\n             };\n-            let res = crate::num::trans_int_binop(fx, bin_op, x, y);\n+            let res = crate::num::codegen_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n         };\n         _ if intrinsic.ends_with(\"_with_overflow\"), (c x, c y) {\n@@ -588,7 +589,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 _ => unreachable!(\"intrinsic {}\", intrinsic),\n             };\n \n-            let res = crate::num::trans_checked_int_binop(\n+            let res = crate::num::codegen_checked_int_binop(\n                 fx,\n                 bin_op,\n                 x,\n@@ -604,7 +605,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 \"wrapping_mul\" => BinOp::Mul,\n                 _ => unreachable!(\"intrinsic {}\", intrinsic),\n             };\n-            let res = crate::num::trans_int_binop(\n+            let res = crate::num::codegen_int_binop(\n                 fx,\n                 bin_op,\n                 x,\n@@ -622,7 +623,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n \n             let signed = type_sign(T);\n \n-            let checked_res = crate::num::trans_checked_int_binop(\n+            let checked_res = crate::num::codegen_checked_int_binop(\n                 fx,\n                 bin_op,\n                 lhs,\n@@ -819,29 +820,29 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         assert_inhabited | assert_zero_valid | assert_uninit_valid, <T> () {\n             let layout = fx.layout_of(T);\n             if layout.abi.is_uninhabited() {\n-                crate::base::codegen_panic(\n+                with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to instantiate uninhabited type `{}`\", T),\n                     span,\n-                );\n+                ));\n                 return;\n             }\n \n             if intrinsic == \"assert_zero_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ true).unwrap() {\n-                crate::base::codegen_panic(\n+                with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n                     span,\n-                );\n+                ));\n                 return;\n             }\n \n             if intrinsic == \"assert_uninit_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n-                crate::base::codegen_panic(\n+                with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),\n                     span,\n-                );\n+                ));\n                 return;\n             }\n         };\n@@ -866,7 +867,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         size_of | pref_align_of | min_align_of | needs_drop | type_id | type_name | variant_count, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n-            let val = crate::constant::trans_const_value(\n+            let val = crate::constant::codegen_const_value(\n                 fx,\n                 const_val,\n                 ret.layout().ty,\n@@ -885,12 +886,12 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         };\n \n         ptr_guaranteed_eq, (c a, c b) {\n-            let val = crate::num::trans_ptr_binop(fx, BinOp::Eq, a, b);\n+            let val = crate::num::codegen_ptr_binop(fx, BinOp::Eq, a, b);\n             ret.write_cvalue(fx, val);\n         };\n \n         ptr_guaranteed_ne, (c a, c b) {\n-            let val = crate::num::trans_ptr_binop(fx, BinOp::Ne, a, b);\n+            let val = crate::num::codegen_ptr_binop(fx, BinOp::Ne, a, b);\n             ret.write_cvalue(fx, val);\n         };\n \n@@ -1068,7 +1069,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         };\n \n         fadd_fast | fsub_fast | fmul_fast | fdiv_fast | frem_fast, (c x, c y) {\n-            let res = crate::num::trans_float_binop(fx, match intrinsic {\n+            let res = crate::num::codegen_float_binop(fx, match intrinsic {\n                 \"fadd_fast\" => BinOp::Add,\n                 \"fsub_fast\" => BinOp::Sub,\n                 \"fmul_fast\" => BinOp::Mul,"}, {"sha": "2e31c4669e25bb16be06813d419695493377566e", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -127,7 +127,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 );\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).expect(&format!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, base.layout());\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n@@ -149,7 +149,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 );\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).expect(&format!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));"}, {"sha": "ba9ee0d450ee66c68821acab3f094304f92c0ba3", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -9,6 +9,7 @@\n )]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n+#![warn(unreachable_pub)]\n \n #[cfg(feature = \"jit\")]\n extern crate libc;\n@@ -110,7 +111,7 @@ mod prelude {\n     pub(crate) use cranelift_module::{self, DataContext, DataId, FuncId, Linkage, Module};\n \n     pub(crate) use crate::abi::*;\n-    pub(crate) use crate::base::{trans_operand, trans_place};\n+    pub(crate) use crate::base::{codegen_operand, codegen_place};\n     pub(crate) use crate::cast::*;\n     pub(crate) use crate::common::*;\n     pub(crate) use crate::debuginfo::{DebugContext, UnwindContext};"}, {"sha": "dc1e2107ce712d2cf51032434ddbbfe77316e3a6", "filename": "compiler/rustc_codegen_cranelift/src/linkage.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flinkage.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -25,11 +25,9 @@ pub(crate) fn get_static_linkage(tcx: TyCtxt<'_>, def_id: DefId) -> Linkage {\n             RLinkage::ExternalWeak | RLinkage::WeakAny => Linkage::Preemptible,\n             _ => panic!(\"{:?}\", linkage),\n         }\n+    } else if tcx.is_reachable_non_generic(def_id) {\n+        Linkage::Export\n     } else {\n-        if tcx.is_reachable_non_generic(def_id) {\n-            Linkage::Export\n-        } else {\n-            Linkage::Hidden\n-        }\n+        Linkage::Hidden\n     }\n }"}, {"sha": "10f515e38ead279f1a080d3b94511e10fe10a4f6", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -76,7 +76,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             .unwrap();\n \n         let mut ctx = Context::new();\n-        ctx.func = Function::with_name_signature(ExternalName::user(0, 0), cmain_sig.clone());\n+        ctx.func = Function::with_name_signature(ExternalName::user(0, 0), cmain_sig);\n         {\n             let mut func_ctx = FunctionBuilderContext::new();\n             let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);"}, {"sha": "cda2a187ff9b7c1f4ac0b3f3755c7f9429db90e0", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -29,7 +29,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n                         .expect(\"Rlib metadata file too big to load into memory.\"),\n                 );\n                 ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n                 return Ok(rustc_erase_owner!(buf.map_owner_box()));\n             }\n         }\n@@ -47,7 +47,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n             .data()\n             .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))?\n             .to_owned();\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n         Ok(rustc_erase_owner!(buf.map_owner_box()))\n     }\n }"}, {"sha": "41f4a9b9662bcfc8ce9d9f722dd9e8df96ebb829", "filename": "compiler/rustc_codegen_cranelift/src/num.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -89,10 +89,10 @@ pub(crate) fn codegen_binop<'tcx>(\n     }\n \n     match in_lhs.layout().ty.kind() {\n-        ty::Bool => crate::num::trans_bool_binop(fx, bin_op, in_lhs, in_rhs),\n-        ty::Uint(_) | ty::Int(_) => crate::num::trans_int_binop(fx, bin_op, in_lhs, in_rhs),\n-        ty::Float(_) => crate::num::trans_float_binop(fx, bin_op, in_lhs, in_rhs),\n-        ty::RawPtr(..) | ty::FnPtr(..) => crate::num::trans_ptr_binop(fx, bin_op, in_lhs, in_rhs),\n+        ty::Bool => crate::num::codegen_bool_binop(fx, bin_op, in_lhs, in_rhs),\n+        ty::Uint(_) | ty::Int(_) => crate::num::codegen_int_binop(fx, bin_op, in_lhs, in_rhs),\n+        ty::Float(_) => crate::num::codegen_float_binop(fx, bin_op, in_lhs, in_rhs),\n+        ty::RawPtr(..) | ty::FnPtr(..) => crate::num::codegen_ptr_binop(fx, bin_op, in_lhs, in_rhs),\n         _ => unreachable!(\n             \"{:?}({:?}, {:?})\",\n             bin_op,\n@@ -102,7 +102,7 @@ pub(crate) fn codegen_binop<'tcx>(\n     }\n }\n \n-pub(crate) fn trans_bool_binop<'tcx>(\n+pub(crate) fn codegen_bool_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -123,7 +123,7 @@ pub(crate) fn trans_bool_binop<'tcx>(\n     CValue::by_val(res, fx.layout_of(fx.tcx.types.bool))\n }\n \n-pub(crate) fn trans_int_binop<'tcx>(\n+pub(crate) fn codegen_int_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -196,7 +196,7 @@ pub(crate) fn trans_int_binop<'tcx>(\n     CValue::by_val(val, in_lhs.layout())\n }\n \n-pub(crate) fn trans_checked_int_binop<'tcx>(\n+pub(crate) fn codegen_checked_int_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -357,7 +357,7 @@ pub(crate) fn trans_checked_int_binop<'tcx>(\n     out_place.to_cvalue(fx)\n }\n \n-pub(crate) fn trans_float_binop<'tcx>(\n+pub(crate) fn codegen_float_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n@@ -402,7 +402,7 @@ pub(crate) fn trans_float_binop<'tcx>(\n     CValue::by_val(res, in_lhs.layout())\n }\n \n-pub(crate) fn trans_ptr_binop<'tcx>(\n+pub(crate) fn codegen_ptr_binop<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,"}, {"sha": "3c939d5a58639869e2dc22dc8b0ec1dd602a51df", "filename": "compiler/rustc_codegen_cranelift/src/optimize/stack2reg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fstack2reg.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -228,7 +228,8 @@ pub(super) fn optimize_function(\n             match *potential_stores {\n                 [] => {\n                     #[cfg(debug_assertions)]\n-                    clif_comments.add_comment(load, format!(\"[BUG?] Reading uninitialized memory\"));\n+                    clif_comments\n+                        .add_comment(load, \"[BUG?] Reading uninitialized memory\".to_string());\n                 }\n                 [store]\n                     if spatial_overlap(&opt_ctx.ctx.func, store, load) == SpatialOverlap::Full"}, {"sha": "ff878af7f5eef9049199acd55e2c4a8405b7b8d6", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -131,11 +131,11 @@ impl FuncWriter for &'_ CommentWriter {\n             if !comment.is_empty() {\n                 writeln!(w, \"; {}\", comment)?;\n             } else {\n-                writeln!(w, \"\")?;\n+                writeln!(w)?;\n             }\n         }\n         if !self.global_comments.is_empty() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n \n         self.super_preamble(w, func, reg_info)\n@@ -153,7 +153,7 @@ impl FuncWriter for &'_ CommentWriter {\n         if let Some(comment) = self.entity_comments.get(&entity) {\n             writeln!(w, \" ; {}\", comment.replace('\\n', \"\\n; \"))\n         } else {\n-            writeln!(w, \"\")\n+            writeln!(w)\n         }\n     }\n \n@@ -261,7 +261,7 @@ pub(crate) fn write_clif_file<'tcx>(\n         writeln!(file, \"set is_pic\")?;\n         writeln!(file, \"set enable_simd\")?;\n         writeln!(file, \"target {} haswell\", target_triple)?;\n-        writeln!(file, \"\")?;\n+        writeln!(file)?;\n         file.write_all(clif.as_bytes())?;\n     };\n     if let Err(err) = res {"}, {"sha": "690d96764a8f588d1e8ed0e5827c71aec89c0d05", "filename": "compiler/rustc_codegen_cranelift/src/trap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -67,4 +67,3 @@ pub(crate) fn trap_unimplemented(fx: &mut FunctionCx<'_, '_, impl Module>, msg:\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n }\n-"}, {"sha": "2b9ea5273b608221abebd5fb84b6531aada3ee11", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -27,10 +27,10 @@ fn codegen_field<'tcx>(\n             return simple(fx);\n         }\n         match field_layout.ty.kind() {\n-            ty::Slice(..) | ty::Str | ty::Foreign(..) => return simple(fx),\n+            ty::Slice(..) | ty::Str | ty::Foreign(..) => simple(fx),\n             ty::Adt(def, _) if def.repr.packed() => {\n                 assert_eq!(layout.align.abi.bytes(), 1);\n-                return simple(fx);\n+                simple(fx)\n             }\n             _ => {\n                 // We have to align the offset for DST's\n@@ -237,15 +237,12 @@ impl<'tcx> CValue<'tcx> {\n \n         let clif_ty = fx.clif_type(layout.ty).unwrap();\n \n-        match layout.ty.kind() {\n-            ty::Bool => {\n-                assert!(\n-                    const_val == 0 || const_val == 1,\n-                    \"Invalid bool 0x{:032X}\",\n-                    const_val\n-                );\n-            }\n-            _ => {}\n+        if let ty::Bool = layout.ty.kind() {\n+            assert!(\n+                const_val == 0 || const_val == 1,\n+                \"Invalid bool 0x{:032X}\",\n+                const_val\n+            );\n         }\n \n         let val = match layout.ty.kind() {\n@@ -335,7 +332,7 @@ impl<'tcx> CPlace<'tcx> {\n \n         let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n-            size: layout.size.bytes() as u32,\n+            size: u32::try_from(layout.size.bytes()).unwrap(),\n             offset: None,\n         });\n         CPlace {\n@@ -533,6 +530,13 @@ impl<'tcx> CPlace<'tcx> {\n             dst_ty: Type,\n         ) {\n             let src_ty = fx.bcx.func.dfg.value_type(data);\n+            assert_eq!(\n+                src_ty.bytes(),\n+                dst_ty.bytes(),\n+                \"write_cvalue_transmute: {:?} -> {:?}\",\n+                src_ty,\n+                dst_ty,\n+            );\n             let data = match (src_ty, dst_ty) {\n                 (_, _) if src_ty == dst_ty => data,\n \n@@ -544,6 +548,17 @@ impl<'tcx> CPlace<'tcx> {\n                 _ if src_ty.is_vector() && dst_ty.is_vector() => {\n                     fx.bcx.ins().raw_bitcast(dst_ty, data)\n                 }\n+                _ if src_ty.is_vector() || dst_ty.is_vector() => {\n+                    // FIXME do something more efficient for transmutes between vectors and integers.\n+                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                        kind: StackSlotKind::ExplicitSlot,\n+                        size: src_ty.bytes(),\n+                        offset: None,\n+                    });\n+                    let ptr = Pointer::stack_slot(stack_slot);\n+                    ptr.store(fx, data, MemFlags::trusted());\n+                    ptr.load(fx, dst_ty, MemFlags::trusted())\n+                }\n                 _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty, dst_ty),\n             };\n             fx.bcx"}, {"sha": "238abc0d8bdfa557ecd65611a91af4063383d8c8", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -108,14 +108,14 @@ fn build_vtable<'tcx>(\n         (&[]).iter()\n     };\n     let methods = methods.cloned().map(|opt_mth| {\n-        opt_mth.map_or(None, |(def_id, substs)| {\n-            Some(import_function(\n+        opt_mth.map(|(def_id, substs)| {\n+            import_function(\n                 tcx,\n                 &mut fx.cx.module,\n                 Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), def_id, substs)\n                     .unwrap()\n                     .polymorphize(fx.tcx),\n-            ))\n+            )\n         })\n     });\n     components.extend(methods);\n@@ -137,15 +137,7 @@ fn build_vtable<'tcx>(\n         }\n     }\n \n-    data_ctx.set_align(\n-        fx.tcx\n-            .data_layout\n-            .pointer_align\n-            .pref\n-            .bytes()\n-            .try_into()\n-            .unwrap(),\n-    );\n+    data_ctx.set_align(fx.tcx.data_layout.pointer_align.pref.bytes());\n \n     let data_id = fx\n         .cx"}, {"sha": "3cdd4119d794cda6c8a045dce1c5a80566986030", "filename": "compiler/rustc_codegen_cranelift/test.sh", "status": "modified", "additions": 5, "deletions": 109, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Ftest.sh?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1,119 +1,15 @@\n #!/bin/bash\n set -e\n \n-# Build cg_clif\n export RUSTFLAGS=\"-Zrun_dsymutil=no\"\n-if [[ \"$1\" == \"--release\" ]]; then\n-    export CHANNEL='release'\n-    cargo build --release\n-else\n-    export CHANNEL='debug'\n-    cargo build --bin cg_clif\n-fi\n \n-# Config\n-source scripts/config.sh\n-export CG_CLIF_INCR_CACHE_DISABLED=1\n-RUSTC=$RUSTC\" \"$RUSTFLAGS\" -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+./build.sh --without-sysroot $@\n \n-# Cleanup\n rm -r target/out || true\n \n-# Perform all tests\n-echo \"[BUILD] mini_core\"\n-$RUSTC example/mini_core.rs --crate-name mini_core --crate-type lib,dylib --target $TARGET_TRIPLE\n+scripts/tests.sh no_sysroot\n \n-echo \"[BUILD] example\"\n-$RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n+./build.sh $@\n \n-if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n-    echo \"[JIT] mini_core_hello_world\"\n-    CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n-else\n-    echo \"[JIT] mini_core_hello_world (skipped)\"\n-fi\n-\n-echo \"[AOT] mini_core_hello_world\"\n-$RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin -g --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/mini_core_hello_world abc bcd\n-# (echo \"break set -n main\"; echo \"run\"; sleep 1; echo \"si -c 10\"; sleep 1; echo \"frame variable\") | lldb -- ./target/out/mini_core_hello_world abc bcd\n-\n-echo \"[AOT] arbitrary_self_types_pointers_and_wrappers\"\n-$RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n-\n-echo \"[BUILD] sysroot\"\n-time ./build_sysroot/build_sysroot.sh --release\n-\n-echo \"[AOT] alloc_example\"\n-$RUSTC example/alloc_example.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/alloc_example\n-\n-if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n-    echo \"[JIT] std_example\"\n-    $RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n-else\n-    echo \"[JIT] std_example (skipped)\"\n-fi\n-\n-echo \"[AOT] dst_field_align\"\n-# FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n-$RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n-\n-echo \"[AOT] std_example\"\n-$RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/std_example arg\n-\n-echo \"[AOT] subslice-patterns-const-eval\"\n-$RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n-\n-echo \"[AOT] track-caller-attribute\"\n-$RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/track-caller-attribute\n-\n-echo \"[AOT] mod_bench\"\n-$RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n-$RUN_WRAPPER ./target/out/mod_bench\n-\n-pushd rand\n-rm -r ./target || true\n-../cargo.sh test --workspace\n-popd\n-\n-pushd simple-raytracer\n-if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-    echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-    hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n-    \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-    \"../cargo.sh build\"\n-\n-    echo \"[BENCH RUN] ebobby/simple-raytracer\"\n-    cp ./target/debug/main ./raytracer_cg_clif\n-    hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n-else\n-    echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n-    echo \"[COMPILE] ebobby/simple-raytracer\"\n-    ../cargo.sh build\n-    echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n-fi\n-popd\n-\n-pushd build_sysroot/sysroot_src/library/core/tests\n-echo \"[TEST] libcore\"\n-rm -r ./target || true\n-../../../../../cargo.sh test\n-popd\n-\n-pushd regex\n-echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-../cargo.sh clean\n-# Make sure `[codegen mono items] start` doesn't poison the diff\n-../cargo.sh build --example shootout-regex-dna\n-cat examples/regexdna-input.txt | ../cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n-diff -u res.txt examples/regexdna-output.txt\n-\n-echo \"[TEST] rust-lang/regex tests\"\n-../cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options\n-popd\n+scripts/tests.sh base_sysroot\n+scripts/tests.sh extended_sysroot"}, {"sha": "ef1ae807453f2a6b1315ecb1e37c390cbeab7ec9", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -801,6 +801,7 @@ fn file_metadata_raw(\n                     let kind = match hash.kind {\n                         rustc_span::SourceFileHashAlgorithm::Md5 => llvm::ChecksumKind::MD5,\n                         rustc_span::SourceFileHashAlgorithm::Sha1 => llvm::ChecksumKind::SHA1,\n+                        rustc_span::SourceFileHashAlgorithm::Sha256 => llvm::ChecksumKind::SHA256,\n                     };\n                     (kind, hex_encode(hash.hash_bytes()))\n                 }"}, {"sha": "8b15c8b0eb6075d02623ee5574d028d694d489cc", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -558,6 +558,7 @@ pub enum ChecksumKind {\n     None,\n     MD5,\n     SHA1,\n+    SHA256,\n }\n \n extern \"C\" {"}, {"sha": "b435def87ac84c7a5c98901cd39fc2871d6ba8bc", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -793,7 +793,7 @@ impl SyntaxExtension {\n             allow_internal_unsafe: sess.contains_name(attrs, sym::allow_internal_unsafe),\n             local_inner_macros,\n             stability,\n-            deprecation: attr::find_deprecation(&sess, attrs, span),\n+            deprecation: attr::find_deprecation(&sess, attrs).map(|(d, _)| d),\n             helper_attrs,\n             edition,\n             is_builtin,"}, {"sha": "a1b7c13e4c0f0e690564f826f8261eb786af93ee", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -2705,6 +2705,32 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `useless_deprecated` lint detects deprecation attributes with no effect.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// struct X;\n+    ///\n+    /// #[deprecated = \"message\"]\n+    /// impl Default for X {\n+    ///     fn default() -> Self {\n+    ///         X\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Deprecation attributes have no effect on trait implementations.\n+    pub USELESS_DEPRECATED,\n+    Deny,\n+    \"detects deprecation attributes with no effect\",\n+}\n+\n declare_tool_lint! {\n     pub rustc::INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n     Deny,\n@@ -2792,6 +2818,7 @@ declare_lint_pass! {\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n         UNINHABITED_STATIC,\n         FUNCTION_ITEM_REFERENCES,\n+        USELESS_DEPRECATED,\n     ]\n }\n "}, {"sha": "938eb19faef6b7f6617b0359e46fb2504e228b5e", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -648,6 +648,7 @@ enum class LLVMRustChecksumKind {\n   None,\n   MD5,\n   SHA1,\n+  SHA256,\n };\n \n static Optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {\n@@ -658,6 +659,10 @@ static Optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {\n     return DIFile::ChecksumKind::CSK_MD5;\n   case LLVMRustChecksumKind::SHA1:\n     return DIFile::ChecksumKind::CSK_SHA1;\n+#if (LLVM_VERSION_MAJOR >= 11)\n+  case LLVMRustChecksumKind::SHA256:\n+    return DIFile::ChecksumKind::CSK_SHA256;\n+#endif\n   default:\n     report_fatal_error(\"bad ChecksumKind.\");\n   }"}, {"sha": "d592580af9cecf8c59f1a553279af679c67d8b4d", "filename": "compiler/rustc_mir/src/transform/function_item_references.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -51,10 +51,11 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n                         let arg_ty = args[0].ty(self.body, self.tcx);\n                         for generic_inner_ty in arg_ty.walk() {\n                             if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n-                                if let Some(fn_id) = FunctionItemRefChecker::is_fn_ref(inner_ty) {\n-                                    let ident = self.tcx.item_name(fn_id).to_ident_string();\n+                                if let Some((fn_id, fn_substs)) =\n+                                    FunctionItemRefChecker::is_fn_ref(inner_ty)\n+                                {\n                                     let span = self.nth_arg_span(&args, 0);\n-                                    self.emit_lint(ident, fn_id, source_info, span);\n+                                    self.emit_lint(fn_id, fn_substs, source_info, span);\n                                 }\n                             }\n                         }\n@@ -66,6 +67,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n         }\n         self.super_terminator(terminator, location);\n     }\n+\n     /// Emits a lint for function references formatted with `fmt::Pointer::fmt` by macros. These\n     /// cases are handled as operands instead of call terminators to avoid any dependence on\n     /// unstable, internal formatting details like whether `fmt` is called directly or not.\n@@ -76,13 +78,12 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n             if let ty::FnDef(def_id, substs_ref) = *op_ty.kind() {\n                 if self.tcx.is_diagnostic_item(sym::pointer_trait_fmt, def_id) {\n                     let param_ty = substs_ref.type_at(0);\n-                    if let Some(fn_id) = FunctionItemRefChecker::is_fn_ref(param_ty) {\n+                    if let Some((fn_id, fn_substs)) = FunctionItemRefChecker::is_fn_ref(param_ty) {\n                         // The operand's ctxt wouldn't display the lint since it's inside a macro so\n                         // we have to use the callsite's ctxt.\n                         let callsite_ctxt = source_info.span.source_callsite().ctxt();\n                         let span = source_info.span.with_ctxt(callsite_ctxt);\n-                        let ident = self.tcx.item_name(fn_id).to_ident_string();\n-                        self.emit_lint(ident, fn_id, source_info, span);\n+                        self.emit_lint(fn_id, fn_substs, source_info, span);\n                     }\n                 }\n             }\n@@ -115,10 +116,11 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n                             if TyS::same_type(inner_ty, bound_ty) {\n                                 // Do a substitution using the parameters from the callsite\n                                 let subst_ty = inner_ty.subst(self.tcx, substs_ref);\n-                                if let Some(fn_id) = FunctionItemRefChecker::is_fn_ref(subst_ty) {\n-                                    let ident = self.tcx.item_name(fn_id).to_ident_string();\n+                                if let Some((fn_id, fn_substs)) =\n+                                    FunctionItemRefChecker::is_fn_ref(subst_ty)\n+                                {\n                                     let span = self.nth_arg_span(args, arg_num);\n-                                    self.emit_lint(ident, fn_id, source_info, span);\n+                                    self.emit_lint(fn_id, fn_substs, source_info, span);\n                                 }\n                             }\n                         }\n@@ -127,6 +129,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n     /// If the given predicate is the trait `fmt::Pointer`, returns the bound parameter type.\n     fn is_pointer_trait(&self, bound: &PredicateAtom<'tcx>) -> Option<Ty<'tcx>> {\n         if let ty::PredicateAtom::Trait(predicate, _) = bound {\n@@ -139,22 +142,26 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             None\n         }\n     }\n+\n     /// If a type is a reference or raw pointer to the anonymous type of a function definition,\n-    /// returns that function's `DefId`.\n-    fn is_fn_ref(ty: Ty<'tcx>) -> Option<DefId> {\n+    /// returns that function's `DefId` and `SubstsRef`.\n+    fn is_fn_ref(ty: Ty<'tcx>) -> Option<(DefId, SubstsRef<'tcx>)> {\n         let referent_ty = match ty.kind() {\n             ty::Ref(_, referent_ty, _) => Some(referent_ty),\n             ty::RawPtr(ty_and_mut) => Some(&ty_and_mut.ty),\n             _ => None,\n         };\n         referent_ty\n-            .map(\n-                |ref_ty| {\n-                    if let ty::FnDef(def_id, _) = *ref_ty.kind() { Some(def_id) } else { None }\n-                },\n-            )\n+            .map(|ref_ty| {\n+                if let ty::FnDef(def_id, substs_ref) = *ref_ty.kind() {\n+                    Some((def_id, substs_ref))\n+                } else {\n+                    None\n+                }\n+            })\n             .unwrap_or(None)\n     }\n+\n     fn nth_arg_span(&self, args: &Vec<Operand<'tcx>>, n: usize) -> Span {\n         match &args[n] {\n             Operand::Copy(place) | Operand::Move(place) => {\n@@ -163,7 +170,14 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             Operand::Constant(constant) => constant.span,\n         }\n     }\n-    fn emit_lint(&self, ident: String, fn_id: DefId, source_info: SourceInfo, span: Span) {\n+\n+    fn emit_lint(\n+        &self,\n+        fn_id: DefId,\n+        fn_substs: SubstsRef<'tcx>,\n+        source_info: SourceInfo,\n+        span: Span,\n+    ) {\n         let lint_root = self.body.source_scopes[source_info.scope]\n             .local_data\n             .as_ref()\n@@ -180,6 +194,10 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n                 s\n             }\n         };\n+        let ident = self.tcx.item_name(fn_id).to_ident_string();\n+        let ty_params = fn_substs.types().map(|ty| format!(\"{}\", ty));\n+        let const_params = fn_substs.consts().map(|c| format!(\"{}\", c));\n+        let params = ty_params.chain(const_params).collect::<Vec<String>>().join(\", \");\n         let num_args = fn_sig.inputs().map_bound(|inputs| inputs.len()).skip_binder();\n         let variadic = if fn_sig.c_variadic() { \", ...\" } else { \"\" };\n         let ret = if fn_sig.output().skip_binder().is_unit() { \"\" } else { \" -> _\" };\n@@ -190,7 +208,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n                     &format!(\"cast `{}` to obtain a function pointer\", ident),\n                     format!(\n                         \"{} as {}{}fn({}{}){}\",\n-                        ident,\n+                        if params.is_empty() { ident } else { format!(\"{}::<{}>\", ident, params) },\n                         unsafety,\n                         abi,\n                         vec![\"_\"; num_args].join(\", \"),"}, {"sha": "04b5c65e464fb5e52eec4ad4396ac17c29a3c604", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n use rustc_middle::ty::{self, query::Providers, TyCtxt};\n use rustc_session::lint;\n-use rustc_session::lint::builtin::INEFFECTIVE_UNSTABLE_TRAIT_IMPL;\n+use rustc_session::lint::builtin::{INEFFECTIVE_UNSTABLE_TRAIT_IMPL, USELESS_DEPRECATED};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n@@ -31,6 +31,8 @@ enum AnnotationKind {\n     Required,\n     // Annotation is useless, reject it\n     Prohibited,\n+    // Deprecation annotation is useless, reject it. (Stability attribute is still required.)\n+    DeprecationProhibited,\n     // Annotation itself is useless, but it can be propagated to children\n     Container,\n }\n@@ -83,14 +85,22 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             did_error = self.forbid_staged_api_attrs(hir_id, attrs, inherit_deprecation.clone());\n         }\n \n-        let depr =\n-            if did_error { None } else { attr::find_deprecation(&self.tcx.sess, attrs, item_sp) };\n+        let depr = if did_error { None } else { attr::find_deprecation(&self.tcx.sess, attrs) };\n         let mut is_deprecated = false;\n-        if let Some(depr) = &depr {\n+        if let Some((depr, span)) = &depr {\n             is_deprecated = true;\n \n-            if kind == AnnotationKind::Prohibited {\n-                self.tcx.sess.span_err(item_sp, \"This deprecation annotation is useless\");\n+            if kind == AnnotationKind::Prohibited || kind == AnnotationKind::DeprecationProhibited {\n+                self.tcx.struct_span_lint_hir(USELESS_DEPRECATED, hir_id, *span, |lint| {\n+                    lint.build(\"this `#[deprecated]` annotation has no effect\")\n+                        .span_suggestion_short(\n+                            *span,\n+                            \"remove the unnecessary deprecation attribute\",\n+                            String::new(),\n+                            rustc_errors::Applicability::MachineApplicable,\n+                        )\n+                        .emit()\n+                });\n             }\n \n             // `Deprecation` is just two pointers, no need to intern it\n@@ -114,7 +124,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         } else {\n             self.recurse_with_stability_attrs(\n-                depr.map(|d| DeprecationEntry::local(d, hir_id)),\n+                depr.map(|(d, _)| DeprecationEntry::local(d, hir_id)),\n                 None,\n                 None,\n                 visit_children,\n@@ -139,11 +149,11 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n-        if depr.as_ref().map_or(false, |d| d.is_since_rustc_version) {\n+        if let Some((rustc_attr::Deprecation { is_since_rustc_version: true, .. }, span)) = &depr {\n             if stab.is_none() {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    item_sp,\n+                    *span,\n                     E0549,\n                     \"rustc_deprecated attribute must be paired with \\\n                     either stable or unstable attribute\"\n@@ -166,7 +176,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             // Check if deprecated_since < stable_since. If it is,\n             // this is *almost surely* an accident.\n             if let (&Some(dep_since), &attr::Stable { since: stab_since }) =\n-                (&depr.as_ref().and_then(|d| d.since), &stab.level)\n+                (&depr.as_ref().and_then(|(d, _)| d.since), &stab.level)\n             {\n                 // Explicit version of iter::order::lt to handle parse errors properly\n                 for (dep_v, stab_v) in\n@@ -212,7 +222,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         }\n \n         self.recurse_with_stability_attrs(\n-            depr.map(|d| DeprecationEntry::local(d, hir_id)),\n+            depr.map(|(d, _)| DeprecationEntry::local(d, hir_id)),\n             stab,\n             const_stab,\n             visit_children,\n@@ -322,6 +332,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             }\n             hir::ItemKind::Impl { of_trait: Some(_), .. } => {\n                 self.in_trait_impl = true;\n+                kind = AnnotationKind::DeprecationProhibited;\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n                 if let Some(ctor_hir_id) = sd.ctor_hir_id() {"}, {"sha": "4c00361dd31df3548e27371645d15aac6b16b361", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1076,7 +1076,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n         \"exclude spans when debug-printing compiler state (default: no)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n-        \"hash algorithm of source files in debug info (`md5`, or `sha1`)\"),\n+        \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n         \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,"}, {"sha": "08645990c4870dec32420bc50a17ce56905104d8", "filename": "compiler/rustc_span/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_span%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_span%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2FCargo.toml?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -17,5 +17,6 @@ scoped-tls = \"1.0\"\n unicode-width = \"0.1.4\"\n cfg-if = \"0.1.2\"\n tracing = \"0.1\"\n-sha-1 = \"0.8\"\n-md-5 = \"0.8\"\n+sha-1 = \"0.9\"\n+sha2 = \"0.9\"\n+md-5 = \"0.9\""}, {"sha": "97b5c11b0fefbb26afea2d6a1fdc1196fe297267", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -59,6 +59,7 @@ use std::str::FromStr;\n use md5::Md5;\n use sha1::Digest;\n use sha1::Sha1;\n+use sha2::Sha256;\n \n use tracing::debug;\n \n@@ -1034,6 +1035,7 @@ pub struct OffsetOverflowError;\n pub enum SourceFileHashAlgorithm {\n     Md5,\n     Sha1,\n+    Sha256,\n }\n \n impl FromStr for SourceFileHashAlgorithm {\n@@ -1043,6 +1045,7 @@ impl FromStr for SourceFileHashAlgorithm {\n         match s {\n             \"md5\" => Ok(SourceFileHashAlgorithm::Md5),\n             \"sha1\" => Ok(SourceFileHashAlgorithm::Sha1),\n+            \"sha256\" => Ok(SourceFileHashAlgorithm::Sha256),\n             _ => Err(()),\n         }\n     }\n@@ -1055,7 +1058,7 @@ rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub struct SourceFileHash {\n     pub kind: SourceFileHashAlgorithm,\n-    value: [u8; 20],\n+    value: [u8; 32],\n }\n \n impl SourceFileHash {\n@@ -1071,6 +1074,9 @@ impl SourceFileHash {\n             SourceFileHashAlgorithm::Sha1 => {\n                 value.copy_from_slice(&Sha1::digest(data));\n             }\n+            SourceFileHashAlgorithm::Sha256 => {\n+                value.copy_from_slice(&Sha256::digest(data));\n+            }\n         }\n         hash\n     }\n@@ -1090,6 +1096,7 @@ impl SourceFileHash {\n         match self.kind {\n             SourceFileHashAlgorithm::Md5 => 16,\n             SourceFileHashAlgorithm::Sha1 => 20,\n+            SourceFileHashAlgorithm::Sha256 => 32,\n         }\n     }\n }"}, {"sha": "0878b0ff789302338e8b0504a6f8dc1bf6a89240", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1119,6 +1119,10 @@ impl Build {\n             let krate = &self.crates[&krate];\n             ret.push(krate);\n             for dep in &krate.deps {\n+                if !self.crates.contains_key(dep) {\n+                    // Ignore non-workspace members.\n+                    continue;\n+                }\n                 // Don't include optional deps if their features are not\n                 // enabled. Ideally this would be computed from `cargo\n                 // metadata --features \u2026`, but that is somewhat slow. Just"}, {"sha": "5a73f5830450102fd1350e837c2ee4150a51beb7", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -970,7 +970,8 @@ impl Step for Compiletest {\n         if builder.top_stage == 0 && env::var(\"COMPILETEST_FORCE_STAGE0\").is_err() {\n             eprintln!(\"\\\n error: `--stage 0` runs compiletest on the beta compiler, not your local changes, and will almost always cause tests to fail\n-help: use `--stage 1` instead\n+help: to test the compiler, use `--stage 1` instead\n+help: to test the standard library, use `--stage 0 library/std` instead\n note: if you're sure you want to do this, please open an issue as to why. In the meantime, you can override this with `COMPILETEST_FORCE_STAGE0=1`.\"\n             );\n             std::process::exit(1);"}, {"sha": "ff776741b2122a32d016ba0d93569f488330766d", "filename": "src/doc/unstable-book/src/compiler-flags/src-hash-algorithm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsrc-hash-algorithm.md", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsrc-hash-algorithm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsrc-hash-algorithm.md?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -6,6 +6,6 @@ The tracking issue for this feature is: [#70401](https://github.com/rust-lang/ru\n \n The `-Z src-hash-algorithm` compiler flag controls which algorithm is used when hashing each source file. The hash is stored in the debug info and can be used by a debugger to verify the source code matches the executable.\n \n-Supported hash algorithms are: `md5`, and `sha1`. Note that not all hash algorithms are supported by all debug info formats.\n+Supported hash algorithms are: `md5`, `sha1`, and `sha256`. Note that not all hash algorithms are supported by all debug info formats.\n \n By default, the compiler chooses the hash algorithm based on the target specification."}, {"sha": "fc355c87b52a2f00ae12d3ce7e206e099f024215", "filename": "src/etc/lldb_batchmode.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fetc%2Flldb_batchmode.py", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Fetc%2Flldb_batchmode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_batchmode.py?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -28,7 +28,7 @@\n     import _thread as thread\n \n # Set this to True for additional output\n-DEBUG_OUTPUT = False\n+DEBUG_OUTPUT = True\n \n \n def print_debug(s):\n@@ -102,7 +102,7 @@ def execute_command(command_interpreter, command):\n                     registered_breakpoints.add(breakpoint_id)\n                 else:\n                     print(\"Error while trying to register breakpoint callback, id = \" +\n-                          str(breakpoint_id))\n+                          str(breakpoint_id) + \", message = \" + str(res.GetError()))\n     else:\n         print(res.GetError())\n "}, {"sha": "eaa9eafa1e87226c982959e649857ecc9a2a0c07", "filename": "src/test/codegen/src-hash-algorithm/src-hash-algorithm-sha256.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fcodegen%2Fsrc-hash-algorithm%2Fsrc-hash-algorithm-sha256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fcodegen%2Fsrc-hash-algorithm%2Fsrc-hash-algorithm-sha256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsrc-hash-algorithm%2Fsrc-hash-algorithm-sha256.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -g -Z src-hash-algorithm=sha256\n+// min-llvm-version: 11.0\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn test() {}\n+// CHECK: checksumkind: CSK_SHA256"}, {"sha": "4fc3fddadb99ee279f568b83eaad84b846af206f", "filename": "src/test/ui/deprecation/deprecation-sanity.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -24,10 +24,19 @@ mod bogus_attribute_types_1 {\n }\n \n #[deprecated(since = \"a\", note = \"b\")]\n-#[deprecated(since = \"a\", note = \"b\")]\n-fn multiple1() { } //~ ERROR multiple deprecated attributes\n+#[deprecated(since = \"a\", note = \"b\")] //~ ERROR multiple deprecated attributes\n+fn multiple1() { }\n \n #[deprecated(since = \"a\", since = \"b\", note = \"c\")] //~ ERROR multiple 'since' items\n fn f1() { }\n \n+struct X;\n+\n+#[deprecated = \"hello\"] //~ ERROR this `#[deprecated]` annotation has no effect\n+impl Default for X {\n+    fn default() -> Self {\n+        X\n+    }\n+}\n+\n fn main() { }"}, {"sha": "7e70c35eeabdf37b11fcba42dd2395eebb66819a", "filename": "src/test/ui/deprecation/deprecation-sanity.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -41,18 +41,28 @@ LL |     #[deprecated(\"test\")]\n    |                  ^^^^^^\n \n error[E0550]: multiple deprecated attributes\n-  --> $DIR/deprecation-sanity.rs:28:1\n+  --> $DIR/deprecation-sanity.rs:27:1\n    |\n-LL | fn multiple1() { }\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[deprecated(since = \"a\", note = \"b\")]\n+   | -------------------------------------- first deprecation attribute\n+LL | #[deprecated(since = \"a\", note = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n \n error[E0538]: multiple 'since' items\n   --> $DIR/deprecation-sanity.rs:30:27\n    |\n LL | #[deprecated(since = \"a\", since = \"b\", note = \"c\")]\n    |                           ^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: this `#[deprecated]` annotation has no effect\n+  --> $DIR/deprecation-sanity.rs:35:1\n+   |\n+LL | #[deprecated = \"hello\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove the unnecessary deprecation attribute\n+   |\n+   = note: `#[deny(useless_deprecated)]` on by default\n+\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0538, E0541, E0550, E0551, E0565.\n For more information about an error, try `rustc --explain E0538`."}, {"sha": "5f7f5e66eaa9f220d4b004b151fe6edb29832b2a", "filename": "src/test/ui/lint/function-item-references.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(c_variadic)]\n+#![feature(c_variadic, min_const_generics)]\n #![warn(function_item_references)]\n use std::fmt::Pointer;\n use std::fmt::Formatter;\n@@ -12,6 +12,10 @@ unsafe fn unsafe_fn() { }\n extern \"C\" fn c_fn() { }\n unsafe extern \"C\" fn unsafe_c_fn() { }\n unsafe extern fn variadic(_x: u32, _args: ...) { }\n+fn take_generic_ref<'a, T>(_x: &'a T) { }\n+fn take_generic_array<T, const N: usize>(_x: [T; N]) { }\n+fn multiple_generic<T, U>(_x: T, _y: U) { }\n+fn multiple_generic_arrays<T, U, const N: usize, const M: usize>(_x: [T; N], _y: [U; M]) { }\n \n //function references passed to these functions should never lint\n fn call_fn(f: &dyn Fn(u32) -> u32, x: u32) { f(x); }\n@@ -109,6 +113,14 @@ fn main() {\n     //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &variadic);\n     //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &take_generic_ref::<u32>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &take_generic_array::<u32, 4>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &multiple_generic::<u32, f32>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &multiple_generic_arrays::<u32, f32, 4, 8>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &std::env::var::<String>);\n     //~^ WARNING taking a reference to a function item does not give a function pointer\n \n@@ -132,6 +144,8 @@ fn main() {\n         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n         //~^ WARNING taking a reference to a function item does not give a function pointer\n         //~^^ WARNING taking a reference to a function item does not give a function pointer\n+        std::mem::transmute::<_, usize>(&take_generic_ref::<u32>);\n+        //~^ WARNING taking a reference to a function item does not give a function pointer\n \n         //the correct way to transmute function pointers\n         std::mem::transmute::<_, usize>(foo as fn() -> u32);"}, {"sha": "33db687df31d2b8c4b174b6a8441e8096fc372a1", "filename": "src/test/ui/lint/function-item-references.stderr", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1,5 +1,5 @@\n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:40:18\n+  --> $DIR/function-item-references.rs:44:18\n    |\n LL |     Pointer::fmt(&zst_ref, f)\n    |                  ^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n@@ -11,166 +11,196 @@ LL | #![warn(function_item_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:77:22\n+  --> $DIR/function-item-references.rs:81:22\n    |\n LL |     println!(\"{:p}\", &foo);\n    |                      ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:79:20\n+  --> $DIR/function-item-references.rs:83:20\n    |\n LL |     print!(\"{:p}\", &foo);\n    |                    ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:81:21\n+  --> $DIR/function-item-references.rs:85:21\n    |\n LL |     format!(\"{:p}\", &foo);\n    |                     ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:84:22\n+  --> $DIR/function-item-references.rs:88:22\n    |\n LL |     println!(\"{:p}\", &foo as *const _);\n    |                      ^^^^^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:86:22\n+  --> $DIR/function-item-references.rs:90:22\n    |\n LL |     println!(\"{:p}\", zst_ref);\n    |                      ^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:88:22\n+  --> $DIR/function-item-references.rs:92:22\n    |\n LL |     println!(\"{:p}\", cast_zst_ptr);\n    |                      ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:90:22\n+  --> $DIR/function-item-references.rs:94:22\n    |\n LL |     println!(\"{:p}\", coerced_zst_ptr);\n    |                      ^^^^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:93:22\n+  --> $DIR/function-item-references.rs:97:22\n    |\n LL |     println!(\"{:p}\", &fn_item);\n    |                      ^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:95:22\n+  --> $DIR/function-item-references.rs:99:22\n    |\n LL |     println!(\"{:p}\", indirect_ref);\n    |                      ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:98:22\n+  --> $DIR/function-item-references.rs:102:22\n    |\n LL |     println!(\"{:p}\", &nop);\n    |                      ^^^^ help: cast `nop` to obtain a function pointer: `nop as fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:100:22\n+  --> $DIR/function-item-references.rs:104:22\n    |\n LL |     println!(\"{:p}\", &bar);\n    |                      ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:102:22\n+  --> $DIR/function-item-references.rs:106:22\n    |\n LL |     println!(\"{:p}\", &baz);\n    |                      ^^^^ help: cast `baz` to obtain a function pointer: `baz as fn(_, _) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:104:22\n+  --> $DIR/function-item-references.rs:108:22\n    |\n LL |     println!(\"{:p}\", &unsafe_fn);\n    |                      ^^^^^^^^^^ help: cast `unsafe_fn` to obtain a function pointer: `unsafe_fn as unsafe fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:106:22\n+  --> $DIR/function-item-references.rs:110:22\n    |\n LL |     println!(\"{:p}\", &c_fn);\n    |                      ^^^^^ help: cast `c_fn` to obtain a function pointer: `c_fn as extern \"C\" fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:108:22\n+  --> $DIR/function-item-references.rs:112:22\n    |\n LL |     println!(\"{:p}\", &unsafe_c_fn);\n    |                      ^^^^^^^^^^^^ help: cast `unsafe_c_fn` to obtain a function pointer: `unsafe_c_fn as unsafe extern \"C\" fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:110:22\n+  --> $DIR/function-item-references.rs:114:22\n    |\n LL |     println!(\"{:p}\", &variadic);\n    |                      ^^^^^^^^^ help: cast `variadic` to obtain a function pointer: `variadic as unsafe extern \"C\" fn(_, ...)`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:112:22\n+  --> $DIR/function-item-references.rs:116:22\n+   |\n+LL |     println!(\"{:p}\", &take_generic_ref::<u32>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_ref` to obtain a function pointer: `take_generic_ref::<u32> as fn(_)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:118:22\n+   |\n+LL |     println!(\"{:p}\", &take_generic_array::<u32, 4>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_array` to obtain a function pointer: `take_generic_array::<u32, 4_usize> as fn(_)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:120:22\n+   |\n+LL |     println!(\"{:p}\", &multiple_generic::<u32, f32>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `multiple_generic` to obtain a function pointer: `multiple_generic::<u32, f32> as fn(_, _)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:122:22\n+   |\n+LL |     println!(\"{:p}\", &multiple_generic_arrays::<u32, f32, 4, 8>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `multiple_generic_arrays` to obtain a function pointer: `multiple_generic_arrays::<u32, f32, 4_usize, 8_usize> as fn(_, _)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:124:22\n    |\n LL |     println!(\"{:p}\", &std::env::var::<String>);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `var` to obtain a function pointer: `var as fn(_) -> _`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `var` to obtain a function pointer: `var::<String> as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:115:32\n+  --> $DIR/function-item-references.rs:127:32\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                ^^^^ help: cast `nop` to obtain a function pointer: `nop as fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:115:38\n+  --> $DIR/function-item-references.rs:127:38\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                      ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:115:44\n+  --> $DIR/function-item-references.rs:127:44\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                            ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:130:41\n+  --> $DIR/function-item-references.rs:142:41\n    |\n LL |         std::mem::transmute::<_, usize>(&foo);\n    |                                         ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:132:50\n+  --> $DIR/function-item-references.rs:144:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n    |                                                  ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:132:50\n+  --> $DIR/function-item-references.rs:144:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n    |                                                  ^^^^^^^^^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:142:15\n+  --> $DIR/function-item-references.rs:147:41\n+   |\n+LL |         std::mem::transmute::<_, usize>(&take_generic_ref::<u32>);\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_ref` to obtain a function pointer: `take_generic_ref::<u32> as fn(_)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:156:15\n    |\n LL |     print_ptr(&bar);\n    |               ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:144:24\n+  --> $DIR/function-item-references.rs:158:24\n    |\n LL |     bound_by_ptr_trait(&bar);\n    |                        ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:146:30\n+  --> $DIR/function-item-references.rs:160:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n    |                              ^^^^^^^^^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:146:30\n+  --> $DIR/function-item-references.rs:160:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n    |                              ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: 28 warnings emitted\n+warning: 33 warnings emitted\n "}, {"sha": "abd603b356ee68ee7e12795119e55161e01e05e3", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -59,14 +59,14 @@ fn multiple3() { }\n \n #[stable(feature = \"a\", since = \"b\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-#[rustc_deprecated(since = \"b\", reason = \"text\")]\n+#[rustc_deprecated(since = \"b\", reason = \"text\")] //~ ERROR multiple deprecated attributes\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n-pub const fn multiple4() { } //~ ERROR multiple deprecated attributes\n+pub const fn multiple4() { }\n //~^ ERROR Invalid stability or deprecation version found\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]\n fn deprecated_without_unstable_or_stable() { }\n-//~^ ERROR rustc_deprecated attribute must be paired with either stable or unstable attribute\n+//~^^ ERROR rustc_deprecated attribute must be paired with either stable or unstable attribute\n \n fn main() { }"}, {"sha": "bf2436a535fd46cf96f83de95539b028f3aafc0f", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -83,10 +83,12 @@ LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0550]: multiple deprecated attributes\n-  --> $DIR/stability-attribute-sanity.rs:65:1\n+  --> $DIR/stability-attribute-sanity.rs:62:1\n    |\n-LL | pub const fn multiple4() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated(since = \"b\", reason = \"text\")]\n+   | ------------------------------------------------- first deprecation attribute\n+LL | #[rustc_deprecated(since = \"b\", reason = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n \n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:64:1\n@@ -101,10 +103,10 @@ LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:69:1\n+  --> $DIR/stability-attribute-sanity.rs:68:1\n    |\n-LL | fn deprecated_without_unstable_or_stable() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}, {"sha": "057b0884e287adb6bfc64360acc0a51314209dc8", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -80,6 +80,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"cloudabi\",\n     \"cmake\",\n     \"compiler_builtins\",\n+    \"cpuid-bool\",\n     \"crc32fast\",\n     \"crossbeam-deque\",\n     \"crossbeam-epoch\",\n@@ -160,6 +161,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"serde\",\n     \"serde_derive\",\n     \"sha-1\",\n+    \"sha2\",\n     \"smallvec\",\n     \"snap\",\n     \"stable_deref_trait\","}]}