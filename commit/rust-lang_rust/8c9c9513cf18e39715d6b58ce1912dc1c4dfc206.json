{"sha": "8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOWM5NTEzY2YxOGUzOTcxNWQ2YjU4Y2UxOTEyZGMxYzRkZmMyMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-12T13:07:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-12T13:07:45Z"}, "message": "Auto merge of #29544 - Ryman:reduce_doc_warnings, r=steveklabnik\n\nDid this alphabetically, so I didn't see [how `std` was doing things](https://dxr.mozilla.org/rust/source/src/libstd/lib.rs#215) till I was nearly finished. If you prefer to add crate-level-whitelists like std instead of test-level, I can rebase with that strategy.\n\nA number of these commits can probably be dropped as the crates don't have much to test, and are deprecated. Let me know which if any to drop! (can also squash after review if desired)\n\nr? @steveklabnik", "tree": {"sha": "d1e85cb70d308cd6f3fd3a70fe043c69d3f36dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1e85cb70d308cd6f3fd3a70fe043c69d3f36dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "html_url": "https://github.com/rust-lang/rust/commit/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd708461b0e301c7fb34635d978247a80ccf3b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd708461b0e301c7fb34635d978247a80ccf3b2", "html_url": "https://github.com/rust-lang/rust/commit/0bd708461b0e301c7fb34635d978247a80ccf3b2"}, {"sha": "5ae1937129c8595075f32a1417d534297c9d78e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae1937129c8595075f32a1417d534297c9d78e5", "html_url": "https://github.com/rust-lang/rust/commit/5ae1937129c8595075f32a1417d534297c9d78e5"}], "stats": {"total": 237, "additions": 168, "deletions": 69}, "files": [{"sha": "73aec5de8da321983812a1662fbfa2e0a0bccaa9", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -25,7 +25,8 @@ $(eval $(call RUST_CRATE,collectionstest))\n TEST_TARGET_CRATES = $(filter-out core rustc_unicode alloc_system libc \\\n \t\t     \t\t  alloc_jemalloc,$(TARGET_CRATES)) \\\n \t\t\tcollectionstest coretest\n-TEST_DOC_CRATES = $(DOC_CRATES)\n+TEST_DOC_CRATES = $(DOC_CRATES) arena flate fmt_macros getopts graphviz \\\n+                log rand rbml serialize syntax term test\n TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve \\\n \t\t   \t\trustc_trans rustc_lint,\\\n                      $(HOST_CRATES))"}, {"sha": "80aed0d1ca7da63aa3924dba3ee1c9cc4c6c4494", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -620,6 +620,18 @@ You can control a few aspects of the HTML that `rustdoc` generates through the\n \n This sets a few different options, with a logo, favicon, and a root URL.\n \n+### Configuring documentation tests\n+\n+You can also configure the way that `rustdoc` tests your documentation examples\n+through the `#![doc(test(..))]` attribute.\n+\n+```rust\n+#![doc(test(attr(allow(unused_variables), deny(warnings))))]\n+```\n+\n+This allows unused variables within the examples, but will fail the test for any\n+other lint warning thrown.\n+\n ## Generation options\n \n `rustdoc` also contains a few other options on the command line, for further customization:"}, {"sha": "4113f67e617d17bc4dc1f76c3d6ab292a9e84234", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -70,7 +70,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n-       test(no_crate_inject))]\n+       test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n #![cfg_attr(not(stage0), needs_allocator)]\n "}, {"sha": "2234d3608f3f38b4c722dc02f565c87fc0879d38", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -28,7 +28,8 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       test(no_crate_inject, attr(deny(warnings))))]\n \n #![feature(alloc)]\n #![feature(box_syntax)]"}, {"sha": "72547a9a5d2ee7703bd13839d63966971a292e05", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -233,6 +233,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// ```\n     /// #![feature(binary_heap_extras)]\n+    /// # #![allow(deprecated)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![9, 1, 2, 7, 3, 2]);"}, {"sha": "9b8f8c8f5bb8466a8b4bc4c999fb2384ff8d62ee", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -72,6 +72,7 @@ impl<T> ToOwned for T where T: Clone {\n /// ```\n /// use std::borrow::Cow;\n ///\n+/// # #[allow(dead_code)]\n /// fn abs_all(input: &mut Cow<[i32]>) {\n ///     for i in 0..input.len() {\n ///         let v = input[i];"}, {"sha": "0c70a1544ef92f21ea1558519a48b46db5a5bbea", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -89,6 +89,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(unused_mut)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set: BTreeSet<i32> = BTreeSet::new();"}, {"sha": "990575ebbb3361c15ce45f8c1d312f8957e804ba", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -150,6 +150,7 @@\n //! implement a method of the signature:\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! # use std::fmt;\n //! # struct Foo; // our custom type\n //! # impl fmt::Display for Foo {\n@@ -174,7 +175,6 @@\n //! like:\n //!\n //! ```\n-//! #![feature(fmt_flags)]\n //! use std::fmt;\n //!\n //! #[derive(Debug)]\n@@ -288,6 +288,7 @@\n //! off, some example usage is:\n //!\n //! ```\n+//! # #![allow(unused_must_use)]\n //! use std::fmt;\n //! use std::io::{self, Write};\n //!"}, {"sha": "54b98c6e17992f8490d49fc04a6505b44335332c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -27,7 +27,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n-       test(no_crate_inject))]\n+       test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n \n #![allow(trivial_casts)]\n #![cfg_attr(test, allow(deprecated))] // rand"}, {"sha": "85aefbfffb1ad04dfd9c60d6539ce9b12a4e6337", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -852,6 +852,7 @@ pub trait SliceConcatExt<T: ?Sized> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a5013f4e75b18d8f3b14fb71d7d60c2fab46191e", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -298,7 +298,7 @@ impl str {\n     /// done by `.chars()` or `.char_indices()`.\n     ///\n     /// ```\n-    /// #![feature(str_char, core)]\n+    /// #![feature(str_char)]\n     ///\n     /// use std::str::CharRange;\n     ///\n@@ -358,7 +358,7 @@ impl str {\n     /// done by `.chars().rev()` or `.char_indices()`.\n     ///\n     /// ```\n-    /// #![feature(str_char, core)]\n+    /// #![feature(str_char)]\n     ///\n     /// use std::str::CharRange;\n     ///\n@@ -634,6 +634,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let four_lines = \"foo\\r\\nbar\\n\\r\\nbaz\";\n     /// let v: Vec<&str> = four_lines.lines_any().collect();\n     ///\n@@ -643,6 +644,7 @@ impl str {\n     /// Leaving off the trailing character:\n     ///\n     /// ```\n+    /// # #![allow(deprecated)]\n     /// let four_lines = \"foo\\r\\nbar\\n\\r\\nbaz\\n\";\n     /// let v: Vec<&str> = four_lines.lines_any().collect();\n     ///\n@@ -1179,8 +1181,6 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_match_indices)]\n-    ///\n     /// let v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n     ///\n@@ -1216,8 +1216,6 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_match_indices)]\n-    ///\n     /// let v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\n     /// assert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n     ///"}, {"sha": "804e798c600a5808b742d341bcce9f49c5696412", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -55,6 +55,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(unused_mut)]\n     /// let mut s = String::new();\n     /// ```\n     #[inline]\n@@ -73,6 +74,20 @@ impl String {\n     ///\n     /// ```\n     /// let mut s = String::with_capacity(10);\n+    ///\n+    /// // The String contains no chars, even though it has capacity for more\n+    /// assert_eq!(s.len(), 0);\n+    ///\n+    /// // These are all done without reallocating...\n+    /// let cap = s.capacity();\n+    /// for i in 0..10 {\n+    ///     s.push('a');\n+    /// }\n+    ///\n+    /// assert_eq!(s.capacity(), cap);\n+    ///\n+    /// // ...but this may make the vector reallocate\n+    /// s.push('a');\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9153d624268ed6d36d2c48f4701d779538a271ec", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -242,6 +242,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![allow(unused_mut)]\n     /// let mut vec: Vec<i32> = Vec::new();\n     /// ```\n     #[inline]"}, {"sha": "59b05c21d80050b6902f7cb2d768241683cc8122", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -76,6 +76,7 @@\n //! a trait method that was originally defined to take `&self`.\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! use std::cell::RefCell;\n //!\n //! struct Graph {\n@@ -125,6 +126,7 @@\n //! }\n //!\n //! struct RcBox<T> {\n+//! # #[allow(dead_code)]\n //!     value: T,\n //!     refcount: Cell<usize>\n //! }\n@@ -776,6 +778,7 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n /// use std::cell::UnsafeCell;\n /// use std::marker::Sync;\n ///\n+/// # #[allow(dead_code)]\n /// struct NotThreadSafe<T> {\n ///     value: UnsafeCell<T>,\n /// }"}, {"sha": "5458a7b9c38b01b24ba479a71c29f617e965c924", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -140,8 +140,6 @@ impl Ordering {\n     /// This method can be used to reverse a comparison:\n     ///\n     /// ```\n-    /// use std::cmp::Ordering;\n-    ///\n     /// let mut data: &mut [_] = &mut [2, 10, 5, 8];\n     ///\n     /// // sort the array from largest to smallest.\n@@ -263,8 +261,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::cmp::Ordering;\n-    ///\n     /// let result = 1.0 < 2.0;\n     /// assert_eq!(result, true);\n     ///"}, {"sha": "12c4a5ca200ad3b1c7271cc6baff8878764800b0", "filename": "src/libcore/default.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -15,6 +15,7 @@\n //! that define a set of options:\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! struct SomeOptions {\n //!     foo: i32,\n //!     bar: f32,\n@@ -24,6 +25,7 @@\n //! How can we define some default values? You can use `Default`:\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! #[derive(Default)]\n //! struct SomeOptions {\n //!     foo: i32,\n@@ -40,6 +42,7 @@\n //! If you have your own type, you need to implement `Default` yourself:\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! enum Kind {\n //!     A,\n //!     B,\n@@ -66,6 +69,7 @@\n //! If you want to override a particular option, but still retain the other defaults:\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! # #[derive(Default)]\n //! # struct SomeOptions {\n //! #     foo: i32,\n@@ -88,6 +92,7 @@ use marker::Sized;\n /// # Examples\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// #[derive(Default)]\n /// struct SomeOptions {\n ///     foo: i32,\n@@ -114,6 +119,7 @@ pub trait Default: Sized {\n     /// Making your own:\n     ///\n     /// ```\n+    /// # #[allow(dead_code)]\n     /// enum Kind {\n     ///     A,\n     ///     B,"}, {"sha": "0899dc28848195b844aab0e736f7442bbd84324a", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -45,6 +45,7 @@\n //!\n //! struct Person {\n //!     id: u32,\n+//! # #[allow(dead_code)]\n //!     name: String,\n //!     phone: u64,\n //! }"}, {"sha": "a094bcd0192d24664ae01e7b40e7fef6afcc045d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -334,6 +334,7 @@ extern \"rust-intrinsic\" {\n     /// use std::mem;\n     /// use std::ptr;\n     ///\n+    /// # #[allow(dead_code)]\n     /// fn swap<T>(x: &mut T, y: &mut T) {\n     ///     unsafe {\n     ///         // Give ourselves some scratch space to work with\n@@ -372,6 +373,7 @@ extern \"rust-intrinsic\" {\n     /// ```\n     /// use std::ptr;\n     ///\n+    /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst = Vec::with_capacity(elts);\n     ///     dst.set_len(elts);"}, {"sha": "8558927e4acae35e9eb2108f3a67eda51f21ce02", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -241,6 +241,7 @@\n //! method calls a closure on each element it iterates over:\n //!\n //! ```\n+//! # #![allow(unused_must_use)]\n //! let v = vec![1, 2, 3, 4, 5];\n //! v.iter().map(|x| println!(\"{}\", x));\n //! ```\n@@ -419,7 +420,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// // an infinite iterator has no upper bound\n-    /// let iter = (0..);\n+    /// let iter = 0..;\n     ///\n     /// assert_eq!((0, None), iter.size_hint());\n     /// ```\n@@ -709,6 +710,7 @@ pub trait Iterator {\n     /// If you're doing some sort of side effect, prefer [`for`] to `map()`:\n     ///\n     /// ```\n+    /// # #![allow(unused_must_use)]\n     /// // don't do this:\n     /// (0..5).map(|x| println!(\"{}\", x));\n     ///\n@@ -2695,7 +2697,7 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n ///\n /// ```\n /// // a finite range knows exactly how many times it will iterate\n-/// let five = (0..5);\n+/// let five = 0..5;\n ///\n /// assert_eq!(5, five.len());\n /// ```\n@@ -2761,7 +2763,7 @@ pub trait ExactSizeIterator: Iterator {\n     ///\n     /// ```\n     /// // a finite range knows exactly how many times it will iterate\n-    /// let five = (0..5);\n+    /// let five = 0..5;\n     ///\n     /// assert_eq!(5, five.len());\n     /// ```"}, {"sha": "df7b7c437c3cc44ca3e8fd56c008aa43bed5b94b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -60,7 +60,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n-#![doc(test(no_crate_inject))]\n+#![doc(test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n \n #![no_core]\n #![allow(raw_pointer_derive)]"}, {"sha": "bc8656b32b8e4e336b29bc4b2d022689cebec347", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -247,6 +247,7 @@ macro_rules! writeln {\n /// Match arms:\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// fn foo(x: Option<i32>) {\n ///     match x {\n ///         Some(n) if n >= 0 => println!(\"Some(Non-negative)\"),\n@@ -260,6 +261,7 @@ macro_rules! writeln {\n /// Iterators:\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n ///     for i in 0.. {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }"}, {"sha": "6e6ae6185278711079a75a1d4b0a87e81cc3e933", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -42,6 +42,7 @@ impl<T> !Send for *mut T { }\n /// `?Sized` can be used to remove this bound if it is not appropriate.\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// struct Foo<T>(T);\n /// struct Bar<T: ?Sized>(T);\n ///\n@@ -106,6 +107,7 @@ pub trait Unsize<T: ?Sized> {\n /// `struct` can be `Copy`:\n ///\n /// ```\n+/// # #[allow(dead_code)]\n /// struct Point {\n ///    x: i32,\n ///    y: i32,\n@@ -115,6 +117,7 @@ pub trait Unsize<T: ?Sized> {\n /// A `struct` can be `Copy`, and `i32` is `Copy`, so therefore, `Point` is eligible to be `Copy`.\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// # struct Point;\n /// struct PointList {\n ///     points: Vec<Point>,\n@@ -303,6 +306,7 @@ macro_rules! impls{\n /// ```\n /// use std::marker::PhantomData;\n ///\n+/// # #[allow(dead_code)]\n /// struct Slice<'a, T:'a> {\n ///     start: *const T,\n ///     end: *const T,\n@@ -323,6 +327,7 @@ macro_rules! impls{\n /// mismatches by enforcing types in the method implementations:\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// # trait ResType { fn foo(&self); }\n /// # struct ParamType;\n /// # mod foreign_lib {\n@@ -393,6 +398,8 @@ mod impls {\n /// #![feature(reflect_marker)]\n /// use std::marker::Reflect;\n /// use std::any::Any;\n+///\n+/// # #[allow(dead_code)]\n /// fn foo<T:Reflect+'static>(x: &T) {\n ///     let any: &Any = x;\n ///     if any.is::<u32>() { println!(\"u32\"); }"}, {"sha": "2f01ea383400a1d83ff6b4beabf4cfaa34dad754", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -92,6 +92,7 @@ pub use intrinsics::transmute;\n /// use std::mem;\n /// use std::ptr;\n ///\n+/// # #[allow(dead_code)]\n /// fn swap<T>(x: &mut T, y: &mut T) {\n ///     unsafe {\n ///         // Give ourselves some scratch space to work with\n@@ -151,6 +152,7 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// # Examples\n ///\n /// ```\n+/// # #![allow(deprecated)]\n /// use std::mem;\n ///\n /// assert_eq!(4, mem::min_align_of::<i32>());\n@@ -167,6 +169,7 @@ pub fn min_align_of<T>() -> usize {\n /// # Examples\n ///\n /// ```\n+/// # #![allow(deprecated)]\n /// use std::mem;\n ///\n /// assert_eq!(4, mem::min_align_of_val(&5i32));\n@@ -414,6 +417,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// `self`, allowing it to be returned:\n ///\n /// ```\n+/// # #![allow(dead_code)]\n /// use std::mem;\n /// # struct Buffer<T> { buf: Vec<T> }\n /// impl<T> Buffer<T> {"}, {"sha": "7ad49eef8f711aa09ec78545863556c6f974dcf9", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -947,6 +947,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo += Foo;\n@@ -996,6 +997,7 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo -= Foo;\n@@ -1045,6 +1047,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo *= Foo;\n@@ -1094,6 +1097,7 @@ mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo /= Foo;\n@@ -1143,6 +1147,7 @@ div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo %= Foo;\n@@ -1192,6 +1197,7 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo &= Foo;\n@@ -1241,6 +1247,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo |= Foo;\n@@ -1290,6 +1297,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo ^= Foo;\n@@ -1339,6 +1347,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo <<= Foo;\n@@ -1407,6 +1416,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     }\n /// }\n ///\n+/// # #[allow(unused_assignments)]\n /// fn main() {\n ///     let mut foo = Foo;\n ///     foo >>= Foo;"}, {"sha": "7a3b83f68d0d881535784fc02f5734b208ed441a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -275,6 +275,7 @@ impl<T> Option<T> {\n     ///\n     /// ```\n     /// #![feature(as_slice)]\n+    /// # #![allow(deprecated)]\n     ///\n     /// let mut x = Some(\"Diamonds\");\n     /// {"}, {"sha": "6e1f120a1db4826affa0dabbf9ac023c1d2afe5f", "filename": "src/libcore/result.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -16,6 +16,7 @@\n //! and containing an error value.\n //!\n //! ```\n+//! # #[allow(dead_code)]\n //! enum Result<T, E> {\n //!    Ok(T),\n //!    Err(E)\n@@ -104,6 +105,7 @@\n //! something like this:\n //!\n //! ```no_run\n+//! # #![allow(unused_must_use)] // \\o/\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //!\n@@ -143,6 +145,7 @@\n //! # use std::fs::File;\n //! # use std::io::prelude::*;\n //! # use std::io;\n+//! # #[allow(dead_code)]\n //! fn write_message() -> io::Result<()> {\n //!     let mut file = try!(File::create(\"valuable_data.txt\"));\n //!     try!(file.write_all(b\"important message\"));\n@@ -160,6 +163,7 @@\n //! It replaces this:\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //! use std::io;\n@@ -189,6 +193,7 @@\n //! With this:\n //!\n //! ```\n+//! # #![allow(dead_code)]\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //! use std::io;\n@@ -422,6 +427,7 @@ impl<T, E> Result<T, E> {\n     ///\n     /// ```\n     /// #![feature(as_slice)]\n+    /// # #![allow(deprecated)]\n     ///\n     /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {"}, {"sha": "7954bc3a0bf53e50046a4ad63f68eee94a757585", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -142,8 +142,6 @@ impl Utf8Error {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(utf8_error)]\n-    ///\n     /// use std::str;\n     ///\n     /// // some invalid bytes, in a vector"}, {"sha": "513379b6558441003ae778625bb9c126f7246ea3", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -23,7 +23,8 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       test(attr(deny(warnings))))]\n \n #![feature(libc)]\n #![feature(staged_api)]"}, {"sha": "dc69f38e4e7d0870f1259e1bb943ab189343ec41", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -24,7 +24,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       test(attr(deny(warnings))))]\n \n #![feature(staged_api)]\n #![feature(unicode)]"}, {"sha": "f49451f827d62306b1e95a163ddbafef9d1745fa", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -30,9 +30,11 @@\n //! file name following `-o`, and accepts both `-h` and `--help` as optional flags.\n //!\n //! ```{.rust}\n+//! #![feature(rustc_private)]\n+//!\n //! extern crate getopts;\n //! use getopts::{optopt,optflag,getopts,OptGroup,usage};\n-//! use std::os;\n+//! use std::env;\n //!\n //! fn do_work(inp: &str, out: Option<String>) {\n //!     println!(\"{}\", inp);\n@@ -44,34 +46,34 @@\n //!\n //! fn print_usage(program: &str, opts: &[OptGroup]) {\n //!     let brief = format!(\"Usage: {} [options]\", program);\n-//!     print!(\"{}\", usage(brief, opts));\n+//!     print!(\"{}\", usage(&brief, opts));\n //! }\n //!\n //! fn main() {\n-//!     let args: Vec<String> = os::args();\n+//!     let args: Vec<String> = env::args().collect();\n //!\n //!     let program = args[0].clone();\n //!\n //!     let opts = &[\n //!         optopt(\"o\", \"\", \"set output file name\", \"NAME\"),\n //!         optflag(\"h\", \"help\", \"print this help menu\")\n //!     ];\n-//!     let matches = match getopts(args[1..], opts) {\n+//!     let matches = match getopts(&args[1..], opts) {\n //!         Ok(m) => { m }\n //!         Err(f) => { panic!(f.to_string()) }\n //!     };\n //!     if matches.opt_present(\"h\") {\n-//!         print_usage(program, opts);\n+//!         print_usage(&program, opts);\n //!         return;\n //!     }\n //!     let output = matches.opt_str(\"o\");\n //!     let input = if !matches.free.is_empty() {\n //!         matches.free[0].clone()\n //!     } else {\n-//!         print_usage(program, opts);\n+//!         print_usage(&program, opts);\n //!         return;\n //!     };\n-//!     do_work(input, output);\n+//!     do_work(&input, output);\n //! }\n //! ```\n \n@@ -88,7 +90,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       test(attr(deny(warnings))))]\n \n #![deny(missing_docs)]\n #![feature(staged_api)]"}, {"sha": "1fb54ed9071ab6b6939d79381b93889945d5cd58", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -47,7 +47,7 @@\n //! which is cyclic.\n //!\n //! ```rust\n-//! #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private, into_cow)]\n //!\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n@@ -150,9 +150,8 @@\n //! entity `&sube`).\n //!\n //! ```rust\n-//! #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private)]\n //!\n-//! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n //!\n@@ -174,10 +173,10 @@\n //!         dot::Id::new(format!(\"N{}\", n)).unwrap()\n //!     }\n //!     fn node_label<'b>(&'b self, n: &Nd) -> dot::LabelText<'b> {\n-//!         dot::LabelText::LabelStr(self.nodes[*n].as_slice().into_cow())\n+//!         dot::LabelText::LabelStr(self.nodes[*n].into())\n //!     }\n //!     fn edge_label<'b>(&'b self, _: &Ed) -> dot::LabelText<'b> {\n-//!         dot::LabelText::LabelStr(\"&sube;\".into_cow())\n+//!         dot::LabelText::LabelStr(\"&sube;\".into())\n //!     }\n //! }\n //!\n@@ -209,9 +208,8 @@\n //! Hasse-diagram for the subsets of the set `{x, y}`.\n //!\n //! ```rust\n-//! #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private)]\n //!\n-//! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n //!\n@@ -234,10 +232,10 @@\n //!     }\n //!     fn node_label<'b>(&'b self, n: &Nd<'b>) -> dot::LabelText<'b> {\n //!         let &(i, _) = n;\n-//!         dot::LabelText::LabelStr(self.nodes[i].into_cow())\n+//!         dot::LabelText::LabelStr(self.nodes[i].into())\n //!     }\n //!     fn edge_label<'b>(&'b self, _: &Ed<'b>) -> dot::LabelText<'b> {\n-//!         dot::LabelText::LabelStr(\"&sube;\".into_cow())\n+//!         dot::LabelText::LabelStr(\"&sube;\".into())\n //!     }\n //! }\n //!\n@@ -283,7 +281,8 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       test(attr(allow(unused_variables), deny(warnings))))]\n \n #![feature(into_cow)]\n #![feature(str_escape)]"}, {"sha": "1de7ebfffdea28af1ed89028823eadc9d2170a5b", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -13,6 +13,7 @@\n //! # Examples\n //!\n //! ```\n+//! # #![feature(rustc_private)]\n //! #[macro_use] extern crate log;\n //!\n //! fn main() {\n@@ -167,7 +168,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       test(attr(deny(warnings))))]\n #![deny(missing_docs)]\n \n #![feature(box_syntax)]"}, {"sha": "803a2df9ccc8baff67d46d6a3b15db71c8d49602", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -19,6 +19,7 @@\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate log;\n ///\n /// fn main() {\n@@ -67,6 +68,7 @@ macro_rules! log {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate log;\n ///\n /// fn main() {\n@@ -92,6 +94,7 @@ macro_rules! error {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate log;\n ///\n /// fn main() {\n@@ -116,6 +119,7 @@ macro_rules! warn {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate log;\n ///\n /// fn main() {\n@@ -142,6 +146,7 @@ macro_rules! info {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate log;\n ///\n /// fn main() {\n@@ -165,9 +170,10 @@ macro_rules! debug {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate log;\n ///\n-/// struct Point { x: int, y: int }\n+/// struct Point { x: i32, y: i32 }\n /// fn some_expensive_computation() -> Point { Point { x: 1, y: 2 } }\n ///\n /// fn main() {"}, {"sha": "cf2118b45a471220df369249b1d7b4299cecee27", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -23,7 +23,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       test(attr(deny(warnings))))]\n #![no_std]\n #![staged_api]\n #![unstable(feature = \"rand\","}, {"sha": "a1b15cd9e6f11ebd28cbb9b43c4d1c9d8a9db439", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -121,7 +121,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       test(attr(deny(warnings))))]\n \n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "79ce8aacae815a6515e98617fe3959ee5f8bc96c", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -31,7 +31,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n-       test(no_crate_inject))]\n+       test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n \n #![feature(core_char_ext)]"}, {"sha": "57d96bf43719e7fe442e0a94ea6c0c30254e2ecb", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -190,6 +190,7 @@ impl<'a> Iterator for Utf16Items<'a> {\n ///\n /// ```\n /// #![feature(unicode, decode_utf16)]\n+/// # #![allow(deprecated)]\n ///\n /// extern crate rustc_unicode;\n ///"}, {"sha": "9e1e3c6a558055436dc2fa38cc25b8bc3c8cf84c", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -77,8 +77,9 @@\n //! serialization API, using the derived serialization code.\n //!\n //! ```rust\n-//! extern crate serialize;\n-//! use serialize::json;\n+//! # #![feature(rustc_private)]\n+//! extern crate serialize as rustc_serialize; // for the deriving below\n+//! use rustc_serialize::json;\n //!\n //! // Automatically generate `Decodable` and `Encodable` trait implementations\n //! #[derive(RustcDecodable, RustcEncodable)]\n@@ -111,6 +112,7 @@\n //! ### Simple example of `ToJson` usage\n //!\n //! ```rust\n+//! # #![feature(rustc_private)]\n //! extern crate serialize;\n //! use serialize::json::{self, ToJson, Json};\n //!\n@@ -150,6 +152,7 @@\n //! ### Verbose example of `ToJson` usage\n //!\n //! ```rust\n+//! # #![feature(rustc_private)]\n //! extern crate serialize;\n //! use std::collections::BTreeMap;\n //! use serialize::json::{self, Json, ToJson};\n@@ -185,7 +188,7 @@\n //!     let json_str: String = json_obj.to_string();\n //!\n //!     // Deserialize like before\n-//!     let decoded: TestStruct = json::decode(json_str)).unwrap();\n+//!     let decoded: TestStruct = json::decode(&json_str).unwrap();\n //! }\n //! ```\n "}, {"sha": "4a766f14531374865b8aa505f9b772ace3bebcec", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -26,7 +26,8 @@ Core encoding and decoding interfaces.\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       test(attr(allow(unused_variables), deny(warnings))))]\n \n #![feature(box_syntax)]\n #![feature(collections)]"}, {"sha": "1f34af617d588e409501a8b85cb7012c00f82c4a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -908,13 +908,15 @@ pub enum Expr_ {\n /// separately. `position` represents the index of the associated\n /// item qualified with this Self type.\n ///\n-///     <Vec<T> as a::b::Trait>::AssociatedItem\n-///      ^~~~~     ~~~~~~~~~~~~~~^\n-///      ty        position = 3\n+/// ```ignore\n+/// <Vec<T> as a::b::Trait>::AssociatedItem\n+///  ^~~~~     ~~~~~~~~~~~~~~^\n+///  ty        position = 3\n ///\n-///     <Vec<T>>::AssociatedItem\n-///      ^~~~~    ^\n-///      ty       position = 0\n+/// <Vec<T>>::AssociatedItem\n+///  ^~~~~    ^\n+///  ty       position = 0\n+/// ```\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct QSelf {\n     pub ty: P<Ty>,"}, {"sha": "5a0fc4fda0ccac065a80812dc6b820125e4abb3d", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -54,6 +54,7 @@\n //! following snippet\n //!\n //! ```rust\n+//! # #![allow(dead_code)]\n //! struct A { x : i32 }\n //!\n //! struct B(i32);\n@@ -88,7 +89,7 @@\n //!\n //! ```rust\n //! trait PartialEq {\n-//!     fn eq(&self, other: &Self);\n+//!     fn eq(&self, other: &Self) -> bool;\n //! }\n //! impl PartialEq for i32 {\n //!     fn eq(&self, other: &i32) -> bool {\n@@ -905,7 +906,7 @@ impl<'a> MethodDef<'a> {\n         })\n     }\n \n-    /// ```\n+    /// ```ignore\n     /// #[derive(PartialEq)]\n     /// struct A { x: i32, y: i32 }\n     ///\n@@ -1010,7 +1011,7 @@ impl<'a> MethodDef<'a> {\n                                       &StaticStruct(struct_def, summary))\n     }\n \n-    /// ```\n+    /// ```ignore\n     /// #[derive(PartialEq)]\n     /// enum A {\n     ///     A1,\n@@ -1596,7 +1597,7 @@ pub fn cs_fold<F>(use_foldl: bool,\n /// Call the method that is being derived on all the fields, and then\n /// process the collected results. i.e.\n ///\n-/// ```\n+/// ```ignore\n /// f(cx, span, vec![self_1.method(__arg_1_1, __arg_2_1),\n ///                  self_2.method(__arg_1_2, __arg_2_2)])\n /// ```"}, {"sha": "af0e7ce5c8d368a2030de2ac301d52ed1ccb2064", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -77,9 +77,10 @@ struct Context<'a, 'b:'a> {\n /// expressions.\n ///\n /// If parsing succeeds, the return value is:\n-///\n-///     Some((fmtstr, unnamed arguments, ordering of named arguments,\n-///           named arguments))\n+/// ```ignore\n+/// Some((fmtstr, unnamed arguments, ordering of named arguments,\n+///       named arguments))\n+/// ```\n fn parse_args(ecx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n               -> Option<(P<ast::Expr>, Vec<P<ast::Expr>>, Vec<String>,\n                          HashMap<String, P<ast::Expr>>)> {"}, {"sha": "0cd27d1b0ccc38f037cb956450484fee7101e6bc", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -23,7 +23,8 @@\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       test(attr(deny(warnings))))]\n \n #![feature(associated_consts)]\n #![feature(drain)]"}, {"sha": "1e38eebec5d635f86e7cd3d35dae16f2765e2129", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -3965,7 +3965,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses an optional `where` clause and places it in `generics`.\n     ///\n-    /// ```\n+    /// ```ignore\n     /// where T : Trait<U, V> + 'b, 'a : 'b\n     /// ```\n     pub fn parse_where_clause(&mut self) -> PResult<ast::WhereClause> {"}, {"sha": "cbbd5289a5a2d5415a846ebfa050725f96aeac85", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -11,8 +11,10 @@\n //! This pretty-printer is a direct reimplementation of Philip Karlton's\n //! Mesa pretty-printer, as described in appendix A of\n //!\n-//!     STAN-CS-79-770: \"Pretty Printing\", by Derek C. Oppen.\n-//!     Stanford Department of Computer Science, 1979.\n+//! ````ignore\n+//! STAN-CS-79-770: \"Pretty Printing\", by Derek C. Oppen.\n+//! Stanford Department of Computer Science, 1979.\n+//! ````\n //!\n //! The algorithm's aim is to break a stream into as few lines as possible\n //! while respecting the indentation-consistency requirements of the enclosing"}, {"sha": "99bbd951766c68183712ad0570bf4203096df441", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -53,7 +53,8 @@\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_playground_url = \"https://play.rust-lang.org/\",\n+       test(attr(deny(warnings))))]\n #![deny(missing_docs)]\n \n #![feature(box_syntax)]"}, {"sha": "89442fe1096fe6228e974a2655fb997a20d58383", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9c9513cf18e39715d6b58ce1912dc1c4dfc206/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8c9c9513cf18e39715d6b58ce1912dc1c4dfc206", "patch": "@@ -32,7 +32,8 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       test(attr(deny(warnings))))]\n \n #![feature(asm)]\n #![feature(box_syntax)]"}]}