{"sha": "866a5ee2999ae7cb96de58a77647509d090456ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NmE1ZWUyOTk5YWU3Y2I5NmRlNThhNzc2NDc1MDlkMDkwNDU2ZWU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-19T20:28:20Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T12:16:02Z"}, "message": "Fix fallout from correct stability handling in UFCS.", "tree": {"sha": "1a4ac2a7c96c16f63a7391a44de842ad57b04e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a4ac2a7c96c16f63a7391a44de842ad57b04e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/866a5ee2999ae7cb96de58a77647509d090456ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/866a5ee2999ae7cb96de58a77647509d090456ee", "html_url": "https://github.com/rust-lang/rust/commit/866a5ee2999ae7cb96de58a77647509d090456ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/866a5ee2999ae7cb96de58a77647509d090456ee/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "923616e1882bdec30f491306d80f5db4162a03d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/923616e1882bdec30f491306d80f5db4162a03d7", "html_url": "https://github.com/rust-lang/rust/commit/923616e1882bdec30f491306d80f5db4162a03d7"}], "stats": {"total": 154, "additions": 145, "deletions": 9}, "files": [{"sha": "4b2b125fc99f2c233585d14120d4c302a5055bb3", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/866a5ee2999ae7cb96de58a77647509d090456ee/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866a5ee2999ae7cb96de58a77647509d090456ee/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=866a5ee2999ae7cb96de58a77647509d090456ee", "patch": "@@ -790,7 +790,7 @@ pub trait SliceExt {\n     fn ends_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n     /// Convert `self` into a vector without clones or allocation.\n-    #[unstable(feature = \"collections\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_vec(self: Box<Self>) -> Vec<Self::Item>;\n }\n "}, {"sha": "436a826687e1368616c83aee88ebda2e6bf06166", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866a5ee2999ae7cb96de58a77647509d090456ee/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866a5ee2999ae7cb96de58a77647509d090456ee/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=866a5ee2999ae7cb96de58a77647509d090456ee", "patch": "@@ -17,7 +17,6 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(core)]\n #![feature(int_uint)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "90792848855721b89f39ed4342a9ab3090685411", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 144, "deletions": 7, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/866a5ee2999ae7cb96de58a77647509d090456ee/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866a5ee2999ae7cb96de58a77647509d090456ee/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=866a5ee2999ae7cb96de58a77647509d090456ee", "patch": "@@ -29,45 +29,104 @@ mod cross_crate {\n     use lint_stability::*;\n \n     fn test() {\n+        type Foo = MethodTester;\n         let foo = MethodTester;\n \n         deprecated(); //~ ERROR use of deprecated item\n         foo.method_deprecated(); //~ ERROR use of deprecated item\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n \n         deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n \n         deprecated_unstable(); //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n         foo.method_deprecated_unstable(); //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n+        Foo::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        <Foo>::method_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n+        Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n \n         deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n         //~^ WARNING use of unstable library feature\n         foo.method_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n         //~^ WARNING use of unstable library feature\n+        Foo::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+        <Foo>::method_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n         //~^ WARNING use of unstable library feature\n+        Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n \n         unstable(); //~ WARNING use of unstable library feature\n         foo.method_unstable(); //~ WARNING use of unstable library feature\n+        Foo::method_unstable(&foo); //~ WARNING use of unstable library feature\n+        <Foo>::method_unstable(&foo); //~ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n+        Trait::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        <Foo as Trait>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n \n-        unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n-        foo.method_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n-        foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n+        unstable_text();\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        foo.method_unstable_text();\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        Foo::method_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        <Foo>::method_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        foo.trait_unstable_text();\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        Trait::trait_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        <Foo>::trait_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n \n         stable();\n         foo.method_stable();\n+        Foo::method_stable(&foo);\n+        <Foo>::method_stable(&foo);\n         foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n \n         stable_text();\n         foo.method_stable_text();\n+        Foo::method_stable_text(&foo);\n+        <Foo>::method_stable_text(&foo);\n         foo.trait_stable_text();\n+        Trait::trait_stable_text(&foo);\n+        <Foo>::trait_stable_text(&foo);\n+        <Foo as Trait>::trait_stable_text(&foo);\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n         let _ = DeprecatedUnstableStruct { i: 0 }; //~ ERROR use of deprecated item\n@@ -104,16 +163,47 @@ mod cross_crate {\n         macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n     }\n \n-    fn test_method_param<F: Trait>(foo: F) {\n+    fn test_method_param<Foo: Trait>(foo: Foo) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n         //~^ WARNING use of unstable library feature\n+        Trait::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        <Foo>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n         //~^ WARNING use of unstable library feature\n+        Trait::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n-        foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n+        Trait::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        <Foo>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        <Foo as Trait>::trait_unstable(&foo); //~ WARNING use of unstable library feature\n+        foo.trait_unstable_text();\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        Trait::trait_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        <Foo>::trait_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n+        <Foo as Trait>::trait_unstable_text(&foo);\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n         foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n     }\n \n     fn test_method_object(foo: &Trait) {\n@@ -124,7 +214,8 @@ mod cross_crate {\n         foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n         //~^ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n-        foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n+        foo.trait_unstable_text();\n+        //~^ WARNING use of unstable library feature 'test_feature': text\n         foo.trait_stable();\n     }\n \n@@ -264,31 +355,62 @@ mod this_crate {\n         // errors, because other stability attributes now have meaning\n         // only *across* crates, not within a single crate.\n \n+        type Foo = MethodTester;\n         let foo = MethodTester;\n \n         deprecated(); //~ ERROR use of deprecated item\n         foo.method_deprecated(); //~ ERROR use of deprecated item\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated item\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n \n         deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n \n         unstable();\n         foo.method_unstable();\n+        Foo::method_unstable(&foo);\n+        <Foo>::method_unstable(&foo);\n         foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n \n         unstable_text();\n         foo.method_unstable_text();\n+        Foo::method_unstable_text(&foo);\n+        <Foo>::method_unstable_text(&foo);\n         foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n \n         stable();\n         foo.method_stable();\n+        Foo::method_stable(&foo);\n+        <Foo>::method_stable(&foo);\n         foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n \n         stable_text();\n         foo.method_stable_text();\n+        Foo::method_stable_text(&foo);\n+        <Foo>::method_stable_text(&foo);\n         foo.trait_stable_text();\n+        Trait::trait_stable_text(&foo);\n+        <Foo>::trait_stable_text(&foo);\n+        <Foo as Trait>::trait_stable_text(&foo);\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n         let _ = UnstableStruct { i: 0 };\n@@ -307,12 +429,27 @@ mod this_crate {\n         let _ = StableTupleStruct (1);\n     }\n \n-    fn test_method_param<F: Trait>(foo: F) {\n+    fn test_method_param<Foo: Trait>(foo: Foo) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item: text\n         foo.trait_unstable();\n+        Trait::trait_unstable(&foo);\n+        <Foo>::trait_unstable(&foo);\n+        <Foo as Trait>::trait_unstable(&foo);\n         foo.trait_unstable_text();\n+        Trait::trait_unstable_text(&foo);\n+        <Foo>::trait_unstable_text(&foo);\n+        <Foo as Trait>::trait_unstable_text(&foo);\n         foo.trait_stable();\n+        Trait::trait_stable(&foo);\n+        <Foo>::trait_stable(&foo);\n+        <Foo as Trait>::trait_stable(&foo);\n     }\n \n     fn test_method_object(foo: &Trait) {"}]}