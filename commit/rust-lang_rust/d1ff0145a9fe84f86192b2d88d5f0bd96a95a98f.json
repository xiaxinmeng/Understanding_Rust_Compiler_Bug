{"sha": "d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZmYwMTQ1YTlmZTg0Zjg2MTkyYjJkODhkNWYwYmQ5NmE5NWE5OGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-24T13:47:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-24T13:47:05Z"}, "message": "Fix tests", "tree": {"sha": "71e6c24fd83848afeef9e5c9ee3de164da26452d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71e6c24fd83848afeef9e5c9ee3de164da26452d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f", "html_url": "https://github.com/rust-lang/rust/commit/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "733956617e53027fa27968f165a90422d49673b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/733956617e53027fa27968f165a90422d49673b0", "html_url": "https://github.com/rust-lang/rust/commit/733956617e53027fa27968f165a90422d49673b0"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "6e7e47199c88291aeb43729654798dfd49e260e1", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=d1ff0145a9fe84f86192b2d88d5f0bd96a95a98f", "patch": "@@ -70,10 +70,10 @@ fn runnable_fn(\n     let kind = if name_string == \"main\" {\n         RunnableKind::Bin\n     } else {\n-        let test_id = if let Some(module) = sema.to_def(&fn_def).map(|def| def.module(sema.db)) {\n-            let def = sema.to_def(&fn_def)?;\n-            let impl_trait_name =\n-                def.as_assoc_item(sema.db).and_then(|assoc_item| {\n+        let test_id = match sema.to_def(&fn_def).map(|def| def.module(sema.db)) {\n+            Some(module) => {\n+                let def = sema.to_def(&fn_def)?;\n+                let impl_trait_name = def.as_assoc_item(sema.db).and_then(|assoc_item| {\n                     match assoc_item.container(sema.db) {\n                         hir::AssocItemContainer::Trait(trait_item) => {\n                             Some(trait_item.name(sema.db).to_string())\n@@ -85,25 +85,25 @@ fn runnable_fn(\n                     }\n                 });\n \n-            let path_iter = module\n-                .path_to_root(sema.db)\n-                .into_iter()\n-                .rev()\n-                .filter_map(|it| it.name(sema.db))\n-                .map(|name| name.to_string());\n-\n-            let path = if let Some(impl_trait_name) = impl_trait_name {\n-                path_iter\n-                    .chain(std::iter::once(impl_trait_name))\n-                    .chain(std::iter::once(name_string))\n-                    .join(\"::\")\n-            } else {\n-                path_iter.chain(std::iter::once(name_string)).join(\"::\")\n-            };\n-\n-            TestId::Path(path)\n-        } else {\n-            TestId::Name(name_string)\n+                let path_iter = module\n+                    .path_to_root(sema.db)\n+                    .into_iter()\n+                    .rev()\n+                    .filter_map(|it| it.name(sema.db))\n+                    .map(|name| name.to_string());\n+\n+                let path = if let Some(impl_trait_name) = impl_trait_name {\n+                    path_iter\n+                        .chain(std::iter::once(impl_trait_name))\n+                        .chain(std::iter::once(name_string))\n+                        .join(\"::\")\n+                } else {\n+                    path_iter.chain(std::iter::once(name_string)).join(\"::\")\n+                };\n+\n+                TestId::Path(path)\n+            }\n+            None => TestId::Name(name_string),\n         };\n \n         if has_test_related_attribute(&fn_def) {\n@@ -472,7 +472,7 @@ mod tests {\n             Runnable {\n                 range: 1..58,\n                 kind: Test {\n-                    test_id: Name(\n+                    test_id: Path(\n                         \"test_foo1\",\n                     ),\n                     attr: TestAttr {\n@@ -509,7 +509,7 @@ mod tests {\n             Runnable {\n                 range: 1..80,\n                 kind: Test {\n-                    test_id: Name(\n+                    test_id: Path(\n                         \"test_foo1\",\n                     ),\n                     attr: TestAttr {"}]}