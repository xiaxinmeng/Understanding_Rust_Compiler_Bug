{"sha": "10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZTQ3ZjViN2I1OGUxNDEzZGRjN2NiYjMxNjQxMzhjMTVlOTY4NGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-22T21:19:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T21:19:19Z"}, "message": "Rollup merge of #71256 - cuviper:must_use_replace, r=estebank\n\nLint must_use on mem::replace\n\nThis adds a hint on `mem::replace`, \"if you don't need the old value,\nyou can just assign the new value directly\". This is in similar spirit\nto the `must_use` on `ManuallyDrop::take`.", "tree": {"sha": "943831e633e5f251207108aadea3a926f98f849b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943831e633e5f251207108aadea3a926f98f849b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoLTXCRBK7hj4Ov3rIwAAdHIIAKOAQxxAxvRE4MkGxBIXoqG9\nGEcESzngwTZPh8OsmkV0ZV3jpQ8ozpEXQMH3mqWd57A4l/EENFVCgyRxArrMGN4U\n5hr2iks3Ccffwg+TxvTXxkszP0UQsKoZKDtY6X8NMeKYoonoGgOGbZOWrmQmKL2S\na5qDR/paBcIX24w3JhWyPbsecJl/Mn0HMN8mRnJUSIcIlWfqerqzPMaxSGG6gpym\n2ph5OpwJSgqLWqdaRjhCekswTBdybUQ8hTL+Orom/4IsqMttZT5euHACtqSzee2Z\nk3IAZC+omgbrwaR8/g95ziT42pZS7wPSOPGzZG7yPraLvmrOb/NS4JEKn+FUGQQ=\n=jl/a\n-----END PGP SIGNATURE-----\n", "payload": "tree 943831e633e5f251207108aadea3a926f98f849b\nparent b2e36e6c2d229126b59e892c9147fbb68115d292\nparent 7fca9f809da1c65afa09e7d6e35b9599f87f03d3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587590359 +0200\ncommitter GitHub <noreply@github.com> 1587590359 +0200\n\nRollup merge of #71256 - cuviper:must_use_replace, r=estebank\n\nLint must_use on mem::replace\n\nThis adds a hint on `mem::replace`, \"if you don't need the old value,\nyou can just assign the new value directly\". This is in similar spirit\nto the `must_use` on `ManuallyDrop::take`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "html_url": "https://github.com/rust-lang/rust/commit/10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2e36e6c2d229126b59e892c9147fbb68115d292", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e36e6c2d229126b59e892c9147fbb68115d292", "html_url": "https://github.com/rust-lang/rust/commit/b2e36e6c2d229126b59e892c9147fbb68115d292"}, {"sha": "7fca9f809da1c65afa09e7d6e35b9599f87f03d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fca9f809da1c65afa09e7d6e35b9599f87f03d3", "html_url": "https://github.com/rust-lang/rust/commit/7fca9f809da1c65afa09e7d6e35b9599f87f03d3"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "549933ceeb6457f13813fbced35c37effe67a12f", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -709,6 +709,7 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// So this, for example, can only be done on types implementing `Unpin`:\n ///\n /// ```rust\n+/// # #![allow(unused_must_use)]\n /// use std::mem;\n /// use std::pin::Pin;\n ///"}, {"sha": "3fa2b7a2d042c3e2755612e117d8b54411ed054c", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -808,6 +808,7 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n     swap(dest, &mut src);\n     src"}, {"sha": "3f08fb79790fb2aa3f1525241ad57c24fc624390", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -547,8 +547,7 @@ impl<'a> Parser<'a> {\n                 // Rewind to before attempting to parse the type with generics, to recover\n                 // from situations like `x as usize < y` in which we first tried to parse\n                 // `usize < y` as a type with generic arguments.\n-                let parser_snapshot_after_type = self.clone();\n-                mem::replace(self, parser_snapshot_before_type);\n+                let parser_snapshot_after_type = mem::replace(self, parser_snapshot_before_type);\n \n                 match self.parse_path(PathStyle::Expr) {\n                     Ok(path) => {\n@@ -560,7 +559,7 @@ impl<'a> Parser<'a> {\n                                 // example because `parse_ty_no_plus` returns `Err` on keywords,\n                                 // but `parse_path` returns `Ok` on them due to error recovery.\n                                 // Return original error and parser state.\n-                                mem::replace(self, parser_snapshot_after_type);\n+                                *self = parser_snapshot_after_type;\n                                 return Err(type_err);\n                             }\n                         };\n@@ -601,7 +600,7 @@ impl<'a> Parser<'a> {\n                     Err(mut path_err) => {\n                         // Couldn't parse as a path, return original error and parser state.\n                         path_err.cancel();\n-                        mem::replace(self, parser_snapshot_after_type);\n+                        *self = parser_snapshot_after_type;\n                         return Err(type_err);\n                     }\n                 }"}, {"sha": "8e8f864728ce67463c925baad8cb2a6010271c23", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -105,7 +105,7 @@ impl<'a> Parser<'a> {\n                     }\n                     Err(mut err) => {\n                         err.cancel();\n-                        std::mem::replace(self, snapshot);\n+                        *self = snapshot;\n                         break;\n                     }\n                 }"}, {"sha": "e9f5f2c0deafcc76d338a3ae8a3f919b220289e0", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -1650,7 +1650,7 @@ impl<'a> Parser<'a> {\n                 // Recover from attempting to parse the argument as a type without pattern.\n                 Err(mut err) => {\n                     err.cancel();\n-                    mem::replace(self, parser_snapshot_before_ty);\n+                    *self = parser_snapshot_before_ty;\n                     self.recover_arg_parse()?\n                 }\n             }"}, {"sha": "e5d0ab247aa46ed4a9bcf0d61f3af0df96f11582", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -163,8 +163,8 @@ impl<'a> Parser<'a> {\n                 Ok(ty) => (None, Some(ty)),\n                 Err(mut err) => {\n                     // Rewind to before attempting to parse the type and continue parsing.\n-                    let parser_snapshot_after_type = self.clone();\n-                    mem::replace(self, parser_snapshot_before_type);\n+                    let parser_snapshot_after_type =\n+                        mem::replace(self, parser_snapshot_before_type);\n                     if let Ok(snip) = self.span_to_snippet(pat.span) {\n                         err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snip));\n                     }\n@@ -201,7 +201,7 @@ impl<'a> Parser<'a> {\n                 // Couldn't parse the type nor the initializer, only raise the type error and\n                 // return to the parser state before parsing the type as the initializer.\n                 // let x: <parse_error>;\n-                mem::replace(self, snapshot);\n+                *self = snapshot;\n                 return Err(ty_err);\n             }\n             (Err(err), None) => {"}, {"sha": "0d12bf08747fae3f88cac270dc504b1c14231289", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -26,7 +26,7 @@ use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::cell::Cell;\n-use std::mem::{replace, take};\n+use std::mem::take;\n \n use log::debug;\n \n@@ -371,7 +371,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         self.with(Scope::Body { id: body.id(), s: self.scope }, |_, this| {\n             this.visit_body(body);\n         });\n-        replace(&mut self.labels_in_fn, saved);\n+        self.labels_in_fn = saved;\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "094c468a6770e25f5d2bcc37e530d42b0cd08d3a", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -301,7 +301,7 @@ mod lazy {\n             // value (an aliasing violation). To avoid setting the \"I'm running a\n             // destructor\" flag we just use `mem::replace` which should sequence the\n             // operations a little differently and make this safe to call.\n-            mem::replace(&mut *ptr, Some(value));\n+            let _ = mem::replace(&mut *ptr, Some(value));\n \n             // After storing `Some` we want to get a reference to the contents of\n             // what we just stored. While we could use `unwrap` here and it should"}, {"sha": "19703904ece91923cde03c7a0b5321920edd03c3", "filename": "src/test/ui/imports/import-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Ftest%2Fui%2Fimports%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Ftest%2Fui%2Fimports%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-in-block.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -4,7 +4,7 @@\n pub fn main() {\n     use std::mem::replace;\n     let mut x = 5;\n-    replace(&mut x, 6);\n+    let _ = replace(&mut x, 6);\n     {\n         use std::mem::*;\n         let mut y = 6;"}, {"sha": "403cf970bcb0a52a49336c0ecf0dd2dcc2ff433a", "filename": "src/test/ui/issues/issue-23611-enum-swap-in-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Ftest%2Fui%2Fissues%2Fissue-23611-enum-swap-in-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e47f5b7b58e1413ddc7cbb3164138c15e9684e/src%2Ftest%2Fui%2Fissues%2Fissue-23611-enum-swap-in-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23611-enum-swap-in-drop.rs?ref=10e47f5b7b58e1413ddc7cbb3164138c15e9684e", "patch": "@@ -153,6 +153,7 @@ impl<'a> Drop for E<'a> {\n             }\n         };\n \n+        #[allow(unused_must_use)]\n         if do_drop {\n             mem::replace(self, E::A(GaspA(f_a, 0xA3A0, log, D::new(\"drop\", 6, log)), true));\n         }"}]}