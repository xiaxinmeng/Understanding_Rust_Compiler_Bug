{"sha": "ea9db66c50f3e855f7c96e7ca244998e439c541f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOWRiNjZjNTBmM2U4NTVmN2M5NmU3Y2EyNDQ5OThlNDM5YzU0MWY=", "commit": {"author": {"name": "Nick Desaulniers", "email": "ndesaulniers@mozilla.com", "date": "2014-01-17T22:50:54Z"}, "committer": {"name": "Nick Desaulniers", "email": "ndesaulniers@mozilla.com", "date": "2014-01-28T01:06:11Z"}, "message": "can borrow mut in proc Fixes #10617", "tree": {"sha": "3b37797fbb718fb1b00d9f8194841929881e790b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b37797fbb718fb1b00d9f8194841929881e790b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea9db66c50f3e855f7c96e7ca244998e439c541f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea9db66c50f3e855f7c96e7ca244998e439c541f", "html_url": "https://github.com/rust-lang/rust/commit/ea9db66c50f3e855f7c96e7ca244998e439c541f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea9db66c50f3e855f7c96e7ca244998e439c541f/comments", "author": null, "committer": null, "parents": [{"sha": "4176343073d0b28380b478fea941913567ebdd5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4176343073d0b28380b478fea941913567ebdd5c", "html_url": "https://github.com/rust-lang/rust/commit/4176343073d0b28380b478fea941913567ebdd5c"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "880074256c02b2086d898044190d7e00a6d567bd", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea9db66c50f3e855f7c96e7ca244998e439c541f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9db66c50f3e855f7c96e7ca244998e439c541f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=ea9db66c50f3e855f7c96e7ca244998e439c541f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -184,9 +184,6 @@ fn with_appropriate_checker(cx: &Context,\n         let id = ast_util::def_id_of_def(fv.def).node;\n         let var_t = ty::node_id_to_type(cx.tcx, id);\n \n-        // check that only immutable variables are implicitly copied in\n-        check_imm_free_var(cx, fv.def, fv.span);\n-\n         check_freevar_bounds(cx, fv.span, var_t, bounds, None);\n     }\n \n@@ -447,23 +444,6 @@ pub fn check_trait_cast_bounds(cx: &Context, sp: Span, ty: ty::t,\n     });\n }\n \n-fn check_imm_free_var(cx: &Context, def: Def, sp: Span) {\n-    match def {\n-        DefLocal(_, BindByValue(MutMutable)) => {\n-            cx.tcx.sess.span_err(\n-                sp,\n-                \"mutable variables cannot be implicitly captured\");\n-        }\n-        DefLocal(..) | DefArg(..) | DefBinding(..) => { /* ok */ }\n-        DefUpvar(_, def1, _, _) => { check_imm_free_var(cx, *def1, sp); }\n-        _ => {\n-            cx.tcx.sess.span_bug(\n-                sp,\n-                format!(\"unknown def for free variable: {:?}\", def));\n-        }\n-    }\n-}\n-\n fn check_copy(cx: &Context, ty: ty::t, sp: Span, reason: &str) {\n     debug!(\"type_contents({})={}\",\n            ty_to_str(cx.tcx, ty),"}, {"sha": "e0c1d35b3bc60eb958f9a4e7be65a9acee3a297c", "filename": "src/test/run-pass/kindck-implicit-close-over-mut-var.rs", "status": "renamed", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ea9db66c50f3e855f7c96e7ca244998e439c541f/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9db66c50f3e855f7c96e7ca244998e439c541f/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs?ref=ea9db66c50f3e855f7c96e7ca244998e439c541f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -13,38 +13,41 @@ use std::task;\n fn user(_i: int) {}\n \n fn foo() {\n-    // Here, i is *moved* into the closure: Not actually OK\n+    // Here, i is *copied* into the proc (heap closure).\n+    // Requires allocation.  The proc's copy is not mutable.\n     let mut i = 0;\n     do task::spawn {\n-        user(i); //~ ERROR mutable variables cannot be implicitly captured\n+        user(i);\n+        println!(\"spawned {}\", i)\n     }\n+    i += 1;\n+    println!(\"original {}\", i)\n }\n \n fn bar() {\n-    // Here, i would be implicitly *copied* but it\n-    // is mutable: bad\n+    // Here, the original i has not been moved, only copied, so is still\n+    // mutable outside of the proc.\n     let mut i = 0;\n     while i < 10 {\n         do task::spawn {\n-            user(i); //~ ERROR mutable variables cannot be implicitly captured\n+            user(i);\n         }\n         i += 1;\n     }\n }\n \n fn car() {\n-    // Here, i is mutable, but *explicitly* shadowed copied:\n+    // Here, i must be shadowed in the proc to be mutable.\n     let mut i = 0;\n     while i < 10 {\n-        {\n-            let i = i;\n-            do task::spawn {\n-                user(i);\n-            }\n+        do task::spawn {\n+            let mut i = i;\n+            i += 1;\n+            user(i);\n         }\n         i += 1;\n     }\n }\n \n-fn main() {\n-}\n+pub fn main() {}\n+", "previous_filename": "src/test/compile-fail/kindck-implicit-close-over-mut-var.rs"}]}