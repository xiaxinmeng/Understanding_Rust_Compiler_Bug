{"sha": "96ba4af258aa60a64a9e08b12a48ddab070e3efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmE0YWYyNThhYTYwYTY0YTllMDhiMTJhNDhkZGFiMDcwZTNlZmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-24T11:38:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-29T08:05:23Z"}, "message": "Remove validation test cases; add retagging test case", "tree": {"sha": "a466bf277844a2cc195511782b8578d4c5b1e31b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a466bf277844a2cc195511782b8578d4c5b1e31b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ba4af258aa60a64a9e08b12a48ddab070e3efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ba4af258aa60a64a9e08b12a48ddab070e3efc", "html_url": "https://github.com/rust-lang/rust/commit/96ba4af258aa60a64a9e08b12a48ddab070e3efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ba4af258aa60a64a9e08b12a48ddab070e3efc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6", "html_url": "https://github.com/rust-lang/rust/commit/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6"}], "stats": {"total": 457, "additions": 107, "deletions": 350}, "files": [{"sha": "d299f0e3b12292522cffcf406941bc63a489663a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ba4af258aa60a64a9e08b12a48ddab070e3efc/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ba4af258aa60a64a9e08b12a48ddab070e3efc/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=96ba4af258aa60a64a9e08b12a48ddab070e3efc", "patch": "@@ -1822,7 +1822,7 @@ impl<'tcx> Debug for Statement<'tcx> {\n             // (reuse lifetime rendering policy from ppaux.)\n             EndRegion(ref ce) => write!(fmt, \"EndRegion({})\", ty::ReScope(*ce)),\n             Retag { fn_entry, ref place } =>\n-                write!(fmt, \"Retag({}{:?})\", if fn_entry { \"[fn entry]: \" } else { \"\" }, place),\n+                write!(fmt, \"Retag({}{:?})\", if fn_entry { \"[fn entry] \" } else { \"\" }, place),\n             StorageLive(ref place) => write!(fmt, \"StorageLive({:?})\", place),\n             StorageDead(ref place) => write!(fmt, \"StorageDead({:?})\", place),\n             SetDiscriminant {"}, {"sha": "9c013008ab272b2971531315e454e7c89b11be49", "filename": "src/test/mir-opt/retag.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/96ba4af258aa60a64a9e08b12a48ddab070e3efc/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ba4af258aa60a64a9e08b12a48ddab070e3efc/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=96ba4af258aa60a64a9e08b12a48ddab070e3efc", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats\n+\n+#![allow(unused)]\n+\n+struct Test(i32);\n+\n+impl Test {\n+    // Make sure we run the pass on a method, not just on bare functions.\n+    fn foo<'x>(&self, x: &'x mut i32) -> &'x mut i32 { x }\n+    fn foo_shr<'x>(&self, x: &'x i32) -> &'x i32 { x }\n+}\n+\n+fn main() {\n+    let mut x = 0;\n+    {\n+        let v = Test(0).foo(&mut x); // just making sure we do not panic when there is a tuple struct ctor\n+        let w = { v }; // assignment\n+        let _w = w; // reborrow\n+    }\n+\n+    // Also test closures\n+    let c: fn(&i32) -> &i32 = |x: &i32| -> &i32 { let _y = x; x };\n+    let _w = c(&x);\n+\n+    // need to call `foo_shr` or it doesn't even get generated\n+    Test(0).foo_shr(&0);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.{{impl}}-foo.EraseRegions.after.mir\n+//     bb0: {\n+//         Retag([fn entry] _1);\n+//         Retag([fn entry] _2);\n+//         ...\n+//         _0 = &mut (*_3);\n+//         ...\n+//         return;\n+//     }\n+// END rustc.{{impl}}-foo.EraseRegions.after.mir\n+// START rustc.{{impl}}-foo_shr.EraseRegions.after.mir\n+//     bb0: {\n+//         Retag([fn entry] _1);\n+//         Retag([fn entry] _2);\n+//         ...\n+//         _0 = _2;\n+//         Retag(_0);\n+//         ...\n+//         return;\n+//     }\n+// END rustc.{{impl}}-foo_shr.EraseRegions.after.mir\n+// START rustc.main.EraseRegions.after.mir\n+// fn main() -> () {\n+//     ...\n+//     bb0: {\n+//         ...\n+//         _3 = const Test::foo(move _4, move _6) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         Retag(_3);\n+//         ...\n+//         _9 = move _3;\n+//         Retag(_9);\n+//         _8 = &mut (*_9);\n+//         StorageDead(_9);\n+//         StorageLive(_10);\n+//         _10 = move _8;\n+//         Retag(_10);\n+//         ...\n+//         _13 = move _14(move _15) -> bb2;\n+//     }\n+//\n+//     bb2: {\n+//         Retag(_13);\n+//         ...\n+//     }\n+//     ...\n+// }\n+// END rustc.main.EraseRegions.after.mir\n+// START rustc.main-{{closure}}.EraseRegions.after.mir\n+// fn main::{{closure}}(_1: &[closure@NodeId(117)], _2: &i32) -> &i32 {\n+//     ...\n+//     bb0: {\n+//         Retag([fn entry] _1);\n+//         Retag([fn entry] _2);\n+//         StorageLive(_3);\n+//         _3 = _2;\n+//         Retag(_3);\n+//         _0 = _2;\n+//         Retag(_0);\n+//         StorageDead(_3);\n+//         return;\n+//     }\n+// }\n+// END rustc.main-{{closure}}.EraseRegions.after.mir"}, {"sha": "f1544968adb6a2135afe4b3486db2191fb787d44", "filename": "src/test/mir-opt/validate_1.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6", "patch": "@@ -1,76 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=1 -Z span_free_formats\n-\n-struct Test(i32);\n-\n-impl Test {\n-    // Make sure we run the pass on a method, not just on bare functions.\n-    fn foo(&self, _x: &mut i32) {}\n-}\n-\n-fn main() {\n-    let mut x = 0;\n-    Test(0).foo(&mut x); // just making sure we do not panic when there is a tuple struct ctor\n-\n-    // Also test closures\n-    let c = |x: &mut i32| { let y = &*x; *y };\n-    c(&mut x);\n-}\n-\n-// END RUST SOURCE\n-// START rustc.{{impl}}-foo.EraseRegions.after.mir\n-//     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId(0/0:5 ~ validate_1[317d]::{{impl}}[0]::foo[0]), BrAnon(0)) Test, _2: &ReFree(DefId(0/0:5 ~ validate_1[317d]::{{impl}}[0]::foo[0]), BrAnon(1)) mut i32]);\n-//         ...\n-//         return;\n-//     }\n-// END rustc.{{impl}}-foo.EraseRegions.after.mir\n-// START rustc.main.EraseRegions.after.mir\n-// fn main() -> () {\n-//     ...\n-//     bb0: {\n-//         ...\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(13)))), [_1: i32]);\n-//         _6 = &ReErased mut _1;\n-//         Validate(Acquire, [(*_6): i32/ReScope(Node(ItemLocalId(13)))]);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(13)))), [(*_6): i32/ReScope(Node(ItemLocalId(13)))]);\n-//         _5 = &ReErased mut (*_6);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(13)))]);\n-//         Validate(Release, [_2: (), _3: &ReScope(Node(ItemLocalId(13))) Test, _5: &ReScope(Node(ItemLocalId(13))) mut i32]);\n-//         _2 = const Test::foo(move _3, move _5) -> bb1;\n-//     }\n-//\n-//     bb1: {\n-//         Validate(Acquire, [_2: ()]);\n-//         EndRegion(ReScope(Node(ItemLocalId(13))));\n-//         ...\n-//         return;\n-//     }\n-// }\n-// END rustc.main.EraseRegions.after.mir\n-// START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}(_1: &ReErased [closure@NodeId(65)], _2: &ReErased mut i32) -> i32 {\n-//     ...\n-//     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(65)], _2: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n-//         StorageLive(_3);\n-//         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(31), first_statement_index: 0 })), [(*_2): i32]);\n-//         _3 = &ReErased (*_2);\n-//         Validate(Acquire, [(*_3): i32/ReScope(Remainder { block: ItemLocalId(31), first_statement_index: 0 }) (imm)]);\n-//         _0 = (*_3);\n-//         EndRegion(ReScope(Remainder { block: ItemLocalId(31), first_statement_index: 0 }));\n-//         StorageDead(_3);\n-//         return;\n-//     }\n-// }\n-// END rustc.main-{{closure}}.EraseRegions.after.mir"}, {"sha": "3776a11b3ab825ceb53ad5241d1bfdd3be2b83f0", "filename": "src/test/mir-opt/validate_2.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs?ref=aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-// ignore-wasm32-bare unwinding being disabled causes differences in output\n-// ignore-wasm64-bare unwinding being disabled causes differences in output\n-// compile-flags: -Z verbose -Z mir-emit-validate=1\n-\n-fn main() {\n-    let _x : Box<[i32]> = Box::new([1, 2, 3]);\n-}\n-\n-// END RUST SOURCE\n-// START rustc.main.EraseRegions.after.mir\n-// fn main() -> () {\n-//     ...\n-//     bb1: {\n-//         Validate(Acquire, [_2: std::boxed::Box<[i32; 3]>]);\n-//         Validate(Release, [_2: std::boxed::Box<[i32; 3]>]);\n-//         _1 = move _2 as std::boxed::Box<[i32]> (Unsize);\n-//         Validate(Acquire, [_1: std::boxed::Box<[i32]>]);\n-//         StorageDead(_2);\n-//         StorageDead(_3);\n-//         _0 = ();\n-//         Validate(Release, [_1: std::boxed::Box<[i32]>]);\n-//         drop(_1) -> [return: bb2, unwind: bb3];\n-//     }\n-//     ...\n-// }\n-// END rustc.main.EraseRegions.after.mir"}, {"sha": "ce840397713ad6031063f69b97a21552734f301c", "filename": "src/test/mir-opt/validate_3.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=1\n-\n-struct Test {\n-    x: i32\n-}\n-\n-fn foo(_x: &i32) {}\n-\n-fn main() {\n-    // These internal unsafe functions should have no effect on the code generation.\n-    unsafe fn _unused1() {}\n-    fn _unused2(x: *const i32) -> i32 { unsafe { *x }}\n-\n-    let t = Test { x: 0 };\n-    let t = &t;\n-    foo(&t.x);\n-}\n-\n-// END RUST SOURCE\n-// START rustc.main.EraseRegions.after.mir\n-// fn main() -> (){\n-//     let mut _0: ();\n-//     scope 1 {\n-//         scope 3 {\n-//         }\n-//         scope 4 {\n-//             let _2: &ReErased Test;\n-//         }\n-//     }\n-//     scope 2 {\n-//         let _1: Test;\n-//     }\n-//     let mut _3: ();\n-//     let mut _4: &ReErased i32;\n-//     let mut _5: &ReErased i32;\n-//     bb0: {\n-//         StorageLive(_1);\n-//         _1 = Test { x: const 0i32 };\n-//         StorageLive(_2);\n-//         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 })), [_1: Test]);\n-//         _2 = &ReErased _1;\n-//         Validate(Acquire, [(*_2): Test/ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 }) (imm)]);\n-//         StorageLive(_4);\n-//         StorageLive(_5);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(22)))), [((*_2).0: i32): i32/ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 }) (imm)]);\n-//         _5 = &ReErased ((*_2).0: i32);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(22))) (imm)]);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(22)))), [(*_5): i32/ReScope(Node(ItemLocalId(22))) (imm)]);\n-//         _4 = &ReErased (*_5);\n-//         Validate(Acquire, [(*_4): i32/ReScope(Node(ItemLocalId(22))) (imm)]);\n-//         Validate(Release, [_3: (), _4: &ReScope(Node(ItemLocalId(22))) i32]);\n-//         _3 = const foo(move _4) -> bb1;\n-//     }\n-//     bb1: {\n-//         Validate(Acquire, [_3: ()]);\n-//         EndRegion(ReScope(Node(ItemLocalId(22))));\n-//         StorageDead(_4);\n-//         StorageDead(_5);\n-//         _0 = ();\n-//         EndRegion(ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 }));\n-//         StorageDead(_2);\n-//         StorageDead(_1);\n-//         return;\n-//     }\n-// }\n-// END rustc.main.EraseRegions.after.mir"}, {"sha": "542ac8a42411f1d852565b6be9f87f31f00e7646", "filename": "src/test/mir-opt/validate_4.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6", "patch": "@@ -1,90 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=1 -Z span_free_formats\n-\n-// Make sure unsafe fns and fns with an unsafe block only get restricted validation.\n-\n-unsafe fn write_42(x: *mut i32) -> bool {\n-    let test_closure = |x: *mut i32| *x = 23;\n-    test_closure(x);\n-    *x = 42;\n-    true\n-}\n-\n-fn test(x: &mut i32) {\n-    unsafe { write_42(x) };\n-}\n-\n-fn main() {\n-    test(&mut 0);\n-\n-    let test_closure = unsafe { |x: &mut i32| write_42(x) };\n-    test_closure(&mut 0);\n-}\n-\n-// FIXME: Also test code generated inside the closure, make sure it only does restricted validation\n-// because it is entirely inside an unsafe block.  Unfortunately, the interesting lines of code also\n-// contain name of the source file, so we cannot test for it.\n-\n-// END RUST SOURCE\n-// START rustc.write_42.EraseRegions.after.mir\n-// fn write_42(_1: *mut i32) -> bool {\n-//     ...\n-//     bb0: {\n-//         Validate(Acquire, [_1: *mut i32]);\n-//         Validate(Release, [_1: *mut i32]);\n-//         ...\n-//         return;\n-//     }\n-// }\n-// END rustc.write_42.EraseRegions.after.mir\n-// START rustc.write_42-{{closure}}.EraseRegions.after.mir\n-// fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(32)], _2: *mut i32) -> () {\n-//     ...\n-//     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId(0/1:9 ~ validate_4[317d]::write_42[0]::{{closure}}[0]), BrEnv) [closure@NodeId(32)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId(0/1:9 ~ validate_4[317d]::write_42[0]::{{closure}}[0]), BrEnv) [closure@NodeId(32)], _2: *mut i32]);\n-//         (*_2) = const 23i32;\n-//         _0 = ();\n-//         return;\n-//     }\n-// }\n-// END rustc.write_42-{{closure}}.EraseRegions.after.mir\n-// START rustc.test.EraseRegions.after.mir\n-// fn test(_1: &ReErased mut i32) -> () {\n-//     ...\n-//     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId(0/0:4 ~ validate_4[317d]::test[0]), BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId(0/0:4 ~ validate_4[317d]::test[0]), BrAnon(0)) mut i32]);\n-//         ...\n-//         _2 = const write_42(move _3) -> bb1;\n-//     }\n-//     bb1: {\n-//         Validate(Acquire, [_2: bool]);\n-//         Validate(Release, [_2: bool]);\n-//         ...\n-//     }\n-// }\n-// END rustc.test.EraseRegions.after.mir\n-// START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}(_1: &ReErased [closure@NodeId(80)], _2: &ReErased mut i32) -> bool {\n-//     ...\n-//     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(80)], _2: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(80)], _2: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n-//         StorageLive(_3);\n-//         ...\n-//         _0 = const write_42(move _3) -> bb1;\n-//     }\n-//     ...\n-// }\n-// END rustc.main-{{closure}}.EraseRegions.after.mir"}, {"sha": "955de0c3bad043e45d8d46c2722e6bc5199e87dc", "filename": "src/test/mir-opt/validate_5.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=aafcf2c9422e7e1de2ebefd51d78cf1d07d02cd6", "patch": "@@ -1,69 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=2 -Z span_free_formats\n-\n-// Make sure unsafe fns and fns with an unsafe block still get full validation.\n-\n-unsafe fn write_42(x: *mut i32) -> bool {\n-    *x = 42;\n-    true\n-}\n-\n-fn test(x: &mut i32) {\n-    unsafe { write_42(x) };\n-}\n-\n-fn main() {\n-    test(&mut 0);\n-\n-    let test_closure = unsafe { |x: &mut i32| write_42(x) };\n-    // Note that validation will fail if this is executed: The closure keeps the lock on\n-    // x, so the write in write_42 fails.  This test just checks code generation,\n-    // so the UB doesn't matter.\n-    test_closure(&mut 0);\n-}\n-\n-// END RUST SOURCE\n-// START rustc.test.EraseRegions.after.mir\n-// fn test(_1: &ReErased mut i32) -> () {\n-//     ...\n-//     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId(0/0:4 ~ validate_5[317d]::test[0]), BrAnon(0)) mut i32]);\n-//         ...\n-//         Validate(Release, [_2: bool, _3: *mut i32]);\n-//         _2 = const write_42(move _3) -> bb1;\n-//     }\n-//     ...\n-// }\n-// END rustc.test.EraseRegions.after.mir\n-// START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}(_1: &ReErased [closure@NodeId(62)], _2: &ReErased mut i32) -> bool {\n-//     ...\n-//     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId(0/1:9 ~ validate_5[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(62)], _2: &ReFree(DefId(0/1:9 ~ validate_5[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n-//         StorageLive(_3);\n-//         StorageLive(_4);\n-//         StorageLive(_5);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(16)))), [(*_2): i32]);\n-//         _5 = &ReErased mut (*_2);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(16)))]);\n-//         _4 = move _5 as *mut i32 (Misc);\n-//         _3 = move _4;\n-//         EndRegion(ReScope(Node(ItemLocalId(16))));\n-//         StorageDead(_4);\n-//         StorageDead(_5);\n-//         Validate(Release, [_0: bool, _3: *mut i32]);\n-//         _0 = const write_42(move _3) -> bb1;\n-//     }\n-//     ...\n-// }\n-// END rustc.main-{{closure}}.EraseRegions.after.mir"}]}