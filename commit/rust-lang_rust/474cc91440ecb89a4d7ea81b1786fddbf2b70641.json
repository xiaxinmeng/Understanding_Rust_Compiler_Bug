{"sha": "474cc91440ecb89a4d7ea81b1786fddbf2b70641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NGNjOTE0NDBlY2I4OWE0ZDdlYTgxYjE3ODZmZGRiZjJiNzA2NDE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-17T14:41:07Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-18T08:57:37Z"}, "message": "Use in-memory representation for Fingerprint that is more amenable to hashing.", "tree": {"sha": "c1c51d1a8587524923a892c8a9d847480de7d270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c51d1a8587524923a892c8a9d847480de7d270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/474cc91440ecb89a4d7ea81b1786fddbf2b70641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/474cc91440ecb89a4d7ea81b1786fddbf2b70641", "html_url": "https://github.com/rust-lang/rust/commit/474cc91440ecb89a4d7ea81b1786fddbf2b70641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/474cc91440ecb89a4d7ea81b1786fddbf2b70641/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af8c6c7d1173f68addbf51560e6a009b30c9a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af8c6c7d1173f68addbf51560e6a009b30c9a93", "html_url": "https://github.com/rust-lang/rust/commit/6af8c6c7d1173f68addbf51560e6a009b30c9a93"}], "stats": {"total": 72, "additions": 26, "deletions": 46}, "files": [{"sha": "a947f6aeff709af0ebc9ec71a47658cc2988e084", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 26, "deletions": 46, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/474cc91440ecb89a4d7ea81b1786fddbf2b70641/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474cc91440ecb89a4d7ea81b1786fddbf2b70641/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=474cc91440ecb89a4d7ea81b1786fddbf2b70641", "patch": "@@ -10,95 +10,75 @@\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::stable_hasher;\n-use rustc_data_structures::ToHex;\n-\n-const FINGERPRINT_LENGTH: usize = 16;\n+use std::mem;\n+use std::slice;\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n-pub struct Fingerprint(pub [u8; FINGERPRINT_LENGTH]);\n+pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n     #[inline]\n     pub fn zero() -> Fingerprint {\n-        Fingerprint([0; FINGERPRINT_LENGTH])\n+        Fingerprint(0, 0)\n     }\n \n+    #[inline]\n     pub fn from_smaller_hash(hash: u64) -> Fingerprint {\n-        let mut result = Fingerprint::zero();\n-        result.0[0] = (hash >>  0) as u8;\n-        result.0[1] = (hash >>  8) as u8;\n-        result.0[2] = (hash >> 16) as u8;\n-        result.0[3] = (hash >> 24) as u8;\n-        result.0[4] = (hash >> 32) as u8;\n-        result.0[5] = (hash >> 40) as u8;\n-        result.0[6] = (hash >> 48) as u8;\n-        result.0[7] = (hash >> 56) as u8;\n-        result\n+        Fingerprint(hash, hash)\n     }\n \n+    #[inline]\n     pub fn to_smaller_hash(&self) -> u64 {\n-        ((self.0[0] as u64) <<  0) |\n-        ((self.0[1] as u64) <<  8) |\n-        ((self.0[2] as u64) << 16) |\n-        ((self.0[3] as u64) << 24) |\n-        ((self.0[4] as u64) << 32) |\n-        ((self.0[5] as u64) << 40) |\n-        ((self.0[6] as u64) << 48) |\n-        ((self.0[7] as u64) << 56)\n+        self.0\n     }\n \n     pub fn to_hex(&self) -> String {\n-        self.0.to_hex()\n+        format!(\"{:x}{:x}\", self.0, self.1)\n     }\n }\n \n impl Encodable for Fingerprint {\n     #[inline]\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        for &byte in &self.0 {\n-            s.emit_u8(byte)?;\n-        }\n-        Ok(())\n+        s.emit_u64(self.0.to_le())?;\n+        s.emit_u64(self.1.to_le())\n     }\n }\n \n impl Decodable for Fingerprint {\n     #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Fingerprint, D::Error> {\n-        let mut result = Fingerprint([0u8; FINGERPRINT_LENGTH]);\n-        for byte in &mut result.0 {\n-            *byte = d.read_u8()?;\n-        }\n-        Ok(result)\n+        let _0 = u64::from_le(d.read_u64()?);\n+        let _1 = u64::from_le(d.read_u64()?);\n+        Ok(Fingerprint(_0, _1))\n     }\n }\n \n impl ::std::fmt::Display for Fingerprint {\n     fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n-        for i in 0 .. self.0.len() {\n-            if i > 0 {\n-                write!(formatter, \"::\")?;\n-            }\n-\n-            write!(formatter, \"{}\", self.0[i])?;\n-        }\n-        Ok(())\n+        write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }\n \n-\n impl stable_hasher::StableHasherResult for Fingerprint {\n     fn finish(mut hasher: stable_hasher::StableHasher<Self>) -> Self {\n-        let mut fingerprint = Fingerprint::zero();\n-        fingerprint.0.copy_from_slice(hasher.finalize());\n-        fingerprint\n+        let hash_bytes: &[u8] = hasher.finalize();\n+\n+        assert!(hash_bytes.len() >= mem::size_of::<u64>() * 2);\n+        let hash_bytes: &[u64] = unsafe {\n+            slice::from_raw_parts(hash_bytes.as_ptr() as *const u64, 2)\n+        };\n+\n+        // The bytes returned bytes the Blake2B hasher are always little-endian.\n+        Fingerprint(u64::from_le(hash_bytes[0]), u64::from_le(hash_bytes[1]))\n     }\n }\n \n impl<CTX> stable_hasher::HashStable<CTX> for Fingerprint {\n+    #[inline]\n     fn hash_stable<W: stable_hasher::StableHasherResult>(&self,\n                                           _: &mut CTX,\n                                           hasher: &mut stable_hasher::StableHasher<W>) {\n-        ::std::hash::Hash::hash(&self.0, hasher);\n+        ::std::hash::Hash::hash(self, hasher);\n     }\n }"}]}