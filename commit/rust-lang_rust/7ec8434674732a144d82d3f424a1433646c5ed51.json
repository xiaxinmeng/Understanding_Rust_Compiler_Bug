{"sha": "7ec8434674732a144d82d3f424a1433646c5ed51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzg0MzQ2NzQ3MzJhMTQ0ZDgyZDNmNDI0YTE0MzM2NDZjNWVkNTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-20T14:19:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-20T14:19:58Z"}, "message": "internal: remove potentially slow method", "tree": {"sha": "53921de48a052fba220aa13bee9f693e00166553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53921de48a052fba220aa13bee9f693e00166553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec8434674732a144d82d3f424a1433646c5ed51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec8434674732a144d82d3f424a1433646c5ed51", "html_url": "https://github.com/rust-lang/rust/commit/7ec8434674732a144d82d3f424a1433646c5ed51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec8434674732a144d82d3f424a1433646c5ed51/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5827cc18e0d1f0ec9fe32f731a362d27f2cfae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5827cc18e0d1f0ec9fe32f731a362d27f2cfae", "html_url": "https://github.com/rust-lang/rust/commit/3c5827cc18e0d1f0ec9fe32f731a362d27f2cfae"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "c0b19b1e8f14e2e04ae5f561a2b9408611f33ada", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ec8434674732a144d82d3f424a1433646c5ed51/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec8434674732a144d82d3f424a1433646c5ed51/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7ec8434674732a144d82d3f424a1433646c5ed51", "patch": "@@ -430,13 +430,6 @@ impl Module {\n             .collect()\n     }\n \n-    /// XXX: this O(N) rather O(1) method, avoid using it if you can.\n-    pub fn visibility_of(self, db: &dyn HirDatabase, def: &ModuleDef) -> Option<Visibility> {\n-        let def_map = self.id.def_map(db.upcast());\n-        let module_data = &def_map[self.id.local_id];\n-        module_data.scope.visibility_of((*def).into())\n-    }\n-\n     pub fn diagnostics(self, db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>) {\n         let _p = profile::span(\"Module::diagnostics\").detail(|| {\n             format!(\"{:?}\", self.name(db).map_or(\"<unknown>\".into(), |name| name.to_string()))"}, {"sha": "3825911f1dc5005be0254780819cac77bfc44171", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ec8434674732a144d82d3f424a1433646c5ed51/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec8434674732a144d82d3f424a1433646c5ed51/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=7ec8434674732a144d82d3f424a1433646c5ed51", "patch": "@@ -109,12 +109,6 @@ impl ItemScope {\n         self.values.values().copied()\n     }\n \n-    pub fn visibility_of(&self, def: ModuleDefId) -> Option<Visibility> {\n-        self.name_of(ItemInNs::Types(def))\n-            .or_else(|| self.name_of(ItemInNs::Values(def)))\n-            .map(|(_, v)| v)\n-    }\n-\n     pub fn unnamed_consts(&self) -> impl Iterator<Item = ConstId> + '_ {\n         self.unnamed_consts.iter().copied()\n     }\n@@ -138,6 +132,7 @@ impl ItemScope {\n         }\n     }\n \n+    /// XXX: this is O(N) rather than O(1), try to not introduce new usages.\n     pub(crate) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n         for (name, per_ns) in self.entries() {\n             if let Some(vis) = item.match_with(per_ns) {"}, {"sha": "5efdc4f3eccfbef02a0f3ba7ac72bb68fe92a1cf", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec8434674732a144d82d3f424a1433646c5ed51/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec8434674732a144d82d3f424a1433646c5ed51/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=7ec8434674732a144d82d3f424a1433646c5ed51", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{known, Callable, HirDisplay, Semantics};\n+use hir::{known, Callable, HasVisibility, HirDisplay, Semantics};\n use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n use stdx::to_lower_snake_case;\n@@ -221,7 +221,11 @@ fn hint_iterator(\n     let iter_mod = famous_defs.core_iter()?;\n \n     // Assert that this struct comes from `core::iter`.\n-    iter_mod.visibility_of(db, &strukt.into()).filter(|&vis| vis == hir::Visibility::Public)?;\n+    if !(strukt.visibility(db) == hir::Visibility::Public\n+        && strukt.module(db).path_to_root(db).contains(&iter_mod))\n+    {\n+        return None;\n+    }\n \n     if ty.impls_trait(db, iter_trait, &[]) {\n         let assoc_type_item = iter_trait.items(db).into_iter().find_map(|item| match item {"}]}