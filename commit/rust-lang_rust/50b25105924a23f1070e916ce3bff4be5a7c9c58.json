{"sha": "50b25105924a23f1070e916ce3bff4be5a7c9c58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYjI1MTA1OTI0YTIzZjEwNzBlOTE2Y2UzYmZmNGJlNWE3YzljNTg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-01-11T12:29:59Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-01-17T15:49:32Z"}, "message": "compiletest: Support opt-in Clang-based run-make tests.\n\nSome cross-language run-make tests need a Clang compiler that\nmatches the LLVM version of rustc. Since such a compiler usually\nisn't available these tests (marked with the \"needs-matching-clang\"\ndirective) are ignored by default.\n\nFor some CI jobs we do need these tests to run unconditionally\nthough. In order to support this a --force-clang-based-tests flag\nis added to compiletest. If this flag is specified, compiletest\nwill fail if it can't detect an appropriate version of Clang.", "tree": {"sha": "9e4e9e5486a08e352ab6fe1930fc9a68c182b0fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4e9e5486a08e352ab6fe1930fc9a68c182b0fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b25105924a23f1070e916ce3bff4be5a7c9c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b25105924a23f1070e916ce3bff4be5a7c9c58", "html_url": "https://github.com/rust-lang/rust/commit/50b25105924a23f1070e916ce3bff4be5a7c9c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b25105924a23f1070e916ce3bff4be5a7c9c58/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75dcf9e35fb0a3f8e45ec9f4f7c0a4096fe60d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/75dcf9e35fb0a3f8e45ec9f4f7c0a4096fe60d2d", "html_url": "https://github.com/rust-lang/rust/commit/75dcf9e35fb0a3f8e45ec9f4f7c0a4096fe60d2d"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "d034630a4dfa37c8f07e98fc63897d79d53af6ef", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b25105924a23f1070e916ce3bff4be5a7c9c58/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b25105924a23f1070e916ce3bff4be5a7c9c58/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=50b25105924a23f1070e916ce3bff4be5a7c9c58", "patch": "@@ -144,6 +144,10 @@ pub struct Config {\n     /// (or, alternatively, to silently run them like regular run-pass tests).\n     pub force_valgrind: bool,\n \n+    /// Whether to fail if we don't have a clang version available that matches\n+    /// rustc's LLVM version.\n+    pub force_clang_based_tests: bool,\n+\n     /// The directory containing the tests to run\n     pub src_base: PathBuf,\n \n@@ -205,6 +209,9 @@ pub struct Config {\n     /// Is LLVM a system LLVM\n     pub system_llvm: bool,\n \n+    /// The version of Clang available to run-make tests (if any).\n+    pub clang_version: Option<String>,\n+\n     /// Path to the android tools\n     pub android_cross_path: PathBuf,\n "}, {"sha": "0d664d4852bbf67073afaa70d4cd124f6d3cb550", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50b25105924a23f1070e916ce3bff4be5a7c9c58/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b25105924a23f1070e916ce3bff4be5a7c9c58/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=50b25105924a23f1070e916ce3bff4be5a7c9c58", "patch": "@@ -111,6 +111,11 @@ impl EarlyProps {\n                 if ignore_llvm(config, ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n+\n+                if !config.force_clang_based_tests &&\n+                   config.parse_needs_matching_clang(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoBoth) &&\n@@ -705,6 +710,10 @@ impl Config {\n         }\n     }\n \n+    fn parse_needs_matching_clang(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"needs-matching-clang\")\n+    }\n+\n     /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n     /// or `normalize-stderr-32bit`.\n     fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {"}, {"sha": "bf6ea2a04035e2e2ab9e218baa17417515479a05", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/50b25105924a23f1070e916ce3bff4be5a7c9c58/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b25105924a23f1070e916ce3bff4be5a7c9c58/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=50b25105924a23f1070e916ce3bff4be5a7c9c58", "patch": "@@ -50,12 +50,32 @@ pub mod util;\n fn main() {\n     env_logger::init();\n \n-    let config = parse_config(env::args().collect());\n+    let mut config = parse_config(env::args().collect());\n \n     if config.valgrind_path.is_none() && config.force_valgrind {\n         panic!(\"Can't find Valgrind to run Valgrind tests\");\n     }\n \n+    // Some run-make tests need a version of Clang available that matches\n+    // rustc's LLVM version. Since this isn't always the case, these tests are\n+    // opt-in.\n+    let clang_based_tests_possible = check_clang_based_tests_possible(&config);\n+    match (clang_based_tests_possible, config.force_clang_based_tests) {\n+        (Ok(_), true) |\n+        (Err(_), false) => {\n+            // Nothing to do\n+        }\n+        (Ok(_), false) => {\n+            // If a valid clang version is available, run the tests even if\n+            // they are not forced.\n+            config.force_clang_based_tests = true;\n+        }\n+        (Err(msg), true) => {\n+            // Tests are forced but we don't have a valid version of Clang.\n+            panic!(\"{}\", msg)\n+        }\n+    }\n+\n     log_config(&config);\n     run_tests(&config);\n }\n@@ -108,6 +128,11 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"force-valgrind\",\n             \"fail if Valgrind tests cannot be run under Valgrind\",\n         )\n+        .optflag(\n+            \"\",\n+            \"force-clang-based-tests\",\n+            \"fail if Clang-based run-make tests can't be run for some reason\",\n+        )\n         .optopt(\n             \"\",\n             \"llvm-filecheck\",\n@@ -189,6 +214,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"VERSION STRING\",\n         )\n         .optflag(\"\", \"system-llvm\", \"is LLVM the system LLVM\")\n+        .optopt(\n+            \"\",\n+            \"clang-version\",\n+            \"the version of Clang available to run-make tests\",\n+            \"VERSION STRING\",\n+        )\n         .optopt(\n             \"\",\n             \"android-cross-path\",\n@@ -298,6 +329,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         docck_python: matches.opt_str(\"docck-python\").unwrap(),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n+        force_clang_based_tests: matches.opt_present(\"force-clang-based-tests\"),\n         llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(|s| PathBuf::from(&s)),\n         src_base,\n         build_base: opt_path(matches, \"build-base\"),\n@@ -323,6 +355,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         lldb_native_rust,\n         llvm_version: matches.opt_str(\"llvm-version\"),\n         system_llvm: matches.opt_present(\"system-llvm\"),\n+        clang_version: matches.opt_str(\"clang-version\"),\n         android_cross_path: android_cross_path,\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n         adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")),\n@@ -1031,3 +1064,54 @@ fn test_extract_gdb_version() {\n         7012050: \"GNU gdb (GDB) 7.12.50.20161027-git\",\n     }\n }\n+\n+\n+fn check_clang_based_tests_possible(config: &Config) -> Result<(), String> {\n+\n+    let llvm_version = if let Some(llvm_version) = config.llvm_version.as_ref() {\n+        llvm_version\n+    } else {\n+        return Err(format!(\"Running `compiletest` with `--force-clang-based-tests` \\\n+                            requires `--llvm-version` to be specified.\"));\n+    };\n+\n+    let clang_major_version = if let Some(ref version_string) = config.clang_version {\n+        major_version_from_clang_version_string(version_string)?\n+    } else {\n+        return Err(format!(\"Clang is required for running tests \\\n+                            (because of --force-clang-based-tests) \\\n+                            but it does not seem to be available.\"));\n+    };\n+\n+    let rustc_llvm_major_version = major_version_from_llvm_version_string(&llvm_version)?;\n+\n+    return if clang_major_version != rustc_llvm_major_version {\n+        Err(format!(\"`--force-clang-based-tests` needs the major version of Clang \\\n+                     and rustc's LLVM to be the same. Clang version is: {}, \\\n+                     Rustc LLVM is: {}\",\n+                     config.clang_version.clone().unwrap(),\n+                     llvm_version))\n+    } else {\n+        Ok(())\n+    };\n+\n+    fn major_version_from_clang_version_string(clang_version: &str) -> Result<&str, String> {\n+        let re = regex::Regex::new(r\"clang version (\\d)\\.\\d\").unwrap();\n+        if let Some(captures) = re.captures(clang_version) {\n+            Ok(captures.get(1).unwrap().as_str())\n+        } else {\n+            Err(format!(\"Failed to parse major version from Clang version \\\n+                         string '{}'.\", clang_version))\n+        }\n+    }\n+\n+    fn major_version_from_llvm_version_string(llvm_version: &str) -> Result<&str, String> {\n+        let re = regex::Regex::new(r\"(\\d)\\.\\d\").unwrap();\n+        if let Some(captures) = re.captures(llvm_version) {\n+            Ok(captures.get(1).unwrap().as_str())\n+        } else {\n+            Err(format!(\"Failed to parse major version from LLVM version \\\n+                         string '{}'.\", llvm_version))\n+        }\n+    }\n+}"}]}