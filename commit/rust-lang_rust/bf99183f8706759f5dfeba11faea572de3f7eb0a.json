{"sha": "bf99183f8706759f5dfeba11faea572de3f7eb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOTkxODNmODcwNjc1OWY1ZGZlYmExMWZhZWE1NzJkZTNmN2ViMGE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-12-03T20:39:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-03T20:39:51Z"}, "message": "Rollup merge of #37859 - GuillaumeGomez:net_examples, r=nagisa\n\nAdd missing examples for Ipv6Addr\n\nr? @steveklabnik\n\ncc @frewsxcv", "tree": {"sha": "356c5aa50d04f4c8033ea520fe08d9e040e0ddf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356c5aa50d04f4c8033ea520fe08d9e040e0ddf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf99183f8706759f5dfeba11faea572de3f7eb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf99183f8706759f5dfeba11faea572de3f7eb0a", "html_url": "https://github.com/rust-lang/rust/commit/bf99183f8706759f5dfeba11faea572de3f7eb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf99183f8706759f5dfeba11faea572de3f7eb0a/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890085450a495678622178a471afd630fe15f0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/890085450a495678622178a471afd630fe15f0f5", "html_url": "https://github.com/rust-lang/rust/commit/890085450a495678622178a471afd630fe15f0f5"}, {"sha": "a5049f7bba1c56027618a07ffa62c3af5c7da850", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5049f7bba1c56027618a07ffa62c3af5c7da850", "html_url": "https://github.com/rust-lang/rust/commit/a5049f7bba1c56027618a07ffa62c3af5c7da850"}], "stats": {"total": 158, "additions": 158, "deletions": 0}, "files": [{"sha": "40563eacf294643f9b0642004438d54a662abc4c", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/bf99183f8706759f5dfeba11faea572de3f7eb0a/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf99183f8706759f5dfeba11faea572de3f7eb0a/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=bf99183f8706759f5dfeba11faea572de3f7eb0a", "patch": "@@ -522,6 +522,14 @@ impl Ipv6Addr {\n     /// Creates a new IPv6 address from eight 16-bit segments.\n     ///\n     /// The result will represent the IP address a:b:c:d:e:f:g:h.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16,\n                h: u16) -> Ipv6Addr {\n@@ -538,6 +546,15 @@ impl Ipv6Addr {\n     }\n \n     /// Returns the eight 16-bit segments that make up this address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).segments(),\n+    ///            [0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn segments(&self) -> [u16; 8] {\n         let arr = &self.inner.s6_addr;\n@@ -558,6 +575,15 @@ impl Ipv6Addr {\n     /// This property is defined in [RFC 4291].\n     ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unspecified(), false);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0).is_unspecified(), true);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_unspecified(&self) -> bool {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 0]\n@@ -568,6 +594,15 @@ impl Ipv6Addr {\n     /// This property is defined in [RFC 4291].\n     ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_loopback(), false);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_loopback(), true);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_loopback(&self) -> bool {\n         self.segments() == [0, 0, 0, 0, 0, 0, 0, 1]\n@@ -580,6 +615,20 @@ impl Ipv6Addr {\n     /// - the loopback address\n     /// - link-local, site-local, and unique local unicast addresses\n     /// - interface-, link-, realm-, admin- and site-local multicast addresses\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_global(), true);\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_global(), false);\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n+    /// }\n+    /// ```\n     pub fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n             Some(Ipv6MulticastScope::Global) => true,\n@@ -593,6 +642,20 @@ impl Ipv6Addr {\n     /// This property is defined in [RFC 4193].\n     ///\n     /// [RFC 4193]: https://tools.ietf.org/html/rfc4193\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unique_local(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n+    /// }\n+    /// ```\n     pub fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n@@ -602,12 +665,40 @@ impl Ipv6Addr {\n     /// This property is defined in [RFC 4291].\n     ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_link_local(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0xfe8a, 0, 0, 0, 0, 0, 0, 0).is_unicast_link_local(), true);\n+    /// }\n+    /// ```\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n     /// Returns true if this is a deprecated unicast site-local address\n     /// (fec0::/10).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_site_local(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0xfec2, 0, 0, 0, 0, 0, 0, 0).is_unicast_site_local(), true);\n+    /// }\n+    /// ```\n     pub fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n@@ -618,6 +709,20 @@ impl Ipv6Addr {\n     /// This property is defined in [RFC 3849].\n     ///\n     /// [RFC 3849]: https://tools.ietf.org/html/rfc3849\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_documentation(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n+    /// }\n+    /// ```\n     pub fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n@@ -632,6 +737,20 @@ impl Ipv6Addr {\n     /// - unique local addresses\n     /// - the unspecified address\n     /// - the address range reserved for documentation\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_unicast_global(), false);\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(),\n+    ///                true);\n+    /// }\n+    /// ```\n     pub fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n             && !self.is_loopback() && !self.is_unicast_link_local()\n@@ -640,6 +759,20 @@ impl Ipv6Addr {\n     }\n \n     /// Returns the address's multicast scope if the address is multicast.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::{Ipv6Addr, Ipv6MulticastScope};\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0xff0e, 0, 0, 0, 0, 0, 0, 0).multicast_scope(),\n+    ///                              Some(Ipv6MulticastScope::Global));\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n+    /// }\n+    /// ```\n     pub fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n             match self.segments()[0] & 0x000f {\n@@ -662,6 +795,14 @@ impl Ipv6Addr {\n     /// This property is defined by [RFC 4291].\n     ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).is_multicast(), true);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_multicast(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00\n@@ -671,6 +812,16 @@ impl Ipv6Addr {\n     /// neither IPv4-compatible or IPv4-mapped.\n     ///\n     /// ::a.b.c.d and ::ffff:a.b.c.d become a.b.c.d\n+    ///\n+    /// ```\n+    /// use std::net::{Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).to_ipv4(), None);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).to_ipv4(),\n+    ///            Some(Ipv4Addr::new(192, 10, 2, 255)));\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4(),\n+    ///            Some(Ipv4Addr::new(0, 0, 0, 1)));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         match self.segments() {\n@@ -683,6 +834,13 @@ impl Ipv6Addr {\n     }\n \n     /// Returns the sixteen eight-bit integers the IPv6 address consists of.\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).octets(),\n+    ///            [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n+    /// ```\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n     pub fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr"}]}