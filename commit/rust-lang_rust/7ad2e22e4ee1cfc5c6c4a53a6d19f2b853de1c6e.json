{"sha": "7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDJlMjJlNGVlMWNmYzVjNmM0YTUzYTZkMTlmMmI4NTNkZTFjNmU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-28T02:21:09Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-28T04:35:07Z"}, "message": "remove leftover annotations", "tree": {"sha": "e80b9315a81ee5f4c95ab662de609693891af435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80b9315a81ee5f4c95ab662de609693891af435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "html_url": "https://github.com/rust-lang/rust/commit/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/comments", "author": null, "committer": null, "parents": [{"sha": "cc8a5a0db7183fe3c233053bdadc6226f3dbd6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8a5a0db7183fe3c233053bdadc6226f3dbd6e4", "html_url": "https://github.com/rust-lang/rust/commit/cc8a5a0db7183fe3c233053bdadc6226f3dbd6e4"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b5ad7cc22f3279d1f3f64db7782b2dda048bb12d", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "patch": "@@ -3752,9 +3752,9 @@ An example of creating and calling a closure:\n ```rust\n let captured_var = 10;\n \n-let closure_no_args = |&:| println!(\"captured_var={}\", captured_var);\n+let closure_no_args = || println!(\"captured_var={}\", captured_var);\n \n-let closure_args = |&: arg: i32| -> i32 {\n+let closure_args = |arg: i32| -> i32 {\n   println!(\"captured_var={}, arg={}\", captured_var, arg);\n   arg // Note lack of semicolon after 'arg'\n };"}, {"sha": "0c9f9d2a5301aa2b94caf89aca8fba87f6c10006", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "patch": "@@ -257,7 +257,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             }\n           }\n           (Ok(const_int(a)), Ok(const_int(b))) => {\n-            let is_a_min_value = |&:| {\n+            let is_a_min_value = || {\n                 let int_ty = match ty::expr_ty_opt(tcx, e).map(|ty| &ty.sty) {\n                     Some(&ty::ty_int(int_ty)) => int_ty,\n                     _ => return false"}, {"sha": "083523f7ba92f97fce223becfadf59dccc1003e7", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "patch": "@@ -45,7 +45,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n     scope: region::CodeExtent,\n     depth: uint)\n {\n-    let origin = |&:| infer::SubregionOrigin::SafeDestructor(span);\n+    let origin = || infer::SubregionOrigin::SafeDestructor(span);\n     let mut walker = ty_root.walk();\n     let opt_phantom_data_def_id = rcx.tcx().lang_items.phantom_data();\n "}, {"sha": "1b77b4fe75cea7f7cd91ac3c28e65a9a97b8e8e2", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "patch": "@@ -274,7 +274,7 @@ impl Process {\n                 // file descriptor. Otherwise, the first file descriptor opened\n                 // up in the child would be numbered as one of the stdio file\n                 // descriptors, which is likely to wreak havoc.\n-                let setup = |&: src: Option<AnonPipe>, dst: c_int| {\n+                let setup = |src: Option<AnonPipe>, dst: c_int| {\n                     let src = match src {\n                         None => {\n                             let flags = if dst == libc::STDIN_FILENO {"}, {"sha": "8a6a485cbbe0f01d060f53c9767e6592fda8ee6a", "filename": "src/libstd/sys/windows/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs?ref=7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "patch": "@@ -160,7 +160,7 @@ impl Process {\n             // Similarly to unix, we don't actually leave holes for the stdio file\n             // descriptors, but rather open up /dev/null equivalents. These\n             // equivalents are drawn from libuv's windows process spawning.\n-            let set_fd = |&: fd: &Option<AnonPipe>, slot: &mut HANDLE,\n+            let set_fd = |fd: &Option<AnonPipe>, slot: &mut HANDLE,\n                           is_stdin: bool| {\n                 match *fd {\n                     None => {"}]}