{"sha": "f874f6768caa8b59b99feffc708e868328129fd5", "node_id": "C_kwDOAAsO6NoAKGY4NzRmNjc2OGNhYThiNTliOTlmZWZmYzcwOGU4NjgzMjgxMjlmZDU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-03T11:10:24Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-03T11:44:23Z"}, "message": "Fix suggestion for coercing Option<&String> to Option<&str>", "tree": {"sha": "afc222eb89f743bf44af8c9cfe25ff671cdbc198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afc222eb89f743bf44af8c9cfe25ff671cdbc198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f874f6768caa8b59b99feffc708e868328129fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f874f6768caa8b59b99feffc708e868328129fd5", "html_url": "https://github.com/rust-lang/rust/commit/f874f6768caa8b59b99feffc708e868328129fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f874f6768caa8b59b99feffc708e868328129fd5/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d32458343f34bd8de6d96cbaab2a9cf879dd1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d32458343f34bd8de6d96cbaab2a9cf879dd1b8", "html_url": "https://github.com/rust-lang/rust/commit/5d32458343f34bd8de6d96cbaab2a9cf879dd1b8"}], "stats": {"total": 101, "additions": 88, "deletions": 13}, "files": [{"sha": "05ac8db0db88f893d64604f50fd86de7fa542026", "filename": "compiler/rustc_error_messages/locales/en-US/hir_typeck.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f874f6768caa8b59b99feffc708e868328129fd5/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f874f6768caa8b59b99feffc708e868328129fd5/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl?ref=f874f6768caa8b59b99feffc708e868328129fd5", "patch": "@@ -61,3 +61,5 @@ hir_typeck_lang_start_incorrect_ret_ty = the return type of the `start` lang ite\n hir_typeck_help_set_edition_cargo = set `edition = \"{$edition}\"` in `Cargo.toml`\n hir_typeck_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n hir_typeck_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+hir_typeck_convert_to_str = try converting the passed type into a `&str`"}, {"sha": "3f433a0928c5502f95003812771405aedd76bcc1", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f874f6768caa8b59b99feffc708e868328129fd5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f874f6768caa8b59b99feffc708e868328129fd5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=f874f6768caa8b59b99feffc708e868328129fd5", "patch": "@@ -3,7 +3,7 @@ use super::FnCtxt;\n use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n use crate::method::probe::{IsSuggestion, Mode, ProbeScope};\n use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX};\n-use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n+use rustc_errors::{fluent, Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n@@ -414,11 +414,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let ty::Adt(adt, _) = peeled.kind()\n                     && Some(adt.did()) == self.tcx.lang_items().string()\n                 {\n+                    let sugg = if ref_cnt == 0 {\n+                        \".as_deref()\"\n+                    } else {\n+                        \".map(|x| x.as_str())\"\n+                    };\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_hi(),\n-                        \"try converting the passed type into a `&str`\",\n-                        format!(\".map(|x| &*{}x)\", \"*\".repeat(ref_cnt)),\n-                        Applicability::MaybeIncorrect,\n+                        fluent::hir_typeck_convert_to_str,\n+                        sugg,\n+                        Applicability::MachineApplicable,\n                     );\n                     return true;\n                 }"}, {"sha": "3e1a006efa06978f80d556ac290144762a0bf19a", "filename": "tests/ui/typeck/issue-89856.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f874f6768caa8b59b99feffc708e868328129fd5/tests%2Fui%2Ftypeck%2Fissue-89856.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f874f6768caa8b59b99feffc708e868328129fd5/tests%2Fui%2Ftypeck%2Fissue-89856.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-89856.fixed?ref=f874f6768caa8b59b99feffc708e868328129fd5", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+fn take_str_maybe(_: Option<&str>) { }\n+fn main() {\n+    let string = String::from(\"Hello, world\");\n+\n+    let option: Option<String> = Some(string.clone());\n+    take_str_maybe(option.as_deref());\n+    //~^ ERROR: mismatched types [E0308]\n+\n+    let option_ref = Some(&string);\n+    take_str_maybe(option_ref.map(|x| x.as_str()));\n+    //~^ ERROR: mismatched types [E0308]\n+\n+    let option_ref_ref = option_ref.as_ref();\n+    take_str_maybe(option_ref_ref.map(|x| x.as_str()));\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "cfe6e19b303f3513578ae2d493f65f95d27911b5", "filename": "tests/ui/typeck/issue-89856.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f874f6768caa8b59b99feffc708e868328129fd5/tests%2Fui%2Ftypeck%2Fissue-89856.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f874f6768caa8b59b99feffc708e868328129fd5/tests%2Fui%2Ftypeck%2Fissue-89856.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-89856.rs?ref=f874f6768caa8b59b99feffc708e868328129fd5", "patch": "@@ -1,8 +1,18 @@\n-fn take_str_maybe(x: Option<&str>) -> Option<&str> { None }\n+// run-rustfix\n \n+fn take_str_maybe(_: Option<&str>) { }\n fn main() {\n     let string = String::from(\"Hello, world\");\n-    let option = Some(&string);\n+\n+    let option: Option<String> = Some(string.clone());\n     take_str_maybe(option);\n     //~^ ERROR: mismatched types [E0308]\n+\n+    let option_ref = Some(&string);\n+    take_str_maybe(option_ref);\n+    //~^ ERROR: mismatched types [E0308]\n+\n+    let option_ref_ref = option_ref.as_ref();\n+    take_str_maybe(option_ref_ref);\n+    //~^ ERROR: mismatched types [E0308]\n }"}, {"sha": "bd76f17246821cd0cbbc82ddfc731276ba072382", "filename": "tests/ui/typeck/issue-89856.stderr", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f874f6768caa8b59b99feffc708e868328129fd5/tests%2Fui%2Ftypeck%2Fissue-89856.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f874f6768caa8b59b99feffc708e868328129fd5/tests%2Fui%2Ftypeck%2Fissue-89856.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-89856.stderr?ref=f874f6768caa8b59b99feffc708e868328129fd5", "patch": "@@ -1,23 +1,63 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-89856.rs:6:20\n+  --> $DIR/issue-89856.rs:8:20\n    |\n LL |     take_str_maybe(option);\n-   |     -------------- ^^^^^^ expected `Option<&str>`, found `Option<&String>`\n+   |     -------------- ^^^^^^ expected `Option<&str>`, found `Option<String>`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Option<&str>`\n+              found enum `Option<String>`\n+note: function defined here\n+  --> $DIR/issue-89856.rs:3:4\n+   |\n+LL | fn take_str_maybe(_: Option<&str>) { }\n+   |    ^^^^^^^^^^^^^^ ---------------\n+help: try converting the passed type into a `&str`\n+   |\n+LL |     take_str_maybe(option.as_deref());\n+   |                          +++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-89856.rs:12:20\n+   |\n+LL |     take_str_maybe(option_ref);\n+   |     -------------- ^^^^^^^^^^ expected `Option<&str>`, found `Option<&String>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected enum `Option<&str>`\n               found enum `Option<&String>`\n note: function defined here\n-  --> $DIR/issue-89856.rs:1:4\n+  --> $DIR/issue-89856.rs:3:4\n+   |\n+LL | fn take_str_maybe(_: Option<&str>) { }\n+   |    ^^^^^^^^^^^^^^ ---------------\n+help: try converting the passed type into a `&str`\n+   |\n+LL |     take_str_maybe(option_ref.map(|x| x.as_str()));\n+   |                              ++++++++++++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-89856.rs:16:20\n+   |\n+LL |     take_str_maybe(option_ref_ref);\n+   |     -------------- ^^^^^^^^^^^^^^ expected `Option<&str>`, found `Option<&&String>`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Option<&str>`\n+              found enum `Option<&&String>`\n+note: function defined here\n+  --> $DIR/issue-89856.rs:3:4\n    |\n-LL | fn take_str_maybe(x: Option<&str>) -> Option<&str> { None }\n+LL | fn take_str_maybe(_: Option<&str>) { }\n    |    ^^^^^^^^^^^^^^ ---------------\n help: try converting the passed type into a `&str`\n    |\n-LL |     take_str_maybe(option.map(|x| &**x));\n-   |                          ++++++++++++++\n+LL |     take_str_maybe(option_ref_ref.map(|x| x.as_str()));\n+   |                                  ++++++++++++++++++++\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}