{"sha": "0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZjg4MjVlYjEwNGU2YzdiOTQ0NDY5M2Q1ODNiNWZhMGJkNTVjZWI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-30T19:26:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-30T19:26:08Z"}, "message": "Merge pull request #2101 from topecongiro/issue-2099\n\nFormat match expr with empty body", "tree": {"sha": "48ae447f127db589e32cf09b4c4ece0187a4337e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48ae447f127db589e32cf09b4c4ece0187a4337e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ93zQCRBK7hj4Ov3rIwAAdHIIAGVnEUgrEeUDEeZC4/R4HdMj\n4jOEX0snXiZwp4hUOd57YFTkTrAZIKYS8FDUGE0Oe0C/20/mvaedObZu+dOYc2xM\nUp/I9hwUHcyGUu6WTTwLPJAHKnt6qd9hN8WRCifQUjRtGyS8IMN+ArVqQv4cCFa6\nY50ZKf+g4e+zt75mnVu0e6Fv8WT92s4/MS8BVdubgUwvCBOpMQg+/h4AVootf66b\n8jacRE2s+wuhAl7BjbrNDYIqwCafknZJLTnsEiP/4pZ4aoJ/8DepqG0vMjRjYHGw\n8/M31vlR+esYZtss+Kd4zrZRJnwTkK1hANmwzL4ax8RtDzKj+nHzMIxNQNRyuJY=\n=SONr\n-----END PGP SIGNATURE-----\n", "payload": "tree 48ae447f127db589e32cf09b4c4ece0187a4337e\nparent 48fb1139ea1db241830c7bb45266fa806c1083d5\nparent 2e06dea146eddea8a7fc4ad22f12cfe8fd9e1eed\nauthor Nick Cameron <nrc@ncameron.org> 1509391568 +1300\ncommitter GitHub <noreply@github.com> 1509391568 +1300\n\nMerge pull request #2101 from topecongiro/issue-2099\n\nFormat match expr with empty body "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "html_url": "https://github.com/rust-lang/rust/commit/0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af8825eb104e6c7b9444693d583b5fa0bd55ceb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48fb1139ea1db241830c7bb45266fa806c1083d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/48fb1139ea1db241830c7bb45266fa806c1083d5", "html_url": "https://github.com/rust-lang/rust/commit/48fb1139ea1db241830c7bb45266fa806c1083d5"}, {"sha": "2e06dea146eddea8a7fc4ad22f12cfe8fd9e1eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e06dea146eddea8a7fc4ad22f12cfe8fd9e1eed", "html_url": "https://github.com/rust-lang/rust/commit/2e06dea146eddea8a7fc4ad22f12cfe8fd9e1eed"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "212f05b52b82ffb5fff76c05b0c43d9c646631b6", "filename": "src/expr.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0af8825eb104e6c7b9444693d583b5fa0bd55ceb/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8825eb104e6c7b9444693d583b5fa0bd55ceb/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "patch": "@@ -1444,15 +1444,10 @@ fn rewrite_match(\n     span: Span,\n     attrs: &[ast::Attribute],\n ) -> Option<String> {\n-    if arms.is_empty() {\n-        return None;\n-    }\n-\n     // Do not take the rhs overhead from the upper expressions into account\n     // when rewriting match condition.\n-    let new_width = context.config.max_width().checked_sub(shape.used_width())?;\n     let cond_shape = Shape {\n-        width: new_width,\n+        width: context.budget(shape.used_width()),\n         ..shape\n     };\n     // 6 = `match `\n@@ -1485,9 +1480,12 @@ fn rewrite_match(\n     };\n \n     let open_brace_pos = if inner_attrs.is_empty() {\n-        context\n-            .codemap\n-            .span_after(mk_sp(cond.span.hi(), arms[0].span().lo()), \"{\")\n+        let hi = if arms.is_empty() {\n+            span.hi()\n+        } else {\n+            arms[0].span().lo()\n+        };\n+        context.codemap.span_after(mk_sp(cond.span.hi(), hi), \"{\")\n     } else {\n         inner_attrs[inner_attrs.len() - 1].span().hi()\n     };\n@@ -1498,15 +1496,25 @@ fn rewrite_match(\n         shape.indent.to_string(context.config)\n     };\n \n-    Some(format!(\n-        \"match {}{}{{\\n{}{}{}\\n{}}}\",\n-        cond_str,\n-        block_sep,\n-        inner_attrs_str,\n-        arm_indent_str,\n-        rewrite_match_arms(context, arms, shape, span, open_brace_pos,)?,\n-        shape.indent.to_string(context.config),\n-    ))\n+    if arms.is_empty() {\n+        let snippet = context.snippet(mk_sp(open_brace_pos, span.hi() - BytePos(1)));\n+        if snippet.trim().is_empty() {\n+            Some(format!(\"match {} {{}}\", cond_str))\n+        } else {\n+            // Empty match with comments or inner attributes? We are not going to bother, sorry ;)\n+            Some(context.snippet(span))\n+        }\n+    } else {\n+        Some(format!(\n+            \"match {}{}{{\\n{}{}{}\\n{}}}\",\n+            cond_str,\n+            block_sep,\n+            inner_attrs_str,\n+            arm_indent_str,\n+            rewrite_match_arms(context, arms, shape, span, open_brace_pos)?,\n+            shape.indent.to_string(context.config),\n+        ))\n+    }\n }\n \n fn arm_comma(config: &Config, body: &ast::Expr, is_last: bool) -> &'static str {"}, {"sha": "48a710e6f06e09322073615e3df78810ba4ce65f", "filename": "tests/source/match.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0af8825eb104e6c7b9444693d583b5fa0bd55ceb/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8825eb104e6c7b9444693d583b5fa0bd55ceb/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "patch": "@@ -415,3 +415,13 @@ fn match_with_trailing_spaces() {\n         None => 1,\n     }\n }\n+\n+fn issue_2099() {\n+    let a = match x {\n+};\n+    let b = match x {\n+        \n+    };\n+\n+    match x {}\n+}"}, {"sha": "3d879d18c205b2908a4b625eb691eed2681e884f", "filename": "tests/target/match.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0af8825eb104e6c7b9444693d583b5fa0bd55ceb/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8825eb104e6c7b9444693d583b5fa0bd55ceb/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=0af8825eb104e6c7b9444693d583b5fa0bd55ceb", "patch": "@@ -456,3 +456,10 @@ fn match_with_trailing_spaces() {\n         None => 1,\n     }\n }\n+\n+fn issue_2099() {\n+    let a = match x {};\n+    let b = match x {};\n+\n+    match x {}\n+}"}]}