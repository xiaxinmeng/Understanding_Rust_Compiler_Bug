{"sha": "6906e64c30ca464c1bafed5b806283665d9e8f58", "node_id": "C_kwDOAAsO6NoAKDY5MDZlNjRjMzBjYTQ2NGMxYmFmZWQ1YjgwNjI4MzY2NWQ5ZThmNTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-30T08:22:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-30T08:22:37Z"}, "message": "Rollup merge of #102350 - TaKO8Ki:incomplete-fn-in-struct-definition, r=fee1-dead\n\nImprove errors for incomplete functions in struct definitions\n\nGiven the following code:\n\n```rust\nfn main() {}\n\nstruct Foo {\n    fn\n}\n```\n\n[playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=29139f870511f6918324be5ddc26c345)\n\nThe current output is:\n\n```\n   Compiling playground v0.0.1 (/playground)\nerror: functions are not allowed in struct definitions\n --> src/main.rs:4:5\n  |\n4 |     fn\n  |     ^^\n  |\n  = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n  = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n\nerror: could not compile `playground` due to previous error\n```\n\nIn this case, rustc should suggest escaping `fn` to use it as an identifier.", "tree": {"sha": "98bfdfd7189ad56f8d50b6c9e5e888c101418050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98bfdfd7189ad56f8d50b6c9e5e888c101418050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6906e64c30ca464c1bafed5b806283665d9e8f58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjNqdNCRBK7hj4Ov3rIwAAVoMIAKr6zhnD8MiiUV9OYLUiNGas\nAD6bw1EqQ0ic9JlK2dVz83Wt072xECLv1KpQ148miLcDRSJ9LtIUTyjeiBczZBkx\novEX+nkausuiPpF2xL5n+JWZXNdjXBzbpoaHXM2Wsyxw7Uzjv0CL5w2q2hgmvU8I\nQ+n0PHEohJHNv5PPElC9hqR9Nx+lu5MH3znRqaFM6MogRN+23O/8NV0i4so2Rjm6\nP80IbYRO51Dblmy6rwKfu+F5zJqkw7X2XlFnbrQIYkpmFSXoUpxTPlWNn4cK+Dsw\nt0tHutDaUTFBxABWBhtmB9JjkAfAPwuQEUXECRC/tmDUCATzx9fIYueTai+LplA=\n=pS+b\n-----END PGP SIGNATURE-----\n", "payload": "tree 98bfdfd7189ad56f8d50b6c9e5e888c101418050\nparent 25017f8bcece0f57cc1acd3b64394f30cbda11f4\nparent e665d20c020724fa356fef0214e14b4066563a29\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664526157 +0200\ncommitter GitHub <noreply@github.com> 1664526157 +0200\n\nRollup merge of #102350 - TaKO8Ki:incomplete-fn-in-struct-definition, r=fee1-dead\n\nImprove errors for incomplete functions in struct definitions\n\nGiven the following code:\n\n```rust\nfn main() {}\n\nstruct Foo {\n    fn\n}\n```\n\n[playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=29139f870511f6918324be5ddc26c345)\n\nThe current output is:\n\n```\n   Compiling playground v0.0.1 (/playground)\nerror: functions are not allowed in struct definitions\n --> src/main.rs:4:5\n  |\n4 |     fn\n  |     ^^\n  |\n  = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n  = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n\nerror: could not compile `playground` due to previous error\n```\n\nIn this case, rustc should suggest escaping `fn` to use it as an identifier.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6906e64c30ca464c1bafed5b806283665d9e8f58", "html_url": "https://github.com/rust-lang/rust/commit/6906e64c30ca464c1bafed5b806283665d9e8f58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6906e64c30ca464c1bafed5b806283665d9e8f58/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25017f8bcece0f57cc1acd3b64394f30cbda11f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/25017f8bcece0f57cc1acd3b64394f30cbda11f4", "html_url": "https://github.com/rust-lang/rust/commit/25017f8bcece0f57cc1acd3b64394f30cbda11f4"}, {"sha": "e665d20c020724fa356fef0214e14b4066563a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/e665d20c020724fa356fef0214e14b4066563a29", "html_url": "https://github.com/rust-lang/rust/commit/e665d20c020724fa356fef0214e14b4066563a29"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "25425fbb2c6a60bef537c9f31925e11fc497cf2d", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6906e64c30ca464c1bafed5b806283665d9e8f58/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6906e64c30ca464c1bafed5b806283665d9e8f58/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=6906e64c30ca464c1bafed5b806283665d9e8f58", "patch": "@@ -1753,18 +1753,24 @@ impl<'a> Parser<'a> {\n                 };\n                 // We use `parse_fn` to get a span for the function\n                 let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n-                if let Err(mut db) =\n-                    self.parse_fn(&mut AttrVec::new(), fn_parse_mode, lo, &inherited_vis)\n-                {\n-                    db.delay_as_bug();\n+                match self.parse_fn(&mut AttrVec::new(), fn_parse_mode, lo, &inherited_vis) {\n+                    Ok(_) => {\n+                        let mut err = self.struct_span_err(\n+                            lo.to(self.prev_token.span),\n+                            &format!(\"functions are not allowed in {adt_ty} definitions\"),\n+                        );\n+                        err.help(\n+                            \"unlike in C++, Java, and C#, functions are declared in `impl` blocks\",\n+                        );\n+                        err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n+                        err\n+                    }\n+                    Err(err) => {\n+                        err.cancel();\n+                        self.restore_snapshot(snapshot);\n+                        self.expected_ident_found()\n+                    }\n                 }\n-                let mut err = self.struct_span_err(\n-                    lo.to(self.prev_token.span),\n-                    &format!(\"functions are not allowed in {adt_ty} definitions\"),\n-                );\n-                err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n-                err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n-                err\n             } else if self.eat_keyword(kw::Struct) {\n                 match self.parse_item_struct() {\n                     Ok((ident, _)) => {"}, {"sha": "188257ea53a316a94cc27b7aa6eaf60bf7e716ad", "filename": "src/test/ui/parser/fn-field-parse-error-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs?ref=6906e64c30ca464c1bafed5b806283665d9e8f58", "patch": "@@ -3,7 +3,7 @@\n struct Baz {\n     inner : dyn fn ()\n     //~^ ERROR expected `,`, or `}`, found keyword `fn`\n-    //~| ERROR functions are not allowed in struct definitions\n+    //~| ERROR expected identifier, found keyword `fn`\n     //~| ERROR cannot find type `dyn` in this scope\n }\n "}, {"sha": "3bf68e8cc04fe96963a7d6f12cbc58250be952f0", "filename": "src/test/ui/parser/fn-field-parse-error-ice.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr?ref=6906e64c30ca464c1bafed5b806283665d9e8f58", "patch": "@@ -4,16 +4,18 @@ error: expected `,`, or `}`, found keyword `fn`\n LL |     inner : dyn fn ()\n    |                ^ help: try adding a comma: `,`\n \n-error: functions are not allowed in struct definitions\n+error: expected identifier, found keyword `fn`\n   --> $DIR/fn-field-parse-error-ice.rs:4:17\n    |\n LL | struct Baz {\n    |        --- while parsing this struct\n LL |     inner : dyn fn ()\n-   |                 ^^\n+   |                 ^^ expected identifier, found keyword\n    |\n-   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n-   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+help: escape `fn` to use it as an identifier\n+   |\n+LL |     inner : dyn r#fn ()\n+   |                 ++\n \n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/fn-field-parse-error-ice.rs:4:13"}, {"sha": "cd8a79ba6874130a76ca66cfdb49a3335468abb7", "filename": "src/test/ui/structs/incomplete-fn-in-struct-definition.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.rs?ref=6906e64c30ca464c1bafed5b806283665d9e8f58", "patch": "@@ -0,0 +1,5 @@\n+fn main() {}\n+\n+struct S {\n+    fn: u8 //~ ERROR expected identifier, found keyword `fn`\n+}"}, {"sha": "0d12ba9c91688b316a77012424607cacbb88aadb", "filename": "src/test/ui/structs/incomplete-fn-in-struct-definition.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6906e64c30ca464c1bafed5b806283665d9e8f58/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fincomplete-fn-in-struct-definition.stderr?ref=6906e64c30ca464c1bafed5b806283665d9e8f58", "patch": "@@ -0,0 +1,15 @@\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/incomplete-fn-in-struct-definition.rs:4:5\n+   |\n+LL | struct S {\n+   |        - while parsing this struct\n+LL |     fn: u8\n+   |     ^^ expected identifier, found keyword\n+   |\n+help: escape `fn` to use it as an identifier\n+   |\n+LL |     r#fn: u8\n+   |     ++\n+\n+error: aborting due to previous error\n+"}]}