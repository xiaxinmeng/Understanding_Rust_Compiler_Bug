{"sha": "ed82b5a70e0ddeea284addef7762375ae5880672", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkODJiNWE3MGUwZGRlZWEyODRhZGRlZjc3NjIzNzVhZTU4ODA2NzI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-23T15:54:32Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-30T15:37:44Z"}, "message": "remove Copy impls from iterators", "tree": {"sha": "26e98bf39719ee5c9695ed9847ba3170b249e742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e98bf39719ee5c9695ed9847ba3170b249e742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed82b5a70e0ddeea284addef7762375ae5880672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed82b5a70e0ddeea284addef7762375ae5880672", "html_url": "https://github.com/rust-lang/rust/commit/ed82b5a70e0ddeea284addef7762375ae5880672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed82b5a70e0ddeea284addef7762375ae5880672/comments", "author": null, "committer": null, "parents": [{"sha": "9070345c0ef6ceb38aced40aee3deee4ca2f8e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/9070345c0ef6ceb38aced40aee3deee4ca2f8e17", "html_url": "https://github.com/rust-lang/rust/commit/9070345c0ef6ceb38aced40aee3deee4ca2f8e17"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "8f3c0a4483574cf24e6699c1a3a39ea141cba3b8", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ed82b5a70e0ddeea284addef7762375ae5880672", "patch": "@@ -1329,7 +1329,7 @@ impl<T, D, I> ExactSizeIterator for Cloned<I> where\n {}\n \n /// An iterator that repeats endlessly\n-#[derive(Clone, Copy)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Cycle<I> {\n@@ -1827,7 +1827,6 @@ impl<I> RandomAccessIterator for Enumerate<I> where I: RandomAccessIterator {\n /// An iterator with a `peek()` that returns an optional reference to the next element.\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy)]\n pub struct Peekable<T, I> where I: Iterator<Item=T> {\n     iter: I,\n     peeked: Option<T>,\n@@ -2501,7 +2500,7 @@ impl<A, St, F> Iterator for Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A\n \n /// An infinite iterator starting at `start` and advancing by `step` with each\n /// iteration\n-#[derive(Clone, Copy)]\n+#[derive(Clone)]\n #[unstable(feature = \"core\",\n            reason = \"may be renamed or replaced by range notation adapaters\")]\n pub struct Counter<A> {\n@@ -2537,7 +2536,7 @@ impl<A: Add<Output=A> + Clone> Iterator for Counter<A> {\n }\n \n /// An iterator over the range [start, stop)\n-#[derive(Clone, Copy)]\n+#[derive(Clone)]\n #[unstable(feature = \"core\",\n            reason = \"will be replaced by range notation\")]\n pub struct Range<A> {"}, {"sha": "a368ddba9bc30d177d8b7913c69ee54c1d176532", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=ed82b5a70e0ddeea284addef7762375ae5880672", "patch": "@@ -41,7 +41,6 @@ use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n use default::Default;\n use iter::*;\n-use marker::Copy;\n use num::Int;\n use ops::{FnMut, self, Index};\n #[cfg(stage0)]\n@@ -800,16 +799,14 @@ impl<'a, T> Iter<'a, T> {\n     }\n }\n \n-impl<'a,T> Copy for Iter<'a,T> {}\n-\n iterator!{struct Iter -> *const T, &'a T}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> { *self }\n+    fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, marker: self.marker } }\n }\n \n #[unstable(feature = \"core\", reason = \"trait is experimental\")]"}, {"sha": "f545c56a060ca5e2f930ee8eb11f5a7170126b70", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ed82b5a70e0ddeea284addef7762375ae5880672", "patch": "@@ -18,6 +18,7 @@\n \n use self::Searcher::{Naive, TwoWay, TwoWayLong};\n \n+use clone::Clone;\n use cmp::{self, Eq};\n use default::Default;\n use error::Error;\n@@ -279,7 +280,7 @@ Section: Iterators\n /// Iterator for the char (representing *Unicode Scalar Values*) of a string\n ///\n /// Created with the method `.chars()`.\n-#[derive(Clone, Copy)]\n+#[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n     iter: slice::Iter<'a, u8>\n@@ -1007,11 +1008,11 @@ fn run_utf8_validation_iterator(iter: &mut slice::Iter<u8>)\n     let whole = iter.as_slice();\n     loop {\n         // save the current thing we're pointing at.\n-        let old = *iter;\n+        let old = iter.clone();\n \n         // restore the iterator we had at the start of this codepoint.\n         macro_rules! err { () => {{\n-            *iter = old;\n+            *iter = old.clone();\n             return Err(Utf8Error::InvalidByte(whole.len() - iter.as_slice().len()))\n         }}}\n "}, {"sha": "2590b204502182e7959403571bf56060696ed87c", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=ed82b5a70e0ddeea284addef7762375ae5880672", "patch": "@@ -366,32 +366,32 @@ fn test_iterator_size_hint() {\n     let vi = v.iter();\n \n     assert_eq!(c.size_hint(), (uint::MAX, None));\n-    assert_eq!(vi.size_hint(), (10, Some(10)));\n-\n-    assert_eq!(c.take(5).size_hint(), (5, Some(5)));\n-    assert_eq!(c.skip(5).size_hint().1, None);\n-    assert_eq!(c.take_while(|_| false).size_hint(), (0, None));\n-    assert_eq!(c.skip_while(|_| false).size_hint(), (0, None));\n-    assert_eq!(c.enumerate().size_hint(), (uint::MAX, None));\n-    assert_eq!(c.chain(vi.map(|&i| i)).size_hint(), (uint::MAX, None));\n-    assert_eq!(c.zip(vi).size_hint(), (10, Some(10)));\n-    assert_eq!(c.scan(0i, |_,_| Some(0i)).size_hint(), (0, None));\n-    assert_eq!(c.filter(|_| false).size_hint(), (0, None));\n-    assert_eq!(c.map(|_| 0i).size_hint(), (uint::MAX, None));\n+    assert_eq!(vi.clone().size_hint(), (10, Some(10)));\n+\n+    assert_eq!(c.clone().take(5).size_hint(), (5, Some(5)));\n+    assert_eq!(c.clone().skip(5).size_hint().1, None);\n+    assert_eq!(c.clone().take_while(|_| false).size_hint(), (0, None));\n+    assert_eq!(c.clone().skip_while(|_| false).size_hint(), (0, None));\n+    assert_eq!(c.clone().enumerate().size_hint(), (uint::MAX, None));\n+    assert_eq!(c.clone().chain(vi.clone().map(|&i| i)).size_hint(), (uint::MAX, None));\n+    assert_eq!(c.clone().zip(vi.clone()).size_hint(), (10, Some(10)));\n+    assert_eq!(c.clone().scan(0i, |_,_| Some(0i)).size_hint(), (0, None));\n+    assert_eq!(c.clone().filter(|_| false).size_hint(), (0, None));\n+    assert_eq!(c.clone().map(|_| 0i).size_hint(), (uint::MAX, None));\n     assert_eq!(c.filter_map(|_| Some(0i)).size_hint(), (0, None));\n \n-    assert_eq!(vi.take(5).size_hint(), (5, Some(5)));\n-    assert_eq!(vi.take(12).size_hint(), (10, Some(10)));\n-    assert_eq!(vi.skip(3).size_hint(), (7, Some(7)));\n-    assert_eq!(vi.skip(12).size_hint(), (0, Some(0)));\n-    assert_eq!(vi.take_while(|_| false).size_hint(), (0, Some(10)));\n-    assert_eq!(vi.skip_while(|_| false).size_hint(), (0, Some(10)));\n-    assert_eq!(vi.enumerate().size_hint(), (10, Some(10)));\n-    assert_eq!(vi.chain(v2.iter()).size_hint(), (13, Some(13)));\n-    assert_eq!(vi.zip(v2.iter()).size_hint(), (3, Some(3)));\n-    assert_eq!(vi.scan(0i, |_,_| Some(0i)).size_hint(), (0, Some(10)));\n-    assert_eq!(vi.filter(|_| false).size_hint(), (0, Some(10)));\n-    assert_eq!(vi.map(|&i| i+1).size_hint(), (10, Some(10)));\n+    assert_eq!(vi.clone().take(5).size_hint(), (5, Some(5)));\n+    assert_eq!(vi.clone().take(12).size_hint(), (10, Some(10)));\n+    assert_eq!(vi.clone().skip(3).size_hint(), (7, Some(7)));\n+    assert_eq!(vi.clone().skip(12).size_hint(), (0, Some(0)));\n+    assert_eq!(vi.clone().take_while(|_| false).size_hint(), (0, Some(10)));\n+    assert_eq!(vi.clone().skip_while(|_| false).size_hint(), (0, Some(10)));\n+    assert_eq!(vi.clone().enumerate().size_hint(), (10, Some(10)));\n+    assert_eq!(vi.clone().chain(v2.iter()).size_hint(), (13, Some(13)));\n+    assert_eq!(vi.clone().zip(v2.iter()).size_hint(), (3, Some(3)));\n+    assert_eq!(vi.clone().scan(0i, |_,_| Some(0i)).size_hint(), (0, Some(10)));\n+    assert_eq!(vi.clone().filter(|_| false).size_hint(), (0, Some(10)));\n+    assert_eq!(vi.clone().map(|&i| i+1).size_hint(), (10, Some(10)));\n     assert_eq!(vi.filter_map(|_| Some(0i)).size_hint(), (0, Some(10)));\n }\n \n@@ -904,7 +904,7 @@ fn bench_multiple_take(b: &mut Bencher) {\n     b.iter(|| {\n         let n = it.next().unwrap();\n         for _ in 0u..n {\n-            it.take(it.next().unwrap()).all(|_| true);\n+            it.clone().take(it.next().unwrap()).all(|_| true);\n         }\n     });\n }"}, {"sha": "9a757c0c980dde279e0e2412fb6af74ac34c5906", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed82b5a70e0ddeea284addef7762375ae5880672/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=ed82b5a70e0ddeea284addef7762375ae5880672", "patch": "@@ -447,7 +447,7 @@ impl<'a> Iterator for Utf16Items<'a> {\n             Some(Utf16Item::LoneSurrogate(u))\n         } else {\n             // preserve state for rewinding.\n-            let old = self.iter;\n+            let old = self.iter.clone();\n \n             let u2 = match self.iter.next() {\n                 Some(u2) => *u2,\n@@ -457,7 +457,7 @@ impl<'a> Iterator for Utf16Items<'a> {\n             if u2 < 0xDC00 || u2 > 0xDFFF {\n                 // not a trailing surrogate so we're not a valid\n                 // surrogate pair, so rewind to redecode u2 next time.\n-                self.iter = old;\n+                self.iter = old.clone();\n                 return Some(Utf16Item::LoneSurrogate(u))\n             }\n "}]}