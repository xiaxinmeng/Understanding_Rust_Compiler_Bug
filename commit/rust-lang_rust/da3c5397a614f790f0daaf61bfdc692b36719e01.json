{"sha": "da3c5397a614f790f0daaf61bfdc692b36719e01", "node_id": "C_kwDOAAsO6NoAKGRhM2M1Mzk3YTYxNGY3OTBmMGRhYWY2MWJmZGM2OTJiMzY3MTllMDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-12T22:27:18Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-18T18:23:48Z"}, "message": "Enforce that dyn* casts are actually pointer-sized", "tree": {"sha": "c9d5a60b09264d18e19cf9af81f763d44ac431f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d5a60b09264d18e19cf9af81f763d44ac431f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3c5397a614f790f0daaf61bfdc692b36719e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3c5397a614f790f0daaf61bfdc692b36719e01", "html_url": "https://github.com/rust-lang/rust/commit/da3c5397a614f790f0daaf61bfdc692b36719e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3c5397a614f790f0daaf61bfdc692b36719e01/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bfb35511cbcff59ce1454d3db627b576d7e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bfb35511cbcff59ce1454d3db627b576d7e92", "html_url": "https://github.com/rust-lang/rust/commit/fd3bfb35511cbcff59ce1454d3db627b576d7e92"}], "stats": {"total": 139, "additions": 131, "deletions": 8}, "files": [{"sha": "a748af65774485d7824e9935429ca0f8f938e61a", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -270,6 +270,8 @@ language_item_table! {\n     TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     TryTraitFromYeet,        sym::from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n \n+    PointerSized,            sym::pointer_sized,       pointer_sized,              Target::Trait,          GenericRequirement::Exact(0);\n+\n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n     PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;\n "}, {"sha": "c1e4ab600f34f204242165cba1ed560b1fd580cb", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -775,7 +775,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         // Check the obligations of the cast -- for example, when casting\n         // `usize` to `dyn* Clone + 'static`:\n-        let obligations = predicates\n+        let mut obligations: Vec<_> = predicates\n             .iter()\n             .map(|predicate| {\n                 // For each existential predicate (e.g., `?Self: Clone`) substitute\n@@ -785,16 +785,33 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 let predicate = predicate.with_self_ty(self.tcx, a);\n                 Obligation::new(self.tcx, self.cause.clone(), self.param_env, predicate)\n             })\n-            // Enforce the region bound (e.g., `usize: 'static`, in our example).\n-            .chain([Obligation::new(\n+            .chain([\n+                // Enforce the region bound (e.g., `usize: 'static`, in our example).\n+                Obligation::new(\n+                    self.tcx,\n+                    self.cause.clone(),\n+                    self.param_env,\n+                    ty::Binder::dummy(ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(\n+                        a, b_region,\n+                    ))),\n+                ),\n+            ])\n+            .collect();\n+\n+        // Enforce that the type is `usize`/pointer-sized. For now, only those\n+        // can be coerced to `dyn*`, except for `dyn* -> dyn*` upcasts.\n+        if !a.is_dyn_star() {\n+            obligations.push(Obligation::new(\n                 self.tcx,\n                 self.cause.clone(),\n                 self.param_env,\n-                self.tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n-                    ty::OutlivesPredicate(a, b_region),\n-                ))),\n-            )])\n-            .collect();\n+                ty::Binder::dummy(ty::TraitRef::new(\n+                    self.tcx.require_lang_item(hir::LangItem::PointerSized, Some(self.cause.span)),\n+                    self.tcx.mk_substs_trait(a, &[]),\n+                ))\n+                .to_poly_trait_predicate(),\n+            ));\n+        }\n \n         Ok(InferOk {\n             value: (vec![Adjustment { kind: Adjust::DynStar, target: b }], b),"}, {"sha": "199b2d32b9d4c1e6b01492321a982f7052713f93", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -1067,6 +1067,7 @@ symbols! {\n         plugins,\n         pointee_trait,\n         pointer,\n+        pointer_sized,\n         poll,\n         position,\n         post_dash_lto: \"post-lto\","}, {"sha": "c77f035d6b97fff1a43ccf75f04c2ac496d0796c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -304,6 +304,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.assemble_candidates_for_transmutability(obligation, &mut candidates);\n             } else if lang_items.tuple_trait() == Some(def_id) {\n                 self.assemble_candidate_for_tuple(obligation, &mut candidates);\n+            } else if lang_items.pointer_sized() == Some(def_id) {\n+                self.assemble_candidate_for_ptr_sized(obligation, &mut candidates);\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {\n                     // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -1047,4 +1049,29 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Placeholder(_) => {}\n         }\n     }\n+\n+    fn assemble_candidate_for_ptr_sized(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        candidates: &mut SelectionCandidateSet<'tcx>,\n+    ) {\n+        // The regions of a type don't affect the size of the type\n+        let self_ty = self\n+            .tcx()\n+            .erase_regions(self.tcx().erase_late_bound_regions(obligation.predicate.self_ty()));\n+\n+        // But if there are inference variables, we have to wait until it's resolved.\n+        if self_ty.has_non_region_infer() {\n+            candidates.ambiguous = true;\n+            return;\n+        }\n+\n+        let usize_layout =\n+            self.tcx().layout_of(ty::ParamEnv::empty().and(self.tcx().types.usize)).unwrap().layout;\n+        if let Ok(layout) = self.tcx().layout_of(obligation.param_env.and(self_ty))\n+            && layout.layout.size().bytes() == usize_layout.size().bytes()\n+        {\n+            candidates.vec.push(BuiltinCandidate { has_nested: false });\n+        }\n+    }\n }"}, {"sha": "42c342801976957a9696b25b92511653d313b918", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -809,6 +809,15 @@ pub trait Destruct {}\n #[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Tuple {}\n \n+/// A marker for things\n+#[unstable(feature = \"pointer_sized_trait\", issue = \"none\")]\n+#[cfg_attr(not(bootstrap), lang = \"pointer_sized\")]\n+#[rustc_on_unimplemented(\n+    message = \"`{Self}` needs to be a pointer-sized type\",\n+    label = \"`{Self}` needs to be a pointer-sized type\"\n+)]\n+pub trait PointerSized {}\n+\n /// Implementations of `Copy` for primitive types.\n ///\n /// Implementations that cannot be described in Rust"}, {"sha": "e19e36cc7d7b5a7ed70400259361b3d009e3f5a8", "filename": "src/test/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -0,0 +1,15 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn dyn_debug(_: (dyn* Debug + '_)) {\n+\n+}\n+\n+fn polymorphic<T: Debug + ?Sized>(t: &T) {\n+    dyn_debug(t);\n+    //~^ ERROR `&T` needs to be a pointer-sized type\n+}\n+\n+fn main() {}"}, {"sha": "53ccbe43dcc9eea389cb3712f2e88028d378a8b6", "filename": "src/test/ui/dyn-star/check-size-at-cast-polymorphic-bad.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: `&T` needs to be a pointer-sized type\n+  --> $DIR/check-size-at-cast-polymorphic-bad.rs:11:15\n+   |\n+LL |     dyn_debug(t);\n+   |               ^ `&T` needs to be a pointer-sized type\n+   |\n+   = help: the trait `PointerSized` is not implemented for `&T`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerSized {\n+   |                                          ++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5c0a3d256f60742da6c3a2d0b19a428c5f3251b6", "filename": "src/test/ui/dyn-star/check-size-at-cast-polymorphic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn dyn_debug(_: (dyn* Debug + '_)) {\n+\n+}\n+\n+fn polymorphic<T: Debug>(t: &T) {\n+    dyn_debug(t);\n+}\n+\n+fn main() {}"}, {"sha": "1f22f798361541600bc877d8ee90fe2fe0565d2c", "filename": "src/test/ui/dyn-star/check-size-at-cast.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -0,0 +1,10 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {\n+    let i = [1, 2, 3, 4] as dyn* Debug;\n+    //~^ ERROR `[i32; 4]` needs to be a pointer-sized type\n+    dbg!(i);\n+}"}, {"sha": "af2a1ccf71c6d6e7851c389a030aa4a0d43e2c0f", "filename": "src/test/ui/dyn-star/check-size-at-cast.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da3c5397a614f790f0daaf61bfdc692b36719e01/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr?ref=da3c5397a614f790f0daaf61bfdc692b36719e01", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: `[i32; 4]` needs to be a pointer-sized type\n+  --> $DIR/check-size-at-cast.rs:7:13\n+   |\n+LL |     let i = [1, 2, 3, 4] as dyn* Debug;\n+   |             ^^^^^^^^^^^^ `[i32; 4]` needs to be a pointer-sized type\n+   |\n+   = help: the trait `PointerSized` is not implemented for `[i32; 4]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}