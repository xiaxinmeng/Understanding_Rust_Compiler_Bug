{"sha": "89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "node_id": "C_kwDOAAsO6NoAKDg5YjlmN2IyODRhYWNjNWY4NjEzNDM4YjgwZTRkZDdiZGQxMDU0OWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-10T11:53:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-10T11:53:15Z"}, "message": "Auto merge of #92719 - matthiaskrgr:rollup-tc7oqys, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #92248 (Normalize struct tail type when checking Pointee trait)\n - #92357 (Fix invalid removal of newlines from doc comments)\n - #92602 (Make source links look cleaner)\n - #92636 (Normalize generator-local types with unevaluated constants)\n - #92693 (Release notes: add `Result::unwrap_{,err_}unchecked`)\n - #92702 (Clean up lang_items::extract)\n - #92717 (update miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b8694672a6d2a44b6c88fd52536548df72b014f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8694672a6d2a44b6c88fd52536548df72b014f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "html_url": "https://github.com/rust-lang/rust/commit/89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df035a33b228daa700ac50712d9e16509d373e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/df035a33b228daa700ac50712d9e16509d373e41", "html_url": "https://github.com/rust-lang/rust/commit/df035a33b228daa700ac50712d9e16509d373e41"}, {"sha": "3d5db0e6b4118cd646ab82d730f6aa582bfe94ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5db0e6b4118cd646ab82d730f6aa582bfe94ca", "html_url": "https://github.com/rust-lang/rust/commit/3d5db0e6b4118cd646ab82d730f6aa582bfe94ca"}], "stats": {"total": 345, "additions": 215, "deletions": 130}, "files": [{"sha": "59d04d4ba769b8d3093b59eaa4b1a5d6ad9da5e9", "filename": "RELEASES.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -41,6 +41,8 @@ Stabilized APIs\n - [`Path::is_symlink`]\n - [`{integer}::saturating_div`]\n - [`Option::unwrap_unchecked`]\n+- [`Result::unwrap_unchecked`]\n+- [`Result::unwrap_err_unchecked`]\n - [`NonZero{unsigned}::is_power_of_two`]\n \n These APIs are now usable in const contexts:\n@@ -136,6 +138,8 @@ and related tools.\n [`Path::is_symlink`]: https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.is_symlink\n [`{integer}::saturating_div`]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.saturating_div\n [`Option::unwrap_unchecked`]: https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.unwrap_unchecked\n+[`Result::unwrap_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_unchecked\n+[`Result::unwrap_err_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_err_unchecked\n [`NonZero{unsigned}::is_power_of_two`]: https://doc.rust-lang.org/stable/std/num/struct.NonZeroU8.html#method.is_power_of_two\n [`unix::process::ExitStatusExt::core_dumped`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.core_dumped\n [`unix::process::ExitStatusExt::stopped_signal`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.stopped_signal"}, {"sha": "0a391123dd381da28d81bc0be306ef6c74280014", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -34,18 +34,11 @@ pub fn beautify_doc_string(data: Symbol) -> Symbol {\n             i += 1;\n         }\n \n-        while i < j && lines[i].trim().is_empty() {\n-            i += 1;\n-        }\n         // like the first, a last line of all stars should be omitted\n         if j > i && !lines[j - 1].is_empty() && lines[j - 1].chars().all(|c| c == '*') {\n             j -= 1;\n         }\n \n-        while j > i && lines[j - 1].trim().is_empty() {\n-            j -= 1;\n-        }\n-\n         if i != 0 || j != lines.len() { Some((i, j)) } else { None }\n     }\n "}, {"sha": "def0c1d06871b252dfa98327686fd05c78e56e7f", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -151,20 +151,12 @@ impl<CTX> HashStable<CTX> for LangItem {\n /// Extracts the first `lang = \"$name\"` out of a list of attributes.\n /// The attributes `#[panic_handler]` and `#[alloc_error_handler]`\n /// are also extracted out when found.\n-///\n-/// About the `check_name` argument: passing in a `Session` would be simpler,\n-/// because then we could call `Session::check_name` directly. But we want to\n-/// avoid the need for `rustc_hir` to depend on `rustc_session`, so we\n-/// use a closure instead.\n-pub fn extract<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<(Symbol, Span)>\n-where\n-    F: Fn(&'a ast::Attribute, Symbol) -> bool,\n-{\n+pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n     attrs.iter().find_map(|attr| {\n         Some(match attr {\n-            _ if check_name(attr, sym::lang) => (attr.value_str()?, attr.span),\n-            _ if check_name(attr, sym::panic_handler) => (sym::panic_impl, attr.span),\n-            _ if check_name(attr, sym::alloc_error_handler) => (sym::oom, attr.span),\n+            _ if attr.has_name(sym::lang) => (attr.value_str()?, attr.span),\n+            _ if attr.has_name(sym::panic_handler) => (sym::panic_impl, attr.span),\n+            _ if attr.has_name(sym::alloc_error_handler) => (sym::oom, attr.span),\n             _ => return None,\n         })\n     })"}, {"sha": "78748209d1a5bd55a0cd559a597451a5fa77c9e9", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -18,13 +18,9 @@ pub static WEAK_ITEMS_REFS: SyncLazy<StableMap<Symbol, LangItem>> = SyncLazy::ne\n     map\n });\n \n-/// The `check_name` argument avoids the need for `rustc_hir` to depend on\n-/// `rustc_session`.\n-pub fn link_name<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<Symbol>\n-where\n-    F: Fn(&'a ast::Attribute, Symbol) -> bool\n+pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol>\n {\n-    lang_items::extract(check_name, attrs).and_then(|(name, _)| {\n+    lang_items::extract(attrs).and_then(|(name, _)| {\n         $(if name == sym::$name {\n             Some(sym::$sym)\n         } else)* {"}, {"sha": "0d37711d72e67e60f704a5505fa82abd1ac9a6cc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -2143,9 +2143,12 @@ impl<'tcx> TyS<'tcx> {\n     }\n \n     /// Returns the type of metadata for (potentially fat) pointers to this type.\n-    pub fn ptr_metadata_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        // FIXME:\u00a0should this normalize?\n-        let tail = tcx.struct_tail_without_normalization(self);\n+    pub fn ptr_metadata_ty(\n+        &'tcx self,\n+        tcx: TyCtxt<'tcx>,\n+        normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n+    ) -> Ty<'tcx> {\n+        let tail = tcx.struct_tail_with_normalize(self, normalize);\n         match tail.kind() {\n             // Sized types\n             ty::Infer(ty::IntVar(_) | ty::FloatVar(_))"}, {"sha": "8793264a47fbb3438c0f82e00bca58444de6e594", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn struct_tail_with_normalize(\n         self,\n         mut ty: Ty<'tcx>,\n-        normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,\n+        mut normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     ) -> Ty<'tcx> {\n         let recursion_limit = self.recursion_limit();\n         for iteration in 0.. {"}, {"sha": "08247e6f22af161113f92ddbc0d823e3c9e937d9", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -726,9 +726,13 @@ fn sanitize_witness<'tcx>(\n     saved_locals: &GeneratorSavedLocals,\n ) {\n     let did = body.source.def_id();\n-    let allowed_upvars = tcx.erase_regions(upvars);\n+    let param_env = tcx.param_env(did);\n+\n+    let allowed_upvars = tcx.normalize_erasing_regions(param_env, upvars);\n     let allowed = match witness.kind() {\n-        &ty::GeneratorWitness(s) => tcx.erase_late_bound_regions(s),\n+        &ty::GeneratorWitness(interior_tys) => {\n+            tcx.normalize_erasing_late_bound_regions(param_env, interior_tys)\n+        }\n         _ => {\n             tcx.sess.delay_span_bug(\n                 body.span,\n@@ -738,8 +742,6 @@ fn sanitize_witness<'tcx>(\n         }\n     };\n \n-    let param_env = tcx.param_env(did);\n-\n     for (local, decl) in body.local_decls.iter_enumerated() {\n         // Ignore locals which are internal or not saved between yields.\n         if !saved_locals.contains(local) || decl.internal {"}, {"sha": "0c934ecc91376b121e4b7f648280c51cbbcc1b69", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -10,7 +10,6 @@\n use crate::check_attr::target_from_impl_item;\n use crate::weak_lang_items;\n \n-use rustc_ast::Attribute;\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -57,8 +56,7 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n \n     fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId) {\n         let attrs = self.tcx.hir().attrs(hir_id);\n-        let check_name = |attr: &Attribute, sym| attr.has_name(sym);\n-        if let Some((value, span)) = extract(check_name, &attrs) {\n+        if let Some((value, span)) = extract(&attrs) {\n             match ITEM_REFS.get(&value).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {"}, {"sha": "21514d19f6aac2223b94e2f2927a23a1ac0137aa", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,6 +1,5 @@\n //! Validity checking for weak lang items\n \n-use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -103,9 +102,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n-        let check_name = |attr: &Attribute, sym| attr.has_name(sym);\n         let attrs = self.tcx.hir().attrs(i.hir_id());\n-        if let Some((lang_item, _)) = lang_items::extract(check_name, attrs) {\n+        if let Some((lang_item, _)) = lang_items::extract(attrs) {\n             self.register(lang_item, i.span);\n         }\n         intravisit::walk_foreign_item(self, i)"}, {"sha": "035bc9b00c9305f3545b56b7ae7bfa47edd088eb", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1400,8 +1400,17 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // Any type with multiple potential metadata types is therefore not eligible.\n                 let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n-                // FIXME:\u00a0should this normalize?\n-                let tail = selcx.tcx().struct_tail_without_normalization(self_ty);\n+                let tail = selcx.tcx().struct_tail_with_normalize(self_ty, |ty| {\n+                    normalize_with_depth(\n+                        selcx,\n+                        obligation.param_env,\n+                        obligation.cause.clone(),\n+                        obligation.recursion_depth + 1,\n+                        ty,\n+                    )\n+                    .value\n+                });\n+\n                 match tail.kind() {\n                     ty::Bool\n                     | ty::Char\n@@ -1435,7 +1444,12 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Bound(..)\n                     | ty::Placeholder(..)\n                     | ty::Infer(..)\n-                    | ty::Error(_) => false,\n+                    | ty::Error(_) => {\n+                        if tail.has_infer_types() {\n+                            candidate_set.mark_ambiguous();\n+                        }\n+                        false\n+                    },\n                 }\n             }\n             super::ImplSource::Param(..) => {\n@@ -1640,18 +1654,30 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n     _: ImplSourcePointeeData,\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n-\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n-    let substs = tcx.mk_substs([self_ty.into()].iter());\n \n+    let mut obligations = vec![];\n+    let metadata_ty = self_ty.ptr_metadata_ty(tcx, |ty| {\n+        normalize_with_depth_to(\n+            selcx,\n+            obligation.param_env,\n+            obligation.cause.clone(),\n+            obligation.recursion_depth + 1,\n+            ty,\n+            &mut obligations,\n+        )\n+    });\n+\n+    let substs = tcx.mk_substs([self_ty.into()].iter());\n     let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: metadata_def_id },\n-        ty: self_ty.ptr_metadata_ty(tcx),\n+        ty: metadata_ty,\n     };\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n+        .with_addl_obligations(obligations)\n }\n \n fn confirm_fn_pointer_candidate<'cx, 'tcx>("}, {"sha": "ccf8d1d9cea10164f9946e83290225833ff1702d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -21,7 +21,6 @@ use crate::constrained_generic_params as cgp;\n use crate::errors;\n use crate::middle::resolve_lifetime as rl;\n use rustc_ast as ast;\n-use rustc_ast::Attribute;\n use rustc_ast::{MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n@@ -3120,8 +3119,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     if tcx.is_weak_lang_item(id) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n     }\n-    let check_name = |attr: &Attribute, sym| attr.has_name(sym);\n-    if let Some(name) = weak_lang_items::link_name(check_name, attrs) {\n+    if let Some(name) = weak_lang_items::link_name(attrs) {\n         codegen_fn_attrs.export_name = Some(name);\n         codegen_fn_attrs.link_name = Some(name);\n     }"}, {"sha": "4ba4e2a528e60a381d254b333185a1b98e34a818", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -35,8 +35,8 @@\n //! development you may want to press the `[-]` button near the top of the\n //! page to collapse it into a more skimmable view.\n //!\n-//! While you are looking at that `[-]` button also notice the `[src]`\n-//! button. Rust's API documentation comes with the source code and you are\n+//! While you are looking at that `[-]` button also notice the `source`\n+//! link. Rust's API documentation comes with the source code and you are\n //! encouraged to read it. The standard library source is generally high\n //! quality and a peek behind the curtains is often enlightening.\n //!"}, {"sha": "2ae203e0d2f8866c339a46ead3465345a216d79b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -65,7 +65,7 @@ crate struct Context<'tcx> {\n     ///\n     /// [#82381]: https://github.com/rust-lang/rust/issues/82381\n     crate shared: Rc<SharedContext<'tcx>>,\n-    /// This flag indicates whether `[src]` links should be generated or not. If\n+    /// This flag indicates whether source links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n     crate include_sources: bool,"}, {"sha": "2038e3381862b9f2766fef9d210dea7adf65b61e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -182,7 +182,7 @@ impl StylePath {\n \n fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n     if let Some(l) = cx.src_href(item) {\n-        write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"goto source code\\\">[src]</a>\", l)\n+        write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"goto source code\\\">source</a>\", l)\n     }\n }\n \n@@ -799,7 +799,7 @@ fn render_stability_since_raw(\n     const_stability: Option<ConstStability>,\n     containing_ver: Option<Symbol>,\n     containing_const_ver: Option<Symbol>,\n-) {\n+) -> bool {\n     let ver = ver.filter(|inner| !inner.is_empty());\n \n     match (ver, const_stability) {\n@@ -842,8 +842,9 @@ fn render_stability_since_raw(\n                 v\n             );\n         }\n-        _ => {}\n+        _ => return false,\n     }\n+    true\n }\n \n fn render_assoc_item(\n@@ -1632,7 +1633,7 @@ fn render_impl(\n }\n \n // Render the items that appear on the right side of methods, impls, and\n-// associated types. For example \"1.0.0 (const: 1.39.0) [src]\".\n+// associated types. For example \"1.0.0 (const: 1.39.0) \u00b7 source\".\n fn render_rightside(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n@@ -1650,13 +1651,16 @@ fn render_rightside(\n     };\n \n     write!(w, \"<div class=\\\"rightside\\\">\");\n-    render_stability_since_raw(\n+    let has_stability = render_stability_since_raw(\n         w,\n         item.stable_since(tcx),\n         const_stability,\n         containing_item.stable_since(tcx),\n         const_stable_since,\n     );\n+    if has_stability {\n+        w.write_str(\" \u00b7 \");\n+    }\n \n     write_srclink(cx, item, w);\n     w.write_str(\"</div>\");"}, {"sha": "9f2830ba54215bf85500f80ba8e747524a03a81e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -108,10 +108,10 @@ pub(super) fn print_item(\n     );\n     let stability_since_raw: String = stability_since_raw.into_inner();\n \n-    // Write `src` tag\n+    // Write source tag\n     //\n     // When this item is part of a `crate use` in a downstream crate, the\n-    // [src] link in the downstream documentation will actually come back to\n+    // source link in the downstream documentation will actually come back to\n     // this page, and this link will be auto-clicked. The `id` attribute is\n     // used to find the link to auto-click.\n     let src_href =\n@@ -1467,7 +1467,7 @@ fn render_stability_since(\n         item.const_stability(tcx),\n         containing_item.stable_since(tcx),\n         containing_item.const_stable_since(tcx),\n-    )\n+    );\n }\n \n fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl, cx: &Context<'_>) -> Ordering {"}, {"sha": "d7f33d6131c8499d3612e09c78735fc58f6f502e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -137,17 +137,25 @@ h1, h2, h3, h4 {\n \tmargin: 15px 0 5px 0;\n }\n h1.fqn {\n+\tmargin: 0;\n+\tpadding: 0;\n+}\n+.main-heading {\n \tdisplay: flex;\n-\tborder-bottom: 1px dashed;\n-\tmargin-top: 0;\n+\tborder-bottom: 1px dashed #DDDDDD;\n+\tpadding-bottom: 6px;\n+\tmargin-bottom: 15px;\n \n \t/* workaround to keep flex from breaking below 700 px width due to the float: right on the nav\n \t   above the h1 */\n \tpadding-left: 1px;\n }\n-h1.fqn > .in-band > a:hover {\n+.main-heading a:hover {\n \ttext-decoration: underline;\n }\n+#toggle-all-docs {\n+\ttext-decoration: none;\n+}\n /* The only headings that get underlines are:\n \t Markdown-generated headings within the top-doc\n \t Rustdoc-generated h2 section headings (e.g. \"Implementations\", \"Required Methods\", etc)\n@@ -195,11 +203,13 @@ h1, h2, h3, h4, h5, h6,\n .sidebar, a.source, .search-input, .search-results .result-name,\n .content table td:first-child > a,\n .item-left > a,\n-div.item-list .out-of-band, span.since,\n+.out-of-band,\n+span.since,\n #source-sidebar, #sidebar-toggle,\n details.rustdoc-toggle > summary::before,\n div.impl-items > div:not(.docblock):not(.item-info),\n-.content ul.crate a.crate, a.srclink,\n+.content ul.crate a.crate,\n+a.srclink,\n /* This selector is for the items listed in the \"all items\" page. */\n #main-content > ul.docblock > li > a {\n \tfont-family: \"Fira Sans\", Arial, NanumBarunGothic, sans-serif;\n@@ -609,10 +619,12 @@ nav.sub {\n .content .out-of-band {\n \tflex-grow: 0;\n \ttext-align: right;\n-\tfont-size: 1.4375rem;\n-\tmargin: 0px;\n+\tmargin-left: auto;\n+\tmargin-right: 0;\n+\tfont-size: 1.15rem;\n \tpadding: 0 0 0 12px;\n \tfont-weight: normal;\n+\tfloat: right;\n }\n \n .method > .code-header, .trait-impl > .code-header, .invisible > .code-header {\n@@ -1082,7 +1094,7 @@ body.blur > :not(#help) {\n \tfont-size: initial;\n }\n \n-.impl-items .since, .impl .since, .methods .since {\n+.rightside {\n \tpadding-left: 12px;\n \tpadding-right: 2px;\n \tposition: initial;\n@@ -1160,10 +1172,6 @@ a.test-arrow:hover{\n \tfont-weight: 300;\n }\n \n-.since + .srclink {\n-\tpadding-left: 10px;\n-}\n-\n .item-spacer {\n \twidth: 100%;\n \theight: 12px;"}, {"sha": "1b6984a252a9e63bbbc6739d513208f836d4c92b", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -222,7 +222,7 @@ nav.main .separator {\n a {\n \tcolor: #39AFD7;\n }\n-a.srclink,\n+\n a#toggle-all-docs,\n a.anchor,\n .small-section-header a,"}, {"sha": "a006a9b6726c23d1915149f786eca44a7f3491e9", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -180,7 +180,7 @@ nav.main .separator {\n a {\n \tcolor: #D2991D;\n }\n-a.srclink,\n+\n a#toggle-all-docs,\n a.anchor,\n .small-section-header a,"}, {"sha": "7e6e0b4879aa2d125adb3c5f5cfa8afba1572791", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -177,7 +177,7 @@ nav.main .separator {\n a {\n \tcolor: #3873AD;\n }\n-a.srclink,\n+\n a#toggle-all-docs,\n a.anchor,\n .small-section-header a,\n@@ -243,10 +243,6 @@ details.undocumented > summary::before {\n \tborder-color: #bfbfbf;\n }\n \n-.since {\n-\tcolor: grey;\n-}\n-\n .result-name .primitive > i, .result-name .keyword > i {\n \tcolor: black;\n }"}, {"sha": "09cd8513a6453e98936f5cc1170d7f552554438c", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,26 +1,28 @@\n-<h1 class=\"fqn\"> {#- -#}\n-    <span class=\"in-band\"> {#- -#}\n-        {{-typ-}}\n-        {#- The breadcrumbs of the item path, like std::string -#}\n-        {%- for component in path_components -%}\n-        <a href=\"{{component.path | safe}}index.html\">{{component.name}}</a>::<wbr>\n-        {%- endfor -%}\n-        <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n-        <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n-            <img src=\"{{static_root_path | safe}}clipboard{{page.resource_suffix}}.svg\" {# -#}\n-                width=\"19\" height=\"18\" {# -#}\n-                alt=\"Copy item path\"> {#- -#}\n-        </button> {#- -#}\n-    </span> {#- -#}\n-    <span class=\"out-of-band\"> {#- -#}\n-        {{- stability_since_raw | safe -}}\n-        <span id=\"render-detail\"> {#- -#}\n-            <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\"> {#- -#}\n-                [<span class=\"inner\">&#x2212;</span>] {#- -#}\n-            </a> {#- -#}\n+<div class=\"main-heading\">\n+    <h1 class=\"fqn\"> {#- -#}\n+        <span class=\"in-band\"> {#- -#}\n+            {{-typ-}}\n+            {#- The breadcrumbs of the item path, like std::string -#}\n+            {%- for component in path_components -%}\n+            <a href=\"{{component.path | safe}}index.html\">{{component.name}}</a>::<wbr>\n+            {%- endfor -%}\n+            <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n+            <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n+                <img src=\"{{static_root_path | safe}}clipboard{{page.resource_suffix}}.svg\" {# -#}\n+                    width=\"19\" height=\"18\" {# -#}\n+                    alt=\"Copy item path\"> {#- -#}\n+            </button> {#- -#}\n         </span> {#- -#}\n-        {%- if src_href -%}\n-        <a class=\"srclink\" href=\"{{src_href | safe}}\" title=\"goto source code\">[src]</a>\n-        {%- endif -%}\n+    </h1> {#- -#}\n+    <span class=\"out-of-band\"> {#- -#}\n+        {% if stability_since_raw %}\n+        {{- stability_since_raw | safe -}} \u00b7 \n+        {% endif %}\n+        {%- if src_href %}\n+        <a class=\"srclink\" href=\"{{src_href | safe}}\" title=\"goto source code\">source</a> \u00b7\n+        {% endif -%}\n+        <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\"> {#- -#}\n+            [<span class=\"inner\">&#x2212;</span>] {#- -#}\n+        </a> {#- -#}\n     </span> {#- -#}\n-</h1> {#- -#}\n+</div>"}, {"sha": "e6758287d8cb2e7a59446ef2a4a674eed0be0cca", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -13,8 +13,10 @@ reload:\n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(0, 0, 0)\"})\n assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(0, 0, 0)\"})\n assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(173, 55, 138)\"})\n-assert-css: (\".srclink\", {\"color\": \"rgb(0, 0, 0)\"})\n-assert-css: (\".srclink\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\".srclink\", {\"color\": \"rgb(56, 115, 173)\"})\n+\n+move-cursor-to: \".main-heading .srclink\"\n+assert-css: (\".srclink\", {\"text-decoration\": \"underline solid rgb(56, 115, 173)\"})\n \n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(0, 0, 0)\"})\n "}, {"sha": "9db75c59d948a8afee2126a5af6d10872c6af169", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -15,7 +15,7 @@\n goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n-assert-css: (\"h1.fqn\", {\"border-bottom-width\": \"1px\"})\n+assert-css: (\".main-heading\", {\"border-bottom-width\": \"1px\"})\n \n assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n@@ -55,7 +55,7 @@ assert-css: (\"h6#sub-sub-heading-for-struct-impl-item-doc\", {\"font-size\": \"15.2p\n goto: file://|DOC_PATH|/test_docs/enum.HeavilyDocumentedEnum.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n-assert-css: (\"h1.fqn\", {\"border-bottom-width\": \"1px\"})\n+assert-css: (\".main-heading\", {\"border-bottom-width\": \"1px\"})\n \n assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n@@ -115,7 +115,7 @@ assert-css: (\".sidebar .others h3\", {\"border-bottom-width\": \"1px\"}, ALL)\n goto: file://|DOC_PATH|/test_docs/union.HeavilyDocumentedUnion.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n-assert-css: (\"h1.fqn\", {\"border-bottom-width\": \"1px\"})\n+assert-css: (\".main-heading\", {\"border-bottom-width\": \"1px\"})\n \n assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n@@ -148,7 +148,7 @@ assert-css: (\"h6#sub-heading-for-union-impl-item-doc\", {\"border-bottom-width\": \"\n goto: file://|DOC_PATH|/test_docs/macro.heavily_documented_macro.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})\n-assert-css: (\"h1.fqn\", {\"border-bottom-width\": \"1px\"})\n+assert-css: (\".main-heading\", {\"border-bottom-width\": \"1px\"})\n \n assert-css: (\"h2#top-doc-prose-title\", {\"font-size\": \"20.8px\"})\n assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})"}, {"sha": "e11aae21e3fa6367e9c914e02dba73fa52e2cd46", "filename": "src/test/rustdoc-gui/toggle-docs.goml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,10 +1,13 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n assert-attribute: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n+assert-text: (\"#toggle-all-docs\", \"[\u2212]\")\n click: \"#toggle-all-docs\"\n wait-for: 1000\n // This is now collapsed so there shouldn't be the \"open\" attribute on details.\n assert-attribute-false: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n+assert-text: (\"#toggle-all-docs\", \"[+]\")\n click: \"#toggle-all-docs\"\n wait-for: 1000\n // Not collapsed anymore so the \"open\" attribute should be back.\n assert-attribute: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n+assert-text: (\"#toggle-all-docs\", \"[\u2212]\")"}, {"sha": "d32d3fc581f8aaca3d4edced4e69e49f270e8797", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"[src]\"\n+// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"source\"\n pub use std::iter::Iterator;"}, {"sha": "359551ab78d1e060b2a484d98eceb2ecf33f488f", "filename": "src/test/rustdoc/external-macro-src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -5,8 +5,8 @@\n #[macro_use]\n extern crate external_macro_src;\n \n-// @has foo/index.html '//a[@href=\"../src/foo/external-macro-src.rs.html#3-12\"]' '[src]'\n+// @has foo/index.html '//a[@href=\"../src/foo/external-macro-src.rs.html#3-12\"]' 'source'\n \n // @has foo/struct.Foo.html\n-// @has - '//a[@href=\"../src/foo/external-macro-src.rs.html#12\"]' '[src]'\n+// @has - '//a[@href=\"../src/foo/external-macro-src.rs.html#12\"]' 'source'\n make_foo!();"}, {"sha": "ec007e36b726c8e8cd66a7090c6ac5b886aeb321", "filename": "src/test/rustdoc/issue-16265-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,8 +1,10 @@\n pub struct Foo;\n \n-// @has issue_16265_1/traits/index.html '[src]'\n+// @has issue_16265_1/traits/index.html 'source'\n pub mod traits {\n     impl PartialEq for super::Foo {\n-        fn eq(&self, _: &super::Foo) -> bool { true }\n+        fn eq(&self, _: &super::Foo) -> bool {\n+            true\n+        }\n     }\n }"}, {"sha": "d5cd18d9daf9d80449a6f6d73280fbe6978baaf1", "filename": "src/test/rustdoc/issue-16265-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,4 +1,4 @@\n-// @has issue_16265_2/index.html '[src]'\n+// @has issue_16265_2/index.html 'source'\n \n trait Y {}\n-impl Y for Option<u32>{}\n+impl Y for Option<u32> {}"}, {"sha": "d5cb2c710cde891b4bcd85b12951ccfa87484899", "filename": "src/test/rustdoc/issue-26606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-26606.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -7,5 +7,5 @@\n extern crate issue_26606_macro;\n \n // @has issue_26606/constant.FOO.html\n-// @has - '//a[@href=\"../src/issue_26606/issue-26606.rs.html#11\"]' '[src]'\n+// @has - '//a[@href=\"../src/issue_26606/issue-26606.rs.html#11\"]' 'source'\n make_item!(FOO);"}, {"sha": "8ff114b993edbeb5cd285e76fbfc09c050137d96", "filename": "src/test/rustdoc/mixing-doc-comments-and-attrs.S1_top-doc.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.S1_top-doc.html", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.S1_top-doc.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.S1_top-doc.html?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"docblock\"><p>Hello world!\n-Goodbye!\n+<div class=\"docblock\"><p>Hello world!</p>\n+<p>Goodbye!\n Hello again!</p>\n </div>\n\\ No newline at end of file"}, {"sha": "a4ee4b141863724123eb7fa733f2c8c46883c603", "filename": "src/test/rustdoc/mixing-doc-comments-and-attrs.S3_top-doc.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.S3_top-doc.html", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.S3_top-doc.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.S3_top-doc.html?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -0,0 +1,3 @@\n+<div class=\"docblock\"><p>Par 1</p>\n+<p>Par 2</p>\n+</div>\n\\ No newline at end of file"}, {"sha": "a27c5ae6d0128c95d21a6f8dc791bfd8ca9542ad", "filename": "src/test/rustdoc/mixing-doc-comments-and-attrs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -16,3 +16,10 @@ pub struct S1;\n #[doc = \"Goodbye!\"]\n /// Hello again!\n pub struct S2;\n+\n+// @has 'foo/struct.S3.html'\n+// @snapshot S3_top-doc - '//details[@class=\"rustdoc-toggle top-doc\"]/div[@class=\"docblock\"]'\n+/** Par 1\n+*/ ///\n+/// Par 2\n+pub struct S3;"}, {"sha": "46b8778217d27fd5d8f4380865e05822495ce436", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -2,11 +2,11 @@\n \n // @has foo/struct.Unsized.html\n // @has - '//div[@id=\"impl-Sized\"]/h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n-// @!has - '//div[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' '[src]'\n+// @!has - '//div[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' 'source'\n // @has - '//div[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n-// @!has - '//div[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' '[src]'\n+// @!has - '//div[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' 'source'\n // @has - '//div[@id=\"impl-Any\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n-// @has - '//div[@id=\"impl-Any\"]//a[@class=\"srclink\"]' '[src]'\n+// @has - '//div[@id=\"impl-Any\"]//a[@class=\"srclink\"]' 'source'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "6de35e3233b0573234b976f39636e7b3d8427a46", "filename": "src/test/rustdoc/thread-local-src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fthread-local-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Fthread-local-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fthread-local-src.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/index.html '//a[@href=\"../src/foo/thread-local-src.rs.html#1-6\"]' '[src]'\n+// @has foo/index.html '//a[@href=\"../src/foo/thread-local-src.rs.html#1-6\"]' 'source'\n \n-// @has foo/constant.FOO.html '//a[@href=\"../src/foo/thread-local-src.rs.html#6\"]' '[src]'\n+// @has foo/constant.FOO.html '//a[@href=\"../src/foo/thread-local-src.rs.html#6\"]' 'source'\n thread_local!(pub static FOO: bool = false);"}, {"sha": "a6367efba6121f1ee85c19b7f9b45ce029f6a086", "filename": "src/test/rustdoc/trait-src-link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Ftrait-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Frustdoc%2Ftrait-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-src-link.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1,26 +1,26 @@\n #![crate_name = \"quix\"]\n pub trait Foo {\n-    // @has quix/trait.Foo.html '//a[@href=\"../src/quix/trait-src-link.rs.html#4\"]' '[src]'\n+    // @has quix/trait.Foo.html '//a[@href=\"../src/quix/trait-src-link.rs.html#4\"]' 'source'\n     fn required();\n \n-    // @has quix/trait.Foo.html '//a[@href=\"../src/quix/trait-src-link.rs.html#7\"]' '[src]'\n+    // @has quix/trait.Foo.html '//a[@href=\"../src/quix/trait-src-link.rs.html#7\"]' 'source'\n     fn provided() {}\n }\n \n pub struct Bar;\n \n impl Foo for Bar {\n-    // @has quix/struct.Bar.html '//a[@href=\"../src/quix/trait-src-link.rs.html#14\"]' '[src]'\n+    // @has quix/struct.Bar.html '//a[@href=\"../src/quix/trait-src-link.rs.html#14\"]' 'source'\n     fn required() {}\n-    // @has quix/struct.Bar.html '//a[@href=\"../src/quix/trait-src-link.rs.html#7\"]' '[src]'\n+    // @has quix/struct.Bar.html '//a[@href=\"../src/quix/trait-src-link.rs.html#7\"]' 'source'\n }\n \n pub struct Baz;\n \n impl Foo for Baz {\n-    // @has quix/struct.Baz.html '//a[@href=\"../src/quix/trait-src-link.rs.html#22\"]' '[src]'\n+    // @has quix/struct.Baz.html '//a[@href=\"../src/quix/trait-src-link.rs.html#22\"]' 'source'\n     fn required() {}\n \n-    // @has quix/struct.Baz.html '//a[@href=\"../src/quix/trait-src-link.rs.html#25\"]' '[src]'\n+    // @has quix/struct.Baz.html '//a[@href=\"../src/quix/trait-src-link.rs.html#25\"]' 'source'\n     fn provided() {}\n }"}, {"sha": "86ba7582d383327760ec9d01ce2c5af6f601a806", "filename": "src/test/ui/async-await/interior-with-const-generic-expr.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Fui%2Fasync-await%2Finterior-with-const-generic-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Fui%2Fasync-await%2Finterior-with-const-generic-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Finterior-with-const-generic-expr.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -0,0 +1,26 @@\n+// edition:2018\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+#![allow(unused)]\n+\n+fn main() {\n+    let x = test();\n+}\n+\n+fn concat<const A: usize, const B: usize>(a: [f32; A], b: [f32; B]) -> [f32; A + B] {\n+    todo!()\n+}\n+\n+async fn reverse<const A: usize>(x: [f32; A]) -> [f32; A] {\n+    todo!()\n+}\n+\n+async fn test() {\n+    let a = [0.0];\n+    let b = [1.0, 2.0];\n+    let ab = concat(a,b);\n+    let ba = reverse(ab).await;\n+    println!(\"{:?}\", ba);\n+}"}, {"sha": "f888246967d3dcdb215c21e0a91a7d52aeeb8b27", "filename": "src/test/ui/traits/pointee-deduction.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b9f7b284aacc5f8613438b80e4dd7bdd10549e/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-deduction.rs?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+\n+#![feature(ptr_metadata)]\n+\n+use std::alloc::Layout;\n+use std::ptr::Pointee;\n+\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl Foo for () {\n+    type Bar = ();\n+}\n+\n+struct Wrapper1<T: Foo>(<T as Foo>::Bar);\n+struct Wrapper2<T: Foo>(<Wrapper1<T> as Pointee>::Metadata);\n+\n+fn main() {\n+    let _: Wrapper2<()> = Wrapper2(());\n+    let _ = Layout::new::<Wrapper2<()>>();\n+}"}, {"sha": "deb9bfd24648d50142ab29b810175837c4718885", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "patch": "@@ -1 +1 @@\n-Subproject commit 824816c973a3fd0596ae3a9a38c6fb6299b913b8\n+Subproject commit deb9bfd24648d50142ab29b810175837c4718885"}]}