{"sha": "b4cf523cb5aee9f65bbc53bb19931e9a64838982", "node_id": "C_kwDOAAsO6NoAKGI0Y2Y1MjNjYjVhZWU5ZjY1YmJjNTNiYjE5OTMxZTlhNjQ4Mzg5ODI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-30T06:20:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-30T06:20:26Z"}, "message": "Rollup merge of #93582 - WaffleLapkin:rpitirpit, r=compiler-errors\n\nAllow `impl Fn() -> impl Trait` in return position\n\n_This was originally proposed as part of #93082 which was [closed](https://github.com/rust-lang/rust/pull/93082#issuecomment-1027225715) due to allowing `impl Fn() -> impl Trait` in argument position._\n\nThis allows writing the following function signatures:\n```rust\nfn f0() -> impl Fn() -> impl Trait;\nfn f3() -> &'static dyn Fn() -> impl Trait;\n```\n\nThese signatures were already allowed for common traits and associated types, there is no reason why `Fn*` traits should be special in this regard.\n\n`impl Trait` in both `f0` and `f3` means \"new existential type\", just like with `-> impl Iterator<Item = impl Trait>` and such.\n\nArrow in `impl Fn() ->` is right-associative and binds from right to left, it's tested by [this test](https://github.com/WaffleLapkin/rust/blob/a819fecb8dea438fc70488ddec30a61e52942672/src/test/ui/impl-trait/impl_fn_associativity.rs).\n\nThere even is a test that `f0` compiles:\nhttps://github.com/rust-lang/rust/blob/2f004d2d401682e553af3984ebd9a3976885e752/src/test/ui/impl-trait/nested_impl_trait.rs#L25-L28\n\nBut it was changed in [PR 48084 (lines)](https://github.com/rust-lang/rust/pull/48084/files#diff-ccecca938872d65ffe8cd1c3ef1956e309fac83bcda547d8b16b89257e53a437R37)  to test the opposite, probably unintentionally given [PR 48084 (lines)](https://github.com/rust-lang/rust/pull/48084/files#diff-5a02f1ed43debed1fd24f7aad72490064f795b9420f15d847bac822aa4621a1cR476-R477).\n\nr? `@nikomatsakis`\n\n----\n\nThis limitation is especially annoying with async code, since it forces one to write this:\n```rust\ntrait AsyncFn3<A, B, C>: Fn(A, B, C) -> <Self as AsyncFn3<A, B, C>>::Future {\n    type Future: Future<Output = Self::Out>;\n\n    type Out;\n}\n\nimpl<A, B, C, Fut, F> AsyncFn3<A, B, C> for F\nwhere\n    F: Fn(A, B, C) -> Fut,\n    Fut: Future,\n{\n    type Future = Fut;\n\n    type Out = Fut::Output;\n}\n\nfn async_closure() -> impl AsyncFn3<i32, i32, i32, Out = u32> {\n    |a, b, c| async move { (a + b + c) as u32 }\n}\n```\nInstead of:\n```rust\nfn async_closure() -> impl Fn(i32, i32, i32) -> impl Future<Output = u32> {\n    |a, b, c| async move { (a + b + c) as u32 }\n}\n```", "tree": {"sha": "fd5c79810f6c2fed8559f8417c3518c886ea4e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd5c79810f6c2fed8559f8417c3518c886ea4e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4cf523cb5aee9f65bbc53bb19931e9a64838982", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXheqCRBK7hj4Ov3rIwAAvxEIAEKRllm9htKibtmxAGHvfYPG\nxbcMiUVXa4XHOKW4zI4WtLem2xcrfCz8gwvUXNmcduNepdE5j1ObQhF/O3jTH7NJ\n5G6HX0oXg7bambyZaQamfY2sD7wm5qu4ec72VsaFkEEEeSMJy4Usm4G1K4aPz3dA\njnC+PQQ7YnMo2559JfYj1ES23Gyig4zLMX5+DO525yz/e81UEysK6vksNB8eQonl\nhyurVe5AiaRABSb/Ml7Cl8qnC9m+x1OAh5pTebJVYsVjnBEJ70QDac0gIm1Hzp2h\n6T5x3BHzEsGtH5cqYYf3Wq0YQVnSTRRS2dhv5lFhK2rRsvgg6cOaQDrpgWLplLA=\n=pX6L\n-----END PGP SIGNATURE-----\n", "payload": "tree fd5c79810f6c2fed8559f8417c3518c886ea4e9c\nparent 4827ceecb9ee9bc0508fecf7059bcc134ca187d0\nparent e93982a78fc7725f4fd01c39b2c48b6a2028893f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667110826 +0530\ncommitter GitHub <noreply@github.com> 1667110826 +0530\n\nRollup merge of #93582 - WaffleLapkin:rpitirpit, r=compiler-errors\n\nAllow `impl Fn() -> impl Trait` in return position\n\n_This was originally proposed as part of #93082 which was [closed](https://github.com/rust-lang/rust/pull/93082#issuecomment-1027225715) due to allowing `impl Fn() -> impl Trait` in argument position._\n\nThis allows writing the following function signatures:\n```rust\nfn f0() -> impl Fn() -> impl Trait;\nfn f3() -> &'static dyn Fn() -> impl Trait;\n```\n\nThese signatures were already allowed for common traits and associated types, there is no reason why `Fn*` traits should be special in this regard.\n\n`impl Trait` in both `f0` and `f3` means \"new existential type\", just like with `-> impl Iterator<Item = impl Trait>` and such.\n\nArrow in `impl Fn() ->` is right-associative and binds from right to left, it's tested by [this test](https://github.com/WaffleLapkin/rust/blob/a819fecb8dea438fc70488ddec30a61e52942672/src/test/ui/impl-trait/impl_fn_associativity.rs).\n\nThere even is a test that `f0` compiles:\nhttps://github.com/rust-lang/rust/blob/2f004d2d401682e553af3984ebd9a3976885e752/src/test/ui/impl-trait/nested_impl_trait.rs#L25-L28\n\nBut it was changed in [PR 48084 (lines)](https://github.com/rust-lang/rust/pull/48084/files#diff-ccecca938872d65ffe8cd1c3ef1956e309fac83bcda547d8b16b89257e53a437R37)  to test the opposite, probably unintentionally given [PR 48084 (lines)](https://github.com/rust-lang/rust/pull/48084/files#diff-5a02f1ed43debed1fd24f7aad72490064f795b9420f15d847bac822aa4621a1cR476-R477).\n\nr? `@nikomatsakis`\n\n----\n\nThis limitation is especially annoying with async code, since it forces one to write this:\n```rust\ntrait AsyncFn3<A, B, C>: Fn(A, B, C) -> <Self as AsyncFn3<A, B, C>>::Future {\n    type Future: Future<Output = Self::Out>;\n\n    type Out;\n}\n\nimpl<A, B, C, Fut, F> AsyncFn3<A, B, C> for F\nwhere\n    F: Fn(A, B, C) -> Fut,\n    Fut: Future,\n{\n    type Future = Fut;\n\n    type Out = Fut::Output;\n}\n\nfn async_closure() -> impl AsyncFn3<i32, i32, i32, Out = u32> {\n    |a, b, c| async move { (a + b + c) as u32 }\n}\n```\nInstead of:\n```rust\nfn async_closure() -> impl Fn(i32, i32, i32) -> impl Future<Output = u32> {\n    |a, b, c| async move { (a + b + c) as u32 }\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4cf523cb5aee9f65bbc53bb19931e9a64838982", "html_url": "https://github.com/rust-lang/rust/commit/b4cf523cb5aee9f65bbc53bb19931e9a64838982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4cf523cb5aee9f65bbc53bb19931e9a64838982/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4827ceecb9ee9bc0508fecf7059bcc134ca187d0", "html_url": "https://github.com/rust-lang/rust/commit/4827ceecb9ee9bc0508fecf7059bcc134ca187d0"}, {"sha": "e93982a78fc7725f4fd01c39b2c48b6a2028893f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93982a78fc7725f4fd01c39b2c48b6a2028893f", "html_url": "https://github.com/rust-lang/rust/commit/e93982a78fc7725f4fd01c39b2c48b6a2028893f"}], "stats": {"total": 371, "additions": 295, "deletions": 76}, "files": [{"sha": "c6955741fd4c2961be0d6b732910770783c9fbf9", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -191,7 +191,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n                 }\n                 GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n-                    ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n+                    ParenthesizedGenericArgs::Ok => {\n+                        self.lower_parenthesized_parameter_data(data, itctx)\n+                    }\n                     ParenthesizedGenericArgs::Err => {\n                         // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n                         let sub = if !data.inputs.is_empty() {\n@@ -344,6 +346,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_parenthesized_parameter_data(\n         &mut self,\n         data: &ParenthesizedArgs,\n+        itctx: &ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         // Switch to `PassThrough` mode for anonymous lifetimes; this\n         // means that we permit things like `&Ref<T>`, where `Ref` has\n@@ -355,6 +358,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.lower_ty_direct(ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam))\n         }));\n         let output_ty = match output {\n+            // Only allow `impl Trait` in return position. i.e.:\n+            // ```rust\n+            // fn f(_: impl Fn() -> impl Debug) -> impl Fn() -> impl Debug\n+            // //      disallowed --^^^^^^^^^^        allowed --^^^^^^^^^^\n+            // ```\n+            FnRetTy::Ty(ty)\n+                if matches!(itctx, ImplTraitContext::ReturnPositionOpaqueTy { .. })\n+                    && self.tcx.features().impl_trait_in_fn_trait_return =>\n+            {\n+                self.lower_ty(&ty, itctx)\n+            }\n             FnRetTy::Ty(ty) => {\n                 self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))\n             }"}, {"sha": "96645d40086d661b8c8fda8015f1f9f7f6192540", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -412,6 +412,8 @@ declare_features! (\n     (active, half_open_range_patterns_in_slices, \"CURRENT_RUSTC_VERSION\", Some(67264), None),\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n+    /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n+    (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n     /// Allows associated types in inherent impls."}, {"sha": "7e565df76016856e5085e4d624fb3dc5be230efc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -813,6 +813,7 @@ symbols! {\n         impl_lint_pass,\n         impl_macros,\n         impl_trait_in_bindings,\n+        impl_trait_in_fn_trait_return,\n         implied_by,\n         import,\n         import_name_type,"}, {"sha": "0db8088f7eea468a26923ca358ac2ad3790ac74e", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,6 @@\n+fn f() -> impl Fn() -> impl Sized { || () }\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+fn g() -> &'static dyn Fn() -> impl Sized { &|| () }\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+\n+fn main() {}"}, {"sha": "c485bc5c3ab908db36abe89bbd0ba364828cb2c5", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,15 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+  --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:1:24\n+   |\n+LL | fn f() -> impl Fn() -> impl Sized { || () }\n+   |                        ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+  --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:3:32\n+   |\n+LL | fn g() -> &'static dyn Fn() -> impl Sized { &|| () }\n+   |                                ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "b0aeded0ef75a0855bfe9c2382c668caf00863e3", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,8 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a() -> impl Fn(&u8) -> impl Debug {\n+    |x| x //~ ERROR hidden type for `impl Debug` captures lifetime that does not appear in bounds\n+}\n+\n+fn main() {}"}, {"sha": "433b76b7afaa26fb50b015c9749ecd8891f22b2b", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,11 @@\n+error[E0700]: hidden type for `impl Debug` captures lifetime that does not appear in bounds\n+  --> $DIR/impl-fn-hrtb-bounds-2.rs:5:9\n+   |\n+LL |     |x| x\n+   |     --- ^\n+   |     |\n+   |     hidden type `&u8` captures the anonymous lifetime #1 defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "527a4586fd7e0b7cd8c02e97812418b0c68381b4", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,24 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn d() -> impl Fn() -> (impl Debug + '_) {\n+    //~^ ERROR missing lifetime specifier\n+    || ()\n+}\n+\n+fn main() {}"}, {"sha": "443ffeb55cdee1cad06c715a0f02e7646f043a55", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,51 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-fn-hrtb-bounds.rs:19:38\n+   |\n+LL | fn d() -> impl Fn() -> (impl Debug + '_) {\n+   |                                      ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn d() -> impl Fn() -> (impl Debug + 'static) {\n+   |                                      ~~~~~~~\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-hrtb-bounds.rs:4:41\n+   |\n+LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n+   |                                         ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-hrtb-bounds.rs:4:19\n+   |\n+LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n+   |                   ^\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:52\n+   |\n+LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n+   |                                                    ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:20\n+   |\n+LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n+   |                    ^^\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:52\n+   |\n+LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n+   |                                                    ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:20\n+   |\n+LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n+   |                    ^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "3e760710797eb032902b40bec831e53772db518d", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,15 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+    //~^ ERROR ambiguous `+` in a type\n+    //~^^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    |x| x\n+}\n+\n+fn b() -> impl Fn() -> impl Debug + Send {\n+    //~^ ERROR ambiguous `+` in a type\n+    || ()\n+}\n+\n+fn main() {}"}, {"sha": "cf6e5ef7bacebb626699df9b444eb0b4553f00da", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,26 @@\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:27\n+   |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+   |                           ^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + '_)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:10:24\n+   |\n+LL | fn b() -> impl Fn() -> impl Debug + Send {\n+   |                        ^^^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + Send)`\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:40\n+   |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+   |                                        ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:19\n+   |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n+   |                   ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "157786623754436de20e2a3ac33c15dc7cb719c1", "filename": "src/test/ui/impl-trait/impl-fn-predefined-lifetimes.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,15 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n+    //~^ ERROR cannot resolve opaque type\n+\n+    |x| x\n+    //~^ ERROR concrete type differs from previous defining opaque type use\n+}\n+\n+fn _b<'a>() -> impl Fn(&'a u8) -> (impl Debug + 'a) {\n+    a()\n+}\n+\n+fn main() {}"}, {"sha": "7747319c1539b101f7b536afe3a90e09f8f3eec8", "filename": "src/test/ui/impl-trait/impl-fn-predefined-lifetimes.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,24 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:7:9\n+   |\n+LL |     |x| x\n+   |         ^ expected `impl Debug + '_`, got `&u8`\n+   |\n+note: previous use here\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:7:5\n+   |\n+LL |     |x| x\n+   |     ^^^^^\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:4:35\n+   |\n+LL | fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n+   |                                   ^^^^^^^^^^^^^^^ recursive opaque type\n+...\n+LL |     |x| x\n+   |     ----- returning here with type `[closure@$DIR/impl-fn-predefined-lifetimes.rs:7:5: 7:8]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "71a8f9c77960d1562f221d7c20d6e7bc5775d014", "filename": "src/test/ui/impl-trait/impl_fn_associativity.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+#![feature(impl_trait_in_fn_trait_return)]\n+use std::fmt::Debug;\n+\n+fn f_debug() -> impl Fn() -> impl Debug {\n+    || ()\n+}\n+\n+fn ff_debug() -> impl Fn() -> impl Fn() -> impl Debug {\n+    || f_debug()\n+}\n+\n+fn multi() -> impl Fn() -> (impl Debug + Send) {\n+    || ()\n+}\n+\n+fn main() {\n+    // Check that `ff_debug` is `() -> (() -> Debug)` and not `(() -> ()) -> Debug`\n+    let debug = ff_debug()()();\n+    assert_eq!(format!(\"{:?}\", debug), \"()\");\n+\n+    let x = multi()();\n+    assert_eq!(format!(\"{:?}\", x), \"()\");\n+    fn assert_send(_: &impl Send) {}\n+    assert_send(&x);\n+}"}, {"sha": "e95fab3b6505780275a9537eb8adec29bf3684c1", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -1,3 +1,4 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn fine(x: impl Into<u32>) -> impl Into<u32> { x }\n@@ -25,8 +26,7 @@ fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n }\n \n fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-//~^ `impl Trait` only allowed in function and inherent method return types\n-    || 5\n+    || 5u8\n }\n \n fn main() {}"}, {"sha": "9a8f5a3406813368670b17c76c7827f61fae7ca7", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:5:56\n+  --> $DIR/nested_impl_trait.rs:6:56\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ----------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:9:42\n+  --> $DIR/nested_impl_trait.rs:10:42\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ----------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:13:37\n+  --> $DIR/nested_impl_trait.rs:14:37\n    |\n LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           ----------^^^^^^^^^^-\n@@ -26,7 +26,7 @@ LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:18:44\n+  --> $DIR/nested_impl_trait.rs:19:44\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ----------^^^^^^^^^^-\n@@ -35,19 +35,13 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  outer `impl Trait`\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/nested_impl_trait.rs:9:32\n+  --> $DIR/nested_impl_trait.rs:10:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/nested_impl_trait.rs:27:42\n-   |\n-LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-   |                                          ^^^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:5:46\n+  --> $DIR/nested_impl_trait.rs:6:46\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n@@ -56,15 +50,15 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:18:34\n+  --> $DIR/nested_impl_trait.rs:19:34\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n    = help: the trait `Into<U>` is implemented for `T`\n    = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0277, E0562, E0666.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "ff63b04c2680df36779f65eec709dfbdd3a9f726", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -1,5 +1,6 @@\n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n // Allowed\n@@ -39,9 +40,8 @@ fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n-// Disallowed\n+// Allowed\n fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n@@ -57,9 +57,8 @@ fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n \n-// Disallowed\n+// Allowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }"}, {"sha": "3ad0a9f9d5c8b7a3274ce30a4ba7f4edcb648f07", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 43, "deletions": 55, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4cf523cb5aee9f65bbc53bb19931e9a64838982/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=b4cf523cb5aee9f65bbc53bb19931e9a64838982", "patch": "@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:119:16\n+  --> $DIR/where-allowed.rs:118:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:154:23\n+  --> $DIR/where-allowed.rs:153:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:157:39\n+  --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -44,53 +44,47 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n-  --> $DIR/where-allowed.rs:15:40\n+  --> $DIR/where-allowed.rs:16:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:19:42\n+  --> $DIR/where-allowed.rs:20:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n-  --> $DIR/where-allowed.rs:23:38\n+  --> $DIR/where-allowed.rs:24:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:27:40\n+  --> $DIR/where-allowed.rs:28:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:31:49\n+  --> $DIR/where-allowed.rs:32:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:35:51\n+  --> $DIR/where-allowed.rs:36:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:39:55\n+  --> $DIR/where-allowed.rs:40:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:43:57\n-   |\n-LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-   |                                                         ^^^^^^^^^^\n-\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:47:51\n    |\n@@ -109,56 +103,50 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:61:59\n-   |\n-LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-   |                                                           ^^^^^^^^^^\n-\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:65:38\n+  --> $DIR/where-allowed.rs:64:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:69:40\n+  --> $DIR/where-allowed.rs:68:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:82:32\n+  --> $DIR/where-allowed.rs:81:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in path\n-  --> $DIR/where-allowed.rs:86:41\n+  --> $DIR/where-allowed.rs:85:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:90:27\n+  --> $DIR/where-allowed.rs:89:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:95:25\n+  --> $DIR/where-allowed.rs:94:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:97:20\n+  --> $DIR/where-allowed.rs:96:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n-  --> $DIR/where-allowed.rs:108:23\n+  --> $DIR/where-allowed.rs:107:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n@@ -167,7 +155,7 @@ LL |     fn in_return() -> impl Debug;\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n-  --> $DIR/where-allowed.rs:125:34\n+  --> $DIR/where-allowed.rs:124:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n@@ -176,127 +164,127 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n-  --> $DIR/where-allowed.rs:138:33\n+  --> $DIR/where-allowed.rs:137:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n-  --> $DIR/where-allowed.rs:141:31\n+  --> $DIR/where-allowed.rs:140:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:157:39\n+  --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n-  --> $DIR/where-allowed.rs:162:16\n+  --> $DIR/where-allowed.rs:161:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:167:24\n+  --> $DIR/where-allowed.rs:166:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:172:6\n+  --> $DIR/where-allowed.rs:171:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:178:24\n+  --> $DIR/where-allowed.rs:177:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:184:11\n+  --> $DIR/where-allowed.rs:183:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:191:15\n+  --> $DIR/where-allowed.rs:190:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n-  --> $DIR/where-allowed.rs:198:24\n+  --> $DIR/where-allowed.rs:197:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:205:17\n+  --> $DIR/where-allowed.rs:204:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:212:22\n+  --> $DIR/where-allowed.rs:211:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:218:40\n+  --> $DIR/where-allowed.rs:217:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:222:36\n+  --> $DIR/where-allowed.rs:221:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:226:38\n+  --> $DIR/where-allowed.rs:225:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:230:41\n+  --> $DIR/where-allowed.rs:229:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:234:11\n+  --> $DIR/where-allowed.rs:233:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:241:40\n+  --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n-  --> $DIR/where-allowed.rs:247:29\n+  --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n-  --> $DIR/where-allowed.rs:249:46\n+  --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:234:7\n+  --> $DIR/where-allowed.rs:233:7\n    |\n LL | impl <T = impl Debug> T {}\n    |       ^^^^^^^^^^^^^^\n@@ -306,7 +294,7 @@ LL | impl <T = impl Debug> T {}\n    = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:241:36\n+  --> $DIR/where-allowed.rs:240:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                    ^^^^^^^^^^^^^^\n@@ -315,14 +303,14 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:234:23\n+  --> $DIR/where-allowed.rs:233:23\n    |\n LL | impl <T = impl Debug> T {}\n    |                       ^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n \n-error: aborting due to 49 previous errors\n+error: aborting due to 47 previous errors\n \n Some errors have detailed explanations: E0118, E0562, E0658, E0666.\n For more information about an error, try `rustc --explain E0118`."}]}