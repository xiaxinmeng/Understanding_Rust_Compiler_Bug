{"sha": "6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYjI3M2VkNGVmYjY3MjRiMWM3MTNjM2FjMzVkMTRlNTI5OTlmYjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-05T17:50:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-05T17:50:10Z"}, "message": "Address all FIXMEs from #5562", "tree": {"sha": "2b7c278d98be88097ea8f24616244c39172e8284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b7c278d98be88097ea8f24616244c39172e8284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "html_url": "https://github.com/rust-lang/rust/commit/6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0b8018a6a1271e6c8e82230e2e8496eebbba3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0b8018a6a1271e6c8e82230e2e8496eebbba3f", "html_url": "https://github.com/rust-lang/rust/commit/0b0b8018a6a1271e6c8e82230e2e8496eebbba3f"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "fad1af749ea7e35c30b98a0862a9287ace75285e", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "patch": "@@ -739,7 +739,7 @@ trait ebml_writer_helpers {\n     fn emit_arg(&self, ecx: @e::EncodeContext, arg: ty::arg);\n     fn emit_ty(&self, ecx: @e::EncodeContext, ty: ty::t);\n     fn emit_vstore(&self, ecx: @e::EncodeContext, vstore: ty::vstore);\n-    fn emit_tys(&self, ecx: @e::EncodeContext, tys: ~[ty::t]);\n+    fn emit_tys(&self, ecx: @e::EncodeContext, tys: &[ty::t]);\n     fn emit_type_param_def(&self,\n                            ecx: @e::EncodeContext,\n                            type_param_def: &ty::TypeParameterDef);\n@@ -766,7 +766,7 @@ impl ebml_writer_helpers for writer::Encoder {\n         }\n     }\n \n-    fn emit_tys(&self, ecx: @e::EncodeContext, tys: ~[ty::t]) {\n+    fn emit_tys(&self, ecx: @e::EncodeContext, tys: &[ty::t]) {\n         do self.emit_from_vec(tys) |ty| {\n             self.emit_ty(ecx, *ty)\n         }\n@@ -868,9 +868,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n         do ebml_w.tag(c::tag_table_node_type_subst) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n-                // FIXME(#5562): removing this copy causes a segfault\n-                //               before stage2\n-                ebml_w.emit_tys(ecx, /*bad*/copy **tys)\n+                ebml_w.emit_tys(ecx, **tys)\n             }\n         }\n     }"}, {"sha": "44090e32880bcef5a08203621768362ab36a2e13", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "patch": "@@ -268,8 +268,6 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n         _ => e.id\n     };\n     for cx.tcx.node_type_substs.find(&type_parameter_id).each |ts| {\n-        // FIXME(#5562): removing this copy causes a segfault before stage2\n-        let ts = /*bad*/ copy **ts;\n         let type_param_defs = match e.node {\n           expr_path(_) => {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get_copy(&e.id));\n@@ -293,7 +291,7 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n                        ts.repr(cx.tcx),\n                        type_param_defs.repr(cx.tcx)));\n         }\n-        for vec::each2(ts, *type_param_defs) |&ty, type_param_def| {\n+        for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n             check_bounds(cx, type_parameter_id, e.span, ty, type_param_def)\n         }\n     }\n@@ -331,12 +329,10 @@ fn check_ty(aty: @Ty, cx: Context, v: visit::vt<Context>) {\n     match aty.node {\n       ty_path(_, id) => {\n         for cx.tcx.node_type_substs.find(&id).each |ts| {\n-            // FIXME(#5562): removing this copy causes a segfault before stage2\n-            let ts = /*bad*/ copy **ts;\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get_copy(&id));\n             let type_param_defs =\n                 ty::lookup_item_type(cx.tcx, did).generics.type_param_defs;\n-            for vec::each2(ts, *type_param_defs) |&ty, type_param_def| {\n+            for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n                 check_bounds(cx, aty.id, aty.span, ty, type_param_def)\n             }\n         }"}, {"sha": "8082e9cce51710cb68c4db408bfcfbc96d3f129b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "patch": "@@ -2501,7 +2501,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n       Some(&v) => v,\n       None => {\n         let mut exprt = false;\n-        let val = match *ccx.tcx.items.get(&id) {\n+        let val = match ccx.tcx.items.get_copy(&id) {\n           ast_map::node_item(i, pth) => {\n             let my_path = vec::append(/*bad*/copy *pth,\n                                       ~[path_name(i.ident)]);"}, {"sha": "12f91fb8597bd66309becd82286cdd4508abab88", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "patch": "@@ -339,16 +339,12 @@ pub fn trans_method_call(in_cx: block,\n         node_id_type(in_cx, call_ex.callee_id),\n         expr_ty(in_cx, call_ex),\n         |cx| {\n-            match cx.ccx().maps.method_map.find(&call_ex.id) {\n+            match cx.ccx().maps.method_map.find_copy(&call_ex.id) {\n                 Some(origin) => {\n                     debug!(\"origin for %s: %s\",\n                            call_ex.repr(in_cx.tcx()),\n                            origin.repr(in_cx.tcx()));\n \n-                    // FIXME(#5562): removing this copy causes a segfault\n-                    //               before stage2\n-                    let origin = /*bad*/ copy *origin;\n-\n                     meth::trans_method_callee(cx,\n                                               call_ex.callee_id,\n                                               rcvr,"}, {"sha": "fc27c11c06f24698ba8b30a982829cc11c1366a1", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "patch": "@@ -110,8 +110,7 @@ pub fn type_of_non_gc_box(cx: @CrateContext, t: ty::t) -> TypeRef {\n \n pub fn sizing_type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n     match cx.llsizingtypes.find(&t) {\n-        // FIXME(#5562): removing this copy causes a segfault in stage1 core\n-        Some(t) => return /*bad*/ copy *t,\n+        Some(t) => return *t,\n         None => ()\n     }\n \n@@ -178,8 +177,7 @@ pub fn type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n \n     // Check the cache.\n     match cx.lltypes.find(&t) {\n-        // FIXME(#5562): removing this copy causes a segfault in stage1 core\n-        Some(t) => return /*bad*/ copy *t,\n+        Some(&t) => return t,\n         None => ()\n     }\n "}, {"sha": "46cc99e71cc11db680db3c0f39455ff5990bd27b", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb273ed4efb6724b1c713c3ac35d14e52999fb1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=6cb273ed4efb6724b1c713c3ac35d14e52999fb1", "patch": "@@ -260,10 +260,10 @@ pub fn mark_for_method_call(cx: Context, e_id: node_id, callee_id: node_id) {\n     // above because the recursive call to `type_needs` can trigger\n     // inlining and hence can cause `method_map` and\n     // `node_type_substs` to be modified.\n-    for opt_static_did.each |did| {\n+    for opt_static_did.each |&did| {\n         for cx.ccx.tcx.node_type_substs.find_copy(&callee_id).each |ts| {\n             let type_uses = type_uses_for(cx.ccx, did, ts.len());\n-            for vec::each2(*type_uses, ts) |uses, subst| {\n+            for vec::each2(*type_uses, *ts) |uses, subst| {\n                 type_needs(cx, *uses, *subst)\n             }\n         }"}]}