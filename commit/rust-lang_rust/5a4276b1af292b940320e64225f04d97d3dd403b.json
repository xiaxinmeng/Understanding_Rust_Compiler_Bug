{"sha": "5a4276b1af292b940320e64225f04d97d3dd403b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNDI3NmIxYWYyOTJiOTQwMzIwZTY0MjI1ZjA0ZDk3ZDNkZDQwM2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-21T08:18:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-21T08:27:01Z"}, "message": "add illustrations", "tree": {"sha": "a9204218b4b0b4580e10a8a117670aafddcab494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9204218b4b0b4580e10a8a117670aafddcab494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4276b1af292b940320e64225f04d97d3dd403b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4276b1af292b940320e64225f04d97d3dd403b", "html_url": "https://github.com/rust-lang/rust/commit/5a4276b1af292b940320e64225f04d97d3dd403b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4276b1af292b940320e64225f04d97d3dd403b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0aa786ee445b7aafb0942c017ded599aecd955", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0aa786ee445b7aafb0942c017ded599aecd955", "html_url": "https://github.com/rust-lang/rust/commit/9b0aa786ee445b7aafb0942c017ded599aecd955"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "abbe4c154242305f3af19020d44757c81fc6987a", "filename": "guide.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a4276b1af292b940320e64225f04d97d3dd403b/guide.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a4276b1af292b940320e64225f04d97d3dd403b/guide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/guide.md?ref=5a4276b1af292b940320e64225f04d97d3dd403b", "patch": "@@ -227,16 +227,25 @@ of type `V`. Queries come in two basic varieties:\n \n \n For further discussion, its important to understand one bit of \"fairly\n-intelligently\". Suppose we have two functions, `f1` and `f2`, and one input, `z`.\n-We call `f1(X)` which in turn calls `f2(Y)` which inspects `i(Z)`. `i(Z)`\n+intelligently\". Suppose we have two functions, `f1` and `f2`, and one input,\n+`z`. We call `f1(X)` which in turn calls `f2(Y)` which inspects `i(Z)`. `i(Z)`\n returns some value `V1`, `f2` uses that and returns `R1`, `f1` uses that and\n returns `O`. Now, let's change `i` at `Z` to `V2` from `V1` and try to compute\n `f1(X)` again. Because `f1(X)` (transitively) depends on `i(Z)`, we can't just\n reuse its value as is. However, if `f2(Y)` is *still* equal to `R1` (despite\n `i`'s change), we, in fact, *can* reuse `O` as result of `f1(X)`. And that's how\n salsa works: it recomputes results in *reverse* order, starting from inputs and\n progressing towards outputs, stopping as soon as it sees an intermediate value\n-that hasn't changed.\n+that hasn't changed. If this sounds confusing to you, don't worry: it is\n+confusing. This illustration by @killercup might help:\n+\n+<img alt=\"step 1\" src=\"https://user-images.githubusercontent.com/1711539/51460907-c5484780-1d6d-11e9-9cd2-d6f62bd746e0.png\" width=\"50%\">\n+\n+<img alt=\"step 2\" src=\"https://user-images.githubusercontent.com/1711539/51460915-c9746500-1d6d-11e9-9a77-27d33a0c51b5.png\" width=\"50%\">\n+\n+<img alt=\"step 3\" src=\"https://user-images.githubusercontent.com/1711539/51460920-cda08280-1d6d-11e9-8d96-a782aa57a4d4.png\" width=\"50%\">\n+\n+<img alt=\"step 4\" src=\"https://user-images.githubusercontent.com/1711539/51460927-d1340980-1d6d-11e9-851e-13c149d5c406.png\" width=\"50%\">\n \n ## Salsa Input Queries\n "}]}