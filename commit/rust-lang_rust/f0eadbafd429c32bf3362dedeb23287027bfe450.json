{"sha": "f0eadbafd429c32bf3362dedeb23287027bfe450", "node_id": "C_kwDOAAsO6NoAKGYwZWFkYmFmZDQyOWMzMmJmMzM2MmRlZGViMjMyODcwMjdiZmU0NTA", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-02-21T11:07:17Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-03-01T09:19:25Z"}, "message": "Use LocalDefIdSet instead of FxHashSet for reachable_set query.", "tree": {"sha": "5d8ec8080d56631aa26ea4b282455ad88f0f4dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d8ec8080d56631aa26ea4b282455ad88f0f4dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0eadbafd429c32bf3362dedeb23287027bfe450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eadbafd429c32bf3362dedeb23287027bfe450", "html_url": "https://github.com/rust-lang/rust/commit/f0eadbafd429c32bf3362dedeb23287027bfe450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0eadbafd429c32bf3362dedeb23287027bfe450/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff00f96e62248e2e9fe8233ffd98e47bf3dfdc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff00f96e62248e2e9fe8233ffd98e47bf3dfdc7", "html_url": "https://github.com/rust-lang/rust/commit/5ff00f96e62248e2e9fe8233ffd98e47bf3dfdc7"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "32731a3024c84beac399e3fedcc7c4bb0f60d3a1", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=f0eadbafd429c32bf3362dedeb23287027bfe450", "patch": "@@ -58,7 +58,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx\n         .reachable_set(())\n-        .iter()\n+        .items()\n         .filter_map(|&def_id| {\n             // We want to ignore some FFI functions that are not exposed from\n             // this crate. Reachable FFI functions can be lumped into two\n@@ -136,7 +136,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n             };\n             (def_id.to_def_id(), info)\n         })\n-        .collect();\n+        .into();\n \n     if let Some(id) = tcx.proc_macro_decls_static(()) {\n         reachable_non_generics.insert("}, {"sha": "743f4d9ca2ab7e3d1588ddde2e230d7b200ba9ea", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f0eadbafd429c32bf3362dedeb23287027bfe450", "patch": "@@ -1113,7 +1113,7 @@ rustc_queries! {\n         desc { \"checking for private elements in public interfaces\" }\n     }\n \n-    query reachable_set(_: ()) -> &'tcx FxHashSet<LocalDefId> {\n+    query reachable_set(_: ()) -> &'tcx LocalDefIdSet {\n         arena_cache\n         desc { \"reachability\" }\n     }"}, {"sha": "4beb99e8add5fe7b72da9562d261918508f08add", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=f0eadbafd429c32bf3362dedeb23287027bfe450", "patch": "@@ -50,7 +50,7 @@ use rustc_data_structures::unord::UnordSet;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, DocLinkResMap};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdSet};\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};"}, {"sha": "35a4550cee3c3c3923be4ce8fad1dd9b5cd942cf", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eadbafd429c32bf3362dedeb23287027bfe450/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=f0eadbafd429c32bf3362dedeb23287027bfe450", "patch": "@@ -5,7 +5,7 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc_data_structures::fx::FxHashSet;\n+use hir::def_id::LocalDefIdSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -63,7 +63,7 @@ struct ReachableContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     maybe_typeck_results: Option<&'tcx ty::TypeckResults<'tcx>>,\n     // The set of items which must be exported in the linkage sense.\n-    reachable_symbols: FxHashSet<LocalDefId>,\n+    reachable_symbols: LocalDefIdSet,\n     // A worklist of item IDs. Each item ID in this worklist will be inlined\n     // and will be scanned for further references.\n     // FIXME(eddyb) benchmark if this would be faster as a `VecDeque`.\n@@ -175,7 +175,7 @@ impl<'tcx> ReachableContext<'tcx> {\n \n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     fn propagate(&mut self) {\n-        let mut scanned = FxHashSet::default();\n+        let mut scanned = LocalDefIdSet::default();\n         while let Some(search_item) = self.worklist.pop() {\n             if !scanned.insert(search_item) {\n                 continue;\n@@ -361,7 +361,7 @@ fn has_custom_linkage(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n         || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n }\n \n-fn reachable_set(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n+fn reachable_set(tcx: TyCtxt<'_>, (): ()) -> LocalDefIdSet {\n     let effective_visibilities = &tcx.effective_visibilities(());\n \n     let any_library ="}, {"sha": "a2caeb972973db358fd360a1b4cc680e4d381b50", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0eadbafd429c32bf3362dedeb23287027bfe450/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eadbafd429c32bf3362dedeb23287027bfe450/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=f0eadbafd429c32bf3362dedeb23287027bfe450", "patch": "@@ -109,11 +109,14 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n                 // an empty result if `tcx.sess.opts.output_types.should_codegen()` is false.\n                 local_providers.exported_symbols = |tcx, cnum| {\n                     assert_eq!(cnum, LOCAL_CRATE);\n+                    let reachable_set = tcx.with_stable_hashing_context(|hcx| {\n+                        tcx.reachable_set(()).to_sorted(&hcx, true)\n+                    });\n                     tcx.arena.alloc_from_iter(\n                         // This is based on:\n                         // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L62-L63\n                         // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L174\n-                        tcx.reachable_set(()).iter().filter_map(|&local_def_id| {\n+                        reachable_set.into_iter().filter_map(|&local_def_id| {\n                             // Do the same filtering that rustc does:\n                             // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L84-L102\n                             // Otherwise it may cause unexpected behaviours and ICEs"}]}