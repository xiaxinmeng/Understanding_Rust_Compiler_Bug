{"sha": "030f00a8a1929a0f140f0f4ec14937efb720d6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMGYwMGE4YTE5MjlhMGYxNDBmMGY0ZWMxNDkzN2VmYjcyMGQ2ZGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-22T13:19:29Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-22T13:19:29Z"}, "message": "Fix drop terminator", "tree": {"sha": "9d818e1b0368ac2d69f6b6aa2af3074787ded0b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d818e1b0368ac2d69f6b6aa2af3074787ded0b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030f00a8a1929a0f140f0f4ec14937efb720d6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030f00a8a1929a0f140f0f4ec14937efb720d6dd", "html_url": "https://github.com/rust-lang/rust/commit/030f00a8a1929a0f140f0f4ec14937efb720d6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030f00a8a1929a0f140f0f4ec14937efb720d6dd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c3335dbfd510a95284bd953e869cf31d5127ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c3335dbfd510a95284bd953e869cf31d5127ec", "html_url": "https://github.com/rust-lang/rust/commit/26c3335dbfd510a95284bd953e869cf31d5127ec"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "53c22926438e4a026840dcc5da5d8e31e7de09a3", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/030f00a8a1929a0f140f0f4ec14937efb720d6dd/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f00a8a1929a0f140f0f4ec14937efb720d6dd/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=030f00a8a1929a0f140f0f4ec14937efb720d6dd", "patch": "@@ -60,22 +60,24 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 };\n \n                 let func_ty = self.operand_ty(func);\n-                let (fn_def, abi) = match func_ty.sty {\n+                let (fn_def, sig) = match func_ty.sty {\n                     ty::TyFnPtr(sig) => {\n                         let fn_ptr = self.eval_operand_to_primval(func)?.to_ptr()?;\n-                        (self.memory.get_fn(fn_ptr.alloc_id)?, sig.abi())\n+                        (self.memory.get_fn(fn_ptr.alloc_id)?, sig)\n                     },\n-                    ty::TyFnDef(def_id, substs, sig) => (::eval_context::resolve(self.tcx, def_id, substs), sig.abi()),\n+                    ty::TyFnDef(def_id, substs, sig) => (::eval_context::resolve(self.tcx, def_id, substs), sig),\n                     _ => {\n                         let msg = format!(\"can't handle callee of type {:?}\", func_ty);\n                         return Err(EvalError::Unimplemented(msg));\n                     }\n                 };\n-                self.eval_fn_call(fn_def, destination, args, terminator.source_info.span, abi)?;\n+                let sig = self.erase_lifetimes(&sig);\n+                self.eval_fn_call(fn_def, destination, args, terminator.source_info.span, sig)?;\n             }\n \n             Drop { ref location, target, .. } => {\n                 let lval = self.eval_lvalue(location)?;\n+                let src_ptr = self.force_allocation(lval)?.to_ptr();\n \n                 let ty = self.lvalue_ty(location);\n \n@@ -97,6 +99,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Lvalue::from_ptr(Pointer::zst_ptr()),\n                     StackPopCleanup::None,\n                 )?;\n+\n+                let mut arg_locals = self.frame().mir.args_iter();\n+                assert_eq!(self.frame().mir.arg_count, 1);\n+                let arg_local = arg_locals.next().unwrap();\n+                let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                let arg_ty = self.tcx.mk_mut_ptr(ty);\n+                self.write_value(Value::ByVal(PrimVal::Ptr(src_ptr)), dest, arg_ty)?;\n             }\n \n             Assert { ref cond, expected, ref msg, target, .. } => {\n@@ -135,22 +144,23 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         destination: Option<(Lvalue<'tcx>, mir::BasicBlock)>,\n         arg_operands: &[mir::Operand<'tcx>],\n         span: Span,\n-        abi: Abi,\n+        sig: ty::FnSig<'tcx>,\n     ) -> EvalResult<'tcx> {\n         trace!(\"eval_fn_call: {:#?}\", instance);\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n-                unimplemented!();\n-                /*let sig = self.erase_lifetimes(&sig);\n-                let ty = sig.output();\n-                let layout = self.type_layout(ty)?;\n                 let (ret, target) = match destination {\n-                    Some(dest) if is_inhabited(self.tcx, ty) => dest,\n+                    Some(dest) => dest,\n                     _ => return Err(EvalError::Unreachable),\n                 };\n+                let ty = sig.output();\n+                if !is_inhabited(self.tcx, ty) {\n+                    return Err(EvalError::Unreachable);\n+                }\n+                let layout = self.type_layout(ty)?;\n                 self.call_intrinsic(instance, arg_operands, ret, ty, layout, target)?;\n                 self.dump_local(ret);\n-                Ok(())*/\n+                Ok(())\n             },\n             /*Abi::C => {\n                 let sig = self.erase_lifetimes(&sig);\n@@ -172,7 +182,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let arg_ty = self.operand_ty(arg);\n                     args.push((arg_val, arg_ty));\n                 }\n-                assert_eq!(abi, Abi::RustCall);\n+                assert_eq!(sig.abi, Abi::RustCall);\n                 self.eval_fn_call_inner(\n                     instance,\n                     destination,\n@@ -187,7 +197,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let arg_ty = self.operand_ty(arg);\n                     args.push((arg_val, arg_ty));\n                 }\n-                match abi {\n+                match sig.abi {\n                     Abi::C => unimplemented!(),\n                     Abi::Rust => {},\n                     Abi::RustCall => self.unpack_fn_args(&mut args)?,\n@@ -200,7 +210,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     span,\n                 )\n             },\n-            _ => Err(EvalError::Unimplemented(format!(\"can't handle function with {:?} ABI\", abi))),\n+            _ => Err(EvalError::Unimplemented(format!(\"can't handle function with {:?} ABI\", sig.abi))),\n         }\n     }\n "}]}