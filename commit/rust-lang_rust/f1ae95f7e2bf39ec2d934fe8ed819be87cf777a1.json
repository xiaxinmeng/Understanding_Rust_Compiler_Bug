{"sha": "f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWU5NWY3ZTJiZjM5ZWMyZDkzNGZlOGVkODE5YmU4N2NmNzc3YTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-12T21:26:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-12T21:26:55Z"}, "message": "Rollup merge of #53223 - ljedrz:cleanup_data_structures, r=oli-obk\n\nA few cleanups for rustc_data_structures\n\n- remove a redundant `clone()`\n- make some calls to `.iter()` implicit\n- collapse/simplify a few operations\n- remove some explicit `return`s\n- make `SnapshotMap::{commit, rollback_to}` take references\n- remove unnecessary struct field names\n- change `transmute()`s in `IdxSet::{from_slice, from_slice_mut}` to casts\n- remove some unnecessary lifetime annotations\n- split 2 long literals", "tree": {"sha": "f40dedd04ed89abfea85964670a31b641a62a0da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f40dedd04ed89abfea85964670a31b641a62a0da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcKYfCRBK7hj4Ov3rIwAAdHIIAGyZPuSOsgkwABI92lJL/nXb\nm6Es1Apy0K4ZkZI0ToELgWeAJO8tWf6Atf5zNvo6aaRVuZteVvZoBbLem6y3r0eC\nEzz/3UPPBlgS1bMYHVK4dseSA+AHIxPl2Olmrrx6D9ga9wuZSaXM9vQLD2u8K8H8\nmge40IVtNQcC+z6mD4cqgD2zOScE0VM38M1oCM9e1Q6xgurIjw8LUDOe/KMr+z7J\njN163TMYsABh/bDLtAro16pwqViWKWDuBfLGZ7EWXEVmsIW5HHd1sn/j+lLHhdcp\n/JzCVyHydKz10euzNRivesiLdj87JTUaj/OUaiNK85sBe9PBazazs8o8QIyY3NU=\n=Vilz\n-----END PGP SIGNATURE-----\n", "payload": "tree f40dedd04ed89abfea85964670a31b641a62a0da\nparent 0903b18e9f867a5a8e2418b1dd7212ccdb0c3816\nparent 94c38568048b579c5a29768a8d4bacb8c9d687e1\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1534109215 +0200\ncommitter GitHub <noreply@github.com> 1534109215 +0200\n\nRollup merge of #53223 - ljedrz:cleanup_data_structures, r=oli-obk\n\nA few cleanups for rustc_data_structures\n\n- remove a redundant `clone()`\n- make some calls to `.iter()` implicit\n- collapse/simplify a few operations\n- remove some explicit `return`s\n- make `SnapshotMap::{commit, rollback_to}` take references\n- remove unnecessary struct field names\n- change `transmute()`s in `IdxSet::{from_slice, from_slice_mut}` to casts\n- remove some unnecessary lifetime annotations\n- split 2 long literals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "html_url": "https://github.com/rust-lang/rust/commit/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0903b18e9f867a5a8e2418b1dd7212ccdb0c3816", "url": "https://api.github.com/repos/rust-lang/rust/commits/0903b18e9f867a5a8e2418b1dd7212ccdb0c3816", "html_url": "https://github.com/rust-lang/rust/commit/0903b18e9f867a5a8e2418b1dd7212ccdb0c3816"}, {"sha": "94c38568048b579c5a29768a8d4bacb8c9d687e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c38568048b579c5a29768a8d4bacb8c9d687e1", "html_url": "https://github.com/rust-lang/rust/commit/94c38568048b579c5a29768a8d4bacb8c9d687e1"}], "stats": {"total": 85, "additions": 42, "deletions": 43}, "files": [{"sha": "eed6215150fdbf829eafa24d7b22fcf7d54d1e0b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -709,7 +709,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         self.projection_cache\n             .borrow_mut()\n-            .commit(projection_cache_snapshot);\n+            .commit(&projection_cache_snapshot);\n         self.type_variables\n             .borrow_mut()\n             .commit(type_snapshot);"}, {"sha": "1224cdd76d85ba4891f1fea429392fd73bab3d62", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -1668,15 +1668,15 @@ impl<'tcx> ProjectionCache<'tcx> {\n     }\n \n     pub fn rollback_to(&mut self, snapshot: ProjectionCacheSnapshot) {\n-        self.map.rollback_to(snapshot.snapshot);\n+        self.map.rollback_to(&snapshot.snapshot);\n     }\n \n     pub fn rollback_skolemized(&mut self, snapshot: &ProjectionCacheSnapshot) {\n         self.map.partial_rollback(&snapshot.snapshot, &|k| k.ty.has_re_skol());\n     }\n \n-    pub fn commit(&mut self, snapshot: ProjectionCacheSnapshot) {\n-        self.map.commit(snapshot.snapshot);\n+    pub fn commit(&mut self, snapshot: &ProjectionCacheSnapshot) {\n+        self.map.commit(&snapshot.snapshot);\n     }\n \n     /// Try to start normalize `key`; returns an error if"}, {"sha": "d3b47daa5b4b89aa7569b7167736bfe924270fb7", "filename": "src/librustc_data_structures/base_n.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbase_n.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -17,7 +17,7 @@ pub const MAX_BASE: usize = 64;\n pub const ALPHANUMERIC_ONLY: usize = 62;\n pub const CASE_INSENSITIVE: usize = 36;\n \n-const BASE_64: &'static [u8; MAX_BASE as usize] =\n+const BASE_64: &[u8; MAX_BASE as usize] =\n     b\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$\";\n \n #[inline]\n@@ -37,7 +37,8 @@ pub fn push_str(mut n: u128, base: usize, output: &mut String) {\n             break;\n         }\n     }\n-    &mut s[0..index].reverse();\n+    s[0..index].reverse();\n+\n     output.push_str(str::from_utf8(&s[0..index]).unwrap());\n }\n "}, {"sha": "a63033c436528bc866e32f5877f17f86be911a32", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -75,7 +75,7 @@ fn bit_lookup(bit: usize) -> BitLookup {\n     let word = bit / word_bits;\n     let bit_in_word = bit % word_bits;\n     let bit_mask = 1 << bit_in_word;\n-    BitLookup { word: word, bit_in_word: bit_in_word, bit_mask: bit_mask }\n+    BitLookup { word, bit_in_word, bit_mask }\n }\n \n pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n@@ -105,7 +105,8 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n         sep = '|';\n     }\n     result.push(']');\n-    return result\n+\n+    result\n }\n \n #[inline]"}, {"sha": "49ab3e58812dcfb703ea926798cc610a7ed57024", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -196,7 +196,8 @@ impl<'a, C: Idx> Iterator for BitIter<'a, C> {\n         self.current >>= offset;\n         self.current >>= 1; // shift otherwise overflows for 0b1000_0000_\u2026_0000\n         self.idx += offset + 1;\n-        return Some(C::new(self.idx - 1));\n+\n+        Some(C::new(self.idx - 1))\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n@@ -299,7 +300,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n             let v1 = vector[write_index];\n             let v2 = v1 | vector[read_index];\n             vector[write_index] = v2;\n-            changed = changed | (v1 != v2);\n+            changed |= v1 != v2;\n         }\n         changed\n     }"}, {"sha": "3f248dadb66c14b02a556996ffacc77abb4a29bd", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -254,8 +254,8 @@ mod imp {\n     type ULONG_PTR = usize;\n \n     type LPOVERLAPPED = *mut OVERLAPPED;\n-    const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x00000002;\n-    const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x00000001;\n+    const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x0000_0002;\n+    const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x0000_0001;\n \n     const FILE_SHARE_DELETE: DWORD = 0x4;\n     const FILE_SHARE_READ: DWORD = 0x1;"}, {"sha": "e54147cbe7c8793a9e4d36925f14c5d5c296d4e7", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -107,7 +107,8 @@ fn intersect<Node: Idx>(\n             node2 = immediate_dominators[node2].unwrap();\n         }\n     }\n-    return node1;\n+\n+    node1\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "baac75658686545e0eddd4f3ee84b7163b4fc7eb", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -90,7 +90,7 @@ pub const INCOMING: Direction = Direction { repr: 1 };\n \n impl NodeIndex {\n     /// Returns unique id (unique with respect to the graph holding associated node).\n-    pub fn node_id(&self) -> usize {\n+    pub fn node_id(self) -> usize {\n         self.0\n     }\n }\n@@ -187,7 +187,7 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         self.nodes[source.0].first_edge[OUTGOING.repr] = idx;\n         self.nodes[target.0].first_edge[INCOMING.repr] = idx;\n \n-        return idx;\n+        idx\n     }\n \n     pub fn edge(&self, idx: EdgeIndex) -> &Edge<E> {\n@@ -261,8 +261,8 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n \n-    pub fn nodes_in_postorder<'a>(\n-        &'a self,\n+    pub fn nodes_in_postorder(\n+        &self,\n         direction: Direction,\n         entry_node: NodeIndex,\n     ) -> Vec<NodeIndex> {"}, {"sha": "340fe057096d8eb2fbc1ddebcafac6c2f03aca1d", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -59,16 +59,13 @@ impl<T: Idx> rustc_serialize::Decodable for IdxSetBuf<T> {\n \n // pnkfelix wants to have this be `IdxSet<T>([Word]) and then pass\n // around `&mut IdxSet<T>` or `&IdxSet<T>`.\n-//\n-// WARNING: Mapping a `&IdxSetBuf<T>` to `&IdxSet<T>` (at least today)\n-// requires a transmute relying on representation guarantees that may\n-// not hold in the future.\n \n /// Represents a set (or packed family of sets), of some element type\n /// E, where each E is identified by some unique index type `T`.\n ///\n /// In other words, `T` is the type used to index into the bitslice\n /// this type uses to represent the set of object it holds.\n+#[repr(transparent)]\n pub struct IdxSet<T: Idx> {\n     _pd: PhantomData<fn(&T)>,\n     bits: [Word],\n@@ -134,11 +131,11 @@ impl<T: Idx> IdxSetBuf<T> {\n \n impl<T: Idx> IdxSet<T> {\n     unsafe fn from_slice(s: &[Word]) -> &Self {\n-        mem::transmute(s) // (see above WARNING)\n+        &*(s as *const [Word] as *const Self)\n     }\n \n     unsafe fn from_slice_mut(s: &mut [Word]) -> &mut Self {\n-        mem::transmute(s) // (see above WARNING)\n+        &mut *(s as *mut [Word] as *mut Self)\n     }\n }\n "}, {"sha": "7ef88852685d5bd33a836f193e20bad0b6834c2b", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -573,7 +573,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         }\n \n         let mut kill_list = vec![];\n-        for (predicate, index) in self.waiting_cache.iter_mut() {\n+        for (predicate, index) in &mut self.waiting_cache {\n             let new_index = node_rewrites[index.get()];\n             if new_index >= nodes_len {\n                 kill_list.push(predicate.clone());"}, {"sha": "5030bf98dffd54f0b90e5bb5195da0e0bc3e72c9", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -92,7 +92,7 @@ impl<K, V> SnapshotMap<K, V>\n     pub fn snapshot(&mut self) -> Snapshot {\n         self.undo_log.push(UndoLog::OpenSnapshot);\n         let len = self.undo_log.len() - 1;\n-        Snapshot { len: len }\n+        Snapshot { len }\n     }\n \n     fn assert_open_snapshot(&self, snapshot: &Snapshot) {\n@@ -103,8 +103,8 @@ impl<K, V> SnapshotMap<K, V>\n         });\n     }\n \n-    pub fn commit(&mut self, snapshot: Snapshot) {\n-        self.assert_open_snapshot(&snapshot);\n+    pub fn commit(&mut self, snapshot: &Snapshot) {\n+        self.assert_open_snapshot(snapshot);\n         if snapshot.len == 0 {\n             // The root snapshot.\n             self.undo_log.truncate(0);\n@@ -135,8 +135,8 @@ impl<K, V> SnapshotMap<K, V>\n         }\n     }\n \n-    pub fn rollback_to(&mut self, snapshot: Snapshot) {\n-        self.assert_open_snapshot(&snapshot);\n+    pub fn rollback_to(&mut self, snapshot: &Snapshot) {\n+        self.assert_open_snapshot(snapshot);\n         while self.undo_log.len() > snapshot.len + 1 {\n             let entry = self.undo_log.pop().unwrap();\n             self.reverse(entry);"}, {"sha": "b163e0fe420ec7f222338c7b4dfc9c7e52679576", "filename": "src/librustc_data_structures/snapshot_map/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -20,7 +20,7 @@ fn basic() {\n     map.insert(44, \"fourty-four\");\n     assert_eq!(map[&44], \"fourty-four\");\n     assert_eq!(map.get(&33), None);\n-    map.rollback_to(snapshot);\n+    map.rollback_to(&snapshot);\n     assert_eq!(map[&22], \"twenty-two\");\n     assert_eq!(map.get(&33), None);\n     assert_eq!(map.get(&44), None);\n@@ -33,7 +33,7 @@ fn out_of_order() {\n     map.insert(22, \"twenty-two\");\n     let snapshot1 = map.snapshot();\n     let _snapshot2 = map.snapshot();\n-    map.rollback_to(snapshot1);\n+    map.rollback_to(&snapshot1);\n }\n \n #[test]\n@@ -43,8 +43,8 @@ fn nested_commit_then_rollback() {\n     let snapshot1 = map.snapshot();\n     let snapshot2 = map.snapshot();\n     map.insert(22, \"thirty-three\");\n-    map.commit(snapshot2);\n+    map.commit(&snapshot2);\n     assert_eq!(map[&22], \"thirty-three\");\n-    map.rollback_to(snapshot1);\n+    map.rollback_to(&snapshot1);\n     assert_eq!(map[&22], \"twenty-two\");\n }"}, {"sha": "e1bfdf35b274e0d31ff7be040948e0319cf9d0bb", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -107,7 +107,8 @@ impl<T: PartialEq> Element<T> {\n         };\n \n         self.next = new_next;\n-        return true\n+\n+        true\n     }\n \n     fn len(&self) -> usize {"}, {"sha": "18a1e9129b34284bd6949794742d7b83bedba6ef", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=f1ae95f7e2bf39ec2d934fe8ed819be87cf777a1", "patch": "@@ -77,7 +77,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n             ..\n         } = self;\n \n-        map.entry(a.clone())\n+        *map.entry(a.clone())\n            .or_insert_with(|| {\n                elements.push(a);\n \n@@ -86,7 +86,6 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n \n                Index(elements.len() - 1)\n            })\n-           .clone()\n     }\n \n     /// Applies the (partial) function to each edge and returns a new\n@@ -98,14 +97,12 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     {\n         let mut result = TransitiveRelation::new();\n         for edge in &self.edges {\n-            let r = f(&self.elements[edge.source.0]).and_then(|source| {\n+            f(&self.elements[edge.source.0]).and_then(|source| {\n                 f(&self.elements[edge.target.0]).and_then(|target| {\n-                    Some(result.add(source, target))\n+                    result.add(source, target);\n+                    Some(())\n                 })\n-            });\n-            if r.is_none() {\n-                return None;\n-            }\n+            })?;\n         }\n         Some(result)\n     }\n@@ -372,7 +369,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n         let mut changed = true;\n         while changed {\n             changed = false;\n-            for edge in self.edges.iter() {\n+            for edge in &self.edges {\n                 // add an edge from S -> T\n                 changed |= matrix.add(edge.source.0, edge.target.0);\n "}]}