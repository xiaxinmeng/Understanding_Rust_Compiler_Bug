{"sha": "c1585a17a3c1c969578c788bfe232954f86ef40b", "node_id": "C_kwDOAAsO6NoAKGMxNTg1YTE3YTNjMWM5Njk1NzhjNzg4YmZlMjMyOTU0Zjg2ZWY0MGI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-04T01:06:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-04T01:06:38Z"}, "message": "Rollup merge of #93913 - bjorn3:remove_everybody_loops, r=jackh726\n\nRemove the everybody loops pass\n\nIt isn't used anymore by rustdoc.\n\nSplit out of https://github.com/rust-lang/rust/pull/92895. There has been some previous discussion there.", "tree": {"sha": "e132ba0a4b03193e92dca02dfa9ff96624990750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e132ba0a4b03193e92dca02dfa9ff96624990750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1585a17a3c1c969578c788bfe232954f86ef40b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIWYfCRBK7hj4Ov3rIwAAnz0IAAuHMuTnr0JX1TRigY/XIXm0\nFCjRjZPDSnwiWD2DGnMyJuKLlIZ2pwQ4euRvTjreEbGJCZKnRa+7bQHuzWeaErj1\nxe0PP6w6tYvSSJUa2xYlEX1WklCFVidPa7+gdDvKP8CLePOxYCxBLKSnRxc26yKU\nVz+atAm1KjIrRVSaDzC7Pv2hosz7xR499duBYb4R3rK9cEChb9Rf1w/9fPnlLz7u\nf+LwVRfixFDxZQ/NtBycD1CM92NK6gmGFBIM/cTTsL6ECHpF8qmO8EfV2EHFUGQj\nzatdLlBLQDVEbKHQUtxlECoWTTH0Px+U07yCREC8Ofkox2xYTK8dXkOW1mRXsfQ=\n=4yLm\n-----END PGP SIGNATURE-----\n", "payload": "tree e132ba0a4b03193e92dca02dfa9ff96624990750\nparent c695de05f23555bc7119f2b2a7ab4be5602dbaf2\nparent 2f84484aac0b3b780b903a0438f42aadafb6f14f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646355998 +0100\ncommitter GitHub <noreply@github.com> 1646355998 +0100\n\nRollup merge of #93913 - bjorn3:remove_everybody_loops, r=jackh726\n\nRemove the everybody loops pass\n\nIt isn't used anymore by rustdoc.\n\nSplit out of https://github.com/rust-lang/rust/pull/92895. There has been some previous discussion there.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1585a17a3c1c969578c788bfe232954f86ef40b", "html_url": "https://github.com/rust-lang/rust/commit/c1585a17a3c1c969578c788bfe232954f86ef40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1585a17a3c1c969578c788bfe232954f86ef40b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c695de05f23555bc7119f2b2a7ab4be5602dbaf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c695de05f23555bc7119f2b2a7ab4be5602dbaf2", "html_url": "https://github.com/rust-lang/rust/commit/c695de05f23555bc7119f2b2a7ab4be5602dbaf2"}, {"sha": "2f84484aac0b3b780b903a0438f42aadafb6f14f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f84484aac0b3b780b903a0438f42aadafb6f14f", "html_url": "https://github.com/rust-lang/rust/commit/2f84484aac0b3b780b903a0438f42aadafb6f14f"}], "stats": {"total": 321, "additions": 12, "deletions": 309}, "files": [{"sha": "12bac956adb557048145a6513db63bee7bf32867", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=c1585a17a3c1c969578c788bfe232954f86ef40b", "patch": "@@ -42,7 +42,7 @@ where\n     F: FnOnce(&dyn PrinterSupport) -> A,\n {\n     match *ppmode {\n-        Normal | EveryBodyLoops | Expanded => {\n+        Normal | Expanded => {\n             let annotation = NoAnn { sess, tcx };\n             f(&annotation)\n         }"}, {"sha": "35688a6591239794ab0a11ffb5cc5544015ff820", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c1585a17a3c1c969578c788bfe232954f86ef40b", "patch": "@@ -3,7 +3,6 @@ use crate::proc_macro_decls;\n use crate::util;\n \n use ast::CRATE_NODE_ID;\n-use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n@@ -29,7 +28,7 @@ use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_serialize::json;\n-use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode};\n+use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n@@ -384,11 +383,6 @@ pub fn configure_and_expand(\n         rustc_builtin_macros::test_harness::inject(sess, resolver, &mut krate)\n     });\n \n-    if let Some(PpMode::Source(PpSourceMode::EveryBodyLoops)) = sess.opts.pretty {\n-        tracing::debug!(\"replacing bodies with loop {{}}\");\n-        util::ReplaceBodyWithLoop::new(resolver).visit_crate(&mut krate);\n-    }\n-\n     let has_proc_macro_decls = sess.time(\"AST_validation\", || {\n         rustc_ast_passes::ast_validation::check_crate(sess, &krate, resolver.lint_buffer())\n     });\n@@ -457,18 +451,12 @@ pub fn configure_and_expand(\n     });\n \n     // Add all buffered lints from the `ParseSess` to the `Session`.\n-    // The ReplaceBodyWithLoop pass may have deleted some AST nodes, potentially\n-    // causing a delay_span_bug later if a buffered lint refers to such a deleted\n-    // AST node (issue #87308). Since everybody_loops is for pretty-printing only,\n-    // anyway, we simply skip all buffered lints here.\n-    if !matches!(sess.opts.pretty, Some(PpMode::Source(PpSourceMode::EveryBodyLoops))) {\n-        sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n-            info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n-            for early_lint in buffered_lints.drain(..) {\n-                resolver.lint_buffer().add_early_lint(early_lint);\n-            }\n-        });\n-    }\n+    sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n+        info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n+        for early_lint in buffered_lints.drain(..) {\n+            resolver.lint_buffer().add_early_lint(early_lint);\n+        }\n+    });\n \n     // Gate identifiers containing invalid Unicode codepoints that were recovered during lexing.\n     sess.parse_sess.bad_unicode_identifiers.with_lock(|identifiers| {"}, {"sha": "592cf60e6c3bb30b3bb1fa20d8cb4915dfb035c4", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 214, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=c1585a17a3c1c969578c788bfe232954f86ef40b", "patch": "@@ -1,7 +1,5 @@\n use libloading::Library;\n-use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n-use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Term};\n+use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n@@ -13,7 +11,6 @@ use rustc_middle::ty::tls;\n use rustc_parse::validate_attr;\n #[cfg(parallel_compiler)]\n use rustc_query_impl::QueryCtxt;\n-use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n@@ -25,12 +22,10 @@ use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::FileLoader;\n use rustc_span::symbol::{sym, Symbol};\n-use smallvec::SmallVec;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::lazy::SyncOnceCell;\n use std::mem;\n-use std::ops::DerefMut;\n #[cfg(not(parallel_compiler))]\n use std::panic;\n use std::path::{Path, PathBuf};\n@@ -664,214 +659,6 @@ pub fn non_durable_rename(src: &Path, dst: &Path) -> std::io::Result<()> {\n     std::fs::rename(src, dst)\n }\n \n-/// Replaces function bodies with `loop {}` (an infinite loop). This gets rid of\n-/// all semantic errors in the body while still satisfying the return type,\n-/// except in certain cases, see below for more.\n-///\n-/// This pass is known as `everybody_loops`. Very punny.\n-///\n-/// As of March 2021, `everybody_loops` is only used for the\n-/// `-Z unpretty=everybody_loops` debugging option.\n-///\n-/// FIXME: Currently the `everybody_loops` transformation is not applied to:\n-///  * `const fn`; support could be added, but hasn't. Originally `const fn`\n-///    was skipped due to issue #43636 that `loop` was not supported for\n-///    const evaluation.\n-///  * `impl Trait`, due to issue #43869 that functions returning impl Trait cannot be diverging.\n-///    Solving this may require `!` to implement every trait, which relies on the an even more\n-///    ambitious form of the closed RFC #1637. See also [#34511].\n-///\n-/// [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n-pub struct ReplaceBodyWithLoop<'a, 'b> {\n-    within_static_or_const: bool,\n-    nested_blocks: Option<Vec<ast::Block>>,\n-    resolver: &'a mut Resolver<'b>,\n-}\n-\n-impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n-    pub fn new(resolver: &'a mut Resolver<'b>) -> ReplaceBodyWithLoop<'a, 'b> {\n-        ReplaceBodyWithLoop { within_static_or_const: false, nested_blocks: None, resolver }\n-    }\n-\n-    fn run<R, F: FnOnce(&mut Self) -> R>(&mut self, is_const: bool, action: F) -> R {\n-        let old_const = mem::replace(&mut self.within_static_or_const, is_const);\n-        let old_blocks = self.nested_blocks.take();\n-        let ret = action(self);\n-        self.within_static_or_const = old_const;\n-        self.nested_blocks = old_blocks;\n-        ret\n-    }\n-\n-    fn should_ignore_fn(ret_ty: &ast::FnRetTy) -> bool {\n-        let ast::FnRetTy::Ty(ref ty) = ret_ty else {\n-            return false;\n-        };\n-        fn involves_impl_trait(ty: &ast::Ty) -> bool {\n-            match ty.kind {\n-                ast::TyKind::ImplTrait(..) => true,\n-                ast::TyKind::Slice(ref subty)\n-                | ast::TyKind::Array(ref subty, _)\n-                | ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. })\n-                | ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. })\n-                | ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n-                ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n-                ast::TyKind::Path(_, ref path) => {\n-                    path.segments.iter().any(|seg| match seg.args.as_deref() {\n-                        None => false,\n-                        Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n-                            data.args.iter().any(|arg| match arg {\n-                                ast::AngleBracketedArg::Arg(arg) => match arg {\n-                                    ast::GenericArg::Type(ty) => involves_impl_trait(ty),\n-                                    ast::GenericArg::Lifetime(_) | ast::GenericArg::Const(_) => {\n-                                        false\n-                                    }\n-                                },\n-                                ast::AngleBracketedArg::Constraint(c) => match c.kind {\n-                                    ast::AssocConstraintKind::Bound { .. } => true,\n-                                    ast::AssocConstraintKind::Equality { ref term } => {\n-                                        match term {\n-                                            Term::Ty(ty) => involves_impl_trait(ty),\n-                                            // FIXME(...): This should check if the constant\n-                                            // involves a trait impl, but for now ignore.\n-                                            Term::Const(_) => false,\n-                                        }\n-                                    }\n-                                },\n-                            })\n-                        }\n-                        Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n-                            any_involves_impl_trait(data.inputs.iter())\n-                                || ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n-                        }\n-                    })\n-                }\n-                _ => false,\n-            }\n-        }\n-\n-        fn any_involves_impl_trait<'a, I: Iterator<Item = &'a P<ast::Ty>>>(mut it: I) -> bool {\n-            it.any(|subty| involves_impl_trait(subty))\n-        }\n-\n-        involves_impl_trait(ty)\n-    }\n-\n-    fn is_sig_const(sig: &ast::FnSig) -> bool {\n-        matches!(sig.header.constness, ast::Const::Yes(_))\n-            || ReplaceBodyWithLoop::should_ignore_fn(&sig.decl.output)\n-    }\n-}\n-\n-impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n-    fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n-        let is_const = match i {\n-            ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(box ast::Fn { ref sig, .. }) => Self::is_sig_const(sig),\n-            _ => false,\n-        };\n-        self.run(is_const, |s| noop_visit_item_kind(i, s))\n-    }\n-\n-    fn flat_map_trait_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n-        let is_const = match i.kind {\n-            ast::AssocItemKind::Const(..) => true,\n-            ast::AssocItemKind::Fn(box ast::Fn { ref sig, .. }) => Self::is_sig_const(sig),\n-            _ => false,\n-        };\n-        self.run(is_const, |s| noop_flat_map_assoc_item(i, s))\n-    }\n-\n-    fn flat_map_impl_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n-        self.flat_map_trait_item(i)\n-    }\n-\n-    fn visit_anon_const(&mut self, c: &mut ast::AnonConst) {\n-        self.run(true, |s| noop_visit_anon_const(c, s))\n-    }\n-\n-    fn visit_block(&mut self, b: &mut P<ast::Block>) {\n-        fn stmt_to_block(\n-            rules: ast::BlockCheckMode,\n-            s: Option<ast::Stmt>,\n-            resolver: &mut Resolver<'_>,\n-        ) -> ast::Block {\n-            ast::Block {\n-                stmts: s.into_iter().collect(),\n-                rules,\n-                id: resolver.next_node_id(),\n-                span: rustc_span::DUMMY_SP,\n-                tokens: None,\n-                could_be_bare_literal: false,\n-            }\n-        }\n-\n-        fn block_to_stmt(b: ast::Block, resolver: &mut Resolver<'_>) -> ast::Stmt {\n-            let expr = P(ast::Expr {\n-                id: resolver.next_node_id(),\n-                kind: ast::ExprKind::Block(P(b), None),\n-                span: rustc_span::DUMMY_SP,\n-                attrs: AttrVec::new(),\n-                tokens: None,\n-            });\n-\n-            ast::Stmt {\n-                id: resolver.next_node_id(),\n-                kind: ast::StmtKind::Expr(expr),\n-                span: rustc_span::DUMMY_SP,\n-            }\n-        }\n-\n-        let empty_block = stmt_to_block(BlockCheckMode::Default, None, self.resolver);\n-        let loop_expr = P(ast::Expr {\n-            kind: ast::ExprKind::Loop(P(empty_block), None),\n-            id: self.resolver.next_node_id(),\n-            span: rustc_span::DUMMY_SP,\n-            attrs: AttrVec::new(),\n-            tokens: None,\n-        });\n-\n-        let loop_stmt = ast::Stmt {\n-            id: self.resolver.next_node_id(),\n-            span: rustc_span::DUMMY_SP,\n-            kind: ast::StmtKind::Expr(loop_expr),\n-        };\n-\n-        if self.within_static_or_const {\n-            noop_visit_block(b, self)\n-        } else {\n-            visit_clobber(b.deref_mut(), |b| {\n-                let mut stmts = vec![];\n-                for s in b.stmts {\n-                    let old_blocks = self.nested_blocks.replace(vec![]);\n-\n-                    stmts.extend(self.flat_map_stmt(s).into_iter().filter(|s| s.is_item()));\n-\n-                    // we put a Some in there earlier with that replace(), so this is valid\n-                    let new_blocks = self.nested_blocks.take().unwrap();\n-                    self.nested_blocks = old_blocks;\n-                    stmts.extend(new_blocks.into_iter().map(|b| block_to_stmt(b, self.resolver)));\n-                }\n-\n-                let mut new_block = ast::Block { stmts, ..b };\n-\n-                if let Some(old_blocks) = self.nested_blocks.as_mut() {\n-                    //push our fresh block onto the cache and yield an empty block with `loop {}`\n-                    if !new_block.stmts.is_empty() {\n-                        old_blocks.push(new_block);\n-                    }\n-\n-                    stmt_to_block(b.rules, Some(loop_stmt), &mut self.resolver)\n-                } else {\n-                    //push `loop {}` onto the end of our fresh block and yield that\n-                    new_block.stmts.push(loop_stmt);\n-\n-                    new_block\n-                }\n-            })\n-        }\n-    }\n-}\n-\n /// Returns a version string such as \"1.46.0 (04488afe3 2020-08-24)\"\n pub fn version_str() -> Option<&'static str> {\n     option_env!(\"CFG_VERSION\")"}, {"sha": "d1cab6280153de0b13c421ea8fd11c06752dadf9", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c1585a17a3c1c969578c788bfe232954f86ef40b", "patch": "@@ -2509,7 +2509,6 @@ fn parse_pretty(debugging_opts: &DebuggingOptions, efmt: ErrorOutputType) -> Opt\n     let first = match debugging_opts.unpretty.as_deref()? {\n         \"normal\" => Source(PpSourceMode::Normal),\n         \"identified\" => Source(PpSourceMode::Identified),\n-        \"everybody_loops\" => Source(PpSourceMode::EveryBodyLoops),\n         \"expanded\" => Source(PpSourceMode::Expanded),\n         \"expanded,identified\" => Source(PpSourceMode::ExpandedIdentified),\n         \"expanded,hygiene\" => Source(PpSourceMode::ExpandedHygiene),\n@@ -2645,8 +2644,6 @@ impl fmt::Display for CrateType {\n pub enum PpSourceMode {\n     /// `-Zunpretty=normal`\n     Normal,\n-    /// `-Zunpretty=everybody_loops`\n-    EveryBodyLoops,\n     /// `-Zunpretty=expanded`\n     Expanded,\n     /// `-Zunpretty=identified`\n@@ -2678,7 +2675,7 @@ pub enum PpHirMode {\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpMode {\n     /// Options that print the source code, i.e.\n-    /// `-Zunpretty=normal` and `-Zunpretty=everybody_loops`\n+    /// `-Zunpretty=normal` and `-Zunpretty=expanded`\n     Source(PpSourceMode),\n     AstTree(PpAstTreeMode),\n     /// Options that print the HIR, i.e. `-Zunpretty=hir`\n@@ -2700,7 +2697,7 @@ impl PpMode {\n         match *self {\n             Source(Normal | Identified) | AstTree(PpAstTreeMode::Normal) => false,\n \n-            Source(Expanded | EveryBodyLoops | ExpandedIdentified | ExpandedHygiene)\n+            Source(Expanded | ExpandedIdentified | ExpandedHygiene)\n             | AstTree(PpAstTreeMode::Expanded)\n             | Hir(_)\n             | HirTree"}, {"sha": "17eec333e0980694a871c525ee533e3a6ecf757c", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c1585a17a3c1c969578c788bfe232954f86ef40b", "patch": "@@ -1491,7 +1491,6 @@ options! {\n         `normal`, `identified`,\n         `expanded`, `expanded,identified`,\n         `expanded,hygiene` (with internal representations),\n-        `everybody_loops` (all function bodies replaced with `loop {}`),\n         `ast-tree` (raw AST before expansion),\n         `ast-tree,expanded` (raw AST after expansion),\n         `hir` (the HIR), `hir,identified`,"}, {"sha": "1826c3f5f7fa506ea806d7546b90b3c881b7b35f", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1585a17a3c1c969578c788bfe232954f86ef40b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=c1585a17a3c1c969578c788bfe232954f86ef40b", "patch": "@@ -82,8 +82,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n             // The `def_id` here actually was calculated during resolution (at least\n             // at the time of this writing) and is being shipped to us via a side\n             // channel of the tcx. There may have been extra expansion phases,\n-            // however, which ended up removing the `def_id` *after* expansion such\n-            // as the `ReplaceBodyWithLoop` pass (which is a bit of a hack, but hey)\n+            // however, which ended up removing the `def_id` *after* expansion.\n             //\n             // As a result we need to verify that `def_id` is indeed still valid for\n             // our AST and actually present in the HIR map. If it's not there then"}, {"sha": "48fbb2a0139f050abd67bea238904063c00e3eae", "filename": "src/test/ui/lint/issue-87308.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Flint%2Fissue-87308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Flint%2Fissue-87308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-87308.rs?ref=c695de05f23555bc7119f2b2a7ab4be5602dbaf2", "patch": "@@ -1,12 +0,0 @@\n-// Regression test for issue #87308.\n-\n-// compile-flags: -Zunpretty=everybody_loops\n-// check-pass\n-\n-macro_rules! foo {\n-    () => { break 'x; }\n-}\n-\n-pub fn main() {\n-    'x: loop { foo!() }\n-}"}, {"sha": "4f81ee8b7e6bb59422b2849ace99552762492020", "filename": "src/test/ui/lint/issue-87308.stdout", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout?ref=c695de05f23555bc7119f2b2a7ab4be5602dbaf2", "patch": "@@ -1,14 +0,0 @@\n-#![feature(prelude_import)]\n-#![no_std]\n-#[prelude_import]\n-use ::std::prelude::rust_2015::*;\n-#[macro_use]\n-extern crate std;\n-// Regression test for issue #87308.\n-\n-// compile-flags: -Zunpretty=everybody_loops\n-// check-pass\n-\n-macro_rules! foo { () => { break 'x ; } }\n-\n-pub fn main() { loop {} }"}, {"sha": "6b7e831ed2f7a47c54e83713ddfbb2194e094d21", "filename": "src/test/ui/repr/issue-83921-pretty.normal.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr?ref=c695de05f23555bc7119f2b2a7ab4be5602dbaf2", "patch": "@@ -1,9 +0,0 @@\n-error[E0565]: meta item in `repr` must be an identifier\n-  --> $DIR/issue-83921-pretty.rs:10:8\n-   |\n-LL | #[repr(\"C\")]\n-   |        ^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0565`."}, {"sha": "aaf3993538acf1c7fecd52ab8d6ba76c76a0e79e", "filename": "src/test/ui/repr/issue-83921-pretty.pretty.stdout", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout?ref=c695de05f23555bc7119f2b2a7ab4be5602dbaf2", "patch": "@@ -1,18 +0,0 @@\n-#![feature(prelude_import)]\n-#![no_std]\n-#[prelude_import]\n-use ::std::prelude::rust_2015::*;\n-#[macro_use]\n-extern crate std;\n-// Regression test for #83921. A `delay_span_bug()` call was issued, but the\n-// error was never reported because the pass responsible for detecting and\n-// reporting the error does not run in certain modes of pretty-printing.\n-\n-// Make sure the error is reported if we do not just pretty-print:\n-// revisions: pretty normal\n-// [pretty]compile-flags: -Zunpretty=everybody_loops\n-// [pretty]check-pass\n-#[repr(\"C\")]\n-struct A {}\n-\n-fn main() { loop {} }"}, {"sha": "d5d36470f11acf62ffab868ecc4904df556fde62", "filename": "src/test/ui/repr/issue-83921-pretty.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c695de05f23555bc7119f2b2a7ab4be5602dbaf2/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs?ref=c695de05f23555bc7119f2b2a7ab4be5602dbaf2", "patch": "@@ -1,14 +0,0 @@\n-// Regression test for #83921. A `delay_span_bug()` call was issued, but the\n-// error was never reported because the pass responsible for detecting and\n-// reporting the error does not run in certain modes of pretty-printing.\n-\n-// Make sure the error is reported if we do not just pretty-print:\n-// revisions: pretty normal\n-// [pretty]compile-flags: -Zunpretty=everybody_loops\n-// [pretty]check-pass\n-\n-#[repr(\"C\")]\n-//[normal]~^ ERROR: meta item in `repr` must be an identifier [E0565]\n-struct A {}\n-\n-fn main() {}"}]}