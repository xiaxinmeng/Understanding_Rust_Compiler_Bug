{"sha": "e6c0ff65edef9d31593bda378693542906376021", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YzBmZjY1ZWRlZjlkMzE1OTNiZGEzNzg2OTM1NDI5MDYzNzYwMjE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-05-10T20:53:51Z"}, "committer": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-05-11T11:24:24Z"}, "message": "Create Weight enum\nAdd more comments for the global understanding", "tree": {"sha": "cf263b37fb361526ea45e0377c60f7b31f9c3fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf263b37fb361526ea45e0377c60f7b31f9c3fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6c0ff65edef9d31593bda378693542906376021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c0ff65edef9d31593bda378693542906376021", "html_url": "https://github.com/rust-lang/rust/commit/e6c0ff65edef9d31593bda378693542906376021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6c0ff65edef9d31593bda378693542906376021/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e6169ffeb00461be77c87675d5ce250f99d503", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e6169ffeb00461be77c87675d5ce250f99d503", "html_url": "https://github.com/rust-lang/rust/commit/61e6169ffeb00461be77c87675d5ce250f99d503"}], "stats": {"total": 98, "additions": 64, "deletions": 34}, "files": [{"sha": "9f7e6b29e84a2df30dbb60a2e4dee81e8bf9d4cd", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 64, "deletions": 34, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e6c0ff65edef9d31593bda378693542906376021/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c0ff65edef9d31593bda378693542906376021/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e6c0ff65edef9d31593bda378693542906376021", "patch": "@@ -82,54 +82,76 @@ fn impl_substs<'a, 'tcx>(fcx: &InferCtxt<'a, 'tcx>,\n     substs\n }\n \n+// Enum used to differentiate the \"big\" and \"little\" weights.\n+enum Weight {\n+    Coarse,\n+    Precise,\n+}\n+\n trait AssociatedWeight {\n-    fn get_weight(&self) -> usize;\n+    fn get_weight(&self) -> (u32, u32);\n }\n \n impl<'a> AssociatedWeight for TypeVariants<'a> {\n-    // First number is for \"global\" weight and second number is for bigger precision\n-    fn get_weight(&self) -> usize {\n+    // Left number is for \"global\"/\"big\" weight and right number is for better precision.\n+    fn get_weight(&self) -> (u32, u32) {\n         match *self {\n-            TypeVariants::TyBool => 11,\n-            TypeVariants::TyChar => 12,\n-            TypeVariants::TyStr => 13,\n-            TypeVariants::TyInt(_) => 21,\n-            TypeVariants::TyUint(_) => 22,\n-            TypeVariants::TyFloat(_) => 23,\n-            TypeVariants::TyRawPtr(_) => 24,\n-            TypeVariants::TyEnum(_, _) => 31,\n-            TypeVariants::TyStruct(_, _) => 32,\n-            TypeVariants::TyBox(_) => 33,\n-            TypeVariants::TyTuple(_) => 34,\n-            TypeVariants::TyArray(_, _) => 41,\n-            TypeVariants::TySlice(_) => 42,\n-            TypeVariants::TyRef(_, _) => 51,\n-            TypeVariants::TyFnDef(_, _, _) => 52,\n-            TypeVariants::TyFnPtr(_) => 53,\n-            TypeVariants::TyTrait(_) => 61,\n-            TypeVariants::TyClosure(_, _) => 71,\n-            TypeVariants::TyProjection(_) => 81,\n-            TypeVariants::TyParam(_) => 82,\n-            TypeVariants::TyInfer(_) => 83,\n-            TypeVariants::TyError => 91,\n+            TypeVariants::TyBool => (1, 1),\n+            TypeVariants::TyChar => (1, 2),\n+            TypeVariants::TyStr => (1, 3),\n+\n+            TypeVariants::TyInt(_) => (2, 1),\n+            TypeVariants::TyUint(_) => (2, 2),\n+            TypeVariants::TyFloat(_) => (2, 3),\n+            TypeVariants::TyRawPtr(_) => (2, 4),\n+\n+            TypeVariants::TyEnum(_, _) => (3, 1),\n+            TypeVariants::TyStruct(_, _) => (3, 2),\n+            TypeVariants::TyBox(_) => (3, 3),\n+            TypeVariants::TyTuple(_) => (3, 4),\n+\n+            TypeVariants::TyArray(_, _) => (4, 1),\n+            TypeVariants::TySlice(_) => (4, 2),\n+\n+            TypeVariants::TyRef(_, _) => (5, 1),\n+            TypeVariants::TyFnDef(_, _, _) => (5, 2),\n+            TypeVariants::TyFnPtr(_) => (5, 3),\n+\n+            TypeVariants::TyTrait(_) => (6, 1),\n+\n+            TypeVariants::TyClosure(_, _) => (7, 1),\n+\n+            TypeVariants::TyProjection(_) => (8, 1),\n+            TypeVariants::TyParam(_) => (8, 2),\n+            TypeVariants::TyInfer(_) => (8, 3),\n+\n+            TypeVariants::TyError => (9, 1),\n         }\n     }\n }\n \n-// The \"closer\" the types are, the lesser the weight\n-fn get_weight_diff(a: &ty::TypeVariants, b: &TypeVariants, big_weight: bool) -> usize {\n-    let w1 = if big_weight { a.get_weight() / 10 } else { a.get_weight() % 10 };\n-    let w2 = if big_weight { b.get_weight() / 10 } else { b.get_weight() % 10 };\n-\n+// The \"closer\" the types are, the lesser the weight.\n+fn get_weight_diff(a: &ty::TypeVariants, b: &TypeVariants, weight: Weight) -> u32 {\n+    let (w1, w2) = match weight {\n+        Weight::Coarse => (a.get_weight().0, b.get_weight().0),\n+        Weight::Precise => (a.get_weight().1, b.get_weight().1),\n+    };\n     if w1 < w2 {\n         w2 - w1\n     } else {\n         w1 - w2\n     }\n }\n \n-// Once we have \"globally matching\" types, we need to run another filter on them\n-fn filter_matching_types<'tcx>(weights: &[(usize, usize)],\n+// Once we have \"globally matching\" types, we need to run another filter on them.\n+//\n+// In the function `get_best_matching_type`, we got the types which might fit the\n+// most to the type we're looking for. This second filter now intends to get (if\n+// possible) the type which fits the most.\n+//\n+// For example, the trait expects an `usize` and here you have `u32` and `i32`.\n+// Obviously, the \"correct\" one is `u32`.\n+fn filter_matching_types<'tcx>(weights: &[(usize, u32)],\n                                imps: &[(DefId, subst::Substs<'tcx>)],\n                                trait_types: &[ty::Ty<'tcx>])\n                                -> usize {\n@@ -144,14 +166,22 @@ fn filter_matching_types<'tcx>(weights: &[(usize, usize)],\n                                                          .get_slice(ParamSpace::TypeSpace)\n                                                          .iter()\n                                                          .zip(trait_types.iter()) {\n-            weight += get_weight_diff(&type_to_compare.sty, &original_type.sty, false);\n+            weight += get_weight_diff(&type_to_compare.sty, &original_type.sty, Weight::Precise);\n         }\n         filtered_weights.push((pos, weight));\n     }\n     filtered_weights.sort_by(|a, b| a.1.cmp(&b.1));\n     filtered_weights[0].0\n }\n \n+// Here, we run the \"big\" filter. Little example:\n+//\n+// We receive a `String`, an `u32` and an `i32`.\n+// The trait expected an `usize`.\n+// From human point of view, it's easy to determine that `String` doesn't correspond to\n+// the expected type at all whereas `u32` and `i32` could.\n+//\n+// This first filter intends to only keep the types which match the most.\n fn get_best_matching_type<'tcx>(imps: &[(DefId, subst::Substs<'tcx>)],\n                                 trait_types: &[ty::Ty<'tcx>]) -> usize {\n     let mut weights = vec!();\n@@ -162,7 +192,7 @@ fn get_best_matching_type<'tcx>(imps: &[(DefId, subst::Substs<'tcx>)],\n                                                    .get_slice(ParamSpace::TypeSpace)\n                                                    .iter()\n                                                    .zip(trait_types.iter()) {\n-            weight += get_weight_diff(&type_to_compare.sty, &original_type.sty, true);\n+            weight += get_weight_diff(&type_to_compare.sty, &original_type.sty, Weight::Coarse);\n         }\n         weights.push((pos, weight));\n     }"}]}