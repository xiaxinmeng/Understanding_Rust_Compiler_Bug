{"sha": "870f13a0b342771746c22f335b4118303626ef23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MGYxM2EwYjM0Mjc3MTc0NmMyMmYzMzViNDExODMwMzYyNmVmMjM=", "commit": {"author": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-21T11:59:00Z"}, "committer": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-21T12:02:05Z"}, "message": "rustbuild: only autodetect cxx for hosts\n\nSigned-off-by: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>", "tree": {"sha": "d795c5f73595116530199e8d191ec83b859ff2e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d795c5f73595116530199e8d191ec83b859ff2e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/870f13a0b342771746c22f335b4118303626ef23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/870f13a0b342771746c22f335b4118303626ef23", "html_url": "https://github.com/rust-lang/rust/commit/870f13a0b342771746c22f335b4118303626ef23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/870f13a0b342771746c22f335b4118303626ef23/comments", "author": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c682ac9528822215e57c1ab70b2dd306b6fbbbeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c682ac9528822215e57c1ab70b2dd306b6fbbbeb", "html_url": "https://github.com/rust-lang/rust/commit/c682ac9528822215e57c1ab70b2dd306b6fbbbeb"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "3b74da04fea7a56fe1be7e78f0a992a8d0b48399", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/870f13a0b342771746c22f335b4118303626ef23/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870f13a0b342771746c22f335b4118303626ef23/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=870f13a0b342771746c22f335b4118303626ef23", "patch": "@@ -106,11 +106,14 @@ pub fn find(build: &mut Build) {\n         let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n             true\n+        } else if build.hosts.contains(&target) {\n+            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n+            true\n         } else {\n-            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build)\n+            false\n         };\n \n-        if cxx_configured || build.hosts.contains(&target) {\n+        if cxx_configured {\n             let compiler = cfg.get_compiler();\n             build.cxx.insert(target, compiler);\n         }\n@@ -132,7 +135,7 @@ fn set_compiler(cfg: &mut cc::Build,\n                 compiler: Language,\n                 target: Interned<String>,\n                 config: Option<&Target>,\n-                build: &Build) -> bool {\n+                build: &Build) {\n     match &*target {\n         // When compiling for android we may have the NDK configured in the\n         // config.toml in which case we look there. Otherwise the default\n@@ -145,7 +148,6 @@ fn set_compiler(cfg: &mut cc::Build,\n                                    .replace(\"thumbv7\", \"arm\");\n                 let compiler = format!(\"{}-{}\", target, compiler.clang());\n                 cfg.compiler(ndk.join(\"bin\").join(compiler));\n-                return true;\n             }\n         }\n \n@@ -155,35 +157,32 @@ fn set_compiler(cfg: &mut cc::Build,\n             let c = cfg.get_compiler();\n             let gnu_compiler = compiler.gcc();\n             if !c.path().ends_with(gnu_compiler) {\n-                return false;\n+                return\n             }\n \n             let output = output(c.to_command().arg(\"--version\"));\n             let i = match output.find(\" 4.\") {\n                 Some(i) => i,\n-                None => return false,\n+                None => return,\n             };\n             match output[i + 3..].chars().next().unwrap() {\n                 '0' ..= '6' => {}\n-                _ => return false,\n+                _ => return,\n             }\n             let alternative = format!(\"e{}\", gnu_compiler);\n             if Command::new(&alternative).output().is_ok() {\n                 cfg.compiler(alternative);\n-                return true;\n             }\n         }\n \n         \"mips-unknown-linux-musl\" => {\n             if cfg.get_compiler().path().to_str() == Some(\"gcc\") {\n                 cfg.compiler(\"mips-linux-musl-gcc\");\n-                return true;\n             }\n         }\n         \"mipsel-unknown-linux-musl\" => {\n             if cfg.get_compiler().path().to_str() == Some(\"gcc\") {\n                 cfg.compiler(\"mipsel-linux-musl-gcc\");\n-                return true;\n             }\n         }\n \n@@ -192,14 +191,12 @@ fn set_compiler(cfg: &mut cc::Build,\n                 let guess = root.join(\"bin/musl-gcc\");\n                 if guess.exists() {\n                     cfg.compiler(guess);\n-                    return true;\n                 }\n             }\n         }\n \n         _ => {}\n     }\n-    false\n }\n \n /// The target programming language for a native compiler."}]}