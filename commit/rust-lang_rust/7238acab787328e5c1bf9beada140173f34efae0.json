{"sha": "7238acab787328e5c1bf9beada140173f34efae0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzhhY2FiNzg3MzI4ZTVjMWJmOWJlYWRhMTQwMTczZjM0ZWZhZTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T17:54:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-08T18:35:54Z"}, "message": "Dead code", "tree": {"sha": "5529f61c548bbe4f85dc949cac88f7619a76b61c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5529f61c548bbe4f85dc949cac88f7619a76b61c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7238acab787328e5c1bf9beada140173f34efae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7238acab787328e5c1bf9beada140173f34efae0", "html_url": "https://github.com/rust-lang/rust/commit/7238acab787328e5c1bf9beada140173f34efae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7238acab787328e5c1bf9beada140173f34efae0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86aac4303f26281f72fbbacc0aaa8969a13ce7eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/86aac4303f26281f72fbbacc0aaa8969a13ce7eb", "html_url": "https://github.com/rust-lang/rust/commit/86aac4303f26281f72fbbacc0aaa8969a13ce7eb"}], "stats": {"total": 50, "additions": 19, "deletions": 31}, "files": [{"sha": "96b564a96320887b0129a9a7e73a88b28c8ee995", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7238acab787328e5c1bf9beada140173f34efae0/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7238acab787328e5c1bf9beada140173f34efae0/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=7238acab787328e5c1bf9beada140173f34efae0", "patch": "@@ -85,14 +85,6 @@ impl HoverResult {\n         self.results.len()\n     }\n \n-    pub fn first(&self) -> Option<&str> {\n-        self.results.first().map(String::as_str)\n-    }\n-\n-    pub fn results(&self) -> &[String] {\n-        &self.results\n-    }\n-\n     pub fn actions(&self) -> &[HoverAction] {\n         &self.actions\n     }\n@@ -403,10 +395,6 @@ mod tests {\n         s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")\n     }\n \n-    fn trim_markup_opt(s: Option<&str>) -> Option<&str> {\n-        s.map(trim_markup)\n-    }\n-\n     fn assert_impl_action(action: &HoverAction, position: u32) {\n         let offset = match action {\n             HoverAction::Implementaion(pos) => pos.offset,\n@@ -418,7 +406,7 @@ mod tests {\n     fn check_hover_result(ra_fixture: &str, expected: &[&str]) -> (String, Vec<HoverAction>) {\n         let (analysis, position) = analysis_and_position(ra_fixture);\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        let mut results = Vec::from(hover.info.results());\n+        let mut results = hover.info.results.clone();\n         results.sort();\n \n         for (markup, expected) in\n@@ -451,7 +439,7 @@ fn main() {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.range, TextRange::new(58.into(), 63.into()));\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"u32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"u32\"));\n     }\n \n     #[test]\n@@ -650,7 +638,7 @@ fn main() {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option\\n```\\n\\n```rust\\nSome\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Option\\n```\\n\\n```rust\\nSome\"));\n \n         let (analysis, position) = analysis_and_position(\n             \"\n@@ -663,7 +651,7 @@ fn main() {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option<i32>\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Option<i32>\"));\n     }\n \n     #[test]\n@@ -720,14 +708,14 @@ The Some variant\n     fn hover_for_local_variable() {\n         let (analysis, position) = analysis_and_position(\"fn func(foo: i32) { fo<|>o; }\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n     fn hover_for_local_variable_pat() {\n         let (analysis, position) = analysis_and_position(\"fn func(fo<|>o: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n@@ -738,14 +726,14 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n     fn hover_for_param_edge() {\n         let (analysis, position) = analysis_and_position(\"fn func(<|>foo: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n@@ -766,7 +754,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Thing\"));\n     }\n \n     #[test]\n@@ -790,8 +778,8 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(\n-            trim_markup_opt(hover.info.first()),\n-            Some(\"wrapper::Thing\\n```\\n\\n```rust\\nfn new() -> Thing\")\n+            trim_markup(&hover.info.results[0]),\n+            (\"wrapper::Thing\\n```\\n\\n```rust\\nfn new() -> Thing\")\n         );\n     }\n \n@@ -814,7 +802,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"const C: u32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"const C: u32\"));\n     }\n \n     #[test]\n@@ -830,7 +818,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Thing\"));\n \n         /* FIXME: revive these tests\n                 let (analysis, position) = analysis_and_position(\n@@ -845,7 +833,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 );\n \n                 let hover = analysis.hover(position).unwrap().unwrap();\n-                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+                assert_eq!(trim_markup(&hover.info.results[0]), (\"Thing\"));\n \n                 let (analysis, position) = analysis_and_position(\n                     \"\n@@ -858,7 +846,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                     \",\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n-                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(trim_markup(&hover.info.results[0]), (\"enum Thing\"));\n \n                 let (analysis, position) = analysis_and_position(\n                     \"\n@@ -870,7 +858,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                     \",\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n-                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(trim_markup(&hover.info.results[0]), (\"enum Thing\"));\n         */\n     }\n \n@@ -887,7 +875,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n@@ -904,7 +892,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"macro_rules! foo\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"macro_rules! foo\"));\n     }\n \n     #[test]\n@@ -915,7 +903,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]"}]}