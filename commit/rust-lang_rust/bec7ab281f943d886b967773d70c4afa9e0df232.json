{"sha": "bec7ab281f943d886b967773d70c4afa9e0df232", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYzdhYjI4MWY5NDNkODg2Yjk2Nzc3M2Q3MGM0YWZhOWUwZGYyMzI=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-20T21:51:14Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-22T02:47:12Z"}, "message": "Remove redundant docs\n\n...and add docs to the types instead of the fields that hold the types.", "tree": {"sha": "1341a7e82680f659175a336d55b5eb3550fdd28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1341a7e82680f659175a336d55b5eb3550fdd28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bec7ab281f943d886b967773d70c4afa9e0df232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bec7ab281f943d886b967773d70c4afa9e0df232", "html_url": "https://github.com/rust-lang/rust/commit/bec7ab281f943d886b967773d70c4afa9e0df232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bec7ab281f943d886b967773d70c4afa9e0df232/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9bb71c5924a3654de8b609d49b0955ffcb723b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9bb71c5924a3654de8b609d49b0955ffcb723b", "html_url": "https://github.com/rust-lang/rust/commit/9b9bb71c5924a3654de8b609d49b0955ffcb723b"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "4716d4f5f0e7162c47262870dfc1dbbd5bdafb94", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bec7ab281f943d886b967773d70c4afa9e0df232/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7ab281f943d886b967773d70c4afa9e0df232/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=bec7ab281f943d886b967773d70c4afa9e0df232", "patch": "@@ -81,19 +81,15 @@ crate struct ExternalCrate {\n /// directly to the AST's concept of an item; it's a strict superset.\n #[derive(Clone)]\n crate struct Item {\n-    /// The [`Span`] of this item in the source code.\n     crate span: Span,\n     /// The name of this item.\n     /// Optional because not every item has a name, e.g. impls.\n     crate name: Option<Symbol>,\n-    /// Attributes on this item, e.g. `#[derive(...)]` or `#[inline]`.\n     crate attrs: Box<Attributes>,\n-    /// The visibility of this item (private, `pub`, `pub(crate)`, etc.).\n     crate visibility: Visibility,\n     /// Information about this item that is specific to what kind of item it is.\n     /// E.g., struct vs enum vs function.\n     crate kind: Box<ItemKind>,\n-    /// The [`DefId`] of this item.\n     crate def_id: DefId,\n }\n \n@@ -565,6 +561,8 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n     }\n }\n \n+/// The attributes on an [`Item`], including attributes like `#[derive(...)]` and `#[inline]`,\n+/// as well as doc comments.\n #[derive(Clone, Debug, Default)]\n crate struct Attributes {\n     crate doc_strings: Vec<DocFragment>,\n@@ -1804,8 +1802,11 @@ impl From<hir::PrimTy> for PrimitiveType {\n \n #[derive(Copy, Clone, Debug)]\n crate enum Visibility {\n+    /// `pub`\n     Public,\n+    /// visibility inherited from parent (e.g. for enum variant fields)\n     Inherited,\n+    /// `pub(crate)`, `pub(super)`, or `pub(in path::to::somewhere)`\n     Restricted(DefId),\n }\n \n@@ -1854,7 +1855,8 @@ crate enum Variant {\n     Struct(VariantStruct),\n }\n \n-/// Small wrapper around `rustc_span::Span` that adds helper methods and enforces calling `source_callsite`.\n+/// Small wrapper around [`rustc_span::Span]` that adds helper methods\n+/// and enforces calling [`rustc_span::Span::source_callsite()`].\n #[derive(Clone, Debug)]\n crate struct Span(rustc_span::Span);\n "}]}