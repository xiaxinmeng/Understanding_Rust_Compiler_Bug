{"sha": "aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhM2I1YzU4ZTQ0YmVjYTBlOTZiNDZkZWIyNGYxYmNiOGQ4Yzk4YTE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T11:52:56Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T15:16:39Z"}, "message": "Fix diagnostic regression", "tree": {"sha": "67e6274e5ad004cdc1d1168f2d6fb36c07bd96a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e6274e5ad004cdc1d1168f2d6fb36c07bd96a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "html_url": "https://github.com/rust-lang/rust/commit/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae81fc61d0ec0978a4b67a1c2627cf99f9c1d653", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae81fc61d0ec0978a4b67a1c2627cf99f9c1d653", "html_url": "https://github.com/rust-lang/rust/commit/ae81fc61d0ec0978a4b67a1c2627cf99f9c1d653"}], "stats": {"total": 262, "additions": 129, "deletions": 133}, "files": [{"sha": "87504299e4bb50729f9323808e10240efa044239", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -539,7 +539,9 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n     fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n-                data.args.iter().for_each(|arg| self.visit_generic_arg(arg));\n+                for arg in &data.args {\n+                    self.visit_generic_arg(arg)\n+                }\n                 for type_binding in &data.bindings {\n                     // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                     // are allowed to contain nested `impl Trait`."}, {"sha": "ccdb751bc4eeda4eb743283bd6104768313f215b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -94,11 +94,12 @@ struct ConvertedBinding<'tcx> {\n \n #[derive(PartialEq)]\n enum GenericArgPosition {\n-    Datatype,\n-    Function,\n-    Method,\n+    Type,\n+    Value, // e.g. functions\n+    MethodCall,\n }\n \n+// FIXME(#53525): these error codes should all be unified.\n struct GenericArgMismatchErrorCode {\n     lifetimes: (&'static str, &'static str),\n     types: (&'static str, &'static str),\n@@ -255,9 +256,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 &empty_args\n             },\n             if is_method_call {\n-                GenericArgPosition::Method\n+                GenericArgPosition::MethodCall\n             } else {\n-                GenericArgPosition::Function\n+                GenericArgPosition::Value\n             },\n             def.parent.is_none() && def.has_self, // `has_self`\n             seg.infer_types || suppress_mismatch, // `infer_types`\n@@ -285,7 +286,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         // arguments in order to validate them with respect to the generic parameters.\n         let param_counts = def.own_counts();\n         let arg_counts = args.own_counts();\n-        let infer_lifetimes = position != GenericArgPosition::Datatype && arg_counts.lifetimes == 0;\n+        let infer_lifetimes = position != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n \n         let mut defaults: ty::GenericParamCount = Default::default();\n         for param in &def.params {\n@@ -297,7 +298,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             };\n         }\n \n-        if position != GenericArgPosition::Datatype && !args.bindings.is_empty() {\n+        if position != GenericArgPosition::Type && !args.bindings.is_empty() {\n             AstConv::prohibit_assoc_ty_binding(tcx, args.bindings[0].span);\n         }\n \n@@ -308,7 +309,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                            if late bound lifetime parameters are present\";\n                 let note = \"the late bound lifetime parameter is introduced here\";\n                 let span = args.args[0].span();\n-                if position == GenericArgPosition::Function\n+                if position == GenericArgPosition::Value\n                     && arg_counts.lifetimes != param_counts.lifetimes {\n                     let mut err = tcx.sess.struct_span_err(span, msg);\n                     err.span_note(span_late, note);\n@@ -328,7 +329,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                                 kind,\n                                 required,\n                                 permitted,\n-                                provided| {\n+                                provided,\n+                                offset| {\n             // We enforce the following: `required` <= `provided` <= `permitted`.\n             // For kinds without defaults (i.e. lifetimes), `required == permitted`.\n             // For other kinds (i.e. types), `permitted` may be greater than `required`.\n@@ -348,8 +350,15 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 (required, \"\")\n             };\n \n+            let mut span = span;\n             let label = if required == permitted && provided > permitted {\n                 let diff = provided - permitted;\n+                if diff == 1 {\n+                    // In the case when the user has provided too many arguments,\n+                    // we want to point to the first unexpected argument.\n+                    let first_superfluous_arg: &GenericArg = &args.args[offset + permitted];\n+                    span = first_superfluous_arg.span();\n+                }\n                 format!(\n                     \"{}unexpected {} argument{}\",\n                     if diff != 1 { format!(\"{} \", diff) } else { String::new() },\n@@ -394,6 +403,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 param_counts.lifetimes,\n                 param_counts.lifetimes,\n                 arg_counts.lifetimes,\n+                0,\n             );\n         }\n         if !infer_types\n@@ -404,6 +414,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 param_counts.types - defaults.types - has_self as usize,\n                 param_counts.types - has_self as usize,\n                 arg_counts.types,\n+                arg_counts.lifetimes,\n             )\n         } else {\n             false\n@@ -491,59 +502,50 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 // provided, matching them with the generic parameters we expect.\n                 // Mismatches can occur as a result of elided lifetimes, or for malformed\n                 // input. We try to handle both sensibly.\n-                let mut progress_arg = true;\n                 match (args.peek(), params.peek()) {\n                     (Some(&arg), Some(&param)) => {\n                         match (arg, &param.kind) {\n-                            (GenericArg::Lifetime(_), GenericParamDefKind::Lifetime) => {\n+                            (GenericArg::Lifetime(_), GenericParamDefKind::Lifetime)\n+                            | (GenericArg::Type(_), GenericParamDefKind::Type { .. }) => {\n                                 push_kind(&mut substs, provided_kind(param, arg));\n+                                args.next();\n                                 params.next();\n                             }\n                             (GenericArg::Lifetime(_), GenericParamDefKind::Type { .. }) => {\n                                 // We expected a type argument, but got a lifetime\n                                 // argument. This is an error, but we need to handle it\n                                 // gracefully so we can report sensible errors. In this\n-                                // case, we're simply going to infer the remaining\n-                                // arguments.\n-                                args.by_ref().for_each(drop); // Exhaust the iterator.\n-                            }\n-                            (GenericArg::Type(_), GenericParamDefKind::Type { .. }) => {\n-                                push_kind(&mut substs, provided_kind(param, arg));\n-                                params.next();\n+                                // case, we're simply going to infer this argument.\n+                                args.next();\n                             }\n                             (GenericArg::Type(_), GenericParamDefKind::Lifetime) => {\n                                 // We expected a lifetime argument, but got a type\n                                 // argument. That means we're inferring the lifetimes.\n                                 push_kind(&mut substs, inferred_kind(None, param, infer_types));\n                                 params.next();\n-                                progress_arg = false;\n                             }\n                         }\n                     }\n                     (Some(_), None) => {\n                         // We should never be able to reach this point with well-formed input.\n                         // Getting to this point means the user supplied more arguments than\n                         // there are parameters.\n+                        args.next();\n                     }\n                     (None, Some(&param)) => {\n                         // If there are fewer arguments than parameters, it means\n                         // we're inferring the remaining arguments.\n                         match param.kind {\n-                            GenericParamDefKind::Lifetime => {\n-                                push_kind(&mut substs, inferred_kind(None, param, infer_types));\n-                            }\n-                            GenericParamDefKind::Type { .. } => {\n+                            GenericParamDefKind::Lifetime | GenericParamDefKind::Type { .. } => {\n                                 let kind = inferred_kind(Some(&substs), param, infer_types);\n                                 push_kind(&mut substs, kind);\n                             }\n                         }\n+                        args.next();\n                         params.next();\n                     }\n                     (None, None) => break,\n                 }\n-                if progress_arg {\n-                    args.next();\n-                }\n             }\n         }\n \n@@ -582,12 +584,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             span,\n             &generic_params,\n             &generic_args,\n-            GenericArgPosition::Datatype,\n+            GenericArgPosition::Type,\n             has_self,\n             infer_types,\n             GenericArgMismatchErrorCode {\n                 lifetimes: (\"E0107\", \"E0107\"),\n-                types: (\"E0243\", \"E0244\"), // FIXME: E0243 and E0244 should be unified.\n+                types: (\"E0243\", \"E0244\"),\n             },\n         );\n \n@@ -616,17 +618,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             |_| (Some(generic_args), infer_types),\n             // Provide substitutions for parameters for which (valid) arguments have been provided.\n             |param, arg| {\n-                match param.kind {\n-                    GenericParamDefKind::Lifetime => match arg {\n-                        GenericArg::Lifetime(lt) => {\n-                            self.ast_region_to_region(&lt, Some(param)).into()\n-                        }\n-                        _ => unreachable!(),\n+                match (&param.kind, arg) {\n+                    (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n+                        self.ast_region_to_region(&lt, Some(param)).into()\n                     }\n-                    GenericParamDefKind::Type { .. } => match arg {\n-                        GenericArg::Type(ty) => self.ast_ty_to_ty(&ty).into(),\n-                        _ => unreachable!(),\n+                    (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n+                        self.ast_ty_to_ty(&ty).into()\n                     }\n+                    _ => unreachable!(),\n                 }\n             },\n             // Provide substitutions for parameters for which arguments are inferred."}, {"sha": "fbb49c95edf0311ec8ed1fcb2106ed5f914c29f8", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -344,17 +344,14 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             },\n             // Provide substitutions for parameters for which (valid) arguments have been provided.\n             |param, arg| {\n-                match param.kind {\n-                    GenericParamDefKind::Lifetime => match arg {\n-                        GenericArg::Lifetime(lt) => {\n-                            AstConv::ast_region_to_region(self.fcx, lt, Some(param)).into()\n-                        }\n-                        _ => unreachable!(),\n+                match (&param.kind, arg) {\n+                    (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n+                        AstConv::ast_region_to_region(self.fcx, lt, Some(param)).into()\n                     }\n-                    GenericParamDefKind::Type { .. } => match arg {\n-                        GenericArg::Type(ty) => self.to_ty(ty).into(),\n-                        _ => unreachable!(),\n+                    (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n+                        self.to_ty(ty).into()\n                     }\n+                    _ => unreachable!(),\n                 }\n             },\n             // Provide substitutions for parameters for which arguments are inferred."}, {"sha": "6f0c42f48c0a7b22ef82381337369da11f9398e6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -109,11 +109,11 @@ use session::{CompileIncomplete, config, Session};\n use TypeAndSubsts;\n use lint;\n use util::common::{ErrorReported, indenter};\n-use util::nodemap::{DefIdMap, DefIdSet, FxHashMap, NodeMap};\n+use util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, NodeMap};\n \n use std::cell::{Cell, RefCell, Ref, RefMut};\n use rustc_data_structures::sync::Lrc;\n-use std::collections::{hash_map::Entry, HashSet};\n+use std::collections::hash_map::Entry;\n use std::cmp;\n use std::fmt::Display;\n use std::iter;\n@@ -4908,7 +4908,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // provided (if any) into their appropriate spaces. We'll also report\n         // errors if type parameters are provided in an inappropriate place.\n \n-        let mut generic_segs = HashSet::new();\n+        let mut generic_segs = FxHashSet::default();\n         for PathSeg(_, index) in &path_segs {\n             generic_segs.insert(index);\n         }\n@@ -4937,24 +4937,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n \n-        let mut suppress_errors = FxHashMap();\n+        let mut infer_args_for_err = FxHashSet::default();\n         for &PathSeg(def_id, index) in &path_segs {\n             let seg = &segments[index];\n             let generics = self.tcx.generics_of(def_id);\n-            // `impl Trait` is treated as a normal generic parameter internally,\n-            // but we don't allow users to specify the parameter's value\n-            // explicitly, so we have to do some error-checking here.\n-            let suppress = AstConv::check_generic_arg_count_for_call(\n+            // Argument-position `impl Trait` is treated as a normal generic\n+            // parameter internally, but we don't allow users to specify the\n+            // parameter's value explicitly, so we have to do some error-\n+            // checking here.\n+            let suppress_errors = AstConv::check_generic_arg_count_for_call(\n                 self.tcx,\n                 span,\n                 &generics,\n                 &seg,\n                 false, // `is_method_call`\n             );\n-            if suppress {\n+            if suppress_errors {\n+                infer_args_for_err.insert(index);\n                 self.set_tainted_by_errors(); // See issue #53251.\n             }\n-            suppress_errors.insert(index, suppress);\n         }\n \n         let has_self = path_segs.last().map(|PathSeg(def_id, _)| {\n@@ -4976,7 +4977,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }) {\n                     // If we've encountered an `impl Trait`-related error, we're just\n                     // going to infer the arguments for better error messages.\n-                    if !suppress_errors[&index] {\n+                    if !infer_args_for_err.contains(&index) {\n                         // Check whether the user has provided generic arguments.\n                         if let Some(ref data) = segments[index].args {\n                             return (Some(data), segments[index].infer_types);\n@@ -4989,17 +4990,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             },\n             // Provide substitutions for parameters for which (valid) arguments have been provided.\n             |param, arg| {\n-                match param.kind {\n-                    GenericParamDefKind::Lifetime => match arg {\n-                        GenericArg::Lifetime(lt) => {\n-                            AstConv::ast_region_to_region(self, lt, Some(param)).into()\n-                        }\n-                        _ => unreachable!(),\n+                match (&param.kind, arg) {\n+                    (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n+                        AstConv::ast_region_to_region(self, lt, Some(param)).into()\n                     }\n-                    GenericParamDefKind::Type { .. } => match arg {\n-                        GenericArg::Type(ty) => self.to_ty(ty).into(),\n-                        _ => unreachable!(),\n+                    (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n+                        self.to_ty(ty).into()\n                     }\n+                    _ => unreachable!(),\n                 }\n             },\n             // Provide substitutions for parameters for which arguments are inferred."}, {"sha": "7901f1f0fba201f2f6747c4ad2acece48c215874", "filename": "src/test/ui/bad/bad-mid-path-type-params.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,26 +1,26 @@\n error[E0087]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/bad-mid-path-type-params.rs:40:13\n+  --> $DIR/bad-mid-path-type-params.rs:40:28\n    |\n LL |     let _ = S::new::<isize,f64>(1, 1.0);\n-   |             ^^^^^^^^^^^^^^^^^^^ unexpected type argument\n+   |                            ^^^ unexpected type argument\n \n error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/bad-mid-path-type-params.rs:43:13\n+  --> $DIR/bad-mid-path-type-params.rs:43:17\n    |\n LL |     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |                 ^^ unexpected lifetime argument\n \n error[E0087]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/bad-mid-path-type-params.rs:46:17\n+  --> $DIR/bad-mid-path-type-params.rs:46:36\n    |\n LL |     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ unexpected type argument\n+   |                                    ^^^ unexpected type argument\n \n error[E0088]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/bad-mid-path-type-params.rs:49:17\n+  --> $DIR/bad-mid-path-type-params.rs:49:25\n    |\n LL |     let _: S2 = Trait::<'a,isize>::new::<f64>(1, 1.0);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |                         ^^ unexpected lifetime argument\n \n error: aborting due to 4 previous errors\n "}, {"sha": "cf3ad9ae8ecd7ae33bdc7bad2ba982c77c7897c7", "filename": "src/test/ui/constructor-lifetime-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -5,10 +5,10 @@ LL |     S::<'static>(&0, &0);\n    |     ^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0088]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/constructor-lifetime-args.rs:29:5\n+  --> $DIR/constructor-lifetime-args.rs:29:27\n    |\n LL |     S::<'static, 'static, 'static>(&0, &0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |                           ^^^^^^^ unexpected lifetime argument\n \n error[E0090]: wrong number of lifetime arguments: expected 2, found 1\n   --> $DIR/constructor-lifetime-args.rs:32:5\n@@ -17,10 +17,10 @@ LL |     E::V::<'static>(&0);\n    |     ^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0088]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/constructor-lifetime-args.rs:34:5\n+  --> $DIR/constructor-lifetime-args.rs:34:30\n    |\n LL |     E::V::<'static, 'static, 'static>(&0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |                              ^^^^^^^ unexpected lifetime argument\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a07f1bbf39a3eedd025aa3680758b4fb4d087610", "filename": "src/test/ui/error-codes/E0087.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0087.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,14 +1,14 @@\n error[E0087]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/E0087.rs:15:5\n+  --> $DIR/E0087.rs:15:11\n    |\n LL |     foo::<f64>(); //~ ERROR wrong number of type arguments: expected 0, found 1 [E0087]\n-   |     ^^^^^^^^^^ unexpected type argument\n+   |           ^^^ unexpected type argument\n \n error[E0087]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/E0087.rs:17:5\n+  --> $DIR/E0087.rs:17:16\n    |\n LL |     bar::<f64, u64>(); //~ ERROR wrong number of type arguments: expected 1, found 2 [E0087]\n-   |     ^^^^^^^^^^^^^^^ unexpected type argument\n+   |                ^^^ unexpected type argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6b956023e05a489174b8678f06b852c26f3e5660", "filename": "src/test/ui/error-codes/E0088.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0088.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,14 +1,14 @@\n error[E0088]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/E0088.rs:15:5\n+  --> $DIR/E0088.rs:15:9\n    |\n LL |     f::<'static>(); //~ ERROR E0088\n-   |     ^^^^^^^^^^^^ unexpected lifetime argument\n+   |         ^^^^^^^ unexpected lifetime argument\n \n error[E0088]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/E0088.rs:16:5\n+  --> $DIR/E0088.rs:16:18\n    |\n LL |     g::<'static, 'static>(); //~ ERROR E0088\n-   |     ^^^^^^^^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |                  ^^^^^^^ unexpected lifetime argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "497fa91bd4f399f58f407dc0516bf16521ce125c", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -5,10 +5,10 @@ LL |     buzz: Buzz<'a>,\n    |           ^^^^^^^^ expected 2 lifetime arguments\n \n error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/E0107.rs:24:10\n+  --> $DIR/E0107.rs:24:14\n    |\n LL |     bar: Bar<'a>,\n-   |          ^^^^^^^ unexpected lifetime argument\n+   |              ^^ unexpected lifetime argument\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 3\n   --> $DIR/E0107.rs:27:11"}, {"sha": "f12afa4a79208a077b041f0a5b8a39091da0040e", "filename": "src/test/ui/issue-53251.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53251.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,8 +1,8 @@\n error[E0087]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-53251.rs:21:17\n+  --> $DIR/issue-53251.rs:21:24\n    |\n LL |                 S::f::<i64>();\n-   |                 ^^^^^^^^^^^ unexpected type argument\n+   |                        ^^^ unexpected type argument\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation"}, {"sha": "49afd5130924103bf3fbf0be91a1fe1e6f117fe7", "filename": "src/test/ui/issues/issue-18423.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,8 +1,8 @@\n error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/issue-18423.rs:14:8\n+  --> $DIR/issue-18423.rs:14:12\n    |\n LL |     x: Box<'a, isize> //~ ERROR wrong number of lifetime arguments\n-   |        ^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |            ^^ unexpected lifetime argument\n \n error: aborting due to previous error\n "}, {"sha": "2c4b9f84105eac84b240879f1ac9bc97b74540bc", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -10,10 +10,10 @@ LL |         x: T, //~ ERROR can't use type parameters from outer function\n    |            ^ use of type variable from outer function\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-3214.rs:16:22\n+  --> $DIR/issue-3214.rs:16:26\n    |\n LL |     impl<T> Drop for foo<T> {\n-   |                      ^^^^^^ unexpected type argument\n+   |                          ^ unexpected type argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d86a9f48e003e347bc1102ab98347e4e5ae9d9c3", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -5,10 +5,10 @@ LL |     S.early::<'static>();\n    |       ^^^^^ expected 2 lifetime arguments\n \n error[E0088]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/method-call-lifetime-args-fail.rs:28:7\n+  --> $DIR/method-call-lifetime-args-fail.rs:28:33\n    |\n LL |     S.early::<'static, 'static, 'static>();\n-   |       ^^^^^ unexpected lifetime argument\n+   |                                 ^^^^^^^ unexpected lifetime argument\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:37:15\n@@ -185,10 +185,10 @@ LL |     S::early::<'static>(S);\n    |     ^^^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0088]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/method-call-lifetime-args-fail.rs:75:5\n+  --> $DIR/method-call-lifetime-args-fail.rs:75:34\n    |\n LL |     S::early::<'static, 'static, 'static>(S);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |                                  ^^^^^^^ unexpected lifetime argument\n \n error: aborting due to 18 previous errors\n "}, {"sha": "068f08eebe76cc8a1dc116135e7b9350886b1651", "filename": "src/test/ui/seq-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fseq-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fseq-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fseq-args.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,14 +1,14 @@\n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/seq-args.rs:14:9\n+  --> $DIR/seq-args.rs:14:13\n    |\n LL | impl<T> seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n-   |         ^^^^^^ unexpected type argument\n+   |             ^ unexpected type argument\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/seq-args.rs:17:6\n+  --> $DIR/seq-args.rs:17:10\n    |\n LL | impl seq<bool> for u32 { //~ ERROR wrong number of type arguments\n-   |      ^^^^^^^^^ unexpected type argument\n+   |          ^^^^ unexpected type argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dfa219e0872ce89fbfe4181ea76b7e726547b629", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -71,10 +71,10 @@ LL |         x: 7,\n               found type `{integer}`\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/structure-constructor-type-mismatch.rs:58:15\n+  --> $DIR/structure-constructor-type-mismatch.rs:58:24\n    |\n LL |     let pt3 = PointF::<i32> { //~ ERROR wrong number of type arguments\n-   |               ^^^^^^^^^^^^^ unexpected type argument\n+   |                        ^^^ unexpected type argument\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:59:12\n@@ -101,10 +101,10 @@ LL |         y: 10, //~ ERROR mismatched types\n               found type `{integer}`\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/structure-constructor-type-mismatch.rs:64:9\n+  --> $DIR/structure-constructor-type-mismatch.rs:64:18\n    |\n LL |         PointF::<u32> { .. } => {} //~ ERROR wrong number of type arguments\n-   |         ^^^^^^^^^^^^^ unexpected type argument\n+   |                  ^^^ unexpected type argument\n \n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:64:9"}, {"sha": "c0b65a7aa5c380207dc2f50cb868023343c16ff2", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -11,10 +11,10 @@ LL |     let _: S<'static, 'static +>;\n    |                       ^^^^^^^^^\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/trait-object-vs-lifetime.rs:23:12\n+  --> $DIR/trait-object-vs-lifetime.rs:23:23\n    |\n LL |     let _: S<'static, 'static>;\n-   |            ^^^^^^^^^^^^^^^^^^^ unexpected lifetime argument\n+   |                       ^^^^^^^ unexpected lifetime argument\n \n error[E0243]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/trait-object-vs-lifetime.rs:23:12"}, {"sha": "fb9cd7019224d9be6a3997beaf1c155d28562125", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,14 +1,14 @@\n error[E0087]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/trait-test-2.rs:18:8\n+  --> $DIR/trait-test-2.rs:18:14\n    |\n LL |     10.dup::<i32>(); //~ ERROR wrong number of type arguments: expected 0, found 1\n-   |        ^^^ unexpected type argument\n+   |              ^^^ unexpected type argument\n \n error[E0087]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/trait-test-2.rs:19:8\n+  --> $DIR/trait-test-2.rs:19:20\n    |\n LL |     10.blah::<i32, i32>(); //~ ERROR wrong number of type arguments: expected 1, found 2\n-   |        ^^^^ unexpected type argument\n+   |                    ^^^ unexpected type argument\n \n error[E0277]: the trait bound `dyn bar: bar` is not satisfied\n   --> $DIR/trait-test-2.rs:20:26"}, {"sha": "b6444181dd8bd80755fd9004327d9ec1c87073d3", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,38 +1,38 @@\n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:11:11\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:11:16\n    |\n LL | fn foo1<T:Copy<U>, U>(x: T) {}\n-   |           ^^^^^^^ unexpected type argument\n+   |                ^ unexpected type argument\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:14\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:19\n    |\n LL | trait Trait: Copy<Send> {}\n-   |              ^^^^^^^^^^ unexpected type argument\n+   |                   ^^^^ unexpected type argument\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:17:21\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:17:26\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n-   |                     ^^^^^^^ unexpected type argument\n+   |                          ^ unexpected type argument\n \n error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:20:25\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:20:30\n    |\n LL | struct MyStruct2<'a, T: Copy<'a>>;\n-   |                         ^^^^^^^^ unexpected lifetime argument\n+   |                              ^^ unexpected lifetime argument\n \n error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:24:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:24:20\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |               ^^^^^^^^^^^ unexpected lifetime argument\n+   |                    ^^ unexpected lifetime argument\n \n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:24:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:24:24\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |               ^^^^^^^^^^^ unexpected type argument\n+   |                        ^ unexpected type argument\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a49839b731070174d96e386d3887df99bb6a94fb", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,8 +1,8 @@\n error[E0244]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/typeck_type_placeholder_lifetime_1.rs:19:12\n+  --> $DIR/typeck_type_placeholder_lifetime_1.rs:19:19\n    |\n LL |     let c: Foo<_, _> = Foo { r: &5 };\n-   |            ^^^^^^^^^ unexpected type argument\n+   |                   ^ unexpected type argument\n \n error: aborting due to previous error\n "}, {"sha": "cafb6f507a0e9052d7e2b00bb773b931dd6223d6", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,8 +1,8 @@\n error[E0244]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/typeck_type_placeholder_lifetime_2.rs:19:12\n+  --> $DIR/typeck_type_placeholder_lifetime_2.rs:19:19\n    |\n LL |     let c: Foo<_, usize> = Foo { r: &5 };\n-   |            ^^^^^^^^^^^^^ unexpected type argument\n+   |                   ^^^^^ unexpected type argument\n \n error: aborting due to previous error\n "}, {"sha": "89587c47cf67d1a1c71bd53dc2f2ac22d451f153", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,8 +1,8 @@\n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:15:11\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:15:15\n    |\n LL | fn foo(_: Zero())\n-   |           ^^^^^^ unexpected type argument\n+   |               ^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Zero`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:15:15"}, {"sha": "5d8c86f5a580974241d8ece24fa5960e861d97f8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=aa3b5c58e44beca0e96b46deb24f1bcb8d8c98a1", "patch": "@@ -1,8 +1,8 @@\n error[E0244]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:15:8\n+  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:15:13\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^ unexpected type argument\n+   |             ^^^^^^^^^^^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Trait`\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:15:24"}]}