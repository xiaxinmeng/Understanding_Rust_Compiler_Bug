{"sha": "1b5c7ac833c8f58386751d6a24c5a8acf11baff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNWM3YWM4MzNjOGY1ODM4Njc1MWQ2YTI0YzVhOGFjZjExYmFmZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-04T04:53:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-04T04:53:53Z"}, "message": "Auto merge of #39399 - clarcharr:iter_rfind, r=alexcrichton\n\nAdd Iterator::rfind.\n\nI found it weird that `Iterator` has `rpostition` but not `rfind`. This adds that method.", "tree": {"sha": "0c70001b40718471778fba95ff75b483f4eb5005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c70001b40718471778fba95ff75b483f4eb5005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5c7ac833c8f58386751d6a24c5a8acf11baff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5c7ac833c8f58386751d6a24c5a8acf11baff9", "html_url": "https://github.com/rust-lang/rust/commit/1b5c7ac833c8f58386751d6a24c5a8acf11baff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5c7ac833c8f58386751d6a24c5a8acf11baff9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c781fc4a6a8af287f7abe141f035a638bc0165c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c781fc4a6a8af287f7abe141f035a638bc0165c3", "html_url": "https://github.com/rust-lang/rust/commit/c781fc4a6a8af287f7abe141f035a638bc0165c3"}, {"sha": "3cf485c96322085f0af162b2a1458bfca0423f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf485c96322085f0af162b2a1458bfca0423f3c", "html_url": "https://github.com/rust-lang/rust/commit/3cf485c96322085f0af162b2a1458bfca0423f3c"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "a86ceb9ac0d370a469c8be4156a93d51ae93691f", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1b5c7ac833c8f58386751d6a24c5a8acf11baff9/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5c7ac833c8f58386751d6a24c5a8acf11baff9/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=1b5c7ac833c8f58386751d6a24c5a8acf11baff9", "patch": "@@ -414,6 +414,64 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n+\n+    /// Searches for an element of an iterator from the right that satisfies a predicate.\n+    ///\n+    /// `rfind()` takes a closure that returns `true` or `false`. It applies\n+    /// this closure to each element of the iterator, starting at the end, and if any\n+    /// of them return `true`, then `rfind()` returns [`Some(element)`]. If they all return\n+    /// `false`, it returns [`None`].\n+    ///\n+    /// `rfind()` is short-circuiting; in other words, it will stop processing\n+    /// as soon as the closure returns `true`.\n+    ///\n+    /// Because `rfind()` takes a reference, and many iterators iterate over\n+    /// references, this leads to a possibly confusing situation where the\n+    /// argument is a double reference. You can see this effect in the\n+    /// examples below, with `&&x`.\n+    ///\n+    /// [`Some(element)`]: ../../std/option/enum.Option.html#variant.Some\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_rfind)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// assert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n+    ///\n+    /// assert_eq!(a.iter().rfind(|&&x| x == 5), None);\n+    /// ```\n+    ///\n+    /// Stopping at the first `true`:\n+    ///\n+    /// ```\n+    /// #![feature(iter_rfind)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.rfind(|&&x| x == 2), Some(&2));\n+    ///\n+    /// // we can still use `iter`, as there are more elements.\n+    /// assert_eq!(iter.next_back(), Some(&1));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_rfind\", issue = \"39480\")]\n+    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+        Self: Sized,\n+        P: FnMut(&Self::Item) -> bool\n+    {\n+        for x in self.by_ref().rev() {\n+            if predicate(&x) { return Some(x) }\n+        }\n+        None\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}