{"sha": "69279c0584a1ee78100678062fd5a12ed1beaec3", "node_id": "C_kwDOAAsO6NoAKDY5Mjc5YzA1ODRhMWVlNzgxMDA2NzgwNjJmZDVhMTJlZDFiZWFlYzM", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-14T23:55:25Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-04-17T13:44:43Z"}, "message": "Bypass the varint path when encoding InitMask", "tree": {"sha": "f9f2ed9e58b2568e25c3db5318a4aa117dadccaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f2ed9e58b2568e25c3db5318a4aa117dadccaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69279c0584a1ee78100678062fd5a12ed1beaec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69279c0584a1ee78100678062fd5a12ed1beaec3", "html_url": "https://github.com/rust-lang/rust/commit/69279c0584a1ee78100678062fd5a12ed1beaec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69279c0584a1ee78100678062fd5a12ed1beaec3/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a41fc00eaf352541008965fec0dee811e44373b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a41fc00eaf352541008965fec0dee811e44373b3", "html_url": "https://github.com/rust-lang/rust/commit/a41fc00eaf352541008965fec0dee811e44373b3"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "d4dd56a42c1ed507d5b919bebeb1f747999aa075", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/init_mask.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69279c0584a1ee78100678062fd5a12ed1beaec3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69279c0584a1ee78100678062fd5a12ed1beaec3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs?ref=69279c0584a1ee78100678062fd5a12ed1beaec3", "patch": "@@ -5,7 +5,9 @@ use std::hash;\n use std::iter;\n use std::ops::Range;\n \n+use rustc_serialize::{Decodable, Encodable};\n use rustc_target::abi::Size;\n+use rustc_type_ir::{TyDecoder, TyEncoder};\n \n use super::AllocRange;\n \n@@ -182,11 +184,39 @@ impl InitMask {\n /// The actual materialized blocks of the bitmask, when we can't keep the `InitMask` lazy.\n // Note: for performance reasons when interning, some of the fields can be partially\n // hashed. (see the `Hash` impl below for more details), so the impl is not derived.\n-#[derive(Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, Debug, Eq, PartialEq, HashStable)]\n struct InitMaskMaterialized {\n     blocks: Vec<Block>,\n }\n \n+// `Block` is a `u64`, but it is a bitmask not a numeric value. If we were to just derive\n+// Encodable and Decodable we would apply varint encoding to the bitmasks, which is slower\n+// and also produces more output when the high bits of each `u64` are occupied.\n+// Note: There is probably a remaining optimization for masks that do not use an entire\n+// `Block`.\n+impl<E: TyEncoder> Encodable<E> for InitMaskMaterialized {\n+    fn encode(&self, encoder: &mut E) {\n+        encoder.emit_usize(self.blocks.len());\n+        for block in &self.blocks {\n+            encoder.emit_raw_bytes(&block.to_le_bytes());\n+        }\n+    }\n+}\n+\n+// This implementation is deliberately not derived, see the matching `Encodable` impl.\n+impl<D: TyDecoder> Decodable<D> for InitMaskMaterialized {\n+    fn decode(decoder: &mut D) -> Self {\n+        let num_blocks = decoder.read_usize();\n+        let mut blocks = Vec::with_capacity(num_blocks);\n+        for _ in 0..num_blocks {\n+            let bytes = decoder.read_raw_bytes(8);\n+            let block = u64::from_le_bytes(bytes.try_into().unwrap());\n+            blocks.push(block);\n+        }\n+        InitMaskMaterialized { blocks }\n+    }\n+}\n+\n // Const allocations are only hashed for interning. However, they can be large, making the hashing\n // expensive especially since it uses `FxHash`: it's better suited to short keys, not potentially\n // big buffers like the allocation's init mask. We can partially hash some fields when they're"}]}