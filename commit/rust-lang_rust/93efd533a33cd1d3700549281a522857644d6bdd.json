{"sha": "93efd533a33cd1d3700549281a522857644d6bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZWZkNTMzYTMzY2QxZDM3MDA1NDkyODFhNTIyODU3NjQ0ZDZiZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-30T22:20:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-30T22:20:16Z"}, "message": "Auto merge of #54650 - eddyb:no-extern's-land, r=alexcrichton\n\nDon't lint non-extern-prelude extern crate's in Rust 2018.\n\nFixes #54381 by silencing the lint telling users to remove `extern crate` when `use` doesn't work.\n\nr? @alexcrichton cc @petrochenkov @nikomatsakis @Centril", "tree": {"sha": "114cc0834522de04a1f93ae08822984e10141bf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/114cc0834522de04a1f93ae08822984e10141bf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93efd533a33cd1d3700549281a522857644d6bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93efd533a33cd1d3700549281a522857644d6bdd", "html_url": "https://github.com/rust-lang/rust/commit/93efd533a33cd1d3700549281a522857644d6bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93efd533a33cd1d3700549281a522857644d6bdd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc403ad9873ba80765f5a22bae16055c2d95e200", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc403ad9873ba80765f5a22bae16055c2d95e200", "html_url": "https://github.com/rust-lang/rust/commit/fc403ad9873ba80765f5a22bae16055c2d95e200"}, {"sha": "81ca8ebee229ec85d9d2c54d7eda7fd0106a34f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ca8ebee229ec85d9d2c54d7eda7fd0106a34f3", "html_url": "https://github.com/rust-lang/rust/commit/81ca8ebee229ec85d9d2c54d7eda7fd0106a34f3"}], "stats": {"total": 169, "additions": 59, "deletions": 110}, "files": [{"sha": "79d06cd7f125423683b2b45f8fb610cefb1c2866", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -38,7 +38,7 @@ use syntax::parse;\n use syntax::parse::ParseSess;\n use syntax::{ast, source_map};\n use syntax::feature_gate::AttributeType;\n-use syntax_pos::{MultiSpan, Span};\n+use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n use util::profiling::SelfProfiler;\n \n use rustc_target::spec::PanicStrategy;\n@@ -168,6 +168,10 @@ pub struct Session {\n \n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+\n+    /// All the crate names specified with `--extern`, and the builtin ones.\n+    /// Starting with the Rust 2018 edition, absolute paths resolve in this set.\n+    pub extern_prelude: FxHashSet<Symbol>,\n }\n \n pub struct PerfStats {\n@@ -1126,6 +1130,18 @@ pub fn build_session_(\n         CguReuseTracker::new_disabled()\n     };\n \n+\n+    let mut extern_prelude: FxHashSet<Symbol> =\n+        sopts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n+\n+    // HACK(eddyb) this ignores the `no_{core,std}` attributes.\n+    // FIXME(eddyb) warn (somewhere) if core/std is used with `no_{core,std}`.\n+    // if !attr::contains_name(&krate.attrs, \"no_core\") {\n+    // if !attr::contains_name(&krate.attrs, \"no_std\") {\n+    extern_prelude.insert(Symbol::intern(\"core\"));\n+    extern_prelude.insert(Symbol::intern(\"std\"));\n+    extern_prelude.insert(Symbol::intern(\"meta\"));\n+\n     let sess = Session {\n         target: target_cfg,\n         host,\n@@ -1201,6 +1217,7 @@ pub fn build_session_(\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n         driver_lint_caps: FxHashMap(),\n+        extern_prelude,\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "8c4eb90eb261fa253b1909a807c5b70f579ee31c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -1351,7 +1351,6 @@ pub struct Resolver<'a, 'b: 'a> {\n     graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n-    extern_prelude: FxHashSet<Name>,\n \n     /// n.b. This is used only for better diagnostics, not name resolution itself.\n     has_self: FxHashSet<DefId>,\n@@ -1667,17 +1666,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         DefCollector::new(&mut definitions, Mark::root())\n             .collect_root(crate_name, session.local_crate_disambiguator());\n \n-        let mut extern_prelude: FxHashSet<Name> =\n-            session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n-\n-        // HACK(eddyb) this ignore the `no_{core,std}` attributes.\n-        // FIXME(eddyb) warn (elsewhere) if core/std is used with `no_{core,std}`.\n-        // if !attr::contains_name(&krate.attrs, \"no_core\") {\n-        // if !attr::contains_name(&krate.attrs, \"no_std\") {\n-        extern_prelude.insert(Symbol::intern(\"core\"));\n-        extern_prelude.insert(Symbol::intern(\"std\"));\n-        extern_prelude.insert(Symbol::intern(\"meta\"));\n-\n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),\n                            arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n@@ -1696,7 +1684,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             // AST.\n             graph_root,\n             prelude: None,\n-            extern_prelude,\n \n             has_self: FxHashSet(),\n             field_names: FxHashMap(),\n@@ -1968,7 +1955,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if !module.no_implicit_prelude {\n             // `record_used` means that we don't try to load crates during speculative resolution\n-            if record_used && ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n+            if record_used && ns == TypeNS && self.session.extern_prelude.contains(&ident.name) {\n                 let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(&crate_root);\n@@ -3975,7 +3962,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     } else {\n                         // Items from the prelude\n                         if !module.no_implicit_prelude {\n-                            names.extend(self.extern_prelude.iter().cloned());\n+                            names.extend(self.session.extern_prelude.iter().cloned());\n                             if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }\n@@ -4421,8 +4408,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         );\n \n         if self.session.rust_2018() {\n-            let extern_prelude_names = self.extern_prelude.clone();\n-            for &name in extern_prelude_names.iter() {\n+            for &name in &self.session.extern_prelude {\n                 let ident = Ident::with_empty_ctxt(name);\n                 match self.crate_loader.maybe_process_path_extern(name, ident.span) {\n                     Some(crate_id) => {"}, {"sha": "7b5e3ca078ba625b9829111d3f083c0e24b9afec", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     result\n                 }\n                 WhereToResolve::ExternPrelude => {\n-                    if use_prelude && self.extern_prelude.contains(&ident.name) {\n+                    if use_prelude && self.session.extern_prelude.contains(&ident.name) {\n                         let crate_id =\n                             self.crate_loader.process_path_extern(ident.name, ident.span);\n                         let crate_root ="}, {"sha": "e689e6d70fdf4d53ca9719d97ef986ce7af68b1d", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     if !(\n                         ns == TypeNS &&\n                         !ident.is_path_segment_keyword() &&\n-                        self.extern_prelude.contains(&ident.name)\n+                        self.session.extern_prelude.contains(&ident.name)\n                     ) {\n                         // ... unless the crate name is not in the `extern_prelude`.\n                         return binding;\n@@ -218,7 +218,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 } else if\n                     ns == TypeNS &&\n                     !ident.is_path_segment_keyword() &&\n-                    self.extern_prelude.contains(&ident.name)\n+                    self.session.extern_prelude.contains(&ident.name)\n                 {\n                     let crate_id =\n                         self.crate_loader.process_path_extern(ident.name, ident.span);\n@@ -735,7 +735,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _, ns), results) in uniform_paths_canaries {\n             let name = results.name;\n-            let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n+            let external_crate = if ns == TypeNS && self.session.extern_prelude.contains(&name) {\n                 let crate_id =\n                     self.crate_loader.process_path_extern(name, span);\n                 Some(Def::Mod(DefId { krate: crate_id, index: CRATE_DEF_INDEX }))"}, {"sha": "de4ab527e1559c155702bf5057bf312b8fa8b78d", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -130,15 +130,13 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n     });\n \n     for extern_crate in &crates_to_lint {\n-        assert!(extern_crate.def_id.is_local());\n+        let id = tcx.hir.as_local_node_id(extern_crate.def_id).unwrap();\n+        let item = tcx.hir.expect_item(id);\n \n         // If the crate is fully unused, we suggest removing it altogether.\n         // We do this in any edition.\n         if extern_crate.warn_if_unused {\n             if let Some(&span) = unused_extern_crates.get(&extern_crate.def_id) {\n-                assert_eq!(extern_crate.def_id.krate, LOCAL_CRATE);\n-                let hir_id = tcx.hir.definitions().def_index_to_hir_id(extern_crate.def_id.index);\n-                let id = tcx.hir.hir_to_node_id(hir_id);\n                 let msg = \"unused extern crate\";\n                 tcx.struct_span_lint_node(lint, id, span, msg)\n                     .span_suggestion_short_with_applicability(\n@@ -157,6 +155,13 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n             continue;\n         }\n \n+        // If the extern crate isn't in the extern prelude,\n+        // there is no way it can be written as an `use`.\n+        let orig_name = extern_crate.orig_name.unwrap_or(item.name);\n+        if !tcx.sess.extern_prelude.contains(&orig_name) {\n+            continue;\n+        }\n+\n         // If the extern crate has any attributes, they may have funky\n         // semantics we can't faithfully represent using `use` (most\n         // notably `#[macro_use]`). Ignore it.\n@@ -165,9 +170,6 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n         }\n \n         // Otherwise, we can convert it into a `use` of some kind.\n-        let hir_id = tcx.hir.definitions().def_index_to_hir_id(extern_crate.def_id.index);\n-        let id = tcx.hir.hir_to_node_id(hir_id);\n-        let item = tcx.hir.expect_item(id);\n         let msg = \"`extern crate` is not idiomatic in the new edition\";\n         let help = format!(\n             \"convert it to a `{}`\","}, {"sha": "1cdc9229d078c8f53f2b78f70eb9bdd639a94a55", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -20,33 +20,23 @@ extern crate alloc as x;\n //~^ ERROR unused extern crate\n //~| HELP remove\n \n+extern crate proc_macro;\n+\n #[macro_use]\n extern crate test;\n \n pub extern crate test as y;\n-//~^ ERROR `extern crate` is not idiomatic in the new edition\n-//~| HELP convert it to a `pub use`\n \n pub extern crate libc;\n-//~^ ERROR `extern crate` is not idiomatic in the new edition\n-//~| HELP convert it to a `pub use`\n \n pub(crate) extern crate libc as a;\n-//~^ ERROR `extern crate` is not idiomatic in the new edition\n-//~| HELP convert it to a `pub(crate) use`\n \n crate extern crate libc as b;\n-//~^ ERROR `extern crate` is not idiomatic in the new edition\n-//~| HELP convert it to a `crate use`\n \n mod foo {\n     pub(in crate::foo) extern crate libc as c;\n-    //~^ ERROR `extern crate` is not idiomatic in the new edition\n-    //~| HELP convert it to a `pub(in crate::foo) use`\n \n     pub(super) extern crate libc as d;\n-    //~^ ERROR `extern crate` is not idiomatic in the new edition\n-    //~| HELP convert it to a `pub(super) use`\n \n     extern crate alloc;\n     //~^ ERROR unused extern crate\n@@ -57,12 +47,8 @@ mod foo {\n     //~| HELP remove\n \n     pub extern crate test;\n-    //~^ ERROR `extern crate` is not idiomatic in the new edition\n-    //~| HELP convert it\n \n     pub extern crate test as y;\n-    //~^ ERROR `extern crate` is not idiomatic in the new edition\n-    //~| HELP convert it\n \n     mod bar {\n         extern crate alloc;\n@@ -74,8 +60,6 @@ mod foo {\n         //~| HELP remove\n \n         pub(in crate::foo::bar) extern crate libc as e;\n-        //~^ ERROR `extern crate` is not idiomatic in the new edition\n-        //~| HELP convert it to a `pub(in crate::foo::bar) use`\n \n         fn dummy() {\n             unsafe {\n@@ -96,4 +80,6 @@ mod foo {\n fn main() {\n     unsafe { a::getpid(); }\n     unsafe { b::getpid(); }\n+\n+    proc_macro::TokenStream::new();\n }"}, {"sha": "58ec5901585d4888fb91ef20adeb3f4bc63ed82e", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.stderr", "status": "modified", "additions": 5, "deletions": 59, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -16,83 +16,29 @@ error: unused extern crate\n LL | extern crate alloc as x;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:26:1\n-   |\n-LL | pub extern crate test as y;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n-\n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:30:1\n-   |\n-LL | pub extern crate libc;\n-   | ^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n-\n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:34:1\n-   |\n-LL | pub(crate) extern crate libc as a;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(crate) use`\n-\n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:38:1\n-   |\n-LL | crate extern crate libc as b;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `crate use`\n-\n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:43:5\n-   |\n-LL |     pub(in crate::foo) extern crate libc as c;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(in crate::foo) use`\n-\n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:47:5\n-   |\n-LL |     pub(super) extern crate libc as d;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(super) use`\n-\n error: unused extern crate\n-  --> $DIR/unnecessary-extern-crate.rs:51:5\n+  --> $DIR/unnecessary-extern-crate.rs:41:5\n    |\n LL |     extern crate alloc;\n    |     ^^^^^^^^^^^^^^^^^^^ help: remove it\n \n error: unused extern crate\n-  --> $DIR/unnecessary-extern-crate.rs:55:5\n+  --> $DIR/unnecessary-extern-crate.rs:45:5\n    |\n LL |     extern crate alloc as x;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:59:5\n-   |\n-LL |     pub extern crate test;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n-\n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:63:5\n-   |\n-LL |     pub extern crate test as y;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n-\n error: unused extern crate\n-  --> $DIR/unnecessary-extern-crate.rs:68:9\n+  --> $DIR/unnecessary-extern-crate.rs:54:9\n    |\n LL |         extern crate alloc;\n    |         ^^^^^^^^^^^^^^^^^^^ help: remove it\n \n error: unused extern crate\n-  --> $DIR/unnecessary-extern-crate.rs:72:9\n+  --> $DIR/unnecessary-extern-crate.rs:58:9\n    |\n LL |         extern crate alloc as x;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:76:9\n-   |\n-LL |         pub(in crate::foo::bar) extern crate libc as e;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(in crate::foo::bar) use`\n-\n-error: aborting due to 15 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "34c7266b637cbcb611dbe99be66e319a36f5e49f", "filename": "src/test/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -14,6 +14,7 @@\n // aux-build:remove-extern-crate.rs\n // compile-flags:--extern remove_extern_crate\n \n+#![feature(alloc)]\n #![warn(rust_2018_idioms)]\n \n \n@@ -22,11 +23,16 @@ use remove_extern_crate;\n #[macro_use]\n extern crate remove_extern_crate as something_else;\n \n+// Shouldn't suggest changing to `use`, as the `alloc`\n+// crate is not in the extern prelude - see #54381.\n+extern crate alloc;\n+\n fn main() {\n     another_name::mem::drop(3);\n     another::foo();\n     remove_extern_crate::foo!();\n     bar!();\n+    alloc::vec![5];\n }\n \n mod another {"}, {"sha": "570bbb02f7218a75fe1220f1861d793e2506125c", "filename": "src/test/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -14,6 +14,7 @@\n // aux-build:remove-extern-crate.rs\n // compile-flags:--extern remove_extern_crate\n \n+#![feature(alloc)]\n #![warn(rust_2018_idioms)]\n \n extern crate core;\n@@ -22,11 +23,16 @@ use remove_extern_crate;\n #[macro_use]\n extern crate remove_extern_crate as something_else;\n \n+// Shouldn't suggest changing to `use`, as the `alloc`\n+// crate is not in the extern prelude - see #54381.\n+extern crate alloc;\n+\n fn main() {\n     another_name::mem::drop(3);\n     another::foo();\n     remove_extern_crate::foo!();\n     bar!();\n+    alloc::vec![5];\n }\n \n mod another {"}, {"sha": "847ba5f3544b273edb52af7feec5ea9ee34e1b17", "filename": "src/test/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93efd533a33cd1d3700549281a522857644d6bdd/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=93efd533a33cd1d3700549281a522857644d6bdd", "patch": "@@ -1,24 +1,24 @@\n warning: unused extern crate\n-  --> $DIR/remove-extern-crate.rs:19:1\n+  --> $DIR/remove-extern-crate.rs:20:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n-  --> $DIR/remove-extern-crate.rs:17:9\n+  --> $DIR/remove-extern-crate.rs:18:9\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:20:1\n+  --> $DIR/remove-extern-crate.rs:21:1\n    |\n LL | extern crate core as another_name;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:33:5\n+  --> $DIR/remove-extern-crate.rs:39:5\n    |\n LL |     extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^ help: convert it to a `use`"}]}