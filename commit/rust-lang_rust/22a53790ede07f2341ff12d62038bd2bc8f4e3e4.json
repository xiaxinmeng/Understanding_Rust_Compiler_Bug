{"sha": "22a53790ede07f2341ff12d62038bd2bc8f4e3e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYTUzNzkwZWRlMDdmMjM0MWZmMTJkNjIwMzhiZDJiYzhmNGUzZTQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-02T14:38:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-23T11:21:25Z"}, "message": "Use `ConstCx` for `validate_candidates`", "tree": {"sha": "8bf83c80e518e4918984e05aa4bd106d2dcd8faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bf83c80e518e4918984e05aa4bd106d2dcd8faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a53790ede07f2341ff12d62038bd2bc8f4e3e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a53790ede07f2341ff12d62038bd2bc8f4e3e4", "html_url": "https://github.com/rust-lang/rust/commit/22a53790ede07f2341ff12d62038bd2bc8f4e3e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a53790ede07f2341ff12d62038bd2bc8f4e3e4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a", "html_url": "https://github.com/rust-lang/rust/commit/0bc743ed12e7ca72eca59ef2a6eadcfabf385b4a"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "179641ec7c03ad1b007ae9f571bf39b1b60e8b18", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a53790ede07f2341ff12d62038bd2bc8f4e3e4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a53790ede07f2341ff12d62038bd2bc8f4e3e4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=22a53790ede07f2341ff12d62038bd2bc8f4e3e4", "patch": "@@ -1997,7 +1997,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             // be mentioned, need to check if the rvalue is promotable.\n                             let should_suggest =\n                                 should_suggest_const_in_array_repeat_expressions_attribute(\n-                                    ccx, operand,\n+                                    &ccx, operand,\n                                 );\n                             debug!(\"check_rvalue: should_suggest={:?}\", should_suggest);\n "}, {"sha": "3506abc8e24b90ca6eaefd4b03e5bfc03d74a283", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22a53790ede07f2341ff12d62038bd2bc8f4e3e4/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a53790ede07f2341ff12d62038bd2bc8f4e3e4/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=22a53790ede07f2341ff12d62038bd2bc8f4e3e4", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n         let ccx = ConstCx::new(tcx, def_id, body);\n         let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);\n \n-        let promotable_candidates = validate_candidates(tcx, body, def_id, &temps, &all_candidates);\n+        let promotable_candidates = validate_candidates(&ccx, &temps, &all_candidates);\n \n         let promoted = promote_candidates(def_id, body, tcx, temps, promotable_candidates);\n         self.promoted_fragments.set(promoted);\n@@ -262,7 +262,7 @@ pub fn collect_temps_and_candidates(\n ///\n /// This wraps an `Item`, and has access to all fields of that `Item` via `Deref` coercion.\n struct Validator<'a, 'tcx> {\n-    ccx: ConstCx<'a, 'tcx>,\n+    ccx: &'a ConstCx<'a, 'tcx>,\n     temps: &'a IndexVec<Local, TempState>,\n \n     /// Explicit promotion happens e.g. for constant arguments declared via\n@@ -715,13 +715,11 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n // FIXME(eddyb) remove the differences for promotability in `static`, `const`, `const fn`.\n pub fn validate_candidates(\n-    tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n-    def_id: DefId,\n+    ccx: &ConstCx<'_, '_>,\n     temps: &IndexVec<Local, TempState>,\n     candidates: &[Candidate],\n ) -> Vec<Candidate> {\n-    let mut validator = Validator { ccx: ConstCx::new(tcx, def_id, body), temps, explicit: false };\n+    let mut validator = Validator { ccx, temps, explicit: false };\n \n     candidates\n         .iter()\n@@ -735,9 +733,9 @@ pub fn validate_candidates(\n             let is_promotable = validator.validate_candidate(candidate).is_ok();\n             match candidate {\n                 Candidate::Argument { bb, index } if !is_promotable => {\n-                    let span = body[bb].terminator().source_info.span;\n+                    let span = ccx.body[bb].terminator().source_info.span;\n                     let msg = format!(\"argument {} is required to be a constant\", index + 1);\n-                    tcx.sess.span_err(span, &msg);\n+                    ccx.tcx.sess.span_err(span, &msg);\n                 }\n                 _ => (),\n             }\n@@ -1145,7 +1143,7 @@ pub fn promote_candidates<'tcx>(\n /// Feature attribute should be suggested if `operand` can be promoted and the feature is not\n /// enabled.\n crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n-    ccx: ConstCx<'_, 'tcx>,\n+    ccx: &ConstCx<'_, 'tcx>,\n     operand: &Operand<'tcx>,\n ) -> bool {\n     let mut rpo = traversal::reverse_postorder(&ccx.body);"}]}