{"sha": "76b60efbfb8cdc94cf14fef1be50c60f250bc293", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YjYwZWZiZmI4Y2RjOTRjZjE0ZmVmMWJlNTBjNjBmMjUwYmMyOTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-29T15:49:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-29T15:49:16Z"}, "message": "internal: improve compile times a bit\n\nbefore after for cargo llvm-lines -q --lib --release -p ide_ssr | head -n 24\n\n  Lines          Copies        Function name\n  -----          ------        -------------\n  297146 (100%)  12748 (100%)  (TOTAL)\n    5970 (2.0%)     47 (0.4%)  core::iter::traits::iterator::Iterator::try_fold\n    4750 (1.6%)     27 (0.2%)  hashbrown::raw::RawTable<T,A>::resize\n    4080 (1.4%)     30 (0.2%)  alloc::raw_vec::RawVec<T,A>::grow_amortized\n    3933 (1.3%)     69 (0.5%)  alloc::raw_vec::RawVec<T,A>::current_memory\n    3668 (1.2%)     89 (0.7%)  <core::result::Result<T,E> as core::ops::try_trait::Try>::branch\n    3500 (1.2%)     50 (0.4%)  hashbrown::raw::RawTable<T,A>::drop_elements\n    3436 (1.2%)     33 (0.3%)  hashbrown::raw::RawTable<T,A>::find\n    3415 (1.1%)     17 (0.1%)  hashbrown::raw::RawTable<T,A>::rehash_in_place\n    3400 (1.1%)     50 (0.4%)  <hashbrown::raw::RawIterRange<T> as core::iter::traits::iterator::Iterator>::next\n    2840 (1.0%)     20 (0.2%)  alloc::raw_vec::RawVec<T,A>::allocate_in\n    2700 (0.9%)     30 (0.2%)  core::alloc::layout::Layout::array\n    2666 (0.9%)     86 (0.7%)  core::ptr::metadata::from_raw_parts_mut\n    2495 (0.8%)     50 (0.4%)  core::option::Option<T>::map\n    2354 (0.8%)     38 (0.3%)  alloc::alloc::box_free\n    2302 (0.8%)      7 (0.1%)  ide_ssr::parsing::RuleBuilder::try_add\n    2146 (0.7%)     45 (0.4%)  core::mem::replace\n    2070 (0.7%)     69 (0.5%)  <alloc::raw_vec::RawVec<T,A> as core::ops::drop::Drop>::drop\n    1979 (0.7%)     16 (0.1%)  hashbrown::map::HashMap<K,V,S,A>::insert\n    1926 (0.6%)     18 (0.1%)  <core::iter::adapters::zip::Zip<A,B> as core::iter::adapters::zip::ZipImpl<A,B>>::next\n    1922 (0.6%)     62 (0.5%)  core::fmt::ArgumentV1::new\n    1885 (0.6%)     13 (0.1%)  alloc::raw_vec::RawVec<T,A>::shrink\n\n  Lines          Copies        Function name\n  -----          ------        -------------\n  261717 (100%)  11666 (100%)  (TOTAL)\n    5239 (2.0%)     42 (0.4%)  core::iter::traits::iterator::Iterator::try_fold\n    4750 (1.8%)     27 (0.2%)  hashbrown::raw::RawTable<T,A>::resize\n    3933 (1.5%)     69 (0.6%)  alloc::raw_vec::RawVec<T,A>::current_memory\n    3536 (1.4%)     26 (0.2%)  alloc::raw_vec::RawVec<T,A>::grow_amortized\n    3500 (1.3%)     50 (0.4%)  hashbrown::raw::RawTable<T,A>::drop_elements\n    3400 (1.3%)     50 (0.4%)  <hashbrown::raw::RawIterRange<T> as core::iter::traits::iterator::Iterator>::next\n    3124 (1.2%)     30 (0.3%)  hashbrown::raw::RawTable<T,A>::find\n    2812 (1.1%)     14 (0.1%)  hashbrown::raw::RawTable<T,A>::rehash_in_place\n    2604 (1.0%)     84 (0.7%)  core::ptr::metadata::from_raw_parts_mut\n    2340 (0.9%)     26 (0.2%)  core::alloc::layout::Layout::array\n    2302 (0.9%)      7 (0.1%)  ide_ssr::parsing::RuleBuilder::try_add\n    2272 (0.9%)     16 (0.1%)  alloc::raw_vec::RawVec<T,A>::allocate_in\n    2201 (0.8%)     35 (0.3%)  alloc::alloc::box_free\n    2104 (0.8%)     44 (0.4%)  core::mem::replace\n    2079 (0.8%)     42 (0.4%)  <core::result::Result<T,E> as core::ops::try_trait::Try>::branch\n    2070 (0.8%)     69 (0.6%)  <alloc::raw_vec::RawVec<T,A> as core::ops::drop::Drop>::drop\n    1926 (0.7%)     18 (0.2%)  <core::iter::adapters::zip::Zip<A,B> as core::iter::adapters::zip::ZipImpl<A,B>>::next\n    1885 (0.7%)     13 (0.1%)  alloc::raw_vec::RawVec<T,A>::shrink\n    1833 (0.7%)     13 (0.1%)  hashbrown::raw::RawTable<T,A>::shrink_to\n    1771 (0.7%)     91 (0.8%)  core::ptr::read\n    1701 (0.6%)     35 (0.3%)  core::option::Option<T>::map", "tree": {"sha": "603f9c0166e4b0ec9b8a177f7793569b5a2f4b42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/603f9c0166e4b0ec9b8a177f7793569b5a2f4b42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b60efbfb8cdc94cf14fef1be50c60f250bc293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b60efbfb8cdc94cf14fef1be50c60f250bc293", "html_url": "https://github.com/rust-lang/rust/commit/76b60efbfb8cdc94cf14fef1be50c60f250bc293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b60efbfb8cdc94cf14fef1be50c60f250bc293/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d98070d223240ea46fc5dff7dac459425d5718", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d98070d223240ea46fc5dff7dac459425d5718", "html_url": "https://github.com/rust-lang/rust/commit/35d98070d223240ea46fc5dff7dac459425d5718"}], "stats": {"total": 93, "additions": 77, "deletions": 16}, "files": [{"sha": "6383a467ebcdb7f9ab05f9fd2717ca4055f93843", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 74, "deletions": 13, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/76b60efbfb8cdc94cf14fef1be50c60f250bc293/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b60efbfb8cdc94cf14fef1be50c60f250bc293/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=76b60efbfb8cdc94cf14fef1be50c60f250bc293", "patch": "@@ -2517,18 +2517,35 @@ impl Type {\n         krate: Crate,\n         mut callback: impl FnMut(AssocItem) -> Option<T>,\n     ) -> Option<T> {\n-        for krate in method_resolution::def_crates(db, &self.ty, krate.id)? {\n+        let mut slot = None;\n+        self.iterate_assoc_items_dyn(db, krate, &mut |assoc_item_id| {\n+            slot = callback(assoc_item_id.into());\n+            slot.is_some()\n+        });\n+        slot\n+    }\n+\n+    fn iterate_assoc_items_dyn(\n+        self,\n+        db: &dyn HirDatabase,\n+        krate: Crate,\n+        callback: &mut dyn FnMut(AssocItemId) -> bool,\n+    ) {\n+        let def_crates = match method_resolution::def_crates(db, &self.ty, krate.id) {\n+            Some(it) => it,\n+            None => return,\n+        };\n+        for krate in def_crates {\n             let impls = db.inherent_impls_in_crate(krate);\n \n             for impl_def in impls.for_self_ty(&self.ty) {\n                 for &item in db.impl_data(*impl_def).items.iter() {\n-                    if let Some(result) = callback(item.into()) {\n-                        return Some(result);\n+                    if callback(item) {\n+                        return;\n                     }\n                 }\n             }\n         }\n-        None\n     }\n \n     pub fn type_arguments(&self) -> impl Iterator<Item = Type> + '_ {\n@@ -2550,6 +2567,31 @@ impl Type {\n         mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_method_candidates\");\n+        let mut slot = None;\n+        self.iterate_method_candidates_dyn(\n+            db,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            &mut |ty, assoc_item_id| match assoc_item_id {\n+                AssocItemId::FunctionId(it) => {\n+                    slot = callback(ty, it.into());\n+                    slot.is_some()\n+                }\n+                AssocItemId::ConstId(_) | AssocItemId::TypeAliasId(_) => false,\n+            },\n+        );\n+        slot\n+    }\n+\n+    fn iterate_method_candidates_dyn(\n+        &self,\n+        db: &dyn HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n+    ) {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n         // FIXME replace Unknown by bound vars here\n@@ -2559,7 +2601,7 @@ impl Type {\n         let env = self.env.clone();\n         let krate = krate.id;\n \n-        method_resolution::iterate_method_candidates(\n+        method_resolution::iterate_method_candidates_dyn(\n             &canonical,\n             db,\n             env,\n@@ -2568,11 +2610,8 @@ impl Type {\n             None,\n             name,\n             method_resolution::LookupMode::MethodCall,\n-            |ty, it| match it {\n-                AssocItemId::FunctionId(f) => callback(ty, f.into()),\n-                _ => None,\n-            },\n-        )\n+            callback,\n+        );\n     }\n \n     pub fn iterate_path_candidates<T>(\n@@ -2584,12 +2623,34 @@ impl Type {\n         mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_path_candidates\");\n+        let mut slot = None;\n+        self.iterate_path_candidates_dyn(\n+            db,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            &mut |ty, assoc_item_id| {\n+                slot = callback(ty, assoc_item_id.into());\n+                slot.is_some()\n+            },\n+        );\n+        slot\n+    }\n+\n+    fn iterate_path_candidates_dyn(\n+        &self,\n+        db: &dyn HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        callback: &mut dyn FnMut(&Ty, AssocItemId) -> bool,\n+    ) {\n         let canonical = hir_ty::replace_errors_with_variables(&self.ty);\n \n         let env = self.env.clone();\n         let krate = krate.id;\n \n-        method_resolution::iterate_method_candidates(\n+        method_resolution::iterate_method_candidates_dyn(\n             &canonical,\n             db,\n             env,\n@@ -2598,8 +2659,8 @@ impl Type {\n             None,\n             name,\n             method_resolution::LookupMode::Path,\n-            |ty, it| callback(ty, it.into()),\n-        )\n+            callback,\n+        );\n     }\n \n     pub fn as_adt(&self) -> Option<Adt> {"}, {"sha": "0bd1d30bbfb6ba0f0469a641855ace364a60ef67", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76b60efbfb8cdc94cf14fef1be50c60f250bc293/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b60efbfb8cdc94cf14fef1be50c60f250bc293/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=76b60efbfb8cdc94cf14fef1be50c60f250bc293", "patch": "@@ -410,7 +410,7 @@ pub enum LookupMode {\n // This would be nicer if it just returned an iterator, but that runs into\n // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n // FIXME add a context type here?\n-pub fn iterate_method_candidates<T>(\n+pub fn  iterate_method_candidates<T>(\n     ty: &Canonical<Ty>,\n     db: &dyn HirDatabase,\n     env: Arc<TraitEnvironment>,\n@@ -422,7 +422,7 @@ pub fn iterate_method_candidates<T>(\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     let mut slot = None;\n-    iterate_method_candidates_impl(\n+    iterate_method_candidates_dyn(\n         ty,\n         db,\n         env,\n@@ -440,7 +440,7 @@ pub fn iterate_method_candidates<T>(\n     slot\n }\n \n-fn iterate_method_candidates_impl(\n+pub fn iterate_method_candidates_dyn(\n     ty: &Canonical<Ty>,\n     db: &dyn HirDatabase,\n     env: Arc<TraitEnvironment>,"}]}