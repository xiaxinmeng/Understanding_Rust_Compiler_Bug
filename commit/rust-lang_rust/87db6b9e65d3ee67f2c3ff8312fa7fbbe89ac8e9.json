{"sha": "87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZGI2YjllNjVkM2VlNjdmMmMzZmY4MzEyZmE3ZmJiZTg5YWM4ZTk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-29T00:33:38Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T16:21:33Z"}, "message": "rustc_metadata: remove redundant lifetimes from astencode::DecodeContext.", "tree": {"sha": "37d9d01988083d5ad743c2f773e4910e2fac9026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d9d01988083d5ad743c2f773e4910e2fac9026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9", "html_url": "https://github.com/rust-lang/rust/commit/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad8aa6b87cb78803d284c37d33a064b5677a5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad8aa6b87cb78803d284c37d33a064b5677a5fa", "html_url": "https://github.com/rust-lang/rust/commit/3ad8aa6b87cb78803d284c37d33a064b5677a5fa"}], "stats": {"total": 106, "additions": 52, "deletions": 54}, "files": [{"sha": "4469a797eed9b3a316f353f6bb2819fcc902f4bf", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9", "patch": "@@ -58,9 +58,9 @@ use rustc_serialize::{Encodable, EncoderHelpers};\n #[cfg(test)] use rustc::hir::print as pprust;\n #[cfg(test)] use rustc::hir::lowering::{LoweringContext, DummyResolver};\n \n-struct DecodeContext<'a, 'b, 'tcx: 'a> {\n+struct DecodeContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    cdata: &'b cstore::CrateMetadata,\n+    cdata: &'a cstore::CrateMetadata,\n     from_id_range: IdRange,\n     to_id_range: IdRange,\n     // Cache the last used filemap for translating spans as an optimization.\n@@ -102,7 +102,7 @@ pub fn encode_inlined_item(ecx: &e::EncodeContext,\n            rbml_w.writer.seek(SeekFrom::Current(0)));\n }\n \n-impl<'a, 'b, 'c, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'c, 'tcx> {\n+impl<'a, 'b, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'tcx> {\n     fn new_id(&self, id: ast::NodeId) -> ast::NodeId {\n         if id == ast::DUMMY_NODE_ID {\n             // Used by ast_map to map the NodeInlinedParent.\n@@ -177,7 +177,7 @@ fn reserve_id_range(sess: &Session,\n     IdRange { min: to_id_min, max: to_id_max }\n }\n \n-impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n+impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     /// Translates an internal id, meaning a node id that is known to refer to some part of the\n     /// item currently being inlined, such as a local variable or argument.  All naked node-ids\n     /// that appear in types have this property, since if something might refer to an external item\n@@ -462,8 +462,8 @@ impl tr for hir::Freevar {\n // Encoding and decoding of MethodCallee\n \n trait read_method_callee_helper<'tcx> {\n-    fn read_method_callee<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                  -> (u32, ty::MethodCallee<'tcx>);\n+    fn read_method_callee<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                              -> (u32, ty::MethodCallee<'tcx>);\n }\n \n fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n@@ -489,8 +489,8 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n-    fn read_method_callee<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                                  -> (u32, ty::MethodCallee<'tcx>) {\n+    fn read_method_callee<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                              -> (u32, ty::MethodCallee<'tcx>) {\n \n         self.read_struct(\"MethodCallee\", 4, |this| {\n             let autoderef = this.read_struct_field(\"autoderef\", 0,\n@@ -821,31 +821,30 @@ impl<'a> doc_decoder_helpers for rbml::Doc<'a> {\n }\n \n trait rbml_decoder_decoder_helpers<'tcx> {\n-    fn read_ty_encoded<'a, 'b, F, R>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>,\n-                                     f: F) -> R\n+    fn read_ty_encoded<'a, F, R>(&mut self, dcx: &DecodeContext<'a, 'tcx>, f: F) -> R\n         where F: for<'x> FnOnce(&mut tydecode::TyDecoder<'x, 'tcx>) -> R;\n \n-    fn read_region<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> &'tcx ty::Region;\n-    fn read_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Ty<'tcx>;\n-    fn read_tys<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Vec<Ty<'tcx>>;\n-    fn read_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                              -> ty::TraitRef<'tcx>;\n-    fn read_poly_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                   -> ty::PolyTraitRef<'tcx>;\n-    fn read_predicate<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                              -> ty::Predicate<'tcx>;\n-    fn read_substs<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                           -> &'tcx Substs<'tcx>;\n-    fn read_upvar_capture<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                  -> ty::UpvarCapture<'tcx>;\n-    fn read_auto_adjustment<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                    -> adjustment::AutoAdjustment<'tcx>;\n-    fn read_cast_kind<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                 -> cast::CastKind;\n-    fn read_auto_deref_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                   -> adjustment::AutoDerefRef<'tcx>;\n-    fn read_autoref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                            -> adjustment::AutoRef<'tcx>;\n+    fn read_region<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>) -> &'tcx ty::Region;\n+    fn read_ty<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>) -> Ty<'tcx>;\n+    fn read_tys<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>) -> Vec<Ty<'tcx>>;\n+    fn read_trait_ref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                          -> ty::TraitRef<'tcx>;\n+    fn read_poly_trait_ref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                               -> ty::PolyTraitRef<'tcx>;\n+    fn read_predicate<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                          -> ty::Predicate<'tcx>;\n+    fn read_substs<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                       -> &'tcx Substs<'tcx>;\n+    fn read_upvar_capture<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                              -> ty::UpvarCapture<'tcx>;\n+    fn read_auto_adjustment<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                                -> adjustment::AutoAdjustment<'tcx>;\n+    fn read_cast_kind<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                          -> cast::CastKind;\n+    fn read_auto_deref_ref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                               -> adjustment::AutoDerefRef<'tcx>;\n+    fn read_autoref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n+                        -> adjustment::AutoRef<'tcx>;\n \n     // Versions of the type reading functions that don't need the full\n     // DecodeContext.\n@@ -890,7 +889,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         }).unwrap()\n     }\n \n-    fn read_ty_encoded<'b, 'c, F, R>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>, op: F) -> R\n+    fn read_ty_encoded<'b, F, R>(&mut self, dcx: &DecodeContext<'b, 'tcx>, op: F) -> R\n         where F: for<'x> FnOnce(&mut tydecode::TyDecoder<'x,'tcx>) -> R\n     {\n         return self.read_opaque(|_, doc| {\n@@ -909,48 +908,47 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n             str\n         }\n     }\n-    fn read_region<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>) -> &'tcx ty::Region {\n+    fn read_region<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>) -> &'tcx ty::Region {\n         // Note: regions types embed local node ids.  In principle, we\n         // should translate these node ids into the new decode\n         // context.  However, we do not bother, because region types\n         // are not used during trans. This also applies to read_ty.\n         return self.read_ty_encoded(dcx, |decoder| decoder.parse_region());\n     }\n-    fn read_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>) -> Ty<'tcx> {\n+    fn read_ty<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>) -> Ty<'tcx> {\n         return self.read_ty_encoded(dcx, |decoder| decoder.parse_ty());\n     }\n \n-    fn read_tys<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                        -> Vec<Ty<'tcx>> {\n+    fn read_tys<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>) -> Vec<Ty<'tcx>> {\n         self.read_to_vec(|this| Ok(this.read_ty(dcx))).unwrap().into_iter().collect()\n     }\n \n-    fn read_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                              -> ty::TraitRef<'tcx> {\n+    fn read_trait_ref<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                          -> ty::TraitRef<'tcx> {\n         self.read_ty_encoded(dcx, |decoder| decoder.parse_trait_ref())\n     }\n \n-    fn read_poly_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                                   -> ty::PolyTraitRef<'tcx> {\n+    fn read_poly_trait_ref<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                               -> ty::PolyTraitRef<'tcx> {\n         ty::Binder(self.read_ty_encoded(dcx, |decoder| decoder.parse_trait_ref()))\n     }\n \n-    fn read_predicate<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                              -> ty::Predicate<'tcx>\n+    fn read_predicate<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                          -> ty::Predicate<'tcx>\n     {\n         self.read_ty_encoded(dcx, |decoder| decoder.parse_predicate())\n     }\n \n-    fn read_substs<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                           -> &'tcx Substs<'tcx> {\n+    fn read_substs<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                       -> &'tcx Substs<'tcx> {\n         self.read_opaque(|_, doc| {\n             Ok(tydecode::TyDecoder::with_doc(dcx.tcx, dcx.cdata.cnum, doc,\n                                              &mut |d| convert_def_id(dcx, d))\n                .parse_substs())\n         }).unwrap()\n     }\n-    fn read_upvar_capture<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                                  -> ty::UpvarCapture<'tcx> {\n+    fn read_upvar_capture<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                              -> ty::UpvarCapture<'tcx> {\n         self.read_enum(\"UpvarCapture\", |this| {\n             let variants = [\"ByValue\", \"ByRef\"];\n             this.read_enum_variant(&variants, |this, i| {\n@@ -967,8 +965,8 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n             })\n         }).unwrap()\n     }\n-    fn read_auto_adjustment<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                                    -> adjustment::AutoAdjustment<'tcx> {\n+    fn read_auto_adjustment<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                                -> adjustment::AutoAdjustment<'tcx> {\n         self.read_enum(\"AutoAdjustment\", |this| {\n             let variants = [\"AdjustReifyFnPointer\", \"AdjustUnsafeFnPointer\",\n                             \"AdjustMutToConstPointer\", \"AdjustDerefRef\",\n@@ -998,8 +996,8 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         }).unwrap()\n     }\n \n-    fn read_auto_deref_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                                   -> adjustment::AutoDerefRef<'tcx> {\n+    fn read_auto_deref_ref<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                               -> adjustment::AutoDerefRef<'tcx> {\n         self.read_struct(\"AutoDerefRef\", 2, |this| {\n             Ok(adjustment::AutoDerefRef {\n                 autoderefs: this.read_struct_field(\"autoderefs\", 0, |this| {\n@@ -1027,8 +1025,8 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         }).unwrap()\n     }\n \n-    fn read_autoref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                            -> adjustment::AutoRef<'tcx> {\n+    fn read_autoref<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n+                        -> adjustment::AutoRef<'tcx> {\n         self.read_enum(\"AutoRef\", |this| {\n             let variants = [\"AutoPtr\", \"AutoUnsafe\"];\n             this.read_enum_variant(&variants, |this, i| {\n@@ -1057,8 +1055,8 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         }).unwrap()\n     }\n \n-    fn read_cast_kind<'b, 'c>(&mut self, _dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                              -> cast::CastKind\n+    fn read_cast_kind<'b>(&mut self, _dcx: &DecodeContext<'b, 'tcx>)\n+                          -> cast::CastKind\n     {\n         Decodable::decode(self).unwrap()\n     }"}]}