{"sha": "7208bdee33460b9915e6b389b236d231d2ca3ffc", "node_id": "C_kwDOAAsO6NoAKDcyMDhiZGVlMzM0NjBiOTkxNWU2YjM4OWIyMzZkMjMxZDJjYTNmZmM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-02T03:26:03Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-10T01:21:58Z"}, "message": "Remove `cache_on_disk` from `QueryVTable`\n\nThis is not only simpler, but removes a generic function and unwrap.\nI have hope it will see compile time and bootstrap time improvements.", "tree": {"sha": "5baa51addced06e641d6e1c12d16cd7f2251597b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5baa51addced06e641d6e1c12d16cd7f2251597b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7208bdee33460b9915e6b389b236d231d2ca3ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7208bdee33460b9915e6b389b236d231d2ca3ffc", "html_url": "https://github.com/rust-lang/rust/commit/7208bdee33460b9915e6b389b236d231d2ca3ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7208bdee33460b9915e6b389b236d231d2ca3ffc/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b164dbc2715aa15be5c9f363a00d71e0847b2e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/b164dbc2715aa15be5c9f363a00d71e0847b2e77", "html_url": "https://github.com/rust-lang/rust/commit/b164dbc2715aa15be5c9f363a00d71e0847b2e77"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "4ff3917e113da323f1de0a99c66eeabadcf5cb90", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7208bdee33460b9915e6b389b236d231d2ca3ffc/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208bdee33460b9915e6b389b236d231d2ca3ffc/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=7208bdee33460b9915e6b389b236d231d2ca3ffc", "patch": "@@ -442,8 +442,7 @@ macro_rules! define_queries {\n                     hash_result: hash_result!([$($modifiers)*]),\n                     handle_cycle_error: handle_cycle_error!([$($modifiers)*]),\n                     compute,\n-                    cache_on_disk,\n-                    try_load_from_disk: Self::TRY_LOAD_FROM_DISK,\n+                    try_load_from_disk: if cache_on_disk { Self::TRY_LOAD_FROM_DISK } else { None },\n                 }\n             }\n "}, {"sha": "340deb88915764be755489fd53cad77bbe53f1f7", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7208bdee33460b9915e6b389b236d231d2ca3ffc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208bdee33460b9915e6b389b236d231d2ca3ffc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=7208bdee33460b9915e6b389b236d231d2ca3ffc", "patch": "@@ -25,11 +25,12 @@ pub struct QueryVTable<CTX: QueryContext, K, V> {\n     pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n     pub depth_limit: bool,\n-    pub cache_on_disk: bool,\n \n     pub compute: fn(CTX::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n     pub handle_cycle_error: HandleCycleError,\n+    // NOTE: this is not quite the same as `Q::TRY_LOAD_FROM_DISK`; it can also be `None` if\n+    // `cache_on_disk` returned false for this key.\n     pub try_load_from_disk: Option<fn(CTX, SerializedDepNodeIndex) -> Option<V>>,\n }\n \n@@ -44,13 +45,6 @@ impl<CTX: QueryContext, K, V> QueryVTable<CTX, K, V> {\n     pub(crate) fn compute(&self, tcx: CTX::DepContext, key: K) -> V {\n         (self.compute)(tcx, key)\n     }\n-\n-    pub(crate) fn try_load_from_disk(&self, tcx: CTX, index: SerializedDepNodeIndex) -> Option<V> {\n-        self.try_load_from_disk\n-            .expect(\"QueryDescription::load_from_disk() called for an unsupported query.\")(\n-            tcx, index,\n-        )\n-    }\n }\n \n pub trait QueryDescription<CTX: QueryContext>: QueryConfig {"}, {"sha": "8179a674afaecb9bc18e1d66e8f162724dd10ee3", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7208bdee33460b9915e6b389b236d231d2ca3ffc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7208bdee33460b9915e6b389b236d231d2ca3ffc/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=7208bdee33460b9915e6b389b236d231d2ca3ffc", "patch": "@@ -488,14 +488,14 @@ where\n \n     // First we try to load the result from the on-disk cache.\n     // Some things are never cached on disk.\n-    if query.cache_on_disk {\n+    if let Some(try_load_from_disk) = query.try_load_from_disk {\n         let prof_timer = tcx.dep_context().profiler().incr_cache_loading();\n \n         // The call to `with_query_deserialization` enforces that no new `DepNodes`\n         // are created during deserialization. See the docs of that method for more\n         // details.\n-        let result = dep_graph\n-            .with_query_deserialization(|| query.try_load_from_disk(tcx, prev_dep_node_index));\n+        let result =\n+            dep_graph.with_query_deserialization(|| try_load_from_disk(tcx, prev_dep_node_index));\n \n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n "}]}