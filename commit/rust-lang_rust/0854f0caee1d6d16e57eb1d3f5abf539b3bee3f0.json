{"sha": "0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTRmMGNhZWUxZDZkMTZlNTdlYjFkM2Y1YWJmNTM5YjNiZWUzZjA=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-05-04T14:48:25Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-05-04T14:48:43Z"}, "message": "Don't trigger `field_reassign_with_default` in macros\n\nProducing a good suggestion for this lint is already hard when no macros\nare involved. With macros the lint message and the suggestion are just\nconfusing. Since both, producing a good suggestion and figuring out if\nthis pattern can be re-written inside a macro is nearly impossible, just\nbail out.", "tree": {"sha": "672d38ee04108211408d3340dbc2f35a01796f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672d38ee04108211408d3340dbc2f35a01796f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmCRXxwACgkQHKDfKvWd\naKUtnxAArmOXclZC0ngEbm9Yt1QAdxWlCAlPuTgKCyvIbQtGXUdyMjEsziS1Ky/9\nI6XeY2EyT79+XZMIR1VfRcYT7WVH+LAXASreErQalAb2DnnTh9SU9DK4B31VRVMa\nBKEbBup1Wi2DcW3CKVBiybouSnyPSSQe2L+kK3tRR6JLOpOvSDU06hQNuhlSY9ZB\n3K2QQ/7qkZpCTYcKU/Kat4iY59/IQfB7Q0p0BOGO1lUDCsFNkdNSTXwDh4o45Dql\nSmYw+cYJjU6GjghPtWLFg/9a1VC8cejBhmmpAPDPj3s+BFWOs8i5bOMkPSFsNHhm\nN9P2imY92uTLN3sDqAi/Pfhz8hqBnhSJHHOABZd4QSgxCyGrdujIIuLL7LDAC0DC\ntD9UroGVC0UdpL0l5FMKtaKV9YqmPu9AJzykpcf1TknNuv/K0RSxnxKC1UO85q4/\nM9pTppm9SIaN8W4gdHAlgE78O8oyzN9P436c4CUaYAI9WDmG3bzxE8gwPGoyYyyd\nBHmzyPkess0RuO0UZUr8EJg6kPwutrwiRfyMYI+wdNIEOCbW7kGsq3CyDKeyuaVp\ndamn0wAmzRp3bK0riFRlu7eaF6Ri/DUx/G/hIA6+qc2JOgN6rorzTiAIE5E892IH\n9e4lN0d7nK34t+zDaKaZ9+PVF7eu54XIszqB3La2k1miiVuV5sY=\n=buqc\n-----END PGP SIGNATURE-----", "payload": "tree 672d38ee04108211408d3340dbc2f35a01796f5c\nparent 5e3160ca0bfa9e96ab81a0812a79ec41ad535d14\nauthor flip1995 <philipp.krones@embecosm.com> 1620139705 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1620139723 +0200\n\nDon't trigger `field_reassign_with_default` in macros\n\nProducing a good suggestion for this lint is already hard when no macros\nare involved. With macros the lint message and the suggestion are just\nconfusing. Since both, producing a good suggestion and figuring out if\nthis pattern can be re-written inside a macro is nearly impossible, just\nbail out.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0", "html_url": "https://github.com/rust-lang/rust/commit/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e3160ca0bfa9e96ab81a0812a79ec41ad535d14", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3160ca0bfa9e96ab81a0812a79ec41ad535d14", "html_url": "https://github.com/rust-lang/rust/commit/5e3160ca0bfa9e96ab81a0812a79ec41ad535d14"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "947479db8f5d78e77fdc1b6fa60a08357fb609fa", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0", "patch": "@@ -7,7 +7,6 @@ use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -122,7 +121,7 @@ impl LateLintPass<'_> for Default {\n                 if let StmtKind::Local(local) = stmt.kind;\n                 if let Some(expr) = local.init;\n                 if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n-                if !in_external_macro(cx.tcx.sess, expr.span);\n+                if !in_macro(expr.span);\n                 // only take bindings to identifiers\n                 if let PatKind::Binding(_, binding_id, ident, _) = local.pat.kind;\n                 // only when assigning `... = Default::default()`"}, {"sha": "787053fb00064c861a75c37410ae26767ab2322e", "filename": "tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0/tests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0/tests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.rs?ref=0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0", "patch": "@@ -29,6 +29,21 @@ struct C {\n     i: Vec<i32>,\n     j: i64,\n }\n+\n+#[derive(Default)]\n+struct D {\n+    a: Option<i32>,\n+    b: Option<i32>,\n+}\n+\n+macro_rules! m {\n+    ($key:ident: $value:tt) => {{\n+        let mut data = $crate::D::default();\n+        data.$key = Some($value);\n+        data\n+    }};\n+}\n+\n /// Implements .next() that returns a different number each time.\n struct SideEffect(i32);\n \n@@ -143,6 +158,11 @@ fn main() {\n \n     let mut a: WrapperMulti<i32, i64> = Default::default();\n     a.i = 42;\n+\n+    // Don't lint in macros\n+    m! {\n+        a: 42\n+    };\n }\n \n mod m {"}, {"sha": "b56db08ec8a787f63c3edc31fde93178a0237982", "filename": "tests/ui/field_reassign_with_default.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0/tests%2Fui%2Ffield_reassign_with_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0/tests%2Fui%2Ffield_reassign_with_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.stderr?ref=0854f0caee1d6d16e57eb1d3f5abf539b3bee3f0", "patch": "@@ -1,108 +1,108 @@\n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:48:5\n+  --> $DIR/field_reassign_with_default.rs:63:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::field-reassign-with-default` implied by `-D warnings`\n note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:47:5\n+  --> $DIR/field_reassign_with_default.rs:62:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:88:5\n+  --> $DIR/field_reassign_with_default.rs:103:5\n    |\n LL |     a.j = 43;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { j: 43, i: 42 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:87:5\n+  --> $DIR/field_reassign_with_default.rs:102:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:93:5\n+  --> $DIR/field_reassign_with_default.rs:108:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, j: 44 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:92:5\n+  --> $DIR/field_reassign_with_default.rs:107:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:99:5\n+  --> $DIR/field_reassign_with_default.rs:114:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:98:5\n+  --> $DIR/field_reassign_with_default.rs:113:5\n    |\n LL |     let mut a = A::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:109:5\n+  --> $DIR/field_reassign_with_default.rs:124:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:108:5\n+  --> $DIR/field_reassign_with_default.rs:123:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:113:5\n+  --> $DIR/field_reassign_with_default.rs:128:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `main::A { i: Default::default(), j: 45 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:112:5\n+  --> $DIR/field_reassign_with_default.rs:127:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:135:5\n+  --> $DIR/field_reassign_with_default.rs:150:5\n    |\n LL |     a.i = vec![1];\n    |     ^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `C { i: vec![1], ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:134:5\n+  --> $DIR/field_reassign_with_default.rs:149:5\n    |\n LL |     let mut a: C = C::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:142:5\n+  --> $DIR/field_reassign_with_default.rs:157:5\n    |\n LL |     a.i = true;\n    |     ^^^^^^^^^^^\n    |\n note: consider initializing the variable with `Wrapper::<bool> { i: true }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:141:5\n+  --> $DIR/field_reassign_with_default.rs:156:5\n    |\n LL |     let mut a: Wrapper<bool> = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:145:5\n+  --> $DIR/field_reassign_with_default.rs:160:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n note: consider initializing the variable with `WrapperMulti::<i32, i64> { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:144:5\n+  --> $DIR/field_reassign_with_default.rs:159:5\n    |\n LL |     let mut a: WrapperMulti<i32, i64> = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}