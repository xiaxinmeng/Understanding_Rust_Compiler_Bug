{"sha": "fa7582d1dd37d0bdb08033bcb810274084bc26ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzU4MmQxZGQzN2QwYmRiMDgwMzNiY2I4MTAyNzQwODRiYzI2Y2E=", "commit": {"author": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-04-27T17:24:45Z"}, "committer": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-05-04T07:51:08Z"}, "message": "Replace `NodeId` variant of `read`", "tree": {"sha": "f7967eb6cb8b536d8a1d3501de9d2ea38dfe18d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7967eb6cb8b536d8a1d3501de9d2ea38dfe18d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa7582d1dd37d0bdb08033bcb810274084bc26ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7582d1dd37d0bdb08033bcb810274084bc26ca", "html_url": "https://github.com/rust-lang/rust/commit/fa7582d1dd37d0bdb08033bcb810274084bc26ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa7582d1dd37d0bdb08033bcb810274084bc26ca/comments", "author": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78b53db2868eaad41ac884989f7b470f352c65b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b53db2868eaad41ac884989f7b470f352c65b2", "html_url": "https://github.com/rust-lang/rust/commit/78b53db2868eaad41ac884989f7b470f352c65b2"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "56c14faef2302d7aa0bf3874d413704d5e21588b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa7582d1dd37d0bdb08033bcb810274084bc26ca/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7582d1dd37d0bdb08033bcb810274084bc26ca/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fa7582d1dd37d0bdb08033bcb810274084bc26ca", "patch": "@@ -190,13 +190,7 @@ impl<'hir> Map<'hir> {\n     /// otherwise have had access to those contents, and hence needs a\n     /// read recorded). If the function just returns a DefId or\n     /// NodeId, no actual content was returned, so no read is needed.\n-    pub fn read(&self, id: NodeId) {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.read_by_hir_id(hir_id);\n-    }\n-\n-    // FIXME(@ljedrz): replace the NodeId variant\n-    pub fn read_by_hir_id(&self, hir_id: HirId) {\n+    pub fn read(&self, hir_id: HirId) {\n         if let Some(entry) = self.map.get(&hir_id) {\n             self.dep_graph.read_index(entry.dep_node);\n         } else {\n@@ -402,23 +396,23 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem {\n-        self.read_by_hir_id(id.hir_id);\n+        self.read(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n         self.forest.krate.trait_item(id)\n     }\n \n     pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem {\n-        self.read_by_hir_id(id.hir_id);\n+        self.read(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n         self.forest.krate.impl_item(id)\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body {\n-        self.read_by_hir_id(id.hir_id);\n+        self.read(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n@@ -551,7 +545,7 @@ impl<'hir> Map<'hir> {\n     pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId)\n     {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n-        self.read_by_hir_id(hir_id);\n+        self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {\n             Node::Item(&Item {\n                 span,\n@@ -566,13 +560,15 @@ impl<'hir> Map<'hir> {\n     pub fn visit_item_likes_in_module<V>(&self, module: DefId, visitor: &mut V)\n         where V: ItemLikeVisitor<'hir>\n     {\n-        let node_id = self.as_local_node_id(module).unwrap();\n+        let hir_id = self.as_local_hir_id(module).unwrap();\n \n         // Read the module so we'll be re-executed if new items\n         // appear immediately under in the module. If some new item appears\n         // in some nested item in the module, we'll be re-executed due to reads\n         // in the expect_* calls the loops below\n-        self.read(node_id);\n+        self.read(hir_id);\n+\n+        let node_id = self.hir_to_node_id[&hir_id];\n \n         let module = &self.forest.krate.modules[&node_id];\n \n@@ -650,7 +646,7 @@ impl<'hir> Map<'hir> {\n             }\n         });\n         if result.is_some() {\n-            self.read_by_hir_id(hir_id);\n+            self.read(hir_id);\n         }\n         result\n     }\n@@ -884,7 +880,7 @@ impl<'hir> Map<'hir> {\n             if let Entry {\n                 node: Node::Item(Item { node: ItemKind::ForeignMod(ref nm), .. }), .. } = entry\n             {\n-                self.read_by_hir_id(hir_id); // reveals some of the content of a node\n+                self.read(hir_id); // reveals some of the content of a node\n                 return nm.abi;\n             }\n         }\n@@ -992,7 +988,7 @@ impl<'hir> Map<'hir> {\n \n     // FIXME(@ljedrz): replace the NodeId variant\n     pub fn attrs_by_hir_id(&self, id: HirId) -> &'hir [ast::Attribute] {\n-        self.read_by_hir_id(id); // reveals attributes on the node\n+        self.read(id); // reveals attributes on the node\n         let attrs = match self.find_entry(id).map(|entry| entry.node) {\n             Some(Node::Local(l)) => Some(&l.attrs[..]),\n             Some(Node::Item(i)) => Some(&i.attrs[..]),\n@@ -1037,7 +1033,7 @@ impl<'hir> Map<'hir> {\n \n     // FIXME(@ljedrz): replace the NodeId variant\n     pub fn span_by_hir_id(&self, hir_id: HirId) -> Span {\n-        self.read_by_hir_id(hir_id); // reveals span from node\n+        self.read(hir_id); // reveals span from node\n         match self.find_entry(hir_id).map(|entry| entry.node) {\n             Some(Node::Item(item)) => item.span,\n             Some(Node::ForeignItem(foreign_item)) => foreign_item.span,"}, {"sha": "b77feeee06f577fa3ea3fdde1ff9fd5d4ca543b2", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa7582d1dd37d0bdb08033bcb810274084bc26ca/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7582d1dd37d0bdb08033bcb810274084bc26ca/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=fa7582d1dd37d0bdb08033bcb810274084bc26ca", "patch": "@@ -185,7 +185,7 @@ macro_rules! read_hir {\n     ($t:ty) => {\n         impl<'tcx> DepGraphRead for &'tcx $t {\n             fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n-                tcx.hir().read_by_hir_id(self.hir_id);\n+                tcx.hir().read(self.hir_id);\n             }\n         }\n     }\n@@ -219,6 +219,6 @@ pub struct FromId<T>(pub hir::HirId, pub T);\n \n impl<T> DepGraphRead for FromId<T> {\n     fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n-        tcx.hir().read_by_hir_id(self.0);\n+        tcx.hir().read(self.0);\n     }\n }"}]}