{"sha": "abfde39b0e904cf39d3fbf392d747f4f168017ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZmRlMzliMGU5MDRjZjM5ZDNmYmYzOTJkNzQ3ZjRmMTY4MDE3ZWM=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-03-06T14:58:34Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-03-09T15:23:28Z"}, "message": "borrowck: classify expressions as assignees, uses or both\n\n- Repurposes `MoveData.assignee_ids` to mean only `=` but not `+=`, so\n  that borrowck effectively classifies all expressions into assignees,\n  uses or both.\n- Removes two `span_err` in liveness analysis, which are now borrowck's\n  responsibilities.\n\nCloses #12527.", "tree": {"sha": "6b21be65a51483cd0dcdf0b01931a0fa55f95526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b21be65a51483cd0dcdf0b01931a0fa55f95526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abfde39b0e904cf39d3fbf392d747f4f168017ec", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abfde39b0e904cf39d3fbf392d747f4f168017ec", "html_url": "https://github.com/rust-lang/rust/commit/abfde39b0e904cf39d3fbf392d747f4f168017ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abfde39b0e904cf39d3fbf392d747f4f168017ec/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f1d68439dcfd509eaca29887afa97f22938373", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f1d68439dcfd509eaca29887afa97f22938373", "html_url": "https://github.com/rust-lang/rust/commit/62f1d68439dcfd509eaca29887afa97f22938373"}], "stats": {"total": 209, "additions": 119, "deletions": 90}, "files": [{"sha": "6dd7ae31c9d386166311de26a7ef625fd406bfde", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -94,7 +94,22 @@ pub fn gather_assignment(bccx: &BorrowckCtxt,\n                              assignee_loan_path,\n                              assignment_id,\n                              assignment_span,\n-                             assignee_id);\n+                             assignee_id,\n+                             false);\n+}\n+\n+pub fn gather_move_and_assignment(bccx: &BorrowckCtxt,\n+                                  move_data: &MoveData,\n+                                  assignment_id: ast::NodeId,\n+                                  assignment_span: Span,\n+                                  assignee_loan_path: @LoanPath,\n+                                  assignee_id: ast::NodeId) {\n+    move_data.add_assignment(bccx.tcx,\n+                             assignee_loan_path,\n+                             assignment_id,\n+                             assignment_span,\n+                             assignee_id,\n+                             true);\n }\n \n fn check_is_legal_to_move_from(bccx: &BorrowckCtxt,"}, {"sha": "e50d6da378af1e81a738b9146b3e7299fd4fbadc", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -214,20 +214,19 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n         visit::walk_expr(this, ex, ());\n       }\n \n-      ast::ExprAssign(l, _) | ast::ExprAssignOp(_, l, _) => {\n-          let l_cmt = this.bccx.cat_expr(l);\n-          match opt_loan_path(l_cmt) {\n-              Some(l_lp) => {\n-                  gather_moves::gather_assignment(this.bccx, &this.move_data,\n-                                                  ex.id, ex.span,\n-                                                  l_lp, l.id);\n-              }\n-              None => {\n-                  // This can occur with e.g. `*foo() = 5`.  In such\n-                  // cases, there is no need to check for conflicts\n-                  // with moves etc, just ignore.\n-              }\n-          }\n+      ast::ExprAssign(l, _) => {\n+          with_assignee_loan_path(\n+              this.bccx, l,\n+              |lp| gather_moves::gather_assignment(this.bccx, &this.move_data,\n+                                                   ex.id, ex.span, lp, l.id));\n+          visit::walk_expr(this, ex, ());\n+      }\n+\n+      ast::ExprAssignOp(_, l, _) => {\n+          with_assignee_loan_path(\n+              this.bccx, l,\n+              |lp| gather_moves::gather_move_and_assignment(this.bccx, &this.move_data,\n+                                                            ex.id, ex.span, lp, l.id));\n           visit::walk_expr(this, ex, ());\n       }\n \n@@ -288,17 +287,10 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n \n       ast::ExprInlineAsm(ref ia) => {\n           for &(_, out) in ia.outputs.iter() {\n-              let out_cmt = this.bccx.cat_expr(out);\n-              match opt_loan_path(out_cmt) {\n-                  Some(out_lp) => {\n-                      gather_moves::gather_assignment(this.bccx, &this.move_data,\n-                                                      ex.id, ex.span,\n-                                                      out_lp, out.id);\n-                  }\n-                  None => {\n-                      // See the comment for ExprAssign.\n-                  }\n-              }\n+              with_assignee_loan_path(\n+                  this.bccx, out,\n+                  |lp| gather_moves::gather_assignment(this.bccx, &this.move_data,\n+                                                       ex.id, ex.span, lp, out.id));\n           }\n           visit::walk_expr(this, ex, ());\n       }\n@@ -309,6 +301,18 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n     }\n }\n \n+fn with_assignee_loan_path(bccx: &BorrowckCtxt, expr: &ast::Expr, op: |@LoanPath|) {\n+    let cmt = bccx.cat_expr(expr);\n+    match opt_loan_path(cmt) {\n+        Some(lp) => op(lp),\n+        None => {\n+            // This can occur with e.g. `*foo() = 5`.  In such\n+            // cases, there is no need to check for conflicts\n+            // with moves etc, just ignore.\n+        }\n+    }\n+}\n+\n impl<'a> GatherLoanCtxt<'a> {\n     pub fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n "}, {"sha": "654203bf0776bf0a3e682d81898d6c377aa9d019", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -535,7 +535,7 @@ impl BorrowckCtxt {\n             move_data::Declared => {\n                 self.tcx.sess.span_err(\n                     use_span,\n-                    format!(\"{} of possibly uninitialized value: `{}`\",\n+                    format!(\"{} of possibly uninitialized variable: `{}`\",\n                          verb,\n                          self.loan_path_to_str(lp)));\n             }"}, {"sha": "5f4d5b43231c880c00be50390d7216167a5914b5", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -33,23 +33,25 @@ use util::ppaux::Repr;\n \n pub struct MoveData {\n     /// Move paths. See section \"Move paths\" in `doc.rs`.\n-    paths: RefCell<Vec<MovePath> >,\n+    paths: RefCell<Vec<MovePath>>,\n \n     /// Cache of loan path to move path index, for easy lookup.\n     path_map: RefCell<HashMap<@LoanPath, MovePathIndex>>,\n \n     /// Each move or uninitialized variable gets an entry here.\n-    moves: RefCell<Vec<Move> >,\n+    moves: RefCell<Vec<Move>>,\n \n     /// Assignments to a variable, like `x = foo`. These are assigned\n     /// bits for dataflow, since we must track them to ensure that\n     /// immutable variables are assigned at most once along each path.\n-    var_assignments: RefCell<Vec<Assignment> >,\n+    var_assignments: RefCell<Vec<Assignment>>,\n \n     /// Assignments to a path, like `x.f = foo`. These are not\n     /// assigned dataflow bits, but we track them because they still\n     /// kill move bits.\n-    path_assignments: RefCell<Vec<Assignment> >,\n+    path_assignments: RefCell<Vec<Assignment>>,\n+\n+    /// Assignments to a variable or path, like `x = foo`, but not `x += foo`.\n     assignee_ids: RefCell<HashSet<ast::NodeId>>,\n }\n \n@@ -392,7 +394,8 @@ impl MoveData {\n                           lp: @LoanPath,\n                           assign_id: ast::NodeId,\n                           span: Span,\n-                          assignee_id: ast::NodeId) {\n+                          assignee_id: ast::NodeId,\n+                          is_also_move: bool) {\n         /*!\n          * Adds a new record for an assignment to `lp` that occurs at\n          * location `id` with the given `span`.\n@@ -403,7 +406,7 @@ impl MoveData {\n \n         let path_index = self.move_path(tcx, lp);\n \n-        {\n+        if !is_also_move {\n             let mut assignee_ids = self.assignee_ids.borrow_mut();\n             assignee_ids.get().insert(assignee_id);\n         }"}, {"sha": "02a947a0ddc7af8aff406af13d47f9e8e05a95a3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 54, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -1468,28 +1468,14 @@ impl Liveness {\n \n fn check_local(this: &mut Liveness, local: &Local) {\n     match local.init {\n-      Some(_) => {\n-        this.warn_about_unused_or_dead_vars_in_pat(local.pat);\n-      }\n-      None => {\n-\n-        // No initializer: the variable might be unused; if not, it\n-        // should not be live at this point.\n-\n-        debug!(\"check_local() with no initializer\");\n-        this.pat_bindings(local.pat, |ln, var, sp, id| {\n-            if !this.warn_about_unused(sp, id, ln, var) {\n-                match this.live_on_exit(ln, var) {\n-                  None => { /* not live: good */ }\n-                  Some(lnk) => {\n-                    this.report_illegal_read(\n-                        local.span, lnk, var,\n-                        PossiblyUninitializedVariable);\n-                  }\n-                }\n-            }\n-        })\n-      }\n+        Some(_) => {\n+            this.warn_about_unused_or_dead_vars_in_pat(local.pat);\n+        },\n+        None => {\n+            this.pat_bindings(local.pat, |ln, var, sp, id| {\n+                this.warn_about_unused(sp, id, ln, var);\n+            })\n+        }\n     }\n \n     visit::walk_local(this, local, ());\n@@ -1644,38 +1630,6 @@ impl Liveness {\n        }\n     }\n \n-    pub fn report_illegal_read(&self,\n-                               chk_span: Span,\n-                               lnk: LiveNodeKind,\n-                               var: Variable,\n-                               rk: ReadKind) {\n-        let msg = match rk {\n-            PossiblyUninitializedVariable => \"possibly uninitialized \\\n-                                              variable\",\n-            PossiblyUninitializedField => \"possibly uninitialized field\",\n-            MovedValue => \"moved value\",\n-            PartiallyMovedValue => \"partially moved value\"\n-        };\n-        let name = self.ir.variable_name(var);\n-        match lnk {\n-          FreeVarNode(span) => {\n-            self.tcx.sess.span_err(\n-                span,\n-                format!(\"capture of {}: `{}`\", msg, name));\n-          }\n-          ExprNode(span) => {\n-            self.tcx.sess.span_err(\n-                span,\n-                format!(\"use of {}: `{}`\", msg, name));\n-          }\n-          ExitNode | VarDefNode(_) => {\n-            self.tcx.sess.span_bug(\n-                chk_span,\n-                format!(\"illegal reader: {:?}\", lnk));\n-          }\n-        }\n-    }\n-\n     pub fn should_warn(&self, var: Variable) -> Option<~str> {\n         let name = self.ir.variable_name(var);\n         if name.len() == 0 || name[0] == ('_' as u8) { None } else { Some(name) }"}, {"sha": "65750eb926b450674d8385c03e785d795e787cd8", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -19,7 +19,7 @@ fn foo(x: int) { info!(\"{}\", x); }\n pub fn main() {\n     let x: int;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x)); //~ ERROR use of possibly uninitialized value: `x`\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x)); //~ ERROR use of possibly uninitialized variable: `x`\n     }\n     foo(x);\n }"}, {"sha": "134390d0b59272206b66c585a213b3828ddf6e4f", "filename": "src/test/compile-fail/borrowck-and-init.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-and-init.rs"}, {"sha": "fc865e271e39c62a35e3e6bc55a37587dcc4cd5a", "filename": "src/test/compile-fail/borrowck-block-unint.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -11,7 +11,7 @@\n fn force(f: ||) { f(); }\n fn main() {\n     let x: int;\n-    force(|| {\n-        info!(\"{}\", x); //~ ERROR capture of possibly uninitialized variable: `x`\n+    force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n+        info!(\"{}\", x);\n     });\n }", "previous_filename": "src/test/compile-fail/liveness-block-unint.rs"}, {"sha": "accb907697430e70588615c4aa56d52960d6e1bf", "filename": "src/test/compile-fail/borrowck-break-uninit-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-break-uninit-2.rs"}, {"sha": "d49e79d2c64c39bf2846c975672c2d1c8b290804", "filename": "src/test/compile-fail/borrowck-break-uninit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-break-uninit.rs"}, {"sha": "8dc590b47f0c61d9306af8f0cde0f9a00a6b87b2", "filename": "src/test/compile-fail/borrowck-if-no-else.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-if-no-else.rs"}, {"sha": "55fb8222634ccc61a04aa440222a146925df933d", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-if-with-else.rs"}, {"sha": "d759a5738bd22703b7187705b8dd3fdca5511201", "filename": "src/test/compile-fail/borrowck-init-in-called-fn-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-init-in-called-fn-expr.rs"}, {"sha": "f6bb2f5428370893c8394bb9a2ee1a56b4eb6790", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs"}, {"sha": "97fc2b4d44c379e0c6064ddaa0de2446da8b581e", "filename": "src/test/compile-fail/borrowck-init-in-fru.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-init-in-fru.rs"}, {"sha": "cbe805551c2007011d5c4eff9d379b549562cb78", "filename": "src/test/compile-fail/borrowck-init-op-equal.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-init-op-equal.rs"}, {"sha": "6e813809f03dc2d41e66b89817079882307998de", "filename": "src/test/compile-fail/borrowck-init-plus-equal.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-init-plus-equal.rs"}, {"sha": "f878afce9691670aa83bd1ef4d863dafc7010f54", "filename": "src/test/compile-fail/borrowck-or-init.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-or-init.rs"}, {"sha": "6558bc579685a549b770a610c1dd09fa05caf1b2", "filename": "src/test/compile-fail/borrowck-return.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-return.rs"}, {"sha": "a828b1d6b9f52e0b1850a1d1c2a3f6a26f787992", "filename": "src/test/compile-fail/borrowck-uninit-after-item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-uninit-after-item.rs"}, {"sha": "b5e462e592a76f9440f8f3359b0efddbdbf2c1bd", "filename": "src/test/compile-fail/borrowck-uninit-in-assignop.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that the use of uninitialized variable in assignment operator\n+// expression is detected.\n+\n+pub fn main() {\n+    let x: int;\n+    x += 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x -= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x *= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x /= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x %= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x ^= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x &= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x |= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x <<= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+\n+    let x: int;\n+    x >>= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+}"}, {"sha": "a6ce736c89be6a98e76a7a1622a5b08f976c020a", "filename": "src/test/compile-fail/borrowck-uninit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-uninit.rs"}, {"sha": "3ced98592400ee24692a8cea022465d00579e0f7", "filename": "src/test/compile-fail/borrowck-use-in-index-lvalue.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -10,6 +10,10 @@\n \n fn test() {\n     let w: ~[int];\n+    w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n+              //~^ ERROR cannot assign to immutable vec content `w[..]`\n+\n+    let mut w: ~[int];\n     w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n }\n ", "previous_filename": "src/test/compile-fail/liveness-use-in-index-lvalue.rs"}, {"sha": "e5d4b6ef48cd61f2ea86d574f6326aa8144e83eb", "filename": "src/test/compile-fail/borrowck-while-break.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-while-break.rs"}, {"sha": "27d42d666ea1d3aa3df730ae66ba9dfefe045b05", "filename": "src/test/compile-fail/borrowck-while-cond.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while-cond.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-while-cond.rs"}, {"sha": "b904fd53d7279cf302348a3da8672b3bcfe19324", "filename": "src/test/compile-fail/borrowck-while.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "previous_filename": "src/test/compile-fail/liveness-while.rs"}, {"sha": "33fc094abbe75b5586374bf54a1faa31b62d6266", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfde39b0e904cf39d3fbf392d747f4f168017ec/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=abfde39b0e904cf39d3fbf392d747f4f168017ec", "patch": "@@ -23,6 +23,11 @@ fn f1b(x: &mut int) {\n #[allow(unused_variable)]\n fn f1c(x: int) {}\n \n+fn f1d() {\n+    let x: int;\n+    //~^ ERROR unused variable: `x`\n+}\n+\n fn f2() {\n     let x = 3;\n     //~^ ERROR unused variable: `x`"}]}