{"sha": "ae4b5a21e62fe30a924c45e2734880c4de844446", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNGI1YTIxZTYyZmUzMGE5MjRjNDVlMjczNDg4MGM0ZGU4NDQ0NDY=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-11-06T21:51:44Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-01-16T05:24:38Z"}, "message": "Add `as_rchunks` (and friends) to slices", "tree": {"sha": "55a4ec0ac1e24477ee364ee40352d8c98aaa4670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a4ec0ac1e24477ee364ee40352d8c98aaa4670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae4b5a21e62fe30a924c45e2734880c4de844446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4b5a21e62fe30a924c45e2734880c4de844446", "html_url": "https://github.com/rust-lang/rust/commit/ae4b5a21e62fe30a924c45e2734880c4de844446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae4b5a21e62fe30a924c45e2734880c4de844446/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c869d34ae2d87d21db9892d4dc088639bcbe041", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c869d34ae2d87d21db9892d4dc088639bcbe041", "html_url": "https://github.com/rust-lang/rust/commit/6c869d34ae2d87d21db9892d4dc088639bcbe041"}], "stats": {"total": 193, "additions": 186, "deletions": 7}, "files": [{"sha": "f31c7633c5184c489d84217a59b1a9dcb2646678", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 154, "deletions": 7, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/ae4b5a21e62fe30a924c45e2734880c4de844446/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4b5a21e62fe30a924c45e2734880c4de844446/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=ae4b5a21e62fe30a924c45e2734880c4de844446", "patch": "@@ -888,6 +888,46 @@ impl<T> [T] {\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// assuming that there's no remainder.\n+    ///\n+    /// # Safety\n+    ///\n+    /// This may only be called when\n+    /// - The slice splits exactly into `N`-element chunks (aka `self.len() % N == 0`).\n+    /// - `N != 0`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let slice: &[char] = &['l', 'o', 'r', 'e', 'm', '!'];\n+    /// let chunks: &[[char; 1]] =\n+    ///     // SAFETY: 1-element chunks never have remainder\n+    ///     unsafe { slice.as_chunks_unchecked() };\n+    /// assert_eq!(chunks, &[['l'], ['o'], ['r'], ['e'], ['m'], ['!']]);\n+    /// let chunks: &[[char; 3]] =\n+    ///     // SAFETY: The slice length (6) is a multiple of 3\n+    ///     unsafe { slice.as_chunks_unchecked() };\n+    /// assert_eq!(chunks, &[['l', 'o', 'r'], ['e', 'm', '!']]);\n+    ///\n+    /// // These would be unsound:\n+    /// // let chunks: &[[_; 5]] = slice.as_chunks_unchecked() // The slice length is not a multiple of 5\n+    /// // let chunks: &[[_; 0]] = slice.as_chunks_unchecked() // Zero-length chunks are never allowed\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub unsafe fn as_chunks_unchecked<const N: usize>(&self) -> &[[T; N]] {\n+        debug_assert_ne!(N, 0);\n+        debug_assert_eq!(self.len() % N, 0);\n+        let new_len =\n+            // SAFETY: Our precondition is exactly what's needed to call this\n+            unsafe { crate::intrinsics::exact_div(self.len(), N) };\n+        // SAFETY: We cast a slice of `new_len * N` elements into\n+        // a slice of `new_len` many `N` elements chunks.\n+        unsafe { from_raw_parts(self.as_ptr().cast(), new_len) }\n+    }\n+\n     /// Splits the slice into a slice of `N`-element arrays,\n     /// starting at the beginning of the slice,\n     /// and a remainder slice with length strictly less than `N`.\n@@ -912,12 +952,42 @@ impl<T> [T] {\n         assert_ne!(N, 0);\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n-        // SAFETY: We cast a slice of `len * N` elements into\n-        // a slice of `len` many `N` elements chunks.\n-        let array_slice: &[[T; N]] = unsafe { from_raw_parts(multiple_of_n.as_ptr().cast(), len) };\n+        // SAFETY: We already panicked for zero, and ensured by construction\n+        // that the length of the subslice is a multiple of N.\n+        let array_slice = unsafe { multiple_of_n.as_chunks_unchecked() };\n         (array_slice, remainder)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the end of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let (remainder, chunks) = slice.as_rchunks();\n+    /// assert_eq!(remainder, &['l']);\n+    /// assert_eq!(chunks, &[['o', 'r'], ['e', 'm']]);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n+        // SAFETY: We already panicked for zero, and ensured by construction\n+        // that the length of the subslice is a multiple of N.\n+        let array_slice = unsafe { multiple_of_n.as_chunks_unchecked() };\n+        (remainder, array_slice)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///\n@@ -952,6 +1022,48 @@ impl<T> [T] {\n         ArrayChunks::new(self)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// assuming that there's no remainder.\n+    ///\n+    /// # Safety\n+    ///\n+    /// This may only be called when\n+    /// - The slice splits exactly into `N`-element chunks (aka `self.len() % N == 0`).\n+    /// - `N != 0`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let slice: &mut [char] = &mut ['l', 'o', 'r', 'e', 'm', '!'];\n+    /// let chunks: &mut [[char; 1]] =\n+    ///     // SAFETY: 1-element chunks never have remainder\n+    ///     unsafe { slice.as_chunks_mut_unchecked() };\n+    /// chunks[0] = ['L'];\n+    /// assert_eq!(chunks, &[['L'], ['o'], ['r'], ['e'], ['m'], ['!']]);\n+    /// let chunks: &mut [[char; 3]] =\n+    ///     // SAFETY: The slice length (6) is a multiple of 3\n+    ///     unsafe { slice.as_chunks_mut_unchecked() };\n+    /// chunks[1] = ['a', 'x', '?'];\n+    /// assert_eq!(slice, &['L', 'o', 'r', 'a', 'x', '?']);\n+    ///\n+    /// // These would be unsound:\n+    /// // let chunks: &[[_; 5]] = slice.as_chunks_mut_unchecked() // The slice length is not a multiple of 5\n+    /// // let chunks: &[[_; 0]] = slice.as_chunks_mut_unchecked() // Zero-length chunks are never allowed\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub unsafe fn as_chunks_mut_unchecked<const N: usize>(&mut self) -> &mut [[T; N]] {\n+        debug_assert_ne!(N, 0);\n+        debug_assert_eq!(self.len() % N, 0);\n+        let new_len =\n+            // SAFETY: Our precondition is exactly what's needed to call this\n+            unsafe { crate::intrinsics::exact_div(self.len(), N) };\n+        // SAFETY: We cast a slice of `new_len * N` elements into\n+        // a slice of `new_len` many `N` elements chunks.\n+        unsafe { from_raw_parts_mut(self.as_mut_ptr().cast(), new_len) }\n+    }\n+\n     /// Splits the slice into a slice of `N`-element arrays,\n     /// starting at the beginning of the slice,\n     /// and a remainder slice with length strictly less than `N`.\n@@ -982,13 +1094,48 @@ impl<T> [T] {\n         assert_ne!(N, 0);\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n-        let array_slice: &mut [[T; N]] =\n-            // SAFETY: We cast a slice of `len * N` elements into\n-            // a slice of `len` many `N` elements chunks.\n-            unsafe { from_raw_parts_mut(multiple_of_n.as_mut_ptr().cast(), len) };\n+        // SAFETY: We already panicked for zero, and ensured by construction\n+        // that the length of the subslice is a multiple of N.\n+        let array_slice = unsafe { multiple_of_n.as_chunks_mut_unchecked() };\n         (array_slice, remainder)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the end of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let v = &mut [0, 0, 0, 0, 0];\n+    /// let mut count = 1;\n+    ///\n+    /// let (remainder, chunks) = v.as_rchunks_mut();\n+    /// remainder[0] = 9;\n+    /// for chunk in chunks {\n+    ///     *chunk = [count; 2];\n+    ///     count += 1;\n+    /// }\n+    /// assert_eq!(v, &[9, 1, 1, 2, 2]);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n+        // SAFETY: We already panicked for zero, and ensured by construction\n+        // that the length of the subslice is a multiple of N.\n+        let array_slice = unsafe { multiple_of_n.as_chunks_mut_unchecked() };\n+        (remainder, array_slice)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///"}, {"sha": "7b857879eea6c87ca1f52017fc450a68d1947022", "filename": "src/test/codegen/slice-as_chunks.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae4b5a21e62fe30a924c45e2734880c4de844446/src%2Ftest%2Fcodegen%2Fslice-as_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4b5a21e62fe30a924c45e2734880c4de844446/src%2Ftest%2Fcodegen%2Fslice-as_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-as_chunks.rs?ref=ae4b5a21e62fe30a924c45e2734880c4de844446", "patch": "@@ -0,0 +1,32 @@\n+// no-system-llvm\n+// compile-flags: -O\n+// only-64bit (because the LLVM type of i64 for usize shows up)\n+\n+#![crate_type = \"lib\"]\n+#![feature(slice_as_chunks)]\n+\n+// CHECK-LABEL: @chunks4\n+#[no_mangle]\n+pub fn chunks4(x: &[u8]) -> &[[u8; 4]] {\n+    // CHECK-NEXT: start:\n+    // CHECK-NEXT: lshr i64 %x.1, 2\n+    // CHECK-NOT: shl\n+    // CHECK-NOT: mul\n+    // CHECK-NOT: udiv\n+    // CHECK-NOT: urem\n+    // CHECK: ret\n+    x.as_chunks().0\n+}\n+\n+// CHECK-LABEL: @chunks4_with_remainder\n+#[no_mangle]\n+pub fn chunks4_with_remainder(x: &[u8]) -> (&[[u8; 4]], &[u8]) {\n+    // CHECK: and i64 %x.1, -4\n+    // CHECK: and i64 %x.1, 3\n+    // CHECK: lshr exact\n+    // CHECK-NOT: mul\n+    // CHECK-NOT: udiv\n+    // CHECK-NOT: urem\n+    // CHECK: ret\n+    x.as_chunks()\n+}"}]}