{"sha": "6c4d5d989684da657e51629c01ca0667a4a90937", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGQ1ZDk4OTY4NGRhNjU3ZTUxNjI5YzAxY2EwNjY3YTRhOTA5Mzc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-24T10:24:24Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-24T10:24:24Z"}, "message": "improve normalize cycle error", "tree": {"sha": "b48407dd9ac3fba16f98380199828e00903a8870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b48407dd9ac3fba16f98380199828e00903a8870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4d5d989684da657e51629c01ca0667a4a90937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4d5d989684da657e51629c01ca0667a4a90937", "html_url": "https://github.com/rust-lang/rust/commit/6c4d5d989684da657e51629c01ca0667a4a90937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4d5d989684da657e51629c01ca0667a4a90937/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3", "html_url": "https://github.com/rust-lang/rust/commit/d7ecc8c9bc2727579b22f155f1b7da42b6eee8e3"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "1cc5c6e6f4ae7c48c62e75eda5b0be000d6068c6", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=6c4d5d989684da657e51629c01ca0667a4a90937", "patch": "@@ -1117,7 +1117,7 @@ rustc_queries! {\n         query normalize_generic_arg_after_erasing_regions(\n             goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n         ) -> GenericArg<'tcx> {\n-            desc { \"normalizing `{:?}`\", goal }\n+            desc { \"normalizing `{}`\", goal.value }\n         }\n \n         query implied_outlives_bounds("}, {"sha": "2f0a57c59eb14abc0d8672ca7b9ee5f19be510ce", "filename": "src/librustc/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs?ref=6c4d5d989684da657e51629c01ca0667a4a90937", "patch": "@@ -94,14 +94,12 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx\n-            .normalize_generic_arg_after_erasing_regions(self.param_env.and(ty.into()))\n-            .expect_ty()\n+        let arg = self.param_env.and(ty.into());\n+        self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_ty()\n     }\n \n     fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        self.tcx\n-            .normalize_generic_arg_after_erasing_regions(self.param_env.and(c.into()))\n-            .expect_const()\n+        let arg = self.param_env.and(c.into());\n+        self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_const()\n     }\n }"}, {"sha": "9fb1bbebc96100847ee3e47bcf85f6c4c376743e", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs?ref=6c4d5d989684da657e51629c01ca0667a4a90937", "patch": "@@ -1,9 +1,9 @@\n // build-fail\n+//~^ ERROR cycle detected when normalizing `<() as Tr>::A`\n \n // Cyclic assoc. const defaults don't error unless *used*\n trait Tr {\n     const A: u8 = Self::B;\n-    //~^ ERROR cycle detected when const-evaluating + checking `Tr::A`\n \n     const B: u8 = Self::A;\n }"}, {"sha": "6b2fbe5be4e30f69b867b6377841e201f934bc09", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr?ref=6c4d5d989684da657e51629c01ca0667a4a90937", "patch": "@@ -1,30 +1,42 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n-  --> $DIR/defaults-cyclic-fail.rs:5:5\n+error[E0391]: cycle detected when normalizing `<() as Tr>::A`\n+   |\n+note: ...which requires const-evaluating + checking `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n+LL |     const A: u8 = Self::B;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Tr::A`...\n-  --> $DIR/defaults-cyclic-fail.rs:5:19\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n-   |                   ^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires normalizing `<() as Tr>::B`...\n+note: ...which requires const-evaluating + checking `Tr::B`...\n+  --> $DIR/defaults-cyclic-fail.rs:8:5\n+   |\n+LL |     const B: u8 = Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Tr::B`...\n-  --> $DIR/defaults-cyclic-fail.rs:8:19\n+  --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n-   |                   ^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n note: cycle used when const-evaluating `main`\n-  --> $DIR/defaults-cyclic-fail.rs:16:16\n+  --> $DIR/defaults-cyclic-fail.rs:14:1\n    |\n-LL |     assert_eq!(<() as Tr>::A, 0);\n-   |                ^^^^^^^^^^^^^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aac3622c6de408f16603ccb1290392be09f39299", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c4d5d989684da657e51629c01ca0667a4a90937/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=6c4d5d989684da657e51629c01ca0667a4a90937", "patch": "@@ -25,7 +25,7 @@ note: ...which requires const-evaluating + checking `std::intrinsics::size_of`..\n LL |     pub fn size_of<T>() -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n-   = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n+   = note: ...which requires normalizing `[u8; _]`...\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n   --> $DIR/const-size_of-cycle.rs:7:1"}]}