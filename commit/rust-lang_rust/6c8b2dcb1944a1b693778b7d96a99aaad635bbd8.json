{"sha": "6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOGIyZGNiMTk0NGExYjY5Mzc3OGI3ZDk2YTk5YWFhZDYzNWJiZDg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-24T21:18:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-30T03:16:15Z"}, "message": "Account for all item kinds when collecting and gateing `_` in item defs", "tree": {"sha": "cf00d7c5924c0d285e6903fc3d3b05d4a29a2274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf00d7c5924c0d285e6903fc3d3b05d4a29a2274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "html_url": "https://github.com/rust-lang/rust/commit/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cb193a5cb694ba62c83fb63a804f22720a118cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb193a5cb694ba62c83fb63a804f22720a118cf", "html_url": "https://github.com/rust-lang/rust/commit/8cb193a5cb694ba62c83fb63a804f22720a118cf"}], "stats": {"total": 349, "additions": 199, "deletions": 150}, "files": [{"sha": "7ce26696e606e021a39e5768e7a5a88847754a6b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 51, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "patch": "@@ -7,7 +7,7 @@ use crate::hir::def_id::DefId;\n use crate::hir::print;\n use crate::hir::ptr::P;\n use crate::hir::{self, ExprKind, GenericArg, GenericArgs, HirVec};\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n+use crate::hir::intravisit::Visitor;\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n@@ -16,6 +16,7 @@ use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n use errors::{Applicability, DiagnosticId};\n+use crate::collect::PlaceholderHirTyCollector;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n@@ -2747,12 +2748,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     }\n \n     pub fn ty_of_arg(&self, ty: &hir::Ty<'_>, expected_ty: Option<Ty<'tcx>>) -> Ty<'tcx> {\n-        match ty.kind {\n-            hir::TyKind::Infer if expected_ty.is_some() => {\n-                self.record_ty(ty.hir_id, expected_ty.unwrap(), ty.span);\n-                expected_ty.unwrap()\n-            }\n-            _ => self.ast_ty_to_ty(ty),\n+        if crate::collect::is_infer_ty(ty) && expected_ty.is_some() {\n+            self.record_ty(ty.hir_id, expected_ty.unwrap(), ty.span);\n+            expected_ty.unwrap()\n+        } else {\n+            self.ast_ty_to_ty(ty)\n         }\n     }\n \n@@ -2769,23 +2769,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let tcx = self.tcx();\n \n         // We proactively collect all the infered type params to emit a single error per fn def.\n-        struct PlaceholderHirTyCollector(Vec<Span>);\n-        impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-            fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n-                NestedVisitorMap::None\n-            }\n-            fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n-                if let hir::TyKind::Infer = t.kind {\n-                    self.0.push(t.span);\n-                }\n-                hir::intravisit::walk_ty(self, t)\n-            }\n-        }\n         let mut placeholder_types = vec![];\n         let mut output_placeholder_types = vec![];\n \n         let input_tys = decl.inputs.iter().map(|a| {\n-            let mut visitor = PlaceholderHirTyCollector(vec![]);\n+            let mut visitor = PlaceholderHirTyCollector::new();\n             visitor.visit_ty(&a);\n             if visitor.0.is_empty() || self.allow_ty_infer() {\n                 self.ty_of_arg(a, None)\n@@ -2796,7 +2784,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n         let output_ty = match decl.output {\n             hir::Return(ref output) => {\n-                let mut visitor = PlaceholderHirTyCollector(vec![]);\n+                let mut visitor = PlaceholderHirTyCollector::new();\n                 visitor.visit_ty(output);\n                 let is_infer = if let hir::TyKind::Infer = output.kind {\n                     true\n@@ -2820,36 +2808,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         placeholder_types.extend(output_placeholder_types);\n \n-        if !placeholder_types.is_empty() {\n-            let mut sugg = placeholder_types.iter().cloned()\n-                .map(|sp| (sp, \"T\".to_owned()))\n-                .collect::<Vec<_>>();\n-            if let Some(span) = ident_span {\n-                if generic_params.is_empty() {\n-                    sugg.push((span.shrink_to_hi(), \"<T>\".to_string()));\n-                } else {\n-                    sugg.push((\n-                        generic_params.iter().last().unwrap().span.shrink_to_hi(),\n-                        \", T\".to_string(),\n-                    ));\n-                }\n-            }\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n-                placeholder_types,\n-                E0121,\n-                \"the type placeholder `_` is not allowed within types on item signatures\",\n-            );\n-            if ident_span.is_some() {\n-                err.multipart_suggestion(\n-                    \"use type parameters instead\",\n-                    sugg,\n-                    Applicability::HasPlaceholders,\n-                );\n-            }\n-            err.emit();\n-        }\n-\n+        crate::collect::placeholder_type_error(\n+            tcx,\n+            ident_span.unwrap_or(DUMMY_SP),\n+            generic_params,\n+            placeholder_types,\n+            ident_span.is_some(),\n+        );\n \n         // Find any late-bound regions declared in return type that do\n         // not appear in the arguments. These are not well-formed."}, {"sha": "440b894fcf7e52f97492c9671fc252801f1f561c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 93, "deletions": 3, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "patch": "@@ -102,17 +102,96 @@ pub struct ItemCtxt<'tcx> {\n \n ///////////////////////////////////////////////////////////////////////////\n \n+crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n+\n+impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        NestedVisitorMap::None\n+    }\n+    fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n+        if let hir::TyKind::Infer = t.kind {\n+            self.0.push(t.span);\n+        }\n+        hir::intravisit::walk_ty(self, t)\n+    }\n+}\n+\n+impl PlaceholderHirTyCollector {\n+    pub fn new() -> PlaceholderHirTyCollector {\n+        PlaceholderHirTyCollector(vec![])\n+    }\n+}\n+\n struct CollectItemTypesVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n+crate fn placeholder_type_error(\n+    tcx: TyCtxt<'tcx>,\n+    ident_span: Span,\n+    generics: &[hir::GenericParam<'_>],\n+    placeholder_types: Vec<Span>,\n+    suggest: bool,\n+) {\n+    if !placeholder_types.is_empty() {\n+        let mut sugg: Vec<_> = placeholder_types.iter().map(|sp| (*sp, \"T\".to_string())).collect();\n+        if generics.is_empty() {\n+            sugg.push((ident_span.shrink_to_hi(), \"<T>\".to_string()));\n+        } else {\n+            sugg.push((generics.iter().last().unwrap().span.shrink_to_hi(), \", T\".to_string()));\n+        }\n+        let mut err = struct_span_err!(\n+            tcx.sess,\n+            placeholder_types.clone(),\n+            E0121,\n+            \"the type placeholder `_` is not allowed within types on item signatures\",\n+        );\n+        for span in &placeholder_types {\n+            err.span_label(*span, \"not allowed in type signatures\");\n+        }\n+        if suggest {\n+            err.multipart_suggestion(\n+                \"use type parameters instead\",\n+                sugg,\n+                Applicability::HasPlaceholders,\n+            );\n+        }\n+        err.emit();\n+    }\n+}\n+\n+fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+    let (generics, suggest) = match &item.kind {\n+        hir::ItemKind::Union(_, generics)\n+        | hir::ItemKind::Enum(_, generics)\n+        | hir::ItemKind::Struct(_, generics) => (&generics.params[..], true),\n+        hir::ItemKind::Static(ty, ..) => {\n+            if let hir::TyKind::Infer = ty.kind {\n+                return; // We handle it elsewhere to attempt to suggest an appropriate type.\n+            } else {\n+                (&[][..], false)\n+            }\n+        }\n+        hir::ItemKind::TyAlias(_, generics) => (&generics.params[..], false),\n+        // hir::ItemKind::Fn(..) |\n+        // hir::ItemKind::Const(..) => {} // We handle these elsewhere to suggest appropriate type.\n+        _ => return,\n+    };\n+\n+    let mut visitor = PlaceholderHirTyCollector::new();\n+    visitor.visit_item(item);\n+\n+    placeholder_type_error(tcx, item.ident.span, generics, visitor.0, suggest);\n+}\n+\n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         convert_item(self.tcx, item.hir_id);\n+        reject_placeholder_type_signatures_in_item(self.tcx, item);\n         intravisit::walk_item(self, item);\n     }\n \n@@ -200,8 +279,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        bad_placeholder_type(self.tcx(), span).emit();\n-\n+        self.tcx().sess.delay_span_bug(span, \"bad placeholder type, but no error was emitted\");\n         self.tcx().types.err\n     }\n \n@@ -1189,6 +1267,10 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 .and_then(|body_id| {\n                     if let hir::TyKind::Infer = ty.kind {\n                         Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n+                    } else if is_infer_ty(ty) {\n+                        // Infering this would cause a cycle error.\n+                        tcx.sess.delay_span_bug(ty.span, \"`_` placeholder but no error emitted\");\n+                        Some(tcx.types.err)\n                     } else {\n                         None\n                     }\n@@ -1208,6 +1290,10 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             ImplItemKind::Const(ref ty, body_id) => {\n                 if let hir::TyKind::Infer = ty.kind {\n                     infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                } else if is_infer_ty(ty) {\n+                    // Infering this would cause a cycle error.\n+                    tcx.sess.delay_span_bug(ty.span, \"`_` placeholder but no error emitted\");\n+                    tcx.types.err\n                 } else {\n                     icx.to_ty(ty)\n                 }\n@@ -1233,6 +1319,10 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 ItemKind::Static(ref ty, .., body_id) | ItemKind::Const(ref ty, body_id) => {\n                     if let hir::TyKind::Infer = ty.kind {\n                         infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                    } else if is_infer_ty(ty) {\n+                        // Infering this would cause a cycle error.\n+                        tcx.sess.delay_span_bug(ty.span, \"`_` placeholder but no error emitted\");\n+                        tcx.types.err\n                     } else {\n                         icx.to_ty(ty)\n                     }\n@@ -1703,7 +1793,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n-fn is_infer_ty(ty: &hir::Ty<'_>) -> bool {\n+crate fn is_infer_ty(ty: &hir::Ty<'_>) -> bool {\n     match &ty.kind {\n         hir::TyKind::Infer => true,\n         hir::TyKind::Slice(ty) | hir::TyKind::Array(ty, _) => is_infer_ty(ty),"}, {"sha": "1475b212b56a6a3b89d20c3e13f28e7f3294bb90", "filename": "src/test/ui/self/self-infer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr?ref=6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "patch": "@@ -2,7 +2,7 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/self-infer.rs:4:16\n    |\n LL |     fn f(self: _) {}\n-   |                ^\n+   |                ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n@@ -13,7 +13,7 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/self-infer.rs:5:17\n    |\n LL |     fn g(self: &_) {}\n-   |                 ^\n+   |                 ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |"}, {"sha": "0ec5d80f2414f249e51d0b11e7cfc82655224814", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "patch": "@@ -15,7 +15,6 @@ static TEST4: _ = 145;\n \n static TEST5: (_, _) = (1, 2);\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test6(_: _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n@@ -48,8 +47,6 @@ struct Test10 {\n     a: _,\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     b: (_, _),\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n pub fn main() {\n@@ -67,7 +64,6 @@ pub fn main() {\n \n     static FN_TEST5: (_, _) = (1, 2);\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test6(_: _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n@@ -100,8 +96,6 @@ pub fn main() {\n         a: _,\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n         b: (_, _),\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-        //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n     fn fn_test11(_: _) -> (_, _) { panic!() }"}, {"sha": "dbb014edd426c171fa8f8dbeeb03cce35fb26bf0", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 88, "deletions": 88, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b2dcb1944a1b693778b7d96a99aaad635bbd8/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=6c8b2dcb1944a1b693778b7d96a99aaad635bbd8", "patch": "@@ -38,85 +38,64 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:16:16\n    |\n LL | static TEST5: (_, _) = (1, 2);\n-   |                ^ not allowed in type signatures\n+   |                ^  ^ not allowed in type signatures\n+   |                |\n+   |                not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:16:19\n-   |\n-LL | static TEST5: (_, _) = (1, 2);\n-   |                   ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:20:13\n+  --> $DIR/typeck_type_placeholder_item.rs:19:13\n    |\n LL | fn test6(_: _) { }\n-   |             ^\n+   |             ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL | fn test6<T>(_: T) { }\n    |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:23:13\n+  --> $DIR/typeck_type_placeholder_item.rs:22:13\n    |\n LL | fn test7(x: _) { let _x: usize = x; }\n-   |             ^\n+   |             ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:26:22\n+  --> $DIR/typeck_type_placeholder_item.rs:25:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n-   |                      ^\n+   |                      ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:48:8\n+  --> $DIR/typeck_type_placeholder_item.rs:47:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:50:9\n-   |\n+LL |\n LL |     b: (_, _),\n-   |         ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:50:12\n+   |         ^  ^ not allowed in type signatures\n+   |         |\n+   |         not allowed in type signatures\n    |\n-LL |     b: (_, _),\n-   |            ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:100:12\n-   |\n-LL |         a: _,\n-   |            ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:102:13\n+help: use type parameters instead\n    |\n-LL |         b: (_, _),\n-   |             ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:102:16\n+LL | struct Test10<T> {\n+LL |     a: T,\n+LL |\n+LL |     b: (T, T),\n    |\n-LL |         b: (_, _),\n-   |                ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:56:21\n+  --> $DIR/typeck_type_placeholder_item.rs:53:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n@@ -125,7 +104,7 @@ LL |     fn fn_test() -> _ { 5 }\n    |                     help: replace this with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:59:22\n+  --> $DIR/typeck_type_placeholder_item.rs:56:22\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      ^^^^^^\n@@ -134,7 +113,7 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      help: replace this with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:62:22\n+  --> $DIR/typeck_type_placeholder_item.rs:59:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -143,7 +122,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:65:22\n+  --> $DIR/typeck_type_placeholder_item.rs:62:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -152,64 +131,79 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:68:23\n-   |\n-LL |     static FN_TEST5: (_, _) = (1, 2);\n-   |                       ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:68:26\n+  --> $DIR/typeck_type_placeholder_item.rs:65:23\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n-   |                          ^ not allowed in type signatures\n+   |                       ^  ^ not allowed in type signatures\n+   |                       |\n+   |                       not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:72:20\n+  --> $DIR/typeck_type_placeholder_item.rs:68:20\n    |\n LL |     fn fn_test6(_: _) { }\n-   |                    ^\n+   |                    ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:75:20\n+  --> $DIR/typeck_type_placeholder_item.rs:71:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n-   |                    ^\n+   |                    ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:78:29\n+  --> $DIR/typeck_type_placeholder_item.rs:74:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^\n+   |                             ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:96:12\n+   |\n+LL |         a: _,\n+   |            ^ not allowed in type signatures\n+LL |\n+LL |         b: (_, _),\n+   |             ^  ^ not allowed in type signatures\n+   |             |\n+   |             not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     struct FnTest10<T> {\n+LL |         a: T,\n+LL |\n+LL |         b: (T, T),\n+   |\n+\n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:107:27\n+  --> $DIR/typeck_type_placeholder_item.rs:101:27\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                           ^^^^^^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:107:27\n+  --> $DIR/typeck_type_placeholder_item.rs:101:27\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                           ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:111:29\n+  --> $DIR/typeck_type_placeholder_item.rs:105:29\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             ^^^^^^\n@@ -218,84 +212,90 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             help: replace this with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:114:21\n+  --> $DIR/typeck_type_placeholder_item.rs:108:21\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n-   |                     ^           ^\n+   |                     ^           ^ not allowed in type signatures\n+   |                     |\n+   |                     not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn fn_test13<T>(x: T) -> (i32, T) { (x, x) }\n    |                 ^^^    ^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:119:31\n+  --> $DIR/typeck_type_placeholder_item.rs:113:31\n    |\n LL |     fn method_test1(&self, x: _);\n-   |                               ^\n+   |                               ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:121:31\n+  --> $DIR/typeck_type_placeholder_item.rs:115:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n-   |                               ^     ^\n+   |                               ^     ^ not allowed in type signatures\n+   |                               |\n+   |                               not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:123:31\n+  --> $DIR/typeck_type_placeholder_item.rs:117:31\n    |\n LL |     fn method_test3(&self) -> _;\n-   |                               ^\n+   |                               ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:125:26\n+  --> $DIR/typeck_type_placeholder_item.rs:119:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n-   |                          ^\n+   |                          ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:127:26\n+  --> $DIR/typeck_type_placeholder_item.rs:121:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n-   |                          ^     ^\n+   |                          ^     ^ not allowed in type signatures\n+   |                          |\n+   |                          not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:129:28\n+  --> $DIR/typeck_type_placeholder_item.rs:123:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n-   |                            ^\n+   |                            ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:32:24\n+  --> $DIR/typeck_type_placeholder_item.rs:31:24\n    |\n LL |     fn test9(&self) -> _ { () }\n    |                        ^\n@@ -304,18 +304,18 @@ LL |     fn test9(&self) -> _ { () }\n    |                        help: replace this with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:35:27\n+  --> $DIR/typeck_type_placeholder_item.rs:34:27\n    |\n LL |     fn test10(&self, _x : _) { }\n-   |                           ^\n+   |                           ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:40:24\n+  --> $DIR/typeck_type_placeholder_item.rs:39:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n    |                        ^\n@@ -324,18 +324,18 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        help: replace this with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:43:37\n+  --> $DIR/typeck_type_placeholder_item.rs:42:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n-   |                                     ^\n+   |                                     ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:84:31\n+  --> $DIR/typeck_type_placeholder_item.rs:80:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n@@ -344,18 +344,18 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               help: replace this with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:87:34\n+  --> $DIR/typeck_type_placeholder_item.rs:83:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n-   |                                  ^\n+   |                                  ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:92:28\n+  --> $DIR/typeck_type_placeholder_item.rs:88:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n@@ -364,17 +364,17 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            help: replace this with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:95:41\n+  --> $DIR/typeck_type_placeholder_item.rs:91:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-   |                                         ^\n+   |                                         ^ not allowed in type signatures\n    |\n help: use type parameters instead\n    |\n LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n-error: aborting due to 42 previous errors\n+error: aborting due to 36 previous errors\n \n Some errors have detailed explanations: E0121, E0282.\n For more information about an error, try `rustc --explain E0121`."}]}