{"sha": "2fd4cbb3f283b903f55444bb585d38a2539f4e8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDRjYmIzZjI4M2I5MDNmNTU0NDRiYjU4NWQzOGEyNTM5ZjRlOGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-10T21:24:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-16T20:14:42Z"}, "message": "Fix rebase", "tree": {"sha": "d2509e198c34af3e41cce2dbde186635384a418a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2509e198c34af3e41cce2dbde186635384a418a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd4cbb3f283b903f55444bb585d38a2539f4e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd4cbb3f283b903f55444bb585d38a2539f4e8d", "html_url": "https://github.com/rust-lang/rust/commit/2fd4cbb3f283b903f55444bb585d38a2539f4e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd4cbb3f283b903f55444bb585d38a2539f4e8d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf96131f444f15a2a4ac80f46a86f35fad8309a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf96131f444f15a2a4ac80f46a86f35fad8309a", "html_url": "https://github.com/rust-lang/rust/commit/0cf96131f444f15a2a4ac80f46a86f35fad8309a"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "b1ff66eb64fa69d420603a35d9ad1e47998d0131", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4cbb3f283b903f55444bb585d38a2539f4e8d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4cbb3f283b903f55444bb585d38a2539f4e8d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=2fd4cbb3f283b903f55444bb585d38a2539f4e8d", "patch": "@@ -724,7 +724,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n pub fn maybe_lint_level_root(tcx: TyCtxt<'_, '_, '_>, id: hir::HirId) -> bool {\n     let attrs = tcx.hir().attrs_by_hir_id(id);\n     for attr in attrs {\n-        if Level::from_str(&attr.name().as_str()).is_some() {\n+        if attr.ident_str().and_then(Level::from_str).is_some() {\n             return true;\n         }\n     }"}, {"sha": "80c5eeeeac3458a9be447573ac90eb3f50483db8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4cbb3f283b903f55444bb585d38a2539f4e8d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4cbb3f283b903f55444bb585d38a2539f4e8d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2fd4cbb3f283b903f55444bb585d38a2539f4e8d", "patch": "@@ -831,7 +831,7 @@ impl UnusedDocComment {\n \n             let span = sugared_span.take().unwrap_or_else(|| attr.span);\n \n-            if attr.name() == \"doc\" {\n+            if attr.check_name(\"doc\") {\n                 let mut err = cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, \"unused doc comment\");\n \n                 err.span_label("}, {"sha": "4211268f33efef7ac0b24fa8701efc5327f06c82", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd4cbb3f283b903f55444bb585d38a2539f4e8d/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd4cbb3f283b903f55444bb585d38a2539f4e8d/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=2fd4cbb3f283b903f55444bb585d38a2539f4e8d", "patch": "@@ -267,8 +267,6 @@ impl<'a> Parser<'a> {\n \n     /// matches meta_item_inner : (meta_item | UNSUFFIXED_LIT) ;\n     fn parse_meta_item_inner(&mut self) -> PResult<'a, ast::NestedMetaItem> {\n-        let lo = self.span;\n-\n         match self.parse_unsuffixed_lit() {\n             Ok(lit) => {\n                 return Ok(ast::NestedMetaItem::Literal(lit))"}]}