{"sha": "110777b60c0c02a9bb62c6ffc081dc276de81210", "node_id": "C_kwDOAAsO6NoAKDExMDc3N2I2MGMwYzAyYTliYjYyYzZmZmMwODFkYzI3NmRlODEyMTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-30T09:35:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-30T09:35:22Z"}, "message": "Auto merge of #99796 - compiler-errors:issue-53475, r=oli-obk\n\nuse `check_region_obligations_and_report_errors` to avoid ICEs\n\nIf we don't call `process_registered_region_obligations` before `resolve_regions_and_report_errors` then we'll ICE if we have any region obligations, and `check_region_obligations_and_report_errors` just does both of these for us in a nice convenient function.\n\nFixes #53475\n\nr? types", "tree": {"sha": "4b11b80567388b669a66d93b157bc2781abd198b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b11b80567388b669a66d93b157bc2781abd198b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110777b60c0c02a9bb62c6ffc081dc276de81210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110777b60c0c02a9bb62c6ffc081dc276de81210", "html_url": "https://github.com/rust-lang/rust/commit/110777b60c0c02a9bb62c6ffc081dc276de81210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110777b60c0c02a9bb62c6ffc081dc276de81210/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760d8a2cb169974971cb54302c857bfed0070f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/760d8a2cb169974971cb54302c857bfed0070f6e", "html_url": "https://github.com/rust-lang/rust/commit/760d8a2cb169974971cb54302c857bfed0070f6e"}, {"sha": "16f49800db7be11e7255036f05ca811c1bf98926", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f49800db7be11e7255036f05ca811c1bf98926", "html_url": "https://github.com/rust-lang/rust/commit/16f49800db7be11e7255036f05ca811c1bf98926"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "6d5f4993d8d298261e8371a2ae576543b9139941", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -1325,6 +1325,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n     /// `resolve_vars_if_possible` as well as `fully_resolve`.\n+    ///\n+    /// Make sure to call [`InferCtxt::process_registered_region_obligations`]\n+    /// first, or preferrably use [`InferCtxt::check_region_obligations_and_report_errors`]\n+    /// to do both of these operations together.\n     pub fn resolve_regions_and_report_errors(\n         &self,\n         generic_param_scope: LocalDefId,"}, {"sha": "ad052f58ca854b1c29e4369d431df194d80294fb", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -111,6 +111,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         std::mem::take(&mut self.inner.borrow_mut().region_obligations)\n     }\n \n+    /// NOTE: Prefer using [`InferCtxt::check_region_obligations_and_report_errors`]\n+    /// instead of calling this directly.\n+    ///\n     /// Process the region obligations that must be proven (during\n     /// `regionck`) for the given `body_id`, given information about\n     /// the region bounds in scope and so forth. This function must be\n@@ -162,6 +165,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         }\n     }\n \n+    /// Processes registered region obliations and resolves regions, reporting\n+    /// any errors if any were raised. Prefer using this function over manually\n+    /// calling `resolve_regions_and_report_errors`.\n     pub fn check_region_obligations_and_report_errors(\n         &self,\n         generic_param_scope: LocalDefId,"}, {"sha": "f62ccb99df5ebf12118cfff4e460caaed5eec5e5", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -398,13 +398,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n     let outlives_env = OutlivesEnvironment::new(param_env);\n     infcx.process_registered_region_obligations(outlives_env.region_bound_pairs(), param_env);\n \n-    let errors = infcx.resolve_regions(&outlives_env);\n-\n-    if !errors.is_empty() {\n-        return false;\n-    }\n-\n-    true\n+    infcx.resolve_regions(&outlives_env).is_empty()\n }\n \n pub fn trait_ref_is_knowable<'tcx>("}, {"sha": "e3ac23686b6d692398543e1754e853693436c7c7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -1154,8 +1154,10 @@ pub(crate) fn compare_const_impl<'tcx>(\n         }\n \n         let outlives_environment = OutlivesEnvironment::new(param_env);\n-        infcx\n-            .resolve_regions_and_report_errors(impl_c.def_id.expect_local(), &outlives_environment);\n+        infcx.check_region_obligations_and_report_errors(\n+            impl_c.def_id.expect_local(),\n+            &outlives_environment,\n+        );\n     });\n }\n "}, {"sha": "1e404fda035af2fa00cc1f8a464dae418b9e0da4", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -349,7 +349,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n \n                     // Finally, resolve all regions.\n                     let outlives_env = OutlivesEnvironment::new(param_env);\n-                    infcx.resolve_regions_and_report_errors(impl_did, &outlives_env);\n+                    infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n                 }\n             }\n             _ => {\n@@ -606,7 +606,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n \n         // Finally, resolve all regions.\n         let outlives_env = OutlivesEnvironment::new(param_env);\n-        infcx.resolve_regions_and_report_errors(impl_did, &outlives_env);\n+        infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n \n         CoerceUnsizedInfo { custom_kind: kind }\n     })"}, {"sha": "74abb71a18e76f876d51008f4efef7cdcae80349", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -158,8 +158,7 @@ fn get_impl_substs<'tcx>(\n         implied_bounds,\n         tcx.hir().local_def_id_to_hir_id(impl1_def_id),\n     );\n-    infcx.process_registered_region_obligations(outlives_env.region_bound_pairs(), param_env);\n-    infcx.resolve_regions_and_report_errors(impl1_def_id, &outlives_env);\n+    infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n         let span = tcx.def_span(impl1_def_id);\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });"}, {"sha": "3770c024fb92e040681fa8d515ffa9c00b541c19", "filename": "src/test/ui/coercion/issue-53475.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/src%2Ftest%2Fui%2Fcoercion%2Fissue-53475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/src%2Ftest%2Fui%2Fcoercion%2Fissue-53475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fissue-53475.rs?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -0,0 +1,13 @@\n+#![feature(coerce_unsized)]\n+\n+use std::any::Any;\n+use std::ops::CoerceUnsized;\n+\n+struct Foo<T> {\n+    data: Box<T>,\n+}\n+\n+impl<T> CoerceUnsized<Foo<dyn Any>> for Foo<T> {}\n+//~^ ERROR the parameter type `T` may not live long enough\n+\n+fn main() {}"}, {"sha": "522c50dca9508fc716a902b17078a5e90bf9787c", "filename": "src/test/ui/coercion/issue-53475.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/110777b60c0c02a9bb62c6ffc081dc276de81210/src%2Ftest%2Fui%2Fcoercion%2Fissue-53475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110777b60c0c02a9bb62c6ffc081dc276de81210/src%2Ftest%2Fui%2Fcoercion%2Fissue-53475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fissue-53475.stderr?ref=110777b60c0c02a9bb62c6ffc081dc276de81210", "patch": "@@ -0,0 +1,14 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-53475.rs:10:1\n+   |\n+LL | impl<T> CoerceUnsized<Foo<dyn Any>> for Foo<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<T: 'static> CoerceUnsized<Foo<dyn Any>> for Foo<T> {}\n+   |       +++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}]}