{"sha": "d221ff4f9e0e270939a2944a2471bc3f027a674b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMjFmZjRmOWUwZTI3MDkzOWEyOTQ0YTI0NzFiYzNmMDI3YTY3NGI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-22T22:19:55Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-24T08:43:00Z"}, "message": "Auto import macros", "tree": {"sha": "443bc8ad18e679fe12586153e9c2b35e3706628e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/443bc8ad18e679fe12586153e9c2b35e3706628e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d221ff4f9e0e270939a2944a2471bc3f027a674b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d221ff4f9e0e270939a2944a2471bc3f027a674b", "html_url": "https://github.com/rust-lang/rust/commit/d221ff4f9e0e270939a2944a2471bc3f027a674b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d221ff4f9e0e270939a2944a2471bc3f027a674b/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9494f114798f66b5f2174cf518a2951a82571d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9494f114798f66b5f2174cf518a2951a82571d3", "html_url": "https://github.com/rust-lang/rust/commit/f9494f114798f66b5f2174cf518a2951a82571d3"}], "stats": {"total": 80, "additions": 46, "deletions": 34}, "files": [{"sha": "34c816f1626c34721c46c2bcf23e94c5e60e758c", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=d221ff4f9e0e270939a2944a2471bc3f027a674b", "patch": "@@ -129,7 +129,7 @@ impl<'a> QualifyPaths<'a> {\n         let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {\n             PathResolution::Def(def) => {\n-                let found_path = from.find_use_path(self.source_scope.db, def)?;\n+                let found_path = from.find_use_path(self.source_scope.db, def.into())?;\n                 let mut path = path_to_ast(found_path);\n \n                 let type_args = p"}, {"sha": "49d8c4c3d0488db1fbd0cde3c36855c4de16174a", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=d221ff4f9e0e270939a2944a2471bc3f027a674b", "patch": "@@ -4,7 +4,7 @@ use hir::{\n     AsAssocItem, AssocItemContainer, ModPath, Module, ModuleDef, PathResolution, Semantics, Trait,\n     Type,\n };\n-use ra_ide_db::{imports_locator::ImportsLocator, RootDatabase};\n+use ra_ide_db::{defs::Definition, imports_locator::ImportsLocator, RootDatabase};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -127,14 +127,16 @@ impl AutoImportAssets {\n         ImportsLocator::new(db)\n             .find_imports(&self.get_search_query())\n             .into_iter()\n-            .filter_map(|module_def| match &self.import_candidate {\n+            .filter_map(|definition| match &self.import_candidate {\n                 ImportCandidate::TraitAssocItem(assoc_item_type, _) => {\n-                    let located_assoc_item = match module_def {\n-                        ModuleDef::Function(located_function) => located_function\n-                            .as_assoc_item(db)\n-                            .map(|assoc| assoc.container(db))\n-                            .and_then(Self::assoc_to_trait),\n-                        ModuleDef::Const(located_const) => located_const\n+                    let located_assoc_item = match definition {\n+                        Definition::ModuleDef(ModuleDef::Function(located_function)) => {\n+                            located_function\n+                                .as_assoc_item(db)\n+                                .map(|assoc| assoc.container(db))\n+                                .and_then(Self::assoc_to_trait)\n+                        }\n+                        Definition::ModuleDef(ModuleDef::Const(located_const)) => located_const\n                             .as_assoc_item(db)\n                             .map(|assoc| assoc.container(db))\n                             .and_then(Self::assoc_to_trait),\n@@ -152,11 +154,13 @@ impl AutoImportAssets {\n                             None,\n                             |_, assoc| Self::assoc_to_trait(assoc.container(db)),\n                         )\n-                        .map(ModuleDef::from)\n+                        .map(|located_trait| ModuleDef::from(located_trait).into())\n                 }\n                 ImportCandidate::TraitMethod(function_callee, _) => {\n                     let located_assoc_item =\n-                        if let ModuleDef::Function(located_function) = module_def {\n+                        if let Definition::ModuleDef(ModuleDef::Function(located_function)) =\n+                            definition\n+                        {\n                             located_function\n                                 .as_assoc_item(db)\n                                 .map(|assoc| assoc.container(db))\n@@ -178,11 +182,15 @@ impl AutoImportAssets {\n                                 Self::assoc_to_trait(function.as_assoc_item(db)?.container(db))\n                             },\n                         )\n-                        .map(ModuleDef::from)\n+                        .map(|located_trait| ModuleDef::from(located_trait).into())\n                 }\n-                _ => Some(module_def),\n+                _ => match definition {\n+                    Definition::ModuleDef(module_def) => Some(module_def.into()),\n+                    Definition::Macro(macro_def) => Some(macro_def.into()),\n+                    _ => None,\n+                },\n             })\n-            .filter_map(|module_def| self.module_with_name_to_import.find_use_path(db, module_def))\n+            .filter_map(|item| self.module_with_name_to_import.find_use_path(db, item))\n             .filter(|use_path| !use_path.segments.is_empty())\n             .take(20)\n             .collect::<BTreeSet<_>>()"}, {"sha": "869942b1203a0f30d40bd7a2dd4902217404ae78", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=d221ff4f9e0e270939a2944a2471bc3f027a674b", "patch": "@@ -2,7 +2,7 @@\n \n use std::iter;\n \n-use hir::{Adt, HasSource, Semantics};\n+use hir::{Adt, HasSource, ModuleDef, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n \n@@ -154,7 +154,8 @@ fn resolve_tuple_of_enum_def(\n }\n \n fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> Option<ast::Pat> {\n-    let path = crate::ast_transform::path_to_ast(module.find_use_path(db, var.into())?);\n+    let path =\n+        crate::ast_transform::path_to_ast(module.find_use_path(db, ModuleDef::from(var).into())?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n     let pat: ast::Pat = match var.source(db).value.kind() {"}, {"sha": "146e7820e61cbeeb268281566ac5a4351cd73840", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d221ff4f9e0e270939a2944a2471bc3f027a674b", "patch": "@@ -139,6 +139,17 @@ impl ModuleDef {\n     }\n }\n \n+impl From<ModuleDef> for ItemInNs {\n+    fn from(module_def: ModuleDef) -> Self {\n+        match module_def {\n+            ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n+                ItemInNs::Values(module_def.into())\n+            }\n+            _ => ItemInNs::Types(module_def.into()),\n+        }\n+    }\n+}\n+\n pub use hir_def::{\n     attr::Attrs, item_scope::ItemInNs, visibility::Visibility, AssocItemId, AssocItemLoc,\n };\n@@ -275,19 +286,9 @@ impl Module {\n     pub fn find_use_path(\n         self,\n         db: &dyn HirDatabase,\n-        item: ModuleDef,\n+        item: ItemInNs,\n     ) -> Option<hir_def::path::ModPath> {\n-        // FIXME expose namespace choice\n-        hir_def::find_path::find_path(db.upcast(), determine_item_namespace(item), self.into())\n-    }\n-}\n-\n-fn determine_item_namespace(module_def: ModuleDef) -> ItemInNs {\n-    match module_def {\n-        ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n-            ItemInNs::Values(module_def.into())\n-        }\n-        _ => ItemInNs::Types(module_def.into()),\n+        hir_def::find_path::find_path(db.upcast(), item, self.into())\n     }\n }\n \n@@ -759,6 +760,12 @@ impl MacroDef {\n     }\n }\n \n+impl From<MacroDef> for ItemInNs {\n+    fn from(macro_def: MacroDef) -> Self {\n+        ItemInNs::Macros(macro_def.into())\n+    }\n+}\n+\n /// Invariant: `inner.as_assoc_item(db).is_some()`\n /// We do not actively enforce this invariant.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "24b6e4ad00f37efceee48e2257a76af40743fde1", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d221ff4f9e0e270939a2944a2471bc3f027a674b/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=d221ff4f9e0e270939a2944a2471bc3f027a674b", "patch": "@@ -1,7 +1,7 @@\n //! This module contains an import search funcionality that is provided to the ra_assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n-use hir::{ModuleDef, Semantics};\n+use hir::Semantics;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n@@ -20,7 +20,7 @@ impl<'a> ImportsLocator<'a> {\n         Self { sema: Semantics::new(db) }\n     }\n \n-    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n+    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<Definition> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.sema.db;\n \n@@ -42,10 +42,6 @@ impl<'a> ImportsLocator<'a> {\n             .into_iter()\n             .chain(lib_results.into_iter())\n             .filter_map(|import_candidate| self.get_name_definition(&import_candidate))\n-            .filter_map(|name_definition_to_import| match name_definition_to_import {\n-                Definition::ModuleDef(module_def) => Some(module_def),\n-                _ => None,\n-            })\n             .collect()\n     }\n "}]}