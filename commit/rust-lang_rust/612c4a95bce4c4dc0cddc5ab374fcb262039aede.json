{"sha": "612c4a95bce4c4dc0cddc5ab374fcb262039aede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMmM0YTk1YmNlNGM0ZGMwY2RkYzVhYjM3NGZjYjI2MjAzOWFlZGU=", "commit": {"author": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-07T04:17:49Z"}, "committer": {"name": "Phlosioneer", "email": "mattmdrr2@gmail.com", "date": "2018-03-19T05:39:37Z"}, "message": "Impl Integer methods for Wrapping\n\nWrapping<T> now implements:\n\ncount_ones, count_zeros, leading_zeros,\ntrailing_zeros, rotate_left, rotate_right, swap_bytes, from_be,\nfrom_le, to_be, to_le, and pow\n\nwhere T is:\n\nu8, u16, u32, u64, usize, i8, i16, i32, i64, or isize.\n\nDocs were written for all these methods, as well as examples. The\nexamples mirror the ones on u8, u16, etc... for consistency.\n\nCloses #32463", "tree": {"sha": "52b7ce643c0072ef287d3540abf74651f703c809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52b7ce643c0072ef287d3540abf74651f703c809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/612c4a95bce4c4dc0cddc5ab374fcb262039aede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/612c4a95bce4c4dc0cddc5ab374fcb262039aede", "html_url": "https://github.com/rust-lang/rust/commit/612c4a95bce4c4dc0cddc5ab374fcb262039aede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/612c4a95bce4c4dc0cddc5ab374fcb262039aede/comments", "author": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Phlosioneer", "id": 4657718, "node_id": "MDQ6VXNlcjQ2NTc3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4657718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlosioneer", "html_url": "https://github.com/Phlosioneer", "followers_url": "https://api.github.com/users/Phlosioneer/followers", "following_url": "https://api.github.com/users/Phlosioneer/following{/other_user}", "gists_url": "https://api.github.com/users/Phlosioneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlosioneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlosioneer/subscriptions", "organizations_url": "https://api.github.com/users/Phlosioneer/orgs", "repos_url": "https://api.github.com/users/Phlosioneer/repos", "events_url": "https://api.github.com/users/Phlosioneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlosioneer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5508b27145cfb82896ae838e6aca0cd48750796f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5508b27145cfb82896ae838e6aca0cd48750796f", "html_url": "https://github.com/rust-lang/rust/commit/5508b27145cfb82896ae838e6aca0cd48750796f"}], "stats": {"total": 299, "additions": 299, "deletions": 0}, "files": [{"sha": "6c110aa052311ab5bc24fd742021e337ec94d11b", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/rust-lang/rust/blob/612c4a95bce4c4dc0cddc5ab374fcb262039aede/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612c4a95bce4c4dc0cddc5ab374fcb262039aede/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=612c4a95bce4c4dc0cddc5ab374fcb262039aede", "patch": "@@ -317,11 +317,307 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_unop! { impl Neg, neg for Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n+\n     )*)\n }\n \n wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n+macro_rules! wrapping_int_impl {\n+    ($($t:ty)*) => ($(\n+        impl Wrapping<$t> {\n+            /// Returns the number of ones in the binary representation of\n+            /// `self`.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i8> = Wrapping(-0b1000_0000);\n+            ///\n+            /// assert_eq!(n.count_ones(), 1);\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn count_ones(self) -> u32 {\n+                self.0.count_ones()\n+            }\n+\n+            /// Returns the number of zeros in the binary representation of\n+            /// `self`.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i8> = Wrapping(-0b1000_0000);\n+            ///\n+            /// assert_eq!(n.count_zeros(), 7);\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn count_zeros(self) -> u32 {\n+                self.0.count_zeros()\n+            }\n+\n+            /// Returns the number of leading zeros in the binary representation\n+            /// of `self`.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i16> = Wrapping(-1);\n+            ///\n+            /// assert_eq!(n.leading_zeros(), 0);\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn leading_zeros(self) -> u32 {\n+                self.0.leading_zeros()\n+            }\n+\n+            /// Returns the number of trailing zeros in the binary representation\n+            /// of `self`.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i8> = Wrapping(-4);\n+            ///\n+            /// assert_eq!(n.trailing_zeros(), 2);\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn trailing_zeros(self) -> u32 {\n+                self.0.trailing_zeros()\n+            }\n+\n+            /// Shifts the bits to the left by a specified amount, `n`,\n+            /// wrapping the truncated bits to the end of the resulting\n+            /// integer.\n+            ///\n+            /// Please note this isn't the same operation as `>>`!\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n+            /// let m: Wrapping<i64> = Wrapping(-0x76543210FEDCBA99);\n+            ///\n+            /// assert_eq!(n.rotate_left(32), m);\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn rotate_left(self, n: u32) -> Self {\n+                Wrapping(self.0.rotate_left(n))\n+            }\n+\n+            /// Shifts the bits to the right by a specified amount, `n`,\n+            /// wrapping the truncated bits to the beginning of the resulting\n+            /// integer.\n+            ///\n+            /// Please note this isn't the same operation as `<<`!\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n+            /// let m: Wrapping<i64> = Wrapping(-0xFEDCBA987654322);\n+            ///\n+            /// assert_eq!(n.rotate_right(4), m);\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn rotate_right(self, n: u32) -> Self {\n+                Wrapping(self.0.rotate_right(n))\n+            }\n+\n+            /// Reverses the byte order of the integer.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i16> = Wrapping(0b0000000_01010101);\n+            /// assert_eq!(n, Wrapping(85));\n+            ///\n+            /// let m = n.swap_bytes();\n+            ///\n+            /// assert_eq!(m, Wrapping(0b01010101_00000000));\n+            /// assert_eq!(m, Wrapping(21760));\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn swap_bytes(self) -> Self {\n+                Wrapping(self.0.swap_bytes())\n+            }\n+\n+            /// Converts an integer from big endian to the target's endianness.\n+            ///\n+            /// On big endian this is a no-op. On little endian the bytes are\n+            /// swapped.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n+            ///\n+            /// if cfg!(target_endian = \"big\") {\n+            ///     assert_eq!(Wrapping::<i64>::from_be(n), n);\n+            /// } else {\n+            ///     assert_eq!(Wrapping::<i64>::from_be(n), n.swap_bytes());\n+            /// }\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn from_be(x: Self) -> Self {\n+                Wrapping(<$t>::from_be(x.0))\n+            }\n+\n+            /// Converts an integer from little endian to the target's endianness.\n+            ///\n+            /// On little endian this is a no-op. On big endian the bytes are\n+            /// swapped.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n+            /// \n+            /// if cfg!(target_endian = \"little\") {\n+            ///     assert_eq!(Wrapping::<i64>::from_le(n), n);\n+            /// } else {\n+            ///     assert_eq!(Wrapping::<i64>::from_le(n), n.swap_bytes());\n+            /// }\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn from_le(x: Self) -> Self {\n+                Wrapping(<$t>::from_le(x.0))\n+            }\n+\n+            /// Converts `self` to big endian from the target's endianness.\n+            ///\n+            /// On big endian this is a no-op. On little endian the bytes are\n+            /// swapped.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n+            ///\n+            /// if cfg!(target_endian = \"big\") {\n+            ///     assert_eq!(n.to_be(), n);\n+            /// } else {\n+            ///     assert_eq!(n.to_be(), n.swap_bytes());\n+            /// }\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn to_be(self) -> Self {\n+                Wrapping(self.0.to_be())\n+            }\n+\n+            /// Converts `self` to little endian from the target's endianness.\n+            ///\n+            /// On little endian this is a no-op. On big endian the bytes are\n+            /// swapped.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n+            ///\n+            /// if cfg!(target_endian = \"little\") {\n+            ///     assert_eq!(n.to_le(), n);\n+            /// } else {\n+            ///     assert_eq!(n.to_le(), n.swap_bytes());\n+            /// }\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn to_le(self) -> Self {\n+                Wrapping(self.0.to_le())\n+            }\n+\n+            /// Raises self to the power of `exp`, using exponentiation by\n+            /// squaring.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            /// let x: Wrapping<i32> = Wrapping(2); // or any other integer type\n+            ///\n+            /// assert_eq!(x.pow(4), Wrapping(16));\n+            #[inline]\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub fn pow(self, exp: u32) -> Self {\n+                Wrapping(self.0.pow(exp))\n+            }\n+        }\n+    )*)\n+}\n+\n+wrapping_int_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n+\n+\n mod shift_max {\n     #![allow(non_upper_case_globals)]\n \n@@ -355,3 +651,6 @@ mod shift_max {\n     pub const u64: u32 = i64;\n     pub use self::platform::usize;\n }\n+\n+\n+"}]}