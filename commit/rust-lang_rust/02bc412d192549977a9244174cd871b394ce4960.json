{"sha": "02bc412d192549977a9244174cd871b394ce4960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYmM0MTJkMTkyNTQ5OTc3YTkyNDQxNzRjZDg3MWIzOTRjZTQ5NjA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-20T00:43:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-28T20:20:28Z"}, "message": "Use structured suggestion when requiring `Copy` constraint in type param", "tree": {"sha": "8896f5f149adeb1d4ff9f76071ba291f5898d446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8896f5f149adeb1d4ff9f76071ba291f5898d446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02bc412d192549977a9244174cd871b394ce4960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02bc412d192549977a9244174cd871b394ce4960", "html_url": "https://github.com/rust-lang/rust/commit/02bc412d192549977a9244174cd871b394ce4960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02bc412d192549977a9244174cd871b394ce4960/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f453d1127d9095cf3c3356655d9e8502ceeb8373", "url": "https://api.github.com/repos/rust-lang/rust/commits/f453d1127d9095cf3c3356655d9e8502ceeb8373", "html_url": "https://github.com/rust-lang/rust/commit/f453d1127d9095cf3c3356655d9e8502ceeb8373"}], "stats": {"total": 192, "additions": 140, "deletions": 52}, "files": [{"sha": "e3da090a62d30f17e091fa866c1f03ed5c29a191", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -231,12 +231,64 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if let ty::Param(param_ty) = ty.kind {\n                     let tcx = self.infcx.tcx;\n                     let generics = tcx.generics_of(self.mir_def_id);\n-                    let def_id = generics.type_param(&param_ty, tcx).def_id;\n-                    if let Some(sp) = tcx.hir().span_if_local(def_id) {\n-                        err.span_label(\n-                            sp,\n-                            \"consider adding a `Copy` constraint to this type argument\",\n-                        );\n+                    let param = generics.type_param(&param_ty, tcx);\n+                    let generics = tcx.hir().get_generics(self.mir_def_id).unwrap();\n+                    let msg = \"consider adding a `Copy` constraint to this type argument\";\n+                    for param in generics.params.iter().filter(|p| {\n+                        p.name.ident().as_str() == param.name.as_str()\n+                    }) {\n+                        let param_name = param.name.ident().as_str();\n+                        if param_name.starts_with(\"impl \") {\n+                            // `impl Trait` in argument:\n+                            // `fn foo(x: impl Trait) {}` \u2192 `fn foo(t: impl Trait + Trait2) {}`\n+                            err.span_suggestion(\n+                                param.span,\n+                                msg,\n+                                // `impl CurrentTrait + MissingTrait`\n+                                format!(\"{} + Copy\", param_name),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else if generics.where_clause.predicates.is_empty() &&\n+                            param.bounds.is_empty()\n+                        {\n+                            // If there are no bounds whatsoever, suggest adding a constraint\n+                            // to the type parameter:\n+                            // `fn foo<T>(t: T) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n+                            err.span_suggestion(\n+                                param.span,\n+                                msg,\n+                                format!(\"{}: Copy\", param_name),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else if !generics.where_clause.predicates.is_empty() {\n+                            // There is a `where` clause, so suggest expanding it:\n+                            // `fn foo<T>(t: T) where T: Debug {}` \u2192\n+                            // `fn foo<T>(t: T) where T: Debug, T: Trait {}`\n+                            err.span_suggestion(\n+                                generics.where_clause.span().unwrap().shrink_to_hi(),\n+                                msg,\n+                                format!(\", {}: Copy\", param_name),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            // If there is no `where` clause lean towards constraining to the\n+                            // type parameter:\n+                            // `fn foo<X: Bar, T>(t: T, x: X) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n+                            // `fn foo<T: Bar>(t: T) {}` \u2192 `fn foo<T: Bar + Trait>(t: T) {}`\n+                            let sp = param.span.with_hi(span.hi());\n+                            let span = tcx.sess.source_map()\n+                                .span_through_char(sp, ':');\n+                            if sp != param.span && sp != span {\n+                                // Only suggest if we have high certainty that the span\n+                                // covers the colon in `foo<T: Trait>`.\n+                                err.span_suggestion(span, msg, format!(\n+                                    \"{}: Copy +\",\n+                                    param_name,\n+                                ), Applicability::MachineApplicable);\n+                            } else {\n+                                err.span_label(param.span, msg);\n+                            }\n+                        }\n                     }\n                 }\n                 let span = if let Some(local) = place.as_local() {"}, {"sha": "5a6a2f9258393f1ffe0935d066dac4481195ff61", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -2,9 +2,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:7:10\n    |\n LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs + rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -16,7 +16,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n+   |                              help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs + rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -27,9 +27,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:13:10\n    |\n LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs - rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -41,7 +41,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n+   |                              help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs - rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -52,9 +52,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:19:10\n    |\n LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs * rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -66,7 +66,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n+   |                              help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs * rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -77,9 +77,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:25:10\n    |\n LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs / rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -91,7 +91,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n+   |                              help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs / rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -102,9 +102,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:31:10\n    |\n LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs % rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -116,7 +116,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n+   |                              help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs % rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -127,9 +127,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:37:10\n    |\n LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |           --                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |           |\n-   |           consider adding a `Copy` constraint to this type argument\n+   |           help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs & rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -141,7 +141,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                                    |\n-   |                                    consider adding a `Copy` constraint to this type argument\n+   |                                    help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs & rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -152,9 +152,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:43:10\n    |\n LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |          -                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |          --                         --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |          |\n-   |          consider adding a `Copy` constraint to this type argument\n+   |          help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs | rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -166,7 +166,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                  -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                                  |\n-   |                                  consider adding a `Copy` constraint to this type argument\n+   |                                  help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs | rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -177,9 +177,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:49:10\n    |\n LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |           --                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |           |\n-   |           consider adding a `Copy` constraint to this type argument\n+   |           help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs ^ rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -191,7 +191,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                                    |\n-   |                                    consider adding a `Copy` constraint to this type argument\n+   |                                    help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs ^ rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n@@ -202,9 +202,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:55:10\n    |\n LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs << rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -216,7 +216,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n+   |                              help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs << rhs;\n    |            --- value moved here\n LL |     drop(lhs);\n@@ -227,9 +227,9 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:61:10\n    |\n LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `A: Copy +`\n LL |     lhs >> rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n@@ -241,7 +241,7 @@ error[E0382]: use of moved value: `rhs`\n LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n    |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n+   |                              help: consider adding a `Copy` constraint to this type argument: `B: Copy`\n LL |     lhs >> rhs;\n    |            --- value moved here\n LL |     drop(lhs);"}, {"sha": "8efb73657fa81978f9628046171b1dfd96a93e2d", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -2,9 +2,9 @@ error[E0382]: use of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:8:5\n    |\n LL | fn double_move<T: Add<Output=()>>(x: T) {\n-   |                -                  - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                --                 - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n    |                |\n-   |                consider adding a `Copy` constraint to this type argument\n+   |                help: consider adding a `Copy` constraint to this type argument: `T: Copy +`\n LL |     x\n    |     - value moved here\n LL |     +\n@@ -15,9 +15,9 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:14:5\n    |\n LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n-   |                     -                          - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                     --                         - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n    |                     |\n-   |                     consider adding a `Copy` constraint to this type argument\n+   |                     help: consider adding a `Copy` constraint to this type argument: `T: Copy +`\n LL |     x\n    |     - value moved here\n LL |     +"}, {"sha": "5a0afda013ee6970e7bdcd559ad58feb2f8380fc", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -20,9 +20,9 @@ error[E0382]: use of moved value: `f`\n   --> $DIR/borrowck-unboxed-closures.rs:12:5\n    |\n LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n-   |      -                                - move occurs because `f` has type `F`, which does not implement the `Copy` trait\n+   |      --                               - move occurs because `f` has type `F`, which does not implement the `Copy` trait\n    |      |\n-   |      consider adding a `Copy` constraint to this type argument\n+   |      help: consider adding a `Copy` constraint to this type argument: `F: Copy +`\n LL |     f(1, 2);\n    |     - value moved here\n LL |     f(1, 2);"}, {"sha": "88f0345bde62a335ad082ebbee44222f9479b538", "filename": "src/test/ui/issues/issue-34721.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fissues%2Fissue-34721.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fissues%2Fissue-34721.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.fixed?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+pub trait Foo {\n+    fn zero(self) -> Self;\n+}\n+\n+impl Foo for u32 {\n+    fn zero(self) -> u32 { 0u32 }\n+}\n+\n+pub mod bar {\n+    pub use Foo;\n+    pub fn bar<T: Foo>(x: T) -> T {\n+      x.zero()\n+    }\n+}\n+\n+mod baz {\n+    use bar;\n+    use Foo;\n+    pub fn baz<T: Copy + Foo>(x: T) -> T {\n+        if 0 == 1 {\n+            bar::bar(x.zero())\n+        } else {\n+            x.zero()\n+        };\n+        x.zero()\n+        //~^ ERROR use of moved value\n+    }\n+}\n+\n+fn main() {\n+    let _ = baz::baz(0u32);\n+}"}, {"sha": "14dd01766aa4475b1b4dc6bb8b26b1d88dd23add", "filename": "src/test/ui/issues/issue-34721.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n pub trait Foo {\n     fn zero(self) -> Self;\n }"}, {"sha": "abf65afd7ed9846e0df1073d3a018d88f10fa061", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -1,10 +1,10 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/issue-34721.rs:25:9\n+  --> $DIR/issue-34721.rs:27:9\n    |\n LL |     pub fn baz<T: Foo>(x: T) -> T {\n-   |                -       - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                --      - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n    |                |\n-   |                consider adding a `Copy` constraint to this type argument\n+   |                help: consider adding a `Copy` constraint to this type argument: `T: Copy +`\n LL |         if 0 == 1 {\n LL |             bar::bar(x.zero())\n    |                      - value moved here"}, {"sha": "ead2cceebf857293567757b1c0245c7c4fba5cec", "filename": "src/test/ui/moves/moves-based-on-type-no-recursive-stack-closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -11,9 +11,9 @@ error[E0382]: borrow of moved value: `f`\n   --> $DIR/moves-based-on-type-no-recursive-stack-closure.rs:32:5\n    |\n LL | fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n-   |                -  ----- move occurs because `f` has type `F`, which does not implement the `Copy` trait\n-   |                |\n-   |                consider adding a `Copy` constraint to this type argument\n+   |                   -----                                 - help: consider further restricting type parameter `F`: `, F: Copy`\n+   |                   |\n+   |                   move occurs because `f` has type `F`, which does not implement the `Copy` trait\n LL |     let mut r = R {c: Box::new(f)};\n    |                                - value moved here\n LL |     f(&mut r, false)"}, {"sha": "22f98c2a979b1e1cc538f71d1bd4b1ca4ae8675f", "filename": "src/test/ui/once-cant-call-twice-on-heap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -2,9 +2,9 @@ error[E0382]: use of moved value: `blk`\n   --> $DIR/once-cant-call-twice-on-heap.rs:9:5\n    |\n LL | fn foo<F:FnOnce()>(blk: F) {\n-   |        -           --- move occurs because `blk` has type `F`, which does not implement the `Copy` trait\n+   |        --          --- move occurs because `blk` has type `F`, which does not implement the `Copy` trait\n    |        |\n-   |        consider adding a `Copy` constraint to this type argument\n+   |        help: consider adding a `Copy` constraint to this type argument: `F: Copy +`\n LL |     blk();\n    |     --- value moved here\n LL |     blk();"}, {"sha": "0dbd3b8cd0d5ace1e51b36212d195dc6214e8b84", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02bc412d192549977a9244174cd871b394ce4960/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=02bc412d192549977a9244174cd871b394ce4960", "patch": "@@ -2,9 +2,9 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/unop-move-semantics.rs:8:5\n    |\n LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n-   |                     -                         - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                     --                        - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n    |                     |\n-   |                     consider adding a `Copy` constraint to this type argument\n+   |                     help: consider adding a `Copy` constraint to this type argument: `T: Copy +`\n LL |     !x;\n    |      - value moved here\n LL | "}]}