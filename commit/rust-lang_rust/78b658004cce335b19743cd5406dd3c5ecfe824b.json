{"sha": "78b658004cce335b19743cd5406dd3c5ecfe824b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YjY1ODAwNGNjZTMzNWIxOTc0M2NkNTQwNmRkM2M1ZWNmZTgyNGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-31T13:24:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-08T17:31:46Z"}, "message": "Miri test: call 'cargo miri test' and use the sysroot it has set up", "tree": {"sha": "23886df8a905a20b346be0fde7cc7805384f593c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23886df8a905a20b346be0fde7cc7805384f593c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b658004cce335b19743cd5406dd3c5ecfe824b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b658004cce335b19743cd5406dd3c5ecfe824b", "html_url": "https://github.com/rust-lang/rust/commit/78b658004cce335b19743cd5406dd3c5ecfe824b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b658004cce335b19743cd5406dd3c5ecfe824b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb5f18a520c92f6a26039b75f9e72ddbb985435", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb5f18a520c92f6a26039b75f9e72ddbb985435", "html_url": "https://github.com/rust-lang/rust/commit/ffb5f18a520c92f6a26039b75f9e72ddbb985435"}], "stats": {"total": 89, "additions": 76, "deletions": 13}, "files": [{"sha": "54b689fb062a53ee9a02a8d3b26cf37a72e277f5", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78b658004cce335b19743cd5406dd3c5ecfe824b/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b658004cce335b19743cd5406dd3c5ecfe824b/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=78b658004cce335b19743cd5406dd3c5ecfe824b", "patch": "@@ -143,8 +143,11 @@ fn main() {\n \n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n-        // actually downloaded, so we just always pass the `--sysroot` option.\n-        cmd.arg(\"--sysroot\").arg(&sysroot);\n+        // actually downloaded, so we just always pass the `--sysroot` option,\n+        // unless one is already set.\n+        if !args.iter().any(|arg| arg == \"--sysroot\") {\n+            cmd.arg(\"--sysroot\").arg(&sysroot);\n+        }\n \n         cmd.arg(\"-Zexternal-macro-backtrace\");\n "}, {"sha": "5a1f8ead9f2c4780c3124810f695a53db7431aea", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/78b658004cce335b19743cd5406dd3c5ecfe824b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b658004cce335b19743cd5406dd3c5ecfe824b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=78b658004cce335b19743cd5406dd3c5ecfe824b", "patch": "@@ -389,26 +389,86 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let Some(miri) = miri {\n-            let mut cargo = tool::prepare_tool_cargo(builder,\n-                                                 compiler,\n-                                                 Mode::ToolRustc,\n-                                                 host,\n-                                                 \"test\",\n-                                                 \"src/tools/miri\",\n-                                                 SourceType::Submodule,\n-                                                 &[]);\n+            // # Run `cargo miri setup`.\n+            let mut cargo = tool::prepare_tool_cargo(\n+                builder,\n+                compiler,\n+                Mode::ToolRustc,\n+                host,\n+                \"run\",\n+                \"src/tools/miri\",\n+                SourceType::Submodule,\n+                &[],\n+            );\n+            cargo\n+                .arg(\"--bin\")\n+                .arg(\"cargo-miri\")\n+                .arg(\"--\")\n+                .arg(\"miri\")\n+                .arg(\"setup\");\n+\n+            // Tell `cargo miri` not to worry about the sysroot mismatch (we built with\n+            // stage1 but run with stage2).\n+            cargo.env(\"MIRI_SKIP_SYSROOT_CHECK\", \"1\");\n+            // Tell `cargo miri setup` where to find the sources.\n+            cargo.env(\"XARGO_RUST_SRC\", builder.src.join(\"src\"));\n+            // Make sure the libstd gets built without debug assertions.\n+            cargo.env(\"RUSTC_DEBUG_ASSERTIONS\", \"false\");\n+\n+            if !try_run(builder, &mut cargo) {\n+                return;\n+            }\n+\n+            // # Determine where Miri put its sysroot.\n+            // To this end, we run `cargo miri setup --env` and capture the output.\n+            // (We do this separately from the above so that when the setup actually\n+            // happens we get some output.)\n+            // We re-use the `cargo` from above.\n+            cargo.arg(\"--env\");\n+\n+            // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n+            let miri_sysroot = if builder.config.dry_run {\n+                String::new()\n+            } else {\n+                let out = cargo.output()\n+                    .expect(\"We already ran `cargo miri setup` before and that worked\");\n+                assert!(out.status.success(), \"`cargo miri setup` returned with non-0 exit code\");\n+                // Output is \"MIRI_SYSROOT=<str>\\n\".\n+                let stdout = String::from_utf8(out.stdout)\n+                    .expect(\"`cargo miri setup` stdout is not valid UTF-8\");\n+                let stdout = stdout.trim();\n+                builder.verbose(&format!(\"`cargo miri setup --env` returned: {:?}\", stdout));\n+                let sysroot = stdout.splitn(2, '=')\n+                    .nth(1).expect(\"`cargo miri setup` stdout did not contain '='\");\n+                sysroot.to_owned()\n+            };\n+\n+            // # Run `cargo test`.\n+            let mut cargo = tool::prepare_tool_cargo(\n+                builder,\n+                compiler,\n+                Mode::ToolRustc,\n+                host,\n+                \"test\",\n+                \"src/tools/miri\",\n+                SourceType::Submodule,\n+                &[],\n+            );\n \n             // miri tests need to know about the stage sysroot\n-            cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n+            cargo.env(\"MIRI_SYSROOT\", miri_sysroot);\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             cargo.env(\"MIRI_PATH\", miri);\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run(builder, &mut cargo) {\n-                builder.save_toolstate(\"miri\", ToolState::TestPass);\n+            if !try_run(builder, &mut cargo) {\n+                return;\n             }\n+\n+            // # Done!\n+            builder.save_toolstate(\"miri\", ToolState::TestPass);\n         } else {\n             eprintln!(\"failed to test miri: could not build\");\n         }"}]}