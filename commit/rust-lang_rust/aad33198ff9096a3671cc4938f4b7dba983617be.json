{"sha": "aad33198ff9096a3671cc4938f4b7dba983617be", "node_id": "C_kwDOAAsO6NoAKGFhZDMzMTk4ZmY5MDk2YTM2NzFjYzQ5MzhmNGI3ZGJhOTgzNjE3YmU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-14T11:30:23Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T09:01:44Z"}, "message": "Remove a fishy Clone impl", "tree": {"sha": "5e37a3c166f1e184dcb20fe1778d873fa8be3fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e37a3c166f1e184dcb20fe1778d873fa8be3fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aad33198ff9096a3671cc4938f4b7dba983617be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aad33198ff9096a3671cc4938f4b7dba983617be", "html_url": "https://github.com/rust-lang/rust/commit/aad33198ff9096a3671cc4938f4b7dba983617be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aad33198ff9096a3671cc4938f4b7dba983617be/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d06f9c747bc791d7d6902248d851da98616a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d06f9c747bc791d7d6902248d851da98616a57", "html_url": "https://github.com/rust-lang/rust/commit/35d06f9c747bc791d7d6902248d851da98616a57"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "9e9c3c6b9d70a270ae2970a0856e02eeb7922795", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=aad33198ff9096a3671cc4938f4b7dba983617be", "patch": "@@ -481,14 +481,6 @@ impl<T: Default> Default for Lock<T> {\n     }\n }\n \n-// FIXME: Probably a bad idea\n-impl<T: Clone> Clone for Lock<T> {\n-    #[inline]\n-    fn clone(&self) -> Self {\n-        Lock::new(self.borrow().clone())\n-    }\n-}\n-\n #[derive(Debug, Default)]\n pub struct RwLock<T>(InnerRwLock<T>);\n "}, {"sha": "1f8b650e34cfc9f082e4c807129dd75fdf3ed84e", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=aad33198ff9096a3671cc4938f4b7dba983617be", "patch": "@@ -263,7 +263,8 @@ impl AllocDecodingState {\n     }\n \n     pub fn new(data_offsets: Vec<u32>) -> Self {\n-        let decoding_state = vec![Lock::new(State::Empty); data_offsets.len()];\n+        let decoding_state =\n+            std::iter::repeat_with(|| Lock::new(State::Empty)).take(data_offsets.len()).collect();\n \n         Self { decoding_state, data_offsets }\n     }"}, {"sha": "6e862db0b2547e98e3b91f7bf106dd5264dee2a8", "filename": "compiler/rustc_query_system/src/cache.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_query_system%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_query_system%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fcache.rs?ref=aad33198ff9096a3671cc4938f4b7dba983617be", "patch": "@@ -7,11 +7,16 @@ use rustc_data_structures::sync::Lock;\n \n use std::hash::Hash;\n \n-#[derive(Clone)]\n pub struct Cache<Key, Value> {\n     hashmap: Lock<FxHashMap<Key, WithDepNode<Value>>>,\n }\n \n+impl<Key: Clone, Value: Clone> Clone for Cache<Key, Value> {\n+    fn clone(&self) -> Self {\n+        Self { hashmap: Lock::new(self.hashmap.borrow().clone()) }\n+    }\n+}\n+\n impl<Key, Value> Default for Cache<Key, Value> {\n     fn default() -> Self {\n         Self { hashmap: Default::default() }"}, {"sha": "11cd5811be8b993fd4163c9508f6d3745820907e", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad33198ff9096a3671cc4938f4b7dba983617be/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=aad33198ff9096a3671cc4938f4b7dba983617be", "patch": "@@ -1318,7 +1318,6 @@ pub struct SourceFileDiffs {\n }\n \n /// A single source in the [`SourceMap`].\n-#[derive(Clone)]\n pub struct SourceFile {\n     /// The name of the file that the source came from. Source that doesn't\n     /// originate from files has names between angle brackets by convention\n@@ -1349,6 +1348,25 @@ pub struct SourceFile {\n     pub cnum: CrateNum,\n }\n \n+impl Clone for SourceFile {\n+    fn clone(&self) -> Self {\n+        Self {\n+            name: self.name.clone(),\n+            src: self.src.clone(),\n+            src_hash: self.src_hash.clone(),\n+            external_src: Lock::new(self.external_src.borrow().clone()),\n+            start_pos: self.start_pos.clone(),\n+            end_pos: self.end_pos.clone(),\n+            lines: Lock::new(self.lines.borrow().clone()),\n+            multibyte_chars: self.multibyte_chars.clone(),\n+            non_narrow_chars: self.non_narrow_chars.clone(),\n+            normalized_pos: self.normalized_pos.clone(),\n+            name_hash: self.name_hash.clone(),\n+            cnum: self.cnum.clone(),\n+        }\n+    }\n+}\n+\n impl<S: Encoder> Encodable<S> for SourceFile {\n     fn encode(&self, s: &mut S) {\n         self.name.encode(s);"}]}