{"sha": "7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "node_id": "C_kwDOAAsO6NoAKDdmNGNjMTc4ZjA3ZmNhOThhZWUxYjU4YmI0ZjgyYjJmNDVmOGFmYWM", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-04T03:25:36Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-11T19:40:18Z"}, "message": "Address the new odd backticks tidy lint in compiler/", "tree": {"sha": "41c6dcf644b73c38a8246ce82c1061814231d016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41c6dcf644b73c38a8246ce82c1061814231d016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "html_url": "https://github.com/rust-lang/rust/commit/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a686bf41dbaf065203336c1e99e0406de621587", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a686bf41dbaf065203336c1e99e0406de621587", "html_url": "https://github.com/rust-lang/rust/commit/7a686bf41dbaf065203336c1e99e0406de621587"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "6b3053fdfac7e81ca8f5efc57cf9b9f61b5aef7a", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -1052,6 +1052,7 @@ impl<'a> MethodDef<'a> {\n     ///         ::core::hash::Hash::hash(&{ self.y }, state)\n     ///     }\n     /// }\n+    /// ```\n     fn expand_struct_method_body<'b>(\n         &self,\n         cx: &mut ExtCtxt<'_>,"}, {"sha": "978141917c6b0cac9882ab22b0d0445084de4fd8", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -438,6 +438,7 @@ fn build_enum_variant_member_di_node<'ll, 'tcx>(\n ///         DW_TAG_structure_type            (type of variant 1)\n ///         DW_TAG_structure_type            (type of variant 2)\n ///         DW_TAG_structure_type            (type of variant 3)\n+/// ```\n struct VariantMemberInfo<'a, 'll> {\n     variant_index: VariantIdx,\n     variant_name: Cow<'a, str>,"}, {"sha": "b18e8758d712e60ef96f2279efd66ec9cce2c26e", "filename": "compiler/rustc_error_codes/src/error_codes/E0368.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0368.md?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -41,7 +41,7 @@ impl Add for Foo {\n \n fn main() {\n     let mut x: Foo = Foo(5);\n-    x += Foo(7); // error, `+= cannot be applied to the type `Foo`\n+    x += Foo(7); // error, `+=` cannot be applied to the type `Foo`\n }\n ```\n "}, {"sha": "84d55d524267ebbdf9130a356dd6cd8fde8c763b", "filename": "compiler/rustc_error_codes/src/error_codes/E0710.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0710.md?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -3,14 +3,14 @@ An unknown tool name was found in a scoped lint.\n Erroneous code examples:\n \n ```compile_fail,E0710\n-#[allow(clipp::filter_map)] // error!`\n+#[allow(clipp::filter_map)] // error!\n fn main() {\n     // business logic\n }\n ```\n \n ```compile_fail,E0710\n-#[warn(clipp::filter_map)] // error!`\n+#[warn(clipp::filter_map)] // error!\n fn main() {\n     // business logic\n }"}, {"sha": "22c1e3871175e8782a946e7c102c7f7dedf275dc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let (mention_influencer, influencer_point) =\n             if sup_origin.span().overlaps(param.param_ty_span) {\n                 // Account for `async fn` like in `async-await/issues/issue-62097.rs`.\n-                // The desugaring of `async `fn`s causes `sup_origin` and `param` to point at the same\n+                // The desugaring of `async fn`s causes `sup_origin` and `param` to point at the same\n                 // place (but with different `ctxt`, hence `overlaps` instead of `==` above).\n                 //\n                 // This avoids the following:"}, {"sha": "7e51953599d5a17fdf7b8a27669bd3086a5029f3", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -123,6 +123,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         // see notes on #41697 above\n         let def_path =\n             ty::print::with_forced_impl_filename_line!(tcx.def_path_str(body.source.def_id()));\n+        // ignore-tidy-odd-backticks the literal below is fine\n         write!(file, \"// MIR for `{}\", def_path)?;\n         match body.source.promoted {\n             None => write!(file, \"`\")?,"}, {"sha": "3fb8a6db2d27a61029ec7ba4255334a2a6751986", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -1886,6 +1886,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // let place = Foo::new();\n         // match place { Foo { .. } if { let tmp1 = &place; inspect(*tmp1) }\n         //     => { let tmp2 = place; feed(tmp2) }, ... }\n+        // ```\n         //\n         // And an input like:\n         //"}, {"sha": "c93c26cc04b9e5d29b80b70a9c86237d956f64c3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -2220,7 +2220,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // - `BuiltinDerivedObligation` with a generator witness (A)\n         // - `BuiltinDerivedObligation` with a generator (A)\n         // - `BuiltinDerivedObligation` with `impl std::future::Future` (A)\n-        // - `BindingObligation` with `impl_send (Send requirement)\n+        // - `BindingObligation` with `impl_send` (Send requirement)\n         //\n         // The first obligation in the chain is the most useful and has the generator that captured\n         // the type. The last generator (`outer_generator` below) has information about where the"}, {"sha": "3a053d4c6a997da7434fb893353cafac17831cfb", "filename": "compiler/rustc_type_ir/src/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f4cc178f07fca98aee1b58bb4f82b2f45f8afac/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs?ref=7f4cc178f07fca98aee1b58bb4f82b2f45f8afac", "patch": "@@ -18,7 +18,7 @@\n //!     It defines a \"skeleton\" of how they should be folded.\n //! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n //!   and defines the folding \"skeleton\" for these types.\n-//! - `TypeFolder`/`FallibleTypeFolder. One of these is implemented for each\n+//! - `TypeFolder`/`FallibleTypeFolder`. One of these is implemented for each\n //!   folder. This defines how types of interest are folded.\n //!\n //! This means each fold is a mixture of (a) generic folding operations, and (b)"}]}