{"sha": "feb91f3216c7a60c9f7da582b3a02551fe73bb40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYjkxZjMyMTZjN2E2MGM5ZjdkYTU4MmIzYTAyNTUxZmU3M2JiNDA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-21T12:21:11Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-21T12:41:23Z"}, "message": "rustc: improve error messages from wrong --pretty flowgraph use.\n\nThis defers to .fatal and .span_fatal for errors (rather than `fail!`\nwhich prints the ICE message). It also adds the span lookup when an id\ndoesn't correspond to a block, to show what it is pointing at.\n\nIt also makes the argument parser slightly looser, so that passing\n`--pretty flowgraph` recognises the `flowgraph` part and suggests to use\nan integer.", "tree": {"sha": "ba8bcfb15e80b453337127a5373a875cba90a2a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8bcfb15e80b453337127a5373a875cba90a2a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb91f3216c7a60c9f7da582b3a02551fe73bb40", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb91f3216c7a60c9f7da582b3a02551fe73bb40", "html_url": "https://github.com/rust-lang/rust/commit/feb91f3216c7a60c9f7da582b3a02551fe73bb40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb91f3216c7a60c9f7da582b3a02551fe73bb40/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5365af2c4281f2808ffa35faf6f53411814267", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5365af2c4281f2808ffa35faf6f53411814267", "html_url": "https://github.com/rust-lang/rust/commit/dd5365af2c4281f2808ffa35faf6f53411814267"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "f51735afaceac8b6a79e72b899ec56b8385e5613", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/feb91f3216c7a60c9f7da582b3a02551fe73bb40/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb91f3216c7a60c9f7da582b3a02551fe73bb40/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=feb91f3216c7a60c9f7da582b3a02551fe73bb40", "patch": "@@ -653,11 +653,22 @@ pub fn pretty_print_input(sess: Session,\n         PpmFlowGraph(nodeid) => {\n             let ast_map = ast_map.expect(\"--pretty flowgraph missing ast_map\");\n             let node = ast_map.find(nodeid).unwrap_or_else(|| {\n-                fail!(\"--pretty flowgraph=id couldn't find id: {}\", id)\n+                sess.fatal(format_strbuf!(\"--pretty flowgraph couldn't find id: {}\",\n+                                          nodeid).as_slice())\n             });\n             let block = match node {\n                 syntax::ast_map::NodeBlock(block) => block,\n-                _ => fail!(\"--pretty=flowgraph needs block, got {:?}\", node)\n+                _ => {\n+                    let message = format_strbuf!(\"--pretty=flowgraph needs block, got {:?}\",\n+                                                 node);\n+\n+                    // point to what was found, if there's an\n+                    // accessible span.\n+                    match ast_map.opt_span(nodeid) {\n+                        Some(sp) => sess.span_fatal(sp, message.as_slice()),\n+                        None => sess.fatal(message.as_slice())\n+                    }\n+                }\n             };\n             let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map);\n             print_flowgraph(analysis, block, out)"}, {"sha": "06d62c82ce1f2a0e0c38940adddd0edb84fc085a", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feb91f3216c7a60c9f7da582b3a02551fe73bb40/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb91f3216c7a60c9f7da582b3a02551fe73bb40/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=feb91f3216c7a60c9f7da582b3a02551fe73bb40", "patch": "@@ -302,11 +302,12 @@ pub fn parse_pretty(sess: &Session, name: &str) -> PpMode {\n         (None, \"typed\")        => PpmTyped,\n         (None, \"expanded,identified\") => PpmExpandedIdentified,\n         (None, \"identified\")   => PpmIdentified,\n-        (Some(s), \"flowgraph\") => {\n-             match from_str(s) {\n+        (arg, \"flowgraph\") => {\n+             match arg.and_then(from_str) {\n                  Some(id) => PpmFlowGraph(id),\n-                 None => sess.fatal(format!(\"`pretty flowgraph=<nodeid>` needs \\\n-                                             an integer <nodeid>; got {}\", s))\n+                 None => sess.fatal(format_strbuf!(\"`pretty flowgraph=<nodeid>` needs \\\n+                                                     an integer <nodeid>; got {}\",\n+                                                   arg.unwrap_or(\"nothing\")).as_slice())\n              }\n         }\n         _ => {"}, {"sha": "d0b820044dab2ab2a475aeb4bff9b30c916a4e71", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/feb91f3216c7a60c9f7da582b3a02551fe73bb40/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb91f3216c7a60c9f7da582b3a02551fe73bb40/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=feb91f3216c7a60c9f7da582b3a02551fe73bb40", "patch": "@@ -388,8 +388,8 @@ impl Map {\n         f(attrs)\n     }\n \n-    pub fn span(&self, id: NodeId) -> Span {\n-        match self.find(id) {\n+    pub fn opt_span(&self, id: NodeId) -> Option<Span> {\n+        let sp = match self.find(id) {\n             Some(NodeItem(item)) => item.span,\n             Some(NodeForeignItem(foreign_item)) => foreign_item.span,\n             Some(NodeTraitMethod(trait_method)) => {\n@@ -406,8 +406,14 @@ impl Map {\n             Some(NodePat(pat)) => pat.span,\n             Some(NodeBlock(block)) => block.span,\n             Some(NodeStructCtor(_)) => self.expect_item(self.get_parent(id)).span,\n-            _ => fail!(\"node_span: could not find span for id {}\", id),\n-        }\n+            _ => return None,\n+        };\n+        Some(sp)\n+    }\n+\n+    pub fn span(&self, id: NodeId) -> Span {\n+        self.opt_span(id)\n+            .unwrap_or_else(|| fail!(\"AstMap.span: could not find span for id {}\", id))\n     }\n \n     pub fn node_to_str(&self, id: NodeId) -> StrBuf {"}]}