{"sha": "48c70d68637536cc2922c1a7c2a612877705a2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YzcwZDY4NjM3NTM2Y2MyOTIyYzFhN2MyYTYxMjg3NzcwNWEyZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-13T22:23:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T20:23:34Z"}, "message": "Replace `assert_no_late_bound_regions` with\n`no_late_bound_regions().unwrap()`, which allows us to write code that\ndoesn't necessarily *fail* when there are higher-ranked trait bounds.", "tree": {"sha": "87a0bf93f153b76d620bdec3f0a0ef49b9bf2b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a0bf93f153b76d620bdec3f0a0ef49b9bf2b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c70d68637536cc2922c1a7c2a612877705a2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c70d68637536cc2922c1a7c2a612877705a2ed", "html_url": "https://github.com/rust-lang/rust/commit/48c70d68637536cc2922c1a7c2a612877705a2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c70d68637536cc2922c1a7c2a612877705a2ed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d65ab2e9d805824b69565129fa3780e50f121e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92d65ab2e9d805824b69565129fa3780e50f121e", "html_url": "https://github.com/rust-lang/rust/commit/92d65ab2e9d805824b69565129fa3780e50f121e"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "8dbac7f515ea8fc23412fda8f8c49192efceaecf", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -838,7 +838,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                     // the method call infrastructure should have\n                     // replaced all late-bound regions with variables:\n                     let self_ty = ty::ty_fn_sig(method_ty).input(0);\n-                    let self_ty = ty::assert_no_late_bound_regions(self.tcx(), &self_ty);\n+                    let self_ty = ty::no_late_bound_regions(self.tcx(), &self_ty).unwrap();\n \n                     let (m, r) = match self_ty.sty {\n                         ty::ty_rptr(r, ref m) => (m.mutbl, r),"}, {"sha": "6ce5fd073419835fbf51652ddc16a67ed3d6a3f9", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -905,8 +905,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         let base_cmt = match method_ty {\n             Some(method_ty) => {\n                 let ref_ty =\n-                    ty::assert_no_late_bound_regions(\n-                        self.tcx(), &ty::ty_fn_ret(method_ty)).unwrap();\n+                    ty::no_late_bound_regions(\n+                        self.tcx(), &ty::ty_fn_ret(method_ty)).unwrap().unwrap();\n                 self.cat_rvalue_node(node.id(), node.span(), ref_ty)\n             }\n             None => base_cmt\n@@ -996,7 +996,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n                 // FIXME(#20649) -- why are we using the `self_ty` as the element type...?\n                 let self_ty = ty::ty_fn_sig(method_ty).input(0);\n-                ty::assert_no_late_bound_regions(self.tcx(), &self_ty)\n+                ty::no_late_bound_regions(self.tcx(), &self_ty).unwrap()\n             }\n             None => {\n                 match ty::array_element_ty(self.tcx(), base_cmt.ty) {\n@@ -1336,8 +1336,9 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         // types are generated by method resolution and always have\n         // all late-bound regions fully instantiated, so we just want\n         // to skip past the binder.\n-        ty::assert_no_late_bound_regions(self.tcx(), &ty::ty_fn_ret(method_ty))\n-            .unwrap() // overloaded ops do not diverge, either\n+        ty::no_late_bound_regions(self.tcx(), &ty::ty_fn_ret(method_ty))\n+           .unwrap()\n+           .unwrap() // overloaded ops do not diverge, either\n     }\n }\n "}, {"sha": "db8a6eef67079a3e2c698f14060e135b63913970", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -4384,8 +4384,8 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n                                     // overloaded deref operators have all late-bound\n                                     // regions fully instantiated and coverge\n                                     let fn_ret =\n-                                        ty::assert_no_late_bound_regions(cx,\n-                                                                         &ty_fn_ret(method_ty));\n+                                        ty::no_late_bound_regions(cx,\n+                                                                  &ty_fn_ret(method_ty)).unwrap();\n                                     adjusted_ty = fn_ret.unwrap();\n                                 }\n                                 None => {}\n@@ -5186,7 +5186,7 @@ impl<'tcx> VariantInfo<'tcx> {\n                 let arg_tys = if args.len() > 0 {\n                     // the regions in the argument types come from the\n                     // enum def'n, and hence will all be early bound\n-                    ty::assert_no_late_bound_regions(cx, &ty_fn_args(ctor_ty))\n+                    ty::no_late_bound_regions(cx, &ty_fn_args(ctor_ty)).unwrap()\n                 } else {\n                     Vec::new()\n                 };\n@@ -6677,14 +6677,17 @@ pub fn binds_late_bound_regions<'tcx, T>(\n     count_late_bound_regions(tcx, value) > 0\n }\n \n-pub fn assert_no_late_bound_regions<'tcx, T>(\n+pub fn no_late_bound_regions<'tcx, T>(\n     tcx: &ty::ctxt<'tcx>,\n     value: &Binder<T>)\n-    -> T\n+    -> Option<T>\n     where T : TypeFoldable<'tcx> + Repr<'tcx> + Clone\n {\n-    assert!(!binds_late_bound_regions(tcx, value));\n-    value.0.clone()\n+    if binds_late_bound_regions(tcx, value) {\n+        None\n+    } else {\n+        Some(value.0.clone())\n+    }\n }\n \n /// Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also"}, {"sha": "7a05cc5527662d4d5cf03c57e9ba373662eec22d", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -781,8 +781,8 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let ix_datum = unpack_datum!(bcx, trans(bcx, idx));\n \n             let ref_ty = // invoked methods have LB regions instantiated:\n-                ty::assert_no_late_bound_regions(\n-                    bcx.tcx(), &ty::ty_fn_ret(method_ty)).unwrap();\n+                ty::no_late_bound_regions(\n+                    bcx.tcx(), &ty::ty_fn_ret(method_ty)).unwrap().unwrap();\n             let elt_ty = match ty::deref(ref_ty, true) {\n                 None => {\n                     bcx.tcx().sess.span_bug(index_expr.span,\n@@ -2214,8 +2214,8 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             };\n \n             let ref_ty = // invoked methods have their LB regions instantiated\n-                ty::assert_no_late_bound_regions(\n-                    ccx.tcx(), &ty::ty_fn_ret(method_ty)).unwrap();\n+                ty::no_late_bound_regions(\n+                    ccx.tcx(), &ty::ty_fn_ret(method_ty)).unwrap().unwrap();\n             let scratch = rvalue_scratch_datum(bcx, ref_ty, \"overloaded_deref\");\n \n             unpack_result!(bcx, trans_overloaded_op(bcx, expr, method_call,"}, {"sha": "0d30741978a5a5c109a285b04bbf142045ac3509", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -509,7 +509,7 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n     let ctor_scheme = ty::lookup_item_type(tcx, enum_def);\n     let ctor_predicates = ty::lookup_predicates(tcx, enum_def);\n     let path_scheme = if ty::is_fn_ty(ctor_scheme.ty) {\n-        let fn_ret = ty::assert_no_late_bound_regions(tcx, &ty::ty_fn_ret(ctor_scheme.ty));\n+        let fn_ret = ty::no_late_bound_regions(tcx, &ty::ty_fn_ret(ctor_scheme.ty)).unwrap();\n         ty::TypeScheme {\n             ty: fn_ret.unwrap(),\n             generics: ctor_scheme.generics,"}, {"sha": "7354ea7377c36126f40d9e22d25e83177ae2d09c", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -367,8 +367,8 @@ impl<'tcx> DeferredCallResolution<'tcx> for CallResolution<'tcx> {\n                 // (This always bites me, should find a way to\n                 // refactor it.)\n                 let method_sig =\n-                    ty::assert_no_late_bound_regions(fcx.tcx(),\n-                                                     ty::ty_fn_sig(method_callee.ty));\n+                    ty::no_late_bound_regions(fcx.tcx(),\n+                                              ty::ty_fn_sig(method_callee.ty)).unwrap();\n \n                 debug!(\"attempt_resolution: method_callee={}\",\n                        method_callee.repr(fcx.tcx()));"}, {"sha": "ee8bf8b76276c4e283fac517b5b40f39a3e348ce", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -2050,8 +2050,8 @@ fn make_overloaded_lvalue_return_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     match method {\n         Some(method) => {\n             let ref_ty = // invoked methods have all LB regions instantiated\n-                ty::assert_no_late_bound_regions(\n-                    fcx.tcx(), &ty::ty_fn_ret(method.ty));\n+                ty::no_late_bound_regions(\n+                    fcx.tcx(), &ty::ty_fn_ret(method.ty)).unwrap();\n             match method_call {\n                 Some(method_call) => {\n                     fcx.inh.method_map.borrow_mut().insert(method_call,"}, {"sha": "ba150138aa738933a6a712667930c8648ffc12ee", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -624,7 +624,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n                     constrain_call(rcx, expr, Some(&**base),\n                                    None::<ast::Expr>.iter(), true);\n                     let fn_ret = // late-bound regions in overloaded method calls are instantiated\n-                        ty::assert_no_late_bound_regions(rcx.tcx(), &ty::ty_fn_ret(method.ty));\n+                        ty::no_late_bound_regions(rcx.tcx(), &ty::ty_fn_ret(method.ty)).unwrap();\n                     fn_ret.unwrap()\n                 }\n                 None => rcx.resolve_node_type(base.id)\n@@ -971,7 +971,7 @@ fn constrain_autoderefs<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n                 // was applied on the base type, as that is always the case.\n                 let fn_sig = ty::ty_fn_sig(method.ty);\n                 let fn_sig = // late-bound regions should have been instantiated\n-                    ty::assert_no_late_bound_regions(rcx.tcx(), fn_sig);\n+                    ty::no_late_bound_regions(rcx.tcx(), fn_sig).unwrap();\n                 let self_ty = fn_sig.inputs[0];\n                 let (m, r) = match self_ty.sty {\n                     ty::ty_rptr(r, ref m) => (m.mutbl, r),"}, {"sha": "2adc809f7ac041fc7366c7da547639820bd2f9d5", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c70d68637536cc2922c1a7c2a612877705a2ed/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=48c70d68637536cc2922c1a7c2a612877705a2ed", "patch": "@@ -578,8 +578,8 @@ fn enum_variants<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     // the regions in the argument types come from the\n                     // enum def'n, and hence will all be early bound\n                     let arg_tys =\n-                        ty::assert_no_late_bound_regions(\n-                            fcx.tcx(), &ty::ty_fn_args(ctor_ty));\n+                        ty::no_late_bound_regions(\n+                            fcx.tcx(), &ty::ty_fn_args(ctor_ty)).unwrap();\n                     AdtVariant {\n                         fields: args.iter().enumerate().map(|(index, arg)| {\n                             let arg_ty = arg_tys[index];"}]}