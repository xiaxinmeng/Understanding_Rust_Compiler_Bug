{"sha": "d9241640e8ffe4bca3433204cc04d7e67a7c4171", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjQxNjQwZThmZmU0YmNhMzQzMzIwNGNjMDRkN2U2N2E3YzQxNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T21:28:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T21:28:38Z"}, "message": "Auto merge of #6435 - xFrednet:5552-false-positive-match-single-binding, r=ebroto\n\nFixing a false positive for the `match_single_binding` lint #5552\n\nThis is a fix for a false positive in the `match_single_binding` lint when using `#[cfg()]` on a branch. It is sadly a bit hacky but maybe the best solution as rust removes the other branch from the AST before we can even validate it. This fix looks at the code snippet itself and returns if it includes another thick arrow `=>` besides the one matching arm we found. This can again cause false negatives if someone has the following code:\n```rust\nmatch x {\n    // => <-- Causes a false negative\n    _ => 1,\n}\n```\n\nI thought about making the code more complex and maybe validating against other things like the `#[cfg()]` macro but I believe that this is the best solution. This has basically switched the issue from a false positive to a false negative in a very specific case.\n\nI'm happy to make some changes if you have any suggestions \ud83d\ude43.\n\n---\nFixes #5552\n\nchangelog: Fixed a false positive in the `match_single_binding` lint with `#[cfg()]` macro", "tree": {"sha": "718c30d2c73e414cb1bbba48f6d6495443914dfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/718c30d2c73e414cb1bbba48f6d6495443914dfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9241640e8ffe4bca3433204cc04d7e67a7c4171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9241640e8ffe4bca3433204cc04d7e67a7c4171", "html_url": "https://github.com/rust-lang/rust/commit/d9241640e8ffe4bca3433204cc04d7e67a7c4171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9241640e8ffe4bca3433204cc04d7e67a7c4171/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "html_url": "https://github.com/rust-lang/rust/commit/a642b42a46e1ae7e82945b7cb88c75d4c06529bf"}, {"sha": "a37af06fea574f3d9f4d3cca58a70cd545523486", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37af06fea574f3d9f4d3cca58a70cd545523486", "html_url": "https://github.com/rust-lang/rust/commit/a37af06fea574f3d9f4d3cca58a70cd545523486"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "04b35835c6b8eeed5325e41c2e01763c2d9ba99b", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d9241640e8ffe4bca3433204cc04d7e67a7c4171/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9241640e8ffe4bca3433204cc04d7e67a7c4171/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=d9241640e8ffe4bca3433204cc04d7e67a7c4171", "patch": "@@ -4,8 +4,8 @@ use crate::utils::usage::is_unused;\n use crate::utils::{\n     expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n     is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg, remove_blocks,\n-    snippet, snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n-    span_lint_and_then,\n+    snippet, snippet_block, snippet_opt, snippet_with_applicability, span_lint_and_help, span_lint_and_note,\n+    span_lint_and_sugg, span_lint_and_then,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n@@ -1237,6 +1237,24 @@ fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[A\n     if in_macro(expr.span) || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n         return;\n     }\n+\n+    // HACK:\n+    // This is a hack to deal with arms that are excluded by macros like `#[cfg]`. It is only used here\n+    // to prevent false positives as there is currently no better way to detect if code was excluded by\n+    // a macro. See PR #6435\n+    if_chain! {\n+        if let Some(match_snippet) = snippet_opt(cx, expr.span);\n+        if let Some(arm_snippet) = snippet_opt(cx, arms[0].span);\n+        if let Some(ex_snippet) = snippet_opt(cx, ex.span);\n+        let rest_snippet = match_snippet.replace(&arm_snippet, \"\").replace(&ex_snippet, \"\");\n+        if rest_snippet.contains(\"=>\");\n+        then {\n+            // The code it self contains another thick arrow \"=>\"\n+            // -> Either another arm or a comment\n+            return;\n+        }\n+    }\n+\n     let matched_vars = ex.span;\n     let bind_names = arms[0].pat.span;\n     let match_body = remove_blocks(&arms[0].body);"}, {"sha": "526e94b10bd0ee460bf57dc993222fc47da3b2c8", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9241640e8ffe4bca3433204cc04d7e67a7c4171/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d9241640e8ffe4bca3433204cc04d7e67a7c4171/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=d9241640e8ffe4bca3433204cc04d7e67a7c4171", "patch": "@@ -87,4 +87,32 @@ fn main() {\n             unwrapped\n         })\n         .collect::<Vec<u8>>();\n+    // Ok\n+    let x = 1;\n+    match x {\n+        #[cfg(disabled_feature)]\n+        0 => println!(\"Disabled branch\"),\n+        _ => println!(\"Enabled branch\"),\n+    }\n+    // Lint\n+    let x = 1;\n+    let y = 1;\n+    println!(\"Single branch\");\n+    // Ok\n+    let x = 1;\n+    let y = 1;\n+    match match y {\n+        0 => 1,\n+        _ => 2,\n+    } {\n+        #[cfg(disabled_feature)]\n+        0 => println!(\"Array index start\"),\n+        _ => println!(\"Not an array index start\"),\n+    }\n+    // False negative\n+    let x = 1;\n+    match x {\n+        // =>\n+        _ => println!(\"Not an array index start\"),\n+    }\n }"}, {"sha": "6a2ca7c5e9340d132cea73a483a703888ea2ee69", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d9241640e8ffe4bca3433204cc04d7e67a7c4171/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9241640e8ffe4bca3433204cc04d7e67a7c4171/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=d9241640e8ffe4bca3433204cc04d7e67a7c4171", "patch": "@@ -99,4 +99,37 @@ fn main() {\n             unwrapped => unwrapped,\n         })\n         .collect::<Vec<u8>>();\n+    // Ok\n+    let x = 1;\n+    match x {\n+        #[cfg(disabled_feature)]\n+        0 => println!(\"Disabled branch\"),\n+        _ => println!(\"Enabled branch\"),\n+    }\n+    // Lint\n+    let x = 1;\n+    let y = 1;\n+    match match y {\n+        0 => 1,\n+        _ => 2,\n+    } {\n+        _ => println!(\"Single branch\"),\n+    }\n+    // Ok\n+    let x = 1;\n+    let y = 1;\n+    match match y {\n+        0 => 1,\n+        _ => 2,\n+    } {\n+        #[cfg(disabled_feature)]\n+        0 => println!(\"Array index start\"),\n+        _ => println!(\"Not an array index start\"),\n+    }\n+    // False negative\n+    let x = 1;\n+    match x {\n+        // =>\n+        _ => println!(\"Not an array index start\"),\n+    }\n }"}, {"sha": "cbbf5d29c02471a024d0ef8c072768030ed9d026", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9241640e8ffe4bca3433204cc04d7e67a7c4171/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9241640e8ffe4bca3433204cc04d7e67a7c4171/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=d9241640e8ffe4bca3433204cc04d7e67a7c4171", "patch": "@@ -167,5 +167,16 @@ LL |             unwrapped\n LL |         })\n    |\n \n-error: aborting due to 11 previous errors\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:112:5\n+   |\n+LL | /     match match y {\n+LL | |         0 => 1,\n+LL | |         _ => 2,\n+LL | |     } {\n+LL | |         _ => println!(\"Single branch\"),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `println!(\"Single branch\");`\n+\n+error: aborting due to 12 previous errors\n "}]}