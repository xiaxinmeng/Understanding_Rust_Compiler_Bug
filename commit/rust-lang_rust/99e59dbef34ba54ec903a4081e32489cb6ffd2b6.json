{"sha": "99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "node_id": "C_kwDOAAsO6NoAKDk5ZTU5ZGJlZjM0YmE1NGVjOTAzYTQwODFlMzI0ODljYjZmZmQyYjY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-15T21:55:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-15T21:55:23Z"}, "message": "Rollup merge of #110364 - matthiaskrgr:anti_clone, r=Nilstrieb\n\nremove redundant clones", "tree": {"sha": "55ab4bfcca11d6837e940a73f980227c634ae792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ab4bfcca11d6837e940a73f980227c634ae792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOx1LCRBK7hj4Ov3rIwAA+aUIAF7votKzPzrH/lBhMZEEnAO0\nev49sL1NpX2om/C4/WyCPcsXOLnUDEe+PKpEknclS0Sdk1wNiHP+onb3O3ZOlcbX\nRsNx6Uw5NIWl9veYhf9lx7LsiRwxiMPgT5CsE0SWlQV+0huBXyjXXN1bZt3Og4Bo\nSEK21dhfsmsSVYOZTrwWyLA3k5yz5DoQjqcJfmdLsjMrfxnYJB1Qol92e4bsI4yC\nXvmrmGtkNzuH1UBNlUZE3v/wZbuPsJG0hh5YqHNV9PMkzDAcTKOZhPX734ZmM7Rt\nOyJN9GDbmeCd4NflhzbR9Po/5VeKOVvLpzhXWUdMLEaAUN9uPaPp6CoKmLOoXFE=\n=k5CH\n-----END PGP SIGNATURE-----\n", "payload": "tree 55ab4bfcca11d6837e940a73f980227c634ae792\nparent be2e8078d7f5f92f422e5e01a49a7a0be077d69a\nparent 1077d574cf626fbe49f1150ade4c931353a01c8e\nauthor Yuki Okushi <jtitor@2k36.org> 1681595723 +0900\ncommitter GitHub <noreply@github.com> 1681595723 +0900\n\nRollup merge of #110364 - matthiaskrgr:anti_clone, r=Nilstrieb\n\nremove redundant clones\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "html_url": "https://github.com/rust-lang/rust/commit/99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e59dbef34ba54ec903a4081e32489cb6ffd2b6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be2e8078d7f5f92f422e5e01a49a7a0be077d69a", "url": "https://api.github.com/repos/rust-lang/rust/commits/be2e8078d7f5f92f422e5e01a49a7a0be077d69a", "html_url": "https://github.com/rust-lang/rust/commit/be2e8078d7f5f92f422e5e01a49a7a0be077d69a"}, {"sha": "1077d574cf626fbe49f1150ade4c931353a01c8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1077d574cf626fbe49f1150ade4c931353a01c8e", "html_url": "https://github.com/rust-lang/rust/commit/1077d574cf626fbe49f1150ade4c931353a01c8e"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "c14c7f2fa0dcc18c142d886d9e2dc658a90f1954", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99e59dbef34ba54ec903a4081e32489cb6ffd2b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e59dbef34ba54ec903a4081e32489cb6ffd2b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "patch": "@@ -570,15 +570,13 @@ impl<'a> Parser<'a> {\n         let expect = tokens_to_string(&expected);\n         let actual = super::token_descr(&self.token);\n         let (msg_exp, (label_sp, label_exp)) = if expected.len() > 1 {\n+            let fmt = format!(\"expected one of {expect}, found {actual}\");\n             let short_expect = if expected.len() > 6 {\n                 format!(\"{} possible tokens\", expected.len())\n             } else {\n-                expect.clone()\n+                expect\n             };\n-            (\n-                format!(\"expected one of {expect}, found {actual}\"),\n-                (self.prev_token.span.shrink_to_hi(), format!(\"expected one of {short_expect}\")),\n-            )\n+            (fmt, (self.prev_token.span.shrink_to_hi(), format!(\"expected one of {short_expect}\")))\n         } else if expected.is_empty() {\n             (\n                 format!(\"unexpected token: {actual}\"),"}, {"sha": "cef982fcb41efccce73719676f8c52ecf898d665", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99e59dbef34ba54ec903a4081e32489cb6ffd2b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e59dbef34ba54ec903a4081e32489cb6ffd2b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "patch": "@@ -2944,22 +2944,25 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             rustc_transmute::Answer::No(reason) => {\n                 let dst = trait_ref.skip_binder().substs.type_at(0);\n                 let src = trait_ref.skip_binder().substs.type_at(1);\n-                let custom_err_msg = format!(\"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\").to_string();\n+                let custom_err_msg = format!(\n+                    \"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\"\n+                );\n                 let reason_msg = match reason {\n                     rustc_transmute::Reason::SrcIsUnspecified => {\n-                        format!(\"`{src}` does not have a well-specified layout\").to_string()\n+                        format!(\"`{src}` does not have a well-specified layout\")\n                     }\n+\n                     rustc_transmute::Reason::DstIsUnspecified => {\n-                        format!(\"`{dst}` does not have a well-specified layout\").to_string()\n+                        format!(\"`{dst}` does not have a well-specified layout\")\n                     }\n+\n                     rustc_transmute::Reason::DstIsBitIncompatible => {\n                         format!(\"At least one value of `{src}` isn't a bit-valid value of `{dst}`\")\n-                            .to_string()\n                     }\n+\n                     rustc_transmute::Reason::DstIsPrivate => format!(\n                         \"`{dst}` is or contains a type or field that is not visible in that scope\"\n-                    )\n-                    .to_string(),\n+                    ),\n                     // FIXME(bryangarza): Include the number of bytes of src and dst\n                     rustc_transmute::Reason::DstIsTooBig => {\n                         format!(\"The size of `{src}` is smaller than the size of `{dst}`\")"}]}