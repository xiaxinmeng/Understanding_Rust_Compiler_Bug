{"sha": "be5fe051a843cfbbc1ba4fcd347b641417181b8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNWZlMDUxYTg0M2NmYmJjMWJhNGZjZDM0N2I2NDE0MTcxODFiOGY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-07T15:07:36Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-12T17:46:43Z"}, "message": "Remove feature(nll) when compare mode is sufficient", "tree": {"sha": "d16da25d562ce3a44718cf1eb9e498acbaff3ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d16da25d562ce3a44718cf1eb9e498acbaff3ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be5fe051a843cfbbc1ba4fcd347b641417181b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be5fe051a843cfbbc1ba4fcd347b641417181b8f", "html_url": "https://github.com/rust-lang/rust/commit/be5fe051a843cfbbc1ba4fcd347b641417181b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be5fe051a843cfbbc1ba4fcd347b641417181b8f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff71b80a85185c5d0ce594c13efddcaca9be54c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff71b80a85185c5d0ce594c13efddcaca9be54c5", "html_url": "https://github.com/rust-lang/rust/commit/ff71b80a85185c5d0ce594c13efddcaca9be54c5"}], "stats": {"total": 1777, "additions": 761, "deletions": 1016}, "files": [{"sha": "0f17976ef49653f872c87009ca6518c3d41dccf9", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -13,7 +13,6 @@\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Error\",{{.*}}extraData: i64 0{{[,)].*}}\n \n #![feature(never_type)]\n-#![feature(nll)]\n \n #[derive(Copy, Clone)]\n pub struct Entity {"}, {"sha": "8348f9a77467888fe5b7273d7e76790a33f5fad9", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,8 +2,6 @@\n \n // ignore-wasm32-bare\n \n-#![feature(nll)]\n-\n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {\n         Some(0) if c => 0,"}, {"sha": "c62f98ea78d1ec1d460401bbfe9f0a3c5993073b", "filename": "src/test/run-fail/issue-51345.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-fail%2Fissue-51345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-fail%2Fissue-51345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-51345.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // error-pattern: thread 'main' panicked at 'explicit panic'\n \n-#![feature(nll)]\n-\n fn main() {\n     let mut vec = vec![];\n     vec.push((vec.len(), panic!()));"}, {"sha": "96d2663500ef0e9ab8e72d1537098f09f850727a", "filename": "src/test/run-pass/borrowck/borrowck-multiple-borrows-interior-boxes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,8 +3,6 @@\n #![allow(unused_variables)]\n // Test case from #39963.\n \n-#![feature(nll)]\n-\n #[derive(Clone)]\n struct Foo(Option<Box<Foo>>, Option<Box<Foo>>);\n "}, {"sha": "fd0e346e2b42dee204376dcdd467c13bd0c46037", "filename": "src/test/run-pass/borrowck/borrowck-unused-mut-locals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(nll)]\n #![deny(unused_mut)]\n \n #[derive(Debug)]"}, {"sha": "1242ae307d39c764fab8af0a1456eb3e4da0f732", "filename": "src/test/run-pass/borrowck/two-phase-bin-ops.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,4 @@\n // run-pass\n-// revisions: lxl nll\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n use std::ops::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign};\n "}, {"sha": "48362d0bb62822273b7d63db9867635399d59921", "filename": "src/test/run-pass/issues/issue-24535-allow-mutable-borrow-in-match-guard.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -5,7 +5,6 @@\n // See further discussion on rust-lang/rust#24535,\n // rust-lang/rfcs#1006, and rust-lang/rfcs#107\n \n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n fn main() {"}, {"sha": "80d815379bec2fa7b272fbc17bcda278ddf2e601", "filename": "src/test/run-pass/issues/issue-48962.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48962.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(unused_must_use)]\n // Test that we are able to reinitialize box with moved referent\n-#![feature(nll)]\n static mut ORDER: [usize; 3] = [0, 0, 0];\n static mut INDEX: usize = 0;\n "}, {"sha": "15571e8bf5b286441a26e1bb2e9abab697fb3f2e", "filename": "src/test/run-pass/issues/issue-51345.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-51345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-51345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-51345.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unreachable_code)]\n-#![feature(nll)]\n \n fn main() {\n     let mut v = Vec::new();"}, {"sha": "9f4d57111bbe982dc4bf816230583c0089a3d1d6", "filename": "src/test/run-pass/nll/issue-47153-generic-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47153-generic-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47153-generic-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47153-generic-const.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,7 +3,6 @@\n // Regression test for #47153: constants in a generic context (such as\n // a trait) used to ICE.\n \n-#![feature(nll)]\n #![allow(warnings)]\n \n trait Foo {"}, {"sha": "280bf081138cc96eacc943060a7a20fc19e21bce", "filename": "src/test/run-pass/nll/issue-47589.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n pub struct DescriptorSet<'a> {\n     pub slots: Vec<AttachInfo<'a, Resources>>\n }"}, {"sha": "3f8587eed41b99aaaccd78a36353f45c2946c914", "filename": "src/test/run-pass/nll/issue-48623-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,8 +2,6 @@\n #![allow(path_statements)]\n #![allow(dead_code)]\n \n-#![feature(nll)]\n-\n struct WithDrop;\n \n impl Drop for WithDrop {"}, {"sha": "ba3eccff495e5c1ba6b5c68578ea929c4ba6c8a1", "filename": "src/test/run-pass/nll/issue-48623-generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,7 +2,6 @@\n #![allow(path_statements)]\n #![allow(dead_code)]\n \n-#![feature(nll)]\n #![feature(generators, generator_trait)]\n \n struct WithDrop;"}, {"sha": "55a2d231e19ff48922b5df0da4f85c04b735795c", "filename": "src/test/run-pass/nll/issue-50343.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50343.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n #![deny(unused_mut)]\n \n fn main() {"}, {"sha": "69d7cdd83a6a1023964889e9c20077daa2ac9e87", "filename": "src/test/run-pass/nll/issue-50461-used-mut-from-moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50461-used-mut-from-moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50461-used-mut-from-moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-50461-used-mut-from-moves.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n #![deny(unused_mut)]\n \n struct Foo {"}, {"sha": "941c9eeb411d9ca5866da76c08bb523a1dca401d", "filename": "src/test/run-pass/nll/issue-53123-raw-pointer-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n #![allow(unused_variables)]\n \n pub trait TryTransform {"}, {"sha": "eb46b30b6b94a16e8d148af8a8d68a8dbb4dda35", "filename": "src/test/run-pass/nll/mutating_references.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fmutating_references.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n struct List<T> {\n     value: T,\n     next: Option<Box<List<T>>>,"}, {"sha": "84ac9bbd0ddc4246c9ef4025f289540093997f95", "filename": "src/test/run-pass/nll/process_or_insert_default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fprocess_or_insert_default.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n use std::collections::HashMap;\n \n fn process_or_insert_default(map: &mut HashMap<usize, String>, key: usize) {"}, {"sha": "e59303d1f788f86dc10ff3095d2f2d4199676b9f", "filename": "src/test/run-pass/nll/rc-loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -6,8 +6,6 @@\n // `x`.  The lexical checker makes this very painful. The NLL checker\n // does not.\n \n-#![feature(nll)]\n-\n use std::rc::Rc;\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "86061c8cd6e87de991958b3f6c5b9da565a03aca", "filename": "src/test/ui/borrowck/borrowck-issue-48962.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Node {\n     elem: i32,\n     next: Option<Box<Node>>,"}, {"sha": "ee174f6736e1e72ebd85c94c4d432a0fdeecec0c", "filename": "src/test/ui/borrowck/borrowck-issue-48962.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `src`\n-  --> $DIR/borrowck-issue-48962.rs:16:5\n+  --> $DIR/borrowck-issue-48962.rs:14:5\n    |\n LL |     let mut src = &mut node;\n    |         ------- move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n@@ -9,7 +9,7 @@ LL |     src.next = None;\n    |     ^^^^^^^^ value used here after move\n \n error[E0382]: use of moved value: `src`\n-  --> $DIR/borrowck-issue-48962.rs:22:5\n+  --> $DIR/borrowck-issue-48962.rs:20:5\n    |\n LL |     let mut src = &mut (22, 44);\n    |         ------- move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait"}, {"sha": "20ab905fec46e591df83e2f5021d6e67c75fcd35", "filename": "src/test/ui/borrowck/issue-10876.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(nll)]\n-\n enum Nat {\n     S(Box<Nat>),\n     Z"}, {"sha": "7d5acb95751ed99d467cfbb43e7cdb1838944316", "filename": "src/test/ui/borrowck/issue-51348-multi-ref-mut-in-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-51348-multi-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-51348-multi-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51348-multi-ref-mut-in-guard.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -8,8 +8,6 @@\n \n // run-pass\n \n-#![feature(nll)]\n-\n fn foo(x: &mut Result<(u32, u32), (u32, u32)>) -> u32 {\n     match *x {\n         Ok((ref mut v, _)) | Err((_, ref mut v)) if *v > 0 => { *v }"}, {"sha": "671e83dfadc8b326709adc993e0a298ca7f125f4", "filename": "src/test/ui/borrowck/issue-52713-bug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,8 +2,6 @@\n // computing liveness that wound up accidentally causing the program\n // below to be accepted.\n \n-#![feature(nll)]\n-\n fn foo<'a>(x: &'a mut u32) -> u32 {\n     let mut x = 22;\n     let y = &x;"}, {"sha": "4abb6fb2c71868674dbf2266cd1c3afae61c9c71", "filename": "src/test/ui/borrowck/issue-52713-bug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/issue-52713-bug.rs:14:5\n+  --> $DIR/issue-52713-bug.rs:12:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here"}, {"sha": "51df40016d8a78032e9d21ea4da358ec1a502d0f", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n #![allow(dead_code)]\n \n #[derive(Debug)]"}, {"sha": "519f1d6fb2791b3107f8530d56ea0b4456750dd9", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:16:13\n+  --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:14:13\n    |\n LL |             *array\n    |             ^^^^^^"}, {"sha": "efa313a9d23f4c2ec6ae533dc923e881d6f79944", "filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,19 +1,11 @@\n-// ignore-compare-mode-nll\n-\n-// revisions: migrate nll\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n fn main() {\n     let mut greeting = \"Hello world!\".to_string();\n     let res = (|| (|| &greeting)())();\n \n     greeting = \"DEALLOCATED\".to_string();\n-    //[migrate]~^ ERROR cannot assign\n-    //[nll]~^^ ERROR cannot assign\n+    //~^ ERROR cannot assign\n     drop(greeting);\n-    //[migrate]~^ ERROR cannot move\n-    //[nll]~^^ ERROR cannot move\n+    //~^ ERROR cannot move\n \n     println!(\"thread result: {:?}\", res);\n }"}, {"sha": "9b1d6fa7d357583c4ffc58d0f7f080fc60d5dfd0", "filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `greeting` because it is borrowed\n-  --> $DIR/issue-58776-borrowck-scans-children.rs:11:5\n+  --> $DIR/issue-58776-borrowck-scans-children.rs:5:5\n    |\n LL |     let res = (|| (|| &greeting)())();\n    |                --      -------- borrow occurs due to use in closure\n@@ -13,7 +13,7 @@ LL |     println!(\"thread result: {:?}\", res);\n    |                                     --- borrow later used here\n \n error[E0505]: cannot move out of `greeting` because it is borrowed\n-  --> $DIR/issue-58776-borrowck-scans-children.rs:14:10\n+  --> $DIR/issue-58776-borrowck-scans-children.rs:7:10\n    |\n LL |     let res = (|| (|| &greeting)())();\n    |                --      -------- borrow occurs due to use in closure", "previous_filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.nll.stderr"}, {"sha": "12222342c95a1d7fbca0ed24924ba2ed7fc09be8", "filename": "src/test/ui/borrowck/two-phase-across-loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Test that a borrow which starts as a 2-phase borrow and gets\n // carried around a loop winds up conflicting with itself.\n \n-#![feature(nll)]\n-\n struct Foo { x: String }\n \n impl Foo {"}, {"sha": "38993a50bf6b20e84b192b15731e221c56a79c4c", "filename": "src/test/ui/borrowck/two-phase-across-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/two-phase-across-loop.rs:19:22\n+  --> $DIR/two-phase-across-loop.rs:17:22\n    |\n LL |         strings.push(foo.get_string());\n    |                      ^^^ mutable borrow starts here in previous iteration of loop"}, {"sha": "bb646d7caf1e2ea917270a3ec137d3fb6e5e9b38", "filename": "src/test/ui/borrowck/two-phase-multi-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Foo {\n }\n "}, {"sha": "33fa4a3a15075ab5fc066359c21e5fe975634991", "filename": "src/test/ui/borrowck/two-phase-multi-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/two-phase-multi-mut.rs:13:5\n+  --> $DIR/two-phase-multi-mut.rs:11:5\n    |\n LL |     foo.method(&mut foo);\n    |     ^^^^------^--------^\n@@ -9,7 +9,7 @@ LL |     foo.method(&mut foo);\n    |     second mutable borrow occurs here\n \n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/two-phase-multi-mut.rs:13:16\n+  --> $DIR/two-phase-multi-mut.rs:11:16\n    |\n LL |     foo.method(&mut foo);\n    |     --- ------ ^^^^^^^^ second mutable borrow occurs here"}, {"sha": "fcc80d9b0cca0a2d62682fd5ae1490f22c0da6a0", "filename": "src/test/ui/c-variadic/variadic-ffi-5.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.rs?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,31 +0,0 @@\n-#![crate_type=\"lib\"]\n-#![no_std]\n-#![feature(c_variadic)]\n-// The tests in this file are similar to that of variadic-ffi-4, but this\n-// one enables nll.\n-#![feature(nll)]\n-\n-use core::ffi::VaList;\n-\n-pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n-    ap //~ ERROR: explicit lifetime required\n-}\n-\n-pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n-    ap //~ ERROR: explicit lifetime required\n-}\n-\n-pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n-    let _ = ap.with_copy(|ap| { ap }); //~ ERROR: lifetime may not live long enough\n-}\n-\n-pub unsafe extern \"C\" fn no_escape3(_: usize, ap0: &mut VaList, mut ap1: ...) {\n-    *ap0 = ap1; //~ ERROR: lifetime may not live long enough\n-}\n-\n-pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-    ap0 = &mut ap1;\n-    //~^ ERROR: lifetime may not live long enough\n-    //~^^ ERROR: lifetime may not live long enough\n-    //~^^^ ERROR: `ap1` does not live long enough\n-}"}, {"sha": "27421010a97c49907d20bf517df7d58e558bea49", "filename": "src/test/ui/c-variadic/variadic-ffi-5.stderr", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,73 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `ap`\n-  --> $DIR/variadic-ffi-5.rs:11:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n-   |                                                       --- help: add explicit lifetime `'a` to the type of `ap`: `core::ffi::VaList<'a>`\n-LL |     ap\n-   |     ^^ lifetime `'a` required\n-\n-error[E0621]: explicit lifetime required in the type of `ap`\n-  --> $DIR/variadic-ffi-5.rs:15:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n-   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaList<'static>`\n-LL |     ap\n-   |     ^^ lifetime `'static` required\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:19:33\n-   |\n-LL |     let _ = ap.with_copy(|ap| { ap });\n-   |                           ---   ^^ returning this value requires that `'1` must outlive `'2`\n-   |                           | |\n-   |                           | return type of closure is core::ffi::VaList<'2>\n-   |                           has type `core::ffi::VaList<'1>`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:23:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape3(_: usize, ap0: &mut VaList, mut ap1: ...) {\n-   |                                               ---               ------- has type `core::ffi::VaList<'1>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaList<'2>`\n-LL |     *ap0 = ap1;\n-   |     ^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:27:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-   |                                               -------               ------- has type `core::ffi::VaList<'2>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaList<'1>`\n-LL |     ap0 = &mut ap1;\n-   |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-5.rs:27:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-   |                                               -------               ------- has type `core::ffi::VaList<'1>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaList<'2>`\n-LL |     ap0 = &mut ap1;\n-   |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error[E0597]: `ap1` does not live long enough\n-  --> $DIR/variadic-ffi-5.rs:27:11\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-   |                                                        - let's call the lifetime of this reference `'1`\n-LL |     ap0 = &mut ap1;\n-   |     ------^^^^^^^^\n-   |     |     |\n-   |     |     borrowed value does not live long enough\n-   |     assignment requires that `ap1` is borrowed for `'1`\n-...\n-LL | }\n-   |  - `ap1` dropped here while still borrowed\n-\n-error: aborting due to 7 previous errors\n-\n-Some errors have detailed explanations: E0597, E0621.\n-For more information about an error, try `rustc --explain E0597`."}, {"sha": "34f61ed5a347410315fd1b79154f36966b181ea7", "filename": "src/test/ui/consts/const-eval/promote_mutable_zst_mir_borrowck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromote_mutable_zst_mir_borrowck.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n pub fn main() {\n     let y: &'static mut [u8; 0] = &mut [];\n }"}, {"sha": "f1947933d67074725646aec5cbfc339f5d461d4d", "filename": "src/test/ui/consts/issue-54224.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n \n use std::borrow::Cow;"}, {"sha": "8dcb4daca3b707a564a8fc7f50bb13e6a2996299", "filename": "src/test/ui/consts/issue-54224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-54224.rs:3:39\n+  --> $DIR/issue-54224.rs:1:39\n    |\n LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]);\n    |                                 ------^^^^^^^^^-\n@@ -9,7 +9,7 @@ LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]);\n    |                                 using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-54224.rs:11:57\n+  --> $DIR/issue-54224.rs:9:57\n    |\n LL | pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n    |                                          ---------------^^^^^^^^^-"}, {"sha": "dc21b9fe8cd1b655d380ba2fd0a00a4dbf5c175a", "filename": "src/test/ui/consts/promote_evaluation_unused_result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fpromote_evaluation_unused_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fpromote_evaluation_unused_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_evaluation_unused_result.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n //compile-pass\n \n-#![feature(nll)]\n-\n fn main() {\n \n     let _: &'static usize = &(loop {}, 1).1;"}, {"sha": "6b6eea36361bf3fef2087c8123a5c34324c1fbad", "filename": "src/test/ui/consts/promote_fn_calls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // aux-build:promotable_const_fn_lib.rs\n \n-#![feature(nll)]\n-\n extern crate promotable_const_fn_lib;\n \n use promotable_const_fn_lib::{foo, Foo};"}, {"sha": "d982f350208e22ac7f1a87e587e3fab30c61c07e", "filename": "src/test/ui/consts/promote_fn_calls_std.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_fn_calls_std.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n fn main() {\n     let x: &'static u8 = &u8::max_value();\n     let x: &'static u16 = &u16::max_value();"}, {"sha": "41cb339f459113313440b56421fb18a76dd1ad88", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,4 @@\n-// revisions: migrate nll\n-// ignore-compare-mode-nll\n-\n #![feature(generators, generator_trait)]\n-#![cfg_attr(nll, feature(nll))]\n use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n \n@@ -14,8 +10,7 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     loop {\n         match Pin::new(&mut g).resume() {\n             GeneratorState::Complete(c) => return c,\n-//[nll]~^ ERROR explicit lifetime required\n-//[migrate]~^^ ERROR explicit lifetime required\n+            //~^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "53d48bc4f56accc7af93fc3555b96cd3d3e5758b", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/generator-region-requirements.rs:16:51\n+  --> $DIR/generator-region-requirements.rs:12:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`", "previous_filename": "src/test/ui/generator/generator-region-requirements.nll.stderr"}, {"sha": "cee3e6d226c12dc47eaa8e3261b94c9624d491e9", "filename": "src/test/ui/generator/generator-with-nll.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,4 @@\n #![feature(generators)]\n-#![feature(nll)]\n \n fn main() {\n     || {"}, {"sha": "14199aeb93056cb3671f7ad93fdb8b3ceb019c22", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0626]: borrow may still be in use when generator yields\n-  --> $DIR/generator-with-nll.rs:8:17\n+  --> $DIR/generator-with-nll.rs:7:17\n    |\n LL |         let b = &mut true;\n    |                 ^^^^^^^^^"}, {"sha": "58d7875ccd03422453d43b4125a183ab7e7e6ae0", "filename": "src/test/ui/impl-trait/closure-calling-parent-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-calling-parent-fn.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Regression test for #54593: the MIR type checker was going wrong\n // when a closure returns the `impl Copy` from its parent fn. It was\n // (incorrectly) replacing the `impl Copy` in its return type with the"}, {"sha": "adaa474474f674ec66ee2eb4ac7e961a0612021d", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -9,7 +9,6 @@\n \n #![allow(dead_code)]\n #![feature(in_band_lifetimes)]\n-#![feature(nll)]\n \n fn foo(x: &'x u32) -> impl Fn() -> &'y u32\n where 'x: 'y"}, {"sha": "204c2ff304114de5beefd933118bcf39b26a5a70", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -9,7 +9,6 @@\n \n #![allow(dead_code)]\n #![feature(in_band_lifetimes)]\n-#![feature(nll)]\n \n trait Trait<'a> { }\n "}, {"sha": "29243699e44fd11a00e210259009f3654856f41b", "filename": "src/test/ui/impl-trait/region-escape-via-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -5,7 +5,6 @@\n \n #![allow(dead_code)]\n #![feature(in_band_lifetimes)]\n-#![feature(nll)]\n \n use std::cell::Cell;\n "}, {"sha": "5c8e322f712d167f370846766c2b63649cfa8908", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/region-escape-via-bound.rs:16:29\n+  --> $DIR/region-escape-via-bound.rs:15:29\n    |\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n    |                             ^^^^^^^^^^^^^^\n    |\n-note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 18:7\n-  --> $DIR/region-escape-via-bound.rs:18:7\n+note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 17:7\n+  --> $DIR/region-escape-via-bound.rs:17:7\n    |\n LL | where 'x: 'y\n    |       ^^"}, {"sha": "bdc9fe43a8bd961fc33dfbda3e8fe56574dfe353", "filename": "src/test/ui/issues/issue-34721.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n pub trait Foo {\n     fn zero(self) -> Self;\n }"}, {"sha": "d5cede990a335116a3d8f631ae19745d6da8c0b7", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/issue-34721.rs:27:9\n+  --> $DIR/issue-34721.rs:25:9\n    |\n LL |     pub fn baz<T: Foo>(x: T) -> T {\n    |                -       - move occurs because `x` has type `T`, which does not implement the `Copy` trait"}, {"sha": "c688261fa1cb1c3670eaf75011d99f03613d73ba", "filename": "src/test/ui/issues/issue-45696-no-variant-box-recur.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-no-variant-box-recur.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -6,11 +6,6 @@\n // We will explicitly test NLL, and migration modes; thus we will also skip the\n // automated compare-mode=nll.\n \n-// revisions: nll migrate\n-// ignore-compare-mode-nll\n-\n-#![cfg_attr(nll, feature(nll))]\n-\n // run-pass\n \n // This test has structs and functions that are by definition unusable"}, {"sha": "18af33c1821c0d6c7dfa4ba27422643a8eb4b3ff", "filename": "src/test/ui/issues/issue-46036.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46036.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // Issue 46036: [NLL] false edges on infinite loops\n // Infinite loops should create false edges to the cleanup block.\n-#![feature(nll)]\n \n struct Foo { x: &'static u32 }\n "}, {"sha": "49dd0e267b8ea8f187ad806f0cf1a23f4c34bf59", "filename": "src/test/ui/issues/issue-46036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46036.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/issue-46036.rs:9:24\n+  --> $DIR/issue-46036.rs:8:24\n    |\n LL |     let foo = Foo { x: &a };\n    |                        ^^"}, {"sha": "c1fd7729bdefb6f3b36f739129321c7d4306b884", "filename": "src/test/ui/issues/issue-46983.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n     //~^ ERROR explicit lifetime required in the type of `x` [E0621]"}, {"sha": "8a4a6bdb39fa4202a72193a357f84533dd88ac04", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/issue-46983.rs:4:5\n+  --> $DIR/issue-46983.rs:2:5\n    |\n LL | fn foo(x: &u32) -> &'static u32 {\n    |           ---- help: add explicit lifetime `'static` to the type of `x`: `&'static u32`"}, {"sha": "2f78ce0002ba3308bc713841993b9eccf873c3bd", "filename": "src/test/ui/issues/issue-47184.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let _vec: Vec<&'static String> = vec![&String::new()];\n     //~^ ERROR temporary value dropped while borrowed [E0716]"}, {"sha": "f97713b4ac438f4ca46858f42a63ffd3079ae69f", "filename": "src/test/ui/issues/issue-47184.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-47184.rs:4:44\n+  --> $DIR/issue-47184.rs:2:44\n    |\n LL |     let _vec: Vec<&'static String> = vec![&String::new()];\n    |               --------------------         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement"}, {"sha": "ace6cdce841a7db557b136fc4f59421da42981b8", "filename": "src/test/ui/issues/issue-47646.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(warnings)]\n-#![feature(nll)]\n-\n use std::collections::BinaryHeap;\n \n fn main() {"}, {"sha": "c0b876368480653e7468728e05694ed309945bc1", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as mutable\n-  --> $DIR/issue-47646.rs:12:30\n+  --> $DIR/issue-47646.rs:9:30\n    |\n LL |     let borrow = heap.peek_mut();\n    |                  ---- mutable borrow occurs here"}, {"sha": "74323317f195643a2ca754fab96e935d8ea35de1", "filename": "src/test/ui/issues/issue-47703-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,4 @@\n // compile-pass\n-#![allow(dead_code)]\n-#![feature(nll)]\n \n struct AtomicRefMut<'a> {\n     value: &'a mut i32,"}, {"sha": "377eeb67ae1b95d0f691faf7fde636a8a988ed6d", "filename": "src/test/ui/issues/issue-47703-tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703-tuple.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,4 @@\n // compile-pass\n-#![allow(dead_code)]\n-#![feature(nll)]\n \n struct WithDrop;\n "}, {"sha": "22f2a1f364d1d21fb4777e0605422fb4f04e3ba5", "filename": "src/test/ui/issues/issue-47703.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47703.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,4 @@\n // compile-pass\n-#![allow(dead_code)]\n-#![feature(nll)]\n \n struct MyStruct<'a> {\n     field: &'a mut (),"}, {"sha": "cefc872668cebd9c773753d08cf20fd9bd726522", "filename": "src/test/ui/issues/issue-47722.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47722.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,10 +1,8 @@\n // compile-pass\n-#![allow(dead_code)]\n \n // Tests that automatic coercions from &mut T to *mut T\n // allow borrows of T to expire immediately - essentially, that\n // they work identically to 'foo as *mut T'\n-#![feature(nll)]\n \n struct SelfReference {\n     self_reference: *mut SelfReference,"}, {"sha": "334bd608add15afc59366363de6b1b4d33c608fe", "filename": "src/test/ui/issues/issue-47789.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47789.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,9 +1,6 @@\n // compile-pass\n-#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n-#![feature(nll)]\n-\n static mut x: &'static u32 = &0;\n \n fn foo() {"}, {"sha": "ea325ea695f66a04c94b4eb8e00c7f783b228492", "filename": "src/test/ui/issues/issue-48132.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48132.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,9 +3,6 @@\n \n // run-pass\n \n-#![feature(nll)]\n-#![allow(warnings)]\n-\n struct Inner<I, V> {\n     iterator: I,\n     item: V,"}, {"sha": "90e9858d741972a353d48ee62989b2de60c60de5", "filename": "src/test/ui/issues/issue-48179.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48179.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,9 +3,6 @@\n \n // run-pass\n \n-#![feature(nll)]\n-#![allow(warnings)]\n-\n pub struct Container<T: Iterator> {\n     value: Option<T::Item>,\n }"}, {"sha": "f7fd04179f26e35e70216fb2fb87b3770c1d87d5", "filename": "src/test/ui/issues/issue-48803.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48803.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn flatten<'a, 'b, T>(x: &'a &'b T) -> &'a T {\n     x\n }"}, {"sha": "2f94039c0c3a934af7970fa24cc473ce8f4e8c8f", "filename": "src/test/ui/issues/issue-48803.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-48803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48803.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/issue-48803.rs:12:5\n+  --> $DIR/issue-48803.rs:10:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here"}, {"sha": "dd7b9eeb8d54e65bb20898718f52199ffed886c7", "filename": "src/test/ui/issues/issue-49579.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // compile-pass\n // ignore-emscripten no i128 support\n \n-#![feature(nll)]\n-\n fn fibs(n: u32) -> impl Iterator<Item=u128> {\n     (0 .. n)\n     .scan((0, 1), |st, _| {"}, {"sha": "8eab7b2fa3ae9b215555e4633a4203d6619bee1b", "filename": "src/test/ui/issues/issue-51515.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let foo = &16;\n     //~^ HELP consider changing this to be a mutable reference"}, {"sha": "827bb8fe2b8920e5d651faec472e06985ccd585e", "filename": "src/test/ui/issues/issue-51515.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `*foo` which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:7:5\n+  --> $DIR/issue-51515.rs:5:5\n    |\n LL |     let foo = &16;\n    |               --- help: consider changing this to be a mutable reference: `&mut 16`\n@@ -8,7 +8,7 @@ LL |     *foo = 32;\n    |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*bar` which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:12:5\n+  --> $DIR/issue-51515.rs:10:5\n    |\n LL |     let bar = foo;\n    |         --- help: consider changing this to be a mutable reference: `&mut i32`"}, {"sha": "911983445e6d6f434b63c779c942a6fff7ddde0b", "filename": "src/test/ui/issues/issue-52057.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -4,8 +4,6 @@\n //\n // run-pass\n \n-#![feature(nll)]\n-\n pub trait Parser {\n     type Input;\n "}, {"sha": "c58656330e12b38981e72d260f2aadc5667efa7f", "filename": "src/test/ui/issues/issue-52992.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -4,8 +4,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-\n fn main() {}\n \n fn fail<'a>() -> Struct<'a, Generic<()>> {"}, {"sha": "4d3b3f80a97e53f804ef0d18618d7ea26d50c161", "filename": "src/test/ui/issues/issue-53568.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,9 +3,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-#![allow(dead_code)]\n-\n trait Future {\n     type Item;\n }"}, {"sha": "8d3a4e72de411b88185c21909c5f404aa1030e43", "filename": "src/test/ui/issues/issue-54943-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // This test is a minimal version of an ICE in the dropck-eyepatch tests\n // found in the fix for #54943.\n "}, {"sha": "41ca7c1498265b30c2be23281d86d1ea6dd900d9", "filename": "src/test/ui/issues/issue-54943-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // This test is a minimal version of an ICE in the dropck-eyepatch tests\n // found in the fix for #54943. In particular, this test is in unreachable\n // code as the initial fix for this ICE only worked if the code was reachable."}, {"sha": "59be0f983b9078fb7ed47495f96034d5256a7f93", "filename": "src/test/ui/issues/issue-54943.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-54943.rs:6:13\n+   |\n+LL | fn boo<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |     let x = foo::<&'a u32>();\n+   |             ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "85722300bf0064160093dcb2d0676d551eedaf23", "filename": "src/test/ui/issues/issue-54943.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,13 +1,10 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo<T: 'static>() { }\n \n fn boo<'a>() {\n     return;\n \n     let x = foo::<&'a u32>();\n-    //~^ ERROR lifetime may not live long enough\n+    //~^ ERROR\n }\n \n fn main() {}"}, {"sha": "d0f03f90c833013c3513bbd440e15cd5fab07a60", "filename": "src/test/ui/issues/issue-54943.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,11 +1,10 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-54943.rs:9:13\n+error[E0477]: the type `&'a u32` does not fulfill the required lifetime\n+  --> $DIR/issue-54943.rs:6:13\n    |\n-LL | fn boo<'a>() {\n-   |        -- lifetime `'a` defined here\n-...\n LL |     let x = foo::<&'a u32>();\n-   |             ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: type must satisfy the static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "91d41e9b5794e844451ae977e34acdd295b82d50", "filename": "src/test/ui/mir-dataflow/def-inits-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "48d8450489488823a0b51ac5a30cac8b3edd5591", "filename": "src/test/ui/mir-dataflow/def-inits-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fdef-inits-1.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,23 +1,23 @@\n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:15:14\n+  --> $DIR/def-inits-1.rs:14:14\n    |\n LL |     unsafe { rustc_peek(&ret); }\n    |              ^^^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:31:14\n+  --> $DIR/def-inits-1.rs:30:14\n    |\n LL |     unsafe { rustc_peek(&z); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:34:14\n+  --> $DIR/def-inits-1.rs:33:14\n    |\n LL |     unsafe { rustc_peek(&y); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/def-inits-1.rs:42:14\n+  --> $DIR/def-inits-1.rs:41:14\n    |\n LL |     unsafe { rustc_peek(&x); }\n    |              ^^^^^^^^^^^^^^"}, {"sha": "4a4786a2a73783fd223564f9e418492f2def71a6", "filename": "src/test/ui/mir-dataflow/inits-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_inits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "23d0679cb1ac180c30f583b78710fa609df69da2", "filename": "src/test/ui/mir-dataflow/inits-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Finits-1.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,17 +1,17 @@\n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:15:14\n+  --> $DIR/inits-1.rs:14:14\n    |\n LL |     unsafe { rustc_peek(&ret); }\n    |              ^^^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:35:14\n+  --> $DIR/inits-1.rs:34:14\n    |\n LL |     unsafe { rustc_peek(&y); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/inits-1.rs:43:14\n+  --> $DIR/inits-1.rs:42:14\n    |\n LL |     unsafe { rustc_peek(&x); }\n    |              ^^^^^^^^^^^^^^"}, {"sha": "66b3f458a5159f932f0e033fc358ee86d8b71995", "filename": "src/test/ui/mir-dataflow/uninits-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "5f6dbde212d0ae922896e41bfa70d97a94416cf2", "filename": "src/test/ui/mir-dataflow/uninits-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-1.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,29 +1,29 @@\n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:19:14\n+  --> $DIR/uninits-1.rs:18:14\n    |\n LL |     unsafe { rustc_peek(&x) };\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:20:14\n+  --> $DIR/uninits-1.rs:19:14\n    |\n LL |     unsafe { rustc_peek(&y) };\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:21:14\n+  --> $DIR/uninits-1.rs:20:14\n    |\n LL |     unsafe { rustc_peek(&z) };\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:37:14\n+  --> $DIR/uninits-1.rs:36:14\n    |\n LL |     unsafe { rustc_peek(&x); }\n    |              ^^^^^^^^^^^^^^\n \n error: rustc_peek: bit not set\n-  --> $DIR/uninits-1.rs:45:14\n+  --> $DIR/uninits-1.rs:44:14\n    |\n LL |     unsafe { rustc_peek(&ret); }\n    |              ^^^^^^^^^^^^^^^^"}, {"sha": "2ccf1c7f9d6c67e5fd7a365c2e80e8ebab90a7a9", "filename": "src/test/ui/mir-dataflow/uninits-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // General test of maybe_uninits state computed by MIR dataflow.\n \n-#![feature(nll)]\n #![feature(core_intrinsics, rustc_attrs)]\n \n use std::intrinsics::rustc_peek;"}, {"sha": "dcb61371994db2ee303da2e9d217064577652f1d", "filename": "src/test/ui/mir-dataflow/uninits-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Funinits-2.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error: rustc_peek: bit not set\n-  --> $DIR/uninits-2.rs:15:14\n+  --> $DIR/uninits-2.rs:14:14\n    |\n LL |     unsafe { rustc_peek(&x) };\n    |              ^^^^^^^^^^^^^^"}, {"sha": "42e28b9674b3097bc7cb340e2821ea3693d72b65", "filename": "src/test/ui/nll/borrow-use-issue-46875.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrow-use-issue-46875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrow-use-issue-46875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrow-use-issue-46875.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // run-pass\n \n fn vec() {"}, {"sha": "7d3b00dfc716331612da2f98015de6795cf39957", "filename": "src/test/ui/nll/borrowck-thread-local-static-mut-borrow-outlives-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,7 +3,6 @@\n //\n // FIXME(#54366) - We probably shouldn't allow #[thread_local] static mut to get a 'static lifetime.\n \n-#![feature(nll)]\n #![feature(thread_local)]\n \n #[thread_local]"}, {"sha": "d333356d964ce79e11411c81590c63410376f2ff", "filename": "src/test/ui/nll/borrowed-local-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn gimme(x: &(u32,)) -> &u32 {\n     &x.0\n }"}, {"sha": "d629caa435319c355347a94dabec6360edff860e", "filename": "src/test/ui/nll/borrowed-local-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/borrowed-local-error.rs:10:9\n+  --> $DIR/borrowed-local-error.rs:8:9\n    |\n LL |     let x = gimme({\n    |             ----- borrow later used by call"}, {"sha": "d4b05fb79316084ab9477e25da42e79c42e3fb6b", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,6 @@\n // Regression test for issue #38899\n \n #![feature(nll)]\n-#![allow(dead_code)]\n \n pub struct Block<'a> {\n     current: &'a u8,"}, {"sha": "38a6e27a0e5600ff199bfc8ea1bd9b199085ac85", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowed-referent-issue-38899.rs:14:21\n+  --> $DIR/borrowed-referent-issue-38899.rs:13:21\n    |\n LL |     let x = &mut block;\n    |             ---------- mutable borrow occurs here"}, {"sha": "37d0e670d350d1d7f9b47a5588307de541e32ce6", "filename": "src/test/ui/nll/borrowed-temporary-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn gimme(x: &(u32,)) -> &u32 {\n     &x.0\n }"}, {"sha": "2c6bd92641f608c7e7947ef2d410de46deb4f6ce", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowed-temporary-error.rs:10:10\n+  --> $DIR/borrowed-temporary-error.rs:8:10\n    |\n LL |         &(v,)\n    |          ^^^^ creates a temporary which is freed while still in use"}, {"sha": "3f9b2f2924c2cf3d4c8a9c1bef71f0ccee5609f6", "filename": "src/test/ui/nll/borrowed-universal-error-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n     let v = 22;\n     &v"}, {"sha": "7213ed3bafb376062f20ade07dae380fefbcd88e", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return reference to local variable `v`\n-  --> $DIR/borrowed-universal-error-2.rs:6:5\n+  --> $DIR/borrowed-universal-error-2.rs:3:5\n    |\n LL |     &v\n    |     ^^ returns a reference to data owned by the current function"}, {"sha": "fc9ffd47061b4556ecd418eec42dd103c64f5764", "filename": "src/test/ui/nll/borrowed-universal-error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn gimme(x: &(u32,)) -> &u32 {\n     &x.0\n }"}, {"sha": "88a2d8fcf8cc0eafe6c9393de9c303bbf653e973", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/borrowed-universal-error.rs:10:5\n+  --> $DIR/borrowed-universal-error.rs:7:5\n    |\n LL |     gimme(&(v,))\n    |     ^^^^^^^----^"}, {"sha": "9d2624a9d6fa628b2710da6ec316f9a31385e578", "filename": "src/test/ui/nll/capture-mut-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,6 @@\n // Check that capturing a mutable reference by move and assigning to its\n // referent doesn't make the unused mut lint think that it is mutable.\n \n-#![feature(nll)]\n #![deny(unused_mut)]\n \n fn mutable_upvar() {"}, {"sha": "883b2d05a7f51b75f48fd8f3c122a072a611a046", "filename": "src/test/ui/nll/capture-mut-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/capture-mut-ref.rs:8:9\n+  --> $DIR/capture-mut-ref.rs:7:9\n    |\n LL |     let mut x = &mut 0;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: lint level defined here\n-  --> $DIR/capture-mut-ref.rs:5:9\n+  --> $DIR/capture-mut-ref.rs:4:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "db6ac7d66ccc48363c8077f8802c4879a93bb6f6", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,9 +1,6 @@\n // Test that a structure which tries to store a pointer to `y` into\n // `p` (indirectly) fails to compile.\n \n-#![feature(rustc_attrs)]\n-#![feature(nll)]\n-\n struct SomeStruct<'a, 'b: 'a> {\n     p: &'a mut &'b i32,\n     y: &'b i32,"}, {"sha": "521e543bd269310b22917e285efd0096b00d9a85", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/capture-ref-in-struct.rs:21:16\n+  --> $DIR/capture-ref-in-struct.rs:18:16\n    |\n LL |             y: &y,\n    |                ^^ borrowed value does not live long enough"}, {"sha": "2a59e80b25cd94903dd21fb3e1ce26f7c80a71a8", "filename": "src/test/ui/nll/closure-access-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // check that accesses due to a closure capture give a special note\n \n-#![feature(nll)]\n-\n fn closure_imm_capture_conflict(mut x: i32) {\n     let r = &mut x;\n     || x; //~ ERROR"}, {"sha": "4a8086905b7df297696c96cf66c8b7dc04117952", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/closure-access-spans.rs:7:5\n+  --> $DIR/closure-access-spans.rs:5:5\n    |\n LL |     let r = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     r.use_mut();\n    |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/closure-access-spans.rs:13:5\n+  --> $DIR/closure-access-spans.rs:11:5\n    |\n LL |     let r = &mut x;\n    |             ------ first mutable borrow occurs here\n@@ -23,7 +23,7 @@ LL |     r.use_mut();\n    |     - first borrow later used here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/closure-access-spans.rs:19:5\n+  --> $DIR/closure-access-spans.rs:17:5\n    |\n LL |     let r = &mut x;\n    |             ------ borrow occurs here\n@@ -35,7 +35,7 @@ LL |     r.use_mut();\n    |     - first borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/closure-access-spans.rs:25:13\n+  --> $DIR/closure-access-spans.rs:23:13\n    |\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n@@ -45,7 +45,7 @@ LL |     r.use_ref();\n    |     - borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/closure-access-spans.rs:31:5\n+  --> $DIR/closure-access-spans.rs:29:5\n    |\n LL |     let r = &x;\n    |             -- borrow of `x` occurs here\n@@ -57,7 +57,7 @@ LL |     r.use_ref();\n    |     - borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:37:5\n+  --> $DIR/closure-access-spans.rs:35:5\n    |\n LL | fn closure_imm_capture_moved(mut x: String) {\n    |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -69,7 +69,7 @@ LL |     || x.len();\n    |     value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:42:5\n+  --> $DIR/closure-access-spans.rs:40:5\n    |\n LL | fn closure_mut_capture_moved(mut x: String) {\n    |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -81,7 +81,7 @@ LL |     || x = String::new();\n    |     value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:47:5\n+  --> $DIR/closure-access-spans.rs:45:5\n    |\n LL | fn closure_unique_capture_moved(x: &mut String) {\n    |                                 - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n@@ -93,7 +93,7 @@ LL |     || *x = String::new();\n    |     value borrowed here after move\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/closure-access-spans.rs:52:5\n+  --> $DIR/closure-access-spans.rs:50:5\n    |\n LL | fn closure_move_capture_moved(x: &mut String) {\n    |                               - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait"}, {"sha": "b38f7900e8e5e89c7959ea6f85caedf40c77b9de", "filename": "src/test/ui/nll/closure-borrow-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // check that existing borrows due to a closure capture give a special note\n \n-#![feature(nll)]\n-\n fn move_while_borrowed(x: String) {\n     let f = || x.len();\n     let y = x; //~ ERROR"}, {"sha": "a3bcbbab3ec691214aaf7f9e946362a9b6683d8a", "filename": "src/test/ui/nll/closure-borrow-spans.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:7:13\n+  --> $DIR/closure-borrow-spans.rs:5:13\n    |\n LL |     let f = || x.len();\n    |             -- - borrow occurs due to use in closure\n@@ -11,7 +11,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/closure-borrow-spans.rs:13:13\n+  --> $DIR/closure-borrow-spans.rs:11:13\n    |\n LL |     let f = || x;\n    |             -- - first borrow occurs due to use of `x` in closure\n@@ -23,7 +23,7 @@ LL |     f.use_ref();\n    |     - immutable borrow later used here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-borrow-spans.rs:21:16\n+  --> $DIR/closure-borrow-spans.rs:19:16\n    |\n LL |         f = || x;\n    |             -- ^ borrowed value does not live long enough\n@@ -35,7 +35,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:28:5\n+  --> $DIR/closure-borrow-spans.rs:26:5\n    |\n LL |     let f = || x;\n    |             -- - borrow occurs due to use in closure\n@@ -47,7 +47,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/closure-borrow-spans.rs:34:13\n+  --> $DIR/closure-borrow-spans.rs:32:13\n    |\n LL |     let f = || x = 0;\n    |             -- - borrow occurs due to use of `x` in closure\n@@ -59,7 +59,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/closure-borrow-spans.rs:40:13\n+  --> $DIR/closure-borrow-spans.rs:38:13\n    |\n LL |     let f = || x = 0;\n    |             -- - first borrow occurs due to use of `x` in closure\n@@ -71,7 +71,7 @@ LL |     f.use_ref();\n    |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/closure-borrow-spans.rs:46:13\n+  --> $DIR/closure-borrow-spans.rs:44:13\n    |\n LL |     let f = || x = 0;\n    |             -- - first borrow occurs due to use of `x` in closure\n@@ -83,7 +83,7 @@ LL |     f.use_ref();\n    |     - first borrow later used here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-borrow-spans.rs:54:16\n+  --> $DIR/closure-borrow-spans.rs:52:16\n    |\n LL |         f = || x = 0;\n    |             -- ^ borrowed value does not live long enough\n@@ -95,7 +95,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:61:5\n+  --> $DIR/closure-borrow-spans.rs:59:5\n    |\n LL |     let f = || x = 0;\n    |             -- - borrow occurs due to use in closure\n@@ -107,7 +107,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:67:13\n+  --> $DIR/closure-borrow-spans.rs:65:13\n    |\n LL |     let f = || *x = 0;\n    |             --  - borrow occurs due to use in closure\n@@ -119,7 +119,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n-  --> $DIR/closure-borrow-spans.rs:73:13\n+  --> $DIR/closure-borrow-spans.rs:71:13\n    |\n LL |     let f = || *x = 0;\n    |             --  - first borrow occurs due to use of `x` in closure\n@@ -131,7 +131,7 @@ LL |     f.use_ref();\n    |     - first borrow later used here\n \n error[E0501]: cannot borrow `x` as mutable because previous closure requires unique access\n-  --> $DIR/closure-borrow-spans.rs:79:13\n+  --> $DIR/closure-borrow-spans.rs:77:13\n    |\n LL |     let f = || *x = 0;\n    |             --  - first borrow occurs due to use of `x` in closure\n@@ -143,7 +143,7 @@ LL |     f.use_ref();\n    |     - first borrow later used here\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-borrow-spans.rs:88:17\n+  --> $DIR/closure-borrow-spans.rs:86:17\n    |\n LL |         f = || *x = 0;\n    |             --  ^ borrowed value does not live long enough\n@@ -155,7 +155,7 @@ LL |     f.use_ref();\n    |     - borrow later used here\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n-  --> $DIR/closure-borrow-spans.rs:95:5\n+  --> $DIR/closure-borrow-spans.rs:93:5\n    |\n LL |     let f = || *x = 0;\n    |             --  - borrow occurs due to use in closure"}, {"sha": "16d90b971745a70b86044dcdb7e4a6b0b6d84b65", "filename": "src/test/ui/nll/closure-captures.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,5 @@\n // Some cases with closures that might be problems\n \n-#![allow(unused)]\n-#![feature(nll)]\n-\n // Should have one error per assignment\n \n fn one_closure(x: i32) {"}, {"sha": "77f7d815eeb4c180122ccb2168ca6d81df092ce6", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:10:5\n+  --> $DIR/closure-captures.rs:7:5\n    |\n LL | fn one_closure(x: i32) {\n    |                - help: consider changing this to be mutable: `mut x`\n@@ -8,7 +8,7 @@ LL |     x = 1;\n    |     ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:12:5\n+  --> $DIR/closure-captures.rs:9:5\n    |\n LL | fn one_closure(x: i32) {\n    |                - help: consider changing this to be mutable: `mut x`\n@@ -17,7 +17,7 @@ LL |     x = 1;\n    |     ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:18:9\n+  --> $DIR/closure-captures.rs:15:9\n    |\n LL | fn two_closures(x: i32) {\n    |                 - help: consider changing this to be mutable: `mut x`\n@@ -26,7 +26,7 @@ LL |         x = 1;\n    |         ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:22:9\n+  --> $DIR/closure-captures.rs:19:9\n    |\n LL | fn two_closures(x: i32) {\n    |                 - help: consider changing this to be mutable: `mut x`\n@@ -35,15 +35,15 @@ LL |         x = 1;\n    |         ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:30:9\n+  --> $DIR/closure-captures.rs:27:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |          x = 1;}\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:29:12\n+  --> $DIR/closure-captures.rs:26:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n@@ -52,15 +52,15 @@ LL | |          x = 1;}\n    | |________________^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:34:9\n+  --> $DIR/closure-captures.rs:31:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |     x = 1;});\n    |     - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:33:12\n+  --> $DIR/closure-captures.rs:30:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n@@ -69,7 +69,7 @@ LL | |     x = 1;});\n    | |___________^\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:42:10\n+  --> $DIR/closure-captures.rs:39:10\n    |\n LL | fn two_closures_ref(x: i32) {\n    |                     - help: consider changing this to be mutable: `mut x`\n@@ -78,15 +78,15 @@ LL |          x = 1;}\n    |          ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:41:9\n+  --> $DIR/closure-captures.rs:38:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |          x = 1;}\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:40:12\n+  --> $DIR/closure-captures.rs:37:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n@@ -95,7 +95,7 @@ LL | |          x = 1;}\n    | |________________^\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/closure-captures.rs:46:5\n+  --> $DIR/closure-captures.rs:43:5\n    |\n LL | fn two_closures_ref(x: i32) {\n    |                     - help: consider changing this to be mutable: `mut x`\n@@ -104,15 +104,15 @@ LL |     x = 1;});\n    |     ^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:45:9\n+  --> $DIR/closure-captures.rs:42:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |     x = 1;});\n    |     - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:44:12\n+  --> $DIR/closure-captures.rs:41:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n@@ -121,15 +121,15 @@ LL | |     x = 1;});\n    | |___________^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:51:9\n+  --> $DIR/closure-captures.rs:48:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |         *x = 1;});\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:50:12\n+  --> $DIR/closure-captures.rs:47:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n@@ -138,15 +138,15 @@ LL | |         *x = 1;});\n    | |________________^\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/closure-captures.rs:54:9\n+  --> $DIR/closure-captures.rs:51:9\n    |\n LL |         ||\n    |         ^^ cannot borrow as mutable\n LL |         *x = 1;});\n    |          - mutable borrow occurs due to use of `x` in closure\n    |\n help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:53:12\n+  --> $DIR/closure-captures.rs:50:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^"}, {"sha": "bf2431870a942cd27f31421fa0ef5616ea783dac", "filename": "src/test/ui/nll/closure-move-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // check that moves due to a closure capture give a special note\n \n-#![feature(nll)]\n-\n fn move_after_move(x: String) {\n     || x;\n     let y = x; //~ ERROR"}, {"sha": "972dbc6a61d089d518bfc97791efd2ce2044a953", "filename": "src/test/ui/nll/closure-move-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/closure-move-spans.rs:7:13\n+  --> $DIR/closure-move-spans.rs:5:13\n    |\n LL | fn move_after_move(x: String) {\n    |                    - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -11,7 +11,7 @@ LL |     let y = x;\n    |             ^ value used here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-move-spans.rs:12:13\n+  --> $DIR/closure-move-spans.rs:10:13\n    |\n LL | fn borrow_after_move(x: String) {\n    |                      - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ LL |     let y = &x;\n    |             ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/closure-move-spans.rs:17:13\n+  --> $DIR/closure-move-spans.rs:15:13\n    |\n LL | fn borrow_mut_after_move(mut x: String) {\n    |                          ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait"}, {"sha": "8ed6554877eaea039a9c22c7e334a1b519ce032d", "filename": "src/test/ui/nll/closure-requirements/issue-58127-mutliple-requirements.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fissue-58127-mutliple-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fissue-58127-mutliple-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fissue-58127-mutliple-requirements.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,3 @@\n-// revisions: migrate nll\n-//[migrate]compile-flags: -Z borrowck=migrate\n-#![cfg_attr(nll, feature(nll))]\n-\n // compile-pass\n \n // Test that we propagate region relations from closures precisely when there is"}, {"sha": "a9d2a07715d49532a5ad4da67f3d673169555992", "filename": "src/test/ui/nll/closure-requirements/propagate-multiple-requirements.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Test that we propagate *all* requirements to the caller, not just the first\n // one.\n \n-#![feature(nll)]\n-\n fn once<S, T, U, F: FnOnce(S, T) -> U>(f: F, s: S, t: T) -> U {\n     f(s, t)\n }"}, {"sha": "2fec9bc62d1c7ecc9ba8374943141d0c4cd65c2f", "filename": "src/test/ui/nll/closure-requirements/propagate-multiple-requirements.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-multiple-requirements.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `local_arr` does not live long enough\n-  --> $DIR/propagate-multiple-requirements.rs:17:14\n+  --> $DIR/propagate-multiple-requirements.rs:15:14\n    |\n LL |     let mut out: &mut &'static [i32] = &mut (&[1] as _);\n    |                  ------------------- type annotation requires that `local_arr` is borrowed for `'static`"}, {"sha": "6768250dcbc0aa447a9aaa7b686b42c343e80c79", "filename": "src/test/ui/nll/closure-use-spans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // check that liveness due to a closure capture gives a special note\n \n-#![feature(nll)]\n-\n fn use_as_borrow_capture(mut x: i32) {\n     let y = &x;\n     x = 0; //~ ERROR"}, {"sha": "ec7e0f308557db1530cce191ae9a46bd8fe1af0e", "filename": "src/test/ui/nll/closure-use-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-use-spans.rs:7:5\n+  --> $DIR/closure-use-spans.rs:5:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here\n@@ -9,7 +9,7 @@ LL |     || *y;\n    |         - borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-use-spans.rs:13:5\n+  --> $DIR/closure-use-spans.rs:11:5\n    |\n LL |     let y = &mut x;\n    |             ------ borrow of `x` occurs here\n@@ -19,7 +19,7 @@ LL |     || *y = 1;\n    |         - borrow later captured here by closure\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/closure-use-spans.rs:19:5\n+  --> $DIR/closure-use-spans.rs:17:5\n    |\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here"}, {"sha": "491c186ecb5a018b54fffd2704f93ead8c5109b9", "filename": "src/test/ui/nll/closures-in-loops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Test messages where a closure capture conflicts with itself because it's in\n // a loop.\n \n-#![feature(nll)]\n-\n fn repreated_move(x: String) {\n     for i in 0..10 {\n         || x; //~ ERROR"}, {"sha": "7603f9650b54a3ab80a1996a46d5f803331c6bab", "filename": "src/test/ui/nll/closures-in-loops.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/closures-in-loops.rs:8:9\n+  --> $DIR/closures-in-loops.rs:6:9\n    |\n LL | fn repreated_move(x: String) {\n    |                   - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -10,15 +10,15 @@ LL |         || x;\n    |         value moved into closure here, in previous iteration of loop\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/closures-in-loops.rs:15:16\n+  --> $DIR/closures-in-loops.rs:13:16\n    |\n LL |         v.push(|| x = String::new());\n    |                ^^ - borrows occur due to use of `x` in closure\n    |                |\n    |                mutable borrow starts here in previous iteration of loop\n \n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/closures-in-loops.rs:22:16\n+  --> $DIR/closures-in-loops.rs:20:16\n    |\n LL |         v.push(|| *x = String::new());\n    |                ^^  - borrows occur due to use of `x` in closure"}, {"sha": "dde0ef7a5bb832fa55c00d8880e155ae0870bb6c", "filename": "src/test/ui/nll/constant-thread-locals-issue-47053.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // Regression test for issue #47053\n \n-#![feature(nll)]\n #![feature(thread_local)]\n \n #[thread_local]"}, {"sha": "8afb42d66a61a511e511b1a7ba5cff29e87b3e10", "filename": "src/test/ui/nll/constant-thread-locals-issue-47053.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fconstant-thread-locals-issue-47053.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to immutable static item `FOO`\n-  --> $DIR/constant-thread-locals-issue-47053.rs:10:5\n+  --> $DIR/constant-thread-locals-issue-47053.rs:9:5\n    |\n LL |     FOO = 6;\n    |     ^^^^^^^ cannot assign"}, {"sha": "f7243294669a62134f356638e1165a45a9978885", "filename": "src/test/ui/nll/decl-macro-illegal-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,5 @@\n // Regression test for #46314\n \n-#![feature(nll)]\n #![feature(decl_macro)]\n \n struct NonCopy(String);"}, {"sha": "7948485bd6866d6c5db220769a0b2ea14530addc", "filename": "src/test/ui/nll/decl-macro-illegal-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `wrapper.inner`\n-  --> $DIR/decl-macro-illegal-copy.rs:22:9\n+  --> $DIR/decl-macro-illegal-copy.rs:21:9\n    |\n LL |     $wrapper.inner\n    |     -------------- value moved here"}, {"sha": "e75362750645ceb1a3e2899ea6203a86dc4c216e", "filename": "src/test/ui/nll/issue-16223.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -15,7 +15,6 @@\n \n // compile-pass\n \n-#![feature(nll)]\n #![feature(box_patterns)]\n \n struct Root {"}, {"sha": "1fe4fffa324a63617a82590c90e642187ba58606", "filename": "src/test/ui/nll/issue-21114-ebfull.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,4 @@\n-// (this works, but only in NLL)\n // compile-pass\n-#![feature(nll)]\n \n use std::collections::HashMap;\n use std::sync::Mutex;"}, {"sha": "80a85293e5a5cc165a303ec438bf4f9808d8cf0b", "filename": "src/test/ui/nll/issue-21114-kixunil.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,4 @@\n-// (this works, but only in NLL)\n // compile-pass\n-#![feature(nll)]\n \n fn from_stdin(min: u64) -> Vec<u64> {\n     use std::io::BufRead;"}, {"sha": "906ea32b9c42d62fe8191c9fd0da05df89faaf59", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -8,8 +8,6 @@\n // meant to compile and run successfully once rust-lang/rust#54987 is\n // implemented.\n \n-#![feature(nll)]\n-\n struct D {\n     x: u32,\n     s: S,"}, {"sha": "153d9bdf3215d01b70aa6901dea5aedadcfc19bf", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,17 +1,17 @@\n error[E0381]: assign of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:30:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:28:5\n    |\n LL |     d.x = 10;\n    |     ^^^^^^^^ use of possibly uninitialized `d`\n \n error[E0381]: assign of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:36:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:34:5\n    |\n LL |     d.x = 10;\n    |     ^^^^^^^^ use of possibly uninitialized `d`\n \n error[E0382]: assign of moved value: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:43:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:41:5\n    |\n LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0 } };\n    |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait\n@@ -21,19 +21,19 @@ LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n \n error[E0381]: assign to part of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:49:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:47:5\n    |\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ use of possibly uninitialized `d.s`\n \n error[E0381]: assign to part of possibly uninitialized variable: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:55:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:53:5\n    |\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ use of possibly uninitialized `d.s`\n \n error[E0382]: assign to part of moved value: `d`\n-  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:62:5\n+  --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:60:5\n    |\n LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0} };\n    |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait"}, {"sha": "6357c3ccef1f8d515b45d30a2ed42217e31c2da3", "filename": "src/test/ui/nll/issue-22323-temp-destruction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-22323-temp-destruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-22323-temp-destruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-22323-temp-destruction.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,8 +3,6 @@\n \n // compile-pass\n \n-#![feature(nll)]\n-\n fn main() {\n     let _s = construct().borrow().consume_borrowed();\n }"}, {"sha": "27e519005f62b473c49081e7fd9bcd8886f6c036", "filename": "src/test/ui/nll/issue-30104.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-30104.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,8 +2,6 @@\n \n // compile-pass\n \n-#![feature(nll)]\n-\n use std::ops::{Deref, DerefMut};\n \n fn box_two_field(v: &mut Box<(i32, i32)>) {"}, {"sha": "7e0ffd6cf36449353da44eda8d716969035062dc", "filename": "src/test/ui/nll/issue-32382-index-assoc-type-with-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-32382-index-assoc-type-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-32382-index-assoc-type-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-32382-index-assoc-type-with-lifetime.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n // compile-pass\n \n // rust-lang/rust#32382: Borrow checker used to complain about"}, {"sha": "c50473511f1168799d583879347b0c57c62411a1", "filename": "src/test/ui/nll/issue-43058.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n use std::borrow::Cow;\n \n #[derive(Clone, Debug)]"}, {"sha": "8c0c356e967219ac62ab7c41f096d7845ecc1662", "filename": "src/test/ui/nll/issue-46589.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Foo;\n \n impl Foo {"}, {"sha": "397909a4366100bb26c0243782091f04cb44522b", "filename": "src/test/ui/nll/issue-46589.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `**other` as mutable more than once at a time\n-  --> $DIR/issue-46589.rs:19:21\n+  --> $DIR/issue-46589.rs:17:21\n    |\n LL |         *other = match (*other).get_self() {\n    |                        -------- first mutable borrow occurs here"}, {"sha": "3f8e0f5ad3d7a8859b3030e2bf27689efe481da1", "filename": "src/test/ui/nll/issue-47022.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47022.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,5 @@\n // compile-pass\n \n-#![allow(warnings)]\n-#![feature(nll)]\n-\n struct LoadedObject {\n     bodies: Vec<Body>,\n     color: Color,"}, {"sha": "207af380e62ddd58406a2b6391ada8725c30a968", "filename": "src/test/ui/nll/issue-47388.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n struct FancyNum {\n     num: u8,\n }"}, {"sha": "d4064b3f50a341a9056c7509b6f1cb7190c38b4c", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `fancy_ref.num` which is behind a `&` reference\n-  --> $DIR/issue-47388.rs:9:5\n+  --> $DIR/issue-47388.rs:8:5\n    |\n LL |     let fancy_ref = &(&mut fancy);\n    |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`"}, {"sha": "72ee7f88650e1b757c48594df8428f9ff28ac1ac", "filename": "src/test/ui/nll/issue-47470.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,8 +2,6 @@\n // causing region relations not to be enforced at all the places where\n // they have to be enforced.\n \n-#![feature(nll)]\n-\n struct Foo<'a>(&'a ());\n trait Bar {\n     type Assoc;"}, {"sha": "0b1247d60ec67ce9658c064e077482e667cf4b84", "filename": "src/test/ui/nll/issue-47470.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return reference to local variable `local`\n-  --> $DIR/issue-47470.rs:17:9\n+  --> $DIR/issue-47470.rs:15:9\n    |\n LL |         &local\n    |         ^^^^^^ returns a reference to data owned by the current function"}, {"sha": "47426cdfa57ef7a2745d815b42a5c748084d9c4e", "filename": "src/test/ui/nll/issue-48070.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-48070.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-48070.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48070.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // revisions: lxl nll\n \n-#![cfg_attr(nll, feature(nll))]\n-\n struct Foo {\n     x: u32\n }"}, {"sha": "16e29ab2a8ad2f6823d3c8b9ad3a65702b8abdbe", "filename": "src/test/ui/nll/issue-48697.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48697.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #48697\n \n-#![feature(nll)]\n-\n fn foo(x: &i32) -> &i32 {\n     let z = 4;\n     let f = &|y| y;"}, {"sha": "f0c29b72b4298c23b5a14726e0bdeaba17d36983", "filename": "src/test/ui/nll/issue-48697.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-48697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-48697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48697.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing local variable `z`\n-  --> $DIR/issue-48697.rs:9:5\n+  --> $DIR/issue-48697.rs:7:5\n    |\n LL |     let k = f(&z);\n    |               -- `z` is borrowed here"}, {"sha": "ec992959a66ca7bb3975426e47bd30fdbd96631c", "filename": "src/test/ui/nll/issue-50716-1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,12 +3,8 @@\n // bounds derived from `Sized` requirements\u201d that checks that the fixed compiler\n // accepts this code fragment with both AST and MIR borrow checkers.\n //\n-// revisions: migrate nll\n-//\n // compile-pass\n \n-#![cfg_attr(nll, feature(nll))]\n-\n struct Qey<Q: ?Sized>(Q);\n \n fn main() {}"}, {"sha": "38dd1b5f6fe733a77111f4a1367eea83d27c6509", "filename": "src/test/ui/nll/issue-50716.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-50716.rs:14:14\n+   |\n+LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n+   |        -- lifetime `'a` defined here\n+...\n+LL |     let _x = *s;\n+   |              ^^ proving this value is `Sized` requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c2fc345fa2ba2e6e13ff41d509055b15fcc4613f", "filename": "src/test/ui/nll/issue-50716.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,8 +2,6 @@\n // Regression test for the issue #50716: NLL ignores lifetimes bounds\n // derived from `Sized` requirements\n \n-#![feature(nll)]\n-\n trait A {\n     type X: ?Sized;\n }"}, {"sha": "b19e3a9dfb345604f9a107b444d2d4b10c3432d0", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,11 +1,18 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-50716.rs:16:14\n+error[E0308]: mismatched types\n+  --> $DIR/issue-50716.rs:14:9\n    |\n-LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n-   |        -- lifetime `'a` defined here\n-...\n LL |     let _x = *s;\n-   |              ^^ proving this value is `Sized` requires that `'a` must outlive `'static`\n+   |         ^^ lifetime mismatch\n+   |\n+   = note: expected type `std::marker::Sized`\n+              found type `std::marker::Sized`\n+note: the lifetime 'a as defined on the function body at 9:8...\n+  --> $DIR/issue-50716.rs:9:8\n+   |\n+LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n+   |        ^^\n+   = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "747bfe3a8a575ae6bcabde2f48e1703afc357d8f", "filename": "src/test/ui/nll/issue-51191.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Struct;\n \n impl Struct {"}, {"sha": "e226de15dc2f0b156013a0be8c77c41e77187015", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-51191.rs:6:5\n+  --> $DIR/issue-51191.rs:4:5\n    |\n LL |     fn bar(self: &mut Self) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -11,7 +11,7 @@ LL |         (&mut self).bar();\n    = help: a `loop` may express intention better if this is on purpose\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:8:9\n+  --> $DIR/issue-51191.rs:6:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n@@ -20,27 +20,27 @@ LL |         (&mut self).bar();\n    |         try removing `&mut` here\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:13:9\n+  --> $DIR/issue-51191.rs:11:9\n    |\n LL |     fn imm(self) {\n    |            ---- help: consider changing this to be mutable: `mut self`\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:22:9\n+  --> $DIR/issue-51191.rs:20:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/issue-51191.rs:22:9\n+  --> $DIR/issue-51191.rs:20:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:28:9\n+  --> $DIR/issue-51191.rs:26:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^"}, {"sha": "743415d58afadb3b01e53473bdf25210cf1742c7", "filename": "src/test/ui/nll/issue-51244.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let ref my_ref @ _ = 0;\n     *my_ref = 0;"}, {"sha": "8a7e71e0326a09540044b5757c38e898eae1cb3a", "filename": "src/test/ui/nll/issue-51244.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `*my_ref` which is behind a `&` reference\n-  --> $DIR/issue-51244.rs:5:5\n+  --> $DIR/issue-51244.rs:3:5\n    |\n LL |     let ref my_ref @ _ = 0;\n    |         -------------- help: consider changing this to be a mutable reference: `ref mut my_ref @ _`"}, {"sha": "12d0449abb19be4c1bc7755ab3f20b859f481215", "filename": "src/test/ui/nll/issue-51268.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51268.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // ignore-tidy-linelength\n \n-#![feature(nll)]\n-\n struct Bar;\n \n impl Bar {"}, {"sha": "420c94f8e1bd292b1f6806719aa475c5825eabe4", "filename": "src/test/ui/nll/issue-51268.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `self.thing` as mutable because it is also borrowed as immutable\n-  --> $DIR/issue-51268.rs:18:9\n+  --> $DIR/issue-51268.rs:16:9\n    |\n LL |           self.thing.bar(|| {\n    |           ^          --- -- immutable borrow occurs here"}, {"sha": "b45477c7fb10deb96bda96da36d6a3c41c7082bd", "filename": "src/test/ui/nll/issue-51351.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51351.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -8,8 +8,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-\n fn creash<'a>() {\n     let x: &'a () = &();\n }"}, {"sha": "691760eb91e52fb12816cf537af927283752867e", "filename": "src/test/ui/nll/issue-51512.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(warnings)]\n-#![feature(nll)]\n-\n fn main() {\n     let range = 0..1;\n     let r = range;"}, {"sha": "e591ca08290ebf74a7c8e2689009e463b2306bcf", "filename": "src/test/ui/nll/issue-51512.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `range`\n-  --> $DIR/issue-51512.rs:7:13\n+  --> $DIR/issue-51512.rs:4:13\n    |\n LL |     let range = 0..1;\n    |         ----- move occurs because `range` has type `std::ops::Range<i32>`, which does not implement the `Copy` trait"}, {"sha": "58416c31edde75d92e67597dead873540270d83c", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -4,7 +4,6 @@\n // of the fact that the type implements Drop.\n \n #![feature(nll)]\n-#![allow(dead_code)]\n \n pub struct S<'a> { url: &'a mut String }\n "}, {"sha": "34259d06d38363e43ff342595f8956e65d5974b4", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:14:5\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:13:5\n    |\n LL | fn finish_1(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -9,7 +9,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:19:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:18:13\n    |\n LL | fn finish_2(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -19,7 +19,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:24:21\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:23:21\n    |\n LL | fn finish_3(s: S) -> &mut String {\n    |             - has type `S<'1>`\n@@ -29,7 +29,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.url`, because the type `S<'_>` implements the `Drop` trait\n \n error[E0509]: cannot move out of type `S<'_>`, which implements the `Drop` trait\n-  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:29:13\n+  --> $DIR/issue-52059-report-when-borrow-and-drop-conflict.rs:28:13\n    |\n LL |     let p = s.url; p\n    |             ^^^^^"}, {"sha": "4b8e6c680753083bbed11e36234a7fe983e101fe", "filename": "src/test/ui/nll/issue-52078.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52078.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(unused_variables)]\n-\n // Regression test for #52078: we were failing to infer a relationship\n // between `'a` and `'b` below due to inference variables introduced\n // during the normalization process."}, {"sha": "0414428e48150ca498a9baca8a23e96823ecebb0", "filename": "src/test/ui/nll/issue-52086.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n use std::rc::Rc;\n use std::sync::Arc;\n "}, {"sha": "da453fb1f921fb69bd70a036ae0d934148b3b4ee", "filename": "src/test/ui/nll/issue-52086.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,11 +1,11 @@\n error[E0507]: cannot move out of an `Rc`\n-  --> $DIR/issue-52086.rs:10:10\n+  --> $DIR/issue-52086.rs:8:10\n    |\n LL |     drop(x.field);\n    |          ^^^^^^^ cannot move out of an `Rc`\n \n error[E0507]: cannot move out of an `Arc`\n-  --> $DIR/issue-52086.rs:14:10\n+  --> $DIR/issue-52086.rs:12:10\n    |\n LL |     drop(y.field);\n    |          ^^^^^^^ cannot move out of an `Arc`"}, {"sha": "0d7ee0376924dc618028d5db3d1b02375ce180cd", "filename": "src/test/ui/nll/issue-52113.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-//\n-\n-#![allow(warnings)]\n #![feature(nll)]\n \n trait Bazinga {}"}, {"sha": "590963ded78bcfeb5eaca7206a0153c7c4314844", "filename": "src/test/ui/nll/issue-52113.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52113.rs:37:5\n+  --> $DIR/issue-52113.rs:34:5\n    |\n LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> impl Bazinga + 'b {\n    |                --  -- lifetime `'b` defined here"}, {"sha": "d9ea3ae42c49e8004ef780bbc9bbc26af80d36d9", "filename": "src/test/ui/nll/issue-52534-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n struct Test;\n \n impl Test {"}, {"sha": "743179f05c1afb7c0c4f9cb1ec4d66309620c143", "filename": "src/test/ui/nll/issue-52534-1.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,17 +1,17 @@\n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:9:9\n+  --> $DIR/issue-52534-1.rs:6:9\n    |\n LL |         &x\n    |         ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:16:5\n+  --> $DIR/issue-52534-1.rs:13:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return value referencing local variable `x`\n-  --> $DIR/issue-52534-1.rs:22:5\n+  --> $DIR/issue-52534-1.rs:19:5\n    |\n LL |     &&x\n    |     ^--\n@@ -20,7 +20,7 @@ LL |     &&x\n    |     returns a value referencing data owned by the current function\n \n error[E0515]: cannot return reference to temporary value\n-  --> $DIR/issue-52534-1.rs:22:5\n+  --> $DIR/issue-52534-1.rs:19:5\n    |\n LL |     &&x\n    |     ^--\n@@ -29,25 +29,25 @@ LL |     &&x\n    |     returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:29:5\n+  --> $DIR/issue-52534-1.rs:26:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:35:5\n+  --> $DIR/issue-52534-1.rs:32:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:41:5\n+  --> $DIR/issue-52534-1.rs:38:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:47:5\n+  --> $DIR/issue-52534-1.rs:44:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function"}, {"sha": "e416264ed09fd889f2a937d4353fc97c5c0fa094", "filename": "src/test/ui/nll/issue-52534-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo(x: &u32) -> &u32 {\n     let y;\n "}, {"sha": "dd8a87f7e29aa8e152d72efbacc4d327c4553eae", "filename": "src/test/ui/nll/issue-52534-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/issue-52534-2.rs:9:9\n+  --> $DIR/issue-52534-2.rs:6:9\n    |\n LL |         y = &x\n    |         ^^^^^^ borrowed value does not live long enough"}, {"sha": "559d4c8591b34ece8a48031f9e98db5a202939de", "filename": "src/test/ui/nll/issue-52534.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![feature(nll)]\n-#![allow(warnings)]\n-\n fn foo(_: impl FnOnce(&u32) -> &u32) {\n }\n "}, {"sha": "b2b727fd438935f0c80be656aa1d9149b54b23ae", "filename": "src/test/ui/nll/issue-52534.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/issue-52534.rs:12:14\n+  --> $DIR/issue-52534.rs:9:14\n    |\n LL |     foo(|a| &x)\n    |          -   ^ `x` would have to be valid for `'0`...\n@@ -13,7 +13,7 @@ LL | }\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#dangling-references>\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/issue-52534.rs:18:26\n+  --> $DIR/issue-52534.rs:15:26\n    |\n LL |     baz(|first, second| &y)\n    |          -----           ^ `y` would have to be valid for `'0`..."}, {"sha": "24a4267f653f47b86ea4b69777251bb6f4f15353", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn expect_fn<F>(f: F) where F : Fn() {\n     f();\n }"}, {"sha": "8958bdf4c2a8d7779e3a819c6678e8348a98e948", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/issue-52663-span-decl-captured-variable.rs:10:26\n+  --> $DIR/issue-52663-span-decl-captured-variable.rs:8:26\n    |\n LL |        let x = (vec![22], vec![44]);\n    |            - captured outer variable"}, {"sha": "e8e571aadc3680de679abe85fe1dc0319fd81427", "filename": "src/test/ui/nll/issue-52663-trait-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,4 @@\n #![feature(box_syntax)]\n-#![feature(nll)]\n \n trait Foo { fn get(&self); }\n "}, {"sha": "9262117f397553efdae9e8d3539dcc52fd5fecff", "filename": "src/test/ui/nll/issue-52663-trait-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `tmp0` does not live long enough\n-  --> $DIR/issue-52663-trait-object.rs:13:20\n+  --> $DIR/issue-52663-trait-object.rs:12:20\n    |\n LL |         let tmp1 = &tmp0;\n    |                    ^^^^^ borrowed value does not live long enough"}, {"sha": "e33528ac59e68293b8110f65dd93795be2357eee", "filename": "src/test/ui/nll/issue-52669.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct A {\n     b: B,\n }"}, {"sha": "db53e444b9e4a60dca5232390e5fad4fc2c9f309", "filename": "src/test/ui/nll/issue-52669.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: borrow of moved value: `a.b`\n-  --> $DIR/issue-52669.rs:15:5\n+  --> $DIR/issue-52669.rs:13:5\n    |\n LL | fn bar(mut a: A) -> B {\n    |        ----- move occurs because `a` has type `A`, which does not implement the `Copy` trait"}, {"sha": "e8b7b3333eb6b73b6e126c4e9881cd5821abdb5a", "filename": "src/test/ui/nll/issue-52742.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-52742.rs:14:9\n+   |\n+LL |     fn take_bar(&mut self, b: Bar<'_>) {\n+   |                 ---------         -- let's call this `'1`\n+   |                 |\n+   |                 has type `&mut Foo<'_, '2>`\n+LL |         self.y = b.z\n+   |         ^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "db9ddfff285b3c23776dcceba9fb5a5652ee4b45", "filename": "src/test/ui/nll/issue-52742.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![feature(in_band_lifetimes)]\n \n struct Foo<'a, 'b> {\n@@ -13,7 +12,7 @@ struct Bar<'b> {\n impl Foo<'_, '_> {\n     fn take_bar(&mut self, b: Bar<'_>) {\n         self.y = b.z\n-        //~^ ERROR lifetime may not live long enough\n+        //~^ ERROR\n     }\n }\n "}, {"sha": "b982915800294ab0ddf41009cbce354d0aac4ad8", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,12 +1,22 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-52742.rs:15:9\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/issue-52742.rs:14:18\n    |\n-LL |     fn take_bar(&mut self, b: Bar<'_>) {\n-   |                 ---------         -- let's call this `'1`\n-   |                 |\n-   |                 has type `&mut Foo<'_, '2>`\n LL |         self.y = b.z\n-   |         ^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n+   |                  ^^^\n+   |\n+note: ...the reference is valid for the lifetime '_ as defined on the impl at 12:10...\n+  --> $DIR/issue-52742.rs:12:10\n+   |\n+LL | impl Foo<'_, '_> {\n+   |          ^^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 13:5\n+  --> $DIR/issue-52742.rs:13:5\n+   |\n+LL | /     fn take_bar(&mut self, b: Bar<'_>) {\n+LL | |         self.y = b.z\n+LL | |\n+LL | |     }\n+   | |_____^\n \n error: aborting due to previous error\n "}, {"sha": "7a47a77f6bb4ccb24dce60261dd8aa0674d01038", "filename": "src/test/ui/nll/issue-53119.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-\n use std::ops::Deref;\n \n pub struct TypeFieldIterator<'a, T: 'a> {"}, {"sha": "cea458dcb65b92460b2ece1f38f46d9728a87600", "filename": "src/test/ui/nll/issue-53570.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -8,10 +8,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-\n use std::cell::{RefCell, Ref};\n \n trait AnyVec<'a> {"}, {"sha": "c7b6ac592483799312a704220611925a55414554", "filename": "src/test/ui/nll/issue-55288.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55288.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // run-pass\n \n struct Slice(&'static [&'static [u8]]);"}, {"sha": "521d4d33d8633f8a5a68ebbb9cc7e2578ab17d72", "filename": "src/test/ui/nll/issue-55344.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(nll)]\n-#![allow(unreachable_code)]\n #![deny(unused_mut)]\n \n pub fn foo() {"}, {"sha": "d0723047ac08c3f50e905e3cd0c82cdc132f0329", "filename": "src/test/ui/nll/issue-55394.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,12 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55394.rs:9:9\n+   |\n+LL |     fn new(bar: &mut Bar) -> Self {\n+   |                 -            ---- return type is Foo<'2>\n+   |                 |\n+   |                 let's call the lifetime of this reference `'1`\n+LL |         Foo { bar }\n+   |         ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f813d1c915cf62fe97d6dbb68175844f4cbf1117", "filename": "src/test/ui/nll/issue-55394.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Bar;\n \n struct Foo<'s> {\n@@ -8,7 +6,7 @@ struct Foo<'s> {\n \n impl Foo<'_> {\n     fn new(bar: &mut Bar) -> Self {\n-        Foo { bar } //~ERROR lifetime may not live long enough\n+        Foo { bar } //~ERROR\n     }\n }\n "}, {"sha": "ffb94ed7dd7c0eab3ee8a3bbe82708c546aacdaa", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,12 +1,29 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-55394.rs:11:9\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n+  --> $DIR/issue-55394.rs:9:9\n    |\n-LL |     fn new(bar: &mut Bar) -> Self {\n-   |                 -            ---- return type is Foo<'2>\n-   |                 |\n-   |                 let's call the lifetime of this reference `'1`\n LL |         Foo { bar }\n-   |         ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |         ^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n+  --> $DIR/issue-55394.rs:8:5\n+   |\n+LL | /     fn new(bar: &mut Bar) -> Self {\n+LL | |         Foo { bar }\n+LL | |     }\n+   | |_____^\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/issue-55394.rs:9:15\n+   |\n+LL |         Foo { bar }\n+   |               ^^^\n+note: but, the lifetime must be valid for the lifetime '_ as defined on the impl at 7:10...\n+  --> $DIR/issue-55394.rs:7:10\n+   |\n+LL | impl Foo<'_> {\n+   |          ^^\n+   = note: ...so that the expression is assignable:\n+           expected Foo<'_>\n+              found Foo<'_>\n \n error: aborting due to previous error\n "}, {"sha": "4f797f26a1a7c4e16c1d4d0ac9179e0c5874243d", "filename": "src/test/ui/nll/issue-55401.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55401.rs:3:5\n+   |\n+LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n+   |                                               -- lifetime `'a` defined here\n+LL |     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n+LL |     *y\n+   |     ^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fc45824e903c8134a237003e02596c1c77777fb4", "filename": "src/test/ui/nll/issue-55401.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n     *y //~ ERROR"}, {"sha": "50debc6386f6add1b7b497d9e2a8ce931e112e42", "filename": "src/test/ui/nll/issue-55401.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,11 +1,15 @@\n-error: lifetime may not live long enough\n-  --> $DIR/issue-55401.rs:5:5\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/issue-55401.rs:3:5\n    |\n-LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n-   |                                               -- lifetime `'a` defined here\n-LL |     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n LL |     *y\n-   |     ^^ returning this value requires that `'a` must outlive `'static`\n+   |     ^^\n+   |\n+   = note: ...the reference is valid for the static lifetime...\n+note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 1:47\n+  --> $DIR/issue-55401.rs:1:47\n+   |\n+LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n+   |                                               ^^\n \n error: aborting due to previous error\n "}, {"sha": "8fb8351cee26032d532ed773f18db9caaa616f2b", "filename": "src/test/ui/nll/issue-57265-return-type-wf-check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n use std::any::Any;\n \n #[derive(Debug, Clone)]"}, {"sha": "20add62b91ddf19268958d33985f06cb506673c1", "filename": "src/test/ui/nll/issue-57265-return-type-wf-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-57265-return-type-wf-check.rs:22:23\n+  --> $DIR/issue-57265-return-type-wf-check.rs:20:23\n    |\n LL |     let (_, z) = foo(&\"hello\".to_string());\n    |                  -----^^^^^^^^^^^^^^^^^^^-- temporary value is freed at the end of this statement"}, {"sha": "e02d6a0cb5a3957bed3a62507555cc11f08c8588", "filename": "src/test/ui/nll/issue-57280-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // compile-pass\n \n trait Foo<'a> {"}, {"sha": "776a0d359cda6f163a6b308eef7ccc63d3894800", "filename": "src/test/ui/nll/issue-57280.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // compile-pass\n \n trait Foo {"}, {"sha": "c410f0b0bfb4da6fd4d8b73d1ec5298cf5666c8a", "filename": "src/test/ui/nll/issue-57989.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57989.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // Test for ICE from issue 57989\n \n-#![feature(nll)]\n-\n fn f(x: &i32) {\n     let g = &x;\n     *x = 0;     //~ ERROR cannot assign to `*x` which is behind a `&` reference"}, {"sha": "00a9bab486855a62c61372d58ed2d1b6fa69bbd7", "filename": "src/test/ui/nll/issue-57989.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n-  --> $DIR/issue-57989.rs:7:5\n+  --> $DIR/issue-57989.rs:5:5\n    |\n LL | fn f(x: &i32) {\n    |         ---- help: consider changing this to be a mutable reference: `&mut i32`\n@@ -8,7 +8,7 @@ LL |     *x = 0;\n    |     ^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n-  --> $DIR/issue-57989.rs:7:5\n+  --> $DIR/issue-57989.rs:5:5\n    |\n LL |     let g = &x;\n    |             -- borrow of `*x` occurs here"}, {"sha": "0992e3a85ae94964023d9e2db4037b77640ee64b", "filename": "src/test/ui/nll/issue-58053.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,4 +1,3 @@\n-#![allow(warnings)]\n #![feature(nll)]\n \n fn main() {"}, {"sha": "297681ff4038af97a0a1c2c92f6358ca84f2b5ea", "filename": "src/test/ui/nll/issue-58053.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58053.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-58053.rs:7:33\n+  --> $DIR/issue-58053.rs:6:33\n    |\n LL |     let f = |x: &i32| -> &i32 { x };\n    |                 -        ----   ^ returning this value requires that `'1` must outlive `'2`\n@@ -8,7 +8,7 @@ LL |     let f = |x: &i32| -> &i32 { x };\n    |                 let's call the lifetime of this reference `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-58053.rs:11:25\n+  --> $DIR/issue-58053.rs:10:25\n    |\n LL |     let g = |x: &i32| { x };\n    |                 -   -   ^ returning this value requires that `'1` must outlive `'2`"}, {"sha": "3277a9db8ec466c2a0b84f81faf5ea11a51d3c10", "filename": "src/test/ui/nll/issue-58299.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58299.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58299.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58299.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,4 +1,3 @@\n-#![allow(dead_code)]\n #![feature(nll)]\n \n struct A<'a>(&'a ());"}, {"sha": "aba07542d026e826b2d8589e14cc306cad81b1a8", "filename": "src/test/ui/nll/issue-58299.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-58299.rs:17:9\n+  --> $DIR/issue-58299.rs:16:9\n    |\n LL | fn foo<'a>(x: i32) {\n    |        -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         A::<'a>::X..=A::<'static>::X => (),\n    |         ^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-58299.rs:25:27\n+  --> $DIR/issue-58299.rs:24:27\n    |\n LL | fn bar<'a>(x: i32) {\n    |        -- lifetime `'a` defined here"}, {"sha": "1de32ddf531c82ecb1198738b526655fb972b564", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(warnings)]\n-#![feature(nll)]\n-\n struct Wrap<'p> { p: &'p mut i32 }\n \n impl<'p> Drop for Wrap<'p> {"}, {"sha": "80e297807465d6bcde327a5c75f777a1fb56166c", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/maybe-initialized-drop-implicit-fragment-drop.rs:20:5\n+  --> $DIR/maybe-initialized-drop-implicit-fragment-drop.rs:17:5\n    |\n LL |     let wrap = Wrap { p: &mut x };\n    |                          ------ borrow of `x` occurs here"}, {"sha": "e0fcd6250322dc4b63011c2e7ff85dd1ff62c53a", "filename": "src/test/ui/nll/move-errors.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,6 +1,3 @@\n-#![allow(unused)]\n-#![feature(nll)]\n-\n struct A(String);\n struct C(D);\n "}, {"sha": "a4af11e3d40f7368aa4c01135833fd9a73bd7ef5", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-errors.rs:9:13\n+  --> $DIR/move-errors.rs:6:13\n    |\n LL |     let b = *a;\n    |             ^^\n@@ -8,7 +8,7 @@ LL |     let b = *a;\n    |             help: consider removing the `*`: `a`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n-  --> $DIR/move-errors.rs:15:13\n+  --> $DIR/move-errors.rs:12:13\n    |\n LL |     let b = a[0];\n    |             ^^^^\n@@ -17,7 +17,7 @@ LL |     let b = a[0];\n    |             help: consider borrowing here: `&a[0]`\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-errors.rs:22:13\n+  --> $DIR/move-errors.rs:19:13\n    |\n LL |     let s = **r;\n    |             ^^^\n@@ -26,7 +26,7 @@ LL |     let s = **r;\n    |             help: consider removing the `*`: `*r`\n \n error[E0507]: cannot move out of an `Rc`\n-  --> $DIR/move-errors.rs:30:13\n+  --> $DIR/move-errors.rs:27:13\n    |\n LL |     let s = *r;\n    |             ^^\n@@ -35,7 +35,7 @@ LL |     let s = *r;\n    |             help: consider removing the `*`: `r`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n-  --> $DIR/move-errors.rs:35:13\n+  --> $DIR/move-errors.rs:32:13\n    |\n LL |     let a = [A(\"\".to_string())][0];\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     let a = [A(\"\".to_string())][0];\n    |             help: consider borrowing here: `&[A(\"\".to_string())][0]`\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-errors.rs:41:16\n+  --> $DIR/move-errors.rs:38:16\n    |\n LL |     let A(s) = *a;\n    |           -    ^^\n@@ -54,33 +54,33 @@ LL |     let A(s) = *a;\n    |           data moved here\n    |\n note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:41:11\n+  --> $DIR/move-errors.rs:38:11\n    |\n LL |     let A(s) = *a;\n    |           ^\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n-  --> $DIR/move-errors.rs:47:19\n+  --> $DIR/move-errors.rs:44:19\n    |\n LL |     let C(D(s)) = c;\n    |             -     ^ cannot move out of here\n    |             |\n    |             data moved here\n    |\n note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:47:13\n+  --> $DIR/move-errors.rs:44:13\n    |\n LL |     let C(D(s)) = c;\n    |             ^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-errors.rs:54:9\n+  --> $DIR/move-errors.rs:51:9\n    |\n LL |     b = *a;\n    |         ^^ cannot move out of borrowed content\n \n error[E0508]: cannot move out of type `[B; 1]`, a non-copy array\n-  --> $DIR/move-errors.rs:77:11\n+  --> $DIR/move-errors.rs:74:11\n    |\n LL |     match x[0] {\n    |           ^^^^\n@@ -94,15 +94,15 @@ LL |         B::V(s) => (),\n    |              - ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/move-errors.rs:79:14\n+  --> $DIR/move-errors.rs:76:14\n    |\n LL |         B::U(d) => (),\n    |              ^\n LL |         B::V(s) => (),\n    |              ^\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n-  --> $DIR/move-errors.rs:86:11\n+  --> $DIR/move-errors.rs:83:11\n    |\n LL |     match x {\n    |           ^ cannot move out of here\n@@ -111,13 +111,13 @@ LL |         B::U(D(s)) => (),\n    |                - data moved here\n    |\n note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:89:16\n+  --> $DIR/move-errors.rs:86:16\n    |\n LL |         B::U(D(s)) => (),\n    |                ^\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n-  --> $DIR/move-errors.rs:95:11\n+  --> $DIR/move-errors.rs:92:11\n    |\n LL |     match x {\n    |           ^ cannot move out of here\n@@ -126,13 +126,13 @@ LL |         (D(s), &t) => (),\n    |            - data moved here\n    |\n note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:98:12\n+  --> $DIR/move-errors.rs:95:12\n    |\n LL |         (D(s), &t) => (),\n    |            ^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-errors.rs:95:11\n+  --> $DIR/move-errors.rs:92:11\n    |\n LL |     match x {\n    |           ^ cannot move out of borrowed content\n@@ -141,13 +141,13 @@ LL |         (D(s), &t) => (),\n    |                 - data moved here\n    |\n note: move occurs because `t` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:98:17\n+  --> $DIR/move-errors.rs:95:17\n    |\n LL |         (D(s), &t) => (),\n    |                 ^\n \n error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n-  --> $DIR/move-errors.rs:105:11\n+  --> $DIR/move-errors.rs:102:11\n    |\n LL |     match x {\n    |           ^ cannot move out of here\n@@ -158,13 +158,13 @@ LL |         F(s, mut t) => (),\n    |           data moved here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/move-errors.rs:107:11\n+  --> $DIR/move-errors.rs:104:11\n    |\n LL |         F(s, mut t) => (),\n    |           ^  ^^^^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-errors.rs:113:11\n+  --> $DIR/move-errors.rs:110:11\n    |\n LL |     match *x {\n    |           ^^\n@@ -176,7 +176,7 @@ LL |         Ok(s) | Err(s) => (),\n    |            - data moved here\n    |\n note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:115:12\n+  --> $DIR/move-errors.rs:112:12\n    |\n LL |         Ok(s) | Err(s) => (),\n    |            ^"}, {"sha": "e7caf89e78391d2b50eec6e068edd5afbe67764e", "filename": "src/test/ui/nll/move-subpaths-moves-root.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn main() {\n     let x = (vec![1, 2, 3], );\n     drop(x.0);"}, {"sha": "7030d5b3305f1181990d13e7b20844d6deabcf1d", "filename": "src/test/ui/nll/move-subpaths-moves-root.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/move-subpaths-moves-root.rs:6:10\n+  --> $DIR/move-subpaths-moves-root.rs:4:10\n    |\n LL |     drop(x.0);\n    |          --- value moved here"}, {"sha": "b6cfcd98732b458d9b77c85c7ec4570b2fd93ee2", "filename": "src/test/ui/nll/normalization-bounds-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,6 @@\n // Check that we error when a bound from the impl is not satisfied when\n // normalizing an associated type.\n \n-#![feature(nll)]\n trait Visitor<'d> {\n     type Value;\n }"}, {"sha": "951e73e7fd76555659eb5261b618e7493a626f2a", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,16 +1,16 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` due to conflicting requirements\n-  --> $DIR/normalization-bounds-error.rs:13:1\n+  --> $DIR/normalization-bounds-error.rs:12:1\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 13:14...\n-  --> $DIR/normalization-bounds-error.rs:13:14\n+note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 12:14...\n+  --> $DIR/normalization-bounds-error.rs:12:14\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |              ^^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 13:18...\n-  --> $DIR/normalization-bounds-error.rs:13:18\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 12:18...\n+  --> $DIR/normalization-bounds-error.rs:12:18\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |                  ^^"}, {"sha": "5d2825ef2d670cd65ad1a137a9d19e9996e94a65", "filename": "src/test/ui/nll/normalization-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,7 +2,6 @@\n \n //run-pass\n \n-#![feature(nll)]\n trait Visitor<'d> {\n     type Value;\n }"}, {"sha": "6d5bdfa4da2f06bc1afd55e9b2f261e19bf6d9a4", "filename": "src/test/ui/nll/promotable-mutable-zst-doesnt-conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromotable-mutable-zst-doesnt-conflict.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -3,8 +3,6 @@\n \n // run-pass\n \n-#![feature(nll)]\n-\n pub fn main() {\n     let mut x: Vec<&[i32; 0]> = Vec::new();\n     for i in 0..10 {"}, {"sha": "5f95ae13c58af0f07c4465a7cb0e4f85db279bf0", "filename": "src/test/ui/nll/promoted-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromoted-bounds.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n fn shorten_lifetime<'a, 'b, 'min>(a: &'a i32, b: &'b i32) -> &'min i32\n where\n     'a: 'min,"}, {"sha": "df347f4e7f0fec3642272b4b763da71a8da138f2", "filename": "src/test/ui/nll/promoted-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromoted-bounds.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `l` does not live long enough\n-  --> $DIR/promoted-bounds.rs:21:17\n+  --> $DIR/promoted-bounds.rs:19:17\n    |\n LL |     let ptr = {\n    |         --- borrow later stored here"}, {"sha": "cc9f17fd4e6bc0ae60fb6eff90f6136997cc3422", "filename": "src/test/ui/nll/promoted-closure-pair.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-closure-pair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-closure-pair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromoted-closure-pair.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // Check that we handle multiple closures in the same promoted constant.\n \n-#![feature(nll)]\n-\n fn foo() -> &'static i32 {\n     let z = 0;\n     let p = &(|y| y, |y| y);"}, {"sha": "000bdf85804d8eb970f0e62d67d864b46ff42fbc", "filename": "src/test/ui/nll/promoted-closure-pair.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-closure-pair.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fpromoted-closure-pair.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpromoted-closure-pair.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing local variable `z`\n-  --> $DIR/promoted-closure-pair.rs:9:5\n+  --> $DIR/promoted-closure-pair.rs:7:5\n    |\n LL |     p.1(&z)\n    |     ^^^^--^"}, {"sha": "72987629848c88b873e004acebf6fc25e1bb8d48", "filename": "src/test/ui/nll/relate_tys/issue-48071.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fissue-48071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fissue-48071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fissue-48071.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -6,10 +6,6 @@\n //\n // compile-pass\n \n-#![allow(warnings)]\n-#![feature(dyn_trait)]\n-#![feature(nll)]\n-\n trait Foo {\n     fn foo(&self) { }\n }"}, {"sha": "77129f4468f047a3f89be10302a52bfa42c838e1", "filename": "src/test/ui/nll/relate_tys/var-appears-twice.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,9 +2,6 @@\n // function returning always its first argument can be upcast to one\n // that returns either first or second argument.\n \n-#![feature(nll)]\n-#![allow(warnings)]\n-\n use std::cell::Cell;\n \n type DoubleCell<A> = Cell<(A, A)>;"}, {"sha": "d032ce6f2132ce21f97cbc1e8bce1a05a4a9a06e", "filename": "src/test/ui/nll/relate_tys/var-appears-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fvar-appears-twice.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `b` does not live long enough\n-  --> $DIR/var-appears-twice.rs:23:38\n+  --> $DIR/var-appears-twice.rs:20:38\n    |\n LL |     let x: DoubleCell<_> = make_cell(&b);\n    |            -------------             ^^ borrowed value does not live long enough"}, {"sha": "dca61d39dfe813e2e22f3a9a56e50eac5aa32cc8", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,5 @@\n // Regression test for issue #46557\n \n-#![feature(nll)]\n-#![allow(dead_code)]\n-\n fn gimme_static_mut() -> &'static mut u32 {\n     let ref mut x = 1234543;\n     x //~ ERROR cannot return value referencing temporary value [E0515]"}, {"sha": "720440a0ae5f8a27d3edd98915e57ec62b725bef", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/return-ref-mut-issue-46557.rs:8:5\n+  --> $DIR/return-ref-mut-issue-46557.rs:5:5\n    |\n LL |     let ref mut x = 1234543;\n    |                     ------- temporary value created here"}, {"sha": "dc67c1a68aaf639d4528b8d51fb85a60ed689b41", "filename": "src/test/ui/nll/ty-outlives/issue-53789-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,9 +2,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-#![allow(unused_variables)]\n-\n use std::collections::BTreeMap;\n \n trait ValueTree {"}, {"sha": "1b80be2eaff99169c1e96e81baa0cf38a0b036d4", "filename": "src/test/ui/nll/ty-outlives/issue-53789-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -2,9 +2,6 @@\n //\n // compile-pass\n \n-#![feature(nll)]\n-#![allow(unused_variables)]\n-\n use std::collections::BTreeMap;\n use std::ops::Range;\n use std::cmp::Ord;"}, {"sha": "3a84cbfbedc09b7b306697fb491a742834e09b3d", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:15:5\n+   |\n+LL |     bar::<T::Output>()\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "dce88b88c7530bbbddd498e3847d6fbdd2be0f11", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Test that we are able to establish that `<T as\n // MyTrait<'a>>::Output` outlives `'b` here. We need to prove however\n // that `<T as MyTrait<'a>>::Output` outlives `'a`, so we also have to"}, {"sha": "1a5a3719fd86d36f0b7fd3874e9a95d4a53da1d2", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,10 +1,15 @@\n-error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n-  --> $DIR/projection-where-clause-env-wrong-bound.rs:17:5\n+error[E0309]: the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:15:5\n    |\n LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+   = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n+note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:15:5\n+   |\n+LL |     bar::<T::Output>()\n+   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "731476661112148053971caa944d21a80e19f012", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Test that when we have a `<T as MyTrait<'a>>::Output: 'a`\n // relationship in the environment we take advantage of it.  In this\n // case, that means we **don't** have to prove that `T: 'a`."}, {"sha": "ec5594375709bd01b859f3d769804440c0dd68ca", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body-nll-feature.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,30 +0,0 @@\n-// Test that we assume that universal types like `T` outlive the\n-// function body. Same as ty-param-fn-body, but uses `feature(nll)`,\n-// which affects error reporting.\n-\n-#![feature(nll)]\n-\n-#![allow(warnings)]\n-\n-use std::cell::Cell;\n-\n-// No errors here, because `'a` is local to the body.\n-fn region_within_body<T>(t: T) {\n-    let some_int = 22;\n-    let cell = Cell::new(&some_int);\n-    outlives(cell, t)\n-}\n-\n-// Error here, because T: 'a is not satisfied.\n-fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n-    outlives(cell, t)\n-    //~^ ERROR the parameter type `T` may not live long enough\n-}\n-\n-fn outlives<'a, T>(x: Cell<&'a usize>, y: T)\n-where\n-    T: 'a,\n-{\n-}\n-\n-fn main() {}"}, {"sha": "b3c02f7f42919fd65adb72bd13c6e29894d06c5d", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body-nll-feature.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff71b80a85185c5d0ce594c13efddcaca9be54c5/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr?ref=ff71b80a85185c5d0ce594c13efddcaca9be54c5", "patch": "@@ -1,11 +0,0 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-fn-body-nll-feature.rs:20:5\n-   |\n-LL |     outlives(cell, t)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "235bf4167d5215f5f234fa529fa6e1fb11402ab5", "filename": "src/test/ui/nll/type-alias-free-regions.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,22 @@\n+error: lifetime may not live long enough\n+  --> $DIR/type-alias-free-regions.rs:17:9\n+   |\n+LL | impl<'a> FromBox<'a> for C<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn from_box(b: Box<B>) -> Self {\n+   |                 - has type `std::boxed::Box<std::boxed::Box<&'1 isize>>`\n+LL |         C { f: b }\n+   |         ^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-alias-free-regions.rs:27:9\n+   |\n+LL | impl<'a> FromTuple<'a> for C<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn from_tuple(b: (B,)) -> Self {\n+   |                   - has type `(std::boxed::Box<&'1 isize>,)`\n+LL |         C { f: Box::new(b.0) }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fd5566f35d5141f5f49a39688f40bf03bc3e5ada", "filename": "src/test/ui/nll/type-alias-free-regions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Test that we don't assume that type aliases have the same type parameters\n // as the type they alias and then panic when we see this.\n \n-#![feature(nll)]\n-\n type A<'a> = &'a isize;\n type B<'a> = Box<A<'a>>;\n "}, {"sha": "00d58d34362e644c78a445592e7a1e2f9fb8ffdc", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,22 +1,52 @@\n-error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:19:9\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/type-alias-free-regions.rs:17:9\n    |\n-LL | impl<'a> FromBox<'a> for C<'a> {\n-   |      -- lifetime `'a` defined here\n-LL |     fn from_box(b: Box<B>) -> Self {\n-   |                 - has type `std::boxed::Box<std::boxed::Box<&'1 isize>>`\n LL |         C { f: b }\n-   |         ^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+   |         ^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 16:5...\n+  --> $DIR/type-alias-free-regions.rs:16:5\n+   |\n+LL | /     fn from_box(b: Box<B>) -> Self {\n+LL | |         C { f: b }\n+LL | |     }\n+   | |_____^\n+   = note: ...so that the expression is assignable:\n+           expected std::boxed::Box<std::boxed::Box<&isize>>\n+              found std::boxed::Box<std::boxed::Box<&isize>>\n+note: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 15:6...\n+  --> $DIR/type-alias-free-regions.rs:15:6\n+   |\n+LL | impl<'a> FromBox<'a> for C<'a> {\n+   |      ^^\n+   = note: ...so that the expression is assignable:\n+           expected C<'a>\n+              found C<'_>\n \n-error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:29:9\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/type-alias-free-regions.rs:27:16\n    |\n-LL | impl<'a> FromTuple<'a> for C<'a> {\n-   |      -- lifetime `'a` defined here\n-LL |     fn from_tuple(b: (B,)) -> Self {\n-   |                   - has type `(std::boxed::Box<&'1 isize>,)`\n LL |         C { f: Box::new(b.0) }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+   |                ^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 26:5...\n+  --> $DIR/type-alias-free-regions.rs:26:5\n+   |\n+LL | /     fn from_tuple(b: (B,)) -> Self {\n+LL | |         C { f: Box::new(b.0) }\n+LL | |     }\n+   | |_____^\n+   = note: ...so that the expression is assignable:\n+           expected std::boxed::Box<&isize>\n+              found std::boxed::Box<&isize>\n+note: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 25:6...\n+  --> $DIR/type-alias-free-regions.rs:25:6\n+   |\n+LL | impl<'a> FromTuple<'a> for C<'a> {\n+   |      ^^\n+   = note: ...so that the expression is assignable:\n+           expected C<'a>\n+              found C<'_>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "da0d9229c1262bb9edfda28e23ee317df70e8df6", "filename": "src/test/ui/nll/unused-mut-issue-50343.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![deny(unused_mut)]\n \n fn main() {"}, {"sha": "261d678db67587bc37514f856d1117a56ec067c2", "filename": "src/test/ui/nll/unused-mut-issue-50343.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/unused-mut-issue-50343.rs:5:33\n+  --> $DIR/unused-mut-issue-50343.rs:4:33\n    |\n LL |     vec![(42, 22)].iter().map(|(mut x, _y)| ()).count();\n    |                                 ----^\n    |                                 |\n    |                                 help: remove this `mut`\n    |\n note: lint level defined here\n-  --> $DIR/unused-mut-issue-50343.rs:2:9\n+  --> $DIR/unused-mut-issue-50343.rs:1:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "0d9828342d8cbefc16fc42cef29e4b8570ad4b1d", "filename": "src/test/ui/nll/user-annotations/adt-brace-enums.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n enum SomeEnum<T> {\n     SomeVariant { t: T }\n }"}, {"sha": "e38b77fdcea012dd5b719a33c1222c933ca402f3", "filename": "src/test/ui/nll/user-annotations/adt-brace-enums.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-brace-enums.rs:27:48\n+  --> $DIR/adt-brace-enums.rs:25:48\n    |\n LL |     SomeEnum::SomeVariant::<&'static u32> { t: &c };\n    |                                                ^^\n@@ -10,7 +10,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-brace-enums.rs:32:43\n+  --> $DIR/adt-brace-enums.rs:30:43\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-brace-enums.rs:42:47\n+  --> $DIR/adt-brace-enums.rs:40:47\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "bdbfd87d584d9c15dc578b510363ec8bebde1e49", "filename": "src/test/ui/nll/user-annotations/adt-brace-structs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n struct SomeStruct<T> { t: T }\n \n fn no_annot() {"}, {"sha": "3c3003477c2d6e688fb47d0a0c8e9e9eab664f0e", "filename": "src/test/ui/nll/user-annotations/adt-brace-structs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-brace-structs.rs:25:37\n+  --> $DIR/adt-brace-structs.rs:23:37\n    |\n LL |     SomeStruct::<&'static u32> { t: &c };\n    |                                     ^^\n@@ -10,7 +10,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-brace-structs.rs:30:32\n+  --> $DIR/adt-brace-structs.rs:28:32\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-brace-structs.rs:40:36\n+  --> $DIR/adt-brace-structs.rs:38:36\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "53853668d1978bd14370906400ae26d3a819cb85", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n #![allow(warnings)]\n \n use std::cell::Cell;"}, {"sha": "bb703412228800d6be0d47cf2bac4026f47728d0", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-nullary-enums.rs:34:41\n+  --> $DIR/adt-nullary-enums.rs:33:41\n    |\n LL |         SomeEnum::SomeVariant(Cell::new(&c)),\n    |                               ----------^^-\n@@ -11,7 +11,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-nullary-enums.rs:42:41\n+  --> $DIR/adt-nullary-enums.rs:41:41\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -26,7 +26,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-nullary-enums.rs:55:45\n+  --> $DIR/adt-nullary-enums.rs:54:45\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "efe8dfda1910a28f6f9fbdf1567241a24e8c57be", "filename": "src/test/ui/nll/user-annotations/adt-tuple-enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n #![allow(warnings)]\n \n enum SomeEnum<T> {"}, {"sha": "810912bf886187a3b9fb2b6ec7670ed9a5449fb1", "filename": "src/test/ui/nll/user-annotations/adt-tuple-enums.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-tuple-enums.rs:29:43\n+  --> $DIR/adt-tuple-enums.rs:28:43\n    |\n LL |     SomeEnum::SomeVariant::<&'static u32>(&c);\n    |                                           ^^\n@@ -10,7 +10,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-tuple-enums.rs:34:38\n+  --> $DIR/adt-tuple-enums.rs:33:38\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-tuple-enums.rs:44:42\n+  --> $DIR/adt-tuple-enums.rs:43:42\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "37284e1fda82b307b76700e91b02f5ccb6c5f221", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n struct SomeStruct<T>(T);\n \n fn no_annot() {"}, {"sha": "4d2140eca1b02a87c239ba64ed0d92607fb3fe91", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-tuple-struct.rs:25:32\n+  --> $DIR/adt-tuple-struct.rs:23:32\n    |\n LL |     SomeStruct::<&'static u32>(&c);\n    |                                ^^\n@@ -10,7 +10,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-tuple-struct.rs:30:27\n+  --> $DIR/adt-tuple-struct.rs:28:27\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/adt-tuple-struct.rs:40:31\n+  --> $DIR/adt-tuple-struct.rs:38:31\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "bb6129dacda8d1e2368c426d6bf9421e09831966", "filename": "src/test/ui/nll/user-annotations/cast_static_lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,4 @@\n #![allow(warnings)]\n-#![feature(nll)]\n \n fn main() {\n     let x = 22_u32;"}, {"sha": "4599d04e7e2300c3eb27ab2121cbc7c17ddf32da", "filename": "src/test/ui/nll/user-annotations/cast_static_lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/cast_static_lifetime.rs:6:19\n+  --> $DIR/cast_static_lifetime.rs:5:19\n    |\n LL |     let y: &u32 = (&x) as &'static u32;\n    |                   ^^^^----------------"}, {"sha": "c39301588acfa1c02178597cdae68ffd9d2e5279", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+   |\n+LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |     <Foo<'a>>::C\n+   |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e3a8a5f58dfda6193981ce0cc20d0b41ca1b8b9c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Foo<'a> { x: &'a u32 }\n \n impl<'a> Foo<'a> {"}, {"sha": "77e1339dc161d7ed43667e6ff2f4e4fdc8f7728e", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,10 +1,23 @@\n-error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-inherent-1.rs:10:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+   |\n+LL |     <Foo<'a>>::C\n+   |     ^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 7:8...\n+  --> $DIR/constant-in-expr-inherent-1.rs:7:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n+   |        ^^\n+   = note: ...so that the types are compatible:\n+           expected Foo<'_>\n+              found Foo<'a>\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+   |\n LL |     <Foo<'a>>::C\n-   |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "90696d4b17d8dd3f66673df4061fdd7ed84327d2", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Test that we still check constants are well-formed, even when we there's no\n // type annotation to check.\n \n-#![feature(nll)]\n-\n const FUN: fn(&'static ()) = |_| {};\n struct A;\n impl A {"}, {"sha": "12065a85aa4a0a512872fb8943ecdb3bf92ff4f8", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-2.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/constant-in-expr-inherent-2.rs:25:9\n+  --> $DIR/constant-in-expr-inherent-2.rs:23:9\n    |\n LL |     FUN(&x);\n    |     ----^^-\n@@ -11,7 +11,7 @@ LL | }\n    | - `x` dropped here while still borrowed\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/constant-in-expr-inherent-2.rs:26:23\n+  --> $DIR/constant-in-expr-inherent-2.rs:24:23\n    |\n LL |     A::ASSOCIATED_FUN(&x);\n    |     ------------------^^-\n@@ -23,7 +23,7 @@ LL | }\n    | - `x` dropped here while still borrowed\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/constant-in-expr-inherent-2.rs:27:28\n+  --> $DIR/constant-in-expr-inherent-2.rs:25:28\n    |\n LL |     B::ALSO_ASSOCIATED_FUN(&x);\n    |     -----------------------^^-\n@@ -35,7 +35,7 @@ LL | }\n    | - `x` dropped here while still borrowed\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/constant-in-expr-inherent-2.rs:28:31\n+  --> $DIR/constant-in-expr-inherent-2.rs:26:31\n    |\n LL |     <_>::TRAIT_ASSOCIATED_FUN(&x);\n    |     --------------------------^^-"}, {"sha": "541a2cfaf299aaa3236bf4d1c8105231786efa1f", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/constant-in-expr-normalize.rs:18:5\n+   |\n+LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |     <() as Foo<'a>>::C\n+   |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b7095430d8bd2849fca33b546c4839e620fc4e01", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n trait Mirror {\n     type Me;\n }"}, {"sha": "f49d68458bea5d10b522c69110b3cb5100795b90", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,10 +1,15 @@\n-error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-normalize.rs:20:5\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/constant-in-expr-normalize.rs:18:5\n    |\n-LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n LL |     <() as Foo<'a>>::C\n-   |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: ...the reference is valid for the static lifetime...\n+note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 17:8\n+  --> $DIR/constant-in-expr-normalize.rs:17:8\n+   |\n+LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "ea0fcb6d634cd9820ca0d975bf4bd7c9c8380e47", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n+   |\n+LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |     <() as Foo<'a>>::C\n+   |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e0400b2cc0267fb1d393bce8689490d683289d16", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "451bcf41e42a9b2dc42daa125c8ada007b7a8254", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,10 +1,15 @@\n-error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-1.rs:12:5\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n    |\n-LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n LL |     <() as Foo<'a>>::C\n-   |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: ...the reference is valid for the static lifetime...\n+note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 9:8\n+  --> $DIR/constant-in-expr-trait-item-1.rs:9:8\n+   |\n+LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "ff549f1d88bd44bdd6bd88e1eeeaa09c3e45638a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n+   |\n+LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |     <T as Foo<'a>>::C\n+   |     ^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "73c4e577b05c087a16b4e7df73e3f5c6f22b185a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "d129e55e1e6f63c8c5d49fbeb61f7c917501233a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,10 +1,15 @@\n-error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-2.rs:12:5\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n    |\n-LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n LL |     <T as Foo<'a>>::C\n-   |     ^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: ...the reference is valid for the static lifetime...\n+note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 9:8\n+  --> $DIR/constant-in-expr-trait-item-2.rs:9:8\n+   |\n+LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "7f160d8e398b9553a78b6a3d36c8e24b3d78a8e9", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+   |\n+LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |     T::C\n+   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "567e31ef936321b7d7d0b10a84730e11cfedbb86", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "77655fe091b6275fedbd0721f22cff7b94929a31", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,10 +1,23 @@\n-error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-3.rs:12:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+   |\n+LL |     T::C\n+   |     ^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 9:8...\n+  --> $DIR/constant-in-expr-trait-item-3.rs:9:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n+   |        ^^\n+   = note: ...so that the types are compatible:\n+           expected Foo<'_>\n+              found Foo<'a>\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+   |\n LL |     T::C\n-   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n+   |     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "38db6d1c4c56fdf9d89b40f372499d783cc9f13c", "filename": "src/test/ui/nll/user-annotations/fns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n fn some_fn<T>(arg: T) { }\n \n fn no_annot() {"}, {"sha": "e0640da39e2b62fb3211d3c89e7fdab35b910ab9", "filename": "src/test/ui/nll/user-annotations/fns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/fns.rs:25:29\n+  --> $DIR/fns.rs:23:29\n    |\n LL |     some_fn::<&'static u32>(&c);\n    |     ------------------------^^-\n@@ -10,7 +10,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/fns.rs:30:24\n+  --> $DIR/fns.rs:28:24\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/fns.rs:40:28\n+  --> $DIR/fns.rs:38:28\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "6b9d30f5ab4259eadc86b5327cdeef3aafd3dcf6", "filename": "src/test/ui/nll/user-annotations/issue-54570-bootstrapping.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54570-bootstrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54570-bootstrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54570-bootstrapping.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,4 @@\n // compile-pass\n-#![feature(nll)]\n \n // This test is reduced from a scenario pnkfelix encountered while\n // bootstrapping the compiler."}, {"sha": "4d18e96cc1543f8157d0dc0d570cace448f5e3e1", "filename": "src/test/ui/nll/user-annotations/issue-55219.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55219.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -5,8 +5,6 @@\n //\n // run-pass\n \n-#![feature(nll)]\n-\n pub struct Foo<T>(T);\n \n impl<T> Foo<T> {"}, {"sha": "29969c7b4c6c84696aea31026be2f68a6bb6e023", "filename": "src/test/ui/nll/user-annotations/issue-55241.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55241.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -7,8 +7,6 @@\n //\n // run-pass\n \n-#![feature(nll)]\n-\n pub trait Hasher {\n     type Out: Eq;\n }"}, {"sha": "beafc597ac113ba4e1507f9b4eadb455078959e1", "filename": "src/test/ui/nll/user-annotations/method-call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n trait Bazoom<T> {\n     fn method<U>(&self, arg: T, arg2: U) { }\n }"}, {"sha": "10447e45a6d422de9a6ad372f19bf5083a0a1f77", "filename": "src/test/ui/nll/user-annotations/method-call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/method-call.rs:38:34\n+  --> $DIR/method-call.rs:36:34\n    |\n LL |     a.method::<&'static u32>(b,  &c);\n    |     -----------------------------^^-\n@@ -10,7 +10,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/method-call.rs:45:29\n+  --> $DIR/method-call.rs:43:29\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/method-call.rs:59:33\n+  --> $DIR/method-call.rs:57:33\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "950771f35e49c350fe0043da8819f24490d78149", "filename": "src/test/ui/nll/user-annotations/method-ufcs-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n trait Bazoom<T>: Sized {\n     fn method<U>(self, arg: T, arg2: U) { }\n }"}, {"sha": "962ddfd2bd151f372c7af5b88dd2dca42808b9cc", "filename": "src/test/ui/nll/user-annotations/method-ufcs-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-1.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/method-ufcs-1.rs:32:7\n+  --> $DIR/method-ufcs-1.rs:30:7\n    |\n LL |     x(&a, b, c);\n    |     --^^-------\n@@ -10,7 +10,7 @@ LL | }\n    | - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n-  --> $DIR/method-ufcs-1.rs:39:36\n+  --> $DIR/method-ufcs-1.rs:37:36\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n-  --> $DIR/method-ufcs-1.rs:53:41\n+  --> $DIR/method-ufcs-1.rs:51:41\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "7dc0f0c12a43e93e09f87d5a7827c68252209413", "filename": "src/test/ui/nll/user-annotations/method-ufcs-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n trait Bazoom<T>: Sized {\n     fn method<U>(self, arg: T, arg2: U) { }\n }"}, {"sha": "63d59905e1c3892f90fb174794c658e6a6e0ba13", "filename": "src/test/ui/nll/user-annotations/method-ufcs-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-2.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/method-ufcs-2.rs:32:7\n+  --> $DIR/method-ufcs-2.rs:30:7\n    |\n LL |     x(&a, b, c);\n    |     --^^-------\n@@ -10,7 +10,7 @@ LL | }\n    | - `a` dropped here while still borrowed\n \n error[E0597]: `b` does not live long enough\n-  --> $DIR/method-ufcs-2.rs:39:39\n+  --> $DIR/method-ufcs-2.rs:37:39\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `b` dropped here while still borrowed\n \n error[E0597]: `b` does not live long enough\n-  --> $DIR/method-ufcs-2.rs:53:44\n+  --> $DIR/method-ufcs-2.rs:51:44\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "59d2009d14bdfd3e2917c933d29bfe4d9a94a27a", "filename": "src/test/ui/nll/user-annotations/method-ufcs-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Unit test for the \"user substitutions\" that are annotated on each\n // node.\n \n-#![feature(nll)]\n-\n trait Bazoom<T> {\n     fn method<U>(&self, arg: T, arg2: U) { }\n }"}, {"sha": "e7851833e93b23a7f77a130197e6dd19f2dfb33d", "filename": "src/test/ui/nll/user-annotations/method-ufcs-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c` does not live long enough\n-  --> $DIR/method-ufcs-3.rs:38:53\n+  --> $DIR/method-ufcs-3.rs:36:53\n    |\n LL |     <_ as Bazoom<_>>::method::<&'static u32>(&a, b, &c);\n    |     ------------------------------------------------^^-\n@@ -10,7 +10,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/method-ufcs-3.rs:45:48\n+  --> $DIR/method-ufcs-3.rs:43:48\n    |\n LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n    |                                   -- lifetime `'a` defined here\n@@ -24,7 +24,7 @@ LL | }\n    | - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n-  --> $DIR/method-ufcs-3.rs:59:52\n+  --> $DIR/method-ufcs-3.rs:57:52\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here"}, {"sha": "cfbc0bcf6b0fc0375b29ce32adf613dad52c3832", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Check that substitutions given on the self type (here, `A`) can be\n // used in combination with annotations given for method arguments.\n "}, {"sha": "06f20d9b2355957ec460832005a4aad5947b9770", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-2.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/method-ufcs-inherent-2.rs:16:37\n+  --> $DIR/method-ufcs-inherent-2.rs:14:37\n    |\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n@@ -14,7 +14,7 @@ LL | }\n    | - `v` dropped here while still borrowed\n \n error[E0597]: `v` does not live long enough\n-  --> $DIR/method-ufcs-inherent-2.rs:16:41\n+  --> $DIR/method-ufcs-inherent-2.rs:14:41\n    |\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here"}, {"sha": "85e7597390d5cb8849686e148345e7fe955a897f", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n // Check that inherent methods invoked with `<T>::new` style\n // carry their annotations through to NLL in connection with\n // method type parameters."}, {"sha": "0f83e99cdfb92f186eecdecf5c6c085531f0b1ca", "filename": "src/test/ui/nll/user-annotations/method-ufcs-inherent-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-inherent-4.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/method-ufcs-inherent-4.rs:17:37\n+  --> $DIR/method-ufcs-inherent-4.rs:15:37\n    |\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here\n@@ -14,7 +14,7 @@ LL | }\n    | - `v` dropped here while still borrowed\n \n error[E0597]: `v` does not live long enough\n-  --> $DIR/method-ufcs-inherent-4.rs:17:41\n+  --> $DIR/method-ufcs-inherent-4.rs:15:41\n    |\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here"}, {"sha": "870e3d8110cd5e34b487a02157a0da808d240da1", "filename": "src/test/ui/nll/user-annotations/normalization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,8 +1,6 @@\n // Test that we enforce a `&'static` requirement that is only visible\n // after normalization.\n \n-#![feature(nll)]\n-\n trait Foo { type Out; }\n impl Foo for () { type Out = &'static u32; }\n "}, {"sha": "4c7893789a53516cf57d10500cff3db0bd89cf7c", "filename": "src/test/ui/nll/user-annotations/normalization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/normalization.rs:11:31\n+  --> $DIR/normalization.rs:9:31\n    |\n LL |     let b: <() as Foo>::Out = &a;\n    |            ----------------   ^^ borrowed value does not live long enough"}, {"sha": "a06229a02032a48afba91d61d2394ffc7c2da362", "filename": "src/test/ui/nll/user-annotations/normalize-self-ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalize-self-ty.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -4,8 +4,6 @@\n //\n // run-pass\n \n-#![feature(nll)]\n-\n trait Mirror {\n     type Me;\n }"}, {"sha": "59cd69c0ca55d7c3d2e1280ed7d6a40f4d957403", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n enum Foo<'a> {\n     Bar { field: &'a u32 }\n }"}, {"sha": "a97e7a9fd46fc3a3b1647c5ac17e29f78ba51609", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_brace_enum_variant.rs:9:33\n+  --> $DIR/pattern_substs_on_brace_enum_variant.rs:7:33\n    |\n LL |     let foo = Foo::Bar { field: &y };\n    |                                 ^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    | - `y` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_brace_enum_variant.rs:16:33\n+  --> $DIR/pattern_substs_on_brace_enum_variant.rs:14:33\n    |\n LL |     let foo = Foo::Bar { field: &y };\n    |                                 ^^ borrowed value does not live long enough"}, {"sha": "1586c4ea30c62b2a56c78b92de4302058c2260b5", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Foo<'a> { field: &'a u32 }\n \n fn in_let() {"}, {"sha": "408d7c2a5e2a5c62250df15c5bfb384f48246274", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_brace_struct.rs:7:28\n+  --> $DIR/pattern_substs_on_brace_struct.rs:5:28\n    |\n LL |     let foo = Foo { field: &y };\n    |                            ^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    | - `y` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_brace_struct.rs:14:28\n+  --> $DIR/pattern_substs_on_brace_struct.rs:12:28\n    |\n LL |     let foo = Foo { field: &y };\n    |                            ^^ borrowed value does not live long enough"}, {"sha": "6fa59fdd8d8996e9595f67aaeac022cd8fd79238", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n enum Foo<'a> {\n     Bar(&'a u32)\n }"}, {"sha": "920c906f63a5824a3e08bdf049149f8af153135b", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:9:24\n+  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:7:24\n    |\n LL |     let foo = Foo::Bar(&y);\n    |                        ^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    | - `y` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:16:24\n+  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:14:24\n    |\n LL |     let foo = Foo::Bar(&y);\n    |                        ^^ borrowed value does not live long enough"}, {"sha": "7486aab0e0883628e60630700503519e39953a50", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct Foo<'a>(&'a u32);\n \n fn in_let() {"}, {"sha": "3f01638d84757f6aaee8764ab4c8e56f27d2d7e6", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_tuple_struct.rs:7:19\n+  --> $DIR/pattern_substs_on_tuple_struct.rs:5:19\n    |\n LL |     let foo = Foo(&y);\n    |                   ^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    | - `y` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/pattern_substs_on_tuple_struct.rs:14:19\n+  --> $DIR/pattern_substs_on_tuple_struct.rs:12:19\n    |\n LL |     let foo = Foo(&y);\n    |                   ^^ borrowed value does not live long enough"}, {"sha": "b92f8bfd23b234ce2cb7e0dc5c506e46ed7b6c00", "filename": "src/test/ui/nll/user-annotations/promoted-annotation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,7 +1,5 @@\n // Test that type annotations are checked in promoted constants correctly.\n \n-#![feature(nll)]\n-\n fn foo<'a>() {\n     let x = 0;\n     let f = &drop::<&'a i32>;"}, {"sha": "cb99a6a369d0b25a12b4a4656b128c832335ea36", "filename": "src/test/ui/nll/user-annotations/promoted-annotation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpromoted-annotation.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/promoted-annotation.rs:8:7\n+  --> $DIR/promoted-annotation.rs:6:7\n    |\n LL | fn foo<'a>() {\n    |        -- lifetime `'a` defined here"}, {"sha": "101b5cfabb3d06419e37559c583179c4b15f5790", "filename": "src/test/ui/nll/user-annotations/type_ascription_static_lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,4 @@\n #![allow(warnings)]\n-#![feature(nll)]\n #![feature(type_ascription)]\n \n fn main() {"}, {"sha": "133bbef52311dc1135ea0faf821e4619383161f3", "filename": "src/test/ui/nll/user-annotations/type_ascription_static_lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/type_ascription_static_lifetime.rs:7:19\n+  --> $DIR/type_ascription_static_lifetime.rs:6:19\n    |\n LL |     let y: &u32 = &x: &'static u32;\n    |                   ^^--------------"}, {"sha": "7b499af632ecee2645fe079cde2cbfe6e9b342c6", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -4,7 +4,6 @@\n \n // compile-pass\n \n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n use std::sync::mpsc::channel;"}, {"sha": "aca6aa5f0f8676dd6369f9b37a367361aadeb684", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-basic-examples.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n // compile-pass"}, {"sha": "1c1230346a56cf2ce476b3afba2d37ca51eb06b1", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n #[derive(Clone)]\n enum Either {\n     One(X),"}, {"sha": "f8e043fbfdfd4052df84589e20b53c909528e40c", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:41:27\n+  --> $DIR/duplicate-suggestions.rs:39:27\n    |\n LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n    |         ---------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -9,13 +9,13 @@ LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n    |         help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:41:13\n+  --> $DIR/duplicate-suggestions.rs:39:13\n    |\n LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n    |             ^^     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:45:50\n+  --> $DIR/duplicate-suggestions.rs:43:50\n    |\n LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n    |            -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -25,13 +25,13 @@ LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) {\n    |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:45:26\n+  --> $DIR/duplicate-suggestions.rs:43:26\n    |\n LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n    |                          ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:49:53\n+  --> $DIR/duplicate-suggestions.rs:47:53\n    |\n LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n    |               -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -41,13 +41,13 @@ LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone())\n    |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:49:29\n+  --> $DIR/duplicate-suggestions.rs:47:29\n    |\n LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n    |                             ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:53:11\n+  --> $DIR/duplicate-suggestions.rs:51:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -61,7 +61,7 @@ LL |         &(Either::Two(_t), Either::One(_u)) => (),\n    |                       -- ...and here   -- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:55:23\n+  --> $DIR/duplicate-suggestions.rs:53:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |                       ^^               ^^\n@@ -78,7 +78,7 @@ LL |         (Either::Two(_t), Either::One(_u)) => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:63:11\n+  --> $DIR/duplicate-suggestions.rs:61:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -91,13 +91,13 @@ LL |         &(Either::One(_t), Either::Two(_u))\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:65:23\n+  --> $DIR/duplicate-suggestions.rs:63:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u))\n    |                       ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:72:11\n+  --> $DIR/duplicate-suggestions.rs:70:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -110,13 +110,13 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:74:23\n+  --> $DIR/duplicate-suggestions.rs:72:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |                       ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:80:11\n+  --> $DIR/duplicate-suggestions.rs:78:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -129,13 +129,13 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:82:23\n+  --> $DIR/duplicate-suggestions.rs:80:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |                       ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:93:31\n+  --> $DIR/duplicate-suggestions.rs:91:31\n    |\n LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n    |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -145,13 +145,13 @@ LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n    |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:93:17\n+  --> $DIR/duplicate-suggestions.rs:91:17\n    |\n LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n    |                 ^^     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:97:54\n+  --> $DIR/duplicate-suggestions.rs:95:54\n    |\n LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n    |            ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -161,13 +161,13 @@ LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.c\n    |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:97:30\n+  --> $DIR/duplicate-suggestions.rs:95:30\n    |\n LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n    |                              ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:101:57\n+  --> $DIR/duplicate-suggestions.rs:99:57\n    |\n LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n    |               ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -177,13 +177,13 @@ LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), e\n    |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:101:33\n+  --> $DIR/duplicate-suggestions.rs:99:33\n    |\n LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n    |                                 ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:105:11\n+  --> $DIR/duplicate-suggestions.rs:103:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -197,7 +197,7 @@ LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n    |                           -- ...and here   -- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:107:27\n+  --> $DIR/duplicate-suggestions.rs:105:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           ^^               ^^\n@@ -214,7 +214,7 @@ LL |         (Either::Two(_t), Either::One(_u)) => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:115:11\n+  --> $DIR/duplicate-suggestions.rs:113:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -227,13 +227,13 @@ LL |         &mut (Either::One(_t), Either::Two(_u))\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:117:27\n+  --> $DIR/duplicate-suggestions.rs:115:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u))\n    |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:124:11\n+  --> $DIR/duplicate-suggestions.rs:122:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -246,13 +246,13 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:126:27\n+  --> $DIR/duplicate-suggestions.rs:124:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:132:11\n+  --> $DIR/duplicate-suggestions.rs:130:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -265,13 +265,13 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:134:27\n+  --> $DIR/duplicate-suggestions.rs:132:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:140:11\n+  --> $DIR/duplicate-suggestions.rs:138:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -284,13 +284,13 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:142:27\n+  --> $DIR/duplicate-suggestions.rs:140:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:88:11\n+  --> $DIR/duplicate-suggestions.rs:86:11\n    |\n LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |           ^^^^--^^^^^--^^\n@@ -301,13 +301,13 @@ LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |           help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:88:15\n+  --> $DIR/duplicate-suggestions.rs:86:15\n    |\n LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |               ^^     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/duplicate-suggestions.rs:148:11\n+  --> $DIR/duplicate-suggestions.rs:146:11\n    |\n LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |           ^^^^^^^^--^^^^^--^^\n@@ -318,7 +318,7 @@ LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:148:19\n+  --> $DIR/duplicate-suggestions.rs:146:19\n    |\n LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |                   ^^     ^^"}, {"sha": "6e3879a4155b9be456afdd0ee9520cc538acabfa", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n #[derive(Clone)]\n enum Either {\n     One(X),"}, {"sha": "74f3a63be57de2886d2c28b829c06b56532d185c", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:30:21\n+  --> $DIR/move-into-closure.rs:28:21\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -12,13 +12,13 @@ LL |         let X(_t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:30:15\n+  --> $DIR/move-into-closure.rs:28:15\n    |\n LL |         let X(_t) = x;\n    |               ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:34:34\n+  --> $DIR/move-into-closure.rs:32:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -31,13 +31,13 @@ LL |         if let Either::One(_t) = e { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:34:28\n+  --> $DIR/move-into-closure.rs:32:28\n    |\n LL |         if let Either::One(_t) = e { }\n    |                            ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:38:37\n+  --> $DIR/move-into-closure.rs:36:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -50,13 +50,13 @@ LL |         while let Either::One(_t) = e { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:38:31\n+  --> $DIR/move-into-closure.rs:36:31\n    |\n LL |         while let Either::One(_t) = e { }\n    |                               ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:42:15\n+  --> $DIR/move-into-closure.rs:40:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -71,13 +71,13 @@ LL |             Either::One(_t)\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:46:25\n+  --> $DIR/move-into-closure.rs:44:25\n    |\n LL |             Either::One(_t)\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:49:15\n+  --> $DIR/move-into-closure.rs:47:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -92,13 +92,13 @@ LL |             Either::One(_t) => (),\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:53:25\n+  --> $DIR/move-into-closure.rs:51:25\n    |\n LL |             Either::One(_t) => (),\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:58:25\n+  --> $DIR/move-into-closure.rs:56:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -111,13 +111,13 @@ LL |         let X(mut _t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:58:15\n+  --> $DIR/move-into-closure.rs:56:15\n    |\n LL |         let X(mut _t) = x;\n    |               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:62:38\n+  --> $DIR/move-into-closure.rs:60:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -130,13 +130,13 @@ LL |         if let Either::One(mut _t) = em { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:62:28\n+  --> $DIR/move-into-closure.rs:60:28\n    |\n LL |         if let Either::One(mut _t) = em { }\n    |                            ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:66:41\n+  --> $DIR/move-into-closure.rs:64:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -149,13 +149,13 @@ LL |         while let Either::One(mut _t) = em { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:66:31\n+  --> $DIR/move-into-closure.rs:64:31\n    |\n LL |         while let Either::One(mut _t) = em { }\n    |                               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:70:15\n+  --> $DIR/move-into-closure.rs:68:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -170,13 +170,13 @@ LL |             Either::One(mut _t)\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:74:25\n+  --> $DIR/move-into-closure.rs:72:25\n    |\n LL |             Either::One(mut _t)\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/move-into-closure.rs:77:15\n+  --> $DIR/move-into-closure.rs:75:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -191,13 +191,13 @@ LL |             Either::One(mut _t) => (),\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:81:25\n+  --> $DIR/move-into-closure.rs:79:25\n    |\n LL |             Either::One(mut _t) => (),\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:97:21\n+  --> $DIR/move-into-closure.rs:95:21\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -210,13 +210,13 @@ LL |         let X(_t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:97:15\n+  --> $DIR/move-into-closure.rs:95:15\n    |\n LL |         let X(_t) = x;\n    |               ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:101:34\n+  --> $DIR/move-into-closure.rs:99:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -229,13 +229,13 @@ LL |         if let Either::One(_t) = e { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:101:28\n+  --> $DIR/move-into-closure.rs:99:28\n    |\n LL |         if let Either::One(_t) = e { }\n    |                            ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:105:37\n+  --> $DIR/move-into-closure.rs:103:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -248,13 +248,13 @@ LL |         while let Either::One(_t) = e { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:105:31\n+  --> $DIR/move-into-closure.rs:103:31\n    |\n LL |         while let Either::One(_t) = e { }\n    |                               ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:109:15\n+  --> $DIR/move-into-closure.rs:107:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -269,13 +269,13 @@ LL |             Either::One(_t)\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:113:25\n+  --> $DIR/move-into-closure.rs:111:25\n    |\n LL |             Either::One(_t)\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:116:15\n+  --> $DIR/move-into-closure.rs:114:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n@@ -290,13 +290,13 @@ LL |             Either::One(_t) => (),\n    |                         -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:120:25\n+  --> $DIR/move-into-closure.rs:118:25\n    |\n LL |             Either::One(_t) => (),\n    |                         ^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:125:25\n+  --> $DIR/move-into-closure.rs:123:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n@@ -309,13 +309,13 @@ LL |         let X(mut _t) = x;\n    |               data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:125:15\n+  --> $DIR/move-into-closure.rs:123:15\n    |\n LL |         let X(mut _t) = x;\n    |               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:129:38\n+  --> $DIR/move-into-closure.rs:127:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -328,13 +328,13 @@ LL |         if let Either::One(mut _t) = em { }\n    |                            data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:129:28\n+  --> $DIR/move-into-closure.rs:127:28\n    |\n LL |         if let Either::One(mut _t) = em { }\n    |                            ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:133:41\n+  --> $DIR/move-into-closure.rs:131:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -347,13 +347,13 @@ LL |         while let Either::One(mut _t) = em { }\n    |                               data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:133:31\n+  --> $DIR/move-into-closure.rs:131:31\n    |\n LL |         while let Either::One(mut _t) = em { }\n    |                               ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:137:15\n+  --> $DIR/move-into-closure.rs:135:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -368,13 +368,13 @@ LL |             Either::One(mut _t)\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:141:25\n+  --> $DIR/move-into-closure.rs:139:25\n    |\n LL |             Either::One(mut _t)\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:144:15\n+  --> $DIR/move-into-closure.rs:142:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -389,13 +389,13 @@ LL |             Either::One(mut _t) => (),\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:148:25\n+  --> $DIR/move-into-closure.rs:146:25\n    |\n LL |             Either::One(mut _t) => (),\n    |                         ^^^^^^\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/move-into-closure.rs:152:15\n+  --> $DIR/move-into-closure.rs:150:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n@@ -410,7 +410,7 @@ LL |             Either::One(mut _t) => (),\n    |                         ------ data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:156:25\n+  --> $DIR/move-into-closure.rs:154:25\n    |\n LL |             Either::One(mut _t) => (),\n    |                         ^^^^^^"}, {"sha": "31ab1a6639acc7e95294754638864141bae0621b", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n #[derive(Clone)]\n enum Either {\n     One(X),"}, {"sha": "7f2ba4da714d8db31b8568c2074ee03ce3810dee", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 120, "deletions": 120, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:40:17\n+  --> $DIR/simple.rs:38:17\n    |\n LL |     let X(_t) = *s;\n    |           --    ^^\n@@ -9,13 +9,13 @@ LL |     let X(_t) = *s;\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:40:11\n+  --> $DIR/simple.rs:38:11\n    |\n LL |     let X(_t) = *s;\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:44:30\n+  --> $DIR/simple.rs:42:30\n    |\n LL |     if let Either::One(_t) = *r { }\n    |                        --    ^^\n@@ -25,13 +25,13 @@ LL |     if let Either::One(_t) = *r { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:44:24\n+  --> $DIR/simple.rs:42:24\n    |\n LL |     if let Either::One(_t) = *r { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:48:33\n+  --> $DIR/simple.rs:46:33\n    |\n LL |     while let Either::One(_t) = *r { }\n    |                           --    ^^\n@@ -41,13 +41,13 @@ LL |     while let Either::One(_t) = *r { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:48:27\n+  --> $DIR/simple.rs:46:27\n    |\n LL |     while let Either::One(_t) = *r { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:52:11\n+  --> $DIR/simple.rs:50:11\n    |\n LL |     match *r {\n    |           ^^\n@@ -59,13 +59,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:56:21\n+  --> $DIR/simple.rs:54:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:59:11\n+  --> $DIR/simple.rs:57:11\n    |\n LL |     match *r {\n    |           ^^\n@@ -77,13 +77,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:63:21\n+  --> $DIR/simple.rs:61:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:68:17\n+  --> $DIR/simple.rs:66:17\n    |\n LL |     let X(_t) = *sm;\n    |           --    ^^^\n@@ -93,13 +93,13 @@ LL |     let X(_t) = *sm;\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:68:11\n+  --> $DIR/simple.rs:66:11\n    |\n LL |     let X(_t) = *sm;\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:72:30\n+  --> $DIR/simple.rs:70:30\n    |\n LL |     if let Either::One(_t) = *rm { }\n    |                        --    ^^^\n@@ -109,13 +109,13 @@ LL |     if let Either::One(_t) = *rm { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:72:24\n+  --> $DIR/simple.rs:70:24\n    |\n LL |     if let Either::One(_t) = *rm { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:76:33\n+  --> $DIR/simple.rs:74:33\n    |\n LL |     while let Either::One(_t) = *rm { }\n    |                           --    ^^^\n@@ -125,13 +125,13 @@ LL |     while let Either::One(_t) = *rm { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:76:27\n+  --> $DIR/simple.rs:74:27\n    |\n LL |     while let Either::One(_t) = *rm { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:80:11\n+  --> $DIR/simple.rs:78:11\n    |\n LL |     match *rm {\n    |           ^^^\n@@ -143,13 +143,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:84:21\n+  --> $DIR/simple.rs:82:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:87:11\n+  --> $DIR/simple.rs:85:11\n    |\n LL |     match *rm {\n    |           ^^^\n@@ -161,13 +161,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:91:21\n+  --> $DIR/simple.rs:89:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:95:11\n+  --> $DIR/simple.rs:93:11\n    |\n LL |     match *rm {\n    |           ^^^\n@@ -179,13 +179,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:99:21\n+  --> $DIR/simple.rs:97:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:104:17\n+  --> $DIR/simple.rs:102:17\n    |\n LL |     let X(_t) = vs[0];\n    |           --    ^^^^^\n@@ -195,13 +195,13 @@ LL |     let X(_t) = vs[0];\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:104:11\n+  --> $DIR/simple.rs:102:11\n    |\n LL |     let X(_t) = vs[0];\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:108:30\n+  --> $DIR/simple.rs:106:30\n    |\n LL |     if let Either::One(_t) = vr[0] { }\n    |                        --    ^^^^^\n@@ -211,13 +211,13 @@ LL |     if let Either::One(_t) = vr[0] { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:108:24\n+  --> $DIR/simple.rs:106:24\n    |\n LL |     if let Either::One(_t) = vr[0] { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:112:33\n+  --> $DIR/simple.rs:110:33\n    |\n LL |     while let Either::One(_t) = vr[0] { }\n    |                           --    ^^^^^\n@@ -227,13 +227,13 @@ LL |     while let Either::One(_t) = vr[0] { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:112:27\n+  --> $DIR/simple.rs:110:27\n    |\n LL |     while let Either::One(_t) = vr[0] { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:116:11\n+  --> $DIR/simple.rs:114:11\n    |\n LL |     match vr[0] {\n    |           ^^^^^\n@@ -245,13 +245,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:120:21\n+  --> $DIR/simple.rs:118:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:123:11\n+  --> $DIR/simple.rs:121:11\n    |\n LL |     match vr[0] {\n    |           ^^^^^\n@@ -263,13 +263,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:127:21\n+  --> $DIR/simple.rs:125:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:132:17\n+  --> $DIR/simple.rs:130:17\n    |\n LL |     let X(_t) = vsm[0];\n    |           --    ^^^^^^\n@@ -279,13 +279,13 @@ LL |     let X(_t) = vsm[0];\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:132:11\n+  --> $DIR/simple.rs:130:11\n    |\n LL |     let X(_t) = vsm[0];\n    |           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:136:30\n+  --> $DIR/simple.rs:134:30\n    |\n LL |     if let Either::One(_t) = vrm[0] { }\n    |                        --    ^^^^^^\n@@ -295,13 +295,13 @@ LL |     if let Either::One(_t) = vrm[0] { }\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:136:24\n+  --> $DIR/simple.rs:134:24\n    |\n LL |     if let Either::One(_t) = vrm[0] { }\n    |                        ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:140:33\n+  --> $DIR/simple.rs:138:33\n    |\n LL |     while let Either::One(_t) = vrm[0] { }\n    |                           --    ^^^^^^\n@@ -311,13 +311,13 @@ LL |     while let Either::One(_t) = vrm[0] { }\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:140:27\n+  --> $DIR/simple.rs:138:27\n    |\n LL |     while let Either::One(_t) = vrm[0] { }\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:144:11\n+  --> $DIR/simple.rs:142:11\n    |\n LL |     match vrm[0] {\n    |           ^^^^^^\n@@ -329,13 +329,13 @@ LL |         Either::One(_t)\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:148:21\n+  --> $DIR/simple.rs:146:21\n    |\n LL |         Either::One(_t)\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:151:11\n+  --> $DIR/simple.rs:149:11\n    |\n LL |     match vrm[0] {\n    |           ^^^^^^\n@@ -347,13 +347,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:155:21\n+  --> $DIR/simple.rs:153:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:159:11\n+  --> $DIR/simple.rs:157:11\n    |\n LL |     match vrm[0] {\n    |           ^^^^^^\n@@ -365,13 +365,13 @@ LL |         Either::One(_t) => (),\n    |                     -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:163:21\n+  --> $DIR/simple.rs:161:21\n    |\n LL |         Either::One(_t) => (),\n    |                     ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:170:18\n+  --> $DIR/simple.rs:168:18\n    |\n LL |     let &X(_t) = s;\n    |         ------   ^ cannot move out of borrowed content\n@@ -380,13 +380,13 @@ LL |     let &X(_t) = s;\n    |         help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:170:12\n+  --> $DIR/simple.rs:168:12\n    |\n LL |     let &X(_t) = s;\n    |            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:174:31\n+  --> $DIR/simple.rs:172:31\n    |\n LL |     if let &Either::One(_t) = r { }\n    |            ----------------   ^ cannot move out of borrowed content\n@@ -395,13 +395,13 @@ LL |     if let &Either::One(_t) = r { }\n    |            help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:174:25\n+  --> $DIR/simple.rs:172:25\n    |\n LL |     if let &Either::One(_t) = r { }\n    |                         ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:178:34\n+  --> $DIR/simple.rs:176:34\n    |\n LL |     while let &Either::One(_t) = r { }\n    |               ----------------   ^ cannot move out of borrowed content\n@@ -410,13 +410,13 @@ LL |     while let &Either::One(_t) = r { }\n    |               help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:178:28\n+  --> $DIR/simple.rs:176:28\n    |\n LL |     while let &Either::One(_t) = r { }\n    |                            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:182:11\n+  --> $DIR/simple.rs:180:11\n    |\n LL |     match r {\n    |           ^ cannot move out of borrowed content\n@@ -428,13 +428,13 @@ LL |         &Either::One(_t)\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:184:22\n+  --> $DIR/simple.rs:182:22\n    |\n LL |         &Either::One(_t)\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:190:11\n+  --> $DIR/simple.rs:188:11\n    |\n LL |     match r {\n    |           ^ cannot move out of borrowed content\n@@ -446,13 +446,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:192:22\n+  --> $DIR/simple.rs:190:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:197:11\n+  --> $DIR/simple.rs:195:11\n    |\n LL |     match r {\n    |           ^ cannot move out of borrowed content\n@@ -464,13 +464,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:199:22\n+  --> $DIR/simple.rs:197:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:209:22\n+  --> $DIR/simple.rs:207:22\n    |\n LL |     let &mut X(_t) = sm;\n    |         ----------   ^^ cannot move out of borrowed content\n@@ -479,13 +479,13 @@ LL |     let &mut X(_t) = sm;\n    |         help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:209:16\n+  --> $DIR/simple.rs:207:16\n    |\n LL |     let &mut X(_t) = sm;\n    |                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:213:35\n+  --> $DIR/simple.rs:211:35\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n    |            --------------------   ^^ cannot move out of borrowed content\n@@ -494,13 +494,13 @@ LL |     if let &mut Either::One(_t) = rm { }\n    |            help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:213:29\n+  --> $DIR/simple.rs:211:29\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n    |                             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:217:38\n+  --> $DIR/simple.rs:215:38\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n    |               --------------------   ^^ cannot move out of borrowed content\n@@ -509,13 +509,13 @@ LL |     while let &mut Either::One(_t) = rm { }\n    |               help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:217:32\n+  --> $DIR/simple.rs:215:32\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n    |                                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:221:11\n+  --> $DIR/simple.rs:219:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -527,7 +527,7 @@ LL |         &mut Either::Two(_t) => (),\n    |                          -- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/simple.rs:223:26\n+  --> $DIR/simple.rs:221:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n@@ -544,7 +544,7 @@ LL |         Either::Two(_t) => (),\n    |         ^^^^^^^^^^^^^^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:230:11\n+  --> $DIR/simple.rs:228:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -556,13 +556,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:232:26\n+  --> $DIR/simple.rs:230:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:237:11\n+  --> $DIR/simple.rs:235:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -574,13 +574,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:239:26\n+  --> $DIR/simple.rs:237:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:244:11\n+  --> $DIR/simple.rs:242:11\n    |\n LL |     match rm {\n    |           ^^ cannot move out of borrowed content\n@@ -592,55 +592,55 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:246:26\n+  --> $DIR/simple.rs:244:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:260:21\n+  --> $DIR/simple.rs:258:21\n    |\n LL |     let (&X(_t),) = (&x.clone(),);\n    |             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n    |             |\n    |             data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:260:13\n+  --> $DIR/simple.rs:258:13\n    |\n LL |     let (&X(_t),) = (&x.clone(),);\n    |             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:262:34\n+  --> $DIR/simple.rs:260:34\n    |\n LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n    |                          --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                          |\n    |                          data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:262:26\n+  --> $DIR/simple.rs:260:26\n    |\n LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:264:37\n+  --> $DIR/simple.rs:262:37\n    |\n LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n    |                             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                             |\n    |                             data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:264:29\n+  --> $DIR/simple.rs:262:29\n    |\n LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n    |                             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:266:11\n+  --> $DIR/simple.rs:264:11\n    |\n LL |     match (&e.clone(),) {\n    |           ^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -649,55 +649,55 @@ LL |         (&Either::One(_t),)\n    |                       -- data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:268:23\n+  --> $DIR/simple.rs:266:23\n    |\n LL |         (&Either::One(_t),)\n    |                       ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:274:25\n+  --> $DIR/simple.rs:272:25\n    |\n LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n    |                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                 |\n    |                 data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:274:17\n+  --> $DIR/simple.rs:272:17\n    |\n LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n    |                 ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:276:38\n+  --> $DIR/simple.rs:274:38\n    |\n LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                              --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                              |\n    |                              data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:276:30\n+  --> $DIR/simple.rs:274:30\n    |\n LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                              ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:278:41\n+  --> $DIR/simple.rs:276:41\n    |\n LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |                                 |\n    |                                 data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:278:33\n+  --> $DIR/simple.rs:276:33\n    |\n LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                                 ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:280:11\n+  --> $DIR/simple.rs:278:11\n    |\n LL |     match (&mut em.clone(),) {\n    |           ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -708,15 +708,15 @@ LL |         (&mut Either::Two(_t),) => (),\n    |                           -- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/simple.rs:282:27\n+  --> $DIR/simple.rs:280:27\n    |\n LL |         (&mut Either::One(_t),) => (),\n    |                           ^^\n LL |         (&mut Either::Two(_t),) => (),\n    |                           ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:290:18\n+  --> $DIR/simple.rs:288:18\n    |\n LL |     let &X(_t) = &x;\n    |         ------   ^^ cannot move out of borrowed content\n@@ -725,13 +725,13 @@ LL |     let &X(_t) = &x;\n    |         help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:290:12\n+  --> $DIR/simple.rs:288:12\n    |\n LL |     let &X(_t) = &x;\n    |            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:294:31\n+  --> $DIR/simple.rs:292:31\n    |\n LL |     if let &Either::One(_t) = &e { }\n    |            ----------------   ^^ cannot move out of borrowed content\n@@ -740,13 +740,13 @@ LL |     if let &Either::One(_t) = &e { }\n    |            help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:294:25\n+  --> $DIR/simple.rs:292:25\n    |\n LL |     if let &Either::One(_t) = &e { }\n    |                         ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:298:34\n+  --> $DIR/simple.rs:296:34\n    |\n LL |     while let &Either::One(_t) = &e { }\n    |               ----------------   ^^ cannot move out of borrowed content\n@@ -755,13 +755,13 @@ LL |     while let &Either::One(_t) = &e { }\n    |               help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:298:28\n+  --> $DIR/simple.rs:296:28\n    |\n LL |     while let &Either::One(_t) = &e { }\n    |                            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:302:11\n+  --> $DIR/simple.rs:300:11\n    |\n LL |     match &e {\n    |           ^^ cannot move out of borrowed content\n@@ -773,13 +773,13 @@ LL |         &Either::One(_t)\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:304:22\n+  --> $DIR/simple.rs:302:22\n    |\n LL |         &Either::One(_t)\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:310:11\n+  --> $DIR/simple.rs:308:11\n    |\n LL |     match &e {\n    |           ^^ cannot move out of borrowed content\n@@ -791,13 +791,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:312:22\n+  --> $DIR/simple.rs:310:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:317:11\n+  --> $DIR/simple.rs:315:11\n    |\n LL |     match &e {\n    |           ^^ cannot move out of borrowed content\n@@ -809,13 +809,13 @@ LL |         &Either::One(_t) => (),\n    |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:319:22\n+  --> $DIR/simple.rs:317:22\n    |\n LL |         &Either::One(_t) => (),\n    |                      ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:325:22\n+  --> $DIR/simple.rs:323:22\n    |\n LL |     let &mut X(_t) = &mut xm;\n    |         ----------   ^^^^^^^ cannot move out of borrowed content\n@@ -824,13 +824,13 @@ LL |     let &mut X(_t) = &mut xm;\n    |         help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:325:16\n+  --> $DIR/simple.rs:323:16\n    |\n LL |     let &mut X(_t) = &mut xm;\n    |                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:329:35\n+  --> $DIR/simple.rs:327:35\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n    |            --------------------   ^^^^^^^ cannot move out of borrowed content\n@@ -839,13 +839,13 @@ LL |     if let &mut Either::One(_t) = &mut em { }\n    |            help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:329:29\n+  --> $DIR/simple.rs:327:29\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n    |                             ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:333:38\n+  --> $DIR/simple.rs:331:38\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n    |               --------------------   ^^^^^^^ cannot move out of borrowed content\n@@ -854,13 +854,13 @@ LL |     while let &mut Either::One(_t) = &mut em { }\n    |               help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:333:32\n+  --> $DIR/simple.rs:331:32\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n    |                                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:337:11\n+  --> $DIR/simple.rs:335:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -872,13 +872,13 @@ LL |         &mut Either::One(_t)\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:339:26\n+  --> $DIR/simple.rs:337:26\n    |\n LL |         &mut Either::One(_t)\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:345:11\n+  --> $DIR/simple.rs:343:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -890,13 +890,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:347:26\n+  --> $DIR/simple.rs:345:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:352:11\n+  --> $DIR/simple.rs:350:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -908,13 +908,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:354:26\n+  --> $DIR/simple.rs:352:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:359:11\n+  --> $DIR/simple.rs:357:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^ cannot move out of borrowed content\n@@ -926,13 +926,13 @@ LL |         &mut Either::One(_t) => (),\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:361:26\n+  --> $DIR/simple.rs:359:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:204:11\n+  --> $DIR/simple.rs:202:11\n    |\n LL |     fn f1(&X(_t): &X) { }\n    |           ^^^--^\n@@ -942,13 +942,13 @@ LL |     fn f1(&X(_t): &X) { }\n    |           help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:204:14\n+  --> $DIR/simple.rs:202:14\n    |\n LL |     fn f1(&X(_t): &X) { }\n    |              ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:251:11\n+  --> $DIR/simple.rs:249:11\n    |\n LL |     fn f2(&mut X(_t): &mut X) { }\n    |           ^^^^^^^--^\n@@ -958,13 +958,13 @@ LL |     fn f2(&mut X(_t): &mut X) { }\n    |           help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:251:18\n+  --> $DIR/simple.rs:249:18\n    |\n LL |     fn f2(&mut X(_t): &mut X) { }\n    |                  ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:271:11\n+  --> $DIR/simple.rs:269:11\n    |\n LL |     fn f3((&X(_t),): (&X,)) { }\n    |           ^^^^--^^^\n@@ -973,13 +973,13 @@ LL |     fn f3((&X(_t),): (&X,)) { }\n    |           cannot move out of borrowed content\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:271:15\n+  --> $DIR/simple.rs:269:15\n    |\n LL |     fn f3((&X(_t),): (&X,)) { }\n    |               ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/simple.rs:285:11\n+  --> $DIR/simple.rs:283:11\n    |\n LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |           ^^^^^^^^--^^^\n@@ -988,7 +988,7 @@ LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |           cannot move out of borrowed content\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:285:19\n+  --> $DIR/simple.rs:283:19\n    |\n LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |                   ^^"}, {"sha": "d04113ffccc3a9b63c5b9177a9374f36e7161ca2", "filename": "src/test/ui/suggestions/suggest-ref-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5fe051a843cfbbc1ba4fcd347b641417181b8f/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.rs?ref=be5fe051a843cfbbc1ba4fcd347b641417181b8f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(nll)]\n-\n struct X(usize);\n \n impl X {"}]}