{"sha": "a9ffe7c738e4e9a9367726b591f3145c784391ed", "node_id": "C_kwDOAAsO6NoAKGE5ZmZlN2M3MzhlNGU5YTkzNjc3MjZiNTkxZjMxNDVjNzg0MzkxZWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-06T12:27:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-06T12:27:45Z"}, "message": "Rollup merge of #105342 - compiler-errors:note_cause_code-takes-predicate, r=fee1-dead\n\nMake `note_obligation_cause_code`  take a `impl ToPredicate` for predicate\n\nThe only usecase that wasn't `impl ToPredicate` was noting overflow errors while revealing opaque types, which passed in an `Obligation<'tcx, Ty<'tcx>>`... Since this only happens in a `RevealAll` environment, which is after typeck (and probably primarily within `normalize_erasing_regions`) we're unlikely to display anything useful while noting this code, evidenced by the lack of UI test changes.", "tree": {"sha": "07c892e607e39ad00b0420417dc7ec109c2e12ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07c892e607e39ad00b0420417dc7ec109c2e12ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ffe7c738e4e9a9367726b591f3145c784391ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjzVBCRBK7hj4Ov3rIwAAS84IAAJVOui4cLeP+AofpXKV/TBe\nVr2vZXYhFeuyGlbjAzYI991SLsY6pm66icgjGRwxpr0MydiU+SCyP1pRRxYY5jbT\nr3iamOupxdL4O5TdXjeafC9OpReZA4UMVUZo0m1pgZMlx/UnZs3xTZAZ7DBSpEl2\nu6zejBWqZcu4F4TYKyQovZ+mjzMPb62+63unvLuJTx5PLkBV0ZVqBKSeZYWvJt/D\nntqpvyO5y0pXx+8simPIVD/1rTc8GRc1XPIQGgUS9WjSWEayaJGfuG6DbVdoVMel\nUi5NiAgmfQW8HpxQSXy9a0tXPQmOuG08rFqGYeuqN0xrLK62NxEB56ngSc2ndrY=\n=P7Wj\n-----END PGP SIGNATURE-----\n", "payload": "tree 07c892e607e39ad00b0420417dc7ec109c2e12ee\nparent 07fd8089a45cb917ae85eb06e33374db159332e3\nparent d2a80c157145d0c1e6fd6669862358de6cd89185\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670329665 +0100\ncommitter GitHub <noreply@github.com> 1670329665 +0100\n\nRollup merge of #105342 - compiler-errors:note_cause_code-takes-predicate, r=fee1-dead\n\nMake `note_obligation_cause_code`  take a `impl ToPredicate` for predicate\n\nThe only usecase that wasn't `impl ToPredicate` was noting overflow errors while revealing opaque types, which passed in an `Obligation<'tcx, Ty<'tcx>>`... Since this only happens in a `RevealAll` environment, which is after typeck (and probably primarily within `normalize_erasing_regions`) we're unlikely to display anything useful while noting this code, evidenced by the lack of UI test changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ffe7c738e4e9a9367726b591f3145c784391ed", "html_url": "https://github.com/rust-lang/rust/commit/a9ffe7c738e4e9a9367726b591f3145c784391ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ffe7c738e4e9a9367726b591f3145c784391ed/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07fd8089a45cb917ae85eb06e33374db159332e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/07fd8089a45cb917ae85eb06e33374db159332e3", "html_url": "https://github.com/rust-lang/rust/commit/07fd8089a45cb917ae85eb06e33374db159332e3"}, {"sha": "d2a80c157145d0c1e6fd6669862358de6cd89185", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a80c157145d0c1e6fd6669862358de6cd89185", "html_url": "https://github.com/rust-lang/rust/commit/d2a80c157145d0c1e6fd6669862358de6cd89185"}], "stats": {"total": 155, "additions": 92, "deletions": 63}, "files": [{"sha": "3617bf58be9dd48dd17c18c8738eb566024e18c9", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -121,9 +121,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     pub(super) fn prove_predicates(\n         &mut self,\n-        predicates: impl IntoIterator<\n-            Item = impl ToPredicate<'tcx, ty::Predicate<'tcx>> + std::fmt::Debug,\n-        >,\n+        predicates: impl IntoIterator<Item = impl ToPredicate<'tcx> + std::fmt::Debug>,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {\n@@ -135,7 +133,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub(super) fn prove_predicate(\n         &mut self,\n-        predicate: impl ToPredicate<'tcx, ty::Predicate<'tcx>> + std::fmt::Debug,\n+        predicate: impl ToPredicate<'tcx> + std::fmt::Debug,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {"}, {"sha": "f89a8cdfdeec3bbc317860916eaedfe2b4b6532d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -1150,8 +1150,8 @@ impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n     }\n }\n \n-pub trait ToPredicate<'tcx, Predicate> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate;\n+pub trait ToPredicate<'tcx, P = Predicate<'tcx>> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> P;\n }\n \n impl<'tcx, T> ToPredicate<'tcx, T> for T {\n@@ -1160,21 +1160,21 @@ impl<'tcx, T> ToPredicate<'tcx, T> for T {\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, PredicateKind<'tcx>> {\n+impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(self)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Clause<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for Clause<'tcx> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::Clause(self)))\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, TraitRef<'tcx>> {\n+impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, TraitRef<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         let pred: PolyTraitPredicate<'tcx> = self.to_predicate(tcx);\n@@ -1193,25 +1193,25 @@ impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for Binder<'tcx, TraitRef\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyTraitPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(|p| PredicateKind::Clause(Clause::Trait(p))).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyRegionOutlivesPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(|p| PredicateKind::Clause(Clause::RegionOutlives(p))).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyTypeOutlivesPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(|p| PredicateKind::Clause(Clause::TypeOutlives(p))).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyProjectionPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(|p| PredicateKind::Clause(Clause::Projection(p))).to_predicate(tcx)\n     }"}, {"sha": "0102d268b42e18b51e558247d042f9120092fabd", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -70,7 +70,7 @@ pub fn codegen_select_candidate<'tcx>(\n         // `rustc_ty_utils::resolve_associated_item` doesn't return `None` post-monomorphization.\n         for err in errors {\n             if let FulfillmentErrorCode::CodeCycle(cycle) = err.code {\n-                infcx.err_ctxt().report_overflow_error_cycle(&cycle);\n+                infcx.err_ctxt().report_overflow_obligation_cycle(&cycle);\n             }\n         }\n         return Err(CodegenObligationError::FulfillmentError);"}, {"sha": "dda7b2b2fa5b0b392ce3d19f080c236152a8284e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 63, "deletions": 21, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -99,26 +99,36 @@ pub trait InferCtxtExt<'tcx> {\n }\n \n pub trait TypeErrCtxtExt<'tcx> {\n+    fn report_overflow_error<T>(\n+        &self,\n+        predicate: &T,\n+        span: Span,\n+        suggest_increasing_limit: bool,\n+        mutate: impl FnOnce(&mut Diagnostic),\n+    ) -> !\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n+\n     fn report_fulfillment_errors(\n         &self,\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n     ) -> ErrorGuaranteed;\n \n-    fn report_overflow_error<T>(\n+    fn report_overflow_obligation<T>(\n         &self,\n         obligation: &Obligation<'tcx, T>,\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display\n-            + TypeFoldable<'tcx>\n-            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n-        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n+        T: ToPredicate<'tcx> + Clone;\n \n     fn suggest_new_overflow_limit(&self, err: &mut Diagnostic);\n \n-    fn report_overflow_error_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> !;\n+    fn report_overflow_obligation_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> !;\n \n     /// The `root_obligation` parameter should be the `root_obligation` field\n     /// from a `FulfillmentError`. If no `FulfillmentError` is available,\n@@ -458,17 +468,20 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     /// occurrences in any case.\n     fn report_overflow_error<T>(\n         &self,\n-        obligation: &Obligation<'tcx, T>,\n+        predicate: &T,\n+        span: Span,\n         suggest_increasing_limit: bool,\n+        mutate: impl FnOnce(&mut Diagnostic),\n     ) -> !\n     where\n         T: fmt::Display\n             + TypeFoldable<'tcx>\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n     {\n-        let predicate = self.resolve_vars_if_possible(obligation.predicate.clone());\n+        let predicate = self.resolve_vars_if_possible(predicate.clone());\n         let mut pred_str = predicate.to_string();\n+\n         if pred_str.len() > 50 {\n             // We don't need to save the type to a file, we will be talking about this type already\n             // in a separate note when we explain the obligation, so it will be available that way.\n@@ -483,7 +496,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n-            obligation.cause.span,\n+            span,\n             E0275,\n             \"overflow evaluating the requirement `{}`\",\n             pred_str,\n@@ -493,20 +506,46 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             self.suggest_new_overflow_limit(&mut err);\n         }\n \n-        self.note_obligation_cause_code(\n-            &mut err,\n-            &obligation.predicate,\n-            obligation.param_env,\n-            obligation.cause.code(),\n-            &mut vec![],\n-            &mut Default::default(),\n-        );\n+        mutate(&mut err);\n \n         err.emit();\n         self.tcx.sess.abort_if_errors();\n         bug!();\n     }\n \n+    /// Reports that an overflow has occurred and halts compilation. We\n+    /// halt compilation unconditionally because it is important that\n+    /// overflows never be masked -- they basically represent computations\n+    /// whose result could not be truly determined and thus we can't say\n+    /// if the program type checks or not -- and they are unusual\n+    /// occurrences in any case.\n+    fn report_overflow_obligation<T>(\n+        &self,\n+        obligation: &Obligation<'tcx, T>,\n+        suggest_increasing_limit: bool,\n+    ) -> !\n+    where\n+        T: ToPredicate<'tcx> + Clone,\n+    {\n+        let predicate = obligation.predicate.clone().to_predicate(self.tcx);\n+        let predicate = self.resolve_vars_if_possible(predicate);\n+        self.report_overflow_error(\n+            &predicate,\n+            obligation.cause.span,\n+            suggest_increasing_limit,\n+            |err| {\n+                self.note_obligation_cause_code(\n+                    err,\n+                    &predicate,\n+                    obligation.param_env,\n+                    obligation.cause.code(),\n+                    &mut vec![],\n+                    &mut Default::default(),\n+                );\n+            },\n+        );\n+    }\n+\n     fn suggest_new_overflow_limit(&self, err: &mut Diagnostic) {\n         let suggested_limit = match self.tcx.recursion_limit() {\n             Limit(0) => Limit(2),\n@@ -521,19 +560,22 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     /// Reports that a cycle was detected which led to overflow and halts\n-    /// compilation. This is equivalent to `report_overflow_error` except\n+    /// compilation. This is equivalent to `report_overflow_obligation` except\n     /// that we can give a more helpful error message (and, in particular,\n     /// we do not suggest increasing the overflow limit, which is not\n     /// going to help).\n-    fn report_overflow_error_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> ! {\n+    fn report_overflow_obligation_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> ! {\n         let cycle = self.resolve_vars_if_possible(cycle.to_owned());\n         assert!(!cycle.is_empty());\n \n         debug!(?cycle, \"report_overflow_error_cycle\");\n \n         // The 'deepest' obligation is most likely to have a useful\n         // cause 'backtrace'\n-        self.report_overflow_error(cycle.iter().max_by_key(|p| p.recursion_depth).unwrap(), false);\n+        self.report_overflow_obligation(\n+            cycle.iter().max_by_key(|p| p.recursion_depth).unwrap(),\n+            false,\n+        );\n     }\n \n     fn report_selection_error(\n@@ -1554,7 +1596,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 diag.emit();\n             }\n             FulfillmentErrorCode::CodeCycle(ref cycle) => {\n-                self.report_overflow_error_cycle(cycle);\n+                self.report_overflow_obligation_cycle(cycle);\n             }\n         }\n     }"}, {"sha": "6ea54b625bbc0f8e533de1fabf88c6ad5f9dcdbc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -298,7 +298,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         seen_requirements: &mut FxHashSet<DefId>,\n     ) where\n-        T: fmt::Display + ToPredicate<'tcx, T>;\n+        T: fmt::Display + ToPredicate<'tcx>;\n \n     /// Suggest to await before try: future? => future.await?\n     fn suggest_await_before_try(\n@@ -2353,7 +2353,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         seen_requirements: &mut FxHashSet<DefId>,\n     ) where\n-        T: fmt::Display,\n+        T: fmt::Display + ToPredicate<'tcx>,\n     {\n         let tcx = self.tcx;\n         match *cause_code {"}, {"sha": "d3cfd61e1956d7d82fd433772f0dd2275995a6b2", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -150,7 +150,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n fn pred_known_to_hold_modulo_regions<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    pred: impl ToPredicate<'tcx, ty::Predicate<'tcx>> + TypeVisitable<'tcx>,\n+    pred: impl ToPredicate<'tcx> + TypeVisitable<'tcx>,\n     span: Span,\n ) -> bool {\n     let has_non_region_infer = pred.has_non_region_infer();"}, {"sha": "5789754e4fcefd6f19fa458f1f80cd5e4d7e5445", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -504,14 +504,12 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     Reveal::All => {\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n-                            let obligation = Obligation::with_depth(\n-                                self.tcx(),\n-                                self.cause.clone(),\n-                                recursion_limit.0,\n-                                self.param_env,\n-                                ty,\n+                            self.selcx.infcx.err_ctxt().report_overflow_error(\n+                                &ty,\n+                                self.cause.span,\n+                                true,\n+                                |_| {},\n                             );\n-                            self.selcx.infcx.err_ctxt().report_overflow_error(&obligation, true);\n                         }\n \n                         let substs = substs.fold_with(self);"}, {"sha": "7ad532d8a34645544996dd1930fbf45284d9d1b7", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -7,7 +7,7 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::TypeErrCtxtExt;\n use crate::traits::project::{needs_normalization, BoundVarReplacer, PlaceholderReplacer};\n-use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n+use crate::traits::{ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n@@ -214,14 +214,12 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         let substs = substs.try_fold_with(self)?;\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n-                            let obligation = Obligation::with_depth(\n-                                self.tcx(),\n-                                self.cause.clone(),\n-                                recursion_limit.0,\n-                                self.param_env,\n-                                ty,\n+                            self.infcx.err_ctxt().report_overflow_error(\n+                                &ty,\n+                                self.cause.span,\n+                                true,\n+                                |_| {},\n                             );\n-                            self.infcx.err_ctxt().report_overflow_error(&obligation, true);\n                         }\n \n                         let generic_ty = self.tcx().bound_type_of(def_id);"}, {"sha": "035deb61639817c57d897a9ffdcb75db304aacaa", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe7c738e4e9a9367726b591f3145c784391ed/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a9ffe7c738e4e9a9367726b591f3145c784391ed", "patch": "@@ -43,7 +43,6 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n-use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n@@ -1313,18 +1312,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         error_obligation: &Obligation<'tcx, T>,\n     ) -> Result<(), OverflowError>\n     where\n-        T: fmt::Display\n-            + TypeFoldable<'tcx>\n-            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n-        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+        T: ToPredicate<'tcx> + Clone,\n     {\n         if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n                     if let Some(e) = self.infcx.tainted_by_errors() {\n                         return Err(OverflowError::Error(e));\n                     }\n-                    self.infcx.err_ctxt().report_overflow_error(error_obligation, true);\n+                    self.infcx.err_ctxt().report_overflow_obligation(error_obligation, true);\n                 }\n                 TraitQueryMode::Canonical => {\n                     return Err(OverflowError::Canonical);\n@@ -1345,10 +1341,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         error_obligation: &Obligation<'tcx, V>,\n     ) -> Result<(), OverflowError>\n     where\n-        V: fmt::Display\n-            + TypeFoldable<'tcx>\n-            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n-        <V as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+        V: ToPredicate<'tcx> + Clone,\n     {\n         self.check_recursion_depth(obligation.recursion_depth, error_obligation)\n     }"}]}