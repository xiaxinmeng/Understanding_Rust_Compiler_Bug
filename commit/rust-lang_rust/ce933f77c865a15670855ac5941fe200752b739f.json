{"sha": "ce933f77c865a15670855ac5941fe200752b739f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTMzZjc3Yzg2NWExNTY3MDg1NWFjNTk0MWZlMjAwNzUyYjczOWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T19:16:37Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T19:16:37Z"}, "message": "Make u8::to_ascii_lowercase and to_ascii_uppercase branchless", "tree": {"sha": "8ec51ddfb788280aa118ca70822b50142d5dddf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ec51ddfb788280aa118ca70822b50142d5dddf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce933f77c865a15670855ac5941fe200752b739f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce933f77c865a15670855ac5941fe200752b739f", "html_url": "https://github.com/rust-lang/rust/commit/ce933f77c865a15670855ac5941fe200752b739f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce933f77c865a15670855ac5941fe200752b739f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8740d5d171fbb2fc9a12e46ecda32a0124badb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/8740d5d171fbb2fc9a12e46ecda32a0124badb46", "html_url": "https://github.com/rust-lang/rust/commit/8740d5d171fbb2fc9a12e46ecda32a0124badb46"}], "stats": {"total": 144, "additions": 43, "deletions": 101}, "files": [{"sha": "1c9691d1ee173c1185b3b915ba78b6d5f6bca2d5", "filename": "src/libcore/benches/ascii_case.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce933f77c865a15670855ac5941fe200752b739f/src%2Flibcore%2Fbenches%2Fascii_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce933f77c865a15670855ac5941fe200752b739f/src%2Flibcore%2Fbenches%2Fascii_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii_case.rs?ref=ce933f77c865a15670855ac5941fe200752b739f", "patch": "@@ -1,24 +1,4 @@\n-// Lower-case ASCII 'a' is the first byte that has its highest bit set after wrap-adding 0x1F:\n-//\n-//     b'a' + 0x1F == 0x80 == 0b1000_0000\n-//     b'z' + 0x1F == 0x98 == 0b10011000\n-//\n-// Lower-case ASCII 'z' is the last byte that has its highest bit unset after wrap-adding 0x05:\n-//\n-//     b'a' + 0x05 == 0x66 == 0b0110_0110\n-//     b'z' + 0x05 == 0x7F == 0b0111_1111\n-//\n-// \u2026 except for 0xFB to 0xFF, but those are in the range of bytes that have the highest bit\n-// unset again after adding 0x1F.\n-//\n-// So `(byte + 0x1f) & !(byte + 5)` has its highest bit set\n-// iff `byte` is a lower-case ASCII letter.\n-//\n-// Lower-case ASCII letters all have the 0x20 bit set.\n-// (Two positions right of 0x80, the highest bit.)\n-// Unsetting that bit produces the same letter, in upper-case.\n-//\n-// Therefore:\n+// See comments in `u8::to_ascii_uppercase` in `src/libcore/num/mod.rs`.\n fn branchless_to_ascii_upper_case(byte: u8) -> u8 {\n     byte &\n     !("}, {"sha": "977e21e0dc89a6274a4f84e876bf8e4c723543b3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 42, "deletions": 80, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/ce933f77c865a15670855ac5941fe200752b739f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce933f77c865a15670855ac5941fe200752b739f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ce933f77c865a15670855ac5941fe200752b739f", "patch": "@@ -3794,7 +3794,39 @@ impl u8 {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n-        ASCII_UPPERCASE_MAP[*self as usize]\n+        // See benchmarks in src/libcore/benches/ascii_case.rs\n+\n+        // Lower-case ASCII 'a' is the first byte that has its highest bit set\n+        // after wrap-adding 0x1F:\n+        //\n+        //     b'a' + 0x1F == 0x80 == 0b1000_0000\n+        //     b'z' + 0x1F == 0x98 == 0b10011000\n+        //\n+        // Lower-case ASCII 'z' is the last byte that has its highest bit unset\n+        // after wrap-adding 0x05:\n+        //\n+        //     b'a' + 0x05 == 0x66 == 0b0110_0110\n+        //     b'z' + 0x05 == 0x7F == 0b0111_1111\n+        //\n+        // \u2026 except for 0xFB to 0xFF, but those are in the range of bytes\n+        // that have the highest bit unset again after adding 0x1F.\n+        //\n+        // So `(byte + 0x1f) & !(byte + 5)` has its highest bit set\n+        // iff `byte` is a lower-case ASCII letter.\n+        //\n+        // Lower-case ASCII letters all have the 0x20 bit set.\n+        // (Two positions right of 0x80, the highest bit.)\n+        // Unsetting that bit produces the same letter, in upper-case.\n+        //\n+        // Therefore:\n+        *self &\n+        !(\n+            (\n+                self.wrapping_add(0x1f) &\n+                !self.wrapping_add(0x05) &\n+                0x80\n+            ) >> 2\n+        )\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -3816,7 +3848,15 @@ impl u8 {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n-        ASCII_LOWERCASE_MAP[*self as usize]\n+        // See comments in to_ascii_uppercase above.\n+        *self |\n+        (\n+            (\n+                self.wrapping_add(0x3f) &\n+                !self.wrapping_add(0x25) &\n+                0x80\n+            ) >> 2\n+        )\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match.\n@@ -4940,84 +4980,6 @@ impl_from! { u32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\"\n // Float -> Float\n impl_from! { f32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n \n-static ASCII_LOWERCASE_MAP: [u8; 256] = [\n-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n-    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n-    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n-    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n-    b' ', b'!', b'\"', b'#', b'$', b'%', b'&', b'\\'',\n-    b'(', b')', b'*', b'+', b',', b'-', b'.', b'/',\n-    b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',\n-    b'8', b'9', b':', b';', b'<', b'=', b'>', b'?',\n-    b'@',\n-\n-          b'a', b'b', b'c', b'd', b'e', b'f', b'g',\n-    b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o',\n-    b'p', b'q', b'r', b's', b't', b'u', b'v', b'w',\n-    b'x', b'y', b'z',\n-\n-                      b'[', b'\\\\', b']', b'^', b'_',\n-    b'`', b'a', b'b', b'c', b'd', b'e', b'f', b'g',\n-    b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o',\n-    b'p', b'q', b'r', b's', b't', b'u', b'v', b'w',\n-    b'x', b'y', b'z', b'{', b'|', b'}', b'~', 0x7f,\n-    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n-    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n-    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,\n-    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,\n-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,\n-    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,\n-    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,\n-    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,\n-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,\n-    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,\n-    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,\n-    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,\n-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,\n-    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,\n-    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,\n-    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n-];\n-\n-static ASCII_UPPERCASE_MAP: [u8; 256] = [\n-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n-    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n-    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n-    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n-    b' ', b'!', b'\"', b'#', b'$', b'%', b'&', b'\\'',\n-    b'(', b')', b'*', b'+', b',', b'-', b'.', b'/',\n-    b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',\n-    b'8', b'9', b':', b';', b'<', b'=', b'>', b'?',\n-    b'@', b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n-    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n-    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n-    b'X', b'Y', b'Z', b'[', b'\\\\', b']', b'^', b'_',\n-    b'`',\n-\n-          b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n-    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n-    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n-    b'X', b'Y', b'Z',\n-\n-                      b'{', b'|', b'}', b'~', 0x7f,\n-    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n-    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n-    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,\n-    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,\n-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,\n-    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,\n-    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,\n-    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,\n-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,\n-    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,\n-    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,\n-    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,\n-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,\n-    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,\n-    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,\n-    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n-];\n-\n enum AsciiCharacterClass {\n     C,  // control\n     Cw, // control whitespace"}]}