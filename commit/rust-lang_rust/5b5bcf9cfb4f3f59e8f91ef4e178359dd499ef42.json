{"sha": "5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNWJjZjljZmI0ZjNmNTllOGY5MWVmNGUxNzgzNTlkZDQ5OWVmNDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-10T21:46:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-10T21:46:24Z"}, "message": "Merge commit 'tohava/master'\n\nConflicts:\n\tsrc/boot/fe/ast.ml", "tree": {"sha": "1a876967892ee57bb549a60fca53961e90cf6c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a876967892ee57bb549a60fca53961e90cf6c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42", "html_url": "https://github.com/rust-lang/rust/commit/5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe8760af3b50bfa14d39406fe0eca2f2b82d8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe8760af3b50bfa14d39406fe0eca2f2b82d8ec", "html_url": "https://github.com/rust-lang/rust/commit/dbe8760af3b50bfa14d39406fe0eca2f2b82d8ec"}, {"sha": "b1c86beea8a79e0b101596ea65f90b1b7e70bd64", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c86beea8a79e0b101596ea65f90b1b7e70bd64", "html_url": "https://github.com/rust-lang/rust/commit/b1c86beea8a79e0b101596ea65f90b1b7e70bd64"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "357bf1e65c638856620ccc5d3a82caeffdd5d732", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=5b5bcf9cfb4f3f59e8f91ef4e178359dd499ef42", "patch": "@@ -259,9 +259,9 @@ and stmt_alt_type =\n \n and stmt_alt_port =\n     {\n-      (* else lval is a timeout value. *)\n-      alt_port_arms: (lval * lval) array;\n-      alt_port_else: (lval * block) option;\n+      (* else atom is a timeout value. *)\n+      alt_port_arms: port_arm array;\n+      alt_port_else: (atom * block) option;\n     }\n \n and block' = stmt array\n@@ -325,6 +325,13 @@ and tag_arm = tag_arm' identified\n and type_arm' = ident * slot * block\n and type_arm = type_arm' identified\n \n+and port_arm' = port_case * block\n+and port_arm = port_arm' identified\n+\n+and port_case =\n+    PORT_CASE_send of (lval * lval)\n+  | PORT_CASE_recv of (lval * lval)\n+\n and atom =\n     ATOM_literal of (lit identified)\n   | ATOM_lval of lval\n@@ -495,7 +502,6 @@ let sane_name (n:name) : bool =\n \n (***********************************************************************)\n \n-(* FIXME (issue #19): finish all parts with ?foo? as their output. *)\n \n let fmt_ident (ff:Format.formatter) (i:ident) : unit =\n   fmt ff  \"%s\" i\n@@ -658,7 +664,7 @@ and fmt_constrained ff (ty, constrs) : unit =\n   fmt_constrs ff constrs;\n   fmt ff \"@]\";\n   fmt ff \"@]\";\n-    \n+\n \n and fmt_ty (ff:Format.formatter) (t:ty) : unit =\n   match t with\n@@ -701,7 +707,7 @@ and fmt_ty (ff:Format.formatter) (t:ty) : unit =\n   | TY_tag ttag -> fmt_tag ff ttag\n   | TY_iso tiso -> fmt_iso ff tiso\n   | TY_idx idx -> fmt ff \"<idx#%d>\" idx\n-  | TY_constrained ctrd -> fmt_constrained ff ctrd \n+  | TY_constrained ctrd -> fmt_constrained ff ctrd\n \n   | TY_obj (effect, fns) ->\n       fmt_obox ff;\n@@ -1228,15 +1234,15 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           Array.iter (fmt_tag_arm ff) at.alt_tag_arms;\n           fmt_cbb ff;\n \n-      | STMT_alt_type at -> \n+      | STMT_alt_type at ->\n           fmt_obox ff;\n           fmt ff \"alt type (\";\n           fmt_lval ff at.alt_type_lval;\n           fmt ff \") \";\n           fmt_obr ff;\n           Array.iter (fmt_type_arm ff) at.alt_type_arms;\n           begin\n-            match at.alt_type_else with \n+            match at.alt_type_else with\n                 None -> ()\n               | Some block ->\n                   fmt ff \"@\\n\";\n@@ -1247,26 +1253,46 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n                   fmt_cbb ff;\n           end;\n           fmt_cbb ff;\n-      | STMT_alt_port _ -> fmt ff \"?stmt_alt_port?\"\n-      | STMT_note at -> \n+\n+      | STMT_alt_port at ->\n+          fmt_obox ff;\n+          fmt ff \"alt \";\n+          fmt_obr ff;\n+          Array.iter (fmt_port_arm ff) at.alt_port_arms;\n+          begin\n+            match at.alt_port_else with\n+                None -> ()\n+              | Some (timeout, block) ->\n+                  fmt ff \"@\\n\";\n+                  fmt_obox ff;\n+                  fmt ff \"case (_) \";\n+                  fmt_atom ff timeout;\n+                  fmt ff \" \";\n+                  fmt_obr ff;\n+                  fmt_stmts ff block.node;\n+                  fmt_cbb ff;\n+          end;\n+          fmt_cbb ff;\n+\n+      | STMT_note at ->\n           begin\n             fmt ff \"note \";\n             fmt_atom ff at;\n             fmt ff \";\"\n           end\n-      | STMT_slice (dst, src, slice) -> \n+      | STMT_slice (dst, src, slice) ->\n           fmt_lval ff dst;\n           fmt ff \" = \";\n           fmt_lval ff src;\n           fmt ff \".\";\n           fmt_slice ff slice;\n           fmt ff \";\";\n   end\n-    \n-and fmt_arm \n-    (ff:Format.formatter) \n+\n+and fmt_arm\n+    (ff:Format.formatter)\n     (fmt_arm_case_expr : Format.formatter -> unit)\n-    (block : block) \n+    (block : block)\n     : unit =\n   fmt ff \"@\\n\";\n   fmt_obox ff;\n@@ -1276,15 +1302,25 @@ and fmt_arm\n   fmt_obr ff;\n   fmt_stmts ff block.node;\n   fmt_cbb ff;\n-  \n+\n and fmt_tag_arm (ff:Format.formatter) (tag_arm:tag_arm) : unit =\n   let (pat, block) = tag_arm.node in\n     fmt_arm ff (fun ff -> fmt_pat ff pat) block;\n-    \n+\n and fmt_type_arm (ff:Format.formatter) (type_arm:type_arm) : unit =\n   let (_, slot, block) = type_arm.node in\n     fmt_arm ff (fun ff -> fmt_slot ff slot) block;\n-      \n+\n+\n+and fmt_port_arm (ff:Format.formatter) (port_arm:port_arm) : unit =\n+  let (port_case, block) = port_arm.node in\n+    fmt_arm ff (fun ff -> fmt_port_case ff port_case) block;\n+\n+and fmt_port_case (ff:Format.formatter) (port_case:port_case) : unit =\n+  let stmt' = match port_case with\n+      PORT_CASE_send params -> STMT_send params\n+    | PORT_CASE_recv params -> STMT_recv params in\n+    fmt_stmt ff {node = stmt'; id = Node 0};\n \n and fmt_pat (ff:Format.formatter) (pat:pat) : unit =\n   match pat with\n@@ -1315,9 +1351,9 @@ and fmt_slice (ff:Format.formatter) (slice:slice) : unit =\n             fmt ff \"@]\";\n     end;\n     fmt ff \"@])\";\n-    \n \n-    \n+\n+\n \n and fmt_decl_param (ff:Format.formatter) (param:ty_param) : unit =\n   let (ident, (i, e)) = param in"}]}