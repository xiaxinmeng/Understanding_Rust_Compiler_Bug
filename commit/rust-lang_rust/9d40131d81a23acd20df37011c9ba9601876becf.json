{"sha": "9d40131d81a23acd20df37011c9ba9601876becf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNDAxMzFkODFhMjNhY2QyMGRmMzcwMTFjOWJhOTYwMTg3NmJlY2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-19T17:51:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-19T17:51:29Z"}, "message": "Add cretonne_module", "tree": {"sha": "f2fc0550b10746e8e06169da666e6440ab69a275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2fc0550b10746e8e06169da666e6440ab69a275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d40131d81a23acd20df37011c9ba9601876becf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d40131d81a23acd20df37011c9ba9601876becf", "html_url": "https://github.com/rust-lang/rust/commit/9d40131d81a23acd20df37011c9ba9601876becf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d40131d81a23acd20df37011c9ba9601876becf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00", "html_url": "https://github.com/rust-lang/rust/commit/9f4f9eb1d79da33a1d3b767dbf40b2b26c5a6f00"}], "stats": {"total": 954, "additions": 804, "deletions": 150}, "files": [{"sha": "ac4d0c22320bf463695688dc48ff1b927c6133f3", "filename": "Cargo.lock", "status": "modified", "additions": 607, "deletions": 13, "changes": 620, "blob_url": "https://github.com/rust-lang/rust/blob/9d40131d81a23acd20df37011c9ba9601876becf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9d40131d81a23acd20df37011c9ba9601876becf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9d40131d81a23acd20df37011c9ba9601876becf", "patch": "@@ -1,46 +1,215 @@\n [[package]]\n-name = \"cretonne\"\n+name = \"aho-corasick\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"ansi_term\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cretonne-codegen 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cretonne-frontend 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"atty\"\n+version = \"0.2.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"backtrace\"\n+version = \"0.3.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"backtrace-sys\"\n+version = \"0.1.23\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"1.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"cc\"\n+version = \"1.0.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"clap\"\n+version = \"2.31.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cretonne\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cretonne-codegen 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-frontend 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cretonne-codegen\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cretonne-entity 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-entity 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cretonne-entity\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"cretonne-faerie\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cretonne-codegen 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-module 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"faerie 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"goblin 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cretonne-frontend\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cretonne-codegen 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cretonne-module\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cretonne-codegen 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-entity 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cretonne-native\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cretonne-codegen 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-codegen 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"raw-cpuid 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cretonne-simplejit\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cretonne-codegen 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-module 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-native 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"errno 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"region 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"dtoa\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"env_logger\"\n+version = \"0.5.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"errno\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"faerie\"\n+version = \"0.4.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"env_logger 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"goblin 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scroll 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string-interner 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"failure\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"backtrace 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -54,21 +223,229 @@ dependencies = [\n  \"synstructure 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"goblin\"\n+version = \"0.0.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"plain 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scroll 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"goblin\"\n+version = \"0.0.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"plain 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scroll 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"humantime\"\n+version = \"1.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"itoa\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"kernel32-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"lazy_static\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.42\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.4.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"mach\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"plain\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"quick-error\"\n+version = \"1.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"quote\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"quote\"\n+version = \"0.6.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"raw-cpuid\"\n+version = \"3.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"redox_syscall\"\n+version = \"0.1.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"redox_termios\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"region\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"errno 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mach 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustc_codegen_cretonne\"\n version = \"0.1.0\"\n dependencies = [\n- \"cretonne 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-faerie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-module 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cretonne-simplejit 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"scroll\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"scroll_derive 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"scroll\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"scroll_derive 0.9.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"scroll_derive\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"scroll_derive\"\n+version = \"0.9.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.14.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -86,6 +463,38 @@ dependencies = [\n  \"serde 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"string-interner\"\n+version = \"0.6.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"strsim\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"structopt\"\n+version = \"0.2.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"structopt-derive\"\n+version = \"0.2.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.14.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syn\"\n version = \"0.11.11\"\n@@ -96,6 +505,16 @@ dependencies = [\n  \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.14.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"synom\"\n version = \"0.11.3\"\n@@ -123,25 +542,200 @@ dependencies = [\n  \"serde_json 1.0.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"termcolor\"\n+version = \"0.3.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"wincolor 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"termion\"\n+version = \"1.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"textwrap\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread_local\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"ucd-util\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-width\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unicode-xid\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unreachable\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"utf8-ranges\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"vec_map\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"void\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"winapi-build\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"wincolor\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [metadata]\n-\"checksum cretonne 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"83e1f8d40914cb726d41a49df9554f200b47f36a03c46e5d6044e9dc8a8a47cd\"\n-\"checksum cretonne-codegen 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"312ba69a70bebc54789bd0e28414987b5bcd1173263f6afbd0ee8519b84da4ac\"\n-\"checksum cretonne-entity 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0be57790fb6db92704951e37981f5e0121e7bfa077c7b48177317bf63795ba4\"\n-\"checksum cretonne-frontend 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b0fe88b2bc5b71df2ce460761063da21731926e6b554c84d8b937de6640875\"\n+\"checksum aho-corasick 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6531d44de723825aa81398a6415283229725a00fa30713812ab9323faa82fc4\"\n+\"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fc4a1aa4c24c0718a250f0681885c1af91419d242f29eb8f2ab28502d80dbd1\"\n+\"checksum backtrace 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbdd17cd962b570302f5297aea8648d5923e22e555c2ed2d8b2e34eca646bf6d\"\n+\"checksum backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bff67d0c06556c0b8e6b5f090f0eac52d950d9dfd1d35ba04e4ca3543eaf6a7e\"\n+\"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n+\"checksum bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0c54bb8f454c567f21197eefcdbf5679d0bd99f2ddbe52e84c77061952e6789\"\n+\"checksum cc 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49ec142f5768efb5b7622aebc3fdbdbb8950a4b9ba996393cb76ef7466e8747d\"\n+\"checksum cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"405216fd8fe65f718daa7102ea808a946b6ce40c742998fbfd3463645552de18\"\n+\"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536\"\n+\"checksum cretonne 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03610d69c786a211347d0be3f7da59cb03b025ef2cd83f66ea98103728f42ecc\"\n+\"checksum cretonne-codegen 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e7e43ab7952e998ea8da4bcda3b53d398396b9b691df44a040be5486a4935ef\"\n+\"checksum cretonne-entity 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4109dcfc0c7b8e11ad92a702d3f5df435d2782012118aa75566d2d0db586da3a\"\n+\"checksum cretonne-faerie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8d665b4ac93c254f79e861696db5a1297133c8c8603e5cd06b26250568a9cb0\"\n+\"checksum cretonne-frontend 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e0238865d537393f73598542a906dadfe85fcf070c293cdf882ece170d197455\"\n+\"checksum cretonne-module 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"232354804f19cb12bf2ac6f715d26df81a7242b3693a1a6cd2774ff89311e283\"\n+\"checksum cretonne-native 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"66d768de850f29bbb2cda9eeed168369c66263bee9068ca1b9af28000216116c\"\n+\"checksum cretonne-simplejit 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54d9e73a7f5bb0529be747a86a164e087c96edfd89e30b6d6f92653b70fc9943\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n+\"checksum env_logger 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e6e40ebb0e66918a37b38c7acab4e10d299e0463fe2af5d29b9cc86710cfd2a\"\n+\"checksum errno 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2c858c42ac0b88532f48fca88b0ed947cad4f1f64d904bcd6c9f138f7b95d70\"\n+\"checksum faerie 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffaaaa682748ec082a384edbf1d468ce10ad1b39dcfa3a8c3c0dbc5e6cff754c\"\n \"checksum failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"934799b6c1de475a012a02dab0ace1ace43789ee4b99bcfbf1a2e3e8ced5de82\"\n \"checksum failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7cdda555bb90c9bb67a3b670a0f42de8e73f5981524123ad8578aafec8ddb8b\"\n+\"checksum goblin 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2a5fea7ad351be7398e08003ea92a16bbba9a23c2a0c95d4e37d178276508217\"\n+\"checksum goblin 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e3ba9fec4dc9a09553388bff2724d3bf06bd64013539f2d3e1e3838eefb310a\"\n+\"checksum humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0484fda3e7007f2a4a0d9c3a703ca38c71c54c55602ce4660c419fd32e188c9e\"\n+\"checksum indexmap 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08173ba1e906efb6538785a8844dd496f5d34f0a2d88038e95195172fc667220\"\n \"checksum itoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c069bbec61e1ca5a596166e55dfe4773ff745c3d16b700013bcaff9a6df2c682\"\n+\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n+\"checksum lazy_static 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6412c5e2ad9584b0b8e979393122026cdd6d2a80b933f890dcd694ddbe73739\"\n+\"checksum libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b685088df2b950fccadf07a7187c8ef846a959c142338a48f9dc0b94517eb5f1\"\n+\"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n+\"checksum log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6fddaa003a65722a7fb9e26b0ce95921fe4ba590542ced664d8ce2fa26f9f3ac\"\n+\"checksum mach 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fd13ee2dd61cc82833ba05ade5a30bb3d63f7ced605ef827063c63078302de9\"\n+\"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n+\"checksum plain 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4596b6d070b27117e987119b4dac604f3c58cfb0b191112e24771b2faeac1a6\"\n+\"checksum proc-macro2 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"effdb53b25cdad54f8f48843d67398f7ef2e14f12c1b4cb4effc549a6462a4d6\"\n+\"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n+\"checksum quote 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e44651a0dc4cdd99f71c83b561e221f714912d11af1a4dff0631f923d53af035\"\n+\"checksum raw-cpuid 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"233ec1847057cf4d4591a0d76908aa12812140b11ea7d7d05b4c38cadb069c31\"\n+\"checksum redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c214e91d3ecf43e9a4e41e578973adeb14b474f2bee858742d127af75a0112b1\"\n+\"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n+\"checksum regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75ecf88252dce580404a22444fc7d626c01815debba56a7f4f536772a5ff19d3\"\n+\"checksum regex-syntax 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05b06a75f5217880fc5e905952a42750bf44787e56a6c6d6852ed0992f5e1d54\"\n+\"checksum region 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f9d3f2bb4b7085e6996e2765b56b783bd8f3a8a4ea5b95683063ca13cded993\"\n+\"checksum rustc-demangle 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76d7ba1feafada44f2d38eed812bd2489a03c0f5abb975799251518b68848649\"\n+\"checksum scroll 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b13864e1e0b3ed661d7206d512b8d1c4970f7fd9de23ae4e9b4331f0c25559e8\"\n+\"checksum scroll 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"66f024a8cc5e456eb870f688dbd899c84f61190c82c7a911e40f926941969074\"\n+\"checksum scroll_derive 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2a67086db2a44e94311fc4c02ec3f4751bda0fca9d87fd4e1bfe1cef55e9411d\"\n+\"checksum scroll_derive 0.9.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9a353f5dd99e42ff097d5a61db3257aa2c7127d76a3fa8287b642ef9ae0f7c5\"\n \"checksum serde 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e9a2d9a9ac5120e0f768801ca2b58ad6eec929dc9d1d616c162f208869c2ce95\"\n \"checksum serde_json 1.0.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc97cccc2959f39984524026d760c08ef0dd5f0f5948c8d31797dbfae458c875\"\n+\"checksum string-interner 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abb38a0d8fe673c40b10b6b75abcb076a958cc10fb894f14993d9737c4c87000\"\n+\"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n+\"checksum structopt 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8e9ad6a11096cbecdcca0cc6aa403fdfdbaeda2fb3323a39c98e6a166a1e45a\"\n+\"checksum structopt-derive 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4cbce8ccdc62166bd594c14396a3242bf94c337a51dbfa9be1076dd74b3db2af\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n+\"checksum syn 0.14.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c67da57e61ebc7b7b6fff56bb34440ca3a83db037320b0507af4c10368deda7d\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum synstructure 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a761d12e6d8dcb4dcf952a7a89b475e3a9d69e4a69307e01a470977642914bd\"\n \"checksum target-lexicon 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71b0a95ba4eff593189d912039fba46ce6ca1876ea6c16830e15340919d0a250\"\n+\"checksum termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"adc4587ead41bf016f11af03e55a624c06568b5a19db4e90fde573d805074f83\"\n+\"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n+\"checksum textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0b59b6b4b44d867f1370ef1bd91bfb262bf07bf0ae65c202ea2fbc16153b693\"\n+\"checksum thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279ef31c19ededf577bfd12dfae728040a21f635b06a24cd670ff510edd38963\"\n+\"checksum ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd2be2d6639d0f8fe6cdda291ad456e23629558d466e2789d2c3e9892bda285d\"\n+\"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n+\"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n+\"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n+\"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n+\"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n+\"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n+\"checksum winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"773ef9dcc5f24b7d850d0ff101e542ff24c3b090a9768e03ff889fdef41f00fd\"\n+\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n+\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n+\"checksum wincolor 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eeb06499a3a4d44302791052df005d5232b927ed1a9658146d842165c4de7767\""}, {"sha": "d1acda9c4303200d17ff6c8bd6d33c1149f9b133", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d40131d81a23acd20df37011c9ba9601876becf/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9d40131d81a23acd20df37011c9ba9601876becf/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9d40131d81a23acd20df37011c9ba9601876becf", "patch": "@@ -7,4 +7,7 @@ authors = [\"bjorn3 <bjorn3@users.noreply.github.com>\"]\n crate-type = [\"dylib\"]\n \n [dependencies]\n-cretonne = \"0.11.0\"\n+cretonne = \"0.12.0\"\n+cretonne-module = \"0.12.0\"\n+cretonne-simplejit = \"0.12.0\"\n+cretonne-faerie = \"0.12.0\""}, {"sha": "fd5629c8be12eea61ce656c35a3115e72615a9a2", "filename": "src/base.rs", "status": "modified", "additions": 188, "deletions": 134, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/9d40131d81a23acd20df37011c9ba9601876becf/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d40131d81a23acd20df37011c9ba9601876becf/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9d40131d81a23acd20df37011c9ba9601876becf", "patch": "@@ -2,24 +2,26 @@ use syntax::ast::{IntTy, UintTy};\n use rustc_mir::monomorphize::MonoItem;\n \n use cretonne::prelude::*;\n+//use cretonne::codegen::Context;\n use cretonne::codegen::ir::{\n     ExternalName,\n     FuncRef,\n     function::Function,\n };\n \n+use cretonne_module::{Module, Backend, FuncId, Linkage};\n+use cretonne_simplejit::{SimpleJITBuilder, SimpleJITBackend};\n+\n use std::any::Any;\n use std::collections::HashMap;\n \n use prelude::*;\n \n-pub struct Translated {\n-    f: Function,\n-}\n-\n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n struct Variable(Local);\n \n+type CurrentBackend = SimpleJITBackend;\n+\n impl EntityRef for Variable {\n     fn new(u: usize) -> Self {\n         Variable(Local::new(u))\n@@ -37,35 +39,35 @@ enum CValue {\n }\n \n impl CValue {\n-    fn force_stack<'a, 'tcx: 'a>(self, ccx: &mut CodegenCtxt<'a, 'tcx>, ty: Ty<'tcx>) -> Value {\n+    fn force_stack<'a, 'tcx: 'a>(self, fx: &mut FunctionCx<'a, 'tcx>, ty: Ty<'tcx>) -> Value {\n         match self {\n             CValue::ByRef(value) => value,\n             CValue::ByVal(value) => {\n-                let layout = ccx.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                let stack_slot = ccx.bcx.create_stack_slot(StackSlotData {\n+                let layout = fx.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n                     kind: StackSlotKind::ExplicitSlot,\n                     size: layout.size.bytes() as u32,\n                     offset: None,\n                 });\n-                ccx.bcx.ins().stack_store(value, stack_slot, 0);\n-                ccx.bcx.ins().stack_addr(types::I64, stack_slot, 0)\n+                fx.bcx.ins().stack_store(value, stack_slot, 0);\n+                fx.bcx.ins().stack_addr(types::I64, stack_slot, 0)\n             }\n             CValue::Func(func) => {\n-                let func = ccx.bcx.ins().func_addr(types::I64, func);\n-                CValue::ByVal(func).force_stack(ccx, ty)\n+                let func = fx.bcx.ins().func_addr(types::I64, func);\n+                CValue::ByVal(func).force_stack(fx, ty)\n             }\n         }\n     }\n \n-    fn load_value<'a, 'tcx: 'a>(self, ccx: &mut CodegenCtxt<'a, 'tcx>, ty: Ty<'tcx>) -> Value {\n+    fn load_value<'a, 'tcx: 'a>(self, fx: &mut FunctionCx<'a, 'tcx>, ty: Ty<'tcx>) -> Value {\n         match self {\n             CValue::ByRef(value) => {\n                 let cton_ty = cton_type_from_ty(ty).unwrap();\n-                ccx.bcx.ins().load(cton_ty, MemFlags::new(), value, 0)\n+                fx.bcx.ins().load(cton_ty, MemFlags::new(), value, 0)\n             }\n             CValue::ByVal(value) => value,\n             CValue::Func(func) => {\n-                ccx.bcx.ins().func_addr(types::I64, func)\n+                fx.bcx.ins().func_addr(types::I64, func)\n             }\n         }\n     }\n@@ -75,59 +77,88 @@ pub fn trans_crate<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Box<Any> {\n     let link_meta = ::build_link_meta(tcx.crate_hash(LOCAL_CRATE));\n     let metadata = tcx.encode_metadata(&link_meta);\n \n-    let mut translated_mono_items = Vec::new();\n+    let module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n+    //let mut context = Context::new();\n+\n+    let mut cx = CodegenCx {\n+        tcx,\n+        module,\n+        def_id_fn_id_map: HashMap::new(),\n+    };\n+    let cx = &mut cx;\n \n     for mono_item in\n         collector::collect_crate_mono_items(\n             tcx,\n             collector::MonoItemCollectionMode::Eager\n         ).0 {\n         match mono_item {\n-            MonoItem::Fn(Instance {\n-                def: InstanceDef::Item(def_id),\n-                substs,\n-            }) => {\n-                let sig = tcx.fn_sig(def_id);\n-                let sig = tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n-                let mut f = Function::with_name_signature(ext_name_from_did(def_id), cton_sig_from_fn_sig(sig.skip_binder()));\n-\n-                trans_fn(tcx, &mut f, def_id, substs);\n-\n-                let flags = settings::Flags::new(settings::builder());\n-                let verify_error: String = ::cretonne::codegen::verify_function(&f, &flags)\n-                    .map(|_| String::new())\n-                    .unwrap_or_else(|err| format!(\"\\n\\ncretonne error: {}\", err));\n-\n-                let mut mir = ::std::io::Cursor::new(Vec::new());\n-                ::rustc_mir::util::write_mir_pretty(tcx, Some(def_id), &mut mir).unwrap();\n-                let mut cton = String::new();\n-                ::cretonne::codegen::write_function(&mut cton, &f, None).unwrap();\n-                tcx.sess.warn(&format!(\"{:?}:\\n\\n{}\\n\\n{}{}\", def_id, String::from_utf8_lossy(&mir.into_inner()), cton, verify_error));\n-\n-                translated_mono_items.push(Translated {\n-                    f,\n-                });\n+            MonoItem::Fn(inst) => match inst {\n+                Instance {\n+                    def: InstanceDef::Item(def_id),\n+                    substs,\n+                } => {\n+                    let sig = tcx.fn_sig(def_id);\n+                    let sig = cton_sig_from_fn_sig(tcx, sig, substs);\n+                    let func_id = {\n+                        let module = &mut cx.module;\n+                        *cx.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n+                            module.declare_function(&tcx.absolute_item_path_str(def_id), Linkage::Local, &sig).unwrap()\n+                        })\n+                    };\n+\n+                    let mut f = Function::with_name_signature(ext_name_from_did(def_id), sig);\n+\n+                    trans_fn(cx, &mut f, def_id, substs);\n+\n+                    let flags = settings::Flags::new(settings::builder());\n+                    let verify_error: String = ::cretonne::codegen::verify_function(&f, &flags)\n+                        .map(|_| String::new())\n+                        .unwrap_or_else(|err| format!(\"\\n\\ncretonne error: {}\", err));\n+\n+                    let mut mir = ::std::io::Cursor::new(Vec::new());\n+                    ::rustc_mir::util::write_mir_pretty(cx.tcx, Some(def_id), &mut mir).unwrap();\n+                    let mut cton = String::new();\n+                    ::cretonne::codegen::write_function(&mut cton, &f, None).unwrap();\n+                    tcx.sess.warn(&format!(\"{:?}:\\n\\n{}\\n\\n{}{}\", def_id, String::from_utf8_lossy(&mir.into_inner()), cton, verify_error));\n+\n+                    //context.func = f;\n+                    //cx.module.define_function(func_id, &mut context).unwrap();\n+                    //context.clear();\n+                }\n+                _ => {}\n             }\n             _ => {}\n         }\n     }\n \n+    //cx.module.finalize_all();\n+    //cx.module.finish();\n+\n     Box::new(::OngoingCodegen {\n         metadata: metadata,\n-        translated_mono_items,\n+        //translated_module: Module::new(::cretonne_faerie::FaerieBuilder::new(,\n         crate_name: tcx.crate_name(LOCAL_CRATE),\n     })\n }\n \n-struct CodegenCtxt<'a, 'tcx: 'a> {\n+struct CodegenCx<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: Module<CurrentBackend>,\n+    def_id_fn_id_map: HashMap<Instance<'tcx>, FuncId>,\n+}\n+\n+struct FunctionCx<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &'a mut Module<CurrentBackend>,\n+    def_id_fn_id_map: &'a mut HashMap<Instance<'tcx>, FuncId>,\n     bcx: FunctionBuilder<'a, Variable>,\n     mir: &'tcx Mir<'tcx>,\n     ebb_map: HashMap<BasicBlock, Ebb>,\n     args_map: HashMap<Local, Value>,\n }\n \n-impl<'f, 'tcx> CodegenCtxt<'f, 'tcx> {\n+impl<'f, 'tcx> FunctionCx<'f, 'tcx> {\n     fn get_ebb(&self, bb: BasicBlock) -> Ebb {\n         *self.ebb_map.get(&bb).unwrap()\n     }\n@@ -139,10 +170,20 @@ impl<'f, 'tcx> CodegenCtxt<'f, 'tcx> {\n             LocalKind::Temp | LocalKind::Var => self.bcx.use_var(Variable(local)),\n         }\n     }\n+\n+    fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n+        let tcx = self.tcx;\n+        let module = &mut self.module;\n+        let func_id = *self.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n+            let sig = cton_sig_from_instance(tcx, inst);\n+            module.declare_function(&tcx.absolute_item_path_str(inst.def_id()), Linkage::Local, &sig).unwrap()\n+        });\n+        module.declare_func_in_func(func_id, &mut self.bcx.func)\n+    }\n }\n \n-fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id: DefId, substs: &Substs<'tcx>) {\n-    let mir = tcx.optimized_mir(def_id);\n+fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx>, f: &mut Function, def_id: DefId, substs: &Substs<'tcx>) {\n+    let mir = cx.tcx.optimized_mir(def_id);\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut bcx: FunctionBuilder<Variable> = FunctionBuilder::new(f, &mut func_ctx);\n \n@@ -160,7 +201,7 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n     }\n \n     for local in mir.vars_and_temps_iter() {\n-        let layout = tcx.layout_of(ParamEnv::reveal_all().and(mir.local_decls[local].ty)).unwrap();\n+        let layout = cx.tcx.layout_of(ParamEnv::reveal_all().and(mir.local_decls[local].ty)).unwrap();\n         let stack_slot = bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n             size: layout.size.bytes() as u32,\n@@ -173,100 +214,101 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n     }\n     bcx.ins().jump(*ebb_map.get(&START_BLOCK).unwrap(), &[]);\n \n-    let mut ccx = CodegenCtxt {\n-        tcx,\n+    let mut fx = FunctionCx {\n+        tcx: cx.tcx,\n+        module: &mut cx.module,\n+        def_id_fn_id_map: &mut cx.def_id_fn_id_map,\n         bcx,\n         mir,\n         ebb_map,\n         args_map,\n     };\n-    let ccx = &mut ccx;\n+    let fx = &mut fx;\n \n     for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n-        let ebb = ccx.get_ebb(bb);\n-        ccx.bcx.switch_to_block(ebb);\n+        let ebb = fx.get_ebb(bb);\n+        fx.bcx.switch_to_block(ebb);\n \n         for stmt in &bb_data.statements {\n-            trans_stmt(ccx, stmt);\n+            trans_stmt(fx, stmt);\n         }\n \n         match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n-                let ebb = ccx.get_ebb(*target);\n-                ccx.bcx.ins().jump(ebb, &[]);\n+                let ebb = fx.get_ebb(*target);\n+                fx.bcx.ins().jump(ebb, &[]);\n             }\n             TerminatorKind::Return => {\n-                ccx.bcx.ins().return_(&[]);\n+                fx.bcx.ins().return_(&[]);\n             }\n             TerminatorKind::Assert { cond, expected, msg: _, target, cleanup: _ } => {\n-                let cond_ty = cond.ty(&ccx.mir.local_decls, ccx.tcx);\n-                let cond = trans_operand(ccx, cond).load_value(ccx, cond_ty);\n-                let target = ccx.get_ebb(*target);\n+                let cond_ty = cond.ty(&fx.mir.local_decls, fx.tcx);\n+                let cond = trans_operand(fx, cond).load_value(fx, cond_ty);\n+                let target = fx.get_ebb(*target);\n                 if *expected {\n-                    ccx.bcx.ins().brz(cond, target, &[]);\n+                    fx.bcx.ins().brz(cond, target, &[]);\n                 } else {\n-                    ccx.bcx.ins().brnz(cond, target, &[]);\n+                    fx.bcx.ins().brnz(cond, target, &[]);\n                 }\n-                ccx.bcx.ins().trap(TrapCode::User(!0));\n+                fx.bcx.ins().trap(TrapCode::User(!0));\n             }\n \n             TerminatorKind::SwitchInt { discr, switch_ty, values, targets } => {\n-                let discr_ty = discr.ty(&ccx.mir.local_decls, ccx.tcx);\n-                let discr = trans_operand(ccx, discr).load_value(ccx, discr_ty);\n+                let discr_ty = discr.ty(&fx.mir.local_decls, fx.tcx);\n+                let discr = trans_operand(fx, discr).load_value(fx, discr_ty);\n                 let mut jt_data = JumpTableData::new();\n                 for (i, value) in values.iter().enumerate() {\n-                    let ebb = ccx.get_ebb(targets[i]);\n+                    let ebb = fx.get_ebb(targets[i]);\n                     jt_data.set_entry(*value as usize, ebb);\n                 }\n-                let mut jump_table = ccx.bcx.create_jump_table(jt_data);\n-                ccx.bcx.ins().br_table(discr, jump_table);\n-                let otherwise_ebb = ccx.get_ebb(targets[targets.len() - 1]);\n-                ccx.bcx.ins().jump(otherwise_ebb, &[]);\n+                let mut jump_table = fx.bcx.create_jump_table(jt_data);\n+                fx.bcx.ins().br_table(discr, jump_table);\n+                let otherwise_ebb = fx.get_ebb(targets[targets.len() - 1]);\n+                fx.bcx.ins().jump(otherwise_ebb, &[]);\n             }\n             TerminatorKind::Call { func, args, destination, cleanup: _ } => {\n-                let func_ty = func.ty(&ccx.mir.local_decls, ccx.tcx);\n-                let func = trans_operand(ccx, func);\n+                let func_ty = func.ty(&fx.mir.local_decls, fx.tcx);\n+                let func = trans_operand(fx, func);\n                 let return_place = if let Some((place, _)) = destination {\n-                    trans_place(ccx, place)\n+                    trans_place(fx, place)\n                 } else {\n-                    ccx.bcx.ins().iconst(types::I64, 0)\n+                    fx.bcx.ins().iconst(types::I64, 0)\n                 };\n                 let args = Some(return_place)\n                     .into_iter()\n                     .chain(\n                         args\n                             .into_iter()\n                             .map(|arg| {\n-                                let ty = arg.ty(&ccx.mir.local_decls, ccx.tcx);\n-                                let arg = trans_operand(ccx, arg);\n-                                arg.force_stack(ccx, ty)\n+                                let ty = arg.ty(&fx.mir.local_decls, fx.tcx);\n+                                let arg = trans_operand(fx, arg);\n+                                arg.force_stack(fx, ty)\n                             })\n                     ).collect::<Vec<_>>();\n                 match func {\n                     CValue::Func(func) => {\n-                        ccx.bcx.ins().call(func, &args);\n+                        fx.bcx.ins().call(func, &args);\n                     }\n                     func => {\n-                        let func = func.load_value(ccx, func_ty);\n+                        let func = func.load_value(fx, func_ty);\n                         let sig = match func_ty.sty {\n-                            TypeVariants::TyFnDef(def_id, _substs) => ccx.tcx.fn_sig(def_id),\n+                            TypeVariants::TyFnDef(def_id, _substs) => fx.tcx.fn_sig(def_id),\n                             TypeVariants::TyFnPtr(fn_sig) => fn_sig,\n                             _ => bug!(\"Calling non function type {:?}\", func_ty),\n                         };\n-                        let sig = ccx.tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n-                        let sig = ccx.bcx.import_signature(cton_sig_from_fn_sig(sig.skip_binder()));\n-                        ccx.bcx.ins().call_indirect(sig, func, &args);\n+                        let sig = fx.bcx.import_signature(cton_sig_from_fn_sig(fx.tcx, sig, substs));\n+                        fx.bcx.ins().call_indirect(sig, func, &args);\n                     }\n                 }\n                 if let Some((_, dest)) = *destination {\n-                    let ret_ebb = ccx.get_ebb(dest);\n-                    ccx.bcx.ins().jump(ret_ebb, &[]);\n+                    let ret_ebb = fx.get_ebb(dest);\n+                    fx.bcx.ins().jump(ret_ebb, &[]);\n                 } else {\n-                    ccx.bcx.ins().trap(TrapCode::User(!0));\n+                    fx.bcx.ins().trap(TrapCode::User(!0));\n                 }\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n-                ccx.bcx.ins().trap(TrapCode::User(!0));\n+                fx.bcx.ins().trap(TrapCode::User(!0));\n             }\n             TerminatorKind::Yield { .. } |\n             TerminatorKind::FalseEdges { .. } |\n@@ -279,34 +321,34 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n         }\n     }\n \n-    ccx.bcx.seal_all_blocks();\n-    ccx.bcx.finalize();\n+    fx.bcx.seal_all_blocks();\n+    fx.bcx.finalize();\n }\n \n-fn trans_stmt<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, stmt: &Statement<'tcx>) {\n+fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx>) {\n     match &stmt.kind {\n         StatementKind::Assign(place, rval) => {\n-            let ty = place.ty(&ccx.mir.local_decls, ccx.tcx).to_ty(ccx.tcx);\n-            let lval = trans_place(ccx, place);\n-            let rval = trans_rval(ccx, rval);\n-            do_memcpy(ccx, lval, rval, ty);\n+            let ty = place.ty(&fx.mir.local_decls, fx.tcx).to_ty(fx.tcx);\n+            let lval = trans_place(fx, place);\n+            let rval = trans_rval(fx, rval);\n+            do_memcpy(fx, lval, rval, ty);\n         }\n         StatementKind::StorageLive(_) | StatementKind::StorageDead(_) | StatementKind::Nop => {}\n         _ => unimplemented!(\"stmt {:?}\", stmt),\n     }\n }\n \n-fn trans_place<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, place: &Place<'tcx>) -> Value {\n+fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>) -> Value {\n     match place {\n-        Place::Local(local) => ccx.get_local(*local),\n+        Place::Local(local) => fx.get_local(*local),\n         Place::Projection(projection) => {\n-            let base = trans_place(ccx, &projection.base);\n+            let base = trans_place(fx, &projection.base);\n             match projection.elem {\n                 ProjectionElem::Field(field, ty) => {\n-                    let layout = ccx.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                    let layout = fx.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n                     let field_offset = layout.fields.offset(field.index());\n-                    let field_offset = ccx.bcx.ins().iconst(types::I64, field_offset.bytes() as i64);\n-                    ccx.bcx.ins().iadd(base, field_offset)\n+                    let field_offset = fx.bcx.ins().iconst(types::I64, field_offset.bytes() as i64);\n+                    fx.bcx.ins().iadd(base, field_offset)\n                 }\n                 _ => unimplemented!(\"projection {:?}\", projection),\n             }\n@@ -315,83 +357,83 @@ fn trans_place<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, place: &Place<'tcx\n     }\n }\n \n-fn trans_rval<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, rval: &Rvalue<'tcx>) -> Value {\n+fn trans_rval<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, rval: &Rvalue<'tcx>) -> Value {\n     match rval {\n         Rvalue::Use(operand) => {\n-            let operand_ty = operand.ty(&ccx.mir.local_decls, ccx.tcx);\n-            trans_operand(ccx, operand).force_stack(ccx, operand_ty)\n+            let operand_ty = operand.ty(&fx.mir.local_decls, fx.tcx);\n+            trans_operand(fx, operand).force_stack(fx, operand_ty)\n         },\n         Rvalue::CheckedBinaryOp(bin_op, lhs, rhs) => {\n             match bin_op {\n                 BinOp::Mul => {\n-                    let ty = lhs.ty(&ccx.mir.local_decls, ccx.tcx);\n-                    let lhs_ty = lhs.ty(&ccx.mir.local_decls, ccx.tcx);\n-                    let lhs = trans_operand(ccx, lhs).load_value(ccx, lhs_ty);\n-                    let rhs_ty = rhs.ty(&ccx.mir.local_decls, ccx.tcx);\n-                    let rhs = trans_operand(ccx, rhs).load_value(ccx, rhs_ty);\n-                    match ty.sty {\n+                    let ty = lhs.ty(&fx.mir.local_decls, fx.tcx);\n+                    let lhs_ty = lhs.ty(&fx.mir.local_decls, fx.tcx);\n+                    let lhs = trans_operand(fx, lhs).load_value(fx, lhs_ty);\n+                    let rhs_ty = rhs.ty(&fx.mir.local_decls, fx.tcx);\n+                    let rhs = trans_operand(fx, rhs).load_value(fx, rhs_ty);\n+                    let res = match ty.sty {\n                         TypeVariants::TyUint(_) => {\n-                            ccx.bcx.ins().imul(lhs, rhs)\n+                            fx.bcx.ins().imul(lhs, rhs)\n                         }\n                         _ => unimplemented!(),\n-                    }\n+                    };\n+                    let layout = fx.tcx.layout_of(ParamEnv::empty().and(rval.ty(&fx.mir.local_decls, fx.tcx))).unwrap();\n+                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                        kind: StackSlotKind::ExplicitSlot,\n+                        size: layout.size.bytes() as u32,\n+                        offset: None,\n+                    });\n+                    fx.bcx.ins().stack_store(res, stack_slot, 1);\n+                    fx.bcx.ins().stack_addr(types::I64, stack_slot, 1)\n                 }\n                 bin_op => unimplemented!(\"checked bin op {:?} {:?} {:?}\", bin_op, lhs, rhs),\n             }\n         }\n         Rvalue::Cast(CastKind::ReifyFnPointer, operand, ty) => {\n-            let operand = trans_operand(ccx, operand);\n-            operand.force_stack(ccx, ty)\n+            let operand = trans_operand(fx, operand);\n+            operand.force_stack(fx, ty)\n         }\n         Rvalue::Cast(CastKind::UnsafeFnPointer, operand, ty) => {\n-            trans_operand(ccx, operand).force_stack(ccx, ty)\n+            trans_operand(fx, operand).force_stack(fx, ty)\n         }\n         rval => unimplemented!(\"rval {:?}\", rval),\n     }\n }\n \n-fn trans_operand<'a, 'tcx>(ccx: &mut CodegenCtxt<'a, 'tcx>, operand: &Operand<'tcx>) -> CValue {\n+fn trans_operand<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx>, operand: &Operand<'tcx>) -> CValue {\n     match operand {\n         Operand::Move(place) |\n-        Operand::Copy(place) => CValue::ByRef(trans_place(ccx, place)),\n+        Operand::Copy(place) => CValue::ByRef(trans_place(fx, place)),\n         Operand::Constant(const_) => {\n             match const_.literal {\n                 Literal::Value { value } => {\n-                    let layout = ccx.tcx.layout_of(ParamEnv::empty().and(const_.ty)).unwrap();\n+                    let layout = fx.tcx.layout_of(ParamEnv::empty().and(const_.ty)).unwrap();\n                     match const_.ty.sty {\n                         TypeVariants::TyUint(_) => {\n                             let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                            let iconst = ccx.bcx.ins().iconst(cton_type_from_ty(const_.ty).unwrap(), bits as u64 as i64);\n+                            let iconst = fx.bcx.ins().iconst(cton_type_from_ty(const_.ty).unwrap(), bits as u64 as i64);\n                             CValue::ByVal(iconst)\n                         }\n                         TypeVariants::TyInt(_) => {\n                             let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                            let iconst = ccx.bcx.ins().iconst(cton_type_from_ty(const_.ty).unwrap(), bits as i128 as i64);\n+                            let iconst = fx.bcx.ins().iconst(cton_type_from_ty(const_.ty).unwrap(), bits as i128 as i64);\n                             CValue::ByVal(iconst)\n                         }\n                         TypeVariants::TyFnDef(def_id, substs) => {\n-                            let ext_name = ext_name_from_did(def_id);\n-                            let sig = ccx.tcx.fn_sig(def_id);\n-                            let sig = ccx.tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n-                            let sig = ccx.bcx.import_signature(cton_sig_from_fn_sig(sig.skip_binder()));\n-                            CValue::Func(ccx.bcx.import_function(ExtFuncData {\n-                                name: ext_name,\n-                                signature: sig,\n-                                colocated: false,\n-                            }))\n+                            let func_ref = fx.get_function_ref(Instance::new(def_id, substs));\n+                            CValue::Func(func_ref)\n                         }\n                         _ => unimplemented!(\"value {:?} ty {:?}\", value, const_.ty),\n                     }\n                 }\n                 _ => unimplemented!()\n             }\n         }\n-        operand => unimplemented!(\"operand {:?}\", operand),\n     }\n }\n \n-fn do_memcpy<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, to: Value, from: Value, ty: Ty<'tcx>) {\n-    let layout = ccx.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n+fn do_memcpy<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, to: Value, from: Value, ty: Ty<'tcx>) {\n+    let layout = fx.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n     let size = layout.size.bytes() as i32;\n     let ty = match size {\n         2 => Some(types::I16),\n@@ -400,12 +442,12 @@ fn do_memcpy<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, to: Value, from: Val\n         _ => None,\n     };\n     if let Some(ty) = ty {\n-        let data = ccx.bcx.ins().load(ty, MemFlags::new(), from, 0);\n-        ccx.bcx.ins().store(MemFlags::new(), data, to, 0);\n+        let data = fx.bcx.ins().load(ty, MemFlags::new(), from, 0);\n+        fx.bcx.ins().store(MemFlags::new(), data, to, 0);\n     } else {\n         for i in 0..size {\n-            let byte = ccx.bcx.ins().load(types::I8, MemFlags::new(), from, i);\n-            ccx.bcx.ins().store(MemFlags::new(), byte, to, i);\n+            let byte = fx.bcx.ins().load(types::I8, MemFlags::new(), from, i);\n+            fx.bcx.ins().store(MemFlags::new(), byte, to, i);\n         }\n     }\n }\n@@ -414,9 +456,21 @@ fn ext_name_from_did(def_id: DefId) -> ExternalName {\n     ExternalName::user(def_id.krate.as_u32(), def_id.index.as_raw_u32())\n }\n \n-fn cton_sig_from_fn_sig(sig: &FnSig) -> Signature {\n+fn cton_sig_from_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: PolyFnSig<'tcx>, substs: &Substs<'tcx>) -> Signature {\n+    let sig = tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n+    cton_sig_from_mono_fn_sig(sig)\n+}\n+\n+fn cton_sig_from_instance<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, inst: Instance<'tcx>) -> Signature {\n+    let fn_ty = inst.ty(tcx);\n+    let sig = fn_ty.fn_sig(tcx);\n+    cton_sig_from_mono_fn_sig(sig)\n+}\n+\n+fn cton_sig_from_mono_fn_sig<'a ,'tcx: 'a>(sig: PolyFnSig<'tcx>) -> Signature {\n+    let sig = sig.skip_binder();\n     let inputs = sig.inputs();\n-    let output = sig.output();\n+    let _output = sig.output();\n     assert!(!sig.variadic, \"Variadic function are not yet supported\");\n     let call_conv = match sig.abi {\n         _ => CallConv::SystemV,"}, {"sha": "a0aec6c311697fc711b8ec77d8f1a7797865bc60", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d40131d81a23acd20df37011c9ba9601876becf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d40131d81a23acd20df37011c9ba9601876becf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9d40131d81a23acd20df37011c9ba9601876becf", "patch": "@@ -9,6 +9,9 @@ extern crate rustc_incremental;\n extern crate rustc_data_structures;\n \n extern crate cretonne;\n+extern crate cretonne_module;\n+extern crate cretonne_simplejit;\n+extern crate cretonne_faerie;\n \n use syntax::symbol::Symbol;\n use rustc::session::{\n@@ -34,7 +37,7 @@ mod base;\n mod prelude {\n     pub use rustc::session::Session;\n     pub use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-    pub use rustc::ty::{TyCtxt, Ty, TypeVariants, Instance, InstanceDef, ParamEnv, FnSig, subst::Substs};\n+    pub use rustc::ty::{TyCtxt, Ty, TypeVariants, Instance, InstanceDef, ParamEnv, FnSig, PolyFnSig, subst::Substs};\n     pub use rustc::mir::*;\n     pub use rustc_mir::monomorphize::collector;\n     pub use rustc_data_structures::{\n@@ -49,7 +52,7 @@ struct CretonneCodegenBackend(());\n \n struct OngoingCodegen {\n     metadata: EncodedMetadata,\n-    translated_mono_items: Vec<base::Translated>,\n+    //translated_module: Module<cretonne_faerie::FaerieBackend>,\n     crate_name: Symbol,\n }\n "}]}