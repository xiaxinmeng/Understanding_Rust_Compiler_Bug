{"sha": "650909244eee51b4fd70389538c6b784ccf005c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MDkwOTI0NGVlZTUxYjRmZDcwMzg5NTM4YzZiNzg0Y2NmMDA1Yzc=", "commit": {"author": {"name": "Axel Viala", "email": "axel.viala@darnuria.eu", "date": "2014-06-04T12:45:56Z"}, "committer": {"name": "Axel Viala", "email": "axel.viala@darnuria.eu", "date": "2014-06-04T14:02:48Z"}, "message": "Add code example to std::os::getenv for unix.", "tree": {"sha": "b502f9d9dd0707f3e7b596eb7ce89e3d856706e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b502f9d9dd0707f3e7b596eb7ce89e3d856706e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/650909244eee51b4fd70389538c6b784ccf005c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/650909244eee51b4fd70389538c6b784ccf005c7", "html_url": "https://github.com/rust-lang/rust/commit/650909244eee51b4fd70389538c6b784ccf005c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/650909244eee51b4fd70389538c6b784ccf005c7/comments", "author": {"login": "darnuria", "id": 2827553, "node_id": "MDQ6VXNlcjI4Mjc1NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2827553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darnuria", "html_url": "https://github.com/darnuria", "followers_url": "https://api.github.com/users/darnuria/followers", "following_url": "https://api.github.com/users/darnuria/following{/other_user}", "gists_url": "https://api.github.com/users/darnuria/gists{/gist_id}", "starred_url": "https://api.github.com/users/darnuria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darnuria/subscriptions", "organizations_url": "https://api.github.com/users/darnuria/orgs", "repos_url": "https://api.github.com/users/darnuria/repos", "events_url": "https://api.github.com/users/darnuria/events{/privacy}", "received_events_url": "https://api.github.com/users/darnuria/received_events", "type": "User", "site_admin": false}, "committer": {"login": "darnuria", "id": 2827553, "node_id": "MDQ6VXNlcjI4Mjc1NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2827553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darnuria", "html_url": "https://github.com/darnuria", "followers_url": "https://api.github.com/users/darnuria/followers", "following_url": "https://api.github.com/users/darnuria/following{/other_user}", "gists_url": "https://api.github.com/users/darnuria/gists{/gist_id}", "starred_url": "https://api.github.com/users/darnuria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darnuria/subscriptions", "organizations_url": "https://api.github.com/users/darnuria/orgs", "repos_url": "https://api.github.com/users/darnuria/repos", "events_url": "https://api.github.com/users/darnuria/events{/privacy}", "received_events_url": "https://api.github.com/users/darnuria/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d130acc0d0e83bd0b4b94cda9d39dcbb67312526", "url": "https://api.github.com/repos/rust-lang/rust/commits/d130acc0d0e83bd0b4b94cda9d39dcbb67312526", "html_url": "https://github.com/rust-lang/rust/commit/d130acc0d0e83bd0b4b94cda9d39dcbb67312526"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "15fd2cb8f12c557ee49d1c52450d5d6ffd830d64", "filename": "src/libstd/os.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/650909244eee51b4fd70389538c6b784ccf005c7/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/650909244eee51b4fd70389538c6b784ccf005c7/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=650909244eee51b4fd70389538c6b784ccf005c7", "patch": "@@ -277,6 +277,16 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>,Vec<u8>)> {\n /// # Failure\n ///\n /// Fails if `n` has any interior NULs.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// let key = \"HOME\";\n+/// match std::os::getenv(key) {\n+///     Some(val) => println!(\"{}: {}\", key, val),\n+///     None => println!(\"{} is not defined in the environnement.\", key)\n+/// }\n+/// ```\n pub fn getenv(n: &str) -> Option<String> {\n     getenv_as_bytes(n).map(|v| str::from_utf8_lossy(v.as_slice()).to_string())\n }"}]}