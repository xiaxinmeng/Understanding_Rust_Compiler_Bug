{"sha": "96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "node_id": "C_kwDOAAsO6NoAKDk2MTU0ZDdmYTdjZWQzMTg0YjY5NjQ1ZWQ4YjZlN2MyMTBjYTE1YjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-11T21:16:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-19T18:16:22Z"}, "message": "Add IMPLIED_BOUNDS_ENTAILMENT lint", "tree": {"sha": "d6492644481911c90557daa7bed8fc1152259258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6492644481911c90557daa7bed8fc1152259258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "html_url": "https://github.com/rust-lang/rust/commit/96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4653c93e4442d88bf3278067183c8fdc0be74a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4653c93e4442d88bf3278067183c8fdc0be74a1f", "html_url": "https://github.com/rust-lang/rust/commit/4653c93e4442d88bf3278067183c8fdc0be74a1f"}], "stats": {"total": 210, "additions": 203, "deletions": 7}, "files": [{"sha": "23d3e6041efea57054907b8995a0d3d2fd1d40c4", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -255,15 +255,15 @@ fn compare_predicate_entailment<'tcx>(\n \n     let mut wf_tys = FxIndexSet::default();\n \n-    let impl_sig = infcx.replace_bound_vars_with_fresh_vars(\n+    let unnormalized_impl_sig = infcx.replace_bound_vars_with_fresh_vars(\n         impl_m_span,\n         infer::HigherRankedType,\n         tcx.fn_sig(impl_m.def_id),\n     );\n+    let unnormalized_impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(unnormalized_impl_sig));\n \n     let norm_cause = ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let impl_sig = ocx.normalize(&norm_cause, param_env, impl_sig);\n-    let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n+    let impl_fty = ocx.normalize(&norm_cause, param_env, unnormalized_impl_fty);\n     debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n     let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n@@ -312,21 +312,86 @@ fn compare_predicate_entailment<'tcx>(\n         return Err(reported);\n     }\n \n+    // FIXME(compiler-errors): This can be removed when IMPLIED_BOUNDS_ENTAILMENT\n+    // becomes a hard error.\n+    let lint_infcx = infcx.fork();\n+\n     // Finally, resolve all regions. This catches wily misuses of\n     // lifetime parameters.\n     let outlives_environment = OutlivesEnvironment::with_bounds(\n         param_env,\n         Some(infcx),\n-        infcx.implied_bounds_tys(param_env, impl_m_hir_id, wf_tys),\n+        infcx.implied_bounds_tys(param_env, impl_m_hir_id, wf_tys.clone()),\n     );\n-    infcx.check_region_obligations_and_report_errors(\n+    if let Some(guar) = infcx.check_region_obligations_and_report_errors(\n         impl_m.def_id.expect_local(),\n         &outlives_environment,\n+    ) {\n+        return Err(guar);\n+    }\n+\n+    // FIXME(compiler-errors): This can be simplified when IMPLIED_BOUNDS_ENTAILMENT\n+    // becomes a hard error (i.e. ideally we'd just register a WF obligation above...)\n+    lint_implied_wf_entailment(\n+        impl_m.def_id.expect_local(),\n+        lint_infcx,\n+        param_env,\n+        unnormalized_impl_fty,\n+        wf_tys,\n     );\n \n     Ok(())\n }\n \n+fn lint_implied_wf_entailment<'tcx>(\n+    impl_m_def_id: LocalDefId,\n+    infcx: InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    unnormalized_impl_fty: Ty<'tcx>,\n+    wf_tys: FxIndexSet<Ty<'tcx>>,\n+) {\n+    let ocx = ObligationCtxt::new(&infcx);\n+\n+    // We need to check that the impl's args are well-formed given\n+    // the hybrid param-env (impl + trait method where-clauses).\n+    ocx.register_obligation(traits::Obligation::new(\n+        infcx.tcx,\n+        ObligationCause::dummy(),\n+        param_env,\n+        ty::Binder::dummy(ty::PredicateKind::WellFormed(unnormalized_impl_fty.into())),\n+    ));\n+\n+    let hir_id = infcx.tcx.hir().local_def_id_to_hir_id(impl_m_def_id);\n+    let lint = || {\n+        infcx.tcx.struct_span_lint_hir(\n+            rustc_session::lint::builtin::IMPLIED_BOUNDS_ENTAILMENT,\n+            hir_id,\n+            infcx.tcx.def_span(impl_m_def_id),\n+            \"impl method assumes more implied bounds than the corresponding trait method\",\n+            |lint| lint,\n+        );\n+    };\n+\n+    let errors = ocx.select_all_or_error();\n+    if !errors.is_empty() {\n+        lint();\n+    }\n+\n+    let outlives_environment = OutlivesEnvironment::with_bounds(\n+        param_env,\n+        Some(&infcx),\n+        infcx.implied_bounds_tys(param_env, hir_id, wf_tys.clone()),\n+    );\n+    infcx.process_registered_region_obligations(\n+        outlives_environment.region_bound_pairs(),\n+        param_env,\n+    );\n+\n+    if !infcx.resolve_regions(&outlives_environment).is_empty() {\n+        lint();\n+    }\n+}\n+\n fn compare_asyncness<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,"}, {"sha": "a9ef91db059a1ccf381749b61b61b92407559152", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -1693,7 +1693,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         &self,\n         generic_param_scope: LocalDefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) {\n+    ) -> Option<ErrorGuaranteed> {\n         let errors = self.resolve_regions(outlives_env);\n \n         if let None = self.tainted_by_errors() {\n@@ -1704,6 +1704,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             // errors from silly ones.\n             self.report_region_errors(generic_param_scope, &errors);\n         }\n+\n+        (!errors.is_empty()).then(|| {\n+            self.tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, \"error should have been emitted\")\n+        })\n     }\n \n     // [Note-Type-error-reporting]"}, {"sha": "47bd1564f0828ab1a36cb97f74d81b3f05143128", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -68,6 +68,7 @@ use crate::infer::{\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::ConstraintCategory;\n@@ -177,7 +178,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         generic_param_scope: LocalDefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) {\n+    ) -> Option<ErrorGuaranteed> {\n         self.process_registered_region_obligations(\n             outlives_env.region_bound_pairs(),\n             outlives_env.param_env,"}, {"sha": "c88158da763443e9f6f2c0ec3624593ddb777851", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -3998,3 +3998,44 @@ declare_lint! {\n     Warn,\n     \"named arguments in format used positionally\"\n }\n+\n+declare_lint! {\n+    /// The `implied_bounds_entailment` lint detects cases where the arguments of an impl method\n+    /// have stronger implied bounds than those from the trait method it's implementing.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(implied_bounds_entailment)]\n+    ///\n+    /// trait Trait {\n+    ///     fn get<'s>(s: &'s str, _: &'static &'static ()) -> &'static str;\n+    /// }\n+    ///\n+    /// impl Trait for () {\n+    ///     fn get<'s>(s: &'s str, _: &'static &'s ()) -> &'static str {\n+    ///         s\n+    ///     }\n+    /// }\n+    ///\n+    /// let val = <() as Trait>::get(&String::from(\"blah blah blah\"), &&());\n+    /// println!(\"{}\", val);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Neither the trait method, which provides no implied bounds about `'s`, nor the impl,\n+    /// which can't name `'s`, requires the main function to prove that 's: 'static, but the\n+    /// impl method is able to assume that 's: 'static within its own body.\n+    ///\n+    /// This can be used to implement an unsound API if used incorrectly.\n+    pub IMPLIED_BOUNDS_ENTAILMENT,\n+    Deny,\n+    \"impl method assumes more implied bounds than its corresponding trait method\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #105572 <https://github.com/rust-lang/rust/issues/105572>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n+    };\n+}"}, {"sha": "cb5d83abfb6f98867650bbf020cb62311f939dde", "filename": "src/test/ui/implied-bounds/impl-implied-bounds-compatibility-unnormalized.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility-unnormalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility-unnormalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility-unnormalized.rs?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -0,0 +1,20 @@\n+trait Project {\n+    type Ty;\n+}\n+impl Project for &'_ &'_ () {\n+    type Ty = ();\n+}\n+trait Trait {\n+    fn get<'s>(s: &'s str, _: ()) -> &'static str;\n+}\n+impl Trait for () {\n+    fn get<'s>(s: &'s str, _: <&'static &'s () as Project>::Ty) -> &'static str {\n+        //~^ ERROR impl method assumes more implied bounds than the corresponding trait method\n+        //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+        s\n+    }\n+}\n+fn main() {\n+    let val = <() as Trait>::get(&String::from(\"blah blah blah\"), ());\n+    println!(\"{}\", val);\n+}"}, {"sha": "5a757901777f8382f118f08c6d5a777c4b2d9a17", "filename": "src/test/ui/implied-bounds/impl-implied-bounds-compatibility-unnormalized.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility-unnormalized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility-unnormalized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility-unnormalized.stderr?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -0,0 +1,23 @@\n+error: impl method assumes more implied bounds than the corresponding trait method\n+  --> $DIR/impl-implied-bounds-compatibility-unnormalized.rs:11:5\n+   |\n+LL |     fn get<'s>(s: &'s str, _: <&'static &'s () as Project>::Ty) -> &'static str {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #105572 <https://github.com/rust-lang/rust/issues/105572>\n+   = note: `#[deny(implied_bounds_entailment)]` on by default\n+\n+error: aborting due to previous error\n+\n+Future incompatibility report: Future breakage diagnostic:\n+error: impl method assumes more implied bounds than the corresponding trait method\n+  --> $DIR/impl-implied-bounds-compatibility-unnormalized.rs:11:5\n+   |\n+LL |     fn get<'s>(s: &'s str, _: <&'static &'s () as Project>::Ty) -> &'static str {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #105572 <https://github.com/rust-lang/rust/issues/105572>\n+   = note: `#[deny(implied_bounds_entailment)]` on by default\n+"}, {"sha": "2d7cc38d26372e0d7543c81a60bc88a5cbc03c18", "filename": "src/test/ui/implied-bounds/impl-implied-bounds-compatibility.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility.rs?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -0,0 +1,19 @@\n+use std::cell::RefCell;\n+\n+pub struct MessageListeners<'a> {\n+    listeners: RefCell<Vec<Box<dyn FnMut(()) + 'a>>>,\n+}\n+\n+pub trait MessageListenersInterface {\n+    fn listeners<'c>(&'c self) -> &'c MessageListeners<'c>;\n+}\n+\n+impl<'a> MessageListenersInterface for MessageListeners<'a> {\n+    fn listeners<'b>(&'b self) -> &'a MessageListeners<'b> {\n+        //~^ ERROR impl method assumes more implied bounds than the corresponding trait method\n+        //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b7dbfc8ab8c73a1f4d6d8237936d13ea4be4258b", "filename": "src/test/ui/implied-bounds/impl-implied-bounds-compatibility.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96154d7fa7ced3184b69645ed8b6e7c210ca15b4/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fimpl-implied-bounds-compatibility.stderr?ref=96154d7fa7ced3184b69645ed8b6e7c210ca15b4", "patch": "@@ -0,0 +1,23 @@\n+error: impl method assumes more implied bounds than the corresponding trait method\n+  --> $DIR/impl-implied-bounds-compatibility.rs:12:5\n+   |\n+LL |     fn listeners<'b>(&'b self) -> &'a MessageListeners<'b> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #105572 <https://github.com/rust-lang/rust/issues/105572>\n+   = note: `#[deny(implied_bounds_entailment)]` on by default\n+\n+error: aborting due to previous error\n+\n+Future incompatibility report: Future breakage diagnostic:\n+error: impl method assumes more implied bounds than the corresponding trait method\n+  --> $DIR/impl-implied-bounds-compatibility.rs:12:5\n+   |\n+LL |     fn listeners<'b>(&'b self) -> &'a MessageListeners<'b> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #105572 <https://github.com/rust-lang/rust/issues/105572>\n+   = note: `#[deny(implied_bounds_entailment)]` on by default\n+"}]}