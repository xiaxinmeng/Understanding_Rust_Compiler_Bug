{"sha": "291d958585296b39df0d8ecc785b8786e14cd523", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MWQ5NTg1ODUyOTZiMzlkZjBkOGVjYzc4NWI4Nzg2ZTE0Y2Q1MjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-27T09:08:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-27T09:08:27Z"}, "message": "Auto merge of #53624 - Zoxc:ice-fix, r=oli-obk\n\nMove with_globals setup from run_compiler to run\n\nAn alternative to https://github.com/rust-lang/rust/pull/53526\n\nNote this breaks some miri stuff and clippy since they call `run_compiler` directly, and they now need to also call `with_globals ` cc @rust-lang/dev-tools\n\nr? @oli-obk", "tree": {"sha": "b0e145d7754a426f46a2e3567fcae8e45a1bec0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e145d7754a426f46a2e3567fcae8e45a1bec0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291d958585296b39df0d8ecc785b8786e14cd523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291d958585296b39df0d8ecc785b8786e14cd523", "html_url": "https://github.com/rust-lang/rust/commit/291d958585296b39df0d8ecc785b8786e14cd523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291d958585296b39df0d8ecc785b8786e14cd523/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7625c031670bf33e2fb23816736ff10aa2ee6733", "url": "https://api.github.com/repos/rust-lang/rust/commits/7625c031670bf33e2fb23816736ff10aa2ee6733", "html_url": "https://github.com/rust-lang/rust/commit/7625c031670bf33e2fb23816736ff10aa2ee6733"}, {"sha": "0972658578f779d5aa3a6b773a862dfb84949d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/0972658578f779d5aa3a6b773a862dfb84949d84", "html_url": "https://github.com/rust-lang/rust/commit/0972658578f779d5aa3a6b773a862dfb84949d84"}], "stats": {"total": 79, "additions": 34, "deletions": 45}, "files": [{"sha": "9d5f3bbd9e3673408e49bf30f528976c7e2290a6", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/291d958585296b39df0d8ecc785b8786e14cd523/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/291d958585296b39df0d8ecc785b8786e14cd523/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=291d958585296b39df0d8ecc785b8786e14cd523", "patch": "@@ -222,18 +222,6 @@ dependencies = [\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"cargo_metadata\"\n-version = \"0.5.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.6.0\"\n@@ -307,7 +295,7 @@ name = \"clippy\"\n version = \"0.0.212\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargo_metadata 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.2.0\",\n  \"clippy_lints 0.0.212\",\n  \"compiletest_rs 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -329,7 +317,7 @@ version = \"0.2.0\"\n name = \"clippy_lints\"\n version = \"0.0.212\"\n dependencies = [\n- \"cargo_metadata 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"if_chain 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3071,7 +3059,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74c0b906e9446b0a2e4f760cdb3fa4b2c48cdc6db8766a845c54b6ff063fd2e9\"\n-\"checksum cargo_metadata 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1efca0b863ca03ed4c109fb1c55e0bc4bbeb221d3e103d86251046b06a526bd0\"\n \"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n \"checksum cc 1.0.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a6007c146fdd28d4512a794b07ffe9d8e89e6bf86e2e0c4ddff2e1fb54a0007\"\n \"checksum cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c4e7bb64a8ebb0d856483e1e682ea3422f883c5f5615a90d51a2c82fe87fdd3\""}, {"sha": "a96c277d4b555d723e9967cdf55c7b717daf8a22", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/291d958585296b39df0d8ecc785b8786e14cd523/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291d958585296b39df0d8ecc785b8786e14cd523/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=291d958585296b39df0d8ecc785b8786e14cd523", "patch": "@@ -185,27 +185,29 @@ pub fn run<F>(run_compiler: F) -> isize\n     where F: FnOnce() -> (CompileResult, Option<Session>) + Send + 'static\n {\n     let result = monitor(move || {\n-        let (result, session) = run_compiler();\n-        if let Err(CompileIncomplete::Errored(_)) = result {\n-            match session {\n-                Some(sess) => {\n-                    sess.abort_if_errors();\n-                    panic!(\"error reported but abort_if_errors didn't abort???\");\n-                }\n-                None => {\n-                    let emitter =\n-                        errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n-                                                               None,\n-                                                               true,\n-                                                               false);\n-                    let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n-                    handler.emit(&MultiSpan::new(),\n-                                 \"aborting due to previous error(s)\",\n-                                 errors::Level::Fatal);\n-                    panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n+        syntax::with_globals(|| {\n+            let (result, session) = run_compiler();\n+            if let Err(CompileIncomplete::Errored(_)) = result {\n+                match session {\n+                    Some(sess) => {\n+                        sess.abort_if_errors();\n+                        panic!(\"error reported but abort_if_errors didn't abort???\");\n+                    }\n+                    None => {\n+                        let emitter =\n+                            errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n+                                                                None,\n+                                                                true,\n+                                                                false);\n+                        let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                        handler.emit(&MultiSpan::new(),\n+                                    \"aborting due to previous error(s)\",\n+                                    errors::Level::Fatal);\n+                        panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n+                    }\n                 }\n             }\n-        }\n+        });\n     });\n \n     match result {\n@@ -471,17 +473,15 @@ pub fn run_compiler<'a>(args: &[String],\n                         emitter_dest: Option<Box<dyn Write + Send>>)\n                         -> (CompileResult, Option<Session>)\n {\n-    syntax::with_globals(|| {\n-        let matches = match handle_options(args) {\n-            Some(matches) => matches,\n-            None => return (Ok(()), None),\n-        };\n+    let matches = match handle_options(args) {\n+        Some(matches) => matches,\n+        None => return (Ok(()), None),\n+    };\n \n-        let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n+    let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n-        driver::spawn_thread_pool(sopts, |sopts| {\n-            run_compiler_with_pool(matches, sopts, cfg, callbacks, file_loader, emitter_dest)\n-        })\n+    driver::spawn_thread_pool(sopts, |sopts| {\n+        run_compiler_with_pool(matches, sopts, cfg, callbacks, file_loader, emitter_dest)\n     })\n }\n "}, {"sha": "6283d054373c12339bc4920819c8c99cb745f0b7", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291d958585296b39df0d8ecc785b8786e14cd523/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291d958585296b39df0d8ecc785b8786e14cd523/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=291d958585296b39df0d8ecc785b8786e14cd523", "patch": "@@ -92,7 +92,9 @@ fn main() {\n         let tc = TestCalls { count: &mut count };\n         // we should never get use this filename, but lets make sure they are valid args.\n         let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-        rustc_driver::run_compiler(&args, Box::new(tc), None, None);\n+        syntax::with_globals(|| {\n+            rustc_driver::run_compiler(&args, Box::new(tc), None, None);\n+        });\n     }\n     assert_eq!(count, 30);\n }"}, {"sha": "628934424e9c181a4162b3a5d01e4211ee98b7b7", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=291d958585296b39df0d8ecc785b8786e14cd523", "patch": "@@ -1 +1 @@\n-Subproject commit dda656652e2e1a8d615a712d7f7482c25fa0a9c2\n+Subproject commit 628934424e9c181a4162b3a5d01e4211ee98b7b7"}]}