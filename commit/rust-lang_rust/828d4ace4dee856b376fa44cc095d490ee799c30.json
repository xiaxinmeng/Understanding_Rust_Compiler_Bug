{"sha": "828d4ace4dee856b376fa44cc095d490ee799c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOGQ0YWNlNGRlZTg1NmIzNzZmYTQ0Y2MwOTVkNDkwZWU3OTljMzA=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-11-20T21:27:50Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-12-22T11:19:46Z"}, "message": "Migrate standard library away from compare_and_swap", "tree": {"sha": "4c97e5e4dd24f69a0caf17d87abeeb861da74f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c97e5e4dd24f69a0caf17d87abeeb861da74f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828d4ace4dee856b376fa44cc095d490ee799c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828d4ace4dee856b376fa44cc095d490ee799c30", "html_url": "https://github.com/rust-lang/rust/commit/828d4ace4dee856b376fa44cc095d490ee799c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828d4ace4dee856b376fa44cc095d490ee799c30/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4252e482569f00612e768811cbe0295562095343", "url": "https://api.github.com/repos/rust-lang/rust/commits/4252e482569f00612e768811cbe0295562095343", "html_url": "https://github.com/rust-lang/rust/commit/4252e482569f00612e768811cbe0295562095343"}], "stats": {"total": 115, "additions": 79, "deletions": 36}, "files": [{"sha": "2d1e4496aeef7496cad65c4b2c429ef348fa3306", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -4,11 +4,11 @@ use core::sync::atomic::*;\n #[test]\n fn bool_() {\n     let a = AtomicBool::new(false);\n-    assert_eq!(a.compare_and_swap(false, true, SeqCst), false);\n-    assert_eq!(a.compare_and_swap(false, true, SeqCst), true);\n+    assert_eq!(a.compare_exchange(false, true, SeqCst, SeqCst), Ok(false));\n+    assert_eq!(a.compare_exchange(false, true, SeqCst, SeqCst), Err(true));\n \n     a.store(false, SeqCst);\n-    assert_eq!(a.compare_and_swap(false, true, SeqCst), false);\n+    assert_eq!(a.compare_exchange(false, true, SeqCst, SeqCst), Ok(false));\n }\n \n #[test]"}, {"sha": "4c852b8ee812f1f7a6b25c36e12ea3f496a72c42", "filename": "library/std/src/sync/mpsc/blocking.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fblocking.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -36,7 +36,11 @@ pub fn tokens() -> (WaitToken, SignalToken) {\n \n impl SignalToken {\n     pub fn signal(&self) -> bool {\n-        let wake = !self.inner.woken.compare_and_swap(false, true, Ordering::SeqCst);\n+        let wake = self\n+            .inner\n+            .woken\n+            .compare_exchange(false, true, Ordering::SeqCst, Ordering::SeqCst)\n+            .is_ok();\n         if wake {\n             self.inner.thread.unpark();\n         }"}, {"sha": "3dcf03f579a0f32f0f5dd00ceba42b1057913f2c", "filename": "library/std/src/sync/mpsc/oneshot.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Foneshot.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -129,7 +129,7 @@ impl<T> Packet<T> {\n             let ptr = unsafe { signal_token.cast_to_usize() };\n \n             // race with senders to enter the blocking state\n-            if self.state.compare_and_swap(EMPTY, ptr, Ordering::SeqCst) == EMPTY {\n+            if self.state.compare_exchange(EMPTY, ptr, Ordering::SeqCst, Ordering::SeqCst).is_ok() {\n                 if let Some(deadline) = deadline {\n                     let timed_out = !wait_token.wait_max_until(deadline);\n                     // Try to reset the state\n@@ -161,7 +161,12 @@ impl<T> Packet<T> {\n                 // the state changes under our feet we'd rather just see that state\n                 // change.\n                 DATA => {\n-                    self.state.compare_and_swap(DATA, EMPTY, Ordering::SeqCst);\n+                    let _ = self.state.compare_exchange(\n+                        DATA,\n+                        EMPTY,\n+                        Ordering::SeqCst,\n+                        Ordering::SeqCst,\n+                    );\n                     match (&mut *self.data.get()).take() {\n                         Some(data) => Ok(data),\n                         None => unreachable!(),\n@@ -264,7 +269,10 @@ impl<T> Packet<T> {\n \n             // If we've got a blocked thread, then use an atomic to gain ownership\n             // of it (may fail)\n-            ptr => self.state.compare_and_swap(ptr, EMPTY, Ordering::SeqCst),\n+            ptr => self\n+                .state\n+                .compare_exchange(ptr, EMPTY, Ordering::SeqCst, Ordering::SeqCst)\n+                .unwrap_or_else(|x| x),\n         };\n \n         // Now that we've got ownership of our state, figure out what to do"}, {"sha": "0c32e636a563357ce39cac0f6313c422b4915c1c", "filename": "library/std/src/sync/mpsc/shared.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -385,8 +385,15 @@ impl<T> Packet<T> {\n         self.port_dropped.store(true, Ordering::SeqCst);\n         let mut steals = unsafe { *self.steals.get() };\n         while {\n-            let cnt = self.cnt.compare_and_swap(steals, DISCONNECTED, Ordering::SeqCst);\n-            cnt != DISCONNECTED && cnt != steals\n+            match self.cnt.compare_exchange(\n+                steals,\n+                DISCONNECTED,\n+                Ordering::SeqCst,\n+                Ordering::SeqCst,\n+            ) {\n+                Ok(_) => false,\n+                Err(old) => old != DISCONNECTED,\n+            }\n         } {\n             // See the discussion in 'try_recv' for why we yield\n             // control of this thread."}, {"sha": "a652f24c58a19cd986563a22b9d04b2ed2b681d9", "filename": "library/std/src/sync/mpsc/stream.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fstream.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -322,12 +322,15 @@ impl<T> Packet<T> {\n         // (because there is a bounded number of senders).\n         let mut steals = unsafe { *self.queue.consumer_addition().steals.get() };\n         while {\n-            let cnt = self.queue.producer_addition().cnt.compare_and_swap(\n+            match self.queue.producer_addition().cnt.compare_exchange(\n                 steals,\n                 DISCONNECTED,\n                 Ordering::SeqCst,\n-            );\n-            cnt != DISCONNECTED && cnt != steals\n+                Ordering::SeqCst,\n+            ) {\n+                Ok(_) => false,\n+                Err(old) => old != DISCONNECTED,\n+            }\n         } {\n             while self.queue.pop().is_some() {\n                 steals += 1;"}, {"sha": "9a17d121db19e23979e42e4ee2545d28e9784f2a", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -65,7 +65,7 @@\n //       must do so with Release ordering to make the result available.\n //     - `wait` inserts `Waiter` nodes as a pointer in `state_and_queue`, and\n //       needs to make the nodes available with Release ordering. The load in\n-//       its `compare_and_swap` can be Relaxed because it only has to compare\n+//       its `compare_exchange` can be Relaxed because it only has to compare\n //       the atomic, not to read other data.\n //     - `WaiterQueue::Drop` must see the `Waiter` nodes, so it must load\n //       `state_and_queue` with Acquire ordering.\n@@ -395,12 +395,13 @@ impl Once {\n                 }\n                 POISONED | INCOMPLETE => {\n                     // Try to register this thread as the one RUNNING.\n-                    let old = self.state_and_queue.compare_and_swap(\n+                    let exchange_result = self.state_and_queue.compare_exchange(\n                         state_and_queue,\n                         RUNNING,\n                         Ordering::Acquire,\n+                        Ordering::Acquire,\n                     );\n-                    if old != state_and_queue {\n+                    if let Err(old) = exchange_result {\n                         state_and_queue = old;\n                         continue;\n                     }\n@@ -452,8 +453,13 @@ fn wait(state_and_queue: &AtomicUsize, mut current_state: usize) {\n \n         // Try to slide in the node at the head of the linked list, making sure\n         // that another thread didn't just replace the head of the linked list.\n-        let old = state_and_queue.compare_and_swap(current_state, me | RUNNING, Ordering::Release);\n-        if old != current_state {\n+        let exchange_result = state_and_queue.compare_exchange(\n+            current_state,\n+            me | RUNNING,\n+            Ordering::Release,\n+            Ordering::Relaxed,\n+        );\n+        if let Err(old) = exchange_result {\n             current_state = old;\n             continue;\n         }"}, {"sha": "a5e453034762c16d5d9dac37d898f41319a8df92", "filename": "library/std/src/sys/sgx/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -36,20 +36,20 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n     }\n \n     // Try to atomically swap UNINIT with BUSY. The returned state can be:\n-    match RELOC_STATE.compare_and_swap(UNINIT, BUSY, Ordering::Acquire) {\n+    match RELOC_STATE.compare_exchange(UNINIT, BUSY, Ordering::Acquire, Ordering::Acquire) {\n         // This thread just obtained the lock and other threads will observe BUSY\n-        UNINIT => {\n+        Ok(_) => {\n             reloc::relocate_elf_rela();\n             RELOC_STATE.store(DONE, Ordering::Release);\n         }\n         // We need to wait until the initialization is done.\n-        BUSY => {\n+        Err(BUSY) => {\n             while RELOC_STATE.load(Ordering::Acquire) == BUSY {\n                 core::hint::spin_loop();\n             }\n         }\n         // Initialization is done.\n-        DONE => {}\n+        Err(DONE) => {}\n         _ => unreachable!(),\n     }\n }"}, {"sha": "9140041c58414754a8a6b245269584450070103a", "filename": "library/std/src/sys/sgx/waitqueue/spin_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fspin_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fspin_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fspin_mutex.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -42,7 +42,7 @@ impl<T> SpinMutex<T> {\n \n     #[inline(always)]\n     pub fn try_lock(&self) -> Option<SpinMutexGuard<'_, T>> {\n-        if !self.lock.compare_and_swap(false, true, Ordering::Acquire) {\n+        if self.lock.compare_exchange(false, true, Ordering::Acquire, Ordering::Acquire).is_ok() {\n             Some(SpinMutexGuard { mutex: self })\n         } else {\n             None"}, {"sha": "d4cc56d4cb3efa244a259345495c3bd4d8e29f64", "filename": "library/std/src/sys/windows/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -123,9 +123,9 @@ impl Mutex {\n         let inner = box Inner { remutex: ReentrantMutex::uninitialized(), held: Cell::new(false) };\n         inner.remutex.init();\n         let inner = Box::into_raw(inner);\n-        match self.lock.compare_and_swap(0, inner as usize, Ordering::SeqCst) {\n-            0 => inner,\n-            n => {\n+        match self.lock.compare_exchange(0, inner as usize, Ordering::SeqCst, Ordering::SeqCst) {\n+            Ok(_) => inner,\n+            Err(n) => {\n                 Box::from_raw(inner).remutex.destroy();\n                 n as *const _\n             }"}, {"sha": "1578a2de60cefde982fc76f594b82a4a6c560bb0", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -23,9 +23,9 @@ impl SameMutexCheck {\n     }\n     pub fn verify(&self, mutex: &MovableMutex) {\n         let addr = mutex.raw() as *const mutex_imp::Mutex as usize;\n-        match self.addr.compare_and_swap(0, addr, Ordering::SeqCst) {\n-            0 => {}              // Stored the address\n-            n if n == addr => {} // Lost a race to store the same address\n+        match self.addr.compare_exchange(0, addr, Ordering::SeqCst, Ordering::SeqCst) {\n+            Ok(_) => {}               // Stored the address\n+            Err(n) if n == addr => {} // Lost a race to store the same address\n             _ => panic!(\"attempted to use a condition variable with two mutexes\"),\n         }\n     }"}, {"sha": "32cd56416655f18a4157684ac35ab1a85c0acddd", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -168,7 +168,7 @@ impl StaticKey {\n             return key;\n         }\n \n-        // POSIX allows the key created here to be 0, but the compare_and_swap\n+        // POSIX allows the key created here to be 0, but the compare_exchange\n         // below relies on using 0 as a sentinel value to check who won the\n         // race to set the shared TLS key. As far as I know, there is no\n         // guaranteed value that cannot be returned as a posix_key_create key,\n@@ -186,11 +186,11 @@ impl StaticKey {\n             key2\n         };\n         rtassert!(key != 0);\n-        match self.key.compare_and_swap(0, key as usize, Ordering::SeqCst) {\n+        match self.key.compare_exchange(0, key as usize, Ordering::SeqCst, Ordering::SeqCst) {\n             // The CAS succeeded, so we've created the actual key\n-            0 => key as usize,\n+            Ok(_) => key as usize,\n             // If someone beat us to the punch, use their key instead\n-            n => {\n+            Err(n) => {\n                 imp::destroy(key);\n                 n\n             }"}, {"sha": "0132743b244048cfa48e8388e872ceac3e7c3edf", "filename": "library/std/src/sys_common/thread_parker/futex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Ffutex.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -49,7 +49,7 @@ impl Parker {\n             // Wait for something to happen, assuming it's still set to PARKED.\n             futex_wait(&self.state, PARKED, None);\n             // Change NOTIFIED=>EMPTY and return in that case.\n-            if self.state.compare_and_swap(NOTIFIED, EMPTY, Acquire) == NOTIFIED {\n+            if self.state.compare_exchange(NOTIFIED, EMPTY, Acquire, Acquire).is_ok() {\n                 return;\n             } else {\n                 // Spurious wake up. We loop to try again."}, {"sha": "c8559d247282430981f82a7cdf39552f1b59792b", "filename": "src/test/ui/array-slice-vec/box-of-array-of-drop-1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -17,7 +17,12 @@ impl Drop for D {\n     fn drop(&mut self) {\n         println!(\"Dropping {}\", self.0);\n         let old = LOG.load(Ordering::SeqCst);\n-        LOG.compare_and_swap(old, old << 4 | self.0 as usize, Ordering::SeqCst);\n+        let _ = LOG.compare_exchange(\n+            old,\n+            old << 4 | self.0 as usize,\n+            Ordering::SeqCst,\n+            Ordering::SeqCst\n+        );\n     }\n }\n "}, {"sha": "e75051caabcc32a69eccd57c3b66faa76c66bf51", "filename": "src/test/ui/array-slice-vec/box-of-array-of-drop-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -17,7 +17,12 @@ impl Drop for D {\n     fn drop(&mut self) {\n         println!(\"Dropping {}\", self.0);\n         let old = LOG.load(Ordering::SeqCst);\n-        LOG.compare_and_swap(old, old << 4 | self.0 as usize, Ordering::SeqCst);\n+        let _ = LOG.compare_exchange(\n+            old,\n+            old << 4 | self.0 as usize,\n+            Ordering::SeqCst,\n+            Ordering::SeqCst\n+        );\n     }\n }\n "}, {"sha": "96497a53d308e4d66f36d1e4757e389e82b3e05a", "filename": "src/test/ui/array-slice-vec/nested-vec-3.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/828d4ace4dee856b376fa44cc095d490ee799c30/src%2Ftest%2Fui%2Farray-slice-vec%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d4ace4dee856b376fa44cc095d490ee799c30/src%2Ftest%2Fui%2Farray-slice-vec%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fnested-vec-3.rs?ref=828d4ace4dee856b376fa44cc095d490ee799c30", "patch": "@@ -18,7 +18,12 @@ impl Drop for D {\n     fn drop(&mut self) {\n         println!(\"Dropping {}\", self.0);\n         let old = LOG.load(Ordering::SeqCst);\n-        LOG.compare_and_swap(old, old << 4 | self.0 as usize, Ordering::SeqCst);\n+        let _ = LOG.compare_exchange(\n+            old,\n+            old << 4 | self.0 as usize,\n+            Ordering::SeqCst,\n+            Ordering::SeqCst,\n+        );\n     }\n }\n "}]}