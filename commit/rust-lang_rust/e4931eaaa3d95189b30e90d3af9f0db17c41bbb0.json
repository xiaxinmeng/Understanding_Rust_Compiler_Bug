{"sha": "e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OTMxZWFhYTNkOTUxODliMzBlOTBkM2FmOWYwZGIxN2M0MWJiYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-06T02:29:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-06T02:29:21Z"}, "message": "Auto merge of #66141 - Centril:rollup-n2fcvp9, r=Centril\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #65892 (Remove `PartialEq` and `Eq` from the `SpecialDerives`.)\n - #66014 (Show type parameter name and definition in type mismatch error messages )\n - #66027 (Move has_panic_handler to query)\n - #66054 (syntax: Avoid span arithmetic for delimiter tokens)\n - #66068 (use silent emitter for rustdoc highlighting pass)\n - #66081 (let caller of check_ptr_access_align control the error message)\n - #66093 (Do not ICE with a precision flag in formatting str and no format arguments)\n - #66098 (Detect `::` -> `:` typo when involving turbofish)\n - #66101 (Tweak type mismatch caused by break on tail expr)\n - #66106 (Fix typo in explanation of `E0080`)\n - #66115 (rustc: remove \"GlobalMetaData\" dead code from hir::map::definitions.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d121150066de905b1877e0a1fb81884ac4656918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d121150066de905b1877e0a1fb81884ac4656918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "html_url": "https://github.com/rust-lang/rust/commit/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1423bec54cf2db283b614e527cfd602b481485d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1423bec54cf2db283b614e527cfd602b481485d1", "html_url": "https://github.com/rust-lang/rust/commit/1423bec54cf2db283b614e527cfd602b481485d1"}, {"sha": "35a5ffc8eab6d0aceb2f7dba207a0aa42d0264e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a5ffc8eab6d0aceb2f7dba207a0aa42d0264e5", "html_url": "https://github.com/rust-lang/rust/commit/35a5ffc8eab6d0aceb2f7dba207a0aa42d0264e5"}], "stats": {"total": 919, "additions": 453, "deletions": 466}, "files": [{"sha": "f5ff92e69bc7adb6fee5b8da4d6f8740ad4147a3", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -335,7 +335,7 @@ This works because `Box` is a pointer, so its size is well-known.\n \"##,\n \n E0080: r##\"\n-This error indicates that the compiler was unable to sensibly evaluate an\n+This error indicates that the compiler was unable to sensibly evaluate a\n constant expression that had to be evaluated. Attempting to divide by 0\n or causing integer overflow are two ways to induce this error. For example:\n "}, {"sha": "c6acdf53de30b0ebe24c02cfda14e7693a2f52a9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -65,7 +65,6 @@ use syntax::ast;\n use syntax::ptr::P as AstP;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax::expand::SpecialDerives;\n use syntax::print::pprust;\n use syntax::parse::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n@@ -184,8 +183,6 @@ pub trait Resolver {\n         ns: Namespace,\n     ) -> (ast::Path, Res<NodeId>);\n \n-    fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool;\n-\n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n }\n "}, {"sha": "f1b999cdd6f0f42994efd692fad04c3a6bd08048", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -18,7 +18,6 @@ use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast::*;\n use syntax::visit::{self, Visitor};\n-use syntax::expand::SpecialDerives;\n use syntax::source_map::{respan, DesugaringKind, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n@@ -227,13 +226,7 @@ impl LoweringContext<'_> {\n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n-        let mut attrs = self.lower_attrs_extendable(&i.attrs);\n-        if self.resolver.has_derives(i.id, SpecialDerives::PARTIAL_EQ | SpecialDerives::EQ) {\n-            // Add `#[structural_match]` if the item derived both `PartialEq` and `Eq`.\n-            let ident = Ident::new(sym::structural_match, i.span);\n-            attrs.push(attr::mk_attr_outer(attr::mk_word_item(ident)));\n-        }\n-        let attrs = attrs.into();\n+        let attrs = self.lower_attrs(&i.attrs);\n \n         if let ItemKind::MacroDef(ref def) = i.kind {\n             if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) {"}, {"sha": "1e444e8a5b84e2ee7a9fd55ebb3ab3e964653998", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 87, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -19,7 +19,7 @@ use std::hash::Hash;\n use syntax::ast;\n use syntax_pos::symbol::{Symbol, sym};\n use syntax_pos::hygiene::ExpnId;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::Span;\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`\n@@ -310,10 +310,6 @@ pub enum DefPathData {\n     AnonConst,\n     /// An `impl Trait` type node.\n     ImplTrait,\n-    /// Identifies a piece of crate metadata that is global to a whole crate\n-    /// (as opposed to just one item). `GlobalMetaData` components are only\n-    /// supposed to show up right below the crate root.\n-    GlobalMetaData(Symbol),\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -444,9 +440,6 @@ impl Definitions {\n         self.node_to_def_index.insert(ast::CRATE_NODE_ID, root_index);\n         self.set_invocation_parent(ExpnId::root(), root_index);\n \n-        // Allocate some other `DefIndex`es that always must exist.\n-        GlobalMetaDataKind::allocate_def_indices(self);\n-\n         root_index\n     }\n \n@@ -553,8 +546,7 @@ impl DefPathData {\n             TypeNs(name) |\n             ValueNs(name) |\n             MacroNs(name) |\n-            LifetimeNs(name) |\n-            GlobalMetaData(name) => Some(name),\n+            LifetimeNs(name) => Some(name),\n \n             Impl |\n             CrateRoot |\n@@ -572,8 +564,7 @@ impl DefPathData {\n             TypeNs(name) |\n             ValueNs(name) |\n             MacroNs(name) |\n-            LifetimeNs(name) |\n-            GlobalMetaData(name) => {\n+            LifetimeNs(name) => {\n                 name\n             }\n             // Note that this does not show up in user print-outs.\n@@ -591,78 +582,3 @@ impl DefPathData {\n         self.as_symbol().to_string()\n     }\n }\n-\n-// We define the `GlobalMetaDataKind` enum with this macro because we want to\n-// make sure that we exhaustively iterate over all variants when registering\n-// the corresponding `DefIndex`es in the `DefTable`.\n-macro_rules! define_global_metadata_kind {\n-    (pub enum GlobalMetaDataKind {\n-        $($variant:ident),*\n-    }) => (\n-        pub enum GlobalMetaDataKind {\n-            $($variant),*\n-        }\n-\n-        impl GlobalMetaDataKind {\n-            fn allocate_def_indices(definitions: &mut Definitions) {\n-                $({\n-                    let instance = GlobalMetaDataKind::$variant;\n-                    definitions.create_def_with_parent(\n-                        CRATE_DEF_INDEX,\n-                        ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.name()),\n-                        ExpnId::root(),\n-                        DUMMY_SP\n-                    );\n-\n-                    // Make sure calling `def_index` does not crash.\n-                    instance.def_index(&definitions.table);\n-                })*\n-            }\n-\n-            pub fn def_index(&self, def_path_table: &DefPathTable) -> DefIndex {\n-                let def_key = DefKey {\n-                    parent: Some(CRATE_DEF_INDEX),\n-                    disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.name()),\n-                        disambiguator: 0,\n-                    }\n-                };\n-\n-                // These `DefKey`s are all right after the root,\n-                // so a linear search is fine.\n-                let index = def_path_table.index_to_key\n-                                          .iter()\n-                                          .position(|k| *k == def_key)\n-                                          .unwrap();\n-\n-                DefIndex::from(index)\n-            }\n-\n-            fn name(&self) -> Symbol {\n-\n-                let string = match *self {\n-                    $(\n-                        GlobalMetaDataKind::$variant => {\n-                            concat!(\"{{GlobalMetaData::\", stringify!($variant), \"}}\")\n-                        }\n-                    )*\n-                };\n-\n-                Symbol::intern(string)\n-            }\n-        }\n-    )\n-}\n-\n-define_global_metadata_kind!(pub enum GlobalMetaDataKind {\n-    Krate,\n-    CrateDeps,\n-    DylibDependencyFormats,\n-    LangItems,\n-    LangItemsMissing,\n-    NativeLibraries,\n-    SourceMap,\n-    Impls,\n-    ExportedSymbols\n-});"}, {"sha": "e238c966122347bfe738f9e099fccf920b70de1b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1234,8 +1234,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         }\n \n+        // In some (most?) cases cause.body_id points to actual body, but in some cases\n+        // it's a actual definition. According to the comments (e.g. in\n+        // librustc_typeck/check/compare_method.rs:compare_predicate_entailment) the latter\n+        // is relied upon by some other code. This might (or might not) need cleanup.\n+        let body_owner_def_id = self.tcx.hir().opt_local_def_id(cause.body_id)\n+            .unwrap_or_else(|| {\n+                self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n+            });\n         self.check_and_note_conflicting_crates(diag, terr, span);\n-        self.tcx.note_and_explain_type_err(diag, terr, span);\n+        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n \n         // It reads better to have the error origin as the final\n         // thing."}, {"sha": "403b32df20e10b1e02579b4d1b730b0a7fb7b11a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -148,9 +148,6 @@ pub struct Session {\n     /// Metadata about the allocators for the current crate being compiled.\n     pub has_global_allocator: Once<bool>,\n \n-    /// Metadata about the panic handlers for the current crate being compiled.\n-    pub has_panic_handler: Once<bool>,\n-\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n@@ -1211,7 +1208,6 @@ fn build_session_(\n         print_fuel,\n         jobserver: jobserver::client(),\n         has_global_allocator: Once::new(),\n-        has_panic_handler: Once::new(),\n         driver_lint_caps,\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),"}, {"sha": "888d84d69fa014d7d821b436404f561582e02577", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1231,7 +1231,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn suggest_fn_call(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n     ) {"}, {"sha": "0906d9ebd8e7f06f6e465abb8004767970a8ef4a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -3045,4 +3045,9 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         attr::contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)\n     };\n+    providers.has_panic_handler = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        // We want to check if the panic handler was defined in this crate\n+        tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n+    };\n }"}, {"sha": "0639a70ed0c49d598f7774f809bd5b93fc3fad0b", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -241,7 +241,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Projection(_) => \"associated type\".into(),\n             ty::UnnormalizedProjection(_) => \"non-normalized associated type\".into(),\n-            ty::Param(_) => \"type parameter\".into(),\n+            ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n             ty::Opaque(..) => \"opaque type\".into(),\n             ty::Error => \"type error\".into(),\n         }\n@@ -254,6 +254,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         db: &mut DiagnosticBuilder<'_>,\n         err: &TypeError<'tcx>,\n         sp: Span,\n+        body_owner_def_id: DefId,\n     ) {\n         use self::TypeError::*;\n \n@@ -288,7 +289,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                             );\n                         }\n                     },\n-                    (ty::Param(_), ty::Param(_)) => {\n+                    (ty::Param(expected), ty::Param(found)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        let e_span = self.def_span(generics.type_param(expected, self).def_id);\n+                        if !sp.contains(e_span) {\n+                            db.span_label(e_span, \"expected type parameter\");\n+                        }\n+                        let f_span = self.def_span(generics.type_param(found, self).def_id);\n+                        if !sp.contains(f_span) {\n+                            db.span_label(f_span, \"found type parameter\");\n+                        }\n                         db.note(\"a type parameter was expected, but a different one was found; \\\n                                  you might be missing a type parameter or trait bound\");\n                         db.note(\"for more information, visit \\\n@@ -301,7 +311,12 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n                         db.note(\"you might be missing a type parameter or trait bound\");\n                     }\n-                    (ty::Param(_), _) | (_, ty::Param(_)) => {\n+                    (ty::Param(p), _) | (_, ty::Param(p)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        let p_span = self.def_span(generics.type_param(p, self).def_id);\n+                        if !sp.contains(p_span) {\n+                            db.span_label(p_span, \"this type parameter\");\n+                        }\n                         db.help(\"type parameters must be constrained to match other types\");\n                         if self.sess.teach(&db.get_code().unwrap()) {\n                             db.help(\"given a type parameter `T` and a method `foo`:"}, {"sha": "0fe4c7c67487379a325318558f81cf2a956a42a5", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -601,8 +601,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             | DefPathData::Misc\n             | DefPathData::Impl\n             | DefPathData::MacroNs(_)\n-            | DefPathData::LifetimeNs(_)\n-            | DefPathData::GlobalMetaData(_) => {\n+            | DefPathData::LifetimeNs(_) => {\n                 bug!(\"symbol_names: unexpected DefPathData: {:?}\", disambiguated_data.data)\n             }\n         };"}, {"sha": "5f74df13fae216b240dcfdf7c72c3037a1c03d31", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -424,6 +424,14 @@ impl Emitter for EmitterWriter {\n     }\n }\n \n+/// An emitter that does nothing when emitting a diagnostic.\n+pub struct SilentEmitter;\n+\n+impl Emitter for SilentEmitter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> { None }\n+    fn emit_diagnostic(&mut self, _: &Diagnostic) {}\n+}\n+\n /// maximum number of lines we will print for each error; arbitrary.\n pub const MAX_HIGHLIGHT_LINES: usize = 6;\n /// maximum number of suggestions to be shown"}, {"sha": "4e4d6d982fbc59498dd89c2bd3d645bf707d495f", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -17,10 +17,9 @@ use std::sync::{Arc, Mutex};\n use syntax::{self, parse};\n use syntax::ast::{self, MetaItemKind};\n use syntax::parse::token;\n-use syntax::source_map::{FileName, FilePathMapping, FileLoader, SourceMap};\n+use syntax::source_map::{FileName, FileLoader, SourceMap};\n use syntax::sess::ParseSess;\n use syntax_pos::edition;\n-use rustc_errors::{Diagnostic, emitter::Emitter, Handler, SourceMapperDyn};\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n \n@@ -63,18 +62,9 @@ impl Compiler {\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    struct NullEmitter;\n-    impl Emitter for NullEmitter {\n-        fn emit_diagnostic(&mut self, _: &Diagnostic) {}\n-        fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> { None }\n-    }\n-\n     syntax::with_default_globals(move || {\n         let cfg = cfgspecs.into_iter().map(|s| {\n-\n-            let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-            let handler = Handler::with_emitter(false, None, Box::new(NullEmitter));\n-            let sess = ParseSess::with_span_handler(handler, cm);\n+            let sess = ParseSess::with_silent_emitter();\n             let filename = FileName::cfg_spec_source_code(&s);\n             let mut parser = parse::new_parser_from_source_str(&sess, filename, s.to_string());\n "}, {"sha": "de00e9920e6835977190f27771fee2069874d98b", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -542,7 +542,6 @@ impl<'tcx> EncodeContext<'tcx> {\n         let attrs = tcx.hir().krate_attrs();\n         let has_default_lib_allocator = attr::contains_name(&attrs, sym::default_lib_allocator);\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n-        let has_panic_handler = *tcx.sess.has_panic_handler.try_get().unwrap_or(&false);\n \n         let root = self.lazy(CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n@@ -553,7 +552,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),\n             has_global_allocator: has_global_allocator,\n-            has_panic_handler: has_panic_handler,\n+            has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n             has_default_lib_allocator: has_default_lib_allocator,\n             plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_decls_static: if is_proc_macro {"}, {"sha": "47b918248330abfcda020050b2628c0bbf5126ea", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -314,16 +314,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         let align = if M::CHECK_ALIGN { Some(align) } else { None };\n-        self.check_ptr_access_align(sptr, size, align)\n+        self.check_ptr_access_align(sptr, size, align, CheckInAllocMsg::MemoryAccessTest)\n     }\n \n     /// Like `check_ptr_access`, but *definitely* checks alignment when `align`\n-    /// is `Some` (overriding `M::CHECK_ALIGN`).\n-    pub(super) fn check_ptr_access_align(\n+    /// is `Some` (overriding `M::CHECK_ALIGN`). Also lets the caller control\n+    /// the error message for the out-of-bounds case.\n+    pub fn check_ptr_access_align(\n         &self,\n         sptr: Scalar<M::PointerTag>,\n         size: Size,\n         align: Option<Align>,\n+        msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {\n             if offset % align.bytes() == 0 {\n@@ -368,7 +370,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // It is sufficient to check this for the end pointer. The addition\n                 // checks for overflow.\n                 let end_ptr = ptr.offset(size, self)?;\n-                end_ptr.check_inbounds_alloc(allocation_size, CheckInAllocMsg::MemoryAccessTest)?;\n+                end_ptr.check_inbounds_alloc(allocation_size, msg)?;\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {"}, {"sha": "82b8b28d72b7b5aff22c8e6614ba1c65e70f81ae", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::fx::FxHashSet;\n use std::hash::Hash;\n \n use super::{\n-    GlobalAlloc, InterpResult,\n+    GlobalAlloc, InterpResult, CheckInAllocMsg,\n     Scalar, OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n };\n \n@@ -424,7 +424,12 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // alignment should take attributes into account).\n                     .unwrap_or_else(|| (layout.size, layout.align.abi));\n                 let ptr: Option<_> = match\n-                    self.ecx.memory.check_ptr_access_align(ptr, size, Some(align))\n+                    self.ecx.memory.check_ptr_access_align(\n+                        ptr,\n+                        size,\n+                        Some(align),\n+                        CheckInAllocMsg::InboundsTest,\n+                    )\n                 {\n                     Ok(ptr) => ptr,\n                     Err(err) => {"}, {"sha": "5c996bffb9ad9431c46cdc08fbbb320d274513af", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -36,7 +36,6 @@ use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n \n use syntax::{struct_span_err, unwrap_or};\n-use syntax::expand::SpecialDerives;\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ast::{CRATE_NODE_ID, Crate};\n use syntax::ast::{ItemKind, Path};\n@@ -934,12 +933,10 @@ pub struct Resolver<'a> {\n     multi_segment_macro_resolutions: Vec<(Vec<Segment>, Span, MacroKind, ParentScope<'a>,\n                                           Option<Res>)>,\n     builtin_attrs: Vec<(Ident, ParentScope<'a>)>,\n-    /// Some built-in derives mark items they are applied to so they are treated specially later.\n+    /// `derive(Copy)` marks items they are applied to so they are treated specially later.\n     /// Derive macros cannot modify the item themselves and have to store the markers in the global\n     /// context, so they attach the markers to derive container IDs using this resolver table.\n-    /// FIXME: Find a way for `PartialEq` and `Eq` to emulate `#[structural_match]`\n-    /// by marking the produced impls rather than the original items.\n-    special_derives: FxHashMap<ExpnId, SpecialDerives>,\n+    containers_deriving_copy: FxHashSet<ExpnId>,\n     /// Parent scopes in which the macros were invoked.\n     /// FIXME: `derives` are missing in these parent scopes and need to be taken from elsewhere.\n     invocation_parent_scopes: FxHashMap<ExpnId, ParentScope<'a>>,\n@@ -1078,12 +1075,6 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         &mut self.definitions\n     }\n \n-    fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool {\n-        let def_id = self.definitions.local_def_id(node_id);\n-        let expn_id = self.definitions.expansion_that_defined(def_id.index);\n-        self.has_derives(expn_id, derives)\n-    }\n-\n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n         &mut self.lint_buffer\n     }\n@@ -1228,7 +1219,7 @@ impl<'a> Resolver<'a> {\n             single_segment_macro_resolutions: Default::default(),\n             multi_segment_macro_resolutions: Default::default(),\n             builtin_attrs: Default::default(),\n-            special_derives: Default::default(),\n+            containers_deriving_copy: Default::default(),\n             active_features:\n                 features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n                     .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n@@ -1314,10 +1305,6 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn has_derives(&self, expn_id: ExpnId, markers: SpecialDerives) -> bool {\n-        self.special_derives.get(&expn_id).map_or(false, |m| m.contains(markers))\n-    }\n-\n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         let _prof_timer ="}, {"sha": "0fbd6b0e5d3062b642549a83ac0b4b45cf2ad65a", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -14,7 +14,6 @@ use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::StabilityLevel;\n use syntax::edition::Edition;\n-use syntax::expand::SpecialDerives;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n use syntax::print::pprust;\n@@ -255,12 +254,12 @@ impl<'a> base::Resolver for Resolver<'a> {\n         }\n     }\n \n-    fn has_derives(&self, expn_id: ExpnId, derives: SpecialDerives) -> bool {\n-        self.has_derives(expn_id, derives)\n+    fn has_derive_copy(&self, expn_id: ExpnId) -> bool {\n+        self.containers_deriving_copy.contains(&expn_id)\n     }\n \n-    fn add_derives(&mut self, expn_id: ExpnId, derives: SpecialDerives) {\n-        *self.special_derives.entry(expn_id).or_default() |= derives;\n+    fn add_derive_copy(&mut self, expn_id: ExpnId) {\n+        self.containers_deriving_copy.insert(expn_id);\n     }\n }\n "}, {"sha": "af892bf8179f2106eaeac7dd2cf3d687f0d4e8b7", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -553,7 +553,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn check_for_cast(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr,\n         checked_ty: Ty<'tcx>,\n         expected_ty: Ty<'tcx>,"}, {"sha": "81e4bb6f2ad8bbb988a94aa24050c362869e24c5", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -583,7 +583,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     assert!(e_ty.is_unit());\n                     let ty = coerce.expected_ty();\n-                    coerce.coerce_forced_unit(self, &cause, &mut |err| {\n+                    coerce.coerce_forced_unit(self, &cause, &mut |mut err| {\n+                        self.suggest_mismatched_types_on_tail(\n+                            &mut err,\n+                            expr,\n+                            ty,\n+                            e_ty,\n+                            cause.span,\n+                            target_id,\n+                        );\n                         let val = match ty.kind {\n                             ty::Bool => \"true\",\n                             ty::Char => \"'a'\","}, {"sha": "fcafb0e88da49de3951c3cb835e0e549ea661583", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1267,11 +1267,6 @@ fn check_fn<'a, 'tcx>(\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n         if panic_impl_did == fcx.tcx.hir().local_def_id(fn_id) {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n-                // at this point we don't care if there are duplicate handlers or if the handler has\n-                // the wrong signature as this value we'll be used when writing metadata and that\n-                // only happens if compilation succeeded\n-                fcx.tcx.sess.has_panic_handler.try_set_same(true);\n-\n                 if declared_ret_ty.kind != ty::Never {\n                     fcx.tcx.sess.span_err(\n                         decl.output.span(),\n@@ -4250,7 +4245,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// - Possible missing return type if the return type is the default, and not `fn main()`.\n     pub fn suggest_mismatched_types_on_tail(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         expr: &'tcx hir::Expr,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -4277,7 +4272,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ```\n     fn suggest_fn_call(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -4390,7 +4385,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn suggest_ref_or_into(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -4458,7 +4453,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// in the heap by calling `Box::new()`.\n     fn suggest_boxing_when_appropriate(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -4502,7 +4497,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// it suggests adding a semicolon.\n     fn suggest_missing_semicolon(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         expression: &'tcx hir::Expr,\n         expected: Ty<'tcx>,\n         cause_span: Span,\n@@ -4541,7 +4536,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// type.\n     fn suggest_missing_return_type(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         fn_decl: &hir::FnDecl,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -4607,7 +4602,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// `.await` to the tail of the expression.\n     fn suggest_missing_await(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,"}, {"sha": "88ba13f2796a003a29eabfd0e59dbc311450c3e2", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -11,7 +11,7 @@ use std::fmt::Display;\n use std::io;\n use std::io::prelude::*;\n \n-use syntax::source_map::{SourceMap, FilePathMapping};\n+use syntax::source_map::SourceMap;\n use syntax::parse::lexer;\n use syntax::parse::token::{self, Token};\n use syntax::sess::ParseSess;\n@@ -33,7 +33,7 @@ pub fn render_with_highlighting(\n                class, tooltip).unwrap();\n     }\n \n-    let sess = ParseSess::new(FilePathMapping::empty());\n+    let sess = ParseSess::with_silent_emitter();\n     let fm = sess.source_map().new_source_file(\n         FileName::Custom(String::from(\"rustdoc-highlighting\")),\n         src.to_owned(),"}, {"sha": "03b30fda745f9bbee5c043d3c31f1c7431818f6c", "filename": "src/libsyntax/expand/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fexpand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fexpand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fexpand%2Fmod.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -5,16 +5,6 @@ use syntax_pos::symbol::sym;\n \n pub mod allocator;\n \n-bitflags::bitflags! {\n-    /// Built-in derives that need some extra tracking beyond the usual macro functionality.\n-    #[derive(Default)]\n-    pub struct SpecialDerives: u8 {\n-        const PARTIAL_EQ = 1 << 0;\n-        const EQ         = 1 << 1;\n-        const COPY       = 1 << 2;\n-    }\n-}\n-\n pub fn is_proc_macro_attr(attr: &Attribute) -> bool {\n     [sym::proc_macro, sym::proc_macro_attribute, sym::proc_macro_derive]\n         .iter().any(|kind| attr.check_name(*kind))"}, {"sha": "7652c730e51b6bcee39ce4513df1de921bea7429", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -209,12 +209,12 @@ impl TokenCursor {\n         loop {\n             let tree = if !self.frame.open_delim {\n                 self.frame.open_delim = true;\n-                TokenTree::open_tt(self.frame.span.open, self.frame.delim)\n+                TokenTree::open_tt(self.frame.span, self.frame.delim)\n             } else if let Some(tree) = self.frame.tree_cursor.next() {\n                 tree\n             } else if !self.frame.close_delim {\n                 self.frame.close_delim = true;\n-                TokenTree::close_tt(self.frame.span.close, self.frame.delim)\n+                TokenTree::close_tt(self.frame.span, self.frame.delim)\n             } else if let Some(frame) = self.stack.pop() {\n                 self.frame = frame;\n                 continue"}, {"sha": "453ef5963bea5f1b28f00ea524f8e843535bf237", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -360,11 +360,11 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn maybe_annotate_with_ascription(\n-        &self,\n+        &mut self,\n         err: &mut DiagnosticBuilder<'_>,\n         maybe_expected_semicolon: bool,\n     ) {\n-        if let Some((sp, likely_path)) = self.last_type_ascription {\n+        if let Some((sp, likely_path)) = self.last_type_ascription.take() {\n             let sm = self.sess.source_map();\n             let next_pos = sm.lookup_char_pos(self.token.span.lo());\n             let op_pos = sm.lookup_char_pos(sp.hi());\n@@ -1088,8 +1088,15 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn could_ascription_be_path(&self, node: &ast::ExprKind) -> bool {\n-        self.token.is_ident() &&\n-            if let ast::ExprKind::Path(..) = node { true } else { false } &&\n+        (self.token == token::Lt && // `foo:<bar`, likely a typoed turbofish.\n+            self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n+        ) ||\n+            self.token.is_ident() &&\n+            match node {\n+                // `foo::` \u2192 `foo:` or `foo.bar::` \u2192 `foo.bar:`\n+                ast::ExprKind::Path(..) | ast::ExprKind::Field(..) => true,\n+                _ => false,\n+            } &&\n             !self.token.is_reserved_ident() &&           // v `foo:bar(baz)`\n             self.look_ahead(1, |t| t == &token::OpenDelim(token::Paren)) ||\n             self.look_ahead(1, |t| t == &token::Lt) &&     // `foo:bar<baz`"}, {"sha": "12c530f3cbba09a08770acb32f4d60a20e3a59f4", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -397,6 +397,7 @@ impl<'a> Parser<'a> {\n             }\n             let stmt = match self.parse_full_stmt(false) {\n                 Err(mut err) => {\n+                    self.maybe_annotate_with_ascription(&mut err, false);\n                     err.emit();\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n                     Some(Stmt {"}, {"sha": "30f8c56a05619c85c4d231ed0b9a70121baf1cc5", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -6,7 +6,7 @@ use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n use crate::source_map::{SourceMap, FilePathMapping};\n use crate::feature_gate::UnstableFeatures;\n \n-use errors::{Applicability, Handler, ColorConfig, DiagnosticBuilder};\n+use errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock, Once};\n use syntax_pos::{Symbol, Span, MultiSpan};\n@@ -107,6 +107,12 @@ impl ParseSess {\n         }\n     }\n \n+    pub fn with_silent_emitter() -> Self {\n+        let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+        let handler = Handler::with_emitter(false, None, Box::new(SilentEmitter));\n+        ParseSess::with_span_handler(handler, cm)\n+    }\n+\n     #[inline]\n     pub fn source_map(&self) -> &SourceMap {\n         &self.source_map"}, {"sha": "7e0582797c7ac6d1b762fd9186175bd22b3fdf20", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -15,7 +15,7 @@\n \n use crate::parse::token::{self, DelimToken, Token, TokenKind};\n \n-use syntax_pos::{BytePos, Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP};\n #[cfg(target_arch = \"x86_64\")]\n use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n@@ -110,23 +110,13 @@ impl TokenTree {\n     }\n \n     /// Returns the opening delimiter as a token tree.\n-    pub fn open_tt(span: Span, delim: DelimToken) -> TokenTree {\n-        let open_span = if span.is_dummy() {\n-            span\n-        } else {\n-            span.with_hi(span.lo() + BytePos(delim.len() as u32))\n-        };\n-        TokenTree::token(token::OpenDelim(delim), open_span)\n+    pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {\n+        TokenTree::token(token::OpenDelim(delim), span.open)\n     }\n \n     /// Returns the closing delimiter as a token tree.\n-    pub fn close_tt(span: Span, delim: DelimToken) -> TokenTree {\n-        let close_span = if span.is_dummy() {\n-            span\n-        } else {\n-            span.with_lo(span.hi() - BytePos(delim.len() as u32))\n-        };\n-        TokenTree::token(token::CloseDelim(delim), close_span)\n+    pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {\n+        TokenTree::token(token::CloseDelim(delim), span.close)\n     }\n }\n "}, {"sha": "6cc7b7da53b266f3cbd031bd1323bc1519d7625c", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -13,7 +13,6 @@ use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax::{ThinVec, MACRO_ARGUMENTS};\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n-crate use syntax::expand::SpecialDerives;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n@@ -860,8 +859,8 @@ pub trait Resolver {\n \n     fn check_unused_macros(&mut self);\n \n-    fn has_derives(&self, expn_id: ExpnId, derives: SpecialDerives) -> bool;\n-    fn add_derives(&mut self, expn_id: ExpnId, derives: SpecialDerives);\n+    fn has_derive_copy(&self, expn_id: ExpnId) -> bool;\n+    fn add_derive_copy(&mut self, expn_id: ExpnId);\n }\n \n #[derive(Clone)]"}, {"sha": "da70fdbb0f308789cad3f5c3eeac9e7af2eb032c", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -432,7 +432,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     // can be in scope for all code produced by that container's expansion.\n                     item.visit_with(&mut MarkAttrs(&helper_attrs));\n                     if has_copy {\n-                        self.cx.resolver.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n+                        self.cx.resolver.add_derive_copy(invoc.expansion_data.id);\n                     }\n \n                     let mut derive_placeholders = Vec::with_capacity(derives.len());"}, {"sha": "06e0cde3ad88c345c5888627ee4abaa028e7d144", "filename": "src/libsyntax_expand/mbe.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -13,7 +13,7 @@ use syntax::ast;\n use syntax::parse::token::{self, Token, TokenKind};\n use syntax::tokenstream::{DelimSpan};\n \n-use syntax_pos::{BytePos, Span};\n+use syntax_pos::Span;\n \n use rustc_data_structures::sync::Lrc;\n \n@@ -27,23 +27,13 @@ struct Delimited {\n \n impl Delimited {\n     /// Returns a `self::TokenTree` with a `Span` corresponding to the opening delimiter.\n-    fn open_tt(&self, span: Span) -> TokenTree {\n-        let open_span = if span.is_dummy() {\n-            span\n-        } else {\n-            span.with_hi(span.lo() + BytePos(self.delim.len() as u32))\n-        };\n-        TokenTree::token(token::OpenDelim(self.delim), open_span)\n+    fn open_tt(&self, span: DelimSpan) -> TokenTree {\n+        TokenTree::token(token::OpenDelim(self.delim), span.open)\n     }\n \n     /// Returns a `self::TokenTree` with a `Span` corresponding to the closing delimiter.\n-    fn close_tt(&self, span: Span) -> TokenTree {\n-        let close_span = if span.is_dummy() {\n-            span\n-        } else {\n-            span.with_lo(span.hi() - BytePos(self.delim.len() as u32))\n-        };\n-        TokenTree::token(token::CloseDelim(self.delim), close_span)\n+    fn close_tt(&self, span: DelimSpan) -> TokenTree {\n+        TokenTree::token(token::CloseDelim(self.delim), span.close)\n     }\n }\n \n@@ -138,10 +128,10 @@ impl TokenTree {\n             }\n             (&TokenTree::Delimited(span, ref delimed), _) => {\n                 if index == 0 {\n-                    return delimed.open_tt(span.open);\n+                    return delimed.open_tt(span);\n                 }\n                 if index == delimed.tts.len() + 1 {\n-                    return delimed.close_tt(span.close);\n+                    return delimed.close_tt(span);\n                 }\n                 delimed.tts[index - 1].clone()\n             }"}, {"sha": "bfdc4c52b5a5efb0767b98dd81f0bed310d8d108", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -566,7 +566,7 @@ impl FirstSets {\n                     }\n                     TokenTree::Delimited(span, ref delimited) => {\n                         build_recur(sets, &delimited.tts[..]);\n-                        first.replace_with(delimited.open_tt(span.open));\n+                        first.replace_with(delimited.open_tt(span));\n                     }\n                     TokenTree::Sequence(sp, ref seq_rep) => {\n                         let subfirst = build_recur(sets, &seq_rep.tts[..]);\n@@ -628,7 +628,7 @@ impl FirstSets {\n                     return first;\n                 }\n                 TokenTree::Delimited(span, ref delimited) => {\n-                    first.add_one(delimited.open_tt(span.open));\n+                    first.add_one(delimited.open_tt(span));\n                     return first;\n                 }\n                 TokenTree::Sequence(sp, ref seq_rep) => {\n@@ -826,7 +826,7 @@ fn check_matcher_core(\n                 }\n             }\n             TokenTree::Delimited(span, ref d) => {\n-                let my_suffix = TokenSet::singleton(d.close_tt(span.close));\n+                let my_suffix = TokenSet::singleton(d.close_tt(span));\n                 check_matcher_core(sess, features, attrs, first_sets, &d.tts, &my_suffix);\n                 // don't track non NT tokens\n                 last.replace_with_irrelevant();"}, {"sha": "c056d03614d00525683ebe2b035e97fb9055255d", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::expand::SpecialDerives;\n use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n@@ -37,7 +36,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n                 ItemKind::Struct(_, Generics { ref params, .. }) |\n                 ItemKind::Enum(_, Generics { ref params, .. }) => {\n                     let container_id = cx.current_expansion.id.expn_data().parent;\n-                    if cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n+                    if cx.resolver.has_derive_copy(container_id) &&\n                         !params.iter().any(|param| match param.kind {\n                             ast::GenericParamKind::Type { .. } => true,\n                             _ => false,"}, {"sha": "41189de7fa213e60577a7038dc7ea5f119babdba", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Ident, Expr, MetaItem, GenericArg};\n-use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax_expand::base::{Annotatable, ExtCtxt};\n@@ -14,8 +13,6 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n                           push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.expn_data().parent, SpecialDerives::EQ);\n-\n     let inline = cx.meta_word(span, sym::inline);\n     let hidden = syntax::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = syntax::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);"}, {"sha": "19562e350ddb7bddcc2c53338478d2184fa02c07", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{BinOpKind, Expr, MetaItem};\n-use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_expand::base::{Annotatable, ExtCtxt};\n@@ -14,8 +13,6 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n                                   mitem: &MetaItem,\n                                   item: &Annotatable,\n                                   push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.expn_data().parent, SpecialDerives::PARTIAL_EQ);\n-\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n     fn cs_op(cx: &mut ExtCtxt<'_>,"}, {"sha": "2e5ae235893cb4dc37e9dd3e1a44efee50f56ca2", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -186,7 +186,6 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n-use syntax::expand::SpecialDerives;\n use syntax::source_map::respan;\n use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n@@ -427,10 +426,8 @@ impl<'a> TraitDef<'a> {\n                     }\n                 };\n                 let container_id = cx.current_expansion.id.expn_data().parent;\n-                let is_always_copy =\n-                    cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n-                    has_no_type_params;\n-                let use_temporaries = is_packed && is_always_copy;\n+                let always_copy = has_no_type_params && cx.resolver.has_derive_copy(container_id);\n+                let use_temporaries = is_packed && always_copy;\n \n                 let newitem = match item.kind {\n                     ast::ItemKind::Struct(ref struct_def, ref generics) => {"}, {"sha": "3c7f80aa399bf84e9e6df13baca1b6a065c3c4c3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -374,10 +374,12 @@ impl<'a, 'b> Context<'a, 'b> {\n                                 format!(\"are {} arguments\", count)\n                             },\n                         ));\n-                        e.span_label(\n-                            self.args[pos].span,\n-                            \"this parameter corresponds to the precision flag\",\n-                        );\n+                        if let Some(arg) = self.args.get(pos) {\n+                            e.span_label(\n+                                arg.span,\n+                                \"this parameter corresponds to the precision flag\",\n+                            );\n+                        }\n                         zero_based_note = true;\n                     }\n                     _ => {}"}, {"sha": "fcbb189c1117bb3a3e64a6a382e41cb4dfea225f", "filename": "src/test/mir-opt/graphviz.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -7,14 +7,14 @@ fn main() {}\n \n // END RUST SOURCE\n // START rustc.main.mir_map.0.dot\n-// digraph Mir_0_12 { // The name here MUST be an ASCII identifier.\n+// digraph Mir_0_3 { // The name here MUST be an ASCII identifier.\n //     graph [fontname=\"monospace\"];\n //     node [fontname=\"monospace\"];\n //     edge [fontname=\"monospace\"];\n //     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-//     bb0__0_12 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n-//     bb1__0_12 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n-//     bb2__0_12 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n-//     bb0__0_12 -> bb2__0_12 [label=\"\"];\n+//     bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n+//     bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n+//     bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n+//     bb0__0_3 -> bb2__0_3 [label=\"\"];\n // }\n // END rustc.main.mir_map.0.dot"}, {"sha": "491130b7c5d32937d65bef3f58afa5ed1cd8f140", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -20,7 +20,7 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(13), local_id: 31 }];\n+//     _3 = [closure@HirId { owner: DefIndex(4), local_id: 31 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "7c0259b643a630636e566afc2b4fe7dc2dc6a169", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -16,7 +16,7 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(13), local_id: 15 }];\n+//     _3 = [closure@HirId { owner: DefIndex(4), local_id: 15 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "96b848eb1d41cceb0f310a2b6788a5d2d3de190c", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -100,7 +100,7 @@ fn main() {\n // }\n // END rustc.main.EraseRegions.after.mir\n // START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(22), local_id: 72 }], _2: &i32) -> &i32 {\n+// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(13), local_id: 72 }], _2: &i32) -> &i32 {\n //     ...\n //     bb0: {\n //         Retag([fn entry] _1);"}, {"sha": "84c10028fd1f937806cc3266de6ea2af3ebf45fa", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -222,67 +222,3 @@ warning: could not parse code block as Rust code\n LL | ///     \\____/\n    |         ^^^^^^\n \n-error: unknown start of token: \\\n- --> <rustdoc-highlighting>:1:1\n-  |\n-1 | \\____/\n-  | ^\n-\n-error: unknown start of token: \\\n- --> <rustdoc-highlighting>:1:1\n-  |\n-1 | \\_\n-  | ^\n-\n-error: unknown start of token: \\\n- --> <rustdoc-highlighting>:1:1\n-  |\n-1 | \\_\n-  | ^\n-\n-error: unknown start of token: `\n- --> <rustdoc-highlighting>:1:1\n-  |\n-1 | ```\n-  | ^\n-  |\n-help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n-  |\n-1 | '``\n-  | ^\n-\n-error: unknown start of token: \\\n- --> <rustdoc-highlighting>:2:1\n-  |\n-2 | \\_\n-  | ^\n-\n-error: unknown start of token: \\\n- --> <rustdoc-highlighting>:1:1\n-  |\n-1 | \\_\n-  | ^\n-\n-error: unknown start of token: \\\n- --> <rustdoc-highlighting>:1:1\n-  |\n-1 | \\_\n-  | ^\n-\n-error: unknown start of token: `\n- --> <rustdoc-highlighting>:3:30\n-  |\n-3 |    |     ^^^^^^ did you mean `baz::foobar`?\n-  |                              ^\n-  |\n-help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n-  |\n-3 |    |     ^^^^^^ did you mean 'baz::foobar`?\n-  |                              ^\n-\n-error: unknown start of token: \\\n- --> <rustdoc-highlighting>:1:1\n-  |\n-1 | \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n-  | ^\n-"}, {"sha": "f5053f6a1c0c8ee6f61ce484a3f653b020d2f332", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,8 +4,11 @@ error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::op\n LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n    |    --------------                ------ required by this bound in `is_iterator_of`\n ...\n+LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n+   |                 - this type parameter\n+...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter `T`\n    |\n    = note: expected type `std::option::Option<T>`\n               found type `T`"}, {"sha": "326b84470d622063bf0a52969f472c513edd325c", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -5,7 +5,10 @@ LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             - type in trait\n ...\n LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n-   |                              ^ expected type parameter, found a different type parameter\n+   |        -       -             ^ expected type parameter `F`, found type parameter `G`\n+   |        |       |\n+   |        |       found type parameter\n+   |        expected type parameter\n    |\n    = note: expected type `fn(&E, F) -> F`\n               found type `fn(&E, G) -> G`"}, {"sha": "a0b0a8fb98594059f62e4bfb10ec767103a28e78", "filename": "src/test/ui/if/ifmt-bad-arg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -86,4 +86,9 @@ tenth number: {}\",\n     println!(\"{:foo}\", 1); //~ ERROR unknown format trait `foo`\n     println!(\"{5} {:4$} {6:7$}\", 1);\n     //~^ ERROR invalid reference to positional arguments 4, 5, 6 and 7 (there is 1 argument)\n+\n+    // We used to ICE here because we tried to unconditionally access the first argument, which\n+    // doesn't exist.\n+    println!(\"{:.*}\");\n+    //~^ ERROR 2 positional arguments in format string, but no arguments were given\n }"}, {"sha": "11dcc3a6d232eb2ae76f12a0e9781046e7c7505a", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -285,6 +285,17 @@ LL |     println!(\"{5} {:4$} {6:7$}\", 1);\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n+error: 2 positional arguments in format string, but no arguments were given\n+  --> $DIR/ifmt-bad-arg.rs:92:15\n+   |\n+LL |     println!(\"{:.*}\");\n+   |               ^^--^\n+   |                 |\n+   |                 this precision flag adds an extra required argument at position 0, which is why there are 2 arguments expected\n+   |\n+   = note: positional arguments are zero-based\n+   = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n+\n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32\n    |\n@@ -303,6 +314,6 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    = note: expected type `&usize`\n               found type `&{float}`\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 36 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "7cb4677a2b199c6970143fde8d39dffaa0897b7a", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -5,7 +5,9 @@ LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n    |                                -- type in trait\n ...\n LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n-   |                                ^^^^^^^^^^^ expected type parameter, found a different type parameter\n+   |            -                   ^^^^^^^^^^^ expected type parameter `B`, found type parameter `impl Debug`\n+   |            |\n+   |            expected type parameter\n    |\n    = note: expected type `fn(&(), &B, &impl Debug)`\n               found type `fn(&(), &impl Debug, &B)`"}, {"sha": "ae20a5aa88388e42da92fdadc7e69c9c0a9b0b52", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -2,9 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/universal-mismatched-type.rs:4:5\n    |\n LL | fn foo(x: impl Debug) -> String {\n-   |                          ------ expected `std::string::String` because of return type\n+   |           ----------     ------ expected `std::string::String` because of return type\n+   |           |\n+   |           this type parameter\n LL |     x\n-   |     ^ expected struct `std::string::String`, found type parameter\n+   |     ^ expected struct `std::string::String`, found type parameter `impl Debug`\n    |\n    = note: expected type `std::string::String`\n               found type `impl Debug`"}, {"sha": "f540d319a279756332781ca4df13686b90974bfd", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,11 +1,16 @@\n error[E0308]: mismatched types\n   --> $DIR/universal-two-impl-traits.rs:5:9\n    |\n+LL | fn foo(x: impl Debug, y: impl Debug) -> String {\n+   |           ----------     ---------- found type parameter\n+   |           |\n+   |           expected type parameter\n+LL |     let mut a = x;\n LL |     a = y;\n-   |         ^ expected type parameter, found a different type parameter\n+   |         ^ expected type parameter `impl Debug`, found a different type parameter `impl Debug`\n    |\n-   = note: expected type `impl Debug` (type parameter)\n-              found type `impl Debug` (type parameter)\n+   = note: expected type `impl Debug` (type parameter `impl Debug`)\n+              found type `impl Debug` (type parameter `impl Debug`)\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "862a31b44653726fe59e7ac8e187ea54ec1da1cd", "filename": "src/test/ui/imports/import-prefix-macro-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -2,7 +2,7 @@ error: expected one of `::`, `;`, or `as`, found `{`\n   --> $DIR/import-prefix-macro-1.rs:11:27\n    |\n LL |     ($p: path) => (use $p {S, Z});\n-   |                           ^ expected one of `::`, `;`, or `as` here\n+   |                           ^^^^^^ expected one of `::`, `;`, or `as` here\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation"}, {"sha": "67721356208c0cf1bb8911929352c26d5429f305", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13853.rs:14:9\n    |\n LL |     fn nodes<'a, I: Iterator<Item=&'a N>>(&self) -> I\n-   |                                                     - expected `I` because of return type\n+   |                  - this type parameter              - expected `I` because of return type\n ...\n LL |         self.iter()\n-   |         ^^^^^^^^^^^ expected type parameter, found struct `std::slice::Iter`\n+   |         ^^^^^^^^^^^ expected type parameter `I`, found struct `std::slice::Iter`\n    |\n    = note: expected type `I`\n               found type `std::slice::Iter<'_, N>`"}, {"sha": "40093b13edfe092aa3b7ee3ea1effdc2192ef254", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,8 +1,10 @@\n error[E0053]: method `call` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:6:3\n    |\n+LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n+   |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n    = note: expected type `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&Foo, (T,))`\n@@ -12,8 +14,10 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:12:3\n    |\n+LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n+   |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n    = note: expected type `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&mut Foo, (T,))`\n@@ -23,8 +27,11 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:20:3\n    |\n+LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n+   |          - this type parameter\n+...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n    = note: expected type `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(Foo, (T,))`"}, {"sha": "ace5b5f72fc62bef8e0caaff64992c98c7266db5", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -5,7 +5,7 @@ LL | trait Trait: Sized {\n    | ------------------ required by `Trait`\n ...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found associated type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected type `T`\n               found type `<<T as Trait>::A as MultiDispatch<i32>>::O`"}, {"sha": "cc52dab02459c6861db56c0383f5e4f5c8ec29a6", "filename": "src/test/ui/issues/issue-2951.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ fn foo<T, U>(x: T, y: U) {\n     //~^  ERROR mismatched types\n     //~| expected type `T`\n     //~| found type `U`\n-    //~| expected type parameter, found a different type parameter\n+    //~| expected type parameter `T`, found type parameter `U`\n }\n \n fn main() {"}, {"sha": "414571752904c29944706a3561678e9b14cb0599", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,8 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-2951.rs:3:10\n    |\n+LL | fn foo<T, U>(x: T, y: U) {\n+   |        -  - found type parameter\n+   |        |\n+   |        expected type parameter\n+LL |     let mut xx = x;\n LL |     xx = y;\n-   |          ^ expected type parameter, found a different type parameter\n+   |          ^ expected type parameter `T`, found type parameter `U`\n    |\n    = note: expected type `T`\n               found type `U`"}, {"sha": "47aa8e17a304bf07cea3507facc065ea3e17112b", "filename": "src/test/ui/issues/issue-39848.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -2,7 +2,7 @@ error: expected `{`, found `foo`\n   --> $DIR/issue-39848.rs:8:19\n    |\n LL |         if $tgt.has_$field() {}\n-   |         --                 - help: try placing this code inside a block: `{ ) }`\n+   |         --                -- help: try placing this code inside a block: `{ () }`\n    |         |\n    |         this `if` statement has a condition, but no block\n ..."}, {"sha": "39eca93f88d1cf341055fd03c6d8a8e66a92657d", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,10 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-35030.rs:9:14\n    |\n+LL | impl<bool> Parser<bool> for bool {\n+   |      ---- this type parameter\n+LL |     fn parse(text: &str) -> Option<bool> {\n LL |         Some(true)\n-   |              ^^^^ expected type parameter, found bool\n+   |              ^^^^ expected type parameter `bool`, found bool\n    |\n-   = note: expected type `bool` (type parameter)\n+   = note: expected type `bool` (type parameter `bool`)\n               found type `bool` (bool)\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters"}, {"sha": "1f15ce5c212f474ea1987ab01f4e79769c0feb19", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) i32)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_argument_callee[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_argument_callee[317d]::test[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "610a4aed796c61e973cebf7e0549d3c713fb5cdc", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)),\n            ]\n@@ -21,7 +21,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_argument[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_argument[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-argument.rs:27:25"}, {"sha": "7c4d48cdf9fc2e14c9f3f6318e96684ae17db308", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |             let mut closure1 = || p = &y;\n    |                                ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:14 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:5 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -23,7 +23,7 @@ LL | |             closure1();\n LL | |         };\n    | |_________^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -44,7 +44,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_upvar_nested[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_upvar_nested[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-nested.rs:21:40"}, {"sha": "4446486808bca9622c636967265f89eb86befd4f", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |         let mut closure = || p = &y;\n    |                           ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -25,7 +25,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_upvar_ref[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_upvar_ref[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-ref.rs:23:35"}, {"sha": "43406c05a250045f111d2319d0e292bdb7cd4f04", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0:27 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:18 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:23 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:14 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "3bd3fc517cebe633e575ab6ebb022ca293ec5f78", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-ref.rs:45:9"}, {"sha": "5ebc22da0365f0fea3dacadc21dd8936e7e22cd7", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -8,7 +8,7 @@ LL | |\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:18 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:9 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n@@ -35,7 +35,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:17 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n+   = note: defining type: DefId(0:8 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n \n note: External requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n@@ -46,7 +46,7 @@ LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:20 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:11 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n@@ -65,7 +65,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:19 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n+   = note: defining type: DefId(0:10 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26"}, {"sha": "e93634aa3da50b5a8fa3e5d75a4911b9f06b868e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) u32>)),\n            ]\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:5"}, {"sha": "2127eab43448a69f1604a07793165810dd219065", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:5"}, {"sha": "9078877492f78bc59e3480f8283d50cd1ea9c3f0", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_val[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_val[317d]::test[0]) with substs []\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-val.rs:38:9"}, {"sha": "c5468e73cfa08ad7f0dda2ebae2d52f5e40df9c6", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0:23 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:14 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -28,5 +28,5 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:21 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:12 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n "}, {"sha": "bf43c89386547dd7eb626e037475445954ec711b", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "569bae999dd27617d4e056be76c234cfa198c7f0", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "0d622654c528f01d57c71e04b8b89b1fe8de4f82", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -11,7 +11,7 @@ LL | |         require(value);\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:23 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:14 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -32,7 +32,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:20 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n+   = note: defining type: DefId(0:11 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "00c56a796d1b6f9261a5b847cd4fd1a51b9c6431", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                ^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32,\n            ]\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "dd61023a15b01f112e9ed0386b4cb85746498789", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:22 ~ projection_no_regions_closure[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:13 ~ projection_no_regions_closure[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -25,7 +25,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:19 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:10 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -44,7 +44,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:26 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:17 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -64,7 +64,7 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:23 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n+   = note: defining type: DefId(0:14 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -75,7 +75,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:31 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:22 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -97,7 +97,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:27 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n+   = note: defining type: DefId(0:18 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -117,7 +117,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:36 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:27 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -139,7 +139,7 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:32 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n+   = note: defining type: DefId(0:23 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}, {"sha": "c5c0e106c8a9cbfc0cf053e81dd2d7aa03cc9532", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:28 ~ projection_one_region_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:19 ~ projection_one_region_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -38,7 +38,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(25), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(16), 'a))`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -57,7 +57,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:33 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -80,7 +80,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -111,7 +111,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -133,7 +133,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:25 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -145,7 +145,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -168,7 +168,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:39 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:30 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}, {"sha": "3fcf9731fc3a59ea189866daa0c76df90395d8bc", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:28 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:19 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -26,7 +26,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -48,7 +48,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:33 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -70,7 +70,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -93,7 +93,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -115,7 +115,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:25 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -127,7 +127,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -149,7 +149,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:39 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:30 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -161,7 +161,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:47 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -182,7 +182,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:44 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:35 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "9cc2e504e1009eb5a4f62db958a8b710cc8b4fda", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:28 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:19 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -23,7 +23,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -34,7 +34,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:33 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -54,7 +54,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -66,7 +66,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -86,7 +86,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:25 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -98,7 +98,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -118,7 +118,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:39 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:30 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -130,7 +130,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:47 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -149,7 +149,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:44 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:35 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "c4f65a29b8e3ecc1cc46d448abbb8d6af755d234", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:31 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:22 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:26 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -39,15 +39,15 @@ error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:26 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(27), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(18), 'a))`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:37 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:28 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -70,7 +70,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:32 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:23 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -91,7 +91,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -114,7 +114,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:29 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -127,7 +127,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:49 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:40 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -150,7 +150,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:44 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]) with substs [\n+   = note: defining type: DefId(0:35 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -163,7 +163,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:55 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:46 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -186,7 +186,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:50 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]) with substs [\n+   = note: defining type: DefId(0:41 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -199,7 +199,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:60 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:51 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -221,7 +221,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:56 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n+   = note: defining type: DefId(0:47 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -243,7 +243,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:65 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:56 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -265,7 +265,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:61 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n+   = note: defining type: DefId(0:52 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -277,7 +277,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:69 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:60 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -298,7 +298,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:66 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:57 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "fd8d8917c18781f2f3c96909dece3d438c43a3a0", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:20 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:11 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n@@ -21,7 +21,7 @@ LL | |     twice(cell, value, |a, b| invoke(a, b));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:18 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n+   = note: defining type: DefId(0:9 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n                T,\n            ]\n \n@@ -31,7 +31,7 @@ note: External requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:24 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:15 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n@@ -49,7 +49,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:21 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n+   = note: defining type: DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n                T,\n            ]\n \n@@ -59,7 +59,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:21 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(22), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(13), 'a))`...\n \n error: aborting due to previous error\n "}, {"sha": "7c8dc94eda98bcf6910dee2f5e8305270d330abd", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n    |\n-   = note: defining type: DefId(0:20 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:11 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -25,7 +25,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:17 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:8 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "97b84d1bdf801e6cb48a9602f755a98753d2a11f", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -11,7 +11,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:23 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:14 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                T,\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n@@ -32,7 +32,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n                T,\n            ]\n \n@@ -49,7 +49,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(21), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(12), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -64,7 +64,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:27 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:18 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -85,7 +85,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -101,7 +101,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:32 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:23 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -123,7 +123,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n+   = note: defining type: DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -139,7 +139,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(29), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(20), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n@@ -151,7 +151,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:37 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -173,7 +173,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:33 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n+   = note: defining type: DefId(0:24 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}, {"sha": "f935d58c6468848cb09f745cffce9bb9c620eb43", "filename": "src/test/ui/parser/issue-62973.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -36,13 +36,13 @@ LL | )\n    |\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/issue-62973.rs:8:1\n+  --> $DIR/issue-62973.rs:8:2\n    |\n LL | fn p() { match s { v, E { [) {) }\n    |          ----- while parsing this match expression\n LL | \n LL | \n-   | ^ expected one of `.`, `?`, `{`, or an operator here\n+   |  ^ expected one of `.`, `?`, `{`, or an operator here\n \n error: incorrect close delimiter: `)`\n   --> $DIR/issue-62973.rs:6:28"}, {"sha": "8e8087978a3666fc8d5a88e530fa13b2db263349", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -23,16 +23,16 @@ LL | fn i(n{...,f #\n    |        `..` must be at the end and cannot have a trailing comma\n \n error: expected `[`, found `}`\n-  --> $DIR/issue-63135.rs:3:15\n+  --> $DIR/issue-63135.rs:3:16\n    |\n LL | fn i(n{...,f #\n-   |               ^ expected `[`\n+   |                ^ expected `[`\n \n error: expected one of `:` or `|`, found `)`\n-  --> $DIR/issue-63135.rs:3:15\n+  --> $DIR/issue-63135.rs:3:16\n    |\n LL | fn i(n{...,f #\n-   |               ^ expected one of `:` or `|` here\n+   |                ^ expected one of `:` or `|` here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "023d1a3e039f8151c50c63ccc0140a334070ce0c", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! inner {\n    | ------------------ when calling this macro\n ...\n LL |     /// Outer\n-   |     ^ no rules expected this token in macro call\n+   |     ^^^^^^^^^ no rules expected this token in macro call\n \n error: aborting due to previous error\n "}, {"sha": "4f7c5eea1d18342ebfc3ab12940242f5d4e254ff", "filename": "src/test/ui/parser/missing_right_paren.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -0,0 +1,3 @@\n+// ignore-tidy-trailing-newlines\n+// error-pattern: aborting due to 2 previous errors\n+fn main((\u063c\n\\ No newline at end of file"}, {"sha": "fc75b031e76a82b2577f2fccb57b8d46dbe16992", "filename": "src/test/ui/parser/missing_right_paren.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -0,0 +1,17 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/missing_right_paren.rs:3:11\n+   |\n+LL | fn main((\u063c\n+   |        -- ^\n+   |        ||\n+   |        |un-closed delimiter\n+   |        un-closed delimiter\n+\n+error: expected one of `:` or `|`, found `)`\n+  --> $DIR/missing_right_paren.rs:3:11\n+   |\n+LL | fn main((\u063c\n+   |           ^ expected one of `:` or `|` here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "687d610baf8cf536c1c239f1e264238f13477c06", "filename": "src/test/ui/structs/struct-path-self-type-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -7,8 +7,13 @@ LL |         Self { inner: 1.5f32 };\n error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:15:20\n    |\n+LL | impl<T> Foo<T> {\n+   |      - expected type parameter\n+LL |     fn new<U>(u: U) -> Foo<U> {\n+   |            - found type parameter\n+...\n LL |             inner: u\n-   |                    ^ expected type parameter, found a different type parameter\n+   |                    ^ expected type parameter `T`, found type parameter `U`\n    |\n    = note: expected type `T`\n               found type `U`\n@@ -18,14 +23,18 @@ LL |             inner: u\n error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:13:9\n    |\n+LL |   impl<T> Foo<T> {\n+   |        - found type parameter\n LL |       fn new<U>(u: U) -> Foo<U> {\n-   |                          ------ expected `Foo<U>` because of return type\n+   |              -           ------ expected `Foo<U>` because of return type\n+   |              |\n+   |              expected type parameter\n LL | /         Self {\n LL | |\n LL | |             inner: u\n LL | |\n LL | |         }\n-   | |_________^ expected type parameter, found a different type parameter\n+   | |_________^ expected type parameter `U`, found type parameter `T`\n    |\n    = note: expected type `Foo<U>`\n               found type `Foo<T>`"}, {"sha": "693ed35cbc9c6f219a971fdc56976a45251f9733", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,4 +1,4 @@\n-error[E0071]: expected struct, variant or union type, found type parameter\n+error[E0071]: expected struct, variant or union type, found type parameter `Self`\n   --> $DIR/struct-path-self.rs:5:17\n    |\n LL |         let s = Self {};\n@@ -10,13 +10,13 @@ error[E0109]: type arguments are not allowed for this type\n LL |         let z = Self::<u8> {};\n    |                        ^^ type argument not allowed\n \n-error[E0071]: expected struct, variant or union type, found type parameter\n+error[E0071]: expected struct, variant or union type, found type parameter `Self`\n   --> $DIR/struct-path-self.rs:7:17\n    |\n LL |         let z = Self::<u8> {};\n    |                 ^^^^^^^^^^ not a struct\n \n-error[E0071]: expected struct, variant or union type, found type parameter\n+error[E0071]: expected struct, variant or union type, found type parameter `Self`\n   --> $DIR/struct-path-self.rs:11:13\n    |\n LL |             Self { .. } => {}"}, {"sha": "220fd1eebda465b4613a1062a2590e9e04621d6d", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -0,0 +1,5 @@\n+fn main() -> Result<(), ()> {\n+    vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n+    //~^ ERROR expected `::`, found `(`\n+    Ok(())\n+}"}, {"sha": "db793c84cf8b915edd0f83f8cb61d34c96e57a15", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -0,0 +1,13 @@\n+error: expected `::`, found `(`\n+  --> $DIR/type-ascription-instead-of-path-2.rs:2:55\n+   |\n+LL |     vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n+   |                                    -                  ^ expected `::`\n+   |                                    |\n+   |                                    help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e44e208f0ee41ca098687270656cb6164ab53ae", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,8 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:13:25\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+LL |     fn ts_variant() {\n LL |         Self::TSVariant(());\n-   |                         ^^ expected type parameter, found ()\n+   |                         ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -24,8 +27,11 @@ LL |         Self::<()>::TSVariant(());\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:17:31\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::<()>::TSVariant(());\n-   |                               ^^ expected type parameter, found ()\n+   |                               ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -47,8 +53,11 @@ LL |         Self::<()>::TSVariant::<()>(());\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:26:29\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::SVariant { v: () };\n-   |                             ^^ expected type parameter, found ()\n+   |                             ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -64,8 +73,11 @@ LL |         Self::SVariant::<()> { v: () };\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:28:35\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::SVariant::<()> { v: () };\n-   |                                   ^^ expected type parameter, found ()\n+   |                                   ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -81,8 +93,11 @@ LL |         Self::<()>::SVariant { v: () };\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:31:35\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::<()>::SVariant { v: () };\n-   |                                   ^^ expected type parameter, found ()\n+   |                                   ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -104,8 +119,11 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:34:41\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::<()>::SVariant::<()> { v: () };\n-   |                                         ^^ expected type parameter, found ()\n+   |                                         ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`"}, {"sha": "d4e3e93d06bc70fa6f5fa1d85afdaef8e3f52874", "filename": "src/test/ui/type/type-error-break-tail.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -0,0 +1,8 @@\n+fn loop_ending() -> i32 {\n+    loop {\n+        if false { break; } //~ ERROR mismatched types\n+        return 42;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e5297d9a596d862b8992fd432f33cd3f978ecfe2", "filename": "src/test/ui/type/type-error-break-tail.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-error-break-tail.rs:3:20\n+   |\n+LL | fn loop_ending() -> i32 {\n+   |                     --- expected `i32` because of return type\n+LL |     loop {\n+LL |         if false { break; }\n+   |                    ^^^^^\n+   |                    |\n+   |                    expected i32, found ()\n+   |                    help: give it a value of the expected type: `break 42`\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "825766463453ba5d574e6fda1fa0f11a56948849", "filename": "src/test/ui/type/type-parameter-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -6,7 +6,7 @@ fn foo<Foo, Bar>(x: Foo) -> Bar {\n //~^ ERROR mismatched types\n //~| expected type `Bar`\n //~| found type `Foo`\n-//~| expected type parameter, found a different type parameter\n+//~| expected type parameter `Bar`, found type parameter `Foo`\n }\n \n fn main() {}"}, {"sha": "78d6989a3363d846589402903695b58389277b6f", "filename": "src/test/ui/type/type-parameter-names.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -2,9 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/type-parameter-names.rs:5:5\n    |\n LL | fn foo<Foo, Bar>(x: Foo) -> Bar {\n-   |                             --- expected `Bar` because of return type\n+   |        ---  ---             --- expected `Bar` because of return type\n+   |        |    |\n+   |        |    expected type parameter\n+   |        found type parameter\n LL |     x\n-   |     ^ expected type parameter, found a different type parameter\n+   |     ^ expected type parameter `Bar`, found type parameter `Foo`\n    |\n    = note: expected type `Bar`\n               found type `Foo`"}, {"sha": "d2dce7006b763750ca1bbab57ce7269be8a9f0e3", "filename": "src/test/ui/type/type-params-in-different-spaces-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.rs?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -5,7 +5,7 @@ trait BrokenAdd: Copy + Add<Output=Self> {\n         *self + rhs //~  ERROR mismatched types\n                     //~| expected type `Self`\n                     //~| found type `T`\n-                    //~| expected type parameter, found a different type parameter\n+                    //~| expected type parameter `Self`, found type parameter `T`\n     }\n }\n "}, {"sha": "d2c6b7304ff3c1886ff59e275401ee647cdbbd7a", "filename": "src/test/ui/type/type-params-in-different-spaces-1.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,8 +1,16 @@\n error[E0308]: mismatched types\n   --> $DIR/type-params-in-different-spaces-1.rs:5:17\n    |\n-LL |         *self + rhs\n-   |                 ^^^ expected type parameter, found a different type parameter\n+LL | / trait BrokenAdd: Copy + Add<Output=Self> {\n+LL | |     fn broken_add<T>(&self, rhs: T) -> Self {\n+   | |                   - found type parameter\n+LL | |         *self + rhs\n+   | |                 ^^^ expected type parameter `Self`, found type parameter `T`\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_- expected type parameter\n    |\n    = note: expected type `Self`\n               found type `T`"}, {"sha": "ec5d6372792b33447060cf68c5663b7a63ea456e", "filename": "src/test/ui/type/type-params-in-different-spaces-3.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4931eaaa3d95189b30e90d3af9f0db17c41bbb0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr?ref=e4931eaaa3d95189b30e90d3af9f0db17c41bbb0", "patch": "@@ -1,10 +1,16 @@\n error[E0308]: mismatched types\n   --> $DIR/type-params-in-different-spaces-3.rs:3:9\n    |\n-LL |     fn test<X>(u: X) -> Self {\n-   |                         ---- expected `Self` because of return type\n-LL |         u\n-   |         ^ expected type parameter, found a different type parameter\n+LL | / trait Tr : Sized {\n+LL | |     fn test<X>(u: X) -> Self {\n+   | |             -           ---- expected `Self` because of return type\n+   | |             |\n+   | |             found type parameter\n+LL | |         u\n+   | |         ^ expected type parameter `Self`, found type parameter `X`\n+LL | |     }\n+LL | | }\n+   | |_- expected type parameter\n    |\n    = note: expected type `Self`\n               found type `X`"}]}