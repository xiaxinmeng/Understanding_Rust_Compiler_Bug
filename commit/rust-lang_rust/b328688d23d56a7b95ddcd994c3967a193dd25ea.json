{"sha": "b328688d23d56a7b95ddcd994c3967a193dd25ea", "node_id": "C_kwDOAAsO6NoAKGIzMjg2ODhkMjNkNTZhN2I5NWRkY2Q5OTRjMzk2N2ExOTNkZDI1ZWE", "commit": {"author": {"name": "Jon Gjengset", "email": "jongje@amazon.com", "date": "2022-03-08T00:59:10Z"}, "committer": {"name": "Jon Gjengset", "email": "jongje@amazon.com", "date": "2022-03-08T01:29:16Z"}, "message": "Statically compile libstdc++ everywhere if asked\n\nPR #93918 made it so that `-static-libstdc++` was only set in one place,\nand was only set during linking, but accidentally also made it so that\nit is no longer passed when building LLD or sanitizers, only when\nbuilding LLVM itself. This moves the logic for setting\n`-static-libstdc++` in the linker flags back to `configure_cmake` so\nthat it takes effect for all CMake invocations in `native.rs`.\n\nAs a side-effect, this also causes libstdc++ to be statically compiled\ninto sanitizers and LLD if `llvm-tools-enabled` is set but\n`llvm-static-stdcpp` is not, even though previously it was only linked\nstatically if `llvm-static-stdcpp` was set explicitly. But that seems\nmore like the expected behavior anyway.", "tree": {"sha": "f6073e7b1006aad2569f5c969f8f00d86c9f6046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6073e7b1006aad2569f5c969f8f00d86c9f6046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b328688d23d56a7b95ddcd994c3967a193dd25ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b328688d23d56a7b95ddcd994c3967a193dd25ea", "html_url": "https://github.com/rust-lang/rust/commit/b328688d23d56a7b95ddcd994c3967a193dd25ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b328688d23d56a7b95ddcd994c3967a193dd25ea/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89adcc636f94d34a6fc90fa117e28ddf6be7b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/89adcc636f94d34a6fc90fa117e28ddf6be7b983", "html_url": "https://github.com/rust-lang/rust/commit/89adcc636f94d34a6fc90fa117e28ddf6be7b983"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0fe39defae85dee45bd886b7ef28fc602aa579ba", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b328688d23d56a7b95ddcd994c3967a193dd25ea/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b328688d23d56a7b95ddcd994c3967a193dd25ea/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=b328688d23d56a7b95ddcd994c3967a193dd25ea", "patch": "@@ -259,18 +259,6 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n-        // For distribution we want the LLVM tools to be *statically* linked to libstdc++.\n-        // We also do this if the user explicitly requested static libstdc++.\n-        if builder.config.llvm_tools_enabled || builder.config.llvm_static_stdcpp {\n-            if !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n-                if target.contains(\"apple\") {\n-                    ldflags.push_all(\"-static-libstdc++\");\n-                } else {\n-                    ldflags.push_all(\"-Wl,-Bsymbolic -static-libstdc++\");\n-                }\n-            }\n-        }\n-\n         if target.starts_with(\"riscv\") && !target.contains(\"freebsd\") {\n             // RISC-V GCC erroneously requires linking against\n             // `libatomic` when using 1-byte and 2-byte C++\n@@ -576,6 +564,18 @@ fn configure_cmake(\n         ldflags.push_all(&flags);\n     }\n \n+    // For distribution we want the LLVM tools to be *statically* linked to libstdc++.\n+    // We also do this if the user explicitly requested static libstdc++.\n+    if builder.config.llvm_tools_enabled || builder.config.llvm_static_stdcpp {\n+        if !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n+            if target.contains(\"apple\") {\n+                ldflags.push_all(\"-static-libstdc++\");\n+            } else {\n+                ldflags.push_all(\"-Wl,-Bsymbolic -static-libstdc++\");\n+            }\n+        }\n+    }\n+\n     cfg.define(\"CMAKE_SHARED_LINKER_FLAGS\", &ldflags.shared);\n     cfg.define(\"CMAKE_MODULE_LINKER_FLAGS\", &ldflags.module);\n     cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", &ldflags.exe);"}]}