{"sha": "16952cce01578e935aff02d12ab2d95821d7aed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OTUyY2NlMDE1NzhlOTM1YWZmMDJkMTJhYjJkOTU4MjFkN2FlZDI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-14T05:12:48Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:30Z"}, "message": "Add Body back as field of FunctionCx, but under a different lifetime", "tree": {"sha": "99481a2bb9024e2f7f6aaa246e69618b62eec1e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99481a2bb9024e2f7f6aaa246e69618b62eec1e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16952cce01578e935aff02d12ab2d95821d7aed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16952cce01578e935aff02d12ab2d95821d7aed2", "html_url": "https://github.com/rust-lang/rust/commit/16952cce01578e935aff02d12ab2d95821d7aed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16952cce01578e935aff02d12ab2d95821d7aed2/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f", "html_url": "https://github.com/rust-lang/rust/commit/3d68f5f3e775b5854c40e1ad1433a8a7c8c53e1f"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "69e26cf3b43a12695e4c93ec6e3906b71bfd6243", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -16,9 +16,9 @@ use syntax_pos::DUMMY_SP;\n use super::FunctionCx;\n use crate::traits::*;\n \n-pub fn non_ssa_locals<'b, 'a: 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n-    fx: &mut FunctionCx<'a, 'tcx, Bx>,\n-    mir: &'b mut BodyCache<&'a Body<'tcx>>,\n+pub fn non_ssa_locals<'a, 'b, 'c, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    fx: &mut FunctionCx<'a, 'b, 'tcx, Bx>,\n+    mir: &'c mut BodyCache<&'b Body<'tcx>>,\n ) -> BitSet<mir::Local> {\n     let mut analyzer = LocalAnalyzer::new(fx, mir);\n \n@@ -58,8 +58,7 @@ pub fn non_ssa_locals<'b, 'a: 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n }\n \n struct LocalAnalyzer<'mir, 'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n-    fx: &'mir FunctionCx<'a, 'tcx, Bx>,\n-    mir: &'b Body<'tcx>,\n+    fx: &'mir FunctionCx<'a, 'b, 'tcx, Bx>,\n     dominators: Dominators<mir::BasicBlock>,\n     non_ssa_locals: BitSet<mir::Local>,\n     // The location of the first visited direct assignment to each\n@@ -68,14 +67,12 @@ struct LocalAnalyzer<'mir, 'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n }\n \n impl<'mir, 'a, 'b, 'c, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'b, 'tcx, Bx> {\n-    fn new(fx: &'mir FunctionCx<'a, 'tcx, Bx>, mir: &'c mut BodyCache<&'b Body<'tcx>>) -> Self {\n+    fn new(fx: &'mir FunctionCx<'a, 'b, 'tcx, Bx>, mir: &'c mut BodyCache<&'b Body<'tcx>>) -> Self {\n         let invalid_location =\n             mir::BasicBlock::new(mir.basic_blocks().len()).start_location();\n         let dominators = mir.dominators();\n-        let body = mir.body();\n         let mut analyzer = LocalAnalyzer {\n             fx,\n-            mir: body,\n             dominators,\n             non_ssa_locals: BitSet::new_empty(mir.local_decls.len()),\n             first_assignment: IndexVec::from_elem(invalid_location, &mir.local_decls)\n@@ -91,7 +88,7 @@ impl<'mir, 'a, 'b, 'c, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, '\n \n     fn first_assignment(&self, local: mir::Local) -> Option<Location> {\n         let location = self.first_assignment[local];\n-        if location.block.index() < self.mir.basic_blocks().len() {\n+        if location.block.index() < self.fx.mir.basic_blocks().len() {\n             Some(location)\n         } else {\n             None\n@@ -134,7 +131,7 @@ impl<'mir, 'a, 'b, 'c, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, '\n             };\n             if is_consume {\n                 let base_ty =\n-                    mir::Place::ty_from(place_ref.base, proj_base, self.mir, cx.tcx());\n+                    mir::Place::ty_from(place_ref.base, proj_base, self.fx.mir, cx.tcx());\n                 let base_ty = self.fx.monomorphize(&base_ty);\n \n                 // ZSTs don't require any actual memory access.\n@@ -143,7 +140,7 @@ impl<'mir, 'a, 'b, 'c, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, '\n                     .ty;\n                 let elem_ty = self.fx.monomorphize(&elem_ty);\n                 let span = if let mir::PlaceBase::Local(index) = place_ref.base {\n-                    self.mir.local_decls[*index].source_info.span\n+                    self.fx.mir.local_decls[*index].source_info.span\n                 } else {\n                     DUMMY_SP\n                 };\n@@ -247,8 +244,8 @@ impl<'mir, 'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n         if let Some(index) = place.as_local() {\n             self.assign(index, location);\n-            let decl_span = self.mir.local_decls[index].source_info.span;\n-            if !self.fx.rvalue_creates_operand(rvalue, decl_span, self.mir) {\n+            let decl_span = self.fx.mir.local_decls[index].source_info.span;\n+            if !self.fx.rvalue_creates_operand(rvalue, decl_span, self.fx.mir) {\n                 self.not_ssa(index);\n             }\n         } else {\n@@ -352,7 +349,7 @@ impl<'mir, 'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             }\n \n             PlaceContext::MutatingUse(MutatingUseContext::Drop) => {\n-                let ty = self.mir.local_decls[local].ty;\n+                let ty = self.fx.mir.local_decls[local].ty;\n                 let ty = self.fx.monomorphize(&ty);\n \n                 // Only need the place if we're actually dropping it."}, {"sha": "ba86576dd32b42260ca96326eb79b626ecfe6656", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -33,19 +33,19 @@ struct TerminatorCodegenHelper<'a, 'tcx> {\n impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n     /// Returns the associated funclet from `FunctionCx::funclets` for the\n     /// `funclet_bb` member if it is not `None`.\n-    fn funclet<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn funclet<'d, 'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n-    ) -> Option<&'c Bx::Funclet> {\n+        fx: &'d mut FunctionCx<'b, 'c, 'tcx, Bx>,\n+    ) -> Option<&'d Bx::Funclet> {\n         match self.funclet_bb {\n             Some(funcl) => fx.funclets[funcl].as_ref(),\n             None => None,\n         }\n     }\n \n-    fn lltarget<'b, 'c, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn lltarget<'b, 'c, 'd, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &'d mut FunctionCx<'b, 'c, 'tcx, Bx>,\n         mir: &Body<'tcx>,\n         target: mir::BasicBlock\n     ) -> (Bx::BasicBlock, bool) {\n@@ -64,9 +64,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n     }\n \n     /// Create a basic block.\n-    fn llblock<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn llblock<'d, 'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &'d mut FunctionCx<'b, 'c, 'tcx, Bx>,\n         mir: &Body<'tcx>,\n         target: mir::BasicBlock\n     ) -> Bx::BasicBlock {\n@@ -85,9 +85,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n         }\n     }\n \n-    fn funclet_br<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn funclet_br<'d, 'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &'d mut FunctionCx<'b, 'c, 'tcx, Bx>,\n         mir: &Body<'tcx>,\n         bx: &mut Bx,\n         target: mir::BasicBlock,\n@@ -104,9 +104,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n \n     /// Call `fn_ptr` of `fn_abi` with the arguments `llargs`, the optional\n     /// return destination `destination` and the cleanup function `cleanup`.\n-    fn do_call<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn do_call<'d, 'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &'d mut FunctionCx<'b, 'c, 'tcx, Bx>,\n         mir: &Body<'tcx>,\n         bx: &mut Bx,\n         fn_abi: FnAbi<'tcx, Ty<'tcx>>,\n@@ -175,11 +175,11 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n }\n \n /// Codegen implementations for some terminator variants.\n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     /// Generates code for a `Resume` terminator.\n-    fn codegen_resume_terminator<'b>(\n+    fn codegen_resume_terminator<'c>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'c, 'tcx>,\n         mut bx: Bx,\n     ) {\n         if let Some(funclet) = helper.funclet(self) {\n@@ -205,9 +205,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn codegen_switchint_terminator<'b>(\n+    fn codegen_switchint_terminator<'c>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'c, 'tcx>,\n         mir: &Body<'tcx>,\n         mut bx: Bx,\n         discr: &mir::Operand<'tcx>,\n@@ -321,9 +321,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n \n \n-    fn codegen_drop_terminator<'b>(\n+    fn codegen_drop_terminator<'c>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'c, 'tcx>,\n         mir: &Body<'tcx>,\n         mut bx: Bx,\n         location: &mir::Place<'tcx>,\n@@ -373,9 +373,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                        unwind);\n     }\n \n-    fn codegen_assert_terminator<'b>(\n+    fn codegen_assert_terminator<'c>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'c, 'tcx>,\n         mir: &Body<'tcx>,\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n@@ -453,9 +453,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, mir, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n-    fn codegen_call_terminator<'b>(\n+    fn codegen_call_terminator<'c>(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'c, 'tcx>,\n         mir: &Body<'tcx>,\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n@@ -794,7 +794,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n }\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     pub fn codegen_block(\n         &mut self,\n         bb: mir::BasicBlock,"}, {"sha": "71d0abf2bff80a8c3f078065c9691be99431d6df", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -9,7 +9,7 @@ use crate::mir::operand::OperandRef;\n \n use super::FunctionCx;\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     pub fn eval_mir_constant_to_operand(\n         &mut self,\n         bx: &mut Bx,"}, {"sha": "7a3cf699f58a46f733d94d1fdf609c57f16496af", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -18,10 +18,10 @@ use rustc::mir::traversal;\n use self::operand::{OperandRef, OperandValue};\n \n /// Master context for codegenning from MIR.\n-pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n+pub struct FunctionCx<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     instance: Instance<'tcx>,\n \n-//    mir: Option<&'a mut BodyCache<&'a mir::Body<'tcx>>>,\n+    mir: &'b mir::Body<'tcx>,\n \n     debug_context: Option<FunctionDebugContext<Bx::DIScope>>,\n \n@@ -79,7 +79,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     per_local_var_debug_info: Option<IndexVec<mir::Local, Vec<&'a mir::VarDebugInfo<'tcx>>>>,\n }\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n         where T: TypeFoldable<'tcx>\n     {\n@@ -159,7 +159,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let mut fx = FunctionCx {\n         instance,\n-//        mir: Some(mir),\n+        mir: mir.body(),\n         llfn,\n         fn_abi,\n         cx,\n@@ -318,9 +318,9 @@ fn create_funclets<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n /// Produces, for each argument, a `Value` pointing at the\n /// argument's value. As arguments are places, these are always\n /// indirect.\n-fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+fn arg_local_refs<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n-    fx: &FunctionCx<'a, 'tcx, Bx>,\n+    fx: &FunctionCx<'a, 'b, 'tcx, Bx>,\n     mir: &Body<'tcx>,\n     memory_locals: &BitSet<mir::Local>,\n ) -> Vec<LocalRef<'tcx, Bx::Value>> {"}, {"sha": "9c4bf14c833d5a6720d1c397f55232445f5fcdd9", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n     }\n }\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     fn maybe_codegen_consume_direct(\n         &mut self,\n         bx: &mut Bx,"}, {"sha": "50c7fabc225370cc9bd1f62097f0f89a27b3bbc2", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -435,7 +435,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     }\n }\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     pub fn codegen_place(\n         &mut self,\n         mir: &Body<'tcx>,"}, {"sha": "8a296b29de7a084a2f621291fab9a490218945b3", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -18,7 +18,7 @@ use syntax::source_map::{DUMMY_SP, Span};\n \n use std::{u128, i128};\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     pub fn codegen_rvalue(\n         &mut self,\n         mir: &Body<'tcx>,\n@@ -699,7 +699,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n }\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     pub fn rvalue_creates_operand(\n         &self,\n         rvalue: &mir::Rvalue<'tcx>,"}, {"sha": "05c88a316ff3737c88167494beca09505e6bd8a8", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16952cce01578e935aff02d12ab2d95821d7aed2/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=16952cce01578e935aff02d12ab2d95821d7aed2", "patch": "@@ -8,7 +8,7 @@ use crate::traits::*;\n \n use rustc_error_codes::*;\n \n-impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+impl<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'b, 'tcx, Bx> {\n     pub fn codegen_statement(\n         &mut self,\n         mir: &Body<'tcx>,"}]}