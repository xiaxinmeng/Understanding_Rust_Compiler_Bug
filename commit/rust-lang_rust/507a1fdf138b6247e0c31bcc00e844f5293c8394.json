{"sha": "507a1fdf138b6247e0c31bcc00e844f5293c8394", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwN2ExZmRmMTM4YjYyNDdlMGMzMWJjYzAwZTg0NGY1MjkzYzgzOTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-04T19:37:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-04T19:37:34Z"}, "message": "Always go through the expn_that_defined query.", "tree": {"sha": "c48c553766a0f11c1e53cb3843116c069930259a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c48c553766a0f11c1e53cb3843116c069930259a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507a1fdf138b6247e0c31bcc00e844f5293c8394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507a1fdf138b6247e0c31bcc00e844f5293c8394", "html_url": "https://github.com/rust-lang/rust/commit/507a1fdf138b6247e0c31bcc00e844f5293c8394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507a1fdf138b6247e0c31bcc00e844f5293c8394/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "835150e70288535bc57bb624792229b9dc94991d", "url": "https://api.github.com/repos/rust-lang/rust/commits/835150e70288535bc57bb624792229b9dc94991d", "html_url": "https://github.com/rust-lang/rust/commit/835150e70288535bc57bb624792229b9dc94991d"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "0883977821aa8f8cf67ccc5b7dd9ae3956c52c2b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=507a1fdf138b6247e0c31bcc00e844f5293c8394", "patch": "@@ -942,7 +942,7 @@ impl EncodeContext<'a, 'tcx> {\n             });\n             record!(self.tables.span[def_id] <- tcx.def_span(def_id));\n             record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));\n-            record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n+            record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n             if should_encode_visibility(def_kind) {\n                 record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n             }"}, {"sha": "087f772c812bdb2cf5a2aade1900cd4d8c59f398", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=507a1fdf138b6247e0c31bcc00e844f5293c8394", "patch": "@@ -167,4 +167,8 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n     providers.all_local_trait_impls = |tcx, ()| &tcx.hir_crate(()).trait_impls;\n+    providers.expn_that_defined = |tcx, id| {\n+        let id = id.expect_local();\n+        tcx.definitions.expansion_that_defined(id)\n+    };\n }"}, {"sha": "6a112a8531c635539e3e388170c8bfabb5d0ef19", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=507a1fdf138b6247e0c31bcc00e844f5293c8394", "patch": "@@ -212,6 +212,7 @@ rustc_queries! {\n \n     /// Internal helper query. Use `tcx.expansion_that_defined` instead\n     query expn_that_defined(key: DefId) -> rustc_span::ExpnId {\n+        eval_always\n         desc { |tcx| \"expansion that defined `{}`\", tcx.def_path_str(key) }\n     }\n "}, {"sha": "5da2aab409376636018087cd8deb51d334c9d20d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507a1fdf138b6247e0c31bcc00e844f5293c8394/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=507a1fdf138b6247e0c31bcc00e844f5293c8394", "patch": "@@ -39,7 +39,6 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n use rustc_hir::{Constness, Node};\n use rustc_macros::HashStable;\n-use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n@@ -1862,20 +1861,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             && use_name\n                 .span\n                 .ctxt()\n-                .hygienic_eq(def_name.span.ctxt(), self.expansion_that_defined(def_parent_def_id))\n-    }\n-\n-    pub fn expansion_that_defined(self, scope: DefId) -> ExpnId {\n-        match scope.as_local() {\n-            // Parsing and expansion aren't incremental, so we don't\n-            // need to go through a query for the same-crate case.\n-            Some(scope) => self.hir().definitions().expansion_that_defined(scope),\n-            None => self.expn_that_defined(scope),\n-        }\n+                .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))\n     }\n \n     pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {\n-        ident.span.normalize_to_macros_2_0_and_adjust(self.expansion_that_defined(scope));\n+        ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));\n         ident\n     }\n \n@@ -1886,8 +1876,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         block: hir::HirId,\n     ) -> (Ident, DefId) {\n         let scope =\n-            match ident.span.normalize_to_macros_2_0_and_adjust(self.expansion_that_defined(scope))\n-            {\n+            match ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope)) {\n                 Some(actual_expansion) => {\n                     self.hir().definitions().parent_module_of_macro_def(actual_expansion)\n                 }"}]}