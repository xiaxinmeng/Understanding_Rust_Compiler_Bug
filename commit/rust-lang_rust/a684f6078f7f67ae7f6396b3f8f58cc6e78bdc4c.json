{"sha": "a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ODRmNjA3OGY3ZjY3YWU3ZjYzOTZiM2Y4ZjU4Y2M2ZTc4YmRjNGM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-29T21:43:09Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-29T22:29:38Z"}, "message": "Do some cleanup in load_environment.", "tree": {"sha": "a8d1c3a481aa5b5ece3b2b9add5d441384ee5e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8d1c3a481aa5b5ece3b2b9add5d441384ee5e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c", "html_url": "https://github.com/rust-lang/rust/commit/a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a4d0ce829d999900199c6af53592537727ea5e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4d0ce829d999900199c6af53592537727ea5e9", "html_url": "https://github.com/rust-lang/rust/commit/6a4d0ce829d999900199c6af53592537727ea5e9"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "fb981889f7b7973614d22c8acb81c2f6423a4de4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a684f6078f7f67ae7f6396b3f8f58cc6e78bdc4c", "patch": "@@ -3787,52 +3787,45 @@ fn build_environment(cx: &@block_ctxt, upvars: &@ast::node_id[]) ->\n // Given an enclosing block context, a new function context, a closure type,\n // and a list of upvars, generate code to load and populate the environment\n // with the upvars and type descriptors.\n-fn load_environment(cx: &@block_ctxt, fcx: &@fn_ctxt, llenvptrty: TypeRef,\n-                    upvars: &@ast::node_id[]) {\n-    let copy_args_bcx = new_raw_block_ctxt(fcx, fcx.llcopyargs);\n+fn load_environment(enclosing_cx: &@block_ctxt, fcx: &@fn_ctxt,\n+                    llenvptrty: TypeRef, upvars: &@ast::node_id[]) {\n+    let bcx = new_raw_block_ctxt(fcx, fcx.llcopyargs);\n \n     // Populate the upvars from the environment.\n-    let llremoteenvptr =\n-        copy_args_bcx.build.PointerCast(fcx.llenv, llenvptrty);\n-    let llremotebindingsptrptr =\n-        copy_args_bcx.build.GEP(llremoteenvptr,\n-                                ~[C_int(0), C_int(abi::box_rc_field_body),\n-                                  C_int(abi::closure_elt_bindings)]);\n-    let llremotebindingsptr =\n-        copy_args_bcx.build.Load(llremotebindingsptrptr);\n+    let llenvptr = bcx.build.PointerCast(fcx.llenv, llenvptrty);\n+    llenvptr =\n+        bcx.build.GEP(llenvptr, ~[C_int(0), C_int(abi::box_rc_field_body)]);\n+    let llbindingsptrptr =\n+        bcx.build.GEP(llenvptr,\n+                      ~[C_int(0), C_int(abi::closure_elt_bindings)]);\n+    let llbindingsptr = bcx.build.Load(llbindingsptrptr);\n \n     let i = 0u;\n-    if !option::is_none(cx.fcx.lliterbody) {\n+    if !option::is_none(enclosing_cx.fcx.lliterbody) {\n         i += 1u;\n         let lliterbodyptr =\n-            copy_args_bcx.build.GEP(llremotebindingsptr,\n-                                    ~[C_int(0), C_int(0)]);\n-        let lliterbody = copy_args_bcx.build.Load(lliterbodyptr);\n-        fcx.lliterbody = some(lliterbody);\n+            bcx.build.GEP(llbindingsptr, ~[C_int(0), C_int(0)]);\n+        fcx.lliterbody = some(bcx.build.Load(lliterbodyptr));\n     }\n     for upvar_id: ast::node_id  in *upvars {\n         let llupvarptrptr =\n-            copy_args_bcx.build.GEP(llremotebindingsptr,\n-                                    ~[C_int(0), C_int(i as int)]);\n-        let llupvarptr = copy_args_bcx.build.Load(llupvarptrptr);\n-        let def_id = ast::def_id_of_def(bcx_tcx(cx).def_map.get(upvar_id));\n+            bcx.build.GEP(llbindingsptr, ~[C_int(0), C_int(i as int)]);\n+        let llupvarptr = bcx.build.Load(llupvarptrptr);\n+        let def_id = ast::def_id_of_def(bcx_tcx(bcx).def_map.get(upvar_id));\n         fcx.llupvars.insert(def_id.node, llupvarptr);\n         i += 1u;\n     }\n \n     // Populate the type parameters from the environment.\n-    let llremotetydescsptr =\n-        copy_args_bcx.build.GEP(llremoteenvptr,\n-                                ~[C_int(0), C_int(abi::box_rc_field_body),\n-                                  C_int(abi::closure_elt_ty_params)]);\n-    let tydesc_count = std::ivec::len(cx.fcx.lltydescs);\n+    let lltydescsptr =\n+        bcx.build.GEP(llenvptr,\n+                      ~[C_int(0), C_int(abi::closure_elt_ty_params)]);\n+    let tydesc_count = std::ivec::len(enclosing_cx.fcx.lltydescs);\n     i = 0u;\n     while i < tydesc_count {\n-        let llremotetydescptr =\n-            copy_args_bcx.build.GEP(llremotetydescsptr,\n-                                    ~[C_int(0), C_int(i as int)]);\n-        let llremotetydesc = copy_args_bcx.build.Load(llremotetydescptr);\n-        fcx.lltydescs += ~[llremotetydesc];\n+        let lltydescptr =\n+            bcx.build.GEP(lltydescsptr, ~[C_int(0), C_int(i as int)]);\n+        fcx.lltydescs += ~[bcx.build.Load(lltydescptr)];\n         i += 1u;\n     }\n "}]}