{"sha": "3cdd7ae59ef9df70f3b31024466266160c9f5d11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZGQ3YWU1OWVmOWRmNzBmM2IzMTAyNDQ2NjI2NjE2MGM5ZjVkMTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-31T19:35:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-09T05:08:59Z"}, "message": "review comment", "tree": {"sha": "d7e4865c59128d92e1e973191816cb3d1a4dfd6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e4865c59128d92e1e973191816cb3d1a4dfd6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cdd7ae59ef9df70f3b31024466266160c9f5d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cdd7ae59ef9df70f3b31024466266160c9f5d11", "html_url": "https://github.com/rust-lang/rust/commit/3cdd7ae59ef9df70f3b31024466266160c9f5d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cdd7ae59ef9df70f3b31024466266160c9f5d11/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319dd6f139377259ceca7db35069b382446ee3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/319dd6f139377259ceca7db35069b382446ee3bf", "html_url": "https://github.com/rust-lang/rust/commit/319dd6f139377259ceca7db35069b382446ee3bf"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "60c6da64c572458d768d02ecc3bb3902e98cee08", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -2208,7 +2208,7 @@ fn bounds_from_generic_predicates(\n     for projection in &projections {\n         let p = projection.skip_binder();\n         // FIXME: this is not currently supported syntax, we should be looking at the `types` and\n-        // insert the associated types where they correspond, but for now lets be \"lazy\" and\n+        // insert the associated types where they correspond, but for now let's be \"lazy\" and\n         // propose this instead of the following valid resugaring:\n         // `T: Trait, Trait::Assoc = K` \u2192 `T: Trait<Assoc = K>`\n         where_clauses.push(format!(\"{} = {}\", tcx.def_path_str(p.projection_ty.item_def_id), p.ty));\n@@ -2265,7 +2265,7 @@ fn fn_sig_suggestion(\n     // fill in a significant portion of the missing code, and other subsequent\n     // suggestions can help the user fix the code.\n     format!(\n-        \"{}fn {}{}({}){}{} {{ unimplemented!() }}\",\n+        \"{}fn {}{}({}){}{} {{ todo!() }}\",\n         unsafety, ident, generics, args, output, where_clauses\n     )\n }"}, {"sha": "748bc639a03c2af16b6d99248ca5490321025604", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -29,7 +29,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl std::fmt::Display for MyType4 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { todo!() }`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "723e03d452f30182f4393db62b4575d023a511ff", "filename": "src/test/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `partial_cmp`\n LL | impl PartialOrd for Thing {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n-   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> std::option::Option<std::cmp::Ordering> { unimplemented!() }`\n+   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> std::option::Option<std::cmp::Ordering> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "094782099f6ed6f1159a3fb2ef2723944016492b", "filename": "src/test/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -6,7 +6,7 @@ LL | impl m1::X for X {\n    |\n    = help: implement the missing item: `const CONSTANT: u32 = 42;`\n    = help: implement the missing item: `type Type = Type;`\n-   = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { unimplemented!() }`\n+   = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "cda191522a05f216cd197efe624a9f30024c7364", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -64,7 +64,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl Debug for FooTypeForMethod {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { todo!() }`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "64a1aeae3e040243222e9499ff4fecf5ac253c7f", "filename": "src/test/ui/suggestions/missing-assoc-fn-applicable-suggestions.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -13,8 +13,8 @@ struct S;\n struct Type;\n \n impl TraitA<()> for S { //~ ERROR not all trait items implemented\n-fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: std::marker::Copy { unimplemented!() }\n-fn bar<T>(_: T) -> Self { unimplemented!() }\n+fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: std::marker::Copy { todo!() }\n+fn bar<T>(_: T) -> Self { todo!() }\n type Type = Type;\n }\n "}, {"sha": "e4183a45d272a19bfcb5c48394f12c533294d667", "filename": "src/test/ui/suggestions/missing-assoc-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -28,7 +28,7 @@ error[E0046]: not all trait items implemented, missing: `from_iter`\n LL | impl FromIterator<()> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `from_iter` in implementation\n    |\n-   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: std::iter::IntoIterator, std::iter::IntoIterator::Item = A { unimplemented!() }`\n+   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: std::iter::IntoIterator, std::iter::IntoIterator::Item = A { todo!() }`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a1cf359ec91248f64417dd8e4c4df5c9853833b7", "filename": "src/test/ui/suggestions/missing-trait-item.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd7ae59ef9df70f3b31024466266160c9f5d11/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed?ref=3cdd7ae59ef9df70f3b31024466266160c9f5d11", "patch": "@@ -7,13 +7,13 @@ trait T {\n \n mod foo {\n     use super::T;\n-    impl T for () {    fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n-        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+    impl T for () {    fn bar(&self, _: &usize, _: &usize) -> usize { todo!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { todo!() }\n     } //~ ERROR not all trait items\n \n     impl T for usize { //~ ERROR not all trait items\n-        fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n-        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+        fn bar(&self, _: &usize, _: &usize) -> usize { todo!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { todo!() }\n     }\n }\n "}]}