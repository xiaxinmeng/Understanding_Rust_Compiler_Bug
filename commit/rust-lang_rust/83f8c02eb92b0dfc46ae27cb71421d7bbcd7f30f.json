{"sha": "83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjhjMDJlYjkyYjBkZmM0NmFlMjdjYjcxNDIxZDdiYmNkN2YzMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T23:08:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T23:08:44Z"}, "message": "Auto merge of #70826 - Centril:rollup-yn0hc1h, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #70553 (move OS constants to platform crate)\n - #70665 (Do not lose or reorder user-provided linker arguments)\n - #70750 (Match options directly in the Fuse implementation)\n - #70782 (Stop importing the float modules in documentation)\n - #70798 (\"cannot resolve\" \u2192 \"cannot satisfy\")\n - #70808 (Simplify dtor registration for HermitCore by using a list of destructors)\n - #70824 (Remove marker comments in libstd/lib.rs macro imports)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c0ed3870bb4a69ff85668151be1060c9bbfbce52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0ed3870bb4a69ff85668151be1060c9bbfbce52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "html_url": "https://github.com/rust-lang/rust/commit/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "html_url": "https://github.com/rust-lang/rust/commit/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7"}, {"sha": "23acf87fa0b1f13d88bd44ca44f4e35a46cc456f", "url": "https://api.github.com/repos/rust-lang/rust/commits/23acf87fa0b1f13d88bd44ca44f4e35a46cc456f", "html_url": "https://github.com/rust-lang/rust/commit/23acf87fa0b1f13d88bd44ca44f4e35a46cc456f"}], "stats": {"total": 577, "additions": 214, "deletions": 363}, "files": [{"sha": "28dcd3026fcf7196eaaf411daa1422cf0e9b281a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -1377,9 +1377,9 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.8\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1010591b26bbfe835e9faeabeb11866061cc7dcebffd56ad7d0942d0e61aefd8\"\n+checksum = \"725cf19794cf90aa94e65050cb4191ff5d8fa87a498383774c47b332e3af952e\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\","}, {"sha": "23bc215aa779d09d1f6d2dc0ed38641617e6b818", "filename": "src/libcore/iter/adapters/fuse.rs", "status": "modified", "additions": 63, "deletions": 74, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -28,6 +28,22 @@ impl<I> Fuse<I> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Fuse<I> where I: Iterator {}\n \n+/// Fuse the iterator if the expression is `None`.\n+macro_rules! fuse {\n+    ($self:ident . iter . $($call:tt)+) => {\n+        match $self.iter {\n+            Some(ref mut iter) => match iter.$($call)+ {\n+                None => {\n+                    $self.iter = None;\n+                    None\n+                }\n+                item => item,\n+            },\n+            None => None,\n+        }\n+    };\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> Iterator for Fuse<I>\n where\n@@ -37,35 +53,36 @@ where\n \n     #[inline]\n     default fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        let next = self.iter.as_mut()?.next();\n-        if next.is_none() {\n-            self.iter = None;\n-        }\n-        next\n+        fuse!(self.iter.next())\n     }\n \n     #[inline]\n     default fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        let nth = self.iter.as_mut()?.nth(n);\n-        if nth.is_none() {\n-            self.iter = None;\n-        }\n-        nth\n+        fuse!(self.iter.nth(n))\n     }\n \n     #[inline]\n     default fn last(self) -> Option<I::Item> {\n-        self.iter?.last()\n+        match self.iter {\n+            Some(iter) => iter.last(),\n+            None => None,\n+        }\n     }\n \n     #[inline]\n     default fn count(self) -> usize {\n-        self.iter.map_or(0, I::count)\n+        match self.iter {\n+            Some(iter) => iter.count(),\n+            None => 0,\n+        }\n     }\n \n     #[inline]\n     default fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.as_ref().map_or((0, Some(0)), I::size_hint)\n+        match self.iter {\n+            Some(ref iter) => iter.size_hint(),\n+            None => (0, Some(0)),\n+        }\n     }\n \n     #[inline]\n@@ -98,11 +115,7 @@ where\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        let found = self.iter.as_mut()?.find(predicate);\n-        if found.is_none() {\n-            self.iter = None;\n-        }\n-        found\n+        fuse!(self.iter.find(predicate))\n     }\n }\n \n@@ -113,20 +126,12 @@ where\n {\n     #[inline]\n     default fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        let next = self.iter.as_mut()?.next_back();\n-        if next.is_none() {\n-            self.iter = None;\n-        }\n-        next\n+        fuse!(self.iter.next_back())\n     }\n \n     #[inline]\n     default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        let nth = self.iter.as_mut()?.nth_back(n);\n-        if nth.is_none() {\n-            self.iter = None;\n-        }\n-        nth\n+        fuse!(self.iter.nth_back(n))\n     }\n \n     #[inline]\n@@ -159,11 +164,7 @@ where\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        let found = self.iter.as_mut()?.rfind(predicate);\n-        if found.is_none() {\n-            self.iter = None;\n-        }\n-        found\n+        fuse!(self.iter.rfind(predicate))\n     }\n }\n \n@@ -173,42 +174,30 @@ where\n     I: ExactSizeIterator,\n {\n     default fn len(&self) -> usize {\n-        self.iter.as_ref().map_or(0, I::len)\n-    }\n-\n-    default fn is_empty(&self) -> bool {\n-        self.iter.as_ref().map_or(true, I::is_empty)\n-    }\n-}\n-\n-// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`\n-impl<I: FusedIterator> Fuse<I> {\n-    #[inline(always)]\n-    fn as_inner(&self) -> &I {\n         match self.iter {\n-            Some(ref iter) => iter,\n-            // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n+            Some(ref iter) => iter.len(),\n+            None => 0,\n         }\n     }\n \n-    #[inline(always)]\n-    fn as_inner_mut(&mut self) -> &mut I {\n+    default fn is_empty(&self) -> bool {\n         match self.iter {\n-            Some(ref mut iter) => iter,\n-            // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n+            Some(ref iter) => iter.is_empty(),\n+            None => true,\n         }\n     }\n+}\n \n-    #[inline(always)]\n-    fn into_inner(self) -> I {\n-        match self.iter {\n-            Some(iter) => iter,\n+// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`.\n+// Implementing this as a directly-expanded macro helps codegen performance.\n+macro_rules! unchecked {\n+    ($self:ident) => {\n+        match $self {\n+            Fuse { iter: Some(iter) } => iter,\n             // SAFETY: the specialized iterator never sets `None`\n-            None => unsafe { intrinsics::unreachable() },\n+            Fuse { iter: None } => unsafe { intrinsics::unreachable() },\n         }\n-    }\n+    };\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -218,27 +207,27 @@ where\n {\n     #[inline]\n     fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().next()\n+        unchecked!(self).next()\n     }\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        self.as_inner_mut().nth(n)\n+        unchecked!(self).nth(n)\n     }\n \n     #[inline]\n     fn last(self) -> Option<I::Item> {\n-        self.into_inner().last()\n+        unchecked!(self).last()\n     }\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.into_inner().count()\n+        unchecked!(self).count()\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.as_inner().size_hint()\n+        unchecked!(self).size_hint()\n     }\n \n     #[inline]\n@@ -248,23 +237,23 @@ where\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        self.as_inner_mut().try_fold(init, fold)\n+        unchecked!(self).try_fold(init, fold)\n     }\n \n     #[inline]\n     fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.into_inner().fold(init, fold)\n+        unchecked!(self).fold(init, fold)\n     }\n \n     #[inline]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.as_inner_mut().find(predicate)\n+        unchecked!(self).find(predicate)\n     }\n }\n \n@@ -275,12 +264,12 @@ where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().next_back()\n+        unchecked!(self).next_back()\n     }\n \n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        self.as_inner_mut().nth_back(n)\n+        unchecked!(self).nth_back(n)\n     }\n \n     #[inline]\n@@ -290,23 +279,23 @@ where\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        self.as_inner_mut().try_rfold(init, fold)\n+        unchecked!(self).try_rfold(init, fold)\n     }\n \n     #[inline]\n     fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        self.into_inner().rfold(init, fold)\n+        unchecked!(self).rfold(init, fold)\n     }\n \n     #[inline]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.as_inner_mut().rfind(predicate)\n+        unchecked!(self).rfind(predicate)\n     }\n }\n \n@@ -316,11 +305,11 @@ where\n     I: ExactSizeIterator + FusedIterator,\n {\n     fn len(&self) -> usize {\n-        self.as_inner().len()\n+        unchecked!(self).len()\n     }\n \n     fn is_empty(&self) -> bool {\n-        self.as_inner().is_empty()\n+        unchecked!(self).is_empty()\n     }\n }\n "}, {"sha": "6be108f280eda8bc4189ec810d3ec65a0c018e56", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -394,9 +394,7 @@ impl f32 {\n     /// Converts radians to degrees.\n     ///\n     /// ```\n-    /// use std::f32::consts;\n-    ///\n-    /// let angle = consts::PI;\n+    /// let angle = std::f32::consts::PI;\n     ///\n     /// let abs_difference = (angle.to_degrees() - 180.0).abs();\n     ///\n@@ -413,11 +411,9 @@ impl f32 {\n     /// Converts degrees to radians.\n     ///\n     /// ```\n-    /// use std::f32::consts;\n-    ///\n     /// let angle = 180.0f32;\n     ///\n-    /// let abs_difference = (angle.to_radians() - consts::PI).abs();\n+    /// let abs_difference = (angle.to_radians() - std::f32::consts::PI).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```"}, {"sha": "da22ba8d3c9d24e53d2c7883efe7dca9d38bbf1d", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -407,9 +407,7 @@ impl f64 {\n     /// Converts radians to degrees.\n     ///\n     /// ```\n-    /// use std::f64::consts;\n-    ///\n-    /// let angle = consts::PI;\n+    /// let angle = std::f64::consts::PI;\n     ///\n     /// let abs_difference = (angle.to_degrees() - 180.0).abs();\n     ///\n@@ -427,11 +425,9 @@ impl f64 {\n     /// Converts degrees to radians.\n     ///\n     /// ```\n-    /// use std::f64::consts;\n-    ///\n     /// let angle = 180.0_f64;\n     ///\n-    /// let abs_difference = (angle.to_radians() - consts::PI).abs();\n+    /// let abs_difference = (angle.to_radians() - std::f64::consts::PI).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```"}, {"sha": "d4e6048579a56fa74eeba5c025c9c27879b7fdce", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -98,8 +98,6 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// assert!(!(3..5).contains(&2));\n     /// assert!( (3..5).contains(&3));\n     /// assert!( (3..5).contains(&4));\n@@ -198,8 +196,6 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// assert!(!(3..).contains(&2));\n     /// assert!( (3..).contains(&3));\n     /// assert!( (3..).contains(&1_000_000_000));\n@@ -282,8 +278,6 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// assert!( (..5).contains(&-1_000_000_000));\n     /// assert!( (..5).contains(&4));\n     /// assert!(!(..5).contains(&5));\n@@ -453,8 +447,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// assert!(!(3..=5).contains(&2));\n     /// assert!( (3..=5).contains(&3));\n     /// assert!( (3..=5).contains(&4));\n@@ -581,8 +573,6 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// assert!( (..=5).contains(&-1_000_000_000));\n     /// assert!( (..=5).contains(&5));\n     /// assert!(!(..=5).contains(&6));\n@@ -721,8 +711,6 @@ pub trait RangeBounds<T: ?Sized> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// assert!( (3..5).contains(&4));\n     /// assert!(!(3..5).contains(&2));\n     ///"}, {"sha": "49786bc3b068d75e6444f6a8772f027f850cf563", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -505,10 +505,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             cmd.args(args);\n         }\n     }\n-    if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n-        cmd.args(args);\n-    }\n-    cmd.args(&sess.opts.debugging_opts.pre_link_arg);\n+    cmd.args(&sess.opts.debugging_opts.pre_link_args);\n \n     if sess.target.target.options.is_like_fuchsia {\n         let prefix = match sess.opts.debugging_opts.sanitizer {\n@@ -1302,18 +1299,17 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.gc_sections(keep_metadata);\n     }\n \n-    let used_link_args = &codegen_results.crate_info.link_args;\n+    let attr_link_args = codegen_results.crate_info.link_args.iter();\n+    let user_link_args: Vec<_> =\n+        sess.opts.cg.link_args.iter().chain(attr_link_args).cloned().collect();\n \n     if crate_type == config::CrateType::Executable {\n         let mut position_independent_executable = false;\n \n         if t.options.position_independent_executables {\n-            let empty_vec = Vec::new();\n-            let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n-            let more_args = &sess.opts.cg.link_arg;\n-            let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n-\n-            if is_pic(sess) && !sess.crt_static(Some(crate_type)) && !args.any(|x| *x == \"-static\")\n+            if is_pic(sess)\n+                && !sess.crt_static(Some(crate_type))\n+                && !user_link_args.iter().any(|x| x == \"-static\")\n             {\n                 position_independent_executable = true;\n             }\n@@ -1444,11 +1440,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n \n     // Finally add all the linker arguments provided on the command line along\n     // with any #[link_args] attributes found inside the crate\n-    if let Some(ref args) = sess.opts.cg.link_args {\n-        cmd.args(args);\n-    }\n-    cmd.args(&sess.opts.cg.link_arg);\n-    cmd.args(&used_link_args);\n+    cmd.args(&user_link_args);\n }\n \n // # Native library linking"}, {"sha": "b452ccfe33a522847d480bdbb38d4e68bbd152f0", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -382,7 +382,7 @@ fn test_codegen_options_tracking_hash() {\n     opts.cg.linker = Some(PathBuf::from(\"linker\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.link_args = Some(vec![String::from(\"abc\"), String::from(\"def\")]);\n+    opts.cg.link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.cg.link_dead_code = true;"}, {"sha": "8cd6ca86f46897e88145e709b282e973e6ee6427", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -296,9 +296,17 @@ macro_rules! options {\n         use std::path::PathBuf;\n         use std::str::FromStr;\n \n+        // Sometimes different options need to build a common structure.\n+        // That structure can kept in one of the options' fields, the others become dummy.\n+        macro_rules! redirect_field {\n+            ($cg:ident.link_arg) => { $cg.link_args };\n+            ($cg:ident.pre_link_arg) => { $cg.pre_link_args };\n+            ($cg:ident.$field:ident) => { $cg.$field };\n+        }\n+\n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n-                $parse(&mut cg.$opt, v)\n+                $parse(&mut redirect_field!(cg.$opt), v)\n             }\n         )*\n \n@@ -643,9 +651,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"this option is deprecated and does nothing\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n-    link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],\n+    link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n-    link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n+    link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],\n         \"don't let linker strip dead code (turning it on can be used for code coverage)\"),\n@@ -876,9 +884,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"make rustc print the total optimization fuel used by a crate\"),\n     force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n         \"force all crates to be `rustc_private` unstable\"),\n-    pre_link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],\n+    pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n-    pre_link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n+    pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),"}, {"sha": "f0a157b377076e82ea1bbad22a3b3524f8e86f22", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -1377,7 +1377,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n-                err.note(&format!(\"cannot resolve `{}`\", predicate));\n+                err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 } else if let (\n@@ -1407,7 +1407,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // LL |     const fn const_val<T: Sized>() -> usize {\n                         //    |              --------- - required by this bound in `Tt::const_val`\n                         //    |\n-                        //    = note: cannot resolve `_: Tt`\n+                        //    = note: cannot satisfy `_: Tt`\n \n                         err.span_suggestion_verbose(\n                             span.shrink_to_hi(),\n@@ -1457,7 +1457,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0284);\n-                err.note(&format!(\"cannot resolve `{}`\", predicate));\n+                err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 err\n             }\n \n@@ -1469,10 +1469,10 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     self.tcx.sess,\n                     span,\n                     E0284,\n-                    \"type annotations needed: cannot resolve `{}`\",\n+                    \"type annotations needed: cannot satisfy `{}`\",\n                     predicate,\n                 );\n-                err.span_label(span, &format!(\"cannot resolve `{}`\", predicate));\n+                err.span_label(span, &format!(\"cannot satisfy `{}`\", predicate));\n                 err\n             }\n         };"}, {"sha": "3a83f3f569a26c391a9e51f5a7c3bbb165350fdd", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -41,7 +41,7 @@ dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n \n [target.'cfg(all(any(target_arch = \"x86_64\", target_arch = \"aarch64\"), target_os = \"hermit\"))'.dependencies]\n-hermit-abi = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n+hermit-abi = { version = \"0.1.10\", features = ['rustc-dep-of-std'] }\n \n [target.wasm32-wasi.dependencies]\n wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features = false }"}, {"sha": "65273275a4006be50a291c76c8504d0fcd22540a", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 15, "deletions": 81, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -112,8 +112,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 3.6_f32;\n     /// let y = -3.6_f32;\n     /// let abs_difference_x = (x.fract() - 0.6).abs();\n@@ -135,8 +133,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 3.5_f32;\n     /// let y = -3.5_f32;\n     ///\n@@ -164,8 +160,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 3.5_f32;\n     ///\n     /// assert_eq!(f.signum(), 1.0);\n@@ -190,8 +184,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 3.5_f32;\n     ///\n     /// assert_eq!(f.copysign(0.42), 3.5_f32);\n@@ -217,8 +209,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let m = 10.0_f32;\n     /// let x = 4.0_f32;\n     /// let b = 60.0_f32;\n@@ -301,8 +291,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 2.0_f32;\n     /// let abs_difference = (x.powi(2) - (x * x)).abs();\n     ///\n@@ -320,8 +308,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 2.0_f32;\n     /// let abs_difference = (x.powf(2.0) - (x * x)).abs();\n     ///\n@@ -341,8 +327,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let positive = 4.0_f32;\n     /// let negative = -4.0_f32;\n     ///\n@@ -363,8 +347,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let one = 1.0f32;\n     /// // e^1\n     /// let e = one.exp();\n@@ -386,8 +368,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 2.0f32;\n     ///\n     /// // 2^2 - 4 == 0\n@@ -407,8 +387,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let one = 1.0f32;\n     /// // e^1\n     /// let e = one.exp();\n@@ -434,8 +412,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let five = 5.0f32;\n     ///\n     /// // log5(5) - 1 == 0\n@@ -455,8 +431,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let two = 2.0f32;\n     ///\n     /// // log2(2) - 1 == 0\n@@ -479,8 +453,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let ten = 10.0f32;\n     ///\n     /// // log10(10) - 1 == 0\n@@ -503,8 +475,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 3.0f32;\n     /// let y = -3.0f32;\n     ///\n@@ -536,8 +506,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 8.0f32;\n     ///\n     /// // x^(1/3) - 2 == 0\n@@ -558,8 +526,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 2.0f32;\n     /// let y = 3.0f32;\n     ///\n@@ -580,9 +546,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let x = f32::consts::FRAC_PI_2;\n+    /// let x = std::f32::consts::FRAC_PI_2;\n     ///\n     /// let abs_difference = (x.sin() - 1.0).abs();\n     ///\n@@ -600,9 +564,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let x = 2.0 * f32::consts::PI;\n+    /// let x = 2.0 * std::f32::consts::PI;\n     ///\n     /// let abs_difference = (x.cos() - 1.0).abs();\n     ///\n@@ -620,9 +582,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let x = f32::consts::FRAC_PI_4;\n+    /// let x = std::f32::consts::FRAC_PI_4;\n     /// let abs_difference = (x.tan() - 1.0).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n@@ -641,12 +601,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let f = f32::consts::FRAC_PI_2;\n+    /// let f = std::f32::consts::FRAC_PI_2;\n     ///\n     /// // asin(sin(pi/2))\n-    /// let abs_difference = (f.sin().asin() - f32::consts::FRAC_PI_2).abs();\n+    /// let abs_difference = (f.sin().asin() - std::f32::consts::FRAC_PI_2).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -664,12 +622,10 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let f = f32::consts::FRAC_PI_4;\n+    /// let f = std::f32::consts::FRAC_PI_4;\n     ///\n     /// // acos(cos(pi/4))\n-    /// let abs_difference = (f.cos().acos() - f32::consts::FRAC_PI_4).abs();\n+    /// let abs_difference = (f.cos().acos() - std::f32::consts::FRAC_PI_4).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -686,8 +642,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 1.0f32;\n     ///\n     /// // atan(tan(1))\n@@ -712,8 +666,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// // Positive angles measured counter-clockwise\n     /// // from positive x axis\n     /// // -pi/4 radians (45 deg clockwise)\n@@ -724,8 +676,8 @@ impl f32 {\n     /// let x2 = -3.0f32;\n     /// let y2 = 3.0f32;\n     ///\n-    /// let abs_difference_1 = (y1.atan2(x1) - (-f32::consts::FRAC_PI_4)).abs();\n-    /// let abs_difference_2 = (y2.atan2(x2) - (3.0 * f32::consts::FRAC_PI_4)).abs();\n+    /// let abs_difference_1 = (y1.atan2(x1) - (-std::f32::consts::FRAC_PI_4)).abs();\n+    /// let abs_difference_2 = (y2.atan2(x2) - (3.0 * std::f32::consts::FRAC_PI_4)).abs();\n     ///\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// assert!(abs_difference_2 <= f32::EPSILON);\n@@ -743,9 +695,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let x = f32::consts::FRAC_PI_4;\n+    /// let x = std::f32::consts::FRAC_PI_4;\n     /// let f = x.sin_cos();\n     ///\n     /// let abs_difference_0 = (f.0 - x.sin()).abs();\n@@ -766,8 +716,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 6.0f32;\n     ///\n     /// // e^(ln(6)) - 1\n@@ -788,9 +736,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let x = f32::consts::E - 1.0;\n+    /// let x = std::f32::consts::E - 1.0;\n     ///\n     /// // ln(1 + (e - 1)) == ln(e) == 1\n     /// let abs_difference = (x.ln_1p() - 1.0).abs();\n@@ -809,9 +755,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let e = f32::consts::E;\n+    /// let e = std::f32::consts::E;\n     /// let x = 1.0f32;\n     ///\n     /// let f = x.sinh();\n@@ -833,9 +777,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let e = f32::consts::E;\n+    /// let e = std::f32::consts::E;\n     /// let x = 1.0f32;\n     /// let f = x.cosh();\n     /// // Solving cosh() at 1 gives this result\n@@ -857,9 +799,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let e = f32::consts::E;\n+    /// let e = std::f32::consts::E;\n     /// let x = 1.0f32;\n     ///\n     /// let f = x.tanh();\n@@ -881,8 +821,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 1.0f32;\n     /// let f = x.sinh().asinh();\n     ///\n@@ -906,8 +844,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 1.0f32;\n     /// let f = x.cosh().acosh();\n     ///\n@@ -927,9 +863,7 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n-    /// let e = f32::consts::E;\n+    /// let e = std::f32::consts::E;\n     /// let f = e.tanh().atanh();\n     ///\n     /// let abs_difference = (f - e).abs();"}, {"sha": "ff222fc8539d0bc27a0cdc06ee205ad3b416e684", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -133,8 +133,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let x = 3.5_f64;\n     /// let y = -3.5_f64;\n     ///\n@@ -162,8 +160,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let f = 3.5_f64;\n     ///\n     /// assert_eq!(f.signum(), 1.0);\n@@ -188,8 +184,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let f = 3.5_f64;\n     ///\n     /// assert_eq!(f.copysign(0.42), 3.5_f64);\n@@ -554,9 +548,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let x = f64::consts::FRAC_PI_2;\n+    /// let x = std::f64::consts::FRAC_PI_2;\n     ///\n     /// let abs_difference = (x.sin() - 1.0).abs();\n     ///\n@@ -574,9 +566,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let x = 2.0 * f64::consts::PI;\n+    /// let x = 2.0 * std::f64::consts::PI;\n     ///\n     /// let abs_difference = (x.cos() - 1.0).abs();\n     ///\n@@ -594,9 +584,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let x = f64::consts::FRAC_PI_4;\n+    /// let x = std::f64::consts::FRAC_PI_4;\n     /// let abs_difference = (x.tan() - 1.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-14);\n@@ -615,12 +603,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let f = f64::consts::FRAC_PI_2;\n+    /// let f = std::f64::consts::FRAC_PI_2;\n     ///\n     /// // asin(sin(pi/2))\n-    /// let abs_difference = (f.sin().asin() - f64::consts::FRAC_PI_2).abs();\n+    /// let abs_difference = (f.sin().asin() - std::f64::consts::FRAC_PI_2).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -638,12 +624,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let f = f64::consts::FRAC_PI_4;\n+    /// let f = std::f64::consts::FRAC_PI_4;\n     ///\n     /// // acos(cos(pi/4))\n-    /// let abs_difference = (f.cos().acos() - f64::consts::FRAC_PI_4).abs();\n+    /// let abs_difference = (f.cos().acos() - std::f64::consts::FRAC_PI_4).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -684,8 +668,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// // Positive angles measured counter-clockwise\n     /// // from positive x axis\n     /// // -pi/4 radians (45 deg clockwise)\n@@ -696,8 +678,8 @@ impl f64 {\n     /// let x2 = -3.0_f64;\n     /// let y2 = 3.0_f64;\n     ///\n-    /// let abs_difference_1 = (y1.atan2(x1) - (-f64::consts::FRAC_PI_4)).abs();\n-    /// let abs_difference_2 = (y2.atan2(x2) - (3.0 * f64::consts::FRAC_PI_4)).abs();\n+    /// let abs_difference_1 = (y1.atan2(x1) - (-std::f64::consts::FRAC_PI_4)).abs();\n+    /// let abs_difference_2 = (y2.atan2(x2) - (3.0 * std::f64::consts::FRAC_PI_4)).abs();\n     ///\n     /// assert!(abs_difference_1 < 1e-10);\n     /// assert!(abs_difference_2 < 1e-10);\n@@ -715,9 +697,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let x = f64::consts::FRAC_PI_4;\n+    /// let x = std::f64::consts::FRAC_PI_4;\n     /// let f = x.sin_cos();\n     ///\n     /// let abs_difference_0 = (f.0 - x.sin()).abs();\n@@ -758,9 +738,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let x = f64::consts::E - 1.0;\n+    /// let x = std::f64::consts::E - 1.0;\n     ///\n     /// // ln(1 + (e - 1)) == ln(e) == 1\n     /// let abs_difference = (x.ln_1p() - 1.0).abs();\n@@ -779,9 +757,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let e = f64::consts::E;\n+    /// let e = std::f64::consts::E;\n     /// let x = 1.0_f64;\n     ///\n     /// let f = x.sinh();\n@@ -803,9 +779,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let e = f64::consts::E;\n+    /// let e = std::f64::consts::E;\n     /// let x = 1.0_f64;\n     /// let f = x.cosh();\n     /// // Solving cosh() at 1 gives this result\n@@ -827,9 +801,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let e = f64::consts::E;\n+    /// let e = std::f64::consts::E;\n     /// let x = 1.0_f64;\n     ///\n     /// let f = x.tanh();\n@@ -893,9 +865,7 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n-    /// let e = f64::consts::E;\n+    /// let e = std::f64::consts::E;\n     /// let f = e.tanh().atanh();\n     ///\n     /// let abs_difference = (f - e).abs();"}, {"sha": "a9a519f0a3a71aa884e7d229228b5f75ab7e6169", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -517,20 +517,8 @@ pub use std_detect::detect;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::{\n-    // Stable\n-    assert_eq,\n-    assert_ne,\n-    debug_assert,\n-    debug_assert_eq,\n-    debug_assert_ne,\n-    // Unstable\n-    matches,\n-    r#try,\n-    todo,\n-    unimplemented,\n-    unreachable,\n-    write,\n-    writeln,\n+    assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches, r#try, todo,\n+    unimplemented, unreachable, write, writeln,\n };\n \n // Re-export built-in macros defined through libcore."}, {"sha": "9b683fce157488df8d26ee08184e278578e5c17b", "filename": "src/libstd/sys/hermit/fast_thread_local.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -1,4 +1,36 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n-pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n+// Simplify dtor registration by using a list of destructors.\n+// The this solution works like the implementation of macOS and\n+// doesn't additional OS support\n+\n+use crate::cell::Cell;\n+use crate::ptr;\n+\n+#[thread_local]\n+static DTORS: Cell<*mut List> = Cell::new(ptr::null_mut());\n+\n+type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n+\n+pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n+    if DTORS.get().is_null() {\n+        let v: Box<List> = box Vec::new();\n+        DTORS.set(Box::into_raw(v));\n+    }\n+\n+    let list: &mut List = &mut *DTORS.get();\n+    list.push((t, dtor));\n+}\n+\n+// every thread call this function to run through all possible destructors\n+pub unsafe fn run_dtors() {\n+    let mut ptr = DTORS.replace(ptr::null_mut());\n+    while !ptr.is_null() {\n+        let list = Box::from_raw(ptr);\n+        for (ptr, dtor) in list.into_iter() {\n+            dtor(ptr);\n+        }\n+        ptr = DTORS.replace(ptr::null_mut());\n+    }\n+}"}, {"sha": "287a039066780839b1cb0baee3c8ed624aa964cc", "filename": "src/libstd/sys/hermit/fs.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -6,6 +6,7 @@ use crate::io::{IoSlice, IoSliceMut, SeekFrom};\n use crate::path::{Path, PathBuf};\n use crate::sys::cvt;\n use crate::sys::hermit::abi;\n+use crate::sys::hermit::abi::{O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -17,14 +18,6 @@ pub use crate::sys_common::fs::copy;\n fn cstr(path: &Path) -> io::Result<CString> {\n     Ok(CString::new(path.as_os_str().as_bytes())?)\n }\n-//const O_ACCMODE: i32 = 00000003;\n-const O_RDONLY: i32 = 00000000;\n-const O_WRONLY: i32 = 00000001;\n-const O_RDWR: i32 = 00000002;\n-const O_CREAT: i32 = 00000100;\n-const O_EXCL: i32 = 00000200;\n-const O_TRUNC: i32 = 00001000;\n-const O_APPEND: i32 = 00002000;\n \n #[derive(Debug)]\n pub struct File(FileDesc);"}, {"sha": "6736d964e521b9850db1190a8d90e9eeddf6b05d", "filename": "src/libstd/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -103,6 +103,7 @@ pub unsafe extern \"C\" fn runtime_entry(\n     argv: *const *const c_char,\n     env: *const *const c_char,\n ) -> ! {\n+    use crate::sys::hermit::fast_thread_local::run_dtors;\n     extern \"C\" {\n         fn main(argc: isize, argv: *const *const c_char) -> i32;\n     }\n@@ -112,6 +113,7 @@ pub unsafe extern \"C\" fn runtime_entry(\n \n     let result = main(argc as isize, argv);\n \n+    run_dtors();\n     abi::exit(result);\n }\n "}, {"sha": "7e3fb4c6d20523ebd9430a33064d936c5a28cccb", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -1,36 +1,14 @@\n #![allow(dead_code)]\n \n use crate::ffi::CStr;\n-use crate::fmt;\n use crate::io;\n use crate::mem;\n use crate::sys::hermit::abi;\n+use crate::sys::hermit::fast_thread_local::run_dtors;\n use crate::time::Duration;\n \n pub type Tid = abi::Tid;\n \n-/// Priority of a task\n-#[derive(PartialEq, Eq, PartialOrd, Ord, Debug, Clone, Copy)]\n-pub struct Priority(u8);\n-\n-impl Priority {\n-    pub const fn into(self) -> u8 {\n-        self.0\n-    }\n-\n-    pub const fn from(x: u8) -> Self {\n-        Priority(x)\n-    }\n-}\n-\n-impl fmt::Display for Priority {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.0)\n-    }\n-}\n-\n-pub const NORMAL_PRIO: Priority = Priority::from(2);\n-\n pub struct Thread {\n     tid: Tid,\n }\n@@ -51,8 +29,8 @@ impl Thread {\n         let ret = abi::spawn(\n             &mut tid as *mut Tid,\n             thread_start,\n-            p as usize,\n-            Priority::into(NORMAL_PRIO),\n+            &*p as *const _ as *const u8 as usize,\n+            abi::Priority::into(abi::NORMAL_PRIO),\n             core_id,\n         );\n \n@@ -69,6 +47,9 @@ impl Thread {\n             unsafe {\n                 // Finally, let's run some code.\n                 Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n+\n+                // run all destructors\n+                run_dtors();\n             }\n         }\n     }"}, {"sha": "f8be9863ed56f69713e88c98fdfd8b4a6037f2e6", "filename": "src/libstd/sys/hermit/thread_local.rs", "status": "modified", "additions": 9, "deletions": 43, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -1,60 +1,26 @@\n-#![allow(dead_code)] // not used on all platforms\n-\n-use crate::collections::BTreeMap;\n-use crate::ptr;\n-use crate::sync::atomic::{AtomicUsize, Ordering};\n-use crate::sys_common::mutex::Mutex;\n-\n pub type Key = usize;\n \n-type Dtor = unsafe extern \"C\" fn(*mut u8);\n-\n-static NEXT_KEY: AtomicUsize = AtomicUsize::new(0);\n-\n-static mut KEYS: *mut BTreeMap<Key, Option<Dtor>> = ptr::null_mut();\n-static KEYS_LOCK: Mutex = Mutex::new();\n-\n-#[thread_local]\n-static mut LOCALS: *mut BTreeMap<Key, *mut u8> = ptr::null_mut();\n-\n-unsafe fn keys() -> &'static mut BTreeMap<Key, Option<Dtor>> {\n-    if KEYS.is_null() {\n-        KEYS = Box::into_raw(Box::new(BTreeMap::new()));\n-    }\n-    &mut *KEYS\n-}\n-\n-unsafe fn locals() -> &'static mut BTreeMap<Key, *mut u8> {\n-    if LOCALS.is_null() {\n-        LOCALS = Box::into_raw(Box::new(BTreeMap::new()));\n-    }\n-    &mut *LOCALS\n-}\n-\n #[inline]\n-pub unsafe fn create(dtor: Option<Dtor>) -> Key {\n-    let key = NEXT_KEY.fetch_add(1, Ordering::SeqCst);\n-    let _guard = KEYS_LOCK.lock();\n-    keys().insert(key, dtor);\n-    key\n+pub unsafe fn create(_dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n-pub unsafe fn get(key: Key) -> *mut u8 {\n-    if let Some(&entry) = locals().get(&key) { entry } else { ptr::null_mut() }\n+pub unsafe fn set(_key: Key, _value: *mut u8) {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n-pub unsafe fn set(key: Key, value: *mut u8) {\n-    locals().insert(key, value);\n+pub unsafe fn get(_key: Key) -> *mut u8 {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n-pub unsafe fn destroy(key: Key) {\n-    keys().remove(&key);\n+pub unsafe fn destroy(_key: Key) {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n pub fn requires_synchronized_create() -> bool {\n-    false\n+    panic!(\"should not be used on the wasm target\");\n }"}, {"sha": "98c1e0eac3b0e36952db62944255ec67e265f091", "filename": "src/test/run-make-fulldeps/link-args-order/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -0,0 +1,10 @@\n+# ignore-msvc\n+\n+-include ../tools.mk\n+\n+RUSTC_FLAGS = -C linker-flavor=ld -C link-arg=a -C link-args=\"b c\" -C link-args=\"d e\" -C link-arg=f\n+RUSTC_FLAGS_PRE = -C linker-flavor=ld -Z pre-link-arg=a -Z pre-link-args=\"b c\" -Z pre-link-args=\"d e\" -Z pre-link-arg=f\n+\n+all:\n+\t$(RUSTC) $(RUSTC_FLAGS) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"'\n+\t$(RUSTC) $(RUSTC_FLAGS_PRE) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"'"}, {"sha": "2439171004b5f9f0ead91624fbf5d78d583a6946", "filename": "src/test/run-make-fulldeps/link-args-order/empty.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -0,0 +1,6 @@\n+#![feature(link_args)]\n+\n+#[link_args = \"g\"]\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "34e947030a072ff8b693e7bdc83492721c489c10", "filename": "src/test/ui/associated-const/issue-63496.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -10,7 +10,7 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |                     cannot infer type\n    |                     help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n-   = note: cannot resolve `_: A`\n+   = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error[E0283]: type annotations needed\n@@ -25,7 +25,7 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |                                 cannot infer type\n    |                                 help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n-   = note: cannot resolve `_: A`\n+   = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors"}, {"sha": "98b545c6e0e78de9106c794338dcdc997faabade", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -22,7 +22,7 @@ LL |     fn return_n(&self) -> [u8; Bar::X];\n    |                                cannot infer type\n    |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n    |\n-   = note: cannot resolve `_: Bar`\n+   = note: cannot satisfy `_: Bar`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors"}, {"sha": "683a2ab21d9c8e3cf258b61ae11c2c4f922adeba", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -6,7 +6,7 @@ LL | trait Foo: Iterator<Item = i32> {}\n LL | trait Bar: Foo<Item = u32> {}\n    |            ^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n-   = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n+   = note: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n \n error[E0284]: type annotations needed\n   --> $DIR/associated-types-overridden-binding.rs:7:21\n@@ -16,7 +16,7 @@ LL | trait I32Iterator = Iterator<Item = i32>;\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n-   = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n+   = note: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2914a7f868b2b2891fab601449013c178952007d", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -4,7 +4,7 @@ error[E0284]: type annotations needed\n LL |     let x: isize = Foo::bar();\n    |                    ^^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `<_ as Foo>::A == _`\n+   = note: cannot satisfy `<_ as Foo>::A == _`\n \n error: aborting due to previous error\n "}, {"sha": "e95583c91a72f79cf2fb262360cd3557588ce408", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -7,7 +7,7 @@ LL |     fn create() -> u32;\n LL |     let cont: u32 = Generator::create();\n    |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `_: Generator`\n+   = note: cannot satisfy `_: Generator`\n \n error: aborting due to previous error\n "}, {"sha": "434c5de2874e00b85d987e25c8ba2580992fe856", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -4,7 +4,7 @@ error[E0284]: type annotations needed\n LL |         self.input_stream(&mut stream);\n    |              ^^^^^^^^^^^^ cannot infer type for type parameter `H` declared on the trait `StreamHash`\n    |\n-   = note: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+   = note: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n \n error: aborting due to previous error\n "}, {"sha": "d36d0dad4a196c7fc03bd2692e4932305ddeeec1", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo {\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n-   = note: cannot resolve `&'a T: Foo`\n+   = note: cannot satisfy `&'a T: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "f9338981408b743bb7f291cdd2c1880d6c67f58f", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n-   = note: cannot resolve `T0: Trait0<'l0>`\n+   = note: cannot satisfy `T0: Trait0<'l0>`\n \n error: aborting due to previous error\n "}, {"sha": "94aff5963544c59dd8d1cf566976ba31cebe8866", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo { fn xxx(&self); }\n LL |     let _ = <S5<_>>::xxx;\n    |             ^^^^^^^^^^^^ cannot infer type for struct `S5<_>`\n    |\n-   = note: cannot resolve `S5<_>: Foo`\n+   = note: cannot satisfy `S5<_>: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "ca5439e290b75242d1c5e188a2250e622b792a18", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -13,7 +13,7 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n LL |     const fn const_val<T: Sized>() -> usize {\n    |              --------- - required by this bound in `Tt::const_val`\n    |\n-   = note: cannot resolve `_: Tt`\n+   = note: cannot satisfy `_: Tt`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-54954.rs:13:15"}, {"sha": "fb31467ec47fa356adc951b8c6ece17c7d8bc380", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -16,7 +16,7 @@ LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n    |                         cannot infer type\n    |                         help: use the fully qualified path to an implementation: `<Type as Foo>::SIZE`\n    |\n-   = note: cannot resolve `_: Foo`\n+   = note: cannot satisfy `_: Foo`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors"}, {"sha": "64d8f685637fb140f6e26fdc3181db028ba74be6", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -4,7 +4,7 @@ error[E0284]: type annotations needed\n LL |     l.iter().map(f).collect()?\n    |                     ^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `<_ as std::ops::Try>::Ok == _`\n+   = note: cannot satisfy `<_ as std::ops::Try>::Ok == _`\n help: consider specifying the type argument in the method call\n    |\n LL |     l.iter().map(f).collect::<B>()?"}, {"sha": "8f20cc5093e114228497435531bced100a68fc16", "filename": "src/test/ui/traits/trait-static-method-generic-inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -7,7 +7,7 @@ LL |         fn new() -> T;\n LL |     let _f: base::Foo = base::HasNew::new();\n    |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `_: base::HasNew<base::Foo>`\n+   = note: cannot satisfy `_: base::HasNew<base::Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "b9bf6d79b1c8922b04e873725a043e4fdee2accb", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     foo(42);\n     //~^ ERROR type annotations needed\n     //~| NOTE cannot infer type\n-    //~| NOTE cannot resolve\n+    //~| NOTE cannot satisfy\n }"}, {"sha": "e6cd7ac3880916b263d5a0d5a4053eb9623faaa9", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<T: Into<String>>(x: i32) {}\n LL |     foo(42);\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n-   = note: cannot resolve `_: std::convert::Into<std::string::String>`\n+   = note: cannot satisfy `_: std::convert::Into<std::string::String>`\n help: consider specifying the type argument in the function call\n    |\n LL |     foo::<T>(42);"}, {"sha": "7d81e0ce10c709f7f1d5a9747ab725fa7c252081", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo: Sized {\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n-   = note: cannot resolve `&'a T: Foo`\n+   = note: cannot satisfy `&'a T: Foo`\n \n error: aborting due to previous error\n "}]}