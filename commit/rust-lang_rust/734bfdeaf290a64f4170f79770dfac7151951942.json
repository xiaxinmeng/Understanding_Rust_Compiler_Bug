{"sha": "734bfdeaf290a64f4170f79770dfac7151951942", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNGJmZGVhZjI5MGE2NGY0MTcwZjc5NzcwZGZhYzcxNTE5NTE5NDI=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-07-08T18:13:42Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-07-08T18:13:42Z"}, "message": "Disallow octal zeros in IPv4 addresses", "tree": {"sha": "1576f5bd1b8875785be5d35bd8b659fb61556cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1576f5bd1b8875785be5d35bd8b659fb61556cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734bfdeaf290a64f4170f79770dfac7151951942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734bfdeaf290a64f4170f79770dfac7151951942", "html_url": "https://github.com/rust-lang/rust/commit/734bfdeaf290a64f4170f79770dfac7151951942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734bfdeaf290a64f4170f79770dfac7151951942/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "969a6c2481c41cea793708f7fdd2f96a3397143f", "url": "https://api.github.com/repos/rust-lang/rust/commits/969a6c2481c41cea793708f7fdd2f96a3397143f", "html_url": "https://github.com/rust-lang/rust/commit/969a6c2481c41cea793708f7fdd2f96a3397143f"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "5ff0bd697b142b281458bb8d3c6d1b6fe626cbcc", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/734bfdeaf290a64f4170f79770dfac7151951942/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734bfdeaf290a64f4170f79770dfac7151951942/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=734bfdeaf290a64f4170f79770dfac7151951942", "patch": "@@ -20,6 +20,14 @@ fn test_from_str_ipv4() {\n     // no number between dots\n     let none: Option<Ipv4Addr> = \"255.0..1\".parse().ok();\n     assert_eq!(None, none);\n+    // octal\n+    let none: Option<Ipv4Addr> = \"255.0.0.01\".parse().ok();\n+    assert_eq!(None, none);\n+    // octal zero\n+    let none: Option<Ipv4Addr> = \"255.0.0.00\".parse().ok();\n+    assert_eq!(None, none);\n+    let none: Option<Ipv4Addr> = \"255.0.00.0\".parse().ok();\n+    assert_eq!(None, none);\n }\n \n #[test]"}, {"sha": "d43d40400abad92cfd6494331d61796f24ecfbd4", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/734bfdeaf290a64f4170f79770dfac7151951942/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734bfdeaf290a64f4170f79770dfac7151951942/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=734bfdeaf290a64f4170f79770dfac7151951942", "patch": "@@ -12,7 +12,7 @@ use crate::fmt;\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};\n use crate::str::FromStr;\n \n-trait ReadNumberHelper: crate::marker::Sized {\n+trait ReadNumberHelper: crate::marker::Sized + crate::cmp::PartialEq {\n     const ZERO: Self;\n     fn checked_mul(&self, other: u32) -> Option<Self>;\n     fn checked_add(&self, other: u32) -> Option<Self>;\n@@ -111,10 +111,12 @@ impl<'a> Parser<'a> {\n         &mut self,\n         radix: u32,\n         max_digits: Option<usize>,\n+        allow_zero_prefix: bool,\n     ) -> Option<T> {\n         self.read_atomically(move |p| {\n             let mut result = T::ZERO;\n             let mut digit_count = 0;\n+            let has_leading_zero = p.peek_char() == Some('0');\n \n             while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n                 result = result.checked_mul(radix)?;\n@@ -127,7 +129,16 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n-            if digit_count == 0 { None } else { Some(result) }\n+            if digit_count == 0 {\n+                None\n+            } else if !allow_zero_prefix\n+                && has_leading_zero\n+                && (result != T::ZERO || result == T::ZERO && digit_count > 1)\n+            {\n+                None\n+            } else {\n+                Some(result)\n+            }\n         })\n     }\n \n@@ -140,10 +151,7 @@ impl<'a> Parser<'a> {\n                 *slot = p.read_separator('.', i, |p| {\n                     // Disallow octal number in IP string.\n                     // https://tools.ietf.org/html/rfc6943#section-3.1.1\n-                    match (p.peek_char(), p.read_number(10, None)) {\n-                        (Some('0'), Some(number)) if number != 0 => None,\n-                        (_, number) => number,\n-                    }\n+                    p.read_number(10, None, false)\n                 })?;\n             }\n \n@@ -175,7 +183,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n \n-                let group = p.read_separator(':', i, |p| p.read_number(16, Some(4)));\n+                let group = p.read_separator(':', i, |p| p.read_number(16, Some(4), true));\n \n                 match group {\n                     Some(g) => *slot = g,\n@@ -227,15 +235,15 @@ impl<'a> Parser<'a> {\n     fn read_port(&mut self) -> Option<u16> {\n         self.read_atomically(|p| {\n             p.read_given_char(':')?;\n-            p.read_number(10, None)\n+            p.read_number(10, None, true)\n         })\n     }\n \n     /// Read a `%` followed by a scope ID in base 10.\n     fn read_scope_id(&mut self) -> Option<u32> {\n         self.read_atomically(|p| {\n             p.read_given_char('%')?;\n-            p.read_number(10, None)\n+            p.read_number(10, None, true)\n         })\n     }\n "}]}