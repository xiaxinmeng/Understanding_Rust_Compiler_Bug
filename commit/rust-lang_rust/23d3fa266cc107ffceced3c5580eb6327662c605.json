{"sha": "23d3fa266cc107ffceced3c5580eb6327662c605", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDNmYTI2NmNjMTA3ZmZjZWNlZDNjNTU4MGViNjMyNzY2MmM2MDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-27T21:39:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-27T21:39:39Z"}, "message": "Rollup merge of #70457 - Centril:non-exhaustive-scrutinee-type, r=estebank\n\nnon-exhastive diagnostic: add note re. scrutinee type\n\nThis fixes https://github.com/rust-lang/rust/issues/67259 by adding a note:\n```\n    = note: the matched value is of type &[i32]\n```\nto non-exhaustive pattern matching errors.\n\nr? @varkor @estebank", "tree": {"sha": "cbfbf1df9f0bb057bbb00e8eb09ee085c34d7ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbfbf1df9f0bb057bbb00e8eb09ee085c34d7ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d3fa266cc107ffceced3c5580eb6327662c605", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefnKcCRBK7hj4Ov3rIwAAdHIIAJa7WUPmjkCuqYEx/oiL1yzQ\naHDSHlUSzGQceryd94AXxhsxQL1teg+uEiqr+U9+QJ4YVFJanVXrUxKxMlPO+lRM\nJbs1slXb3r/fSLEZIGbU00JOZFqecBcWmwl+g9iq68rNMcYL2aXLafgQ5m1po6f8\nVKKb/THFkbESgtBSyjnrXVSTyUUU3kG+1U4d/B2zVm7dIjZWMvmLGIaLrPJ1Zl7I\nCHvser2bwAaZkDGGDFZ+DYkwRL/44tQOpWeVCZ3NfyrcHWoUceyowoUwR92C9NQK\nCD2wSTVBgEVoZznHw3QBeFOsjc4+d5fipjCEkMcBVvP2GSqH7qpOXNqhh38H/fQ=\n=M1Yb\n-----END PGP SIGNATURE-----\n", "payload": "tree cbfbf1df9f0bb057bbb00e8eb09ee085c34d7ba8\nparent cfe1e330b5a5632f311bb4b45619b1a8d02878ec\nparent c858593ed013127ab35c7d5777156fe9f24a3717\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585345179 +0100\ncommitter GitHub <noreply@github.com> 1585345179 +0100\n\nRollup merge of #70457 - Centril:non-exhaustive-scrutinee-type, r=estebank\n\nnon-exhastive diagnostic: add note re. scrutinee type\n\nThis fixes https://github.com/rust-lang/rust/issues/67259 by adding a note:\n```\n    = note: the matched value is of type &[i32]\n```\nto non-exhaustive pattern matching errors.\n\nr? @varkor @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d3fa266cc107ffceced3c5580eb6327662c605", "html_url": "https://github.com/rust-lang/rust/commit/23d3fa266cc107ffceced3c5580eb6327662c605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d3fa266cc107ffceced3c5580eb6327662c605/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe1e330b5a5632f311bb4b45619b1a8d02878ec", "html_url": "https://github.com/rust-lang/rust/commit/cfe1e330b5a5632f311bb4b45619b1a8d02878ec"}, {"sha": "c858593ed013127ab35c7d5777156fe9f24a3717", "url": "https://api.github.com/repos/rust-lang/rust/commits/c858593ed013127ab35c7d5777156fe9f24a3717", "html_url": "https://github.com/rust-lang/rust/commit/c858593ed013127ab35c7d5777156fe9f24a3717"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "e29bbf8fa6eb13d740d135476cc5242fe39d9435", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -241,6 +241,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             }\n \n             adt_defined_here(cx, &mut err, pattern_ty, &witnesses);\n+            err.note(&format!(\"the matched value is of type `{}`\", pattern_ty));\n             err.emit();\n         });\n     }\n@@ -483,6 +484,7 @@ fn check_exhaustive<'p, 'tcx>(\n         \"ensure that all possible cases are being handled, \\\n          possibly by adding wildcards or more match arms\",\n     );\n+    err.note(&format!(\"the matched value is of type `{}`\", scrut_ty));\n     err.emit();\n }\n "}, {"sha": "3850b1d82bf5b107a8ad41301090b6e117ff717d", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -6,6 +6,7 @@ LL |     A = { let 0 = 0; 0 },\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     A = { if let 0 = 0 { /* */ } 0 },"}, {"sha": "4e1d50f42d461dfc46b9531d831f88aa830caa5e", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -6,6 +6,7 @@ LL |     let x: [i32; { let 0 = 0; 0 }] = [];\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let x: [i32; { if let 0 = 0 { /* */ } 0 }] = [];"}, {"sha": "2aabc0ca494cb62b945f12a650e3c004f3128704", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -6,6 +6,7 @@ LL | const X: i32 = { let 0 = 0; 0 };\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL | const X: i32 = { if let 0 = 0 { /* */ } 0 };\n@@ -19,6 +20,7 @@ LL | static Y: i32 = { let 0 = 0; 0 };\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL | static Y: i32 = { if let 0 = 0 { /* */ } 0 };\n@@ -32,6 +34,7 @@ LL |     const X: i32 = { let 0 = 0; 0 };\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { /* */ } 0 };\n@@ -45,6 +48,7 @@ LL |     const X: i32 = { let 0 = 0; 0 };\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { /* */ } 0 };"}, {"sha": "863e1372a9b8a328f688a2d1a96434d588e47a23", "filename": "src/test/ui/consts/const-pattern-irrefutable.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -9,6 +9,8 @@ LL |     let a = 4;\n    |         |\n    |         interpreted as a constant pattern, not a new variable\n    |         help: introduce a variable instead: `a_var`\n+   |\n+   = note: the matched value is of type `u8`\n \n error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=std::u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:13:9\n@@ -21,6 +23,8 @@ LL |     let c = 4;\n    |         |\n    |         interpreted as a constant pattern, not a new variable\n    |         help: introduce a variable instead: `c_var`\n+   |\n+   = note: the matched value is of type `u8`\n \n error[E0005]: refutable pattern in local binding: `0u8..=1u8` and `3u8..=std::u8::MAX` not covered\n   --> $DIR/const-pattern-irrefutable.rs:14:9\n@@ -33,6 +37,8 @@ LL |     let d = 4;\n    |         |\n    |         interpreted as a constant pattern, not a new variable\n    |         help: introduce a variable instead: `d_var`\n+   |\n+   = note: the matched value is of type `u8`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "02296e6de75fcced3c8760c439f45a82ec7cde18", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -3,6 +3,8 @@ error[E0005]: refutable pattern in function argument: `&[]`, `&[_]` and `&[_, _,\n    |\n LL | const fn slice(&[a, b]: &[i32]) -> i32 {\n    |                ^^^^^^^ patterns `&[]`, `&[_]` and `&[_, _, _, ..]` not covered\n+   |\n+   = note: the matched value is of type `&[i32]`\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n   --> $DIR/const_let_refutable.rs:3:17"}, {"sha": "5477170fb1e4162cd9659629ff11ad0b13b5cc6c", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -14,6 +14,7 @@ LL |     match K {\n    |           ^ pattern `&T` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&T`\n \n error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/match_ice.rs:11:9"}, {"sha": "64d640c0e9dbcae0785a578de4ddd15ff8b514df", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -14,6 +14,7 @@ LL |       let Helper::U(u) = Helper::T(t, []);\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `Helper<T, U>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Helper::U(u) = Helper::T(t, []) { /* */ }"}, {"sha": "fcc44b7635c1ae034636023e93f7d5bd26425d44", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -13,6 +13,7 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::option::Option<i32>`\n \n error: aborting due to previous error\n "}, {"sha": "5bf375a64843a2bb2c82b7ac291362c6c82ec512", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -12,6 +12,7 @@ LL |       match x {\n    |             ^ pattern `HastaLaVistaBaby` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Terminator`\n \n error: aborting due to previous error\n "}, {"sha": "d43dc6fd6494e4db45b74b75f72173828825d5ea", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -11,6 +11,7 @@ LL |     None,\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `std::option::Option<i32>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Some(y) = x { /* */ }"}, {"sha": "3ad841875e6917a6fba4c9ad73038b256526976c", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -8,6 +8,8 @@ LL |     for Some(x) in xs {}\n    |\n LL |     None,\n    |     ---- not covered\n+   |\n+   = note: the matched value is of type `std::option::Option<i32>`\n \n error: aborting due to previous error\n "}, {"sha": "06c2e6e5192353083386837bbbff96faecb77957", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -11,6 +11,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `std::result::Result<u32, !>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Ok(_x) = foo() { /* */ }"}, {"sha": "6c5d0091c5addb2d8a55b49df2f676773620af71", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n@@ -13,6 +14,7 @@ LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ce12b7853b6c10fb1f773edf9fb0dc4cd0636535", "filename": "src/test/ui/for/for-loop-refutable-pattern-error-message.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -3,6 +3,8 @@ error[E0005]: refutable pattern in `for` loop binding: `&std::i32::MIN..=0i32` a\n    |\n LL |     for &1 in [1].iter() {}\n    |         ^^ patterns `&std::i32::MIN..=0i32` and `&2i32..=std::i32::MAX` not covered\n+   |\n+   = note: the matched value is of type `&i32`\n \n error: aborting due to previous error\n "}, {"sha": "6c7a0cdb77adf680289a0e438be6cfa9a629f597", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     m!(0f32, core::f32::NEG_INFINITY..);\n    |        ^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `f32`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8\n@@ -13,6 +14,7 @@ LL |     m!(0f32, ..core::f32::INFINITY);\n    |        ^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `f32`\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8\n@@ -21,6 +23,7 @@ LL |     m!('a', ..core::char::MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `char`\n \n error[E0004]: non-exhaustive patterns: `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8\n@@ -29,6 +32,7 @@ LL |     m!('a', ..ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `char`\n \n error[E0004]: non-exhaustive patterns: `'\\u{0}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n@@ -37,6 +41,7 @@ LL |     m!('a', ALMOST_MIN..);\n    |        ^^^ pattern `'\\u{0}'` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `char`\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8\n@@ -45,6 +50,7 @@ LL |     m!('a', ..=ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `char`\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8\n@@ -53,6 +59,7 @@ LL |     m!('a', ..=VAL | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `char`\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:31:8\n@@ -61,6 +68,7 @@ LL |     m!('a', ..VAL_1 | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `char`\n \n error[E0004]: non-exhaustive patterns: `std::u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n@@ -69,6 +77,7 @@ LL |         m!(0, ..core::u8::MAX);\n    |            ^ pattern `std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `254u8..=std::u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n@@ -77,6 +86,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `254u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `0u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n@@ -85,6 +95,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0u8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `std::u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12\n@@ -93,6 +104,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `43u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n@@ -101,6 +113,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43u8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `43u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12\n@@ -109,6 +122,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43u8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `std::u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n@@ -117,6 +131,7 @@ LL |         m!(0, ..core::u16::MAX);\n    |            ^ pattern `std::u16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u16`\n \n error[E0004]: non-exhaustive patterns: `65534u16..=std::u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n@@ -125,6 +140,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `65534u16..=std::u16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u16`\n \n error[E0004]: non-exhaustive patterns: `0u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n@@ -133,6 +149,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0u16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u16`\n \n error[E0004]: non-exhaustive patterns: `std::u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12\n@@ -141,6 +158,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::u16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u16`\n \n error[E0004]: non-exhaustive patterns: `43u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n@@ -149,6 +167,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43u16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u16`\n \n error[E0004]: non-exhaustive patterns: `43u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12\n@@ -157,6 +176,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43u16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u16`\n \n error[E0004]: non-exhaustive patterns: `std::u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n@@ -165,6 +185,7 @@ LL |         m!(0, ..core::u32::MAX);\n    |            ^ pattern `std::u32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u32`\n \n error[E0004]: non-exhaustive patterns: `4294967294u32..=std::u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n@@ -173,6 +194,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `4294967294u32..=std::u32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u32`\n \n error[E0004]: non-exhaustive patterns: `0u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n@@ -181,6 +203,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0u32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u32`\n \n error[E0004]: non-exhaustive patterns: `std::u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12\n@@ -189,6 +212,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::u32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u32`\n \n error[E0004]: non-exhaustive patterns: `43u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n@@ -197,6 +221,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43u32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u32`\n \n error[E0004]: non-exhaustive patterns: `43u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12\n@@ -205,6 +230,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43u32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u32`\n \n error[E0004]: non-exhaustive patterns: `std::u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n@@ -213,6 +239,7 @@ LL |         m!(0, ..core::u64::MAX);\n    |            ^ pattern `std::u64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u64`\n \n error[E0004]: non-exhaustive patterns: `18446744073709551614u64..=std::u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n@@ -221,6 +248,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `18446744073709551614u64..=std::u64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u64`\n \n error[E0004]: non-exhaustive patterns: `0u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n@@ -229,6 +257,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0u64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u64`\n \n error[E0004]: non-exhaustive patterns: `std::u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12\n@@ -237,6 +266,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::u64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u64`\n \n error[E0004]: non-exhaustive patterns: `43u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n@@ -245,6 +275,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43u64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u64`\n \n error[E0004]: non-exhaustive patterns: `43u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12\n@@ -253,6 +284,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43u64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u64`\n \n error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n@@ -261,6 +293,7 @@ LL |         m!(0, ..core::u128::MAX);\n    |            ^ pattern `std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454u128..=std::u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n@@ -269,6 +302,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `340282366920938463463374607431768211454u128..=std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `0u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n@@ -277,6 +311,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12\n@@ -285,6 +320,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `43u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n@@ -293,6 +329,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `43u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12\n@@ -301,6 +338,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `std::i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n@@ -309,6 +347,7 @@ LL |         m!(0, ..core::i8::MAX);\n    |            ^ pattern `std::i8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `126i8..=std::i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n@@ -317,6 +356,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `126i8..=std::i8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `std::i8::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12\n@@ -325,6 +365,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `std::i8::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `std::i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12\n@@ -333,6 +374,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::i8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `43i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n@@ -341,6 +383,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43i8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `43i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12\n@@ -349,6 +392,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43i8` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `std::i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n@@ -357,6 +401,7 @@ LL |         m!(0, ..core::i16::MAX);\n    |            ^ pattern `std::i16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i16`\n \n error[E0004]: non-exhaustive patterns: `32766i16..=std::i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n@@ -365,6 +410,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `32766i16..=std::i16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i16`\n \n error[E0004]: non-exhaustive patterns: `std::i16::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12\n@@ -373,6 +419,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `std::i16::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i16`\n \n error[E0004]: non-exhaustive patterns: `std::i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12\n@@ -381,6 +428,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::i16::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i16`\n \n error[E0004]: non-exhaustive patterns: `43i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n@@ -389,6 +437,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43i16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i16`\n \n error[E0004]: non-exhaustive patterns: `43i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12\n@@ -397,6 +446,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43i16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i16`\n \n error[E0004]: non-exhaustive patterns: `std::i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n@@ -405,6 +455,7 @@ LL |         m!(0, ..core::i32::MAX);\n    |            ^ pattern `std::i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error[E0004]: non-exhaustive patterns: `2147483646i32..=std::i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n@@ -413,6 +464,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `2147483646i32..=std::i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error[E0004]: non-exhaustive patterns: `std::i32::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12\n@@ -421,6 +473,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `std::i32::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error[E0004]: non-exhaustive patterns: `std::i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12\n@@ -429,6 +482,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error[E0004]: non-exhaustive patterns: `43i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n@@ -437,6 +491,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43i32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error[E0004]: non-exhaustive patterns: `43i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12\n@@ -445,6 +500,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43i32` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error[E0004]: non-exhaustive patterns: `std::i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n@@ -453,6 +509,7 @@ LL |         m!(0, ..core::i64::MAX);\n    |            ^ pattern `std::i64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i64`\n \n error[E0004]: non-exhaustive patterns: `9223372036854775806i64..=std::i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n@@ -461,6 +518,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `9223372036854775806i64..=std::i64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i64`\n \n error[E0004]: non-exhaustive patterns: `std::i64::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12\n@@ -469,6 +527,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `std::i64::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i64`\n \n error[E0004]: non-exhaustive patterns: `std::i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12\n@@ -477,6 +536,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::i64::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i64`\n \n error[E0004]: non-exhaustive patterns: `43i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n@@ -485,6 +545,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43i64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i64`\n \n error[E0004]: non-exhaustive patterns: `43i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12\n@@ -493,6 +554,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43i64` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i64`\n \n error[E0004]: non-exhaustive patterns: `std::i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n@@ -501,6 +563,7 @@ LL |         m!(0, ..core::i128::MAX);\n    |            ^ pattern `std::i128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i128`\n \n error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726i128..=std::i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n@@ -509,6 +572,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `170141183460469231731687303715884105726i128..=std::i128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i128`\n \n error[E0004]: non-exhaustive patterns: `std::i128::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12\n@@ -517,6 +581,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `std::i128::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i128`\n \n error[E0004]: non-exhaustive patterns: `std::i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12\n@@ -525,6 +590,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `std::i128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i128`\n \n error[E0004]: non-exhaustive patterns: `43i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n@@ -533,6 +599,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43i128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i128`\n \n error[E0004]: non-exhaustive patterns: `43i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12\n@@ -541,6 +608,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43i128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i128`\n \n error: aborting due to 68 previous errors\n "}, {"sha": "aa4434e72b5c7d0328c9b2e9e41b7faf85156785", "filename": "src/test/ui/issues/issue-15129.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15129.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match (T::T1(()), V::V2(true)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `(T1(()), V2(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(T, V)`\n \n error: aborting due to previous error\n "}, {"sha": "c4667ce1c8ba1b53828960f18f3e574779bb4eb4", "filename": "src/test/ui/issues/issue-15381.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -3,6 +3,8 @@ error[E0005]: refutable pattern in `for` loop binding: `&[]`, `&[_]`, `&[_, _]`\n    |\n LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n    |         ^^^^^^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 1 more not covered\n+   |\n+   = note: the matched value is of type `&[u8]`\n \n error: aborting due to previous error\n "}, {"sha": "aab2559a155ae4289581e4d15a79daba37abe063", "filename": "src/test/ui/issues/issue-2111.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-2111.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-2111.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2111.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |   match (a,b) {\n    |         ^^^^^ pattern `(None, None)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(std::option::Option<usize>, std::option::Option<usize>)`\n \n error: aborting due to previous error\n "}, {"sha": "a2c58d6e051b54214ddd332fa42edf8feca04d2e", "filename": "src/test/ui/issues/issue-30240.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-30240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-30240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30240.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&str`\n \n error[E0004]: non-exhaustive patterns: `&_` not covered\n   --> $DIR/issue-30240.rs:6:11\n@@ -13,6 +14,7 @@ LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "97c34755189de9115a62fcaad0267619ae3d06fb", "filename": "src/test/ui/issues/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match () { }\n    |           ^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `()`\n \n error: aborting due to previous error\n "}, {"sha": "472d1a91e6a15835c94e5b936c43119ed0543c84", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match x { }\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `*const Bottom`\n \n error: aborting due to previous error\n "}, {"sha": "2f562b23692deffc3128c6a612eb893d436977b5", "filename": "src/test/ui/issues/issue-31561.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-31561.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-31561.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31561.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -15,6 +15,7 @@ LL |       let Thing::Foo(y) = Thing::Foo(1);\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `Thing`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Thing::Foo(y) = Thing::Foo(1) { /* */ }"}, {"sha": "6b2a5d76243d80812781564cc159181f1e0bf754", "filename": "src/test/ui/issues/issue-3601.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3601.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |         box NodeKind::Element(ed) => match ed.kind {\n    |                                            ^^^^^^^ pattern `Box(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::boxed::Box<ElementKind>`\n \n error: aborting due to previous error\n "}, {"sha": "8c162e55619e005b5e6aac41e9970f510d64c9ba", "filename": "src/test/ui/issues/issue-39362.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-39362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-39362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39362.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -10,6 +10,7 @@ LL |       match f {\n    |             ^ patterns `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "1e8852556b161690c46dfb8ba5fdff3346c278d4", "filename": "src/test/ui/issues/issue-4321.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-4321.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fissues%2Fissue-4321.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4321.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     println!(\"foo {:}\", match tup {\n    |                               ^^^ pattern `(true, false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(bool, bool)`\n \n error: aborting due to previous error\n "}, {"sha": "d378b6e8efe370a84ac92491ae3ceb4853ad9b55", "filename": "src/test/ui/match/issue-50900.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fmatch%2Fissue-50900.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fmatch%2Fissue-50900.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-50900.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -8,6 +8,7 @@ LL |     match Tag::ExifIFDPointer {\n    |           ^^^^^^^^^^^^^^^^^^^ pattern `Tag(Exif, _)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Tag`\n \n error: aborting due to previous error\n "}, {"sha": "98efe805a0b3491fde73c71445fa608e9119296a", "filename": "src/test/ui/missing/missing-items/issue-40221.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fissue-40221.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -11,6 +11,7 @@ LL |       match proto {\n    |             ^^^^^ pattern `C(QA)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `P`\n \n error: aborting due to previous error\n "}, {"sha": "b45e947f3ea3743babde9ab01fef094cc47eaf24", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match (0u8, 0u8) {\n    |           ^^^^^^^^^^ pattern `(2u8..=std::u8::MAX, _)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(u8, u8)`\n \n error[E0004]: non-exhaustive patterns: `((4u8..=std::u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:10:11\n@@ -13,6 +14,7 @@ LL |     match ((0u8,),) {\n    |           ^^^^^^^^^ pattern `((4u8..=std::u8::MAX))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `((u8,),)`\n \n error[E0004]: non-exhaustive patterns: `(Some(2u8..=std::u8::MAX))` not covered\n   --> $DIR/exhaustiveness-non-exhaustive.rs:14:11\n@@ -21,6 +23,7 @@ LL |     match (Some(0u8),) {\n    |           ^^^^^^^^^^^^ pattern `(Some(2u8..=std::u8::MAX))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(std::option::Option<u8>,)`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "351700a6aa52983ac9aec7a4a7ec86dc7ab77326", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -6,6 +6,7 @@ LL |     let 0 | (1 | 2) = 0;\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let 0 | (1 | 2) = 0 { /* */ }\n@@ -18,6 +19,7 @@ LL |     match 0 {\n    |           ^ patterns `std::i32::MIN..=-1i32` and `3i32..=std::i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0fa77fb73da1fa570683cd531ca5f167281a2770", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match uninhab_ref() {\n    |           ^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&!`\n \n error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:27:11\n@@ -18,6 +19,7 @@ LL |       match uninhab_union() {\n    |             ^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "edc5ece558a700719ddc2e3bcb850a5930b7e060", "filename": "src/test/ui/pattern/usefulness/exhaustive_integer_patterns.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -17,6 +17,7 @@ LL |     match x {\n    |           ^ pattern `128u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n   --> $DIR/exhaustive_integer_patterns.rs:33:11\n@@ -25,6 +26,7 @@ LL |     match x {\n    |           ^ patterns `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error: unreachable pattern\n   --> $DIR/exhaustive_integer_patterns.rs:44:9\n@@ -39,6 +41,7 @@ LL |     match x {\n    |           ^ patterns `std::i8::MIN..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `std::i8::MIN` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:83:11\n@@ -47,6 +50,7 @@ LL |     match 0i8 {\n    |           ^^^ pattern `std::i8::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `0i16` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:91:11\n@@ -55,6 +59,7 @@ LL |     match 0i16 {\n    |           ^^^^ pattern `0i16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i16`\n \n error[E0004]: non-exhaustive patterns: `128u8..=std::u8::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:109:11\n@@ -63,6 +68,7 @@ LL |     match 0u8 {\n    |           ^^^ pattern `128u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=std::u8::MAX, Some(_))` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:121:11\n@@ -71,6 +77,7 @@ LL |     match (0u8, Some(())) {\n    |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=std::u8::MAX, Some(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(u8, std::option::Option<()>)`\n \n error[E0004]: non-exhaustive patterns: `(126u8..=127u8, false)` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:126:11\n@@ -79,6 +86,7 @@ LL |     match (0u8, true) {\n    |           ^^^^^^^^^^^ pattern `(126u8..=127u8, false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(u8, bool)`\n \n error: multiple patterns covering the same range\n   --> $DIR/exhaustive_integer_patterns.rs:141:9\n@@ -101,6 +109,7 @@ LL |     match 0u128 {\n    |           ^^^^^ pattern `std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `5u128..=std::u128::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:150:11\n@@ -109,6 +118,7 @@ LL |     match 0u128 {\n    |           ^^^^^ pattern `5u128..=std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `0u128..=3u128` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:154:11\n@@ -117,6 +127,7 @@ LL |     match 0u128 {\n    |           ^^^^^ pattern `0u128..=3u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n \n error: unreachable pattern\n   --> $DIR/exhaustive_integer_patterns.rs:162:9"}, {"sha": "66f904aced11ba5bfa24bbf3b02745e13c347c54", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match (A, ()) {\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(Enum, ())`\n \n error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:14:11\n@@ -13,6 +14,7 @@ LL |     match (A, A) {\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(Enum, Enum)`\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:18:11\n@@ -21,6 +23,7 @@ LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `((Enum, ()), ())`\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:22:11\n@@ -29,6 +32,7 @@ LL |     match ((A, ()), A) {\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `((Enum, ()), Enum)`\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:26:11\n@@ -37,6 +41,7 @@ LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `((Enum, ()), ())`\n \n error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:31:11\n@@ -48,6 +53,7 @@ LL |     match S(A, ()) {\n    |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `S`\n \n error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n   --> $DIR/issue-35609.rs:35:11\n@@ -59,6 +65,7 @@ LL |     match (Sd { x: A, y: () }) {\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Sd`\n \n error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:39:11\n@@ -67,6 +74,7 @@ LL |     match Some(A) {\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::option::Option<Enum>`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "09b92fc92f32ae34311bb0510fde51bc7e3f5f5a", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(bool, bool)`\n \n error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n   --> $DIR/match-arm-statics-2.rs:34:11\n@@ -21,6 +22,7 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::option::Option<std::option::Option<Direction>>`\n \n error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n   --> $DIR/match-arm-statics-2.rs:53:11\n@@ -35,6 +37,7 @@ LL |       match (Foo { bar: Some(North), baz: NewBool(true) }) {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "323449eebc5409649f5ed11a9471fe8767493903", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match buf {\n    |           ^^^ patterns `&[0u8..=64u8, _, _, _]` and `&[66u8..=std::u8::MAX, _, _, _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[u8; 4]`\n \n error[E0004]: non-exhaustive patterns: `&[]`, `&[_]`, `&[_, _]` and 2 more not covered\n   --> $DIR/match-byte-array-patterns-2.rs:10:11\n@@ -13,6 +14,7 @@ LL |     match buf {\n    |           ^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[u8]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1f6503e3e9c719975afa9ef0a089717e617c7a04", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -35,6 +35,7 @@ LL |     match_empty!(0u8);\n    |                  ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:66:18\n@@ -46,6 +47,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:68:18\n@@ -59,6 +61,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/match-empty-exhaustive_patterns.rs:70:18\n@@ -73,6 +76,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:72:18\n@@ -89,6 +93,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:74:18\n@@ -109,6 +114,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:76:18\n@@ -122,6 +128,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:79:18\n@@ -130,6 +137,7 @@ LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:81:18\n@@ -141,6 +149,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:83:18\n@@ -154,6 +163,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:85:18\n@@ -168,6 +178,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:87:18\n@@ -184,6 +195,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:89:18\n@@ -204,6 +216,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/match-empty-exhaustive_patterns.rs:91:18\n@@ -217,6 +230,7 @@ LL |       match_false!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum5`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "08095f6e7fb12f4ceafdc419897da3f34e52343a", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -8,6 +8,7 @@ LL |     match_false!(x); // Not detected as unreachable nor exhaustive.\n    |                  ^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n   --> $DIR/match-empty.rs:63:18\n@@ -16,6 +17,7 @@ LL |     match_empty!(0u8);\n    |                  ^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n   --> $DIR/match-empty.rs:65:18\n@@ -27,6 +29,7 @@ LL |     match_empty!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/match-empty.rs:67:18\n@@ -40,6 +43,7 @@ LL |       match_empty!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/match-empty.rs:69:18\n@@ -54,6 +58,7 @@ LL |       match_empty!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/match-empty.rs:71:18\n@@ -70,6 +75,7 @@ LL |       match_empty!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/match-empty.rs:73:18\n@@ -90,6 +96,7 @@ LL |       match_empty!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/match-empty.rs:75:18\n@@ -103,6 +110,7 @@ LL |       match_empty!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum5`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-empty.rs:78:18\n@@ -111,6 +119,7 @@ LL |     match_false!(0u8);\n    |                  ^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct(_)` not covered\n   --> $DIR/match-empty.rs:80:18\n@@ -122,6 +131,7 @@ LL |     match_false!(NonEmptyStruct(true));\n    |                  ^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyStruct`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n   --> $DIR/match-empty.rs:82:18\n@@ -135,6 +145,7 @@ LL |       match_false!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion1`\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n   --> $DIR/match-empty.rs:84:18\n@@ -149,6 +160,7 @@ LL |       match_false!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyUnion2`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/match-empty.rs:86:18\n@@ -165,6 +177,7 @@ LL |       match_false!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum1`\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/match-empty.rs:88:18\n@@ -185,6 +198,7 @@ LL |       match_false!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum2`\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/match-empty.rs:90:18\n@@ -198,6 +212,7 @@ LL |       match_false!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonEmptyEnum5`\n \n error: aborting due to 15 previous errors\n "}, {"sha": "84cfe1da315dab35d2b89977e523141f64afe7f2", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match 0 { 1 => () }\n    |           ^ patterns `std::i32::MIN..=0i32` and `2i32..=std::i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-non-exhaustive.rs:3:11\n@@ -13,6 +14,7 @@ LL |     match 0 { 0 if false => () }\n    |           ^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62e6e662fa7fae45d5667c1d2cf8d71f63e95837", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -10,6 +10,7 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::option::Option<private::Private>`\n \n error: aborting due to previous error\n "}, {"sha": "ba5312d213590d6690d53ebfb99309ff99916613", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match list {\n    |           ^^^^ pattern `&[_, Some(_), .., None, _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[std::option::Option<()>]`\n \n error: aborting due to previous error\n "}, {"sha": "29aa0c1c92670e04dc8b401094b067da7857f8d9", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -20,6 +20,7 @@ LL |       match e1 {\n    |             ^^ patterns `B` and `C` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `E`\n \n error[E0005]: refutable pattern in local binding: `B` and `C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:36:9\n@@ -44,6 +45,7 @@ LL |       let E::A = e;\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `E`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let E::A = e { /* */ }\n@@ -71,6 +73,7 @@ LL |       match e {\n    |             ^ patterns `&B` and `&C` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&E`\n \n error[E0005]: refutable pattern in local binding: `&B` and `&C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:44:9\n@@ -95,6 +98,7 @@ LL |       let E::A = e;\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `&E`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let E::A = e { /* */ }\n@@ -122,6 +126,7 @@ LL |       match e {\n    |             ^ patterns `&&mut &B` and `&&mut &C` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&&mut &E`\n \n error[E0005]: refutable pattern in local binding: `&&mut &B` and `&&mut &C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:52:9\n@@ -146,6 +151,7 @@ LL |       let E::A = e;\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `&&mut &E`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let E::A = e { /* */ }\n@@ -168,6 +174,7 @@ LL |       match e {\n    |             ^ pattern `None` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Opt`\n \n error[E0005]: refutable pattern in local binding: `None` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:69:9\n@@ -187,6 +194,7 @@ LL |       let Opt::Some(ref _x) = e;\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `Opt`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Opt::Some(ref _x) = e { /* */ }"}, {"sha": "4835fa86cc0eeef5cc8c16956d9bbefbea7b84e3", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-float-range-match.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-float-range-match.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match 0.0 {\n    |           ^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `f64`\n \n error: aborting due to previous error\n "}, {"sha": "c9f26db6f1f8dcd3bcaba1c956930bcd0f48cb90", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match (l1, l2) {\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(std::option::Option<&[T]>, std::result::Result<&[T], ()>)`\n \n error[E0004]: non-exhaustive patterns: `A(C)` not covered\n   --> $DIR/non-exhaustive-match-nested.rs:15:11\n@@ -19,6 +20,7 @@ LL |     match x {\n    |           ^ pattern `A(C)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `T`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "358ecf2f2d09321b33dde858ad255025140907f8", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -11,6 +11,7 @@ LL |     match x { T::B => { } }\n    |           ^ pattern `A` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `T`\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n   --> $DIR/non-exhaustive-match.rs:13:11\n@@ -19,6 +20,7 @@ LL |     match true {\n    |           ^^^^ pattern `false` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `bool`\n \n error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n   --> $DIR/non-exhaustive-match.rs:16:11\n@@ -32,6 +34,7 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     ---- not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::option::Option<i32>`\n \n error[E0004]: non-exhaustive patterns: `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n   --> $DIR/non-exhaustive-match.rs:19:11\n@@ -40,6 +43,7 @@ LL |     match (2, 3, 4) {\n    |           ^^^^^^^^^ patterns `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(i32, i32, i32)`\n \n error[E0004]: non-exhaustive patterns: `(A, A)` not covered\n   --> $DIR/non-exhaustive-match.rs:23:11\n@@ -48,6 +52,7 @@ LL |     match (T::A, T::A) {\n    |           ^^^^^^^^^^^^ pattern `(A, A)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(T, T)`\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/non-exhaustive-match.rs:27:11\n@@ -62,6 +67,7 @@ LL |     match T::A {\n    |           ^^^^ pattern `B` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `T`\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n   --> $DIR/non-exhaustive-match.rs:38:11\n@@ -70,6 +76,7 @@ LL |     match *vec {\n    |           ^^^^ pattern `[]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `[std::option::Option<isize>]`\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n   --> $DIR/non-exhaustive-match.rs:51:11\n@@ -78,6 +85,7 @@ LL |     match *vec {\n    |           ^^^^ pattern `[_, _, _, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `[f32]`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "c9ed12aae5fbc128c202799fe0c14d6950f30f6e", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -11,6 +11,7 @@ LL |       match (Foo { first: true, second: None }) {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n \n error[E0004]: non-exhaustive patterns: `Red` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:23:11\n@@ -27,6 +28,7 @@ LL |       match Color::Red {\n    |             ^^^^^^^^^^ pattern `Red` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Color`\n \n error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:35:11\n@@ -44,6 +46,7 @@ LL |       match Direction::North {\n    |             ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Direction`\n \n error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:46:11\n@@ -57,6 +60,7 @@ LL |       match ExcessiveEnum::First {\n    |             ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `ExcessiveEnum`\n \n error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:54:11\n@@ -73,6 +77,7 @@ LL |       match Color::Red {\n    |             ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Color`\n \n error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:70:11\n@@ -81,6 +86,7 @@ LL |     match *x {\n    |           ^^ pattern `[Second(true), Second(false)]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `[Enum]`\n \n error[E0004]: non-exhaustive patterns: `((), false)` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:83:11\n@@ -89,6 +95,7 @@ LL |     match ((), false) {\n    |           ^^^^^^^^^^^ pattern `((), false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `((), bool)`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f5895c01599d7286bce21d18d639fcbe91483171", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-errors.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-errors.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -3,6 +3,8 @@ error[E0005]: refutable pattern in function argument: `(_, _)` not covered\n    |\n LL | fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n    |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n+   |\n+   = note: the matched value is of type `(isize, (std::option::Option<isize>, isize))`\n \n error[E0005]: refutable pattern in local binding: `(std::i32::MIN..=0i32, _)` and `(2i32..=std::i32::MAX, _)` not covered\n   --> $DIR/refutable-pattern-errors.rs:7:9\n@@ -12,6 +14,7 @@ LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `(i32, (std::option::Option<i32>, i32))`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let (1, (Some(1), 2..=3)) = (1, (None, 2)) { /* */ }"}, {"sha": "c9d8cf43f95fdb1fd0ae4176d4633f76e9b8d980", "filename": "src/test/ui/pattern/usefulness/refutable-pattern-in-fn-arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Frefutable-pattern-in-fn-arg.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -3,6 +3,8 @@ error[E0005]: refutable pattern in function argument: `_` not covered\n    |\n LL |     let f = |3: isize| println!(\"hello\");\n    |              ^ pattern `_` not covered\n+   |\n+   = note: the matched value is of type `isize`\n \n error: aborting due to previous error\n "}, {"sha": "8b85eaeda0acf0cc5f51f83cc7ff6d3279931773", "filename": "src/test/ui/pattern/usefulness/slice-patterns-exhaustiveness.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match s2 {\n    |           ^^ pattern `&[false, _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool; 2]`\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:12:11\n@@ -13,6 +14,7 @@ LL |     match s3 {\n    |           ^^ pattern `&[false, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool; 3]`\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:16:11\n@@ -21,6 +23,7 @@ LL |     match s10 {\n    |           ^^^ pattern `&[false, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool; 10]`\n \n error[E0004]: non-exhaustive patterns: `&[false, true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:25:11\n@@ -29,6 +32,7 @@ LL |     match s2 {\n    |           ^^ pattern `&[false, true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool; 2]`\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:30:11\n@@ -37,6 +41,7 @@ LL |     match s3 {\n    |           ^^ pattern `&[false, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool; 3]`\n \n error[E0004]: non-exhaustive patterns: `&[false, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:35:11\n@@ -45,6 +50,7 @@ LL |     match s {\n    |           ^ pattern `&[false, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:42:11\n@@ -53,6 +59,7 @@ LL |     match s {\n    |           ^ pattern `&[_, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:46:11\n@@ -61,6 +68,7 @@ LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[false, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:51:11\n@@ -69,6 +77,7 @@ LL |     match s {\n    |           ^ pattern `&[false, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[false, _, ..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:56:11\n@@ -77,6 +86,7 @@ LL |     match s {\n    |           ^ pattern `&[false, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[_, .., false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:62:11\n@@ -85,6 +95,7 @@ LL |     match s {\n    |           ^ pattern `&[_, .., false]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[_, _, .., true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:69:11\n@@ -93,6 +104,7 @@ LL |     match s {\n    |           ^ pattern `&[_, _, .., true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[true, _, .., _]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:76:11\n@@ -101,6 +113,7 @@ LL |     match s {\n    |           ^ pattern `&[true, _, .., _]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[..]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:85:11\n@@ -109,6 +122,7 @@ LL |     match s {\n    |           ^ pattern `&[..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[true]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:89:11\n@@ -117,6 +131,7 @@ LL |     match s {\n    |           ^ pattern `&[true]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool]`\n \n error[E0004]: non-exhaustive patterns: `&[false]` not covered\n   --> $DIR/slice-patterns-exhaustiveness.rs:97:11\n@@ -125,6 +140,7 @@ LL |     match s1 {\n    |           ^^ pattern `&[false]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[bool; 1]`\n \n error: aborting due to 16 previous errors\n "}, {"sha": "23ff6c626f759c63e078f810a4b0dfb1040de1b0", "filename": "src/test/ui/pattern/usefulness/struct-like-enum-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -12,6 +12,7 @@ LL |       match x {\n    |             ^ pattern `B { x: Some(_) }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `A`\n \n error: aborting due to previous error\n "}, {"sha": "ca8f67f3c8df2d88c0de7448da6b4207dc035bdd", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -8,6 +8,7 @@ LL |     match x {\n    |           ^ pattern `Foo(_, _)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "91ea323f07bb297eff237ff53012553634f296f8", "filename": "src/test/ui/precise_pointer_size_matching.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match 0isize {\n    |           ^^^^^^ patterns `std::isize::MIN..=-6isize` and `21isize..=std::isize::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n \n error[E0004]: non-exhaustive patterns: `0usize` and `21usize..=std::usize::MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:29:11\n@@ -13,6 +14,7 @@ LL |     match 0usize {\n    |           ^^^^^^ patterns `0usize` and `21usize..=std::usize::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d3e05498a4a015b5b1d5009d6419c8ec2a7dd80a", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -11,6 +11,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `std::result::Result<u32, &R>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Ok(x) = res { /* */ }"}, {"sha": "18d8f5481c9fbf39aa7274b2587e524488ae71bc", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match sl {\n    |           ^^ pattern `&[]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[u8]`\n \n error: aborting due to previous error\n "}, {"sha": "28e450336f58d8d033be8b0c15ad1b0df5ee3094", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `enums::EmptyNonExhaustiveEnum`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/enum.rs:16:11\n@@ -13,6 +14,7 @@ LL |     match enum_unit {\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `enums::NonExhaustiveEnum`\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/enum.rs:23:11\n@@ -21,6 +23,7 @@ LL |     match enum_unit {};\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `enums::NonExhaustiveEnum`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "752b08b2b65f1f10712b321c5e6a88056d997df2", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate_empty_match.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -18,6 +18,7 @@ LL |       match NonExhaustiveEnum::Unit {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ patterns `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NonExhaustiveEnum`\n \n error[E0004]: non-exhaustive patterns: `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/enum_same_crate_empty_match.rs:35:11\n@@ -39,6 +40,7 @@ LL |       match NormalEnum::Unit {}\n    |             ^^^^^^^^^^^^^^^^ patterns `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `NormalEnum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bd136333b761d17895fdf81ef9a4f4fecf190c9f", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedEnum`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n   --> $DIR/indirect_match.rs:23:11\n@@ -13,6 +14,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedStruct`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n   --> $DIR/indirect_match.rs:27:11\n@@ -21,6 +23,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedTupleStruct`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n   --> $DIR/indirect_match.rs:33:11\n@@ -29,6 +32,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "42bf67c0a45dfd06b8f63f7df373528074791033", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -8,6 +8,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `IndirectUninhabitedEnum`\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedStruct` is non-empty\n   --> $DIR/indirect_match_same_crate.rs:38:11\n@@ -19,6 +20,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `IndirectUninhabitedStruct`\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedTupleStruct` is non-empty\n   --> $DIR/indirect_match_same_crate.rs:42:11\n@@ -30,6 +32,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `IndirectUninhabitedTupleStruct`\n \n error[E0004]: non-exhaustive patterns: type `IndirectUninhabitedVariants` is non-empty\n   --> $DIR/indirect_match_same_crate.rs:48:11\n@@ -41,6 +44,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `IndirectUninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5211b5772642828edebd778b9a0195ba03542d48", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedEnum`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:27:11\n@@ -13,6 +14,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedStruct`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:31:11\n@@ -21,6 +23,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedTupleStruct`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:37:11\n@@ -29,6 +32,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::IndirectUninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "961b3e567325f3684354518359e2ce8618ee93a5", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedEnum`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n   --> $DIR/match.rs:23:11\n@@ -13,6 +14,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedStruct`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n   --> $DIR/match.rs:27:11\n@@ -21,6 +23,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedTupleStruct`\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/match.rs:31:11\n@@ -36,6 +39,7 @@ LL |     #[non_exhaustive] Struct { x: ! }\n    |                       ------ not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e4d0c7022f3b41c9a86d9bec898cb2e65e1c6d7a", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -10,6 +10,7 @@ LL |       match x {}\n    |             ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `UninhabitedStruct`\n \n error[E0004]: non-exhaustive patterns: type `UninhabitedTupleStruct` is non-empty\n   --> $DIR/match_same_crate.rs:34:11\n@@ -21,6 +22,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `UninhabitedTupleStruct`\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/match_same_crate.rs:38:11\n@@ -37,6 +39,7 @@ LL |       match x {}\n    |             ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `UninhabitedVariants`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c489edeb699d8573287791c05c70e9d395d9da20", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -5,6 +5,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedEnum`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n   --> $DIR/match_with_exhaustive_patterns.rs:26:11\n@@ -13,6 +14,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedStruct`\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n   --> $DIR/match_with_exhaustive_patterns.rs:30:11\n@@ -21,6 +23,7 @@ LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedTupleStruct`\n \n error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n   --> $DIR/match_with_exhaustive_patterns.rs:34:11\n@@ -36,6 +39,7 @@ LL |     #[non_exhaustive] Struct { x: ! }\n    |                       ------ not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `uninhabited::UninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1512eac76670d761731493be53ba22354c92b8ba", "filename": "src/test/ui/suggestions/const-pat-non-exaustive-let-new-var.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-pat-non-exaustive-let-new-var.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -9,6 +9,8 @@ LL |     let A = 3;\n ...\n LL |     const A: i32 = 2;\n    |     ----------------- constant defined here\n+   |\n+   = note: the matched value is of type `i32`\n \n error: aborting due to previous error\n "}, {"sha": "e1ff38f3057f142e2052511b5fe47253edd7d99c", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -15,6 +15,7 @@ LL |       let Foo::D(_y) = x;\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `Foo`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Foo::D(_y) = x { /* */ }"}, {"sha": "bfe37b5029c6e0852cda4075bb81c0c8dc85db97", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d3fa266cc107ffceced3c5580eb6327662c605/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=23d3fa266cc107ffceced3c5580eb6327662c605", "patch": "@@ -10,6 +10,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::result::Result<u32, &Void>`\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n@@ -21,6 +22,7 @@ LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&Void`\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n@@ -29,6 +31,7 @@ LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(Void,)`\n \n error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n@@ -37,6 +40,7 @@ LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `[Void; 1]`\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:29:19\n@@ -45,6 +49,7 @@ LL |     let _ = match x {\n    |                   ^ pattern `&[_, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&[Void]`\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:37:19\n@@ -58,6 +63,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |     --- not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `std::result::Result<u32, Void>`\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:42:9\n@@ -72,6 +78,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `std::result::Result<u32, Void>`\n help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     if let Ok(x) = x { /* */ }"}]}