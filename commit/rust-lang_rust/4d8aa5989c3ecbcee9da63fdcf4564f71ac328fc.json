{"sha": "4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOGFhNTk4OWMzZWNiY2VlOWRhNjNmZGNmNDU2NGY3MWFjMzI4ZmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-24T23:01:38Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-24T23:01:38Z"}, "message": "Use suggestions for `printf` format", "tree": {"sha": "e28251b7ff5a9e6e241448130b35381f47168f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28251b7ff5a9e6e241448130b35381f47168f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "html_url": "https://github.com/rust-lang/rust/commit/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e37625e6e9d90ee8b7200313de3915e2fc15a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e37625e6e9d90ee8b7200313de3915e2fc15a0", "html_url": "https://github.com/rust-lang/rust/commit/f9e37625e6e9d90ee8b7200313de3915e2fc15a0"}], "stats": {"total": 116, "additions": 102, "deletions": 14}, "files": [{"sha": "ad05db91770a3031b0fa8394118ce1e41cf03d74", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "patch": "@@ -948,6 +948,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                 ($kind:ident) => {{\n                     let mut show_doc_note = false;\n \n+                    let mut suggestions = vec![];\n                     for sub in foreign::$kind::iter_subs(fmt_str) {\n                         let trn = match sub.translate() {\n                             Some(trn) => trn,\n@@ -956,6 +957,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                             None => continue,\n                         };\n \n+                        let pos = sub.position();\n                         let sub = String::from(sub.as_str());\n                         if explained.contains(&sub) {\n                             continue;\n@@ -967,7 +969,14 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                             show_doc_note = true;\n                         }\n \n-                        diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                        if let Some((start, end)) = pos {\n+                            // account for `\"` and account for raw strings `r#`\n+                            let padding = str_style.map(|i| i + 2).unwrap_or(1);\n+                            let sp = fmt_sp.from_inner_byte_pos(start + padding, end + padding);\n+                            suggestions.push((sp, trn));\n+                        } else {\n+                            diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                        }\n                     }\n \n                     if show_doc_note {\n@@ -976,6 +985,12 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                             \" formatting not supported; see the documentation for `std::fmt`\",\n                         ));\n                     }\n+                    if suggestions.len() > 0 {\n+                        diag.multipart_suggestion(\n+                            \"format specifiers in Rust are written using `{}`\",\n+                            suggestions,\n+                        );\n+                    }\n                 }};\n             }\n "}, {"sha": "115f51c5e813a923130acff8ca4d21fb65220c6a", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "patch": "@@ -14,7 +14,7 @@ pub mod printf {\n     /// Represents a single `printf`-style substitution.\n     #[derive(Clone, PartialEq, Debug)]\n     pub enum Substitution<'a> {\n-        /// A formatted output substitution.\n+        /// A formatted output substitution with its internal byte offset.\n         Format(Format<'a>),\n         /// A literal `%%` escape.\n         Escape,\n@@ -28,6 +28,23 @@ pub mod printf {\n             }\n         }\n \n+        pub fn position(&self) -> Option<(usize, usize)> {\n+            match *self {\n+                Substitution::Format(ref fmt) => Some(fmt.position),\n+                _ => None,\n+            }\n+        }\n+\n+        pub fn set_position(&mut self, start: usize, end: usize) {\n+            match self {\n+                Substitution::Format(ref mut fmt) => {\n+                    fmt.position = (start, end);\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+\n         /// Translate this substitution into an equivalent Rust formatting directive.\n         ///\n         /// This ignores cases where the substitution does not have an exact equivalent, or where\n@@ -57,6 +74,8 @@ pub mod printf {\n         pub length: Option<&'a str>,\n         /// Type of parameter being converted.\n         pub type_: &'a str,\n+        /// Byte offset for the start and end of this formatting directive.\n+        pub position: (usize, usize),\n     }\n \n     impl<'a> Format<'a> {\n@@ -257,19 +276,28 @@ pub mod printf {\n     pub fn iter_subs(s: &str) -> Substitutions {\n         Substitutions {\n             s,\n+            pos: 0,\n         }\n     }\n \n     /// Iterator over substitutions in a string.\n     pub struct Substitutions<'a> {\n         s: &'a str,\n+        pos: usize,\n     }\n \n     impl<'a> Iterator for Substitutions<'a> {\n         type Item = Substitution<'a>;\n         fn next(&mut self) -> Option<Self::Item> {\n-            let (sub, tail) = parse_next_substitution(self.s)?;\n+            let (mut sub, tail) = parse_next_substitution(self.s)?;\n             self.s = tail;\n+            match sub {\n+                Substitution::Format(_) => if let Some((start, end)) = sub.position() {\n+                    sub.set_position(start + self.pos, end + self.pos);\n+                    self.pos += end;\n+                }\n+                Substitution::Escape => self.pos += 2,\n+            }\n             Some(sub)\n         }\n \n@@ -301,7 +329,9 @@ pub mod printf {\n                 _ => {/* fall-through */},\n             }\n \n-            Cur::new_at_start(&s[start..])\n+            //let _ = Cur::new_at_start_with_pos(&s[..], start);\n+            //Cur::new_at_start(&s[start..])\n+            Cur::new_at_start_with_pos(&s[..], start)\n         };\n \n         // This is meant to be a translation of the following regex:\n@@ -355,6 +385,7 @@ pub mod printf {\n                     precision: None,\n                     length: None,\n                     type_: at.slice_between(next).unwrap(),\n+                    position: (start.at, next.at),\n                 }),\n                 next.slice_after()\n             ));\n@@ -541,6 +572,7 @@ pub mod printf {\n         drop(next);\n \n         end = at;\n+        let position = (start.at, end.at);\n \n         let f = Format {\n             span: start.slice_between(end).unwrap(),\n@@ -550,6 +582,7 @@ pub mod printf {\n             precision,\n             length,\n             type_,\n+            position,\n         };\n         Some((Substitution::Format(f), end.slice_after()))\n     }\n@@ -755,6 +788,12 @@ pub mod shell {\n             }\n         }\n \n+        pub fn position(&self) -> Option<(usize, usize)> {\n+            match *self {\n+                _ => None,\n+            }\n+        }\n+\n         pub fn translate(&self) -> Option<String> {\n             match *self {\n                 Substitution::Ordinal(n) => Some(format!(\"{{{}}}\", n)),\n@@ -918,7 +957,7 @@ mod strcursor {\n \n     pub struct StrCursor<'a> {\n         s: &'a str,\n-        at: usize,\n+        pub at: usize,\n     }\n \n     impl<'a> StrCursor<'a> {\n@@ -929,6 +968,13 @@ mod strcursor {\n             }\n         }\n \n+        pub fn new_at_start_with_pos(s: &'a str, at: usize) -> StrCursor<'a> {\n+            StrCursor {\n+                s,\n+                at,\n+            }\n+        }\n+\n         pub fn at_next_cp(mut self) -> Option<StrCursor<'a>> {\n             match self.try_seek_right_cp() {\n                 true => Some(self),"}, {"sha": "a126998355e0c83002809c09cc26b413c60bba8f", "filename": "src/test/ui/ifmt-bad-arg.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr?ref=4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "patch": "@@ -178,9 +178,10 @@ error: argument never used\n   --> $DIR/ifmt-bad-arg.rs:66:27\n    |\n LL |     format!(\"foo %s baz\", \"bar\"); //~ ERROR: argument never used\n-   |                           ^^^^^\n+   |                  --       ^^^^^\n+   |                  |\n+   |                  help: format specifiers in Rust are written using `{}`: `{}`\n    |\n-   = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n \n error: there is no argument named `foo`"}, {"sha": "33401424c9ada42cce9be51c6bc30d09e617e7fb", "filename": "src/test/ui/macros/format-foreign.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs?ref=4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "patch": "@@ -11,6 +11,11 @@\n fn main() {\n     println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n     println!(\"%1$*2$.*3$f\", 123.456); //~ ERROR never used\n+    println!(r###\"%.*3$s\n+        %s!\\n\n+\"###, \"Hello,\", \"World\", 4);\n+    //~^ ERROR multiple unused formatting arguments\n+    // correctly account for raw strings in inline suggestions\n \n     // This should *not* produce hints, on the basis that there's equally as\n     // many \"correct\" format specifiers.  It's *probably* just an actual typo."}, {"sha": "93e68183b140ecc50b44a1cf07a4104c953ece76", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=4d8aa5989c3ecbcee9da63fdcf4564f71ac328fc", "patch": "@@ -6,33 +6,54 @@ LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unus\n    |              |\n    |              multiple missing formatting specifiers\n    |\n-   = help: `%.*3$s` should be written as `{:.2$}`\n-   = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n+help: format specifiers in Rust are written using `{}`\n+   |\n+LL |     println!(\"{:.2$} {}!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n+   |               ^^^^^^ ^^\n \n error: argument never used\n   --> $DIR/format-foreign.rs:13:29\n    |\n LL |     println!(\"%1$*2$.*3$f\", 123.456); //~ ERROR never used\n-   |                             ^^^^^^^\n+   |               -----------   ^^^^^^^\n+   |               |\n+   |               help: format specifiers in Rust are written using `{}`: `{0:1$.2$}`\n+   |\n+   = note: printf formatting not supported; see the documentation for `std::fmt`\n+\n+error: multiple unused formatting arguments\n+  --> $DIR/format-foreign.rs:16:7\n+   |\n+LL |       println!(r###\"%.*3$s\n+   |  ______________-\n+LL | |         %s!/n\n+LL | | \"###, \"Hello,\", \"World\", 4);\n+   | |    -  ^^^^^^^^  ^^^^^^^  ^\n+   | |____|\n+   |      multiple missing formatting specifiers\n    |\n-   = help: `%1$*2$.*3$f` should be written as `{0:1$.2$}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n+help: format specifiers in Rust are written using `{}`\n+   |\n+LL |     println!(r###\"{:.2$}\n+LL |         {}!/n\n+   |\n \n error: argument never used\n-  --> $DIR/format-foreign.rs:17:30\n+  --> $DIR/format-foreign.rs:22:30\n    |\n LL |     println!(\"{} %f\", \"one\", 2.0); //~ ERROR never used\n    |                              ^^^\n \n error: named argument never used\n-  --> $DIR/format-foreign.rs:19:39\n+  --> $DIR/format-foreign.rs:24:39\n    |\n LL |     println!(\"Hi there, $NAME.\", NAME=\"Tim\"); //~ ERROR never used\n    |                                       ^^^^^\n    |\n    = help: `$NAME` should be written as `{NAME}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}