{"sha": "a306531e6aa7995145dc041166f68ea950aca1a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDY1MzFlNmFhNzk5NTE0NWRjMDQxMTY2ZjY4ZWE5NTBhY2ExYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T08:40:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T08:40:10Z"}, "message": "Decouple", "tree": {"sha": "1ee46d9899ee94c748b51aaf42fd3e08a52993bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee46d9899ee94c748b51aaf42fd3e08a52993bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a306531e6aa7995145dc041166f68ea950aca1a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a306531e6aa7995145dc041166f68ea950aca1a8", "html_url": "https://github.com/rust-lang/rust/commit/a306531e6aa7995145dc041166f68ea950aca1a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a306531e6aa7995145dc041166f68ea950aca1a8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa45561183493f274b78ca6be6b841bbc4b29e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa45561183493f274b78ca6be6b841bbc4b29e0d", "html_url": "https://github.com/rust-lang/rust/commit/aa45561183493f274b78ca6be6b841bbc4b29e0d"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "7df2649c9082f076cd73b9ede3d9c4e44641913e", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a306531e6aa7995145dc041166f68ea950aca1a8/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a306531e6aa7995145dc041166f68ea950aca1a8/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=a306531e6aa7995145dc041166f68ea950aca1a8", "patch": "@@ -62,7 +62,7 @@ impl CrateImplBlocks {\n                 let impl_data = db.impl_data(impl_id);\n                 let resolver = impl_id.resolver(db);\n \n-                let target_ty = { Ty::from_hir(db, &resolver, &impl_data.target_type) };\n+                let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n \n                 match &impl_data.target_trait {\n                     Some(trait_ref) => {"}, {"sha": "99afeb35f2fde857045725ef1ddaf9e3f6226d41", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a306531e6aa7995145dc041166f68ea950aca1a8/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a306531e6aa7995145dc041166f68ea950aca1a8/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=a306531e6aa7995145dc041166f68ea950aca1a8", "patch": "@@ -2,13 +2,13 @@\n use std::sync::{Arc, Mutex};\n \n use chalk_ir::{cast::Cast, family::ChalkIr};\n-use hir_def::{expr::ExprId, DefWithBodyId, TraitId};\n+use hir_def::{expr::ExprId, DefWithBodyId, TraitId, TypeAliasId};\n use log::debug;\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, ImplBlock, TypeAlias};\n+use crate::{db::HirDatabase, ImplBlock};\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -317,7 +317,7 @@ impl_intern_key!(GlobalImplId);\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AssocTyValue {\n     /// A normal assoc type value from an impl block.\n-    TypeAlias(TypeAlias),\n+    TypeAlias(TypeAliasId),\n     /// The output type of the Fn trait implementation.\n     ClosureFnTraitImplOutput(ClosureFnTraitImplData),\n }"}, {"sha": "76ff6f67ff439d62c8ada5bc53a006e20c2d2f28", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a306531e6aa7995145dc041166f68ea950aca1a8/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a306531e6aa7995145dc041166f68ea950aca1a8/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=a306531e6aa7995145dc041166f68ea950aca1a8", "patch": "@@ -11,7 +11,8 @@ use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum\n use ra_db::CrateId;\n \n use hir_def::{\n-    lang_item::LangItemTarget, AstItemDef, ContainerId, GenericDefId, Lookup, TraitId, TypeAliasId,\n+    lang_item::LangItemTarget, resolver::HasResolver, AstItemDef, ContainerId, GenericDefId,\n+    Lookup, TraitId, TypeAliasId,\n };\n use hir_expand::name;\n \n@@ -22,7 +23,7 @@ use crate::{\n     db::HirDatabase,\n     ty::display::HirDisplay,\n     ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n-    ImplBlock, TypeAlias,\n+    ImplBlock,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -670,7 +671,7 @@ fn impl_block_datum(\n             // don't include associated types that don't exist in the trait\n             trait_data.associated_type_by_name(&type_alias.name(db)).is_some()\n         })\n-        .map(|type_alias| AssocTyValue::TypeAlias(type_alias).to_chalk(db))\n+        .map(|type_alias| AssocTyValue::TypeAlias(type_alias.id).to_chalk(db))\n         .collect();\n     debug!(\"impl_datum: {:?}\", impl_datum_bound);\n     let impl_datum = ImplDatum {\n@@ -773,24 +774,33 @@ pub(crate) fn associated_ty_value_query(\n fn type_alias_associated_ty_value(\n     db: &impl HirDatabase,\n     _krate: CrateId,\n-    type_alias: TypeAlias,\n+    type_alias: TypeAliasId,\n ) -> Arc<AssociatedTyValue<ChalkIr>> {\n-    let impl_block = type_alias.impl_block(db).expect(\"assoc ty value should be in impl\");\n-    let impl_id = Impl::ImplBlock(impl_block).to_chalk(db);\n-    let trait_ = impl_block\n-        .target_trait_ref(db)\n-        .expect(\"assoc ty value should not exist\") // we don't return any assoc ty values if the impl'd trait can't be resolved\n-        .trait_;\n+    let type_alias_data = db.type_alias_data(type_alias);\n+    let impl_id = match type_alias.lookup(db).container {\n+        ContainerId::ImplId(it) => it,\n+        _ => panic!(\"assoc ty value should be in impl\"),\n+    };\n+\n+    let impl_data = db.impl_data(impl_id);\n+    let resolver = impl_id.resolver(db);\n+    let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n+    let target_trait = impl_data\n+        .target_trait\n+        .as_ref()\n+        .and_then(|trait_ref| TraitRef::from_hir(db, &resolver, &trait_ref, Some(target_ty)))\n+        .expect(\"assoc ty value should not exist\"); // we don't return any assoc ty values if the impl'd trait can't be resolved\n+\n     let assoc_ty = db\n-        .trait_data(trait_)\n-        .associated_type_by_name(&type_alias.name(db))\n+        .trait_data(target_trait.trait_)\n+        .associated_type_by_name(&type_alias_data.name)\n         .expect(\"assoc ty value should not exist\"); // validated when building the impl data as well\n-    let generic_params = db.generic_params(impl_block.id.into());\n+    let generic_params = db.generic_params(impl_id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n-    let ty = db.ty(type_alias.id.into()).subst(&bound_vars);\n+    let ty = db.ty(type_alias.into()).subst(&bound_vars);\n     let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: ty.to_chalk(db) };\n     let value = chalk_rust_ir::AssociatedTyValue {\n-        impl_id,\n+        impl_id: Impl::ImplBlock(impl_id.into()).to_chalk(db),\n         associated_ty_id: assoc_ty.to_chalk(db),\n         value: make_binders(value_bound, bound_vars.len()),\n     };"}]}