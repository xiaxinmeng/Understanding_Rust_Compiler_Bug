{"sha": "00d12ef9016f2eab194488ac7d51567175eddebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZDEyZWY5MDE2ZjJlYWIxOTQ0ODhhYzdkNTE1NjcxNzVlZGRlYmM=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-04-16T15:14:11Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-04-22T01:51:56Z"}, "message": "add test for correct await span", "tree": {"sha": "9e997c23af174645c77a5d8671226e6a8d4a5c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e997c23af174645c77a5d8671226e6a8d4a5c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00d12ef9016f2eab194488ac7d51567175eddebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00d12ef9016f2eab194488ac7d51567175eddebc", "html_url": "https://github.com/rust-lang/rust/commit/00d12ef9016f2eab194488ac7d51567175eddebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00d12ef9016f2eab194488ac7d51567175eddebc/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1595473bad5ab808b2734260286ba0f847546a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1595473bad5ab808b2734260286ba0f847546a", "html_url": "https://github.com/rust-lang/rust/commit/bc1595473bad5ab808b2734260286ba0f847546a"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "c6228a913cfe20b8d4a07fc1e1d15cd2a912067e", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=00d12ef9016f2eab194488ac7d51567175eddebc", "patch": "@@ -314,8 +314,8 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub span: Span,\n     /// Span of the scope of the captured binding.\n     pub scope_span: Option<Span>,\n-    /// Span of `.await` statement.\n-    pub await_span: Span,\n+    /// Span of `.await` or `yield` expression.\n+    pub yield_span: Span,\n     /// Expr which the type evaluated from.\n     pub expr: Option<hir::HirId>,\n }"}, {"sha": "51ac552c31239dac40bc64cca094be79c744046b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=00d12ef9016f2eab194488ac7d51567175eddebc", "patch": "@@ -1261,31 +1261,31 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         ty_matches(ty)\n                     })\n                     .map(|expr| expr.span);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, await_span, expr, .. } =\n+                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n                     cause;\n                 (\n                     span,\n                     source_map.span_to_snippet(*span),\n                     scope_span,\n-                    await_span,\n+                    yield_span,\n                     expr,\n                     from_awaited_ty,\n                 )\n             });\n \n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: target_ty={:?} \\\n-                generator_interior_types={:?} target_span={:?} await_span={:?}\",\n-            target_ty, tables.generator_interior_types, target_span, await_span\n+                generator_interior_types={:?} target_span={:?}\",\n+            target_ty, tables.generator_interior_types, target_span\n         );\n-        if let Some((target_span, Ok(snippet), scope_span, await_span, expr, from_awaited_ty)) =\n+        if let Some((target_span, Ok(snippet), scope_span, yield_span, expr, from_awaited_ty)) =\n             target_span\n         {\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 *target_span,\n                 scope_span,\n-                await_span,\n+                *yield_span,\n                 *expr,\n                 snippet,\n                 generator_body,\n@@ -1310,7 +1310,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n-        await_span: Span,\n+        yield_span: Span,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1386,6 +1386,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if let Some(await_span) = from_awaited_ty {\n             // The type causing this obligation is one being awaited at await_span.\n             let mut span = MultiSpan::from_span(await_span);\n+\n+            span.push_span_label(\n+                await_span,\n+                format!(\"await occurs here on type `{}`, which {}\", target_ty, trait_explanation),\n+            );\n+\n             err.span_note(\n                 span,\n                 &format!(\n@@ -1399,9 +1405,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 \"note_obligation_cause_for_async_await generator_interior_types: {:#?}\",\n                 tables.generator_interior_types\n             );\n-            let mut span = MultiSpan::from_span(await_span);\n+            let mut span = MultiSpan::from_span(yield_span);\n             span.push_span_label(\n-                await_span,\n+                yield_span,\n                 format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n             );\n "}, {"sha": "716d23b4d173cd6e5c7ddb1d0edeee6ab8848d23", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=00d12ef9016f2eab194488ac7d51567175eddebc", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         span: source_span,\n                         ty: &ty,\n                         scope_span,\n-                        await_span: yield_data.span,\n+                        yield_span: yield_data.span,\n                         expr: expr.map(|e| e.hir_id),\n                     })\n                     .or_insert(entries);"}, {"sha": "ebb392a45308e85bb34c7c84ab5adc4ba8345e87", "filename": "src/test/ui/async-await/issue-71137.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs?ref=00d12ef9016f2eab194488ac7d51567175eddebc", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+use std::future::Future;\n+use std::sync::Mutex;\n+\n+fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n+\n+async fn wrong_mutex() {\n+  let m = Mutex::new(1);\n+  {\n+    let mut guard = m.lock().unwrap();\n+    (async { \"right\"; }).await;\n+    *guard += 1;\n+  }\n+\n+  (async { \"wrong\"; }).await;\n+}\n+\n+fn main() {\n+  fake_spawn(wrong_mutex()); //~ Error future cannot be sent between threads safely\n+}"}, {"sha": "788a9bc2c7e47a2e902e4ec650f247c2b2e5c82f", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00d12ef9016f2eab194488ac7d51567175eddebc/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=00d12ef9016f2eab194488ac7d51567175eddebc", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-71137.rs:20:3\n+   |\n+LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n+   |                           ---- required by this bound in `fake_spawn`\n+...\n+LL |   fake_spawn(wrong_mutex());\n+   |   ^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, i32>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-71137.rs:12:5\n+   |\n+LL |     let mut guard = m.lock().unwrap();\n+   |         --------- has type `std::sync::MutexGuard<'_, i32>` which is not `Send`\n+LL |     (async { \"right\"; }).await;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `mut guard` maybe used later\n+LL |     *guard += 1;\n+LL |   }\n+   |   - `mut guard` is later dropped here\n+\n+error: aborting due to previous error\n+"}]}