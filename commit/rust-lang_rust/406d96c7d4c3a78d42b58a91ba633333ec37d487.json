{"sha": "406d96c7d4c3a78d42b58a91ba633333ec37d487", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNmQ5NmM3ZDRjM2E3OGQ0MmI1OGE5MWJhNjMzMzMzZWMzN2Q0ODc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-28T18:11:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-28T18:14:34Z"}, "message": "Use consistent naming for assist", "tree": {"sha": "ab17d9e641f19bcf514673c9ed5e9c35646fe269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab17d9e641f19bcf514673c9ed5e9c35646fe269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406d96c7d4c3a78d42b58a91ba633333ec37d487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406d96c7d4c3a78d42b58a91ba633333ec37d487", "html_url": "https://github.com/rust-lang/rust/commit/406d96c7d4c3a78d42b58a91ba633333ec37d487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406d96c7d4c3a78d42b58a91ba633333ec37d487/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa04e3bbb2fab8ee7f7aa8eb406943d314976a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa04e3bbb2fab8ee7f7aa8eb406943d314976a0d", "html_url": "https://github.com/rust-lang/rust/commit/aa04e3bbb2fab8ee7f7aa8eb406943d314976a0d"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "27da28bc0aa51ba729eb8574b7dc3905f779ae55", "filename": "crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs?ref=406d96c7d4c3a78d42b58a91ba633333ec37d487", "patch": "@@ -7,7 +7,7 @@ use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: convert_for_to_iter_for_each\n+// Assist: replace_for_loop_with_for_each\n //\n // Converts a for loop into a for_each loop on the Iterator.\n //\n@@ -28,7 +28,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //     });\n // }\n // ```\n-pub(crate) fn convert_for_to_iter_for_each(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn replace_for_loop_with_for_each(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let for_loop = ctx.find_node_at_offset::<ast::ForExpr>()?;\n     let iterable = for_loop.iterable()?;\n     let pat = for_loop.pat()?;\n@@ -39,8 +39,8 @@ pub(crate) fn convert_for_to_iter_for_each(acc: &mut Assists, ctx: &AssistContex\n     }\n \n     acc.add(\n-        AssistId(\"convert_for_to_iter_for_each\", AssistKind::RefactorRewrite),\n-        \"Convert a for loop into an Iterator::for_each\",\n+        AssistId(\"replace_for_loop_with_for_each\", AssistKind::RefactorRewrite),\n+        \"Replace this for loop with `Iterator::for_each`\",\n         for_loop.syntax().text_range(),\n         |builder| {\n             let mut buf = String::new();\n@@ -150,13 +150,13 @@ pub struct NoIterMethod;\n             FamousDefs::FIXTURE,\n             EMPTY_ITER_FIXTURE\n         );\n-        check_assist(convert_for_to_iter_for_each, before, after);\n+        check_assist(replace_for_loop_with_for_each, before, after);\n     }\n \n     #[test]\n     fn test_not_for() {\n         check_assist_not_applicable(\n-            convert_for_to_iter_for_each,\n+            replace_for_loop_with_for_each,\n             r\"\n let mut x = vec![1, 2, 3];\n x.iter_mut().$0for_each(|v| *v *= 2);\n@@ -167,7 +167,7 @@ x.iter_mut().$0for_each(|v| *v *= 2);\n     #[test]\n     fn test_simple_for() {\n         check_assist(\n-            convert_for_to_iter_for_each,\n+            replace_for_loop_with_for_each,\n             r\"\n fn main() {\n     let x = vec![1, 2, 3];\n@@ -189,7 +189,7 @@ fn main() {\n     fn not_available_in_body() {\n         mark::check!(not_available_in_body);\n         check_assist_not_applicable(\n-            convert_for_to_iter_for_each,\n+            replace_for_loop_with_for_each,\n             r\"\n fn main() {\n     let x = vec![1, 2, 3];\n@@ -275,7 +275,7 @@ fn main() {\n     #[test]\n     fn test_for_borrowed_mut_behind_var() {\n         check_assist(\n-            convert_for_to_iter_for_each,\n+            replace_for_loop_with_for_each,\n             r\"\n fn main() {\n     let x = vec![1, 2, 3];", "previous_filename": "crates/ide_assists/src/handlers/convert_for_to_iter_for_each.rs"}, {"sha": "53542d43347c192e9951f42e13db243eef5193b5", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=406d96c7d4c3a78d42b58a91ba633333ec37d487", "patch": "@@ -114,7 +114,6 @@ mod handlers {\n     mod apply_demorgan;\n     mod auto_import;\n     mod change_visibility;\n-    mod convert_for_to_iter_for_each;\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n@@ -132,8 +131,8 @@ mod handlers {\n     mod generate_enum_projection_method;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n-    mod generate_getter;\n     mod generate_getter_mut;\n+    mod generate_getter;\n     mod generate_impl;\n     mod generate_new;\n     mod generate_setter;\n@@ -156,6 +155,7 @@ mod handlers {\n     mod reorder_fields;\n     mod reorder_impl;\n     mod replace_derive_with_manual_impl;\n+    mod replace_for_loop_with_for_each;\n     mod replace_if_let_with_match;\n     mod replace_impl_trait_with_generic;\n     mod replace_let_with_if_let;\n@@ -177,11 +177,9 @@ mod handlers {\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n             change_visibility::change_visibility,\n-            convert_for_to_iter_for_each::convert_for_to_iter_for_each,\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n-            move_module_to_file::move_module_to_file,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             fill_match_arms::fill_match_arms,\n             fix_visibility::fix_visibility,\n@@ -191,12 +189,12 @@ mod handlers {\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n-            generate_enum_projection_method::generate_enum_try_into_method,\n             generate_enum_projection_method::generate_enum_as_method,\n+            generate_enum_projection_method::generate_enum_try_into_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n-            generate_getter::generate_getter,\n             generate_getter_mut::generate_getter_mut,\n+            generate_getter::generate_getter,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n             generate_setter::generate_setter,\n@@ -210,6 +208,7 @@ mod handlers {\n             move_bounds::move_bounds_to_where_clause,\n             move_guard::move_arm_cond_to_match_guard,\n             move_guard::move_guard_to_arm_body,\n+            move_module_to_file::move_module_to_file,\n             pull_assignment_up::pull_assignment_up,\n             qualify_path::qualify_path,\n             raw_string::add_hash,\n@@ -221,6 +220,7 @@ mod handlers {\n             reorder_fields::reorder_fields,\n             reorder_impl::reorder_impl,\n             replace_derive_with_manual_impl::replace_derive_with_manual_impl,\n+            replace_for_loop_with_for_each::replace_for_loop_with_for_each,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,\n             replace_impl_trait_with_generic::replace_impl_trait_with_generic,"}, {"sha": "b7f6167607a1d243209a18d4a1921f7cddc4d18d", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=406d96c7d4c3a78d42b58a91ba633333ec37d487", "patch": "@@ -190,8 +190,8 @@ fn assist_order_field_struct() {\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }"}, {"sha": "4f007aa48bb4998094acf78ffce2158dae1af46f", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406d96c7d4c3a78d42b58a91ba633333ec37d487/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=406d96c7d4c3a78d42b58a91ba633333ec37d487", "patch": "@@ -192,29 +192,6 @@ pub(crate) fn frobnicate() {}\n     )\n }\n \n-#[test]\n-fn doctest_convert_for_to_iter_for_each() {\n-    check_doc_test(\n-        \"convert_for_to_iter_for_each\",\n-        r#####\"\n-fn main() {\n-    let x = vec![1, 2, 3];\n-    for $0v in x {\n-        let y = v * 2;\n-    }\n-}\n-\"#####,\n-        r#####\"\n-fn main() {\n-    let x = vec![1, 2, 3];\n-    x.into_iter().for_each(|v| {\n-        let y = v * 2;\n-    });\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_convert_integer_literal() {\n     check_doc_test(\n@@ -1179,6 +1156,29 @@ impl Debug for S {\n     )\n }\n \n+#[test]\n+fn doctest_replace_for_loop_with_for_each() {\n+    check_doc_test(\n+        \"replace_for_loop_with_for_each\",\n+        r#####\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    for$0 v in x {\n+        let y = v * 2;\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x.into_iter().for_each(|v| {\n+        let y = v * 2;\n+    });\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_if_let_with_match() {\n     check_doc_test("}]}