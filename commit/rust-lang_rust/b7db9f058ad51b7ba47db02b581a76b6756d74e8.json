{"sha": "b7db9f058ad51b7ba47db02b581a76b6756d74e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGI5ZjA1OGFkNTFiN2JhNDdkYjAyYjU4MWE3NmI2NzU2ZDc0ZTg=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-08T10:56:31Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-08T11:19:40Z"}, "message": "Apply suggestions from code review", "tree": {"sha": "414a4bdea9d429df53648fcd5e6d0002d9c0d8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414a4bdea9d429df53648fcd5e6d0002d9c0d8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7db9f058ad51b7ba47db02b581a76b6756d74e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7db9f058ad51b7ba47db02b581a76b6756d74e8", "html_url": "https://github.com/rust-lang/rust/commit/b7db9f058ad51b7ba47db02b581a76b6756d74e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7db9f058ad51b7ba47db02b581a76b6756d74e8/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108", "html_url": "https://github.com/rust-lang/rust/commit/9b4256dc4d9e0b633b73f5c07e6e0721bc1e9108"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "ad78b767120c1c34cf4961881372a0a000b1a46c", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7db9f058ad51b7ba47db02b581a76b6756d74e8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7db9f058ad51b7ba47db02b581a76b6756d74e8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=b7db9f058ad51b7ba47db02b581a76b6756d74e8", "patch": "@@ -17,6 +17,7 @@ use crate::{\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n };\n+use test_utils::mark;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct HoverConfig {\n@@ -202,10 +203,9 @@ fn runnable_action(\n             ModuleDef::Function(it) => {\n                 let src = it.source(sema.db);\n                 if src.file_id != file_id.into() {\n-                    // Don't try to find runnables in a macro generated code.\n-                    // See tests below:\n-                    //   test_hover_macro_generated_struct_fn_doc_comment\n-                    //   test_hover_macro_generated_struct_fn_doc_attr\n+                    mark::hit!(hover_macro_generated_struct_fn_doc_comment);\n+                    mark::hit!(hover_macro_generated_struct_fn_doc_attr);\n+\n                     return None;\n                 }\n \n@@ -1121,6 +1121,8 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_macro_generated_struct_fn_doc_comment() {\n+        mark::check!(hover_macro_generated_struct_fn_doc_comment);\n+\n         check_hover_result(\n             r#\"\n             //- /lib.rs\n@@ -1147,6 +1149,8 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_macro_generated_struct_fn_doc_attr() {\n+        mark::check!(hover_macro_generated_struct_fn_doc_attr);\n+\n         check_hover_result(\n             r#\"\n             //- /lib.rs"}, {"sha": "a41adf8b0b51bad07b767c436bdabe4d6e8ee721", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b7db9f058ad51b7ba47db02b581a76b6756d74e8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7db9f058ad51b7ba47db02b581a76b6756d74e8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=b7db9f058ad51b7ba47db02b581a76b6756d74e8", "patch": "@@ -408,7 +408,7 @@ pub fn handle_runnables(\n             continue;\n         }\n \n-        res.push(to_proto::runnable(&snap, file_id, &runnable)?);\n+        res.push(to_proto::runnable(&snap, file_id, runnable)?);\n     }\n \n     // Add `cargo check` and `cargo test` for the whole package\n@@ -818,7 +818,7 @@ pub fn handle_code_lens(\n \n             let action = runnable.action();\n             let range = to_proto::range(&line_index, runnable.nav.range());\n-            let r = to_proto::runnable(&snap, file_id, &runnable)?;\n+            let r = to_proto::runnable(&snap, file_id, runnable)?;\n             if snap.config.lens.run {\n                 let lens = CodeLens {\n                     range,\n@@ -830,7 +830,7 @@ pub fn handle_code_lens(\n \n             if action.debugee && snap.config.lens.debug {\n                 let debug_lens =\n-                    CodeLens { range, command: Some(debug_single_command(r)), data: None };\n+                    CodeLens { range, command: Some(debug_single_command(&r)), data: None };\n                 lenses.push(debug_lens);\n             }\n         }\n@@ -1142,7 +1142,7 @@ fn run_single_command(runnable: &lsp_ext::Runnable, title: &str) -> Command {\n     }\n }\n \n-fn debug_single_command(runnable: lsp_ext::Runnable) -> Command {\n+fn debug_single_command(runnable: &lsp_ext::Runnable) -> Command {\n     Command {\n         title: \"Debug\".into(),\n         command: \"rust-analyzer.debugSingle\".into(),\n@@ -1183,26 +1183,25 @@ fn show_impl_command_link(\n fn to_runnable_action(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n-    runnable: &Runnable,\n+    runnable: Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n     let cargo_spec = CargoTargetSpec::for_file(&snap, file_id).ok()?;\n-    if should_skip_target(runnable, cargo_spec.as_ref()) {\n+    if should_skip_target(&runnable, cargo_spec.as_ref()) {\n         return None;\n     }\n \n+    let action: &'static _ = runnable.action();\n     to_proto::runnable(snap, file_id, runnable).ok().map(|r| {\n         let mut group = lsp_ext::CommandLinkGroup::default();\n \n-        let action = runnable.action();\n         if snap.config.hover.run {\n             let run_command = run_single_command(&r, action.run_title);\n             group.commands.push(to_command_link(run_command, r.label.clone()));\n         }\n \n         if snap.config.hover.debug {\n-            let hint = r.label.clone();\n-            let dbg_command = debug_single_command(r);\n-            group.commands.push(to_command_link(dbg_command, hint));\n+            let dbg_command = debug_single_command(&r);\n+            group.commands.push(to_command_link(dbg_command, r.label));\n         }\n \n         group\n@@ -1222,7 +1221,7 @@ fn prepare_hover_actions(\n         .iter()\n         .filter_map(|it| match it {\n             HoverAction::Implementaion(position) => show_impl_command_link(snap, position),\n-            HoverAction::Runnable(r) => to_runnable_action(snap, file_id, r),\n+            HoverAction::Runnable(r) => to_runnable_action(snap, file_id, r.clone()),\n         })\n         .collect()\n }\n@@ -1232,10 +1231,7 @@ fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>)\n         RunnableKind::Bin => {\n             // Do not suggest binary run on other target than binary\n             match &cargo_spec {\n-                Some(spec) => match spec.target_kind {\n-                    TargetKind::Bin => false,\n-                    _ => true,\n-                },\n+                Some(spec) => spec.target_kind != TargetKind::Bin,\n                 None => true,\n             }\n         }"}, {"sha": "710df1fbdec4e7d3e530b8c2d64fbe083bd5641e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7db9f058ad51b7ba47db02b581a76b6756d74e8/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7db9f058ad51b7ba47db02b581a76b6756d74e8/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b7db9f058ad51b7ba47db02b581a76b6756d74e8", "patch": "@@ -656,14 +656,14 @@ pub(crate) fn resolved_code_action(\n pub(crate) fn runnable(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n-    runnable: &Runnable,\n+    runnable: Runnable,\n ) -> Result<lsp_ext::Runnable> {\n     let spec = CargoTargetSpec::for_file(snap, file_id)?;\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n         CargoTargetSpec::runnable_args(spec, &runnable.kind, &runnable.cfg_exprs)?;\n     let label = runnable.label(target);\n-    let location = location_link(snap, None, runnable.nav.clone())?;\n+    let location = location_link(snap, None, runnable.nav)?;\n \n     Ok(lsp_ext::Runnable {\n         label,"}]}