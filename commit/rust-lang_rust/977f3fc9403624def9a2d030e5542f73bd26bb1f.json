{"sha": "977f3fc9403624def9a2d030e5542f73bd26bb1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3N2YzZmM5NDAzNjI0ZGVmOWEyZDAzMGU1NTQyZjczYmQyNmJiMWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-19T19:00:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T16:41:47Z"}, "message": "introduce `QueryKey` separation", "tree": {"sha": "9d079ef7f10f6ca87d3a9cc72e461535e87e2981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d079ef7f10f6ca87d3a9cc72e461535e87e2981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977f3fc9403624def9a2d030e5542f73bd26bb1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977f3fc9403624def9a2d030e5542f73bd26bb1f", "html_url": "https://github.com/rust-lang/rust/commit/977f3fc9403624def9a2d030e5542f73bd26bb1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977f3fc9403624def9a2d030e5542f73bd26bb1f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24e90ec25c066578b7ff33bbc27331e31649a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24e90ec25c066578b7ff33bbc27331e31649a14", "html_url": "https://github.com/rust-lang/rust/commit/f24e90ec25c066578b7ff33bbc27331e31649a14"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "b70a5307097bd5b39a998386ffb8533f7c52bbd0", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=977f3fc9403624def9a2d030e5542f73bd26bb1f", "patch": "@@ -26,6 +26,7 @@ impl<'tcx> Eq<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n+    type QueryKey = Self;\n     type QueryResult = ();\n \n     fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self> {\n@@ -36,6 +37,10 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n         }\n     }\n \n+    fn into_query_key(self) -> Self {\n+        self\n+    }\n+\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.param_env\n     }"}, {"sha": "41d33338db4592c1addaf42d7adbec0ad2ab48a1", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=977f3fc9403624def9a2d030e5542f73bd26bb1f", "patch": "@@ -103,18 +103,21 @@ pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     }\n }\n \n-pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: TypeFoldable<'tcx> + Lift<'gcx> {\n+pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: fmt::Debug + Sized {\n+    type QueryKey: TypeFoldable<'tcx> + Lift<'gcx>;\n     type QueryResult: TypeFoldable<'tcx> + Lift<'gcx>;\n \n     /// Micro-optimization: returns `Ok(x)` if we can trivially\n     /// produce the output, else returns `Err(self)` back.\n     fn trivial_noop(self, tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self>;\n \n+    fn into_query_key(self) -> Self::QueryKey;\n+\n     fn param_env(&self) -> ParamEnv<'tcx>;\n \n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        canonicalized: Canonicalized<'gcx, Self>,\n+        canonicalized: Canonicalized<'gcx, Self::QueryKey>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>>;\n \n     /// \"Upcasts\" a lifted query result (which is in the gcx lifetime)\n@@ -149,7 +152,8 @@ where\n         // `canonicalize_hr_query_hack` here because of things like\n         // the subtype query, which go awry around `'static`\n         // otherwise.\n-        let (canonical_self, canonical_var_values) = infcx.canonicalize_hr_query_hack(&self);\n+        let query_key = self.into_query_key();\n+        let (canonical_self, canonical_var_values) = infcx.canonicalize_hr_query_hack(&query_key);\n         let canonical_result = Q::perform_query(infcx.tcx, canonical_self)?;\n \n         // FIXME: This is not the most efficient setup. The"}, {"sha": "8c5bbe05616a0fabf2ce45f2445f9eebf118a95a", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=977f3fc9403624def9a2d030e5542f73bd26bb1f", "patch": "@@ -33,6 +33,7 @@ impl<'gcx: 'tcx, 'tcx, T> super::QueryTypeOp<'gcx, 'tcx> for Normalize<'tcx, T>\n where\n     T: Normalizable<'gcx, 'tcx>,\n {\n+    type QueryKey = Self;\n     type QueryResult = T;\n \n     fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<T, Self> {\n@@ -43,6 +44,10 @@ where\n         }\n     }\n \n+    fn into_query_key(self) -> Self {\n+        self\n+    }\n+\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         self.param_env\n     }"}, {"sha": "1d02fe9a11317101c709a97d2ca586760fb5a2ac", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=977f3fc9403624def9a2d030e5542f73bd26bb1f", "patch": "@@ -28,12 +28,17 @@ impl<'tcx> ProvePredicate<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n+    type QueryKey = Self;\n     type QueryResult = ();\n \n     fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self> {\n         Err(self)\n     }\n \n+    fn into_query_key(self) -> Self {\n+        self\n+    }\n+\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         self.param_env\n     }"}, {"sha": "0842b78ce8b1cf3bdc4b493d3fddbaec5088653a", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977f3fc9403624def9a2d030e5542f73bd26bb1f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=977f3fc9403624def9a2d030e5542f73bd26bb1f", "patch": "@@ -30,6 +30,7 @@ impl<'tcx> Subtype<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n+    type QueryKey = Self;\n     type QueryResult = ();\n \n     fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<(), Self> {\n@@ -40,6 +41,10 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n         }\n     }\n \n+    fn into_query_key(self) -> Self {\n+        self\n+    }\n+\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         self.param_env\n     }"}]}