{"sha": "36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "node_id": "C_kwDOAAsO6NoAKDM2ZDhmNWNiZmNjOGVjN2E1ZTc5YmRiNjk1MzI5YWUzZjQ0NmQwYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T12:16:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T12:16:25Z"}, "message": "Auto merge of #2336 - RalfJung:wide-ptr-compare, r=RalfJung\n\nfix comparing wide raw pointers\n\nFixes https://github.com/rust-lang/rust/issues/96169\n\nHowever I am not sure if these are the correct semantics. I'll wait for confirmation in that issue.", "tree": {"sha": "e764873f945bfcceedd09e29f5cfdaedd72bbffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e764873f945bfcceedd09e29f5cfdaedd72bbffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "html_url": "https://github.com/rust-lang/rust/commit/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fcf4826de13c0fb7699645b751db6474b7f1474", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf4826de13c0fb7699645b751db6474b7f1474", "html_url": "https://github.com/rust-lang/rust/commit/6fcf4826de13c0fb7699645b751db6474b7f1474"}, {"sha": "6c8ad4abc9e794b412dfe17edf186b28fe2a3e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8ad4abc9e794b412dfe17edf186b28fe2a3e1a", "html_url": "https://github.com/rust-lang/rust/commit/6c8ad4abc9e794b412dfe17edf186b28fe2a3e1a"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "33c97e7d31098ed8e67ec2a724864400caa361c2", "filename": "src/operator.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "patch": "@@ -44,9 +44,19 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             }\n \n             Lt | Le | Gt | Ge => {\n-                // Just compare the integers.\n-                let left = left.to_scalar()?.to_bits(left.layout.size)?;\n-                let right = right.to_scalar()?.to_bits(right.layout.size)?;\n+                let size = self.pointer_size();\n+                // Just compare the bits. ScalarPairs are compared lexicographically.\n+                // We thus always compare pairs and simply fill scalars up with 0.\n+                let left = match **left {\n+                    Immediate::Scalar(l) => (l.check_init()?.to_bits(size)?, 0),\n+                    Immediate::ScalarPair(l1, l2) =>\n+                        (l1.check_init()?.to_bits(size)?, l2.check_init()?.to_bits(size)?),\n+                };\n+                let right = match **right {\n+                    Immediate::Scalar(r) => (r.check_init()?.to_bits(size)?, 0),\n+                    Immediate::ScalarPair(r1, r2) =>\n+                        (r1.check_init()?.to_bits(size)?, r2.check_init()?.to_bits(size)?),\n+                };\n                 let res = match bin_op {\n                     Lt => left < right,\n                     Le => left <= right,"}, {"sha": "a0c20af426973a143f6bba381f7f776b20e1870f", "filename": "tests/pass/pointers.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9/tests%2Fpass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9/tests%2Fpass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fpointers.rs?ref=36d8f5cbfcc8ec7a5e79bdb695329ae3f446d0b9", "patch": "@@ -1,3 +1,5 @@\n+use std::mem::transmute;\n+\n fn one_line_ref() -> i16 {\n     *&1\n }\n@@ -48,6 +50,27 @@ fn dangling_pointer() -> *const i32 {\n     &b.0 as *const i32\n }\n \n+fn wide_ptr_ops() {\n+    let a: *const dyn Send = &1 as &dyn Send;\n+    let b: *const dyn Send = &1 as &dyn Send;\n+    let _val = a == b;\n+    let _val = a != b;\n+    let _val = a < b;\n+    let _val = a <= b;\n+    let _val = a > b;\n+    let _val = a >= b;\n+\n+    let a: *const [u8] = unsafe { transmute((1usize, 1usize)) };\n+    let b: *const [u8] = unsafe { transmute((1usize, 2usize)) };\n+    // confirmed with rustc.\n+    assert!(!(a == b));\n+    assert!(a != b);\n+    assert!(a <= b);\n+    assert!(a < b);\n+    assert!(!(a >= b));\n+    assert!(!(a > b));\n+}\n+\n fn main() {\n     assert_eq!(one_line_ref(), 1);\n     assert_eq!(basic_ref(), 1);\n@@ -91,4 +114,6 @@ fn main() {\n     assert!(dangling > 2);\n     assert!(dangling > 3);\n     assert!(dangling >= 4);\n+\n+    wide_ptr_ops();\n }"}]}