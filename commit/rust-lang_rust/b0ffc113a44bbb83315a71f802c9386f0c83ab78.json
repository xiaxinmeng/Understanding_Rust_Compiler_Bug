{"sha": "b0ffc113a44bbb83315a71f802c9386f0c83ab78", "node_id": "C_kwDOAAsO6NoAKGIwZmZjMTEzYTQ0YmJiODMzMTVhNzFmODAyYzkzODZmMGM4M2FiNzg", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-11T05:18:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T05:18:53Z"}, "message": "Rollup merge of #106628 - GuillaumeGomez:rm-itemid-primitive, r=notriddle\n\nRemove unneeded ItemId::Primitive variant\n\nAs I mentioned [here](https://github.com/rust-lang/rust/pull/106412#issuecomment-1371405115), I wondered if `ItemId::Primitive` was actually used for anything. Apparently, it seems so because removing it led to no changes as far as I and tests could see.\n\nr? `@notriddle`", "tree": {"sha": "37783e89217011d4a847b34f0ac3d2e713bb4d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37783e89217011d4a847b34f0ac3d2e713bb4d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0ffc113a44bbb83315a71f802c9386f0c83ab78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvka9CRBK7hj4Ov3rIwAAofcIAKwIPvhG32AELp6CL6/6u4s8\nt+ZwVgZgXa73k5kJSkMaFjrt2+UbUS2zIzvzKfXScgkLEQwJvQJOC17CKSbGmLCa\nmarc8zAL77CNbtfSKam0OJm8MPLEDO2Y9GD+eejaqYDuGZSG/fLcrFZSfKrJLnap\nlNvLHJGMzFBXC32xg5RD5sMKfNJ245nJbez/P1a/MM4QRdS4lhDZ7AVb8hDO6UKq\nCeDVYtesqOh2mLA5t9przxQlxRAJCnypsql7nKtFQL1oF0ZNlzztRwyW3Mlv8tc2\ns4essnWu8uEMOJ5jnHz2DnMvxNvq4H7kW5dQThdFaatRVB4fiQtGlWHwVP5Dg3o=\n=pCjK\n-----END PGP SIGNATURE-----\n", "payload": "tree 37783e89217011d4a847b34f0ac3d2e713bb4d33\nparent 12b124283cd51389afe59904e29f8ad7325c1dc0\nparent 36c9b49c145af1a98948046dcc7060e2e552881c\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673414333 +0900\ncommitter GitHub <noreply@github.com> 1673414333 +0900\n\nRollup merge of #106628 - GuillaumeGomez:rm-itemid-primitive, r=notriddle\n\nRemove unneeded ItemId::Primitive variant\n\nAs I mentioned [here](https://github.com/rust-lang/rust/pull/106412#issuecomment-1371405115), I wondered if `ItemId::Primitive` was actually used for anything. Apparently, it seems so because removing it led to no changes as far as I and tests could see.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ffc113a44bbb83315a71f802c9386f0c83ab78", "html_url": "https://github.com/rust-lang/rust/commit/b0ffc113a44bbb83315a71f802c9386f0c83ab78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0ffc113a44bbb83315a71f802c9386f0c83ab78/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b124283cd51389afe59904e29f8ad7325c1dc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b124283cd51389afe59904e29f8ad7325c1dc0", "html_url": "https://github.com/rust-lang/rust/commit/12b124283cd51389afe59904e29f8ad7325c1dc0"}, {"sha": "36c9b49c145af1a98948046dcc7060e2e552881c", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c9b49c145af1a98948046dcc7060e2e552881c", "html_url": "https://github.com/rust-lang/rust/commit/36c9b49c145af1a98948046dcc7060e2e552881c"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "aad24b4a074927c7d081e9d8fc738bab667d9689", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b0ffc113a44bbb83315a71f802c9386f0c83ab78", "patch": "@@ -600,7 +600,9 @@ fn build_module_items(\n                 items.push(clean::Item {\n                     name: None,\n                     attrs: Box::new(clean::Attributes::default()),\n-                    item_id: ItemId::Primitive(prim_ty, did.krate),\n+                    // We can use the item's `DefId` directly since the only information ever used\n+                    // from it is `DefId.krate`.\n+                    item_id: ItemId::DefId(did),\n                     kind: Box::new(clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,\n                         clean::ImportSource {"}, {"sha": "5c63efef717d13d2082838a8106c0fc8c6f1d904", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b0ffc113a44bbb83315a71f802c9386f0c83ab78", "patch": "@@ -62,8 +62,6 @@ pub(crate) enum ItemId {\n     Auto { trait_: DefId, for_: DefId },\n     /// Identifier that is used for blanket implementations.\n     Blanket { impl_id: DefId, for_: DefId },\n-    /// Identifier for primitive types.\n-    Primitive(PrimitiveType, CrateNum),\n }\n \n impl ItemId {\n@@ -73,7 +71,6 @@ impl ItemId {\n             ItemId::Auto { for_: id, .. }\n             | ItemId::Blanket { for_: id, .. }\n             | ItemId::DefId(id) => id.is_local(),\n-            ItemId::Primitive(_, krate) => krate == LOCAL_CRATE,\n         }\n     }\n \n@@ -98,7 +95,6 @@ impl ItemId {\n             ItemId::Auto { for_: id, .. }\n             | ItemId::Blanket { for_: id, .. }\n             | ItemId::DefId(id) => id.krate,\n-            ItemId::Primitive(_, krate) => krate,\n         }\n     }\n }\n@@ -707,15 +703,13 @@ impl Item {\n         let def_id = match self.item_id {\n             // Anything but DefId *shouldn't* matter, but return a reasonable value anyway.\n             ItemId::Auto { .. } | ItemId::Blanket { .. } => return None,\n-            // Primitives and Keywords are written in the source code as private modules.\n-            // The modules need to be private so that nobody actually uses them, but the\n-            // keywords and primitives that they are documenting are public.\n-            ItemId::Primitive(..) => return Some(Visibility::Public),\n             ItemId::DefId(def_id) => def_id,\n         };\n \n         match *self.kind {\n-            // Explication on `ItemId::Primitive` just above.\n+            // Primitives and Keywords are written in the source code as private modules.\n+            // The modules need to be private so that nobody actually uses them, but the\n+            // keywords and primitives that they are documenting are public.\n             ItemKind::KeywordItem | ItemKind::PrimitiveItem(_) => return Some(Visibility::Public),\n             // Variant fields inherit their enum's visibility.\n             StructFieldItem(..) if is_field_vis_inherited(tcx, def_id) => {"}, {"sha": "e607a16ad5457016d7f698c7e382932154c7f70d", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=b0ffc113a44bbb83315a71f802c9386f0c83ab78", "patch": "@@ -53,12 +53,6 @@ impl Impl {\n             ItemId::Blanket { impl_id, .. } => impl_id,\n             ItemId::Auto { trait_, .. } => trait_,\n             ItemId::DefId(def_id) => def_id,\n-            ItemId::Primitive(_, _) => {\n-                panic!(\n-                    \"Unexpected ItemId::Primitive in expect_def_id: {:?}\",\n-                    self.impl_item.item_id\n-                )\n-            }\n         }\n     }\n "}, {"sha": "bc74d9cf969741eb56e3ba7cb91c007ab2900ea3", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 55, "deletions": 20, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=b0ffc113a44bbb83315a71f802c9386f0c83ab78", "patch": "@@ -3,7 +3,6 @@ use std::collections::BTreeMap;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n@@ -24,6 +23,7 @@ pub(crate) fn build_index<'tcx>(\n     tcx: TyCtxt<'tcx>,\n ) -> String {\n     let mut itemid_to_pathid = FxHashMap::default();\n+    let mut primitives = FxHashMap::default();\n     let mut crate_paths = vec![];\n \n     // Attach all orphan items to the type's definition if the type\n@@ -78,50 +78,83 @@ pub(crate) fn build_index<'tcx>(\n     // First, on function signatures\n     let mut search_index = std::mem::replace(&mut cache.search_index, Vec::new());\n     for item in search_index.iter_mut() {\n+        fn insert_into_map<F: std::hash::Hash + Eq>(\n+            ty: &mut RenderType,\n+            map: &mut FxHashMap<F, usize>,\n+            itemid: F,\n+            lastpathid: &mut usize,\n+            crate_paths: &mut Vec<(ItemType, Symbol)>,\n+            item_type: ItemType,\n+            path: Symbol,\n+        ) {\n+            match map.entry(itemid) {\n+                Entry::Occupied(entry) => ty.id = Some(RenderTypeId::Index(*entry.get())),\n+                Entry::Vacant(entry) => {\n+                    let pathid = *lastpathid;\n+                    entry.insert(pathid);\n+                    *lastpathid += 1;\n+                    crate_paths.push((item_type, path));\n+                    ty.id = Some(RenderTypeId::Index(pathid));\n+                }\n+            }\n+        }\n+\n         fn convert_render_type(\n             ty: &mut RenderType,\n             cache: &mut Cache,\n             itemid_to_pathid: &mut FxHashMap<ItemId, usize>,\n+            primitives: &mut FxHashMap<Symbol, usize>,\n             lastpathid: &mut usize,\n             crate_paths: &mut Vec<(ItemType, Symbol)>,\n         ) {\n             if let Some(generics) = &mut ty.generics {\n                 for item in generics {\n-                    convert_render_type(item, cache, itemid_to_pathid, lastpathid, crate_paths);\n+                    convert_render_type(\n+                        item,\n+                        cache,\n+                        itemid_to_pathid,\n+                        primitives,\n+                        lastpathid,\n+                        crate_paths,\n+                    );\n                 }\n             }\n             let Cache { ref paths, ref external_paths, .. } = *cache;\n             let Some(id) = ty.id.clone() else {\n                 assert!(ty.generics.is_some());\n                 return;\n             };\n-            let (itemid, path, item_type) = match id {\n+            match id {\n                 RenderTypeId::DefId(defid) => {\n                     if let Some(&(ref fqp, item_type)) =\n                         paths.get(&defid).or_else(|| external_paths.get(&defid))\n                     {\n-                        (ItemId::DefId(defid), *fqp.last().unwrap(), item_type)\n+                        insert_into_map(\n+                            ty,\n+                            itemid_to_pathid,\n+                            ItemId::DefId(defid),\n+                            lastpathid,\n+                            crate_paths,\n+                            item_type,\n+                            *fqp.last().unwrap(),\n+                        );\n                     } else {\n                         ty.id = None;\n-                        return;\n                     }\n                 }\n-                RenderTypeId::Primitive(primitive) => (\n-                    ItemId::Primitive(primitive, LOCAL_CRATE),\n-                    primitive.as_sym(),\n-                    ItemType::Primitive,\n-                ),\n-                RenderTypeId::Index(_) => return,\n-            };\n-            match itemid_to_pathid.entry(itemid) {\n-                Entry::Occupied(entry) => ty.id = Some(RenderTypeId::Index(*entry.get())),\n-                Entry::Vacant(entry) => {\n-                    let pathid = *lastpathid;\n-                    entry.insert(pathid);\n-                    *lastpathid += 1;\n-                    crate_paths.push((item_type, path));\n-                    ty.id = Some(RenderTypeId::Index(pathid));\n+                RenderTypeId::Primitive(primitive) => {\n+                    let sym = primitive.as_sym();\n+                    insert_into_map(\n+                        ty,\n+                        primitives,\n+                        sym,\n+                        lastpathid,\n+                        crate_paths,\n+                        ItemType::Primitive,\n+                        sym,\n+                    );\n                 }\n+                RenderTypeId::Index(_) => {}\n             }\n         }\n         if let Some(search_type) = &mut item.search_type {\n@@ -130,6 +163,7 @@ pub(crate) fn build_index<'tcx>(\n                     item,\n                     cache,\n                     &mut itemid_to_pathid,\n+                    &mut primitives,\n                     &mut lastpathid,\n                     &mut crate_paths,\n                 );\n@@ -139,6 +173,7 @@ pub(crate) fn build_index<'tcx>(\n                     item,\n                     cache,\n                     &mut itemid_to_pathid,\n+                    &mut primitives,\n                     &mut lastpathid,\n                     &mut crate_paths,\n                 );"}, {"sha": "bd95ec18650b3c399c1884c8fd759dc7988cbb18", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ffc113a44bbb83315a71f802c9386f0c83ab78/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=b0ffc113a44bbb83315a71f802c9386f0c83ab78", "patch": "@@ -252,7 +252,6 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n         ItemId::Auto { for_, trait_ } => {\n             Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n-        ItemId::Primitive(_, _) => unreachable!(),\n     }\n }\n "}]}