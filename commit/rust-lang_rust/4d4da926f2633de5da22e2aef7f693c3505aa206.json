{"sha": "4d4da926f2633de5da22e2aef7f693c3505aa206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNGRhOTI2ZjI2MzNkZTVkYTIyZTJhZWY3ZjY5M2MzNTA1YWEyMDY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-15T11:33:39Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:42:28Z"}, "message": "Fix rebase damage", "tree": {"sha": "2c12af837914962550ad1848ac4c4aa2ed997de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c12af837914962550ad1848ac4c4aa2ed997de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4da926f2633de5da22e2aef7f693c3505aa206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4da926f2633de5da22e2aef7f693c3505aa206", "html_url": "https://github.com/rust-lang/rust/commit/4d4da926f2633de5da22e2aef7f693c3505aa206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4da926f2633de5da22e2aef7f693c3505aa206/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9930e1ff0a889631f853a31838121600cea2b400", "url": "https://api.github.com/repos/rust-lang/rust/commits/9930e1ff0a889631f853a31838121600cea2b400", "html_url": "https://github.com/rust-lang/rust/commit/9930e1ff0a889631f853a31838121600cea2b400"}], "stats": {"total": 220, "additions": 126, "deletions": 94}, "files": [{"sha": "58820dcb381c56769f7b9107ae9c5521ac6b1823", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -443,6 +443,7 @@ fn check_associated_type_defaults(fcx: &FnCtxt<'_, '_>, trait_def_id: DefId) {\n     // `<Self as Trait<...>>::Assoc` to the default type.\n     let map = tcx\n         .associated_items(trait_def_id)\n+        .iter()\n         .filter_map(|item| {\n             if item.kind == ty::AssocKind::Type && item.defaultness.has_value() {\n                 // `<Self as Trait<...>>::Assoc`"}, {"sha": "d7a48cbd63ecccd1a67fbf6c9fdf99f0a16fa14a", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -32,6 +32,7 @@ fn main() {\n     assert_eq!(<() as Tr>::A, 255);\n     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n     //~^ ERROR evaluation of constant expression failed\n+    //~| ERROR erroneous constant used\n \n     assert_eq!(<u8 as Tr>::A, 254);\n     assert_eq!(<u8 as Tr>::B, 255);"}, {"sha": "fe3721a910922aa7e1df73f14153418732a7d0d9", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -16,8 +16,16 @@ LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |                |\n    |                referenced constant has errors\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: erroneous constant used\n+  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "6a8526f6aad1bc990bb319996d6edc1efbf45819", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,29 +1,29 @@\n error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-1.rs:12:6\n+  --> $DIR/defaults-cyclic-fail-1.rs:10:6\n    |\n LL | impl Tr for () {}\n    |      ^^\n \n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-1.rs:30:6\n+  --> $DIR/defaults-cyclic-fail-1.rs:28:6\n    |\n LL | impl Tr for bool {\n    |      ^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-1.rs:37:6\n+  --> $DIR/defaults-cyclic-fail-1.rs:35:6\n    |\n LL | impl Tr for usize {\n    |      ^^\n \n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-1.rs:32:5\n+  --> $DIR/defaults-cyclic-fail-1.rs:30:5\n    |\n LL |     type A = Box<Self::B>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n-  --> $DIR/defaults-cyclic-fail-1.rs:39:5\n+  --> $DIR/defaults-cyclic-fail-1.rs:37:5\n    |\n LL |     type B = &'static Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "05091e3f498c7889f7ac1b81a794293151145c9b", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n #![feature(associated_type_defaults)]\n \n // A more complex version of `defaults-cyclic-fail-1.rs`, with non-trivial defaults."}, {"sha": "78772df963885301202d6564c08d434d84adbb24", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,29 +1,29 @@\n error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-2.rs:14:6\n+  --> $DIR/defaults-cyclic-fail-2.rs:12:6\n    |\n LL | impl Tr for () {}\n    |      ^^\n \n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-2.rs:32:6\n+  --> $DIR/defaults-cyclic-fail-2.rs:30:6\n    |\n LL | impl Tr for bool {\n    |      ^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-2.rs:39:6\n+  --> $DIR/defaults-cyclic-fail-2.rs:37:6\n    |\n LL | impl Tr for usize {\n    |      ^^\n \n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n-  --> $DIR/defaults-cyclic-fail-2.rs:34:5\n+  --> $DIR/defaults-cyclic-fail-2.rs:32:5\n    |\n LL |     type A = Box<Self::B>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n-  --> $DIR/defaults-cyclic-fail-2.rs:41:5\n+  --> $DIR/defaults-cyclic-fail-2.rs:39:5\n    |\n LL |     type B = &'static Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9ecfe49c2b571bbd2781fc35dd3262d5a299744b", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -10,7 +10,7 @@ LL |         let () = p;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-in-other-trait-items.rs:39:25\n+  --> $DIR/defaults-in-other-trait-items.rs:37:25\n    |\n LL |     const C: Self::Ty = 0u8;\n    |                         ^^^ expected associated type, found `u8`"}, {"sha": "c91b8de39f52ea84905ee60b503d101368c5f560", "filename": "src/test/ui/associated-types/defaults-mixed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,5 +1,3 @@\n-// compile-fail\n-\n #![feature(associated_type_defaults)]\n \n // Tests that a trait with one defaulted and one non-defaulted assoc. type behaves properly."}, {"sha": "69ddd5f2326d1305d9035b0c7f5f039d8811e11a", "filename": "src/test/ui/associated-types/defaults-mixed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-mixed.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `Bar`\n-  --> $DIR/defaults-mixed.rs:13:1\n+  --> $DIR/defaults-mixed.rs:11:1\n    |\n LL |     type Bar;\n    |     --------- `Bar` from trait\n@@ -8,7 +8,7 @@ LL | impl Trait for () {}\n    | ^^^^^^^^^^^^^^^^^ missing `Bar` in implementation\n \n error[E0046]: not all trait items implemented, missing: `Bar`\n-  --> $DIR/defaults-mixed.rs:16:1\n+  --> $DIR/defaults-mixed.rs:14:1\n    |\n LL |     type Bar;\n    |     --------- `Bar` from trait"}, {"sha": "d0ed718b839230c6465a6057f86b090fc29ec179", "filename": "src/test/ui/associated-types/defaults-specialization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,7 +1,5 @@\n //! Tests the interaction of associated type defaults and specialization.\n \n-// compile-fail\n-\n #![feature(associated_type_defaults, specialization)]\n \n trait Tr {"}, {"sha": "1dd536ec6360f3cdfa67d9f50251f444561e0f9c", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `make` has an incompatible type for trait\n-  --> $DIR/defaults-specialization.rs:20:18\n+  --> $DIR/defaults-specialization.rs:18:18\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n@@ -13,7 +13,7 @@ LL |     fn make() -> u8 { 0 }\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0053]: method `make` has an incompatible type for trait\n-  --> $DIR/defaults-specialization.rs:36:18\n+  --> $DIR/defaults-specialization.rs:34:18\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n@@ -27,7 +27,7 @@ LL |     fn make() -> bool { true }\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:11:9\n+  --> $DIR/defaults-specialization.rs:9:9\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- expected `<Self as Tr>::Ty` because of return type\n@@ -40,7 +40,7 @@ LL |         0u8\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:27:29\n+  --> $DIR/defaults-specialization.rs:25:29\n    |\n LL |     fn make() -> Self::Ty { 0u8 }\n    |                  --------   ^^^ expected associated type, found `u8`\n@@ -53,7 +53,7 @@ LL |     fn make() -> Self::Ty { 0u8 }\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:45:29\n+  --> $DIR/defaults-specialization.rs:43:29\n    |\n LL |     fn make() -> Self::Ty { true }\n    |                  --------   ^^^^ expected associated type, found `bool`\n@@ -66,7 +66,7 @@ LL |     fn make() -> Self::Ty { true }\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:88:32\n+  --> $DIR/defaults-specialization.rs:86:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    |            -----------------   ^^^ expected associated type, found `u8`\n@@ -79,7 +79,7 @@ LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:89:32\n+  --> $DIR/defaults-specialization.rs:87:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = true;\n    |            -----------------   ^^^^ expected associated type, found `bool`\n@@ -92,7 +92,7 @@ LL |     let _: <B<()> as Tr>::Ty = true;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:90:33\n+  --> $DIR/defaults-specialization.rs:88:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    |            ------------------   ^^^ expected associated type, found `u8`\n@@ -105,7 +105,7 @@ LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:91:33\n+  --> $DIR/defaults-specialization.rs:89:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = true;\n    |            ------------------   ^^^^ expected associated type, found `bool`"}, {"sha": "2be01cba105eff9c03523c341e6618af73e0f459", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -6,8 +6,6 @@\n //!   (eg. `type Assoc: Clone = NotClone`), and also against where clauses on\n //!   the trait itself when possible\n \n-// compile-fail\n-\n #![feature(associated_type_defaults)]\n \n struct NotClone;"}, {"sha": "60e1821b300d249a054ac2ab4080b2de0ac25a5a", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:17:14\n+  --> $DIR/defaults-suitability.rs:15:14\n    |\n LL | trait Tr {\n    | -------- required by `Tr`\n LL |     type Ty: Clone = NotClone;\n    |              ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n \n error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:22:27\n+  --> $DIR/defaults-suitability.rs:20:27\n    |\n LL | trait Tr2 where Self::Ty: Clone {\n    | --------------------------^^^^^\n@@ -16,20 +16,22 @@ LL | trait Tr2 where Self::Ty: Clone {\n    | required by `Tr2`\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:35:15\n+  --> $DIR/defaults-suitability.rs:33:15\n    |\n LL | trait Foo<T> {\n-   | ------------\n-   | |         |\n-   | |         help: consider restricting this bound: `T: std::clone::Clone`\n-   | required by `Foo`\n+   | ------------ required by `Foo`\n LL |     type Bar: Clone = Vec<T>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n    |\n+help: consider restricting this type parameter with `T: std::clone::Clone`\n+  --> $DIR/defaults-suitability.rs:32:11\n+   |\n+LL | trait Foo<T> {\n+   |           ^\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<T>`\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:41:17\n+  --> $DIR/defaults-suitability.rs:39:17\n    |\n LL | trait Bar: Sized {\n    | ---------------- required by `Bar`\n@@ -38,7 +40,7 @@ LL |     type Assoc: Foo<Self> = ();\n    |                 ^^^^^^^^^ the trait `Foo<Self>` is not implemented for `()`\n \n error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:61:18\n+  --> $DIR/defaults-suitability.rs:59:18\n    |\n LL | / trait D where\n LL | |     Vec<Self::Assoc>: Clone,\n@@ -51,7 +53,7 @@ LL | | }\n    | |_- required by `D`\n \n error[E0277]: the trait bound `bool: IsU8<NotClone>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:63:11\n+  --> $DIR/defaults-suitability.rs:61:11\n    |\n LL | / trait D where\n LL | |     Vec<Self::Assoc>: Clone,\n@@ -66,7 +68,7 @@ LL | | }\n    | |_- required by `D`\n \n error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:59:23\n+  --> $DIR/defaults-suitability.rs:57:23\n    |\n LL | / trait D where\n LL | |     Vec<Self::Assoc>: Clone,\n@@ -81,7 +83,7 @@ LL | | }\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<NotClone>`\n \n error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:74:15\n+  --> $DIR/defaults-suitability.rs:72:15\n    |\n LL | trait Foo2<T> {\n    | -------------- help: consider further restricting the associated type: `where <Self as Foo2<T>>::Baz: std::clone::Clone`\n@@ -93,7 +95,7 @@ LL |     type Bar: Clone = Vec<Self::Baz>;\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n \n error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:83:15\n+  --> $DIR/defaults-suitability.rs:81:15\n    |\n LL | trait Foo25<T: Clone> {\n    | ---------------------- help: consider further restricting the associated type: `where <Self as Foo25<T>>::Baz: std::clone::Clone`\n@@ -105,22 +107,26 @@ LL |     type Bar: Clone = Vec<Self::Baz>;\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo25<T>>::Baz>`\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:92:16\n+  --> $DIR/defaults-suitability.rs:90:16\n    |\n LL | / trait Foo3<T> where\n LL | |     Self::Bar: Clone,\n LL | |     Self::Baz: Clone,\n-   | |                ^^^^^ - help: consider further restricting type parameter `T`: `, T: std::clone::Clone`\n-   | |                |\n-   | |                the trait `std::clone::Clone` is not implemented for `T`\n+   | |                ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n LL | |\n ...  |\n LL | |     type Baz = T;\n LL | | }\n    | |_- required by `Foo3`\n+   |\n+help: consider restricting this type parameter with `where T: std::clone::Clone`\n+  --> $DIR/defaults-suitability.rs:88:12\n+   |\n+LL | trait Foo3<T> where\n+   |            ^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/defaults-suitability.rs:29:5\n+  --> $DIR/defaults-suitability.rs:27:5\n    |\n LL |     type Ty = Vec<[u8]>;\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "c8b4734d6edc50640a3f77f86249b850b57cb2e5", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -7,8 +7,6 @@\n //! Note that the underlying cause of this is still not yet fixed.\n //! See: https://github.com/rust-lang/rust/issues/33017\n \n-// compile-fail\n-\n #![feature(associated_type_defaults)]\n \n use std::{"}, {"sha": "9c4a1260139426b4a676daff476bd7174c8781c8", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:23:18\n+  --> $DIR/defaults-unsound-62211-1.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -8,7 +8,7 @@ LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-1.rs:27:7\n+  --> $DIR/defaults-unsound-62211-1.rs:25:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -19,7 +19,7 @@ LL |     + AddAssign<&'static str>\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:25:7\n+  --> $DIR/defaults-unsound-62211-1.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -28,7 +28,7 @@ LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:30:7\n+  --> $DIR/defaults-unsound-62211-1.rs:28:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -40,41 +40,55 @@ LL |     + Display = Self;\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:43:9\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n-   |      |\n-   |      help: consider restricting this bound: `T: std::fmt::Display`\n+   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+help: consider restricting this type parameter with `T: std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:43:9\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::ops::Deref`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::ops::Deref`\n+   |      ^\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n-  --> $DIR/defaults-unsound-62211-1.rs:43:9\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::ops::AddAssign<&'static str>`\n+   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::ops::AddAssign<&'static str>`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:43:9\n+  --> $DIR/defaults-unsound-62211-1.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/defaults-unsound-62211-1.rs:41:6\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::marker::Copy`\n+   |      ^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "aa343e759a8f50eb2fa8ecbdbecd8f584388a39a", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -7,8 +7,6 @@\n //! Note that the underlying cause of this is still not yet fixed.\n //! See: https://github.com/rust-lang/rust/issues/33017\n \n-// compile-fail\n-\n #![feature(associated_type_defaults)]\n \n use std::{"}, {"sha": "4602fbc99fa62945147b0f4e0863eea758c686c4", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d4da926f2633de5da22e2aef7f693c3505aa206/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=4d4da926f2633de5da22e2aef7f693c3505aa206", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:23:18\n+  --> $DIR/defaults-unsound-62211-2.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -8,7 +8,7 @@ LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-2.rs:27:7\n+  --> $DIR/defaults-unsound-62211-2.rs:25:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -19,7 +19,7 @@ LL |     + AddAssign<&'static str>\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:25:7\n+  --> $DIR/defaults-unsound-62211-2.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -28,7 +28,7 @@ LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:30:7\n+  --> $DIR/defaults-unsound-62211-2.rs:28:7\n    |\n LL | trait UncheckedCopy: Sized {\n    | -------------------------- required by `UncheckedCopy`\n@@ -40,41 +40,55 @@ LL |     + Display = Self;\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:43:9\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n-   |      |\n-   |      help: consider restricting this bound: `T: std::fmt::Display`\n+   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+help: consider restricting this type parameter with `T: std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:43:9\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::ops::Deref`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::ops::Deref`\n+   |      ^\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n-  --> $DIR/defaults-unsound-62211-2.rs:43:9\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::ops::AddAssign<&'static str>`\n+   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::ops::AddAssign<&'static str>`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |      ^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:43:9\n+  --> $DIR/defaults-unsound-62211-2.rs:41:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/defaults-unsound-62211-2.rs:41:6\n    |\n LL | impl<T> UncheckedCopy for T {}\n-   |      -  ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::marker::Copy`\n+   |      ^\n \n error: aborting due to 8 previous errors\n "}]}