{"sha": "0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOWQ2ZjliYjBlZDY3NWM4MmMzMGNhNmEzMjI3NzMxZjJmYWNmNmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T10:50:41Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T10:50:41Z"}, "message": "Rollup merge of #49864 - QuietMisdreavus:doctest-target-features, r=GuillaumeGomez\n\nadd target features when extracting and running doctests\n\nWhen rendering documentation, rustdoc will happily load target features into the cfg environment from the current target, but fails to do this when doing anything with doctests. This would lead to situations where, thanks to https://github.com/rust-lang/rust/pull/48759, functions tagged with `#[target_feature]` couldn't run doctests, thanks to the automatic `#[doc(cfg(target_feature = \"...\"))]`.\n\nCurrently, there's no way to pass codegen options to rustdoc that will affect its rustc sessions, but for now this will let you use target features that come default on the platform you're targeting.\n\nFixes https://github.com/rust-lang/rust/issues/49723", "tree": {"sha": "a00a2bd501dfb0d8bb08075a8a5e15fec408b9e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a00a2bd501dfb0d8bb08075a8a5e15fec408b9e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrR3QEACgkQ/vbIBR0O\nATz+0g/9GK0QlenYnTwVbudcdvocexJ2iitLaVw+dHlC6lnI8WZR8Guh/lTpLWPu\nTMXDbU9Vvg2S+NpS3ii+LVYdJviYltLFFqzOuicRAfM8947el10s+uupUItKPjD+\n8OjiKubbbK7TkSD2kfAoYqqLdCQwRxXM/BBaKUcIYWNYptMz9GjJ/+eileBbA6Pg\nIP3zBPVgf6crs10JBNCXVc+0hnzLjcrbjsUVal0irsRsHjtlkv+aDR5IeNja9w6s\n+vOZ0kavWlYLEmDNh9MBOkgpC7ePJ2siZnZcQniIAPNmFS85VydbU4mO6GERdn3q\nqaBOZYpEbwspChzOVBIfNe3788CBy8ZwaJ8KqBhgDpbgKvav9KjXKv7cjmzeQC7k\nn8e5yG4HbBRfp40fy0zkzF+UJfntY/osL3lVP5AmQnLKsdk0ojLY9xigQUF0oBJv\nycJtp1mC/68frv3ZMxRXO+Ybt4K/2/hyUWIENWkG8JAHCG1bCK+nvS+DbjS8s2k+\nFum7VXLDwAixFxsJtHoiDAqdS/VuFNMWFa4GD0cd1V3Lt44xW9s851iR77Q+lQ+6\nqt1EFUUt831aQIFCJt+wYktUxWISzAuJECde2FUInafJcTPoF2dH15bZ9Qk4mvgr\nVjUJ6czkR2cf+Wpzxo3WqCJJqhcQ/dHrNeh/8WByg1nYgTPKjSo=\n=zYAI\n-----END PGP SIGNATURE-----", "payload": "tree a00a2bd501dfb0d8bb08075a8a5e15fec408b9e7\nparent 709ec4010d620f5942922b722ee2388df6f51b53\nparent 3366032ab70f72763bdf45c7f1257aa20b4229ca\nauthor kennytm <kennytm@gmail.com> 1523703041 +0800\ncommitter kennytm <kennytm@gmail.com> 1523703041 +0800\n\nRollup merge of #49864 - QuietMisdreavus:doctest-target-features, r=GuillaumeGomez\n\nadd target features when extracting and running doctests\n\nWhen rendering documentation, rustdoc will happily load target features into the cfg environment from the current target, but fails to do this when doing anything with doctests. This would lead to situations where, thanks to https://github.com/rust-lang/rust/pull/48759, functions tagged with `#[target_feature]` couldn't run doctests, thanks to the automatic `#[doc(cfg(target_feature = \"...\"))]`.\n\nCurrently, there's no way to pass codegen options to rustdoc that will affect its rustc sessions, but for now this will let you use target features that come default on the platform you're targeting.\n\nFixes https://github.com/rust-lang/rust/issues/49723\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "html_url": "https://github.com/rust-lang/rust/commit/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709ec4010d620f5942922b722ee2388df6f51b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/709ec4010d620f5942922b722ee2388df6f51b53", "html_url": "https://github.com/rust-lang/rust/commit/709ec4010d620f5942922b722ee2388df6f51b53"}, {"sha": "3366032ab70f72763bdf45c7f1257aa20b4229ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3366032ab70f72763bdf45c7f1257aa20b4229ca", "html_url": "https://github.com/rust-lang/rust/commit/3366032ab70f72763bdf45c7f1257aa20b4229ca"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "a166bca709edbc232b3b5fdf36d682adc5db0d43", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "patch": "@@ -28,7 +28,7 @@ use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use tempdir::TempDir;\n-use rustc_driver::{self, driver, Compilation};\n+use rustc_driver::{self, driver, target_features, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n@@ -96,8 +96,10 @@ pub fn run(input_path: &Path,\n     let trans = rustc_driver::get_trans(&sess);\n     let cstore = CStore::new(trans.metadata_loader());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n-    sess.parse_sess.config =\n-        config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+\n+    let mut cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+    target_features::add_configuration(&mut cfg, &sess, &*trans);\n+    sess.parse_sess.config = cfg;\n \n     let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n                                                       &sess,\n@@ -271,8 +273,11 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let outdir = Mutex::new(TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\"));\n     let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n     let mut control = driver::CompileController::basic();\n-    sess.parse_sess.config =\n-        config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+\n+    let mut cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+    target_features::add_configuration(&mut cfg, &sess, &*trans);\n+    sess.parse_sess.config = cfg;\n+\n     let out = Some(outdir.lock().unwrap().path().to_path_buf());\n \n     if no_run {"}, {"sha": "ddc5e5bb3f8ccb84eeeb97432ac52420b7fad886", "filename": "src/test/rustdoc/doc-cfg-target-feature.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a/src%2Ftest%2Frustdoc%2Fdoc-cfg-target-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a/src%2Ftest%2Frustdoc%2Fdoc-cfg-target-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-target-feature.rs?ref=0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+// compile-flags:--test\n+// should-fail\n+// no-system-llvm\n+\n+// #49723: rustdoc didn't add target features when extracting or running doctests\n+\n+#![feature(doc_cfg)]\n+\n+/// Foo\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cfg_target_feature)]\n+///\n+/// #[cfg(target_feature = \"sse\")]\n+/// assert!(false);\n+/// ```\n+#[doc(cfg(target_feature = \"sse\"))]\n+pub unsafe fn foo() {}"}]}