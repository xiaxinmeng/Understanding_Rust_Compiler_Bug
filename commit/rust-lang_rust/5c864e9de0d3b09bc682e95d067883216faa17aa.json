{"sha": "5c864e9de0d3b09bc682e95d067883216faa17aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODY0ZTlkZTBkM2IwOWJjNjgyZTk1ZDA2Nzg4MzIxNmZhYTE3YWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T00:38:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T02:04:32Z"}, "message": "rustc: Eliminate encoder's dependency on astencode", "tree": {"sha": "3f4a58322a6e2ff9bf701feeb987f18af6cf3911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f4a58322a6e2ff9bf701feeb987f18af6cf3911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c864e9de0d3b09bc682e95d067883216faa17aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c864e9de0d3b09bc682e95d067883216faa17aa", "html_url": "https://github.com/rust-lang/rust/commit/5c864e9de0d3b09bc682e95d067883216faa17aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c864e9de0d3b09bc682e95d067883216faa17aa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c4b6da5ba01e1f7e4a9c3f1e288a7cbc73a32e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c4b6da5ba01e1f7e4a9c3f1e288a7cbc73a32e", "html_url": "https://github.com/rust-lang/rust/commit/32c4b6da5ba01e1f7e4a9c3f1e288a7cbc73a32e"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "73c2faa5161b7f9b327b7b3a1b3e8d013ccd3610", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5c864e9de0d3b09bc682e95d067883216faa17aa/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c864e9de0d3b09bc682e95d067883216faa17aa/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=5c864e9de0d3b09bc682e95d067883216faa17aa", "patch": "@@ -20,12 +20,12 @@ import std::ebml::serializer;\n import middle::resolve;\n import syntax::ast;\n import driver::session::session;\n-import middle::astencode;\n \n export encode_parms;\n export encode_metadata;\n export encoded_ty;\n export reachable;\n+export encode_inlined_item;\n \n // used by astencode:\n export def_to_str;\n@@ -35,6 +35,11 @@ export encode_def_id;\n \n type abbrev_map = map::hashmap<ty::t, tyencode::ty_abbrev>;\n \n+type encode_inlined_item = fn@(ecx: @encode_ctxt,\n+                               ebml_w: ebml::writer,\n+                               path: ast_map::path,\n+                               ii: ast::inlined_item);\n+\n type encode_parms = {\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n@@ -43,10 +48,11 @@ type encode_parms = {\n     discrim_symbols: hashmap<ast::node_id, str>,\n     link_meta: back::link::link_meta,\n     cstore: cstore::cstore,\n-    maps: maps\n+    maps: maps,\n+    encode_inlined_item: encode_inlined_item\n };\n \n-type encode_ctxt = {\n+enum encode_ctxt = {\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     exp_map: resolve::exp_map,\n@@ -55,6 +61,7 @@ type encode_ctxt = {\n     link_meta: back::link::link_meta,\n     cstore: cstore::cstore,\n     maps: maps,\n+    encode_inlined_item: encode_inlined_item,\n     type_abbrevs: abbrev_map\n };\n \n@@ -491,7 +498,7 @@ fn encode_info_for_fn(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         encode_path(ebml_w, path, ast_map::path_name(ident));\n         alt item {\n            some(it) {\n-             astencode::encode_inlined_item(ecx, ebml_w, path, it);\n+             ecx.encode_inlined_item(ecx, ebml_w, path, it);\n            }\n            none {\n              encode_symbol(ecx, ebml_w, id);\n@@ -513,7 +520,7 @@ fn encode_info_for_method(ecx: @encode_ctxt, ebml_w: ebml::writer,\n     encode_name(ebml_w, m.ident);\n     encode_path(ebml_w, impl_path, ast_map::path_name(m.ident));\n     if all_tps.len() > 0u || should_inline {\n-        astencode::encode_inlined_item(\n+        ecx.encode_inlined_item(\n            ecx, ebml_w, impl_path,\n            ii_method(local_def(parent_id), m));\n     } else {\n@@ -574,7 +581,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         if tps.len() > 0u || should_inline(item.attrs) {\n-            astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n+            ecx.encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n         } else {\n             encode_symbol(ecx, ebml_w, item.id);\n         }\n@@ -616,7 +623,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n             for variants.each {|v|\n                 encode_variant_id(ebml_w, local_def(v.node.id));\n             }\n-            astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n+            ecx.encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n             encode_path(ebml_w, path, ast_map::path_name(item.ident));\n             encode_region_param(ebml_w, rp);\n         }\n@@ -692,7 +699,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, ty::ty_fn_ret(fn_ty));\n         encode_name(ebml_w, item.ident);\n-        astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n+        ecx.encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n         if (tps.len() == 0u) {\n             encode_symbol(ecx, ebml_w, item.id);\n         }\n@@ -777,8 +784,8 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, nitem.id));\n         if abi == native_abi_rust_intrinsic {\n-            astencode::encode_inlined_item(ecx, ebml_w, path,\n-                                           ii_native(nitem));\n+            ecx.encode_inlined_item(ecx, ebml_w, path,\n+                                    ii_native(nitem));\n         } else {\n             encode_symbol(ecx, ebml_w, nitem.id);\n         }\n@@ -1045,7 +1052,7 @@ fn encode_hash(ebml_w: ebml::writer, hash: str) {\n }\n \n fn encode_metadata(parms: encode_parms, crate: @crate) -> [u8] {\n-    let ecx: @encode_ctxt = @{\n+    let ecx: @encode_ctxt = @encode_ctxt({\n         tcx: parms.tcx,\n         reachable: parms.reachable,\n         exp_map: parms.exp_map,\n@@ -1054,8 +1061,9 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> [u8] {\n         link_meta: parms.link_meta,\n         cstore: parms.cstore,\n         maps: parms.maps,\n+        encode_inlined_item: parms.encode_inlined_item,\n         type_abbrevs: ty::new_ty_hash()\n-     };\n+     });\n \n     let buf = io::mem_buffer();\n     let buf_w = io::mem_buffer_writer(buf);"}, {"sha": "e88ce94d788fc375c49fef223893b9062284f38e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c864e9de0d3b09bc682e95d067883216faa17aa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c864e9de0d3b09bc682e95d067883216faa17aa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5c864e9de0d3b09bc682e95d067883216faa17aa", "patch": "@@ -5000,6 +5000,7 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         link_meta: cx.link_meta,\n         cstore: cx.sess.cstore,\n         maps: cx.maps,\n+        encode_inlined_item: middle::astencode::encode_inlined_item\n     }\n \n }"}]}