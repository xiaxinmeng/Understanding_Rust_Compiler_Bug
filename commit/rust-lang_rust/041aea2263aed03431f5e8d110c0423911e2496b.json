{"sha": "041aea2263aed03431f5e8d110c0423911e2496b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MWFlYTIyNjNhZWQwMzQzMWY1ZThkMTEwYzA0MjM5MTFlMjQ5NmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-29T09:26:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-29T09:26:21Z"}, "message": "Better filtering of qualified enum variants in completion", "tree": {"sha": "9e3939c05563752ee9a6976c8b7e5784561c1e26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3939c05563752ee9a6976c8b7e5784561c1e26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/041aea2263aed03431f5e8d110c0423911e2496b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/041aea2263aed03431f5e8d110c0423911e2496b", "html_url": "https://github.com/rust-lang/rust/commit/041aea2263aed03431f5e8d110c0423911e2496b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/041aea2263aed03431f5e8d110c0423911e2496b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6046804cec77d1d336b556f3dbdf964b5aa44ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6046804cec77d1d336b556f3dbdf964b5aa44ed7", "html_url": "https://github.com/rust-lang/rust/commit/6046804cec77d1d336b556f3dbdf964b5aa44ed7"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "a6a5568de0bf55dffcdb591a6ae352a54ed38efa", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/041aea2263aed03431f5e8d110c0423911e2496b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041aea2263aed03431f5e8d110c0423911e2496b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=041aea2263aed03431f5e8d110c0423911e2496b", "patch": "@@ -53,7 +53,7 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n                 // Variants with trivial paths are already added by the existing completion logic,\n                 // so we should avoid adding these twice\n                 if path.segments.len() > 1 {\n-                    acc.add_enum_variant(ctx, variant, Some(path.to_string()));\n+                    acc.add_qualified_enum_variant(ctx, variant, path);\n                 }\n             }\n         }\n@@ -1173,6 +1173,7 @@ mod tests {\n                 delete: 248..250,\n                 insert: \"Foo::Bar\",\n                 kind: EnumVariant,\n+                lookup: \"Bar\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1181,6 +1182,7 @@ mod tests {\n                 delete: 248..250,\n                 insert: \"Foo::Baz\",\n                 kind: EnumVariant,\n+                lookup: \"Baz\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1189,6 +1191,7 @@ mod tests {\n                 delete: 248..250,\n                 insert: \"Foo::Quux\",\n                 kind: EnumVariant,\n+                lookup: \"Quux\",\n                 detail: \"()\",\n             },\n         ]\n@@ -1231,6 +1234,7 @@ mod tests {\n                 delete: 219..221,\n                 insert: \"Foo::Bar\",\n                 kind: EnumVariant,\n+                lookup: \"Bar\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1239,6 +1243,7 @@ mod tests {\n                 delete: 219..221,\n                 insert: \"Foo::Baz\",\n                 kind: EnumVariant,\n+                lookup: \"Baz\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1247,6 +1252,7 @@ mod tests {\n                 delete: 219..221,\n                 insert: \"Foo::Quux\",\n                 kind: EnumVariant,\n+                lookup: \"Quux\",\n                 detail: \"()\",\n             },\n         ]\n@@ -1285,6 +1291,7 @@ mod tests {\n                 delete: 185..186,\n                 insert: \"Foo::Bar\",\n                 kind: EnumVariant,\n+                lookup: \"Bar\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1293,6 +1300,7 @@ mod tests {\n                 delete: 185..186,\n                 insert: \"Foo::Baz\",\n                 kind: EnumVariant,\n+                lookup: \"Baz\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1301,6 +1309,7 @@ mod tests {\n                 delete: 185..186,\n                 insert: \"Foo::Quux\",\n                 kind: EnumVariant,\n+                lookup: \"Quux\",\n                 detail: \"()\",\n             },\n             CompletionItem {\n@@ -1353,6 +1362,7 @@ mod tests {\n                 delete: 98..99,\n                 insert: \"m::E::V\",\n                 kind: EnumVariant,\n+                lookup: \"V\",\n                 detail: \"()\",\n             },\n         ]"}, {"sha": "2edb130cf7bfca726dce877a8d8ad2e8f1951dba", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/041aea2263aed03431f5e8d110c0423911e2496b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041aea2263aed03431f5e8d110c0423911e2496b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=041aea2263aed03431f5e8d110c0423911e2496b", "patch": "@@ -1,6 +1,6 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, StructKind, Type};\n+use hir::{Docs, HasAttrs, HasSource, HirDisplay, ModPath, ScopeDef, StructKind, Type};\n use ra_syntax::ast::NameOwner;\n use stdx::SepBy;\n use test_utils::tested_by;\n@@ -246,14 +246,37 @@ impl Completions {\n             .add_to(self);\n     }\n \n+    pub(crate) fn add_qualified_enum_variant(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        variant: hir::EnumVariant,\n+        path: ModPath,\n+    ) {\n+        self.add_enum_variant_impl(ctx, variant, None, Some(path))\n+    }\n+\n     pub(crate) fn add_enum_variant(\n         &mut self,\n         ctx: &CompletionContext,\n         variant: hir::EnumVariant,\n         local_name: Option<String>,\n+    ) {\n+        self.add_enum_variant_impl(ctx, variant, local_name, None)\n+    }\n+\n+    fn add_enum_variant_impl(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        variant: hir::EnumVariant,\n+        local_name: Option<String>,\n+        path: Option<ModPath>,\n     ) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = local_name.unwrap_or_else(|| variant.name(ctx.db).to_string());\n+        let qualified_name = match &path {\n+            Some(it) => it.to_string(),\n+            None => name.to_string(),\n+        };\n         let detail_types = variant\n             .fields(ctx.db)\n             .into_iter()\n@@ -271,16 +294,23 @@ impl Completions {\n                 .surround_with(\"{ \", \" }\")\n                 .to_string(),\n         };\n-        let mut res =\n-            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone())\n-                .kind(CompletionItemKind::EnumVariant)\n-                .set_documentation(variant.docs(ctx.db))\n-                .set_deprecated(is_deprecated)\n-                .detail(detail);\n+        let mut res = CompletionItem::new(\n+            CompletionKind::Reference,\n+            ctx.source_range(),\n+            qualified_name.clone(),\n+        )\n+        .kind(CompletionItemKind::EnumVariant)\n+        .set_documentation(variant.docs(ctx.db))\n+        .set_deprecated(is_deprecated)\n+        .detail(detail);\n+\n+        if path.is_some() {\n+            res = res.lookup_by(name);\n+        }\n \n         if variant_kind == StructKind::Tuple {\n             let params = Params::Anonymous(variant.fields(ctx.db).len());\n-            res = res.add_call_parens(ctx, name, params)\n+            res = res.add_call_parens(ctx, qualified_name, params)\n         }\n \n         res.add_to(self);"}]}