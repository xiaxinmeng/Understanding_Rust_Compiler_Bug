{"sha": "65f3007fa8a08daf77f2b8382a56eb80cb277131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZjMwMDdmYThhMDhkYWY3N2YyYjgzODJhNTZlYjgwY2IyNzcxMzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-03T22:36:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-16T14:58:06Z"}, "message": "rustc: Stabilize much of the `proc_macro` feature\n\nThis commit stabilizes some of the `proc_macro` language feature as well as a\nnumber of APIs in the `proc_macro` crate as [previously discussed][1]. This\nmeans that on stable Rust you can now define custom procedural macros which\noperate as attributes attached to items or `macro_rules!`-like bang-style\ninvocations. This extends the suite of currently stable procedural macros,\ncustom derives, with custom attributes and custom bang macros.\n\nNote though that despite the stabilization in this commit procedural macros are\nstill not usable on stable Rust. To stabilize that we'll need to stabilize at\nleast part of the `use_extern_macros` feature. Currently you can define a\nprocedural macro attribute but you can't import it to call it!\n\nA summary of the changes made in this PR (as well as the various consequences)\nis:\n\n* The `proc_macro` language and library features are now stable.\n* Other APIs not stabilized in the `proc_macro` crate are now named under a\n  different feature, such as `proc_macro_diagnostic` or `proc_macro_span`.\n* A few checks in resolution for `proc_macro` being enabled have switched over\n  to `use_extern_macros` being enabled. This means that code using\n  `#![feature(proc_macro)]` today will likely need to move to\n  `#![feature(use_extern_macros)]`.\n\nIt's intended that this PR, once landed, will be followed up with an attempt to\nstabilize a small slice of `use_extern_macros` just for procedural macros to\nmake this feature 100% usable on stable.\n\n[1]: https://internals.rust-lang.org/t/help-stabilize-a-subset-of-macros-2-0/7252", "tree": {"sha": "49537e475912785d0492cae1f7c3767b3ade7634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49537e475912785d0492cae1f7c3767b3ade7634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65f3007fa8a08daf77f2b8382a56eb80cb277131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65f3007fa8a08daf77f2b8382a56eb80cb277131", "html_url": "https://github.com/rust-lang/rust/commit/65f3007fa8a08daf77f2b8382a56eb80cb277131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65f3007fa8a08daf77f2b8382a56eb80cb277131/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5753fda1ee8f729da1061e931e13b043f479a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5753fda1ee8f729da1061e931e13b043f479a5", "html_url": "https://github.com/rust-lang/rust/commit/3d5753fda1ee8f729da1061e931e13b043f479a5"}], "stats": {"total": 756, "additions": 241, "deletions": 515}, "files": [{"sha": "1bd8c41629eea01712d001f940d2e797ee47138f", "filename": "src/doc/unstable-book/src/language-features/proc-macro.md", "status": "removed", "additions": 0, "deletions": 241, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/3d5753fda1ee8f729da1061e931e13b043f479a5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d5753fda1ee8f729da1061e931e13b043f479a5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md?ref=3d5753fda1ee8f729da1061e931e13b043f479a5", "patch": "@@ -1,241 +0,0 @@\n-# `proc_macro`\n-\n-The tracking issue for this feature is: [#38356]\n-\n-[#38356]: https://github.com/rust-lang/rust/issues/38356\n-\n-------------------------\n-\n-This feature flag guards the new procedural macro features as laid out by [RFC 1566], which alongside the now-stable \n-[custom derives], provide stabilizable alternatives to the compiler plugin API (which requires the use of \n-perma-unstable internal APIs) for programmatically modifying Rust code at compile-time.\n-\n-The two new procedural macro kinds are:\n- \n-* Function-like procedural macros which are invoked like regular declarative macros, and:\n-\n-* Attribute-like procedural macros which can be applied to any item which built-in attributes can\n-be applied to, and which can take arguments in their invocation as well.\n-\n-Additionally, this feature flag implicitly enables the [`use_extern_macros`](language-features/use-extern-macros.html) feature,\n-which allows macros to be imported like any other item with `use` statements, as compared to \n-applying `#[macro_use]` to an `extern crate` declaration. It is important to note that procedural macros may\n-**only** be imported in this manner, and will throw an error otherwise.\n-\n-You **must** declare the `proc_macro` feature in both the crate declaring these new procedural macro kinds as well as \n-in any crates that use them.\n-\n-### Common Concepts\n-\n-As with custom derives, procedural macros may only be declared in crates of the `proc-macro` type, and must be public\n-functions. No other public items may be declared in `proc-macro` crates, but private items are fine.\n-\n-To declare your crate as a `proc-macro` crate, simply add:\n-\n-```toml\n-[lib]\n-proc-macro = true\n-```\n-\n-to your `Cargo.toml`. \n-\n-Unlike custom derives, however, the name of the function implementing the procedural macro is used directly as the \n-procedural macro's name, so choose carefully.\n-\n-Additionally, both new kinds of procedural macros return a `TokenStream` which *wholly* replaces the original \n-invocation and its input.\n-\n-#### Importing\n-\n-As referenced above, the new procedural macros are not meant to be imported via `#[macro_use]` and will throw an \n-error if they are. Instead, they are meant to be imported like any other item in Rust, with `use` statements:\n-\n-```rust,ignore\n-#![feature(proc_macro)]\n-\n-// Where `my_proc_macros` is some crate of type `proc_macro`\n-extern crate my_proc_macros;\n-\n-// And declares a `#[proc_macro] pub fn my_bang_macro()` at its root.\n-use my_proc_macros::my_bang_macro;\n-\n-fn main() {\n-    println!(\"{}\", my_bang_macro!());\n-}\n-```\n-\n-#### Error Reporting\n-\n-Any panics in a procedural macro implementation will be caught by the compiler and turned into an error message pointing \n-to the problematic invocation. Thus, it is important to make your panic messages as informative as possible: use \n-`Option::expect` instead of `Option::unwrap` and `Result::expect` instead of `Result::unwrap`, and inform the user of \n-the error condition as unambiguously as you can.\n- \n-#### `TokenStream`\n-\n-The `proc_macro::TokenStream` type is hardcoded into the signatures of procedural macro functions for both input and \n-output. It is a wrapper around the compiler's internal representation for a given chunk of Rust code.\n-\n-### Function-like Procedural Macros\n-\n-These are procedural macros that are invoked like regular declarative macros. They are declared as public functions in \n-crates of the `proc_macro` type and using the `#[proc_macro]` attribute. The name of the declared function becomes the \n-name of the macro as it is to be imported and used. The function must be of the kind `fn(TokenStream) -> TokenStream` \n-where the sole argument is the input to the macro and the return type is the macro's output.\n-\n-This kind of macro can expand to anything that is valid for the context it is invoked in, including expressions and\n-statements, as well as items.\n-\n-**Note**: invocations of this kind of macro require a wrapping `[]`, `{}` or `()` like regular macros, but these do not \n-appear in the input, only the tokens between them. The tokens between the braces do not need to be valid Rust syntax.\n-\n-<span class=\"filename\">my_macro_crate/src/lib.rs</span>\n-\n-```rust,ignore\n-#![feature(proc_macro)]\n-\n-// This is always necessary to get the `TokenStream` typedef.\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro]\n-pub fn say_hello(_input: TokenStream) -> TokenStream {\n-    // This macro will accept any input because it ignores it. \n-    // To enforce correctness in macros which don't take input,\n-    // you may want to add `assert!(_input.to_string().is_empty());`.\n-    \"println!(\\\"Hello, world!\\\")\".parse().unwrap()\n-}\n-```\n-\n-<span class=\"filename\">my_macro_user/Cargo.toml</span>\n-\n-```toml\n-[dependencies]\n-my_macro_crate = { path = \"<relative path to my_macro_crate>\" }\n-```\n-\n-<span class=\"filename\">my_macro_user/src/lib.rs</span>\n-\n-```rust,ignore\n-#![feature(proc_macro)]\n-\n-extern crate my_macro_crate;\n-\n-use my_macro_crate::say_hello;\n-\n-fn main() {\n-    say_hello!();\n-}\n-```\n-\n-As expected, this prints `Hello, world!`.\n-\n-### Attribute-like Procedural Macros\n-\n-These are arguably the most powerful flavor of procedural macro as they can be applied anywhere attributes are allowed. \n-\n-They are declared as public functions in crates of the `proc-macro` type, using the `#[proc_macro_attribute]` attribute. \n-The name of the function becomes the name of the attribute as it is to be imported and used. The function must be of the \n-kind `fn(TokenStream, TokenStream) -> TokenStream` where:\n-\n-The first argument represents any metadata for the attribute (see [the reference chapter on attributes][refr-attr]). \n-Only the metadata itself will appear in this argument, for example:\n- \n- * `#[my_macro]` will get an empty string.\n- * `#[my_macro = \"string\"]` will get `= \"string\"`.\n- * `#[my_macro(ident)]` will get `(ident)`.\n- * etc.\n- \n-The second argument is the item that the attribute is applied to. It can be a function, a type definition, \n-an impl block, an `extern` block, or a module\u2014attribute invocations can take the inner form (`#![my_attr]`) \n-or outer form (`#[my_attr]`).\n-\n-The return type is the output of the macro which *wholly* replaces the item it was applied to. Thus, if your intention\n-is to merely modify an item, it *must* be copied to the output. The output must be an item; expressions, statements\n-and bare blocks are not allowed.\n-\n-There is no restriction on how many items an attribute-like procedural macro can emit as long as they are valid in \n-the given context.\n-\n-<span class=\"filename\">my_macro_crate/src/lib.rs</span>\n-\n-```rust,ignore\n-#![feature(proc_macro)]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-/// Adds a `/// ### Panics` docstring to the end of the input's documentation\n-///\n-/// Does not assert that its receiver is a function or method.\n-#[proc_macro_attribute]\n-pub fn panics_note(args: TokenStream, input: TokenStream) -> TokenStream {\n-    let args = args.to_string();\n-    let mut input = input.to_string();\n-\n-    assert!(args.starts_with(\"= \\\"\"), \"`#[panics_note]` requires an argument of the form \\\n-                                       `#[panics_note = \\\"panic note here\\\"]`\");\n-\n-    // Get just the bare note string\n-    let panics_note = args.trim_matches(&['=', ' ', '\"'][..]);\n-\n-    // The input will include all docstrings regardless of where the attribute is placed,\n-    // so we need to find the last index before the start of the item\n-    let insert_idx = idx_after_last_docstring(&input);\n-\n-    // And insert our `### Panics` note there so it always appears at the end of an item's docs\n-    input.insert_str(insert_idx, &format!(\"/// # Panics \\n/// {}\\n\", panics_note));\n-\n-    input.parse().unwrap()\n-}\n-\n-// `proc-macro` crates can contain any kind of private item still\n-fn idx_after_last_docstring(input: &str) -> usize {\n-    // Skip docstring lines to find the start of the item proper\n-    input.lines().skip_while(|line| line.trim_left().starts_with(\"///\")).next()\n-        // Find the index of the first non-docstring line in the input\n-        // Note: assumes this exact line is unique in the input\n-        .and_then(|line_after| input.find(line_after))\n-        // No docstrings in the input\n-        .unwrap_or(0)\n-}\n-```\n-\n-<span class=\"filename\">my_macro_user/Cargo.toml</span>\n-\n-```toml\n-[dependencies]\n-my_macro_crate = { path = \"<relative path to my_macro_crate>\" }\n-```\n-\n-<span class=\"filename\">my_macro_user/src/lib.rs</span>\n-\n-```rust,ignore\n-#![feature(proc_macro)]\n-\n-extern crate my_macro_crate;\n-\n-use my_macro_crate::panics_note;\n-\n-/// Do the `foo` thing.\n-#[panics_note = \"Always.\"]\n-pub fn foo() {\n-    panic!()\n-}\n-```\n-\n-Then the rendered documentation for `pub fn foo` will look like this:\n-\n-> `pub fn foo()`\n-> \n-> ----\n-> Do the `foo` thing.\n-> # Panics\n-> Always.\n-\n-[RFC 1566]: https://github.com/rust-lang/rfcs/blob/master/text/1566-proc-macros.md\n-[custom derives]: https://doc.rust-lang.org/book/procedural-macros.html\n-[rust-lang/rust#41430]: https://github.com/rust-lang/rust/issues/41430\n-[refr-attr]: https://doc.rust-lang.org/reference/attributes.html"}, {"sha": "06939a9d1e1cbbcecfa7ed70b2ab340e09fa2599", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -13,7 +13,7 @@ use Span;\n use rustc_errors as rustc;\n \n /// An enum representing a diagnostic level.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n #[derive(Copy, Clone, Debug)]\n pub enum Level {\n     /// An error.\n@@ -30,7 +30,7 @@ pub enum Level {\n \n /// A structure representing a diagnostic message and associated children\n /// messages.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n #[derive(Clone, Debug)]\n pub struct Diagnostic {\n     level: Level,\n@@ -43,15 +43,15 @@ macro_rules! diagnostic_child_methods {\n     ($spanned:ident, $regular:ident, $level:expr) => (\n         /// Add a new child diagnostic message to `self` with the level\n         /// identified by this methods name with the given `span` and `message`.\n-        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n         pub fn $spanned<T: Into<String>>(mut self, span: Span, message: T) -> Diagnostic {\n             self.children.push(Diagnostic::spanned(span, $level, message));\n             self\n         }\n \n         /// Add a new child diagnostic message to `self` with the level\n         /// identified by this method's name with the given `message`.\n-        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n         pub fn $regular<T: Into<String>>(mut self, message: T) -> Diagnostic {\n             self.children.push(Diagnostic::new($level, message));\n             self\n@@ -61,7 +61,7 @@ macro_rules! diagnostic_child_methods {\n \n impl Diagnostic {\n     /// Create a new diagnostic with the given `level` and `message`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n     pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n         Diagnostic {\n             level: level,\n@@ -73,7 +73,7 @@ impl Diagnostic {\n \n     /// Create a new diagnostic with the given `level` and `message` pointing to\n     /// the given `span`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n     pub fn spanned<T: Into<String>>(span: Span, level: Level, message: T) -> Diagnostic {\n         Diagnostic {\n             level: level,\n@@ -89,13 +89,13 @@ impl Diagnostic {\n     diagnostic_child_methods!(span_help, help, Level::Help);\n \n     /// Returns the diagnostic `level` for `self`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n     pub fn level(&self) -> Level {\n         self.level\n     }\n \n     /// Emit the diagnostic.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n     pub fn emit(self) {\n         ::__internal::with_sess(move |sess, _| {\n             let handler = &sess.span_diagnostic;"}, {"sha": "f5a7c88a1b71a274a857e8f4545284dd02baa22f", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 122, "deletions": 100, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -46,7 +46,7 @@ extern crate rustc_data_structures;\n \n mod diagnostic;\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n pub use diagnostic::{Diagnostic, Level};\n \n use std::{ascii, fmt, iter};\n@@ -94,13 +94,13 @@ impl !Sync for LexError {}\n \n impl TokenStream {\n     /// Returns an empty `TokenStream` containing no token trees.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn new() -> TokenStream {\n         TokenStream(tokenstream::TokenStream::empty())\n     }\n \n     /// Checks if this `TokenStream` is empty.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.0.is_empty()\n     }\n@@ -146,15 +146,15 @@ impl fmt::Debug for TokenStream {\n }\n \n /// Creates a token stream containing a single token tree.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl From<TokenTree> for TokenStream {\n     fn from(tree: TokenTree) -> TokenStream {\n         TokenStream(tree.to_internal())\n     }\n }\n \n /// Collects a number of token trees into a single stream.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl iter::FromIterator<TokenTree> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenTree>>(trees: I) -> Self {\n         trees.into_iter().map(TokenStream::from).collect()\n@@ -175,7 +175,7 @@ impl iter::FromIterator<TokenStream> for TokenStream {\n }\n \n /// Public implementation details for the `TokenStream` type, such as iterators.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub mod token_stream {\n     use syntax::tokenstream;\n     use {TokenTree, TokenStream, Delimiter};\n@@ -184,13 +184,13 @@ pub mod token_stream {\n     /// The iteration is \"shallow\", e.g. the iterator doesn't recurse into delimited groups,\n     /// and returns whole groups as token trees.\n     #[derive(Clone)]\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub struct IntoIter {\n         cursor: tokenstream::Cursor,\n         stack: Vec<TokenTree>,\n     }\n \n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     impl Iterator for IntoIter {\n         type Item = TokenTree;\n \n@@ -219,7 +219,7 @@ pub mod token_stream {\n         }\n     }\n \n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     impl IntoIterator for TokenStream {\n         type Item = TokenTree;\n         type IntoIter = IntoIter;\n@@ -238,7 +238,7 @@ pub mod token_stream {\n /// To quote `$` itself, use `$$`.\n ///\n /// This is a dummy macro, the actual implementation is in quote::Quoter\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n #[macro_export]\n macro_rules! quote { () => {} }\n \n@@ -248,26 +248,26 @@ mod quote;\n \n /// Quote a `Span` into a `TokenStream`.\n /// This is needed to implement a custom quoter.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_quote\", issue = \"38356\")]\n pub fn quote_span(span: Span) -> TokenStream {\n     quote::Quote::quote(span)\n }\n \n /// A region of source code, along with macro expansion information.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n #[derive(Copy, Clone)]\n pub struct Span(syntax_pos::Span);\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Span {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Sync for Span {}\n \n macro_rules! diagnostic_method {\n     ($name:ident, $level:expr) => (\n         /// Create a new `Diagnostic` with the given `message` at the span\n         /// `self`.\n-        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n         pub fn $name<T: Into<String>>(self, message: T) -> Diagnostic {\n             Diagnostic::spanned(self, $level, message)\n         }\n@@ -276,7 +276,7 @@ macro_rules! diagnostic_method {\n \n impl Span {\n     /// A span that resolves at the macro definition site.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn def_site() -> Span {\n         ::__internal::with_sess(|_, data| data.def_site)\n     }\n@@ -285,13 +285,13 @@ impl Span {\n     /// Identifiers created with this span will be resolved as if they were written\n     /// directly at the macro call location (call-site hygiene) and other code\n     /// at the macro call site will be able to refer to them as well.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn call_site() -> Span {\n         ::__internal::with_sess(|_, data| data.call_site)\n     }\n \n     /// The original source file into which this span points.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn source_file(&self) -> SourceFile {\n         SourceFile {\n             filemap: __internal::lookup_char_pos(self.0.lo()).file,\n@@ -300,21 +300,21 @@ impl Span {\n \n     /// The `Span` for the tokens in the previous macro expansion from which\n     /// `self` was generated from, if any.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn parent(&self) -> Option<Span> {\n         self.0.parent().map(Span)\n     }\n \n     /// The span for the origin source code that `self` was generated from. If\n     /// this `Span` wasn't generated from other macro expansions then the return\n     /// value is the same as `*self`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn source(&self) -> Span {\n         Span(self.0.source_callsite())\n     }\n \n     /// Get the starting line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn start(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.lo());\n         LineColumn {\n@@ -324,7 +324,7 @@ impl Span {\n     }\n \n     /// Get the ending line/column in the source file for this span.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn end(&self) -> LineColumn {\n         let loc = __internal::lookup_char_pos(self.0.hi());\n         LineColumn {\n@@ -336,7 +336,7 @@ impl Span {\n     /// Create a new span encompassing `self` and `other`.\n     ///\n     /// Returns `None` if `self` and `other` are from different files.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn join(&self, other: Span) -> Option<Span> {\n         let self_loc = __internal::lookup_char_pos(self.0.lo());\n         let other_loc = __internal::lookup_char_pos(other.0.lo());\n@@ -348,20 +348,20 @@ impl Span {\n \n     /// Creates a new span with the same line/column information as `self` but\n     /// that resolves symbols as though it were at `other`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn resolved_at(&self, other: Span) -> Span {\n         Span(self.0.with_ctxt(other.0.ctxt()))\n     }\n \n     /// Creates a new span with the same name resolution behavior as `self` but\n     /// with the line/column information of `other`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn located_at(&self, other: Span) -> Span {\n         other.resolved_at(*self)\n     }\n \n     /// Compares to spans to see if they're equal.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn eq(&self, other: &Span) -> bool {\n         self.0 == other.0\n     }\n@@ -373,7 +373,7 @@ impl Span {\n }\n \n /// Prints a span in a form convenient for debugging.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:?} bytes({}..{})\",\n@@ -384,33 +384,33 @@ impl fmt::Debug for Span {\n }\n \n /// A line-column pair representing the start or end of a `Span`.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct LineColumn {\n     /// The 1-indexed line in the source file on which the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub line: usize,\n     /// The 0-indexed column (in UTF-8 characters) in the source file on which\n     /// the span starts or ends (inclusive).\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub column: usize\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl !Send for LineColumn {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl !Sync for LineColumn {}\n \n /// The source file of a given `Span`.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n #[derive(Clone)]\n pub struct SourceFile {\n     filemap: Lrc<FileMap>,\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl !Send for SourceFile {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl !Sync for SourceFile {}\n \n impl SourceFile {\n@@ -424,14 +424,14 @@ impl SourceFile {\n     /// the command line, the path as given may not actually be valid.\n     ///\n     /// [`is_real`]: #method.is_real\n-    # [unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn path(&self) -> &FileName {\n         &self.filemap.name\n     }\n \n     /// Returns `true` if this source file is a real source file, and not generated by an external\n     /// macro's expansion.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n     pub fn is_real(&self) -> bool {\n         // This is a hack until intercrate spans are implemented and we can have real source files\n         // for spans generated in external macros.\n@@ -440,14 +440,14 @@ impl SourceFile {\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl AsRef<FileName> for SourceFile {\n     fn as_ref(&self) -> &FileName {\n         self.path()\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl fmt::Debug for SourceFile {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"SourceFile\")\n@@ -457,46 +457,62 @@ impl fmt::Debug for SourceFile {\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl PartialEq for SourceFile {\n     fn eq(&self, other: &Self) -> bool {\n         Lrc::ptr_eq(&self.filemap, &other.filemap)\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl Eq for SourceFile {}\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[unstable(feature = \"proc_macro_span\", issue = \"38356\")]\n impl PartialEq<FileName> for SourceFile {\n     fn eq(&self, other: &FileName) -> bool {\n         self.as_ref() == other\n     }\n }\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n #[derive(Clone)]\n pub enum TokenTree {\n     /// A token stream surrounded by bracket delimiters.\n-    Group(Group),\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+    Group(\n+        #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+        Group\n+    ),\n     /// An identifier.\n-    Ident(Ident),\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+    Ident(\n+        #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+        Ident\n+    ),\n     /// A single punctuation character (`+`, `,`, `$`, etc.).\n-    Punct(Punct),\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+    Punct(\n+        #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+        Punct\n+    ),\n     /// A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.\n-    Literal(Literal),\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+    Literal(\n+        #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+        Literal\n+    ),\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for TokenTree {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Sync for TokenTree {}\n \n impl TokenTree {\n     /// Returns the span of this tree, delegating to the `span` method of\n     /// the contained token or a delimited stream.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n         match *self {\n             TokenTree::Group(ref t) => t.span(),\n@@ -511,7 +527,7 @@ impl TokenTree {\n     /// Note that if this token is a `Group` then this method will not configure\n     /// the span of each of the internal tokens, this will simply delegate to\n     /// the `set_span` method of each variant.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n         match *self {\n             TokenTree::Group(ref mut t) => t.set_span(span),\n@@ -523,7 +539,7 @@ impl TokenTree {\n }\n \n /// Prints token treee in a form convenient for debugging.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for TokenTree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // Each of these has the name in the struct type in the derived debug,\n@@ -537,28 +553,28 @@ impl fmt::Debug for TokenTree {\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl From<Group> for TokenTree {\n     fn from(g: Group) -> TokenTree {\n         TokenTree::Group(g)\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl From<Ident> for TokenTree {\n     fn from(g: Ident) -> TokenTree {\n         TokenTree::Ident(g)\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl From<Punct> for TokenTree {\n     fn from(g: Punct) -> TokenTree {\n         TokenTree::Punct(g)\n     }\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl From<Literal> for TokenTree {\n     fn from(g: Literal) -> TokenTree {\n         TokenTree::Literal(g)\n@@ -568,7 +584,7 @@ impl From<Literal> for TokenTree {\n /// Prints the token tree as a string that is supposed to be losslessly convertible back\n /// into the same token tree (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters and negative numeric literals.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for TokenTree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -584,33 +600,37 @@ impl fmt::Display for TokenTree {\n ///\n /// A `Group` internally contains a `TokenStream` which is surrounded by `Delimiter`s.\n #[derive(Clone, Debug)]\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub struct Group {\n     delimiter: Delimiter,\n     stream: TokenStream,\n     span: Span,\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Group {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Sync for Group {}\n \n /// Describes how a sequence of token trees is delimited.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub enum Delimiter {\n     /// `( ... )`\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Parenthesis,\n     /// `{ ... }`\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Brace,\n     /// `[ ... ]`\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Bracket,\n     /// `\u00d8 ... \u00d8`\n     /// An implicit delimiter, that may, for example, appear around tokens coming from a\n     /// \"macro variable\" `$var`. It is important to preserve operator priorities in cases like\n     /// `$var * 3` where `$var` is `1 + 2`.\n     /// Implicit delimiters may not survive roundtrip of a token stream through a string.\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     None,\n }\n \n@@ -620,7 +640,7 @@ impl Group {\n     /// This constructor will set the span for this group to\n     /// `Span::call_site()`. To change the span you can use the `set_span`\n     /// method below.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn new(delimiter: Delimiter, stream: TokenStream) -> Group {\n         Group {\n             delimiter: delimiter,\n@@ -630,7 +650,7 @@ impl Group {\n     }\n \n     /// Returns the delimiter of this `Group`\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn delimiter(&self) -> Delimiter {\n         self.delimiter\n     }\n@@ -639,14 +659,14 @@ impl Group {\n     ///\n     /// Note that the returned token stream does not include the delimiter\n     /// returned above.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn stream(&self) -> TokenStream {\n         self.stream.clone()\n     }\n \n     /// Returns the span for the delimiters of this token stream, spanning the\n     /// entire `Group`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n         self.span\n     }\n@@ -657,7 +677,7 @@ impl Group {\n     /// This method will **not** set the span of all the internal tokens spanned\n     /// by this group, but rather it will only set the span of the delimiter\n     /// tokens at the level of the `Group`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n         self.span = span;\n     }\n@@ -666,7 +686,7 @@ impl Group {\n /// Prints the group as a string that should be losslessly convertible back\n /// into the same group (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Group {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         TokenStream::from(TokenTree::from(self.clone())).fmt(f)\n@@ -677,28 +697,30 @@ impl fmt::Display for Group {\n ///\n /// Multicharacter operators like `+=` are represented as two instances of `Punct` with different\n /// forms of `Spacing` returned.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n #[derive(Clone, Debug)]\n pub struct Punct {\n     ch: char,\n     spacing: Spacing,\n     span: Span,\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Punct {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Sync for Punct {}\n \n /// Whether an `Punct` is followed immediately by another `Punct` or\n /// followed by another token or whitespace.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub enum Spacing {\n     /// E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Alone,\n     /// E.g. `+` is `Joint` in `+=` or `'#`.\n     /// Additionally, single quote `'` can join with identifiers to form lifetimes `'ident`.\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Joint,\n }\n \n@@ -709,7 +731,7 @@ impl Punct {\n     ///\n     /// The returned `Punct` will have the default span of `Span::call_site()`\n     /// which can be further configured with the `set_span` method below.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn new(ch: char, spacing: Spacing) -> Punct {\n         const LEGAL_CHARS: &[char] = &['=', '<', '>', '!', '~', '+', '-', '*', '/', '%', '^',\n                                        '&', '|', '@', '.', ',', ';', ':', '#', '$', '?', '\\''];\n@@ -724,7 +746,7 @@ impl Punct {\n     }\n \n     /// Returns the value of this punctuation character as `char`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn as_char(&self) -> char {\n         self.ch\n     }\n@@ -733,27 +755,27 @@ impl Punct {\n     /// followed by another `Punct` in the token stream, so they can potentially be combined into\n     /// a multicharacter operator (`Joint`), or it's followed by some other token or whitespace\n     /// (`Alone`) so the operator has certainly ended.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn spacing(&self) -> Spacing {\n         self.spacing\n     }\n \n     /// Returns the span for this punctuation character.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n         self.span\n     }\n \n     /// Configure the span for this punctuation character.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n         self.span = span;\n     }\n }\n \n /// Prints the punctuation character as a string that should be losslessly convertible\n /// back into the same character.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Punct {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         TokenStream::from(TokenTree::from(self.clone())).fmt(f)\n@@ -762,16 +784,16 @@ impl fmt::Display for Punct {\n \n /// An identifier (`ident`).\n #[derive(Clone, Debug)]\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub struct Ident {\n     sym: Symbol,\n     span: Span,\n     is_raw: bool,\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Ident {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Sync for Ident {}\n \n impl Ident {\n@@ -794,7 +816,7 @@ impl Ident {\n     ///\n     /// Due to the current importance of hygiene this constructor, unlike other\n     /// tokens, requires a `Span` to be specified at construction.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn new(string: &str, span: Span) -> Ident {\n         if !lexer::is_valid_ident(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n@@ -807,7 +829,7 @@ impl Ident {\n     }\n \n     /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"38356\")]\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         let mut ident = Ident::new(string, span);\n         if ident.sym == keywords::Underscore.name() ||\n@@ -820,21 +842,21 @@ impl Ident {\n \n     /// Returns the span of this `Ident`, encompassing the entire string returned\n     /// by `as_str`.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n         self.span\n     }\n \n     /// Configures the span of this `Ident`, possibly changing its hygiene context.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n         self.span = span;\n     }\n }\n \n /// Prints the identifier as a string that should be losslessly convertible\n /// back into the same identifier.\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if self.is_raw {\n@@ -849,16 +871,16 @@ impl fmt::Display for Ident {\n /// with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n /// Boolean literals like `true` and `false` do not belong here, they are `Ident`s.\n #[derive(Clone, Debug)]\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub struct Literal {\n     lit: token::Lit,\n     suffix: Option<ast::Name>,\n     span: Span,\n }\n \n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Literal {}\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Sync for Literal {}\n \n macro_rules! suffixed_int_literals {\n@@ -874,7 +896,7 @@ macro_rules! suffixed_int_literals {\n         /// Literals created through this method have the `Span::call_site()`\n         /// span by default, which can be configured with the `set_span` method\n         /// below.\n-        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n         pub fn $name(n: $kind) -> Literal {\n             Literal {\n                 lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n@@ -900,7 +922,7 @@ macro_rules! unsuffixed_int_literals {\n         /// Literals created through this method have the `Span::call_site()`\n         /// span by default, which can be configured with the `set_span` method\n         /// below.\n-        #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+        #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n         pub fn $name(n: $kind) -> Literal {\n             Literal {\n                 lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n@@ -954,7 +976,7 @@ impl Literal {\n     ///\n     /// This function requires that the specified float is finite, for\n     /// example if it is infinity or NaN this function will panic.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f32_unsuffixed(n: f32) -> Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n@@ -979,7 +1001,7 @@ impl Literal {\n     ///\n     /// This function requires that the specified float is finite, for\n     /// example if it is infinity or NaN this function will panic.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f32_suffixed(n: f32) -> Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n@@ -1003,7 +1025,7 @@ impl Literal {\n     ///\n     /// This function requires that the specified float is finite, for\n     /// example if it is infinity or NaN this function will panic.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f64_unsuffixed(n: f64) -> Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n@@ -1028,7 +1050,7 @@ impl Literal {\n     ///\n     /// This function requires that the specified float is finite, for\n     /// example if it is infinity or NaN this function will panic.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn f64_suffixed(n: f64) -> Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n@@ -1041,7 +1063,7 @@ impl Literal {\n     }\n \n     /// String literal.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn string(string: &str) -> Literal {\n         let mut escaped = String::new();\n         for ch in string.chars() {\n@@ -1055,7 +1077,7 @@ impl Literal {\n     }\n \n     /// Character literal.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn character(ch: char) -> Literal {\n         let mut escaped = String::new();\n         escaped.extend(ch.escape_unicode());\n@@ -1067,7 +1089,7 @@ impl Literal {\n     }\n \n     /// Byte string literal.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn byte_string(bytes: &[u8]) -> Literal {\n         let string = bytes.iter().cloned().flat_map(ascii::escape_default)\n             .map(Into::<char>::into).collect::<String>();\n@@ -1079,21 +1101,21 @@ impl Literal {\n     }\n \n     /// Returns the span encompassing this literal.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n         self.span\n     }\n \n     /// Configures the span associated for this literal.\n-    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n         self.span = span;\n     }\n }\n \n /// Prints the literal as a string that should be losslessly convertible\n /// back into the same literal (except for possible rounding for floating point literals).\n-#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         TokenStream::from(TokenTree::from(self.clone())).fmt(f)"}, {"sha": "f388b911feb6a5c6b02d435f31fd07b25ec9172d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -1412,9 +1412,6 @@ pub struct Resolver<'a> {\n     /// Avoid duplicated errors for \"name already defined\".\n     name_already_seen: FxHashMap<Name, Span>,\n \n-    /// If `#![feature(proc_macro)]` is set\n-    proc_macro_enabled: bool,\n-\n     /// A set of procedural macros imported by `#[macro_use]` that have already been warned about\n     warned_proc_macros: FxHashSet<Name>,\n \n@@ -1713,7 +1710,7 @@ impl<'a> Resolver<'a> {\n \n             // The `proc_macro` and `decl_macro` features imply `use_extern_macros`\n             use_extern_macros:\n-                features.use_extern_macros || features.proc_macro || features.decl_macro,\n+                features.use_extern_macros || features.decl_macro,\n \n             crate_loader,\n             macro_names: FxHashSet(),\n@@ -1727,7 +1724,6 @@ impl<'a> Resolver<'a> {\n             local_macro_def_scopes: FxHashMap(),\n             name_already_seen: FxHashMap(),\n             whitelisted_legacy_custom_derives: Vec::new(),\n-            proc_macro_enabled: features.proc_macro,\n             warned_proc_macros: FxHashSet(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n@@ -4509,7 +4505,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn check_proc_macro_attrs(&mut self, attrs: &[ast::Attribute]) {\n-        if self.proc_macro_enabled { return; }\n+        if self.use_extern_macros { return; }\n \n         for attr in attrs {\n             if attr.path.segments.len() > 1 {"}, {"sha": "f076d884f60991a6eb8c8535268c012eb9d71dd5", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -429,7 +429,7 @@ impl<'a> Resolver<'a> {\n                         *item = mem::replace(item, dummy_item).map_attrs(|mut attrs| {\n                             let inert_attr = attr.take().unwrap();\n                             attr::mark_known(&inert_attr);\n-                            if self.proc_macro_enabled {\n+                            if self.use_extern_macros {\n                                 *attr = expand::find_attr_invoc(&mut attrs);\n                             }\n                             attrs.push(inert_attr);"}, {"sha": "1241e230b26d60a5bc5d29f15c3f910d0e73541c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -1073,7 +1073,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                 return attrs;\n             }\n \n-            if self.cx.ecfg.proc_macro_enabled() {\n+            if self.cx.ecfg.use_extern_macros_enabled() {\n                 attr = find_attr_invoc(&mut attrs);\n             }\n             traits = collect_derives(&mut self.cx, &mut attrs);\n@@ -1096,7 +1096,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                 return attrs;\n             }\n \n-            if self.cx.ecfg.proc_macro_enabled() {\n+            if self.cx.ecfg.use_extern_macros_enabled() {\n                 attr = find_attr_invoc(&mut attrs);\n             }\n             attrs\n@@ -1406,7 +1406,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                          foreign_item: ast::ForeignItem) -> SmallVector<ast::ForeignItem> {\n         let (attr, traits, foreign_item) = self.classify_item(foreign_item);\n \n-        let explain = if self.cx.ecfg.proc_macro_enabled() {\n+        let explain = if self.cx.ecfg.use_extern_macros_enabled() {\n             feature_gate::EXPLAIN_PROC_MACROS_IN_EXTERN\n         } else {\n             feature_gate::EXPLAIN_MACROS_IN_EXTERN\n@@ -1592,7 +1592,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_trace_macros = trace_macros,\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n         fn enable_custom_derive = custom_derive,\n-        fn proc_macro_enabled = proc_macro,\n+        fn use_extern_macros_enabled = use_extern_macros,\n         fn macros_in_extern_enabled = macros_in_extern,\n         fn proc_macro_mod = proc_macro_mod,\n         fn proc_macro_gen = proc_macro_gen,"}, {"sha": "1a73096505f453a7436c57919bb7c41ad5b3b8d1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -39,13 +39,6 @@ use symbol::{keywords, Symbol};\n use std::{env, path};\n \n macro_rules! set {\n-    (proc_macro) => {{\n-        fn f(features: &mut Features, span: Span) {\n-            features.declared_lib_features.push((Symbol::intern(\"proc_macro\"), span));\n-            features.proc_macro = true;\n-        }\n-        f as fn(&mut Features, Span)\n-    }};\n     ($field: ident) => {{\n         fn f(features: &mut Features, _: Span) {\n             features.$field = true;\n@@ -303,9 +296,6 @@ declare_features! (\n     // rustc internal\n     (active, abi_unadjusted, \"1.16.0\", None, None),\n \n-    // Procedural macros 2.0.\n-    (active, proc_macro, \"1.16.0\", Some(38356), Some(Edition::Edition2018)),\n-\n     // Declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n@@ -626,6 +616,8 @@ declare_features! (\n     (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n     // Allows `#[repr(transparent)]` attribute on newtype structs\n     (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n+    // Defining procedural macros in `proc-macro` crates\n+    (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1033,15 +1025,8 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n \n     (\"windows_subsystem\", Whitelisted, Ungated),\n \n-    (\"proc_macro_attribute\", Normal, Gated(Stability::Unstable,\n-                                           \"proc_macro\",\n-                                           \"attribute proc macros are currently unstable\",\n-                                           cfg_fn!(proc_macro))),\n-\n-    (\"proc_macro\", Normal, Gated(Stability::Unstable,\n-                                 \"proc_macro\",\n-                                 \"function-like proc macros are currently unstable\",\n-                                 cfg_fn!(proc_macro))),\n+    (\"proc_macro_attribute\", Normal, Ungated),\n+    (\"proc_macro\", Normal, Ungated),\n \n     (\"rustc_derive_registrar\", Normal, Gated(Stability::Unstable,\n                                              \"rustc_derive_registrar\",\n@@ -1542,7 +1527,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n-        if self.context.features.proc_macro && attr::is_known(attr) {\n+        if self.context.features.use_extern_macros && attr::is_known(attr) {\n             return\n         }\n \n@@ -1990,7 +1975,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n /// A collector for mutually exclusive and interdependent features and their flag spans.\n #[derive(Default)]\n struct FeatureChecker {\n-    proc_macro: Option<Span>,\n+    use_extern_macros: Option<Span>,\n     custom_attribute: Option<Span>,\n }\n \n@@ -1999,9 +1984,9 @@ impl FeatureChecker {\n     // the branching can be eliminated by modifying `set!()` to set these spans\n     // only for the features that need to be checked for mutual exclusion.\n     fn collect(&mut self, features: &Features, span: Span) {\n-        if features.proc_macro {\n-            // If self.proc_macro is None, set to Some(span)\n-            self.proc_macro = self.proc_macro.or(Some(span));\n+        if features.use_extern_macros {\n+            // If self.use_extern_macros is None, set to Some(span)\n+            self.use_extern_macros = self.use_extern_macros.or(Some(span));\n         }\n \n         if features.custom_attribute {\n@@ -2010,8 +1995,8 @@ impl FeatureChecker {\n     }\n \n     fn check(self, handler: &Handler) {\n-        if let (Some(pm_span), Some(ca_span)) = (self.proc_macro, self.custom_attribute) {\n-            handler.struct_span_err(pm_span, \"Cannot use `#![feature(proc_macro)]` and \\\n+        if let (Some(pm_span), Some(ca_span)) = (self.use_extern_macros, self.custom_attribute) {\n+            handler.struct_span_err(pm_span, \"Cannot use `#![feature(use_extern_macros)]` and \\\n                                               `#![feature(custom_attribute)] at the same time\")\n                 .span_note(ca_span, \"`#![feature(custom_attribute)]` declared here\")\n                 .emit();"}, {"sha": "d56571ee1aca5039ed70f0ebcb992018db5da6a8", "filename": "src/test/compile-fail-fulldeps/issue-15778-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-15778-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-15778-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-15778-fail.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // compile-flags: -D crate-not-okay\n \n-#![feature(plugin, custom_attribute)] //~ ERROR crate is not marked with #![crate_okay]\n+#![feature(plugin)] //~ ERROR crate is not marked with #![crate_okay]\n #![plugin(lint_for_crate)]\n \n pub fn main() { }"}, {"sha": "64af21dbe10dcc8f286716578b9010022ad49b3b", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-invalid-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -13,7 +13,7 @@\n \n //! Attributes producing expressions in invalid locations\n \n-#![feature(proc_macro, stmt_expr_attributes, proc_macro_expr)]\n+#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{duplicate, no_output};"}, {"sha": "05b5c918ef0156ae86195c3b1c9caabeeb312aa3", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(proc_macro, proc_macro_expr)]\n+#![feature(use_extern_macros, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};"}, {"sha": "9e7bbb2b8f7ff119c244fd6ad17d5141faf10b81", "filename": "src/test/compile-fail-fulldeps/proc-macro/attribute-with-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attribute-with-error.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate attribute_with_error;\n "}, {"sha": "ea66d3c0ef6bbab22cbfb8d918e006bbaaadbe21", "filename": "src/test/compile-fail-fulldeps/proc-macro/attributes-included.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,23 +10,25 @@\n \n // aux-build:attributes-included.rs\n // ignore-stage1\n+// compile-pass\n \n-#![feature(proc_macro, rustc_attrs, proc_macro_path_invoc)]\n+#![feature(use_extern_macros)]\n #![warn(unused)]\n \n extern crate attributes_included;\n \n-#[attributes_included::bar]\n+use attributes_included::*;\n+\n+#[bar]\n #[inline]\n /// doc\n-#[attributes_included::foo]\n+#[foo]\n #[inline]\n /// doc\n fn foo() {\n     let a: i32 = \"foo\"; //~ WARN: unused variable\n }\n \n-#[rustc_error]\n-fn main() { //~ ERROR: compilation successful\n+fn main() {\n     foo()\n }"}, {"sha": "22ddc91399553158fe4f27636a79442f2b7d19f7", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "679cb7728680ddbf26eefe2887c77cd9f7191a09", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attr_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "142840926694416cf168585356242933777d2abb", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attribute-with-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "a1f4209662d86b396528ec03de286323f26365e7", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attributes-included.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "6484725814a10b75581b8fa23a92e263dc695954", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/bang_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "3f0a45743671c3f25dce469868d4758c9cc12d4f", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/bang_proc_macro2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro2.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "5365e8238e99f5793a2ef58d13779b5909b2ffc6", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/issue-41211.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n use proc_macro::TokenStream;"}, {"sha": "e71b792a48a1434740c2164c4f7a977c501f7736", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/issue_50493.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue_50493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue_50493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue_50493.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(proc_macro, proc_macro_lib)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "4d89384137b8006c5d38a9eb20b8c3fd80ed627f", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/more-gates.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "0f8fd5b5709c7538ade2de3aa15e2146dc307bf9", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/proc-macro-gates.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,6 @@\n // force-host\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "581c7cb15a59c666498c4dbbdc60ceb70e839ceb", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "eeede4b8aa13c9ed7826b35fe3ceb63f7ca46c27", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-proc_macro.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d5753fda1ee8f729da1061e931e13b043f479a5/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5753fda1ee8f729da1061e931e13b043f479a5/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs?ref=3d5753fda1ee8f729da1061e931e13b043f479a5", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:attr_proc_macro.rs\n-#![feature(use_extern_macros)]\n-\n-extern crate attr_proc_macro;\n-use attr_proc_macro::attr_proc_macro;\n-\n-#[attr_proc_macro]\n-//~^ ERROR: attribute procedural macros are experimental\n-struct Foo;\n-\n-fn main() {\n-    let _ = Foo;\n-}"}, {"sha": "8fced7d8c70da134a6a9d9988ec86be2e83cc477", "filename": "src/test/compile-fail-fulldeps/proc-macro/issue-41211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -13,7 +13,7 @@\n // FIXME: https://github.com/rust-lang/rust/issues/41430\n // This is a temporary regression test for the ICE reported in #41211\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n #![emit_unchanged]\n //~^ ERROR: cannot find attribute macro `emit_unchanged` in this scope\n extern crate issue_41211;"}, {"sha": "bb7f341f9678632f2d2004e02d8f003c678b075c", "filename": "src/test/compile-fail-fulldeps/proc-macro/macro-use-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:attr_proc_macro.rs\n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n #[macro_use] extern crate attr_proc_macro;\n "}, {"sha": "9a35dc0edc4484b66d4bfb3550539b4476f0660c", "filename": "src/test/compile-fail-fulldeps/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // ignore-wasm32\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate test_macros;\n "}, {"sha": "ff9f1705c5b84765d5878fac54ef519ded8d7056", "filename": "src/test/compile-fail-fulldeps/proc-macro/more-gates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:more-gates.rs\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate more_gates as foo;\n "}, {"sha": "9ed665b6e68f69dcdffb3cc05931384ff5205bf8", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-custom-attr-mutex.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-custom-attr-mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-custom-attr-mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-custom-attr-mutex.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n // aux-build:attr_proc_macro.rs\n+// ignore-tidy-linelength\n \n-#![feature(proc_macro, custom_attribute)]\n-//~^ ERROR Cannot use `#![feature(proc_macro)]` and `#![feature(custom_attribute)] at the same time\n+#![feature(use_extern_macros, custom_attribute)]\n+//~^ ERROR Cannot use `#![feature(use_extern_macros)]` and `#![feature(custom_attribute)] at the same time\n \n extern crate attr_proc_macro;\n use attr_proc_macro::attr_proc_macro;"}, {"sha": "51b1bfca294e48c05678628c10354ea30e96335c", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -16,7 +16,7 @@\n // gate-test-proc_macro_mod\n // gate-test-proc_macro_gen\n \n-#![feature(proc_macro, stmt_expr_attributes)]\n+#![feature(use_extern_macros, stmt_expr_attributes)]\n \n extern crate proc_macro_gates as foo;\n "}, {"sha": "7eafd834c49136eaefa9693b710579710638a2b4", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -35,7 +35,7 @@ use rustc_plugin::Registry;\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_syntax_extension(\n-        Symbol::intern(\"derive_TotalSum\"),\n+        Symbol::intern(\"rustc_derive_TotalSum\"),\n         MultiDecorator(box expand));\n }\n "}, {"sha": "545eabe00ff2e339945d9f46efaf01e093745b76", "filename": "src/test/run-pass-fulldeps/auxiliary/hello_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(use_extern_macros, proc_macro_non_items, proc_macro_quote)]\n \n extern crate proc_macro;\n "}, {"sha": "fa208e14b7d1c632afb41ef6b26eba6c7eba5de5", "filename": "src/test/run-pass-fulldeps/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -57,19 +57,19 @@ declare_lint!(CRATE_NOT_GREEN, Warn, \"crate not marked with #![crate_green]\");\n fake_lint_pass! {\n     PassOkay,\n     lint_array!(CRATE_NOT_OKAY), // Single lint\n-    \"crate_okay\"\n+    \"rustc_crate_okay\"\n }\n \n fake_lint_pass! {\n     PassRedBlue,\n     lint_array!(CRATE_NOT_RED, CRATE_NOT_BLUE), // Multiple lints\n-    \"crate_red\", \"crate_blue\"\n+    \"rustc_crate_red\", \"rustc_crate_blue\"\n }\n \n fake_lint_pass! {\n     PassGreyGreen,\n     lint_array!(CRATE_NOT_GREY, CRATE_NOT_GREEN, ), // Trailing comma\n-    \"crate_grey\", \"crate_green\"\n+    \"rustc_crate_grey\", \"rustc_crate_green\"\n }\n \n #[plugin_registrar]"}, {"sha": "64fdd7f9a95a6c0895cf1ab4a4df1c7829d04f86", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -37,13 +37,13 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"make_a_1\", expand_make_a_1);\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n-        Symbol::intern(\"into_multi_foo\"),\n+        Symbol::intern(\"rustc_into_multi_foo\"),\n         MultiModifier(Box::new(expand_into_foo_multi)));\n     reg.register_syntax_extension(\n-        Symbol::intern(\"duplicate\"),\n+        Symbol::intern(\"rustc_duplicate\"),\n         MultiDecorator(Box::new(expand_duplicate)));\n     reg.register_syntax_extension(\n-        Symbol::intern(\"caller\"),\n+        Symbol::intern(\"rustc_caller\"),\n         MultiDecorator(Box::new(expand_caller)));\n }\n "}, {"sha": "e088f5e4262631442e94f4422e91e15179c9ed2a", "filename": "src/test/run-pass-fulldeps/derive-totalsum-attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:custom_derive_plugin_attr.rs\n // ignore-stage1\n \n-#![feature(plugin, custom_derive, custom_attribute)]\n+#![feature(plugin, custom_derive, rustc_attrs)]\n #![plugin(custom_derive_plugin_attr)]\n \n trait TotalSum {\n@@ -32,7 +32,7 @@ impl TotalSum for Seven {\n     }\n }\n \n-#[derive(TotalSum)]\n+#[rustc_derive_TotalSum]\n struct Foo {\n     seven: Seven,\n     bar: Bar,\n@@ -41,7 +41,7 @@ struct Foo {\n     nan: NaN,\n }\n \n-#[derive(TotalSum)]\n+#[rustc_derive_TotalSum]\n struct Bar {\n     quux: isize,\n     bleh: isize,"}, {"sha": "6fcf0a0450c8488373d8c7749cfda5b4e72275ea", "filename": "src/test/run-pass-fulldeps/issue-15778-pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,12 +12,12 @@\n // ignore-stage1\n // compile-flags: -D crate-not-okay\n \n-#![feature(plugin, custom_attribute)]\n+#![feature(plugin, rustc_attrs)]\n #![plugin(lint_for_crate)]\n-#![crate_okay]\n-#![crate_blue]\n-#![crate_red]\n-#![crate_grey]\n-#![crate_green]\n+#![rustc_crate_okay]\n+#![rustc_crate_blue]\n+#![rustc_crate_red]\n+#![rustc_crate_grey]\n+#![rustc_crate_green]\n \n pub fn main() { }"}, {"sha": "ce552d3ab7dd67ff8ff04d1cef1db678c121a57d", "filename": "src/test/run-pass-fulldeps/macro-crate-multi-decorator-literals.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator-literals.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n \n-#![feature(plugin, custom_attribute, attr_literals)]\n+#![feature(plugin, rustc_attrs, attr_literals)]\n #![plugin(macro_crate_test)]\n \n #[macro_use]\n@@ -30,16 +30,16 @@ extern crate macro_crate_test;\n // This results in a function named `simple` that calls `f(1, \"hello\", 3.14)`.\n // As a result, the expression `simple()` evaluates to `(1, \"helllo\", 3.14)`.\n \n-#[caller(simple, 1, \"hello\", 3.14)]\n-#[caller(simple1, 2, \"bye\", 6.28)]\n-#[caller(simple2, 3, \"hi\", 1.01)]\n+#[rustc_caller(simple, 1, \"hello\", 3.14)]\n+#[rustc_caller(simple1, 2, \"bye\", 6.28)]\n+#[rustc_caller(simple2, 3, \"hi\", 1.01)]\n fn f(num: isize, string: &'static str, float: f32) -> (isize, &'static str, f32) {\n     (num, string, float)\n }\n \n-#[caller(complex, true, 10)]\n-#[caller(complex1, false, 15)]\n-#[caller(complex2, true, 20)]\n+#[rustc_caller(complex, true, 10)]\n+#[rustc_caller(complex1, false, 15)]\n+#[rustc_caller(complex2, true, 20)]\n fn g(emit: bool, num: i32) -> Option<i32> {\n     match emit {\n         true => Some(num),"}, {"sha": "9245e85edd6ddf085351f180bea6765a2c0f4063", "filename": "src/test/run-pass-fulldeps/macro-crate-multi-decorator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n \n-#![feature(plugin, custom_attribute)]\n+#![feature(plugin, rustc_attrs)]\n #![plugin(macro_crate_test)]\n \n #[macro_use]\n@@ -20,27 +20,27 @@ extern crate macro_crate_test;\n \n // The duplicate macro will create a copy of the item with the given identifier.\n \n-#[duplicate(MyCopy)]\n+#[rustc_duplicate(MyCopy)]\n struct MyStruct {\n     number: i32\n }\n \n trait TestTrait {\n-    #[duplicate(TestType2)]\n+    #[rustc_duplicate(TestType2)]\n     type TestType;\n \n-    #[duplicate(required_fn2)]\n+    #[rustc_duplicate(required_fn2)]\n     fn required_fn(&self);\n \n-    #[duplicate(provided_fn2)]\n+    #[rustc_duplicate(provided_fn2)]\n     fn provided_fn(&self) { }\n }\n \n impl TestTrait for MyStruct {\n-    #[duplicate(TestType2)]\n+    #[rustc_duplicate(TestType2)]\n     type TestType = f64;\n \n-    #[duplicate(required_fn2)]\n+    #[rustc_duplicate(required_fn2)]\n     fn required_fn(&self) { }\n }\n "}, {"sha": "06f78b10e5e93071231b19f591f75f08a3bdd9dc", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,26 +11,26 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n \n-#![feature(plugin, custom_attribute)]\n+#![feature(plugin, rustc_attrs)]\n #![plugin(macro_crate_test)]\n \n #[macro_use] #[no_link]\n extern crate macro_crate_test;\n \n #[derive(PartialEq, Clone, Debug)]\n-#[into_multi_foo]\n+#[rustc_into_multi_foo]\n fn foo() -> AnotherFakeTypeThatHadBetterGoAway {}\n \n // Check that the `#[into_multi_foo]`-generated `foo2` is configured away\n fn foo2() {}\n \n trait Qux {\n-    #[into_multi_foo]\n+    #[rustc_into_multi_foo]\n     fn bar();\n }\n \n impl Qux for i32 {\n-    #[into_multi_foo]\n+    #[rustc_into_multi_foo]\n     fn bar() {}\n }\n "}, {"sha": "26522396d6b331b7e72f123fc20545362e876d80", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-args.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,14 +12,13 @@\n // ignore-stage1\n \n #![allow(warnings)]\n-#![feature(proc_macro, proc_macro_path_invoc)]\n+#![feature(use_extern_macros)]\n \n extern crate attr_args;\n-use attr_args::attr_with_args;\n+use attr_args::{attr_with_args, identity};\n \n #[attr_with_args(text = \"Hello, world!\")]\n fn foo() {}\n \n-#[::attr_args::identity(\n-  fn main() { assert_eq!(foo(), \"Hello, world!\"); })]\n+#[identity(fn main() { assert_eq!(foo(), \"Hello, world!\"); })]\n struct Dummy;"}, {"sha": "4ee30b8252baa12a283501f7561d8f6e136a10c7", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // revisions: foo bar\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate attr_cfg;\n use attr_cfg::attr_cfg;"}, {"sha": "256096f118aa40b5e6e5f32d2efc9c02cc8e2b5e", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-on-trait.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-on-trait.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,12 +11,14 @@\n // aux-build:attr-on-trait.rs\n // ignore-stage1\n \n-#![feature(proc_macro, proc_macro_path_invoc)]\n+#![feature(use_extern_macros)]\n \n extern crate attr_on_trait;\n \n+use attr_on_trait::foo;\n+\n trait Foo {\n-    #[attr_on_trait::foo]\n+    #[foo]\n     fn foo() {}\n }\n "}, {"sha": "021b10e033fe9b374fc56171292cf0b83280ffb9", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(proc_macro, stmt_expr_attributes, proc_macro_stmt, proc_macro_expr)]\n+#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_stmt, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr,"}, {"sha": "655bfa3ff6312b421c245d27462f3022b43fedb8", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "f9037aa8bf94d5d4043682d6198f9dd7b289c65a", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "5e5c775b1ffbdbad68dc478b7ddc1538943fc78e", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-on-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "4d5e22b4eb6c26a9d5914d9615552876d119b96f", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "8b7c6cd10b8604337a745b830d0e61caf87debad", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/bang-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "65eb8f4bec2d026d9159b1638f827df9643b25a0", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/call-site.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcall-site.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcall-site.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcall-site.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n use proc_macro::*;"}, {"sha": "c6bcc37ac4a5480a0a0bd003c33bf538cf191b79", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/count_compound_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(proc_macro_non_items, proc_macro_quote, use_extern_macros)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "978de27b70aad52140e781908b1d6a264b25f98d", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/gen-lifetime-token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "8f95bdd9c3919e57da49dac4d37e218430357784", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/hygiene_example_codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(use_extern_macros, proc_macro_quote, proc_macro_non_items)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro as proc_macro_renamed; // This does not break `quote!`"}, {"sha": "56c163b8ce3d595cc473476fcca860c77d17ee54", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n #![feature(box_syntax, plugin, plugin_registrar, rustc_private)]\n #![feature(macro_vis_matcher)]\n #![feature(macro_at_most_once_rep)]"}, {"sha": "906caceb8696be4db89c3d0098671895a7e16271", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-42708.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "6de17522fc9a748219c98d8ef4e066c77f28c682", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-50061.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-50061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-50061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-50061.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n use proc_macro::TokenStream;"}, {"sha": "0ee26b6a1b9eeef7440d9aab3dcbfe95eab7bfe7", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Flifetimes.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "498c6811d9c20287ca8111f7199f52cf00b2b828", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/modify-ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "fd639696991f66f75abbaa192187b8ff1b06fe8e", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/negative-token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fnegative-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fnegative-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fnegative-token.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "e00a4d89e8d62ede5f7d4b097558e0b62bd63048", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/not-joint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fnot-joint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fnot-joint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fnot-joint.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "8e2c5c0a088d29b1c09eebf3887a39c8670f13c3", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/span-api-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n+#![feature(proc_macro_span)]\n \n extern crate proc_macro;\n "}, {"sha": "581c7cb15a59c666498c4dbbdc60ceb70e839ceb", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "505994f66e7e553c339ccfc49e7a59b7b3064b01", "filename": "src/test/run-pass-fulldeps/proc-macro/call-site.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcall-site.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcall-site.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcall-site.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:call-site.rs\n // ignore-stage1\n \n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(proc_macro_non_items, use_extern_macros)]\n \n extern crate call_site;\n use call_site::*;"}, {"sha": "35d5084d9f650a3aa3a9bc8d09596be450f2a62d", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-b.rs\n // ignore-stage1\n \n-#![feature(proc_macro, proc_macro_path_invoc)]\n+#![feature(use_extern_macros, proc_macro_path_invoc)]\n \n extern crate derive_b;\n "}, {"sha": "c8a9bea3631cb582adc2c565e2a3cb0fa7cb951b", "filename": "src/test/run-pass-fulldeps/proc-macro/gen-lifetime-token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:gen-lifetime-token.rs\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate gen_lifetime_token as bar;\n "}, {"sha": "df4a1d8994b5481b7c219f726026d71b12992345", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-42708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-42708.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:issue-42708.rs\n // ignore-stage1\n \n-#![feature(decl_macro, proc_macro, proc_macro_path_invoc)]\n+#![feature(decl_macro, use_extern_macros, proc_macro_path_invoc)]\n #![allow(unused)]\n \n extern crate issue_42708;"}, {"sha": "15dff94c88c180b1e11e468ec3dada2c9c9aefff", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-50061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-50061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-50061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-50061.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:issue-50061.rs\n // ignore-stage1\n \n-#![feature(proc_macro, proc_macro_path_invoc, decl_macro)]\n+#![feature(use_extern_macros, proc_macro_path_invoc, decl_macro)]\n \n extern crate issue_50061;\n "}, {"sha": "cfe0ce19a460627f04c34c747e5367d360311573", "filename": "src/test/run-pass-fulldeps/proc-macro/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,7 @@\n // aux-build:lifetimes.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate lifetimes;\n use lifetimes::*;"}, {"sha": "e5f8c844b6b70cd4bac6b79b589cf1263533569d", "filename": "src/test/run-pass-fulldeps/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // ignore-wasm32\n \n-#![feature(proc_macro, macros_in_extern)]\n+#![feature(use_extern_macros, macros_in_extern)]\n \n extern crate test_macros;\n "}, {"sha": "0b584fdd44d478c8194d489a56e4f1b4f254bcf0", "filename": "src/test/run-pass-fulldeps/proc-macro/modify-ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:modify-ast.rs\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate modify_ast;\n "}, {"sha": "8a59d57a938aaa8438bb77ece29155dc3f8aa173", "filename": "src/test/run-pass-fulldeps/proc-macro/not-joint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnot-joint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnot-joint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fnot-joint.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:not-joint.rs\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate not_joint as bar;\n use bar::{tokens, nothing};"}, {"sha": "46b62d7e34a5284e5b7b1914278ac1024914736c", "filename": "src/test/run-pass-fulldeps/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // ignore-cross-compile\n \n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(use_extern_macros, proc_macro_non_items)]\n \n extern crate proc_macro_def;\n "}, {"sha": "cc899fa610d13fa2afb6a5a19b014a2b81e4471c", "filename": "src/test/ui-fulldeps/auxiliary/invalid-punct-ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Finvalid-punct-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Finvalid-punct-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Finvalid-punct-ident.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,8 +11,8 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_raw_ident)]\n \n extern crate proc_macro;\n use proc_macro::*;"}, {"sha": "3200e8fb2b1625b8245353317c09b29a877852e3", "filename": "src/test/ui-fulldeps/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:lifetimes.rs\n \n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(use_extern_macros, proc_macro_non_items)]\n \n extern crate lifetimes;\n "}, {"sha": "be1777f3ebd05aa1ced6509e07eaf477390dd817", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/macro-brackets.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n use proc_macro::*;"}, {"sha": "f5590405e61e3a98539ebf88cf3ecb68e8428fd6", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/parent-source-spans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fparent-source-spans.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n+#![feature(proc_macro_diagnostic, proc_macro_span)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "70151278947ddddf464fb87b6eb7b1ab8381d3b5", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/three-equals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_diagnostic, proc_macro_span)]\n \n extern crate proc_macro;\n "}, {"sha": "168df906ad6982707fca4485c07070e544c1c6ea", "filename": "src/test/ui-fulldeps/proc-macro/generate-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -12,7 +12,7 @@\n \n // aux-build:generate-mod.rs\n \n-#![feature(proc_macro, proc_macro_gen, proc_macro_path_invoc)]\n+#![feature(use_extern_macros, proc_macro_gen, proc_macro_path_invoc)]\n \n extern crate generate_mod;\n "}, {"sha": "1c16faa9986a5df926e5986057d5f439b36ee393", "filename": "src/test/ui-fulldeps/proc-macro/macro-brackets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-brackets.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:macro-brackets.rs\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n extern crate macro_brackets as bar;\n use bar::doit;"}, {"sha": "9cfd486606abfaa766bcfb007be43d8c1a11d6ca", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "df9b263534f605804276b984876b9bea5f0be208", "filename": "src/test/ui-fulldeps/resolve-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f3007fa8a08daf77f2b8382a56eb80cb277131/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs?ref=65f3007fa8a08daf77f2b8382a56eb80cb277131", "patch": "@@ -13,7 +13,7 @@\n // aux-build:attr_proc_macro.rs\n // aux-build:bang_proc_macro.rs\n \n-#![feature(proc_macro)]\n+#![feature(use_extern_macros)]\n \n #[macro_use]\n extern crate derive_foo;"}]}