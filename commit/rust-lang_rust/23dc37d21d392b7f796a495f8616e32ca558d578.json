{"sha": "23dc37d21d392b7f796a495f8616e32ca558d578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGMzN2QyMWQzOTJiN2Y3OTZhNDk1Zjg2MTZlMzJjYTU1OGQ1Nzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-23T14:06:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:15:05Z"}, "message": "typeck/pat.rs: extract `calc_default_binding_mode`.", "tree": {"sha": "580f73d1f8e3a9a76a2baf08cca3382dd6bb4334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580f73d1f8e3a9a76a2baf08cca3382dd6bb4334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23dc37d21d392b7f796a495f8616e32ca558d578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23dc37d21d392b7f796a495f8616e32ca558d578", "html_url": "https://github.com/rust-lang/rust/commit/23dc37d21d392b7f796a495f8616e32ca558d578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23dc37d21d392b7f796a495f8616e32ca558d578/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ec5d07b1d30124e85cd804a74f1b03198cce1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec5d07b1d30124e85cd804a74f1b03198cce1f5", "html_url": "https://github.com/rust-lang/rust/commit/3ec5d07b1d30124e85cd804a74f1b03198cce1f5"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "a9e6cfb41a469fc3f7128e9f78d7d7fa14912309", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/23dc37d21d392b7f796a495f8616e32ca558d578/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23dc37d21d392b7f796a495f8616e32ca558d578/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=23dc37d21d392b7f796a495f8616e32ca558d578", "patch": "@@ -60,29 +60,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::Path(qpath) => Some(self.resolve_ty_and_res_ufcs(qpath, pat.hir_id, pat.span)),\n             _ => None,\n         };\n-\n-        let is_non_ref_pat = self.is_non_ref_pat(pat, path_resolution.map(|(res, ..)| res));\n-        let (expected, def_bm) = if is_non_ref_pat {\n-            debug!(\"pattern is non reference pattern\");\n-            self.peel_off_references(pat, expected, def_bm)\n-        } else {\n-            // When you encounter a `&pat` pattern, reset to \"by\n-            // value\". This is so that `x` and `y` here are by value,\n-            // as they appear to be:\n-            //\n-            // ```\n-            // match &(&22, &44) {\n-            //   (&x, &y) => ...\n-            // }\n-            // ```\n-            //\n-            // See issue #46688.\n-            let def_bm = match pat.node {\n-                PatKind::Ref(..) => ty::BindByValue(hir::MutImmutable),\n-                _ => def_bm,\n-            };\n-            (expected, def_bm)\n-        };\n+        let is_nrp = self.is_non_ref_pat(pat, path_resolution.map(|(res, ..)| res));\n+        let (expected, def_bm) = self.calc_default_binding_mode(pat, expected, def_bm, is_nrp);\n \n         let ty = match pat.node {\n             PatKind::Wild => {\n@@ -495,6 +474,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // subtyping.\n     }\n \n+    /// Compute the new expected type and default binding mode from the old ones\n+    /// as well as the pattern form we are currently checking.\n+    fn calc_default_binding_mode(\n+        &self,\n+        pat: &'tcx hir::Pat,\n+        expected: Ty<'tcx>,\n+        def_bm: ty::BindingMode,\n+        is_non_ref_pat: bool,\n+    ) -> (Ty<'tcx>, ty::BindingMode) {\n+        if is_non_ref_pat {\n+            debug!(\"pattern is non reference pattern\");\n+            self.peel_off_references(pat, expected, def_bm)\n+        } else {\n+            // When you encounter a `&pat` pattern, reset to \"by\n+            // value\". This is so that `x` and `y` here are by value,\n+            // as they appear to be:\n+            //\n+            // ```\n+            // match &(&22, &44) {\n+            //   (&x, &y) => ...\n+            // }\n+            // ```\n+            //\n+            // See issue #46688.\n+            let def_bm = match pat.node {\n+                PatKind::Ref(..) => ty::BindByValue(hir::MutImmutable),\n+                _ => def_bm,\n+            };\n+            (expected, def_bm)\n+        }\n+    }\n+\n     /// Is the pattern a \"non reference pattern\"?\n     /// When the pattern is a path pattern, `opt_path_res` must be `Some(res)`.\n     fn is_non_ref_pat(&self, pat: &'tcx hir::Pat, opt_path_res: Option<Res>) -> bool {"}]}