{"sha": "5b4589f4747f242c038f19f5f2b51b2e03f93252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNDU4OWY0NzQ3ZjI0MmMwMzhmMTlmNWYyYjUxYjJlMDNmOTMyNTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-27T22:47:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T22:47:04Z"}, "message": "Merge #9029\n\n9029: minor: test that `ItemTree` makes `hir_def` queries syntax-independent r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "b3fc58dd9da86688d1a022b286167be110e9e0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fc58dd9da86688d1a022b286167be110e9e0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4589f4747f242c038f19f5f2b51b2e03f93252", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgsCFoCRBK7hj4Ov3rIwAAXC8IAISgC2H+ilkPhWLjmO83/mzP\nb4AsA1yjzPRNUrNa1SRQLFQwHAp6n3WUkniHiwOhd0RpMG4TEsj4pVfFJgwEOZJf\nM7127guQM85YLR0N1WJoqx9eg/F5GbYfPmz+igrhOGtZuW5beKLdYXhQhpGjPX0m\nRr1j+fPbpdMVU8NdzgWCKof7+RcrgnNz1yHde8k+YMrqz+QTmaqEJOh37w4/R0N1\nDnlIBZoD2TaaK8nkDtm7QN0gZyEcPxTZSZxc8fMnmYyrRaqc670V8MjUB++fvAqu\nkTl2UxDW6gujAWvWi1s2/fIlEtRERnYFDzCf5C8ONM0/NM1WyKLpKfBhvTcJ/0c=\n=AJp1\n-----END PGP SIGNATURE-----\n", "payload": "tree b3fc58dd9da86688d1a022b286167be110e9e0f0\nparent 01bfc5f5c0cf6b73c26d006802016c9b02066f94\nparent 55f3ca2b7442761593e172e094a69660f4993b74\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622155624 +0000\ncommitter GitHub <noreply@github.com> 1622155624 +0000\n\nMerge #9029\n\n9029: minor: test that `ItemTree` makes `hir_def` queries syntax-independent r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4589f4747f242c038f19f5f2b51b2e03f93252", "html_url": "https://github.com/rust-lang/rust/commit/5b4589f4747f242c038f19f5f2b51b2e03f93252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4589f4747f242c038f19f5f2b51b2e03f93252/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bfc5f5c0cf6b73c26d006802016c9b02066f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bfc5f5c0cf6b73c26d006802016c9b02066f94", "html_url": "https://github.com/rust-lang/rust/commit/01bfc5f5c0cf6b73c26d006802016c9b02066f94"}, {"sha": "55f3ca2b7442761593e172e094a69660f4993b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f3ca2b7442761593e172e094a69660f4993b74", "html_url": "https://github.com/rust-lang/rust/commit/55f3ca2b7442761593e172e094a69660f4993b74"}], "stats": {"total": 170, "additions": 125, "deletions": 45}, "files": [{"sha": "7bf152e26ccb9c0149e2f165f662faa92a31b5eb", "filename": "crates/hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5b4589f4747f242c038f19f5f2b51b2e03f93252/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4589f4747f242c038f19f5f2b51b2e03f93252/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=5b4589f4747f242c038f19f5f2b51b2e03f93252", "patch": "@@ -1,6 +1,8 @@\n use std::sync::Arc;\n \n-use base_db::SourceDatabaseExt;\n+use base_db::{salsa::SweepStrategy, SourceDatabaseExt};\n+\n+use crate::{AdtId, ModuleDefId};\n \n use super::*;\n \n@@ -163,3 +165,73 @@ m!(Z);\n         assert_eq!(n_reparsed_macros, 0);\n     }\n }\n+\n+#[test]\n+fn item_tree_prevents_reparsing() {\n+    // The `ItemTree` is used by both name resolution and the various queries in `adt.rs` and\n+    // `data.rs`. After computing the `ItemTree` and deleting the parse tree, we should be able to\n+    // run those other queries without triggering a reparse.\n+\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+pub struct S;\n+pub union U {}\n+pub enum E {\n+    Variant,\n+}\n+pub fn f(_: S) { $0 }\n+pub trait Tr {}\n+impl Tr for () {}\n+pub const C: u8 = 0;\n+pub static ST: u8 = 0;\n+pub type Ty = ();\n+\"#,\n+    );\n+    let krate = db.test_crate();\n+    {\n+        let events = db.log_executed(|| {\n+            db.file_item_tree(pos.file_id.into());\n+        });\n+        let n_calculated_item_trees = events.iter().filter(|it| it.contains(\"item_tree\")).count();\n+        assert_eq!(n_calculated_item_trees, 1);\n+        let n_parsed_files = events.iter().filter(|it| it.contains(\"parse(\")).count();\n+        assert_eq!(n_parsed_files, 1);\n+    }\n+\n+    // Delete the parse tree.\n+    let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n+    base_db::ParseQuery.in_db(&db).sweep(sweep);\n+\n+    {\n+        let events = db.log_executed(|| {\n+            let crate_def_map = db.crate_def_map(krate);\n+            let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n+            assert_eq!(module_data.scope.resolutions().count(), 8);\n+            assert_eq!(module_data.scope.impls().count(), 1);\n+\n+            for imp in module_data.scope.impls() {\n+                db.impl_data(imp);\n+            }\n+\n+            for (_, res) in module_data.scope.resolutions() {\n+                match res.values.or(res.types).unwrap().0 {\n+                    ModuleDefId::FunctionId(f) => drop(db.function_data(f)),\n+                    ModuleDefId::AdtId(adt) => match adt {\n+                        AdtId::StructId(it) => drop(db.struct_data(it)),\n+                        AdtId::UnionId(it) => drop(db.union_data(it)),\n+                        AdtId::EnumId(it) => drop(db.enum_data(it)),\n+                    },\n+                    ModuleDefId::ConstId(it) => drop(db.const_data(it)),\n+                    ModuleDefId::StaticId(it) => drop(db.static_data(it)),\n+                    ModuleDefId::TraitId(it) => drop(db.trait_data(it)),\n+                    ModuleDefId::TypeAliasId(it) => drop(db.type_alias_data(it)),\n+                    ModuleDefId::EnumVariantId(_)\n+                    | ModuleDefId::ModuleId(_)\n+                    | ModuleDefId::BuiltinType(_) => unreachable!(),\n+                }\n+            }\n+        });\n+        let n_reparsed_files = events.iter().filter(|it| it.contains(\"parse(\")).count();\n+        assert_eq!(n_reparsed_files, 0);\n+    }\n+}"}, {"sha": "9d726b0248bdc9d32700d0dae84d4e00dc3e00e4", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5b4589f4747f242c038f19f5f2b51b2e03f93252/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4589f4747f242c038f19f5f2b51b2e03f93252/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=5b4589f4747f242c038f19f5f2b51b2e03f93252", "patch": "@@ -7,6 +7,7 @@ mod traits;\n mod method_resolution;\n mod macros;\n mod display_source_code;\n+mod incremental;\n \n use std::{env, sync::Arc};\n \n@@ -317,50 +318,6 @@ fn ellipsize(mut text: String, max_len: usize) -> String {\n     text\n }\n \n-#[test]\n-fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n-    let (mut db, pos) = TestDB::with_position(\n-        \"\n-        //- /lib.rs\n-        fn foo() -> i32 {\n-            $01 + 1\n-        }\n-    \",\n-    );\n-    {\n-        let events = db.log_executed(|| {\n-            let module = db.module_for_file(pos.file_id);\n-            let crate_def_map = module.def_map(&db);\n-            visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n-                db.infer(def);\n-            });\n-        });\n-        assert!(format!(\"{:?}\", events).contains(\"infer\"))\n-    }\n-\n-    let new_text = \"\n-        fn foo() -> i32 {\n-            1\n-            +\n-            1\n-        }\n-    \"\n-    .to_string();\n-\n-    db.set_file_text(pos.file_id, Arc::new(new_text));\n-\n-    {\n-        let events = db.log_executed(|| {\n-            let module = db.module_for_file(pos.file_id);\n-            let crate_def_map = module.def_map(&db);\n-            visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n-                db.infer(def);\n-            });\n-        });\n-        assert!(!format!(\"{:?}\", events).contains(\"infer\"), \"{:#?}\", events)\n-    }\n-}\n-\n fn check_infer(ra_fixture: &str, expect: Expect) {\n     let mut actual = infer(ra_fixture);\n     actual.push('\\n');"}, {"sha": "3e08e83e89a3e2b045cd47f1a58996aeddc0f07e", "filename": "crates/hir_ty/src/tests/incremental.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5b4589f4747f242c038f19f5f2b51b2e03f93252/crates%2Fhir_ty%2Fsrc%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4589f4747f242c038f19f5f2b51b2e03f93252/crates%2Fhir_ty%2Fsrc%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fincremental.rs?ref=5b4589f4747f242c038f19f5f2b51b2e03f93252", "patch": "@@ -0,0 +1,51 @@\n+use std::sync::Arc;\n+\n+use base_db::{fixture::WithFixture, SourceDatabaseExt};\n+\n+use crate::{db::HirDatabase, test_db::TestDB};\n+\n+use super::visit_module;\n+\n+#[test]\n+fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n+    let (mut db, pos) = TestDB::with_position(\n+        \"\n+        //- /lib.rs\n+        fn foo() -> i32 {\n+            $01 + 1\n+        }\n+    \",\n+    );\n+    {\n+        let events = db.log_executed(|| {\n+            let module = db.module_for_file(pos.file_id);\n+            let crate_def_map = module.def_map(&db);\n+            visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n+                db.infer(def);\n+            });\n+        });\n+        assert!(format!(\"{:?}\", events).contains(\"infer\"))\n+    }\n+\n+    let new_text = \"\n+        fn foo() -> i32 {\n+            1\n+            +\n+            1\n+        }\n+    \"\n+    .to_string();\n+\n+    db.set_file_text(pos.file_id, Arc::new(new_text));\n+\n+    {\n+        let events = db.log_executed(|| {\n+            let module = db.module_for_file(pos.file_id);\n+            let crate_def_map = module.def_map(&db);\n+            visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n+                db.infer(def);\n+            });\n+        });\n+        assert!(!format!(\"{:?}\", events).contains(\"infer\"), \"{:#?}\", events)\n+    }\n+}"}]}