{"sha": "be4f7354b475ff8e80a81b495640d7e46d7094cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNGY3MzU0YjQ3NWZmOGU4MGE4MWI0OTU2NDBkN2U0NmQ3MDk0Y2M=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-13T09:11:43Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-13T09:11:43Z"}, "message": "Add box patterns\n\nAn @ can now be prepended to a pattern to unbox something during\npattern matching.\n\nCloses #661", "tree": {"sha": "59a0599794caadc7ee936763ee355b551de27890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59a0599794caadc7ee936763ee355b551de27890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be4f7354b475ff8e80a81b495640d7e46d7094cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be4f7354b475ff8e80a81b495640d7e46d7094cc", "html_url": "https://github.com/rust-lang/rust/commit/be4f7354b475ff8e80a81b495640d7e46d7094cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be4f7354b475ff8e80a81b495640d7e46d7094cc/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cb5c0980a14aaad0c676a88160726de52cac456", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb5c0980a14aaad0c676a88160726de52cac456", "html_url": "https://github.com/rust-lang/rust/commit/6cb5c0980a14aaad0c676a88160726de52cac456"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "ddd7bcec5d5b1178b01b5a30753217ad91cce35f", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/be4f7354b475ff8e80a81b495640d7e46d7094cc/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f7354b475ff8e80a81b495640d7e46d7094cc/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=be4f7354b475ff8e80a81b495640d7e46d7094cc", "patch": "@@ -164,6 +164,23 @@ fn enter_rec(&@crate_ctxt ccx, &match m, uint col, &ast::ident[] fields,\n     ret result;\n }\n \n+fn enter_box(&@crate_ctxt ccx, &match m, uint col, ValueRef val) -> match {\n+    auto result = ~[];\n+    auto dummy = @rec(id=0, node=ast::pat_wild, span=rec(lo=0u, hi=0u));\n+    for (match_branch br in m) {\n+        auto pats = ivec::slice(br.pats, 0u, col);\n+        alt (br.pats.(col).node) {\n+            ast::pat_box(?sub) { pats += ~[sub]; }\n+            _ { pats += ~[dummy]; }\n+        }\n+        pats += ivec::slice(br.pats, col + 1u, ivec::len(br.pats));\n+        auto new_br = @rec(pats=pats with *br);\n+        result += ~[new_br];\n+        bind_for_pat(br.pats.(col), new_br, val);\n+    }\n+    ret result;\n+}\n+\n fn get_options(&@crate_ctxt ccx, &match m, uint col) -> opt[] {\n     fn add_to_set(&mutable opt[] set, &opt val) {\n         for (opt l in set) {\n@@ -211,6 +228,33 @@ fn extract_variant_args(@block_ctxt bcx, ast::node_id pat_id,\n     ret tup(args, bcx);\n }\n \n+fn collect_record_fields(&match m, uint col) -> ast::ident[] {\n+    auto fields = ~[];\n+    for (match_branch br in m) {\n+        alt (br.pats.(col).node) {\n+            ast::pat_rec(?fs, _) {\n+                for (ast::field_pat f in fs) {\n+                    if (!ivec::any(bind str::eq(f.ident, _), fields)) {\n+                        fields += ~[f.ident];\n+                    }\n+                }\n+            }\n+            _ {}\n+        }\n+    }\n+    ret fields;\n+}\n+\n+fn any_box_pat(&match m, uint col) -> bool {\n+    for (match_branch br in m) {\n+        alt (br.pats.(col).node) {\n+            ast::pat_box(_) { ret true; }\n+            _ {}\n+        }\n+    }\n+    ret false;\n+}\n+\n type exit_node = rec(bind_map bound,\n                      BasicBlockRef from,\n                      BasicBlockRef to);\n@@ -236,24 +280,13 @@ fn compile_submatch(@block_ctxt bcx, &match m, ValueRef[] vals, &mk_fail f,\n     auto vals_left = ivec::slice(vals, 1u, ivec::len(vals));\n     auto ccx = bcx.fcx.lcx.ccx;\n     auto pat_id = 0;\n-\n-    auto rec_fields = ~[];\n     for (match_branch br in m) {\n         // Find a real id (we're adding placeholder wildcard patterns, but\n         // each column is guaranteed to have at least one real pattern)\n         if (pat_id == 0) { pat_id = br.pats.(col).id; }\n-        // Gather field names\n-        alt (br.pats.(col).node) {\n-            ast::pat_rec(?fs, _) {\n-                for (ast::field_pat f in fs) {\n-                    if (!ivec::any(bind str::eq(f.ident, _), rec_fields)) {\n-                        rec_fields += ~[f.ident];\n-                    }\n-                }\n-            }\n-            _ {}\n-        }\n     }\n+\n+    auto rec_fields = collect_record_fields(m, col);\n     // Separate path for extracting and binding record fields\n     if (ivec::len(rec_fields) > 0u) {\n         auto rec_ty = ty::node_id_to_monotype(ccx.tcx, pat_id);\n@@ -273,6 +306,16 @@ fn compile_submatch(@block_ctxt bcx, &match m, ValueRef[] vals, &mk_fail f,\n         ret;\n     }\n \n+    // Unbox in case of a box field\n+    if (any_box_pat(m, col)) {\n+        auto box = bcx.build.Load(val);\n+        auto unboxed = bcx.build.InBoundsGEP\n+            (box, ~[C_int(0), C_int(back::abi::box_rc_field_body)]);\n+        compile_submatch(bcx, enter_box(ccx, m, col, val),\n+                         ~[unboxed] + vals_left, f, exits);\n+        ret;\n+    }\n+\n     // Decide what kind of branch we need\n     auto opts = get_options(ccx, m, col);\n     tag branch_kind { no_branch; single; switch; compare; }"}, {"sha": "1612ed822402e5327f079148a20a805881d4f134", "filename": "src/test/run-pass/box-pattern.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be4f7354b475ff8e80a81b495640d7e46d7094cc/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4f7354b475ff8e80a81b495640d7e46d7094cc/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-pattern.rs?ref=be4f7354b475ff8e80a81b495640d7e46d7094cc", "patch": "@@ -0,0 +1,12 @@\n+type foo = rec(int a, uint b);\n+tag bar {\n+    u(@foo);\n+    w(int);\n+}\n+\n+fn main() {\n+    assert alt (u(@rec(a=10, b=40u))) {\n+        u(@{a, b}) { a + (b as int) }\n+        _ { 66 }\n+    } == 50;\n+}"}]}