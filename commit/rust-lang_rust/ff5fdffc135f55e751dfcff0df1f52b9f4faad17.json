{"sha": "ff5fdffc135f55e751dfcff0df1f52b9f4faad17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWZkZmZjMTM1ZjU1ZTc1MWRmY2ZmMGRmMWY1MmI5ZjRmYWFkMTc=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-08-05T03:51:26Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-08-06T16:58:36Z"}, "message": "ToBase64 and ToHex perf improvements\n\nThe overhead of str::push_char is high enough to cripple the performance\nof these two functions. I've switched them to build the output in a\n~[u8] and then convert to a string later. Since we know exactly the\nbytes going into the vector, we can use the unsafe version to avoid the\nis_utf8 check.\n\nI could have riced it further with vec::raw::get, but it only added\n~10MB/s so I didn't think it was worth it. ToHex is still ~30% slower\nthan FromHex, which is puzzling.\n\nBefore:\n\n```\ntest base64::test::from_base64 ... bench: 1000 ns/iter (+/- 349) = 204 MB/s\ntest base64::test::to_base64 ... bench: 2390 ns/iter (+/- 1130) = 63 MB/s\n...\ntest hex::tests::bench_from_hex ... bench: 884 ns/iter (+/- 220) = 341 MB/s\ntest hex::tests::bench_to_hex ... bench: 2453 ns/iter (+/- 919) = 61 MB/s\n```\n\nAfter:\n\n```\ntest base64::test::from_base64 ... bench: 1271 ns/iter (+/- 600) = 160 MB/s\ntest base64::test::to_base64 ... bench: 759 ns/iter (+/- 286) = 198 MB/s\n...\ntest hex::tests::bench_from_hex ... bench: 875 ns/iter (+/- 377) = 345 MB/s\ntest hex::tests::bench_to_hex ... bench: 593 ns/iter (+/- 240) = 254 MB/s\n```", "tree": {"sha": "1bf01497186c19249e1a8b2d4a8b7ca2854cae54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf01497186c19249e1a8b2d4a8b7ca2854cae54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5fdffc135f55e751dfcff0df1f52b9f4faad17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5fdffc135f55e751dfcff0df1f52b9f4faad17", "html_url": "https://github.com/rust-lang/rust/commit/ff5fdffc135f55e751dfcff0df1f52b9f4faad17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5fdffc135f55e751dfcff0df1f52b9f4faad17/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463e2416e98238e294d332397048b106d85fd474", "url": "https://api.github.com/repos/rust-lang/rust/commits/463e2416e98238e294d332397048b106d85fd474", "html_url": "https://github.com/rust-lang/rust/commit/463e2416e98238e294d332397048b106d85fd474"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "d6ab36ca7215e063044526a8c2412fc60b7f1f9e", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ff5fdffc135f55e751dfcff0df1f52b9f4faad17/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5fdffc135f55e751dfcff0df1f52b9f4faad17/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=ff5fdffc135f55e751dfcff0df1f52b9f4faad17", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n //! Base64 binary-to-text encoding\n+use std::str;\n \n /// Available encoding character sets\n pub enum CharacterSet {\n@@ -40,21 +41,13 @@ pub static URL_SAFE: Config =\n pub static MIME: Config =\n     Config {char_set: Standard, pad: true, line_length: Some(76)};\n \n-static STANDARD_CHARS: [char, ..64] = [\n-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n-    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n-    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n-    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n-    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n-];\n-\n-static URLSAFE_CHARS: [char, ..64] = [\n-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n-    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n-    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n-    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n-    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n-];\n+static STANDARD_CHARS: &'static[u8] = bytes!(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n+                                             \"abcdefghijklmnopqrstuvwxyz\",\n+                                             \"0123456789+/\");\n+\n+static URLSAFE_CHARS: &'static[u8] = bytes!(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n+                                            \"abcdefghijklmnopqrstuvwxyz\",\n+                                            \"0123456789-_\");\n \n /// A trait for converting a value to base64 encoding.\n pub trait ToBase64 {\n@@ -80,20 +73,21 @@ impl<'self> ToBase64 for &'self [u8] {\n      * ~~~\n      */\n     fn to_base64(&self, config: Config) -> ~str {\n-        let chars = match config.char_set {\n+        let bytes = match config.char_set {\n             Standard => STANDARD_CHARS,\n             UrlSafe => URLSAFE_CHARS\n         };\n \n-        let mut s = ~\"\";\n+        let mut v: ~[u8] = ~[];\n         let mut i = 0;\n         let mut cur_length = 0;\n         let len = self.len();\n         while i < len - (len % 3) {\n             match config.line_length {\n                 Some(line_length) =>\n                     if cur_length >= line_length {\n-                        s.push_str(\"\\r\\n\");\n+                        v.push('\\r' as u8);\n+                        v.push('\\n' as u8);\n                         cur_length = 0;\n                     },\n                 None => ()\n@@ -104,10 +98,10 @@ impl<'self> ToBase64 for &'self [u8] {\n                     (self[i + 2] as u32);\n \n             // This 24-bit number gets separated into four 6-bit numbers.\n-            s.push_char(chars[(n >> 18) & 63]);\n-            s.push_char(chars[(n >> 12) & 63]);\n-            s.push_char(chars[(n >> 6 ) & 63]);\n-            s.push_char(chars[n & 63]);\n+            v.push(bytes[(n >> 18) & 63]);\n+            v.push(bytes[(n >> 12) & 63]);\n+            v.push(bytes[(n >> 6 ) & 63]);\n+            v.push(bytes[n & 63]);\n \n             cur_length += 4;\n             i += 3;\n@@ -117,7 +111,8 @@ impl<'self> ToBase64 for &'self [u8] {\n             match config.line_length {\n                 Some(line_length) =>\n                     if cur_length >= line_length {\n-                        s.push_str(\"\\r\\n\");\n+                        v.push('\\r' as u8);\n+                        v.push('\\n' as u8);\n                     },\n                 None => ()\n             }\n@@ -129,25 +124,29 @@ impl<'self> ToBase64 for &'self [u8] {\n             0 => (),\n             1 => {\n                 let n = (self[i] as u32) << 16;\n-                s.push_char(chars[(n >> 18) & 63]);\n-                s.push_char(chars[(n >> 12) & 63]);\n+                v.push(bytes[(n >> 18) & 63]);\n+                v.push(bytes[(n >> 12) & 63]);\n                 if config.pad {\n-                    s.push_str(\"==\");\n+                    v.push('=' as u8);\n+                    v.push('=' as u8);\n                 }\n             }\n             2 => {\n                 let n = (self[i] as u32) << 16 |\n                     (self[i + 1u] as u32) << 8;\n-                s.push_char(chars[(n >> 18) & 63]);\n-                s.push_char(chars[(n >> 12) & 63]);\n-                s.push_char(chars[(n >> 6 ) & 63]);\n+                v.push(bytes[(n >> 18) & 63]);\n+                v.push(bytes[(n >> 12) & 63]);\n+                v.push(bytes[(n >> 6 ) & 63]);\n                 if config.pad {\n-                    s.push_char('=');\n+                    v.push('=' as u8);\n                 }\n             }\n             _ => fail!(\"Algebra is broken, please alert the math police\")\n         }\n-        s\n+\n+        unsafe {\n+            str::raw::from_bytes_owned(v)\n+        }\n     }\n }\n "}, {"sha": "748d039158807455922813944e0a57c6e9f045e4", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff5fdffc135f55e751dfcff0df1f52b9f4faad17/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5fdffc135f55e751dfcff0df1f52b9f4faad17/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=ff5fdffc135f55e751dfcff0df1f52b9f4faad17", "patch": "@@ -19,8 +19,7 @@ pub trait ToHex {\n     fn to_hex(&self) -> ~str;\n }\n \n-static CHARS: [char, ..16] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-                              'a', 'b', 'c', 'd', 'e', 'f'];\n+static CHARS: &'static[u8] = bytes!(\"0123456789abcdef\");\n \n impl<'self> ToHex for &'self [u8] {\n     /**\n@@ -39,13 +38,16 @@ impl<'self> ToHex for &'self [u8] {\n      * ~~~\n      */\n     fn to_hex(&self) -> ~str {\n-        let mut s = str::with_capacity(self.len() * 2);\n+        // +1 for NULL terminator\n+        let mut v = vec::with_capacity(self.len() * 2 + 1);\n         for &byte in self.iter() {\n-            s.push_char(CHARS[byte >> 4]);\n-            s.push_char(CHARS[byte & 0xf]);\n+            v.push(CHARS[byte >> 4]);\n+            v.push(CHARS[byte & 0xf]);\n         }\n \n-        s\n+        unsafe {\n+            str::raw::from_bytes_owned(v)\n+        }\n     }\n }\n "}]}