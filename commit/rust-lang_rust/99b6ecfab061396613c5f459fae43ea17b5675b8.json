{"sha": "99b6ecfab061396613c5f459fae43ea17b5675b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YjZlY2ZhYjA2MTM5NjYxM2M1ZjQ1OWZhZTQzZWExN2I1Njc1Yjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T13:12:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T13:12:54Z"}, "message": "switch expand to dyn Trait", "tree": {"sha": "e77386081251b4150049810ad5e6f2a3b538afb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77386081251b4150049810ad5e6f2a3b538afb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b6ecfab061396613c5f459fae43ea17b5675b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b6ecfab061396613c5f459fae43ea17b5675b8", "html_url": "https://github.com/rust-lang/rust/commit/99b6ecfab061396613c5f459fae43ea17b5675b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b6ecfab061396613c5f459fae43ea17b5675b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3260639608112738089d134c47c1d575515c9cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3260639608112738089d134c47c1d575515c9cb7", "html_url": "https://github.com/rust-lang/rust/commit/3260639608112738089d134c47c1d575515c9cb7"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a4ee9a529a1c4b26f7cd1bf0351d170d308f1922", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99b6ecfab061396613c5f459fae43ea17b5675b8/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b6ecfab061396613c5f459fae43ea17b5675b8/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=99b6ecfab061396613c5f459fae43ea17b5675b8", "patch": "@@ -28,13 +28,13 @@ pub trait AstDatabase: SourceDatabase {\n     fn macro_expand(&self, macro_call: MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n }\n \n-pub(crate) fn ast_id_map(db: &impl AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n+pub(crate) fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n     let map =\n         db.parse_or_expand(file_id).map_or_else(AstIdMap::default, |it| AstIdMap::from_source(&it));\n     Arc::new(map)\n }\n \n-pub(crate) fn macro_def(db: &impl AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n+pub(crate) fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n     let macro_call = id.ast_id.to_node(db);\n     let arg = macro_call.token_tree()?;\n     let (tt, _) = mbe::ast_to_token_tree(&arg).or_else(|| {\n@@ -48,7 +48,7 @@ pub(crate) fn macro_def(db: &impl AstDatabase, id: MacroDefId) -> Option<Arc<Mac\n     Some(Arc::new(rules))\n }\n \n-pub(crate) fn macro_arg(db: &impl AstDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n+pub(crate) fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n     let loc = db.lookup_intern_macro(id);\n     let macro_call = loc.ast_id.to_node(db);\n     let arg = macro_call.token_tree()?;\n@@ -57,7 +57,7 @@ pub(crate) fn macro_arg(db: &impl AstDatabase, id: MacroCallId) -> Option<Arc<tt\n }\n \n pub(crate) fn macro_expand(\n-    db: &impl AstDatabase,\n+    db: &dyn AstDatabase,\n     id: MacroCallId,\n ) -> Result<Arc<tt::Subtree>, String> {\n     let loc = db.lookup_intern_macro(id);\n@@ -73,7 +73,7 @@ pub(crate) fn macro_expand(\n     Ok(Arc::new(tt))\n }\n \n-pub(crate) fn parse_or_expand(db: &impl AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n+pub(crate) fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n     match file_id.0 {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n@@ -83,7 +83,7 @@ pub(crate) fn parse_or_expand(db: &impl AstDatabase, file_id: HirFileId) -> Opti\n }\n \n pub(crate) fn parse_macro(\n-    db: &impl AstDatabase,\n+    db: &dyn AstDatabase,\n     macro_file: MacroFile,\n ) -> Option<Parse<SyntaxNode>> {\n     let _p = profile(\"parse_macro_query\");"}, {"sha": "749227465f5b9c15d62ebec09bb33c11b1e726b7", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99b6ecfab061396613c5f459fae43ea17b5675b8/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b6ecfab061396613c5f459fae43ea17b5675b8/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=99b6ecfab061396613c5f459fae43ea17b5675b8", "patch": "@@ -63,7 +63,7 @@ impl From<MacroFile> for HirFileId {\n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n-    pub fn original_file(self, db: &impl AstDatabase) -> FileId {\n+    pub fn original_file(self, db: &dyn AstDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::FileId(file_id) => file_id,\n             HirFileIdRepr::MacroFile(macro_file) => {\n@@ -74,7 +74,7 @@ impl HirFileId {\n     }\n \n     /// Get the crate which the macro lives in, if it is a macro file.\n-    pub fn macro_crate(self, db: &impl AstDatabase) -> Option<CrateId> {\n+    pub fn macro_crate(self, db: &dyn AstDatabase) -> Option<CrateId> {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n@@ -160,7 +160,7 @@ impl<N: AstNode> AstId<N> {\n         self.file_id\n     }\n \n-    pub fn to_node(&self, db: &impl AstDatabase) -> N {\n+    pub fn to_node(&self, db: &dyn AstDatabase) -> N {\n         let root = db.parse_or_expand(self.file_id).unwrap();\n         db.ast_id_map(self.file_id).get(self.file_ast_id).to_node(&root)\n     }"}]}