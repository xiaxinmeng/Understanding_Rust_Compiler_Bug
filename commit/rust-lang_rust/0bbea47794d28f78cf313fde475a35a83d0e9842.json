{"sha": "0bbea47794d28f78cf313fde475a35a83d0e9842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYmVhNDc3OTRkMjhmNzhjZjMxM2ZkZTQ3NWEzNWE4M2QwZTk4NDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-18T13:45:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:32:48Z"}, "message": "parser: refactor `parse_pat_with_or` + use it in [p0, p1, ..] pats.", "tree": {"sha": "6da055b6c3aec5f1f8dc90f5f73fa351d058d3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da055b6c3aec5f1f8dc90f5f73fa351d058d3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bbea47794d28f78cf313fde475a35a83d0e9842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bbea47794d28f78cf313fde475a35a83d0e9842", "html_url": "https://github.com/rust-lang/rust/commit/0bbea47794d28f78cf313fde475a35a83d0e9842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bbea47794d28f78cf313fde475a35a83d0e9842/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba7550a8996cffc07c6af89dcd6e1cdc63b24cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba7550a8996cffc07c6af89dcd6e1cdc63b24cf", "html_url": "https://github.com/rust-lang/rust/commit/1ba7550a8996cffc07c6af89dcd6e1cdc63b24cf"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "ca5a9f2a5a8827308c6e45dba78732c25ced99e4", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0bbea47794d28f78cf313fde475a35a83d0e9842/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbea47794d28f78cf313fde475a35a83d0e9842/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=0bbea47794d28f78cf313fde475a35a83d0e9842", "patch": "@@ -104,12 +104,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a pattern, that may be a or-pattern (e.g. `Some(Foo | Bar)`).\n-    fn parse_pat_with_or(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n+    fn parse_pat_with_or(&mut self, expected: Expected, gate_or: bool) -> PResult<'a, P<Pat>> {\n         // Parse the first pattern.\n         let first_pat = self.parse_pat(expected)?;\n \n-        // If the next token is not a `|`, this is not an or-pattern and\n-        // we should exit here.\n+        // If the next token is not a `|`,\n+        // this is not an or-pattern and we should exit here.\n         if !self.check(&token::BinOp(token::Or)) {\n             return Ok(first_pat)\n         }\n@@ -124,7 +124,10 @@ impl<'a> Parser<'a> {\n \n         let or_pattern_span = lo.to(self.prev_span);\n \n-        self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n+        // Feature gate the or-pattern if instructed:\n+        if gate_or {\n+            self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n+        }\n \n         Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }\n@@ -145,7 +148,11 @@ impl<'a> Parser<'a> {\n             token::OpenDelim(token::Paren) => self.parse_pat_tuple_or_parens()?,\n             token::OpenDelim(token::Bracket) => {\n                 // Parse `[pat, pat,...]` as a slice pattern.\n-                PatKind::Slice(self.parse_delim_comma_seq(token::Bracket, |p| p.parse_pat(None))?.0)\n+                let (pats, _) = self.parse_delim_comma_seq(\n+                    token::Bracket,\n+                    |p| p.parse_pat_with_or(None, true),\n+                )?;\n+                PatKind::Slice(pats)\n             }\n             token::DotDot => {\n                 self.bump();\n@@ -273,7 +280,7 @@ impl<'a> Parser<'a> {\n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n         let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_with_or(None)\n+            p.parse_pat_with_or(None, true)\n         })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n@@ -517,7 +524,7 @@ impl<'a> Parser<'a> {\n             err.span_label(self.token.span, msg);\n             return Err(err);\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None, true))?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -661,7 +668,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_with_or(None)?;\n+            let pat = self.parse_pat_with_or(None, true)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}]}