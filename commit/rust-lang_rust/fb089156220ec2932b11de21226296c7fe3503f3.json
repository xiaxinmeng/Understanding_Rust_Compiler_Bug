{"sha": "fb089156220ec2932b11de21226296c7fe3503f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMDg5MTU2MjIwZWMyOTMyYjExZGUyMTIyNjI5NmM3ZmUzNTAzZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-24T16:23:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-24T16:23:10Z"}, "message": "clarify offset function safety concerns", "tree": {"sha": "d06387150ade95f6a82c1759a520959652ed847b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d06387150ade95f6a82c1759a520959652ed847b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb089156220ec2932b11de21226296c7fe3503f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb089156220ec2932b11de21226296c7fe3503f3", "html_url": "https://github.com/rust-lang/rust/commit/fb089156220ec2932b11de21226296c7fe3503f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb089156220ec2932b11de21226296c7fe3503f3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2af8667b1a5166137510aeb2aaad9945f81db6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2af8667b1a5166137510aeb2aaad9945f81db6d", "html_url": "https://github.com/rust-lang/rust/commit/a2af8667b1a5166137510aeb2aaad9945f81db6d"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "be82ab44cd1fcbf3b00d40ce528652d0aebc223d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb089156220ec2932b11de21226296c7fe3503f3/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb089156220ec2932b11de21226296c7fe3503f3/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=fb089156220ec2932b11de21226296c7fe3503f3", "patch": "@@ -591,7 +591,7 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of *the same* allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -643,9 +643,15 @@ impl<T: ?Sized> *const T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// In particular, the resulting pointer may *not* be used to access a\n+    /// different allocated object than the one `self` points to. In other\n+    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    /// *not* the same as `y`, and dereferencing it is undefined behavior\n+    /// unless `x` and `y` point into the same allocated object.\n     ///\n     /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better.\n+    /// allows the compiler to optimize better.  If you need to cross object\n+    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n     ///\n     /// # Examples\n     ///\n@@ -1340,7 +1346,7 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of *the same* allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1391,9 +1397,15 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// In particular, the resulting pointer may *not* be used to access a\n+    /// different allocated object than the one `self` points to. In other\n+    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    /// *not* the same as `y`, and dereferencing it is undefined behavior\n+    /// unless `x` and `y` point into the same allocated object.\n     ///\n     /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better.\n+    /// allows the compiler to optimize better.  If you need to cross object\n+    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n     ///\n     /// # Examples\n     ///"}]}