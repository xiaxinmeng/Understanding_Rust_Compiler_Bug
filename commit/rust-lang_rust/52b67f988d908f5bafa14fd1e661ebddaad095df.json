{"sha": "52b67f988d908f5bafa14fd1e661ebddaad095df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYjY3Zjk4OGQ5MDhmNWJhZmExNGZkMWU2NjFlYmRkYWFkMDk1ZGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T00:30:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:27Z"}, "message": "rustc: Move original_crate_name to a query", "tree": {"sha": "cb184a33b6ad2f11b205f490e50ee54fb5c5e4bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb184a33b6ad2f11b205f490e50ee54fb5c5e4bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52b67f988d908f5bafa14fd1e661ebddaad095df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52b67f988d908f5bafa14fd1e661ebddaad095df", "html_url": "https://github.com/rust-lang/rust/commit/52b67f988d908f5bafa14fd1e661ebddaad095df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52b67f988d908f5bafa14fd1e661ebddaad095df/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6c88f493677a968e16ecc6f183bb95a7d37351e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c88f493677a968e16ecc6f183bb95a7d37351e", "html_url": "https://github.com/rust-lang/rust/commit/d6c88f493677a968e16ecc6f183bb95a7d37351e"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "c3285a7ac0470a12d3caaa3cdb03a2b4d470d4dd", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -541,6 +541,7 @@ define_dep_nodes!( <'tcx>\n     [] DeriveRegistrarFn(CrateNum),\n     [] CrateDisambiguator(CrateNum),\n     [] CrateHash(CrateNum),\n+    [] OriginalCrateName(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "aa84682821edcdf8d576e3d0167150b99dc78840", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -251,8 +251,6 @@ pub trait CrateStore {\n     /// The name of the crate as it is referred to in source code of the current\n     /// crate.\n     fn crate_name(&self, cnum: CrateNum) -> Symbol;\n-    /// The name of the crate as it is stored in the crate's metadata.\n-    fn original_crate_name(&self, cnum: CrateNum) -> Symbol;\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n@@ -349,9 +347,6 @@ impl CrateStore for DummyCrateStore {\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn crate_name(&self, cnum: CrateNum) -> Symbol { bug!(\"crate_name\") }\n-    fn original_crate_name(&self, cnum: CrateNum) -> Symbol {\n-        bug!(\"original_crate_name\")\n-    }\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }"}, {"sha": "0b9bf9a708ab14a199178a9ff48476f2f88592bc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -917,14 +917,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn original_crate_name(self, cnum: CrateNum) -> Symbol {\n-        if cnum == LOCAL_CRATE {\n-            self.crate_name.clone()\n-        } else {\n-            self.sess.cstore.original_crate_name(cnum)\n-        }\n-    }\n-\n     pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n         self.global_arenas.generics.alloc(generics)\n     }"}, {"sha": "4b37b2aa7ec672ac49af9c84bebd8325a249c336", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -624,6 +624,12 @@ impl<'tcx> QueryDescription for queries::crate_hash<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::original_crate_name<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"looking up the original name a crate\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1206,6 +1212,7 @@ define_maps! { <'tcx>\n     [] fn derive_registrar_fn: DeriveRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> Symbol,\n     [] fn crate_hash: CrateHash(CrateNum) -> Svh,\n+    [] fn original_crate_name: OriginalCrateName(CrateNum) -> Symbol,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "d3cfd114451f1cee89b262c9b3fae204991a9f27", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -2210,7 +2210,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if let Some(id) = self.hir.as_local_node_id(id) {\n             self.hir.name(id)\n         } else if id.index == CRATE_DEF_INDEX {\n-            self.sess.cstore.original_crate_name(id.krate)\n+            self.original_crate_name(id.krate)\n         } else {\n             let def_key = self.sess.cstore.def_key(id);\n             // The name of a StructCtor is that of its struct parent.\n@@ -2516,6 +2516,12 @@ fn crate_disambiguator<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.sess.local_crate_disambiguator()\n }\n \n+fn original_crate_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 crate_num: CrateNum) -> Symbol {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+    tcx.crate_name.clone()\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     util::provide(providers);\n     context::provide(providers);\n@@ -2528,6 +2534,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         param_env,\n         trait_of_item,\n         crate_disambiguator,\n+        original_crate_name,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         ..*providers\n     };"}, {"sha": "e08f0f2c752dfaf057ef871bbaec80935883a775", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -177,6 +177,7 @@ provide! { <'tcx> tcx, def_id, cdata,\n     }\n     crate_disambiguator => { cdata.disambiguator() }\n     crate_hash => { cdata.hash() }\n+    original_crate_name => { cdata.name() }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -280,11 +281,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).name\n     }\n \n-    fn original_crate_name(&self, cnum: CrateNum) -> Symbol\n-    {\n-        self.get_crate_data(cnum).name()\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to."}, {"sha": "76ad9555d7e4ab8d03f7183592c8d83b358308f2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -1295,7 +1295,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             .iter()\n             .map(|&cnum| {\n                 let dep = CrateDep {\n-                    name: cstore.original_crate_name(cnum),\n+                    name: self.tcx.original_crate_name(cnum),\n                     hash: self.tcx.crate_hash(cnum),\n                     kind: cstore.dep_kind(cnum),\n                 };"}, {"sha": "d55d98d1fde874d3e0bf290cd73104da557d5338", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b67f988d908f5bafa14fd1e661ebddaad095df/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=52b67f988d908f5bafa14fd1e661ebddaad095df", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`.\n                     }\n \n-                    let imported_from = self.cx.sess().cstore.original_crate_name(def_id.krate);\n+                    let imported_from = self.cx.tcx.original_crate_name(def_id.krate);\n                     let def = match self.cx.sess().cstore.load_macro(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroDef(macro_def) => macro_def,\n                         // FIXME(jseyfried): document proc macro reexports"}]}