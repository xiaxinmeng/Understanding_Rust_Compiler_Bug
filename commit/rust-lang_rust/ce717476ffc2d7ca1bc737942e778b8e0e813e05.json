{"sha": "ce717476ffc2d7ca1bc737942e778b8e0e813e05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNzE3NDc2ZmZjMmQ3Y2ExYmM3Mzc5NDJlNzc4YjhlMGU4MTNlMDU=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-08-11T23:49:39Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-08-12T15:40:22Z"}, "message": "Add a script to verify the Platform Support page is up-to-date.", "tree": {"sha": "e8e521ef93db4b518d1d77c0fac4d8e38b285259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e521ef93db4b518d1d77c0fac4d8e38b285259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce717476ffc2d7ca1bc737942e778b8e0e813e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce717476ffc2d7ca1bc737942e778b8e0e813e05", "html_url": "https://github.com/rust-lang/rust/commit/ce717476ffc2d7ca1bc737942e778b8e0e813e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce717476ffc2d7ca1bc737942e778b8e0e813e05/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392116e021f786b81dd12faec189a7d199dcd999", "url": "https://api.github.com/repos/rust-lang/rust/commits/392116e021f786b81dd12faec189a7d199dcd999", "html_url": "https://github.com/rust-lang/rust/commit/392116e021f786b81dd12faec189a7d199dcd999"}], "stats": {"total": 127, "additions": 119, "deletions": 8}, "files": [{"sha": "97020034efcdc3ba5e8964decf41f03e475c03bd", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce717476ffc2d7ca1bc737942e778b8e0e813e05/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ce717476ffc2d7ca1bc737942e778b8e0e813e05/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ce717476ffc2d7ca1bc737942e778b8e0e813e05", "patch": "@@ -4623,6 +4623,10 @@ dependencies = [\n  \"walkdir\",\n ]\n \n+[[package]]\n+name = \"tier-check\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"time\"\n version = \"0.1.42\""}, {"sha": "87e958a1bafe64bea36d84de36c726d940a08bd2", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce717476ffc2d7ca1bc737942e778b8e0e813e05/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ce717476ffc2d7ca1bc737942e778b8e0e813e05/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=ce717476ffc2d7ca1bc737942e778b8e0e813e05", "patch": "@@ -13,6 +13,7 @@ members = [\n   \"src/tools/rustbook\",\n   \"src/tools/unstable-book-gen\",\n   \"src/tools/tidy\",\n+  \"src/tools/tier-check\",\n   \"src/tools/build-manifest\",\n   \"src/tools/remote-test-client\",\n   \"src/tools/remote-test-server\","}, {"sha": "4b0905bd6c16c8d14eee46a0c5e45b201b3a89c3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ce717476ffc2d7ca1bc737942e778b8e0e813e05", "patch": "@@ -404,6 +404,7 @@ impl<'a> Builder<'a> {\n                 test::CrateLibrustc,\n                 test::CrateRustdoc,\n                 test::Linkcheck,\n+                test::TierCheck,\n                 test::Cargotest,\n                 test::Cargo,\n                 test::Rls,"}, {"sha": "11e2564305f0db3b54825cc65d556030e267b83b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ce717476ffc2d7ca1bc737942e778b8e0e813e05", "patch": "@@ -2043,3 +2043,47 @@ impl Step for Bootstrap {\n         run.builder.ensure(Bootstrap);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct TierCheck {\n+    pub compiler: Compiler,\n+    target: TargetSelection,\n+}\n+\n+impl Step for TierCheck {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/tier-check\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n+        run.builder.ensure(TierCheck { compiler, target: run.host });\n+    }\n+\n+    /// Tests the Platform Support page in the rustc book.\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.ensure(compile::Std { compiler: self.compiler, target: self.target });\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n+            self.compiler,\n+            Mode::ToolRustc,\n+            self.target,\n+            \"run\",\n+            \"src/tools/tier-check\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        cargo.arg(builder.src.join(\"src/doc/rustc/src/platform-support.md\"));\n+        cargo.arg(&builder.rustc(self.compiler));\n+        if builder.is_verbose() {\n+            cargo.arg(\"--verbose\");\n+        }\n+\n+        builder.info(\"platform support check\");\n+        try_run(builder, &mut cargo.into());\n+    }\n+}"}, {"sha": "b8d3c985cb5b615076add108107f12215c631bc7", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=ce717476ffc2d7ca1bc737942e778b8e0e813e05", "patch": "@@ -57,7 +57,7 @@ Specifically, these platforms are required to have each of the following:\n \n target | std | host | notes\n -------|-----|------|-------\n-`aarch64-apple-ios` | \u2713 |  | ARM64 iOS\n+`aarch64-apple-ios` | \u2713[^apple] |  | ARM64 iOS\n `aarch64-fuchsia` | \u2713 |  | ARM64 Fuchsia\n `aarch64-linux-android` | \u2713 |  | ARM64 Android\n `aarch64-pc-windows-msvc` | \u2713 |  | ARM64 Windows MSVC\n@@ -122,7 +122,7 @@ target | std | host | notes\n `wasm32-unknown-emscripten` | \u2713 |  | WebAssembly via Emscripten\n `wasm32-unknown-unknown` | \u2713 |  | WebAssembly\n `wasm32-wasi` | \u2713 |  | WebAssembly with WASI\n-`x86_64-apple-ios` | \u2713 |  | 64-bit x86 iOS\n+`x86_64-apple-ios` | \u2713[^apple] |  | 64-bit x86 iOS\n `x86_64-fortanix-unknown-sgx` | \u2713 |  | [Fortanix ABI] for 64-bit Intel SGX\n `x86_64-fuchsia` | \u2713 |  | 64-bit Fuchsia\n `x86_64-linux-android` | \u2713 |  | 64-bit x86 Android\n@@ -147,7 +147,7 @@ not available.\n target | std | host | notes\n -------|-----|------|-------\n `aarch64-apple-darwin` | ? |  | ARM64 macOS\n-`aarch64-apple-tvos` | * |  | ARM64 tvOS\n+`aarch64-apple-tvos` | *[^apple] |  | ARM64 tvOS\n `aarch64-unknown-cloudabi` | \u2713 |  | ARM64 CloudABI\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |\n@@ -159,16 +159,16 @@ target | std | host | notes\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n `armv6-unknown-netbsd-eabihf` | ? |  |\n-`armv7-apple-ios` | \u2713 |  | RMv7 iOS, Cortex-\n+`armv7-apple-ios` | \u2713[^apple] |  | ARMv7 iOS, Cortex-a8\n `armv7-unknown-cloudabi-eabihf` | \u2713 |  | ARMv7 CloudABI, hardfloat\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | ? |  |\n `armv7-wrs-vxworks-eabihf` | ? |  |\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n-`armv7s-apple-ios` | \u2713 |  |\n+`armv7s-apple-ios` | \u2713[^apple] |  |\n `avr-unknown-unknown` | ? |  | AVR\n `hexagon-unknown-linux-musl` | ? |  |\n-`i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n+`i386-apple-ios` | \u2713[^apple] |  | 32-bit x86 iOS\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit OSX (10.7+, Lion+)\n `i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n `i686-unknown-cloudabi` | \u2713 |  | 32-bit CloudABI\n@@ -203,8 +203,8 @@ target | std | host | notes\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n `thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n `thumbv4t-none-eabi` | * |  | ARMv4T T32\n-`x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst\n-`x86_64-apple-tvos` | * | | x86 64-bit tvOS\n+`x86_64-apple-ios-macabi` | \u2713[^apple] |  | Apple Catalyst\n+`x86_64-apple-tvos` | *[^apple] | | x86 64-bit tvOS\n `x86_64-linux-kernel` | ? |  | Linux kernel modules\n `x86_64-pc-solaris` | ? |  |\n `x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support\n@@ -220,3 +220,4 @@ target | std | host | notes\n `x86_64-wrs-vxworks` | ? |  |\n \n [runs on NVIDIA GPUs]: https://github.com/japaric-archived/nvptx#targets\n+[^apple]: These targets are only available on macOS."}, {"sha": "9917b383aab37de7842ed6ea17b6c5cba6299c98", "filename": "src/tools/tier-check/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Ftools%2Ftier-check%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Ftools%2Ftier-check%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftier-check%2FCargo.toml?ref=ce717476ffc2d7ca1bc737942e778b8e0e813e05", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"tier-check\"\n+version = \"0.1.0\"\n+authors = [\"Eric Huss\"]\n+edition = \"2018\"\n+license = \"MIT OR Apache-2.0\"\n+\n+[dependencies]"}, {"sha": "b8d60a5e2fef9acd32163914aeeaed61096a97c8", "filename": "src/tools/tier-check/src/main.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce717476ffc2d7ca1bc737942e778b8e0e813e05/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs?ref=ce717476ffc2d7ca1bc737942e778b8e0e813e05", "patch": "@@ -0,0 +1,52 @@\n+//! This is a script for validating the platform support page in the rustc book.\n+//!\n+//! The script takes two arguments, the path to the Platform Support source\n+//! page, and the second argument is the path to `rustc`.\n+\n+use std::collections::HashSet;\n+\n+fn main() {\n+    let mut args = std::env::args().skip(1);\n+    let src = args.next().expect(\"expected source file as first argument\");\n+    let filename = std::path::Path::new(&src).file_name().unwrap().to_str().unwrap();\n+    let rustc = args.next().expect(\"expected rustc as second argument\");\n+    let output = std::process::Command::new(rustc)\n+        .arg(\"--print=target-list\")\n+        .output()\n+        .expect(\"rustc should run\");\n+    if !output.status.success() {\n+        eprintln!(\"rustc failed to run\");\n+        std::process::exit(0);\n+    }\n+    let stdout = std::str::from_utf8(&output.stdout).expect(\"utf8\");\n+    let target_list: HashSet<_> = stdout.lines().collect();\n+\n+    let doc_targets_md = std::fs::read_to_string(&src).expect(\"failed to read input source\");\n+    let doc_targets: HashSet<_> = doc_targets_md\n+        .lines()\n+        .filter(|line| line.starts_with('`') && line.contains('|'))\n+        // These platforms only exist on macos.\n+        .filter(|line| !line.contains(\"[^apple]\") || cfg!(target_os = \"macos\"))\n+        .map(|line| line.split('`').skip(1).next().expect(\"expected target code span\"))\n+        .collect();\n+\n+    let missing: Vec<_> = target_list.difference(&doc_targets).collect();\n+    let extra: Vec<_> = doc_targets.difference(&target_list).collect();\n+    for target in &missing {\n+        eprintln!(\n+            \"error: target `{}` is missing from {}\\n\\\n+            If this is a new target, please add it to {}.\",\n+            target, filename, src\n+        );\n+    }\n+    for target in &extra {\n+        eprintln!(\n+            \"error: target `{}` is in {}, but does not appear in the rustc target list\\n\\\n+            If the target has been removed, please edit {} and remove the target.\",\n+            target, filename, src\n+        );\n+    }\n+    if !missing.is_empty() || !extra.is_empty() {\n+        std::process::exit(1);\n+    }\n+}"}]}