{"sha": "c9d2d3cc6642de70b35139dae4dd76b893a46f6b", "node_id": "C_kwDOAAsO6NoAKGM5ZDJkM2NjNjY0MmRlNzBiMzUxMzlkYWU0ZGQ3NmI4OTNhNDZmNmI", "commit": {"author": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2022-01-03T15:35:53Z"}, "committer": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2022-01-03T15:35:53Z"}, "message": "Add tracking issues (`const_box`, `const_alloc_error`)", "tree": {"sha": "d02353c4c250271a371e0dd8bf98e9708c860424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d02353c4c250271a371e0dd8bf98e9708c860424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d2d3cc6642de70b35139dae4dd76b893a46f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d2d3cc6642de70b35139dae4dd76b893a46f6b", "html_url": "https://github.com/rust-lang/rust/commit/c9d2d3cc6642de70b35139dae4dd76b893a46f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d2d3cc6642de70b35139dae4dd76b893a46f6b/comments", "author": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb4fc640b0f881e240ad0ebb9d05f56547e42036", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fc640b0f881e240ad0ebb9d05f56547e42036", "html_url": "https://github.com/rust-lang/rust/commit/eb4fc640b0f881e240ad0ebb9d05f56547e42036"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "d075658f51a3e7b3fb7c46df8619787e77b6b68b", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d2d3cc6642de70b35139dae4dd76b893a46f6b/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d2d3cc6642de70b35139dae4dd76b893a46f6b/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=c9d2d3cc6642de70b35139dae4dd76b893a46f6b", "patch": "@@ -323,7 +323,7 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n \n #[cfg_attr(not(test), lang = \"box_free\")]\n #[inline]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n // This signature has to be the same as `Box`, otherwise an ICE will happen.\n // When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as\n // well.\n@@ -365,7 +365,7 @@ extern \"Rust\" {\n /// [`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html\n /// [`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_alloc_error\", issue = \"92523\")]\n #[cfg(all(not(no_global_oom_handling), not(test)))]\n #[rustc_allocator_nounwind]\n #[cold]"}, {"sha": "aa7344ba405a988c31598701bcf7759940ea1e2f", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c9d2d3cc6642de70b35139dae4dd76b893a46f6b/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d2d3cc6642de70b35139dae4dd76b893a46f6b/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=c9d2d3cc6642de70b35139dae4dd76b893a46f6b", "patch": "@@ -346,7 +346,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline]\n     pub const fn new_in(x: T, alloc: A) -> Self\n@@ -376,7 +376,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// # Ok::<(), std::alloc::AllocError>(())\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const fn try_new_in(x: T, alloc: A) -> Result<Self, AllocError>\n     where\n@@ -411,7 +411,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// assert_eq!(*five, 5)\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[cfg(not(no_global_oom_handling))]\n     #[must_use]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n@@ -452,7 +452,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// ```\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     pub const fn try_new_uninit_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n         A: ~const Allocator + ~const Drop,\n@@ -483,7 +483,7 @@ impl<T, A: Allocator> Box<T, A> {\n     ///\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[cfg(not(no_global_oom_handling))]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[must_use]\n@@ -524,7 +524,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     pub const fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError>\n     where\n         A: ~const Allocator + ~const Drop,\n@@ -538,7 +538,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[must_use]\n     #[inline(always)]\n     pub const fn pin_in(x: T, alloc: A) -> Pin<Self>\n@@ -552,7 +552,7 @@ impl<T, A: Allocator> Box<T, A> {\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n     #[unstable(feature = \"box_into_boxed_slice\", issue = \"71582\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     pub const fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n         let (raw, alloc) = Box::into_raw_with_allocator(boxed);\n         unsafe { Box::from_raw_in(raw as *mut [T; 1], alloc) }\n@@ -570,7 +570,7 @@ impl<T, A: Allocator> Box<T, A> {\n     /// assert_eq!(Box::into_inner(c), 5);\n     /// ```\n     #[unstable(feature = \"box_into_inner\", issue = \"80437\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const fn into_inner(boxed: Self) -> T\n     where\n@@ -789,7 +789,7 @@ impl<T, A: Allocator> Box<mem::MaybeUninit<T>, A> {\n     /// assert_eq!(*five, 5)\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const unsafe fn assume_init(self) -> Box<T, A> {\n         let (raw, alloc) = Box::into_raw_with_allocator(self);\n@@ -824,7 +824,7 @@ impl<T, A: Allocator> Box<mem::MaybeUninit<T>, A> {\n     /// }\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const fn write(mut boxed: Self, value: T) -> Box<T, A> {\n         unsafe {\n@@ -971,7 +971,7 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     /// [memory layout]: self#memory-layout\n     /// [`Layout`]: crate::Layout\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {\n         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n@@ -1069,7 +1069,7 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     ///\n     /// [memory layout]: self#memory-layout\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const fn into_raw_with_allocator(b: Self) -> (*mut T, A) {\n         let (leaked, alloc) = Box::into_unique(b);\n@@ -1081,7 +1081,7 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n         issue = \"none\",\n         reason = \"use `Box::leak(b).into()` or `Unique::from(Box::leak(b))` instead\"\n     )]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     #[doc(hidden)]\n     pub const fn into_unique(b: Self) -> (Unique<T>, A) {\n@@ -1100,7 +1100,7 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     /// to call it as `Box::allocator(&b)` instead of `b.allocator()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const fn allocator(b: &Self) -> &A {\n         &b.1\n@@ -1142,7 +1142,7 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     /// assert_eq!(*static_ref, [4, 2, 3]);\n     /// ```\n     #[stable(feature = \"box_leak\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     pub const fn leak<'a>(b: Self) -> &'a mut T\n     where\n@@ -1157,7 +1157,7 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     ///\n     /// This is also available via [`From`].\n     #[unstable(feature = \"box_into_pin\", issue = \"62370\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     pub const fn into_pin(boxed: Self) -> Pin<Self>\n     where\n         A: 'static,\n@@ -1170,7 +1170,7 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> const Drop for Box<T, A> {\n     fn drop(&mut self) {\n         // FIXME: Do nothing, drop is currently performed by compiler.\n@@ -1381,7 +1381,7 @@ impl<T> From<T> for Box<T> {\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n impl<T: ?Sized, A: Allocator> const From<Box<T, A>> for Pin<Box<T, A>>\n where\n     A: 'static,\n@@ -1761,7 +1761,7 @@ impl<T: ?Sized, A: Allocator> fmt::Pointer for Box<T, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n impl<T: ?Sized, A: Allocator> const Deref for Box<T, A> {\n     type Target = T;\n \n@@ -1771,7 +1771,7 @@ impl<T: ?Sized, A: Allocator> const Deref for Box<T, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n impl<T: ?Sized, A: Allocator> const DerefMut for Box<T, A> {\n     fn deref_mut(&mut self) -> &mut T {\n         &mut **self\n@@ -1951,7 +1951,7 @@ impl<T: ?Sized, A: Allocator> AsMut<T> for Box<T, A> {\n  *  could have a method to project a Pin<T> from it.\n  */\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-#[rustc_const_unstable(feature = \"const_box\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n impl<T: ?Sized, A: Allocator> const Unpin for Box<T, A> where A: 'static {}\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]"}, {"sha": "dcff4e593afde166f53ee0f126f7d861dce28d8d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d2d3cc6642de70b35139dae4dd76b893a46f6b/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d2d3cc6642de70b35139dae4dd76b893a46f6b/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=c9d2d3cc6642de70b35139dae4dd76b893a46f6b", "patch": "@@ -96,8 +96,9 @@\n #![feature(array_windows)]\n #![feature(async_stream)]\n #![feature(coerce_unsized)]\n-#![cfg_attr(not(no_global_oom_handling), feature(const_btree_new))]\n+#![feature(const_alloc_error)]\n #![feature(const_box)]\n+#![cfg_attr(not(no_global_oom_handling), feature(const_btree_new))]\n #![feature(const_cow_is_borrowed)]\n #![feature(const_convert)]\n #![feature(const_size_of_val)]"}]}