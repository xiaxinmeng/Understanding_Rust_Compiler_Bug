{"sha": "e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MGQ3ZDk2NDNiODEwYjJiYzYyZjI3OWUxZDZmNGFkNjhhMzViYzI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-27T21:31:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-27T21:44:47Z"}, "message": "Resolve `$crate`s for pretty-printing at more appropriate time", "tree": {"sha": "fa910b36cf72542f9a427860865c05471c4b4ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa910b36cf72542f9a427860865c05471c4b4ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "html_url": "https://github.com/rust-lang/rust/commit/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24af9f88a5555120eadc7897be7eeaa7c8e1f9af", "url": "https://api.github.com/repos/rust-lang/rust/commits/24af9f88a5555120eadc7897be7eeaa7c8e1f9af", "html_url": "https://github.com/rust-lang/rust/commit/24af9f88a5555120eadc7897be7eeaa7c8e1f9af"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "21fb29974c8800b7f7e0c7f84adb0ef431fb6416", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "patch": "@@ -1025,15 +1025,4 @@ impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n         }\n         visit::walk_attribute(self, attr);\n     }\n-\n-    fn visit_ident(&mut self, ident: Ident) {\n-        if ident.name == keywords::DollarCrate.name() {\n-            let name = match self.resolver.resolve_crate_root(ident).kind {\n-                ModuleKind::Def(_, name) if name != keywords::Invalid.name() => name,\n-                _ => keywords::Crate.name(),\n-            };\n-            ident.span.ctxt().set_dollar_crate_name(name);\n-        }\n-        visit::walk_ident(self, ident);\n-    }\n }"}, {"sha": "9d91856f32bcfcbfbf42a82bf9981eca5fd097d0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "patch": "@@ -1,6 +1,6 @@\n use {AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n use {CrateLint, Resolver, ResolutionError, ScopeSet, Weak};\n-use {Module, NameBinding, NameBindingKind, PathResult, Segment, ToNameBinding};\n+use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult, Segment, ToNameBinding};\n use {is_known_tool, resolve_error};\n use ModuleOrUniformRoot;\n use Namespace::*;\n@@ -15,12 +15,13 @@ use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n-use syntax::ext::base::{MacroKind, SyntaxExtension};\n+use syntax::ext::base::{Annotatable, MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{feature_err, is_builtin_attr_name, GateIssue};\n use syntax::symbol::{Symbol, keywords};\n+use syntax::visit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::Applicability;\n@@ -126,6 +127,26 @@ impl<'a> base::Resolver for Resolver<'a> {\n         mark\n     }\n \n+    fn resolve_dollar_crates(&mut self, annotatable: &Annotatable) {\n+        pub struct ResolveDollarCrates<'a, 'b: 'a> {\n+            pub resolver: &'a mut Resolver<'b>,\n+        }\n+        impl<'a> Visitor<'a> for ResolveDollarCrates<'a, '_> {\n+            fn visit_ident(&mut self, ident: Ident) {\n+                if ident.name == keywords::DollarCrate.name() {\n+                    let name = match self.resolver.resolve_crate_root(ident).kind {\n+                        ModuleKind::Def(_, name) if name != keywords::Invalid.name() => name,\n+                        _ => keywords::Crate.name(),\n+                    };\n+                    ident.span.ctxt().set_dollar_crate_name(name);\n+                }\n+            }\n+            fn visit_mac(&mut self, _: &ast::Mac) {}\n+        }\n+\n+        annotatable.visit_with(&mut ResolveDollarCrates { resolver: self });\n+    }\n+\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]) {\n         let invocation = self.invocations[&mark];"}, {"sha": "12375a35b6a71eb82b85e52969b4f1f11ddc73f5", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "patch": "@@ -14,6 +14,7 @@ use parse::token;\n use ptr::P;\n use smallvec::SmallVec;\n use symbol::{keywords, Ident, Symbol};\n+use visit::Visitor;\n use ThinVec;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -135,6 +136,17 @@ impl Annotatable {\n             _ => false,\n         }\n     }\n+\n+    pub fn visit_with<'a, V: Visitor<'a>>(&'a self, visitor: &mut V) {\n+        match self {\n+            Annotatable::Item(item) => visitor.visit_item(item),\n+            Annotatable::TraitItem(trait_item) => visitor.visit_trait_item(trait_item),\n+            Annotatable::ImplItem(impl_item) => visitor.visit_impl_item(impl_item),\n+            Annotatable::ForeignItem(foreign_item) => visitor.visit_foreign_item(foreign_item),\n+            Annotatable::Stmt(stmt) => visitor.visit_stmt(stmt),\n+            Annotatable::Expr(expr) => visitor.visit_expr(expr),\n+        }\n+    }\n }\n \n // A more flexible ItemDecorator.\n@@ -723,6 +735,7 @@ pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n \n+    fn resolve_dollar_crates(&mut self, annotatable: &Annotatable);\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);\n@@ -756,6 +769,7 @@ impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n \n+    fn resolve_dollar_crates(&mut self, _annotatable: &Annotatable) {}\n     fn visit_ast_fragment_with_placeholders(&mut self, _invoc: Mark, _fragment: &AstFragment,\n                                             _derives: &[Mark]) {}\n     fn add_builtin(&mut self, _ident: ast::Ident, _ext: Lrc<SyntaxExtension>) {}"}, {"sha": "bca2fe254cebf53caea2a49087ed300123a574a6", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "patch": "@@ -576,6 +576,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(invoc.fragment_kind.expect_from_annotatables(items))\n             }\n             AttrProcMacro(ref mac, ..) => {\n+                // Resolve `$crate`s in case we have to go though stringification.\n+                self.cx.resolver.resolve_dollar_crates(&item);\n                 self.gate_proc_macro_attr_item(attr.span, &item);\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n@@ -918,6 +920,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         match *ext {\n             ProcMacroDerive(ref ext, ..) => {\n+                // Resolve `$crate`s in case we have to go though stringification.\n+                self.cx.resolver.resolve_dollar_crates(&item);\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this"}, {"sha": "2d54c07ff95309fba007bd0cbbc68c3649befb9f", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs?ref=e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "patch": "@@ -1,3 +1,4 @@\n+// compile-pass\n // edition:2018\n // aux-build:dollar-crate.rs\n \n@@ -15,7 +16,7 @@ macro_rules! m {\n             struct M($crate::S);\n         }\n \n-        #[dollar_crate::a] //~ ERROR expected type, found `$`\n+        #[dollar_crate::a]\n         struct A($crate::S);\n     };\n }"}, {"sha": "f82cf22a9ce3206653a981a14f0479ef3fc2d85a", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24af9f88a5555120eadc7897be7eeaa7c8e1f9af/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24af9f88a5555120eadc7897be7eeaa7c8e1f9af/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stderr?ref=24af9f88a5555120eadc7897be7eeaa7c8e1f9af", "patch": "@@ -1,11 +0,0 @@\n-error: expected type, found `$`\n-  --> $DIR/dollar-crate-in-tokens.rs:18:9\n-   |\n-LL |         #[dollar_crate::a] //~ ERROR expected type, found `$`\n-   |         ^^^^^^^^^^^^^^^^^^\n-...\n-LL | m!();\n-   | ----- in this macro invocation\n-\n-error: aborting due to previous error\n-"}, {"sha": "09340988c8968875bae40ec80e63221e592a89e4", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=e40d7d9643b810b2bc62f279e1d6f4ad68a35bc2", "patch": "@@ -38,48 +38,43 @@ PROC MACRO INPUT: TokenStream [\n         span: #2 bytes(LO..HI)\n     }\n ]\n-ATTRIBUTE INPUT (PRETTY-PRINTED): struct A($crate::S);\n+ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(crate::S);\n ATTRIBUTE INPUT: TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Ident {\n         ident: \"A\",\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n-            Punct {\n-                ch: '$',\n-                spacing: Alone,\n-                span: #0 bytes(0..0)\n-            },\n             Ident {\n-                ident: \"crate\",\n-                span: #0 bytes(0..0)\n+                ident: \"$crate\",\n+                span: #2 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #0 bytes(0..0)\n+                span: #2 bytes(LO..HI)\n             }\n         ],\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0)\n+        span: #2 bytes(LO..HI)\n     }\n ]"}]}