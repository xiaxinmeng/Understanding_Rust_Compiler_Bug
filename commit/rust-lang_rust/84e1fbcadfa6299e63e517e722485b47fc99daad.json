{"sha": "84e1fbcadfa6299e63e517e722485b47fc99daad", "node_id": "C_kwDOAAsO6NoAKDg0ZTFmYmNhZGZhNjI5OWU2M2U1MTdlNzIyNDg1YjQ3ZmM5OWRhYWQ", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-09-05T08:56:06Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-11-11T09:44:48Z"}, "message": "Add no_std AArch64 support for the QNX Neutrino (nto) 7.1 RTOS\n\nThis change allows to compile no_std applications for the QNX Neutrino\nrealtime operating system for ARM 64 bit CPUs.\nTested with QNX Neutrino 7.1.", "tree": {"sha": "1270229286f590fdaab81245aeaec108399b446d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1270229286f590fdaab81245aeaec108399b446d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e1fbcadfa6299e63e517e722485b47fc99daad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e1fbcadfa6299e63e517e722485b47fc99daad", "html_url": "https://github.com/rust-lang/rust/commit/84e1fbcadfa6299e63e517e722485b47fc99daad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e1fbcadfa6299e63e517e722485b47fc99daad/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b7f2716ee1655a696d3d64c3e12638d0dd19c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b7f2716ee1655a696d3d64c3e12638d0dd19c0", "html_url": "https://github.com/rust-lang/rust/commit/b7b7f2716ee1655a696d3d64c3e12638d0dd19c0"}], "stats": {"total": 192, "additions": 192, "deletions": 0}, "files": [{"sha": "916b6137b650a0a2a60f89a6d85db37d95257146", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_nto_qnx_710.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs?ref=84e1fbcadfa6299e63e517e722485b47fc99daad", "patch": "@@ -0,0 +1,28 @@\n+use super::nto_qnx_base;\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"aarch64-unknown-unknown\".into(),\n+        pointer_width: 64,\n+        // from: https://llvm.org/docs/LangRef.html#data-layout\n+        // e         = little endian\n+        // m:e       = ELF mangling: Private symbols get a .L prefix\n+        // i8:8:32   = 8-bit-integer, minimum_alignment=8, preferred_alignment=32\n+        // i16:16:32 = 16-bit-integer, minimum_alignment=16, preferred_alignment=32\n+        // i64:64    = 64-bit-integer, minimum_alignment=64, preferred_alignment=64\n+        // i128:128  = 128-bit-integer, minimum_alignment=128, preferred_alignment=128\n+        // n32:64    = 32 and 64 are native integer widths; Elements of this set are considered to support most general arithmetic operations efficiently.\n+        // S128      = 128 bits are the natural alignment of the stack in bits.\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            max_atomic_width: Some(128),\n+            pre_link_args: TargetOptions::link_args(\n+                LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+                &[\"-Vgcc_ntoaarch64le_cxx\"],\n+            ),\n+            ..nto_qnx_base::opts()\n+        },\n+    }\n+}"}, {"sha": "e809f646860b0b2f55778715e24b8f3775a15496", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=84e1fbcadfa6299e63e517e722485b47fc99daad", "patch": "@@ -74,6 +74,7 @@ mod linux_musl_base;\n mod linux_uclibc_base;\n mod msvc_base;\n mod netbsd_base;\n+mod nto_qnx_base;\n mod openbsd_base;\n mod redox_base;\n mod solaris_base;\n@@ -1242,6 +1243,9 @@ supported_targets! {\n     (\"x86_64-unknown-none\", x86_64_unknown_none),\n \n     (\"mips64-openwrt-linux-musl\", mips64_openwrt_linux_musl),\n+\n+    (\"aarch64-unknown-nto-qnx7.1.0\", aarch64_unknown_nto_qnx_710),\n+    (\"x86_64-pc-nto-qnx7.1.0\", x86_64_pc_nto_qnx710),\n }\n \n /// Cow-Vec-Str: Cow<'static, [Cow<'static, str>]>"}, {"sha": "6fb581ef5ce34195f5928910744355e43e5e9c19", "filename": "compiler/rustc_target/src/spec/nto_qnx_base.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnto_qnx_base.rs?ref=84e1fbcadfa6299e63e517e722485b47fc99daad", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{cvs, RelroLevel, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        crt_static_respected: true,\n+        dynamic_linking: true,\n+        env: \"nto71\".into(),\n+        executables: true,\n+        families: cvs![\"unix\"],\n+        has_rpath: true,\n+        has_thread_local: false,\n+        linker: Some(\"qcc\".into()),\n+        os: \"nto\".into(),\n+        position_independent_executables: true,\n+        static_position_independent_executables: true,\n+        relro_level: RelroLevel::Full,\n+        ..Default::default()\n+    }\n+}"}, {"sha": "e9b3acee2e7f1e1ea79766b0b60e4ebe93e2be06", "filename": "compiler/rustc_target/src/spec/x86_64_pc_nto_qnx710.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e1fbcadfa6299e63e517e722485b47fc99daad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_nto_qnx710.rs?ref=84e1fbcadfa6299e63e517e722485b47fc99daad", "patch": "@@ -0,0 +1,21 @@\n+use super::nto_qnx_base;\n+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"x86_64-pc-unknown\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: \"x86_64\".into(),\n+        options: TargetOptions {\n+            cpu: \"x86-64\".into(),\n+            max_atomic_width: Some(64),\n+            pre_link_args: TargetOptions::link_args(\n+                LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+                &[\"-Vgcc_ntox86_64_cxx\"],\n+            ),\n+            ..nto_qnx_base::opts()\n+        },\n+    }\n+}"}, {"sha": "2d3b830946145825c91580157c78e7de62c3fa95", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84e1fbcadfa6299e63e517e722485b47fc99daad/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/84e1fbcadfa6299e63e517e722485b47fc99daad/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=84e1fbcadfa6299e63e517e722485b47fc99daad", "patch": "@@ -33,6 +33,7 @@\n     - [nvptx64-nvidia-cuda](platform-support/nvptx64-nvidia-cuda.md)\n     - [riscv32imac-unknown-xous-elf](platform-support/riscv32imac-unknown-xous-elf.md)\n     - [*-pc-windows-gnullvm](platform-support/pc-windows-gnullvm.md)\n+    - [\\*-nto-qnx-\\*](platform-support/nto-qnx.md)\n     - [*-unknown-openbsd](platform-support/openbsd.md)\n     - [\\*-unknown-uefi](platform-support/unknown-uefi.md)\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)"}, {"sha": "28929acb9b48dd667ef0c937c30013cf16d1b227", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84e1fbcadfa6299e63e517e722485b47fc99daad/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/84e1fbcadfa6299e63e517e722485b47fc99daad/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=84e1fbcadfa6299e63e517e722485b47fc99daad", "patch": "@@ -214,6 +214,7 @@ target | std | host | notes\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n [`aarch64-nintendo-switch-freestanding`](platform-support/aarch64-nintendo-switch-freestanding.md) | * |  | ARM64 Nintendo Switch, Horizon\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n+[`aarch64-unknown-nto-qnx7.1.0`](platform-support/nto-qnx.md) | ? |  | ARM64 QNX Neutrino 7.1 RTOS |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n `aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n@@ -303,6 +304,7 @@ target | std | host | notes\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n [`x86_64-apple-watchos-sim`](platform-support/apple-watchos.md) | \u2713 | | x86 64-bit Apple WatchOS simulator\n+[`x86_64-pc-nto-qnx7.1.0`](platform-support/nto-qnx.md) | ? |  | x86 64-bit QNX Neutrino 7.1 RTOS |\n [`x86_64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `x86_64-pc-windows-msvc` | * |  | 64-bit Windows XP support\n `x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos"}, {"sha": "2d4265334eaca2d1dc47c8fdc149e8ffaefd15a1", "filename": "src/doc/rustc/src/platform-support/nto-qnx.md", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/84e1fbcadfa6299e63e517e722485b47fc99daad/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "raw_url": "https://github.com/rust-lang/rust/raw/84e1fbcadfa6299e63e517e722485b47fc99daad/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnto-qnx.md?ref=84e1fbcadfa6299e63e517e722485b47fc99daad", "patch": "@@ -0,0 +1,117 @@\n+# nto-qnx\n+\n+**Tier: 3**\n+\n+[BlackBerry\u00ae QNX\u00ae][BlackBerry] Neutrino (nto) Real-time operating system.\n+The support has been implemented jointly by [Elektrobit Automotive GmbH][Elektrobit]\n+and [BlackBerry][BlackBerry].\n+\n+[BlackBerry]: https://blackberry.qnx.com\n+[Elektrobit]: https://www.elektrobit.com\n+\n+## Target maintainers\n+\n+- Florian Bartels, `Florian.Bartels@elektrobit.com`, https://github.com/flba-eb\n+\n+## Requirements\n+\n+Currently, only cross-compilation for QNX Neutrino on AArch64 and x86_64 are supported (little endian).\n+Adding other architectures that are supported by QNX Neutrino is possible.\n+\n+The standard library does not yet support QNX Neutrino. Therefore, only `no_std` code can\n+be compiled.\n+\n+`core` and `alloc` (with default allocator) are supported.\n+\n+Applications must link against `libc.so` (see example). This is required because applications\n+always link against the `crt` library and `crt` depends on `libc.so`.\n+\n+The correct version of `qcc` must be available by setting the `$PATH` variable (e.g. by sourcing `qnxsdp-env.sh` of the\n+QNX Neutrino toolchain).\n+\n+### Small example application\n+\n+```rust\n+#![no_std]\n+#![no_main]\n+#![feature(lang_items)]\n+\n+// We must always link against libc, even if no external functions are used\n+// \"extern C\" - Block can be empty but must be present\n+#[link(name = \"c\")]\n+extern \"C\" {\n+    pub fn printf(format: *const core::ffi::c_char, ...) -> core::ffi::c_int;\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    const HELLO: &'static str = \"Hello World, the answer is %d\\n\\0\";\n+    unsafe {\n+        printf(HELLO.as_ptr() as *const _, 42);\n+    }\n+    0\n+}\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_handler]\n+fn panic(_panic: &PanicInfo<'_>) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern \"C\" fn rust_eh_personality() {}\n+```\n+\n+The QNX Neutrino support of Rust has been tested with QNX Neutrino 7.1.\n+\n+There are no further known requirements.\n+\n+## Conditional compilation\n+\n+For conditional compilation, following QNX Neutrino specific attributes are defined:\n+\n+- `target_os` = `\"nto\"`\n+- `target_env` = `\"nto71\"` (for QNX Neutrino 7.1)\n+\n+## Building the target\n+\n+1. Create a `config.toml`\n+\n+Example content:\n+\n+```toml\n+profile = \"compiler\"\n+changelog-seen = 2\n+```\n+\n+2. Compile the Rust toolchain for an `x86_64-unknown-linux-gnu` host (for both `aarch64` and `x86_64` targets)\n+\n+Run the following:\n+\n+```bash\n+env \\\n+    CC_aarch64-unknown-nto-qnx7.1.0=\"qcc\" \\\n+    CFLAGS_aarch64-unknown-nto-qnx7.1.0=\"-Vgcc_ntoaarch64le_cxx\" \\\n+    CXX_aarch64-unknown-nto-qnx7.1.0=\"qcc\" \\\n+    AR_aarch64_unknown_nto_qnx7.1.0=\"ntoaarch64-ar\" \\\n+    CC_x86_64-pc-nto-qnx7.1.0=\"qcc\" \\\n+    CFLAGS_x86_64-pc-nto-qnx7.1.0=\"-Vgcc_ntox86_64_cxx\" \\\n+    CXX_x86_64-pc-nto-qnx7.1.0=\"qcc\" \\\n+    AR_x86_64_pc_nto_qnx7.1.0=\"ntox86_64-ar\" \\\n+        ./x.py build --target aarch64-unknown-nto-qnx7.1.0 --target x86_64-pc-nto-qnx7.1.0 --target x86_64-unknown-linux-gnu rustc library/core library/alloc/\n+```\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for this target, you must either build Rust with the target enabled (see \"Building the target\" above), or build your own copy of  `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Compiled executables can directly be run on QNX Neutrino.\n+\n+## Cross-compilation toolchains and C code\n+\n+Compiling C code requires the same environment variables to be set as compiling the Rust toolchain (see above), to ensure `qcc` is used with proper arguments. To ensure compatibility, do not specify any further arguments that for example change calling conventions or memory layout."}]}