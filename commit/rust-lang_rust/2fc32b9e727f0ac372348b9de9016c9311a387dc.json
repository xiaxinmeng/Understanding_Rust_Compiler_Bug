{"sha": "2fc32b9e727f0ac372348b9de9016c9311a387dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzMyYjllNzI3ZjBhYzM3MjM0OGI5ZGU5MDE2YzkzMTFhMzg3ZGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-10T01:01:41Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-10T20:57:14Z"}, "message": "Locate rustc binary similarly to codegen backend loading\n\nThis ensures that the failure cases for finding the codegen backend and\nfor finding the rustc binary are essentially the same, and since we\nalmost always will load the codegen backend, this is essentially meaning\nthat the rustc change is not a regression.", "tree": {"sha": "a2e723bd0609bb27ce086925c23fe1cce068cfef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e723bd0609bb27ce086925c23fe1cce068cfef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc32b9e727f0ac372348b9de9016c9311a387dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc32b9e727f0ac372348b9de9016c9311a387dc", "html_url": "https://github.com/rust-lang/rust/commit/2fc32b9e727f0ac372348b9de9016c9311a387dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc32b9e727f0ac372348b9de9016c9311a387dc/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b0c9036f0557568cfc939542508e9adf874b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b0c9036f0557568cfc939542508e9adf874b83", "html_url": "https://github.com/rust-lang/rust/commit/87b0c9036f0557568cfc939542508e9adf874b83"}], "stats": {"total": 208, "additions": 129, "deletions": 79}, "files": [{"sha": "f2eaf470658b3e8ed1dc453755729965d43c27eb", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -2137,6 +2137,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"once_cell\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d6a04cb71e910d0034815600180f62a95bf6e67942d7ab52a166a68c7d7e9cd0\"\n+\n [[package]]\n name = \"open\"\n version = \"1.2.1\"\n@@ -3425,6 +3431,7 @@ name = \"rustc_interface\"\n version = \"0.0.0\"\n dependencies = [\n  \"log\",\n+ \"once_cell\",\n  \"rustc\",\n  \"rustc-rayon\",\n  \"rustc_ast_borrowck\","}, {"sha": "b7873fd1d35814b68811472fe5dea76e2faeca82", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -1167,6 +1167,8 @@ impl<'a> Builder<'a> {\n             cargo.arg(\"--frozen\");\n         }\n \n+        cargo.env(\"RUSTC_INSTALL_BINDIR\", &self.config.bindir);\n+\n         self.ci_env.force_coloring_in_ci(&mut cargo);\n \n         cargo"}, {"sha": "52b5cd888df9c20222db09aaf1b7a1920be57b90", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -137,7 +137,7 @@ pub struct Config {\n     pub sysconfdir: Option<PathBuf>,\n     pub datadir: Option<PathBuf>,\n     pub docdir: Option<PathBuf>,\n-    pub bindir: Option<PathBuf>,\n+    pub bindir: PathBuf,\n     pub libdir: Option<PathBuf>,\n     pub mandir: Option<PathBuf>,\n     pub codegen_tests: bool,\n@@ -400,6 +400,7 @@ impl Config {\n         config.incremental = flags.incremental;\n         config.dry_run = flags.dry_run;\n         config.keep_stage = flags.keep_stage;\n+        config.bindir = \"bin\".into(); // default\n         if let Some(value) = flags.deny_warnings {\n             config.deny_warnings = value;\n         }\n@@ -482,7 +483,7 @@ impl Config {\n             config.sysconfdir = install.sysconfdir.clone().map(PathBuf::from);\n             config.datadir = install.datadir.clone().map(PathBuf::from);\n             config.docdir = install.docdir.clone().map(PathBuf::from);\n-            config.bindir = install.bindir.clone().map(PathBuf::from);\n+            set(&mut config.bindir, install.bindir.clone().map(PathBuf::from));\n             config.libdir = install.libdir.clone().map(PathBuf::from);\n             config.mandir = install.mandir.clone().map(PathBuf::from);\n         }"}, {"sha": "384219c38fd0483f821754a19dc9029a5434173b", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -67,7 +67,6 @@ fn install_sh(\n     let sysconfdir_default = PathBuf::from(\"/etc\");\n     let datadir_default = PathBuf::from(\"share\");\n     let docdir_default = datadir_default.join(\"doc/rust\");\n-    let bindir_default = PathBuf::from(\"bin\");\n     let libdir_default = PathBuf::from(\"lib\");\n     let mandir_default = datadir_default.join(\"man\");\n     let prefix = builder.config.prefix.as_ref().map_or(prefix_default, |p| {\n@@ -76,7 +75,7 @@ fn install_sh(\n     let sysconfdir = builder.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n     let datadir = builder.config.datadir.as_ref().unwrap_or(&datadir_default);\n     let docdir = builder.config.docdir.as_ref().unwrap_or(&docdir_default);\n-    let bindir = builder.config.bindir.as_ref().unwrap_or(&bindir_default);\n+    let bindir = &builder.config.bindir;\n     let libdir = builder.config.libdir.as_ref().unwrap_or(&libdir_default);\n     let mandir = builder.config.mandir.as_ref().unwrap_or(&mandir_default);\n "}, {"sha": "f6293107a940eeee46d717d8a9c7d34eee375e20", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -34,3 +34,4 @@ rustc_plugin = { path = \"../librustc_plugin\", package = \"rustc_plugin_impl\" }\n rustc_privacy = { path = \"../librustc_privacy\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n tempfile = \"3.0.5\"\n+once_cell = \"1\""}, {"sha": "79a343e0fee0bfcc2ce20a53e36fc92f822b0ec0", "filename": "src/librustc_interface/build.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustc_interface%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustc_interface%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fbuild.rs?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+    println!(\"cargo:rerun-if-env-changed=RUSTC_INSTALL_BINDIR\");\n+}"}, {"sha": "b81f814de0f4a81b8c301a259ca06a0c4e905234", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 110, "deletions": 74, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -289,20 +289,39 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n     backend\n }\n \n-pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n-    // For now we only allow this function to be called once as it'll dlopen a\n-    // few things, which seems to work best if we only do that once. In\n-    // general this assertion never trips due to the once guard in `get_codegen_backend`,\n-    // but there's a few manual calls to this function in this file we protect\n-    // against.\n-    static LOADED: AtomicBool = AtomicBool::new(false);\n-    assert!(!LOADED.fetch_or(true, Ordering::SeqCst),\n-            \"cannot load the default codegen backend twice\");\n+// This is used for rustdoc, but it uses similar machinery to codegen backend\n+// loading, so we leave the code here. It is potentially useful for other tools\n+// that want to invoke the rustc binary while linking to rustc as well.\n+pub fn rustc_path<'a>() -> Option<&'a Path> {\n+    static RUSTC_PATH: once_cell::sync::OnceCell<Option<PathBuf>> =\n+        once_cell::sync::OnceCell::new();\n \n+    const BIN_PATH: &str = env!(\"RUSTC_INSTALL_BINDIR\");\n+\n+    RUSTC_PATH.get_or_init(|| get_rustc_path_inner(BIN_PATH)).as_ref().map(|v| &**v)\n+}\n+\n+fn get_rustc_path_inner(bin_path: &str) -> Option<PathBuf> {\n+    sysroot_candidates().iter()\n+        .filter_map(|sysroot| {\n+            let candidate = sysroot.join(bin_path).join(if cfg!(target_os = \"windows\") {\n+                \"rustc.exe\"\n+            } else {\n+                \"rustc\"\n+            });\n+            if candidate.exists() {\n+                Some(candidate)\n+            } else {\n+                None\n+            }\n+        })\n+        .next()\n+}\n+\n+fn sysroot_candidates() -> Vec<PathBuf> {\n     let target = session::config::host_triple();\n     let mut sysroot_candidates = vec![filesearch::get_or_default_sysroot()];\n-    let path = current_dll_path()\n-        .and_then(|s| s.canonicalize().ok());\n+    let path = current_dll_path().and_then(|s| s.canonicalize().ok());\n     if let Some(dll) = path {\n         // use `parent` twice to chop off the file name and then also the\n         // directory containing the dll which should be either `lib` or `bin`.\n@@ -327,69 +346,7 @@ pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend\n         }\n     }\n \n-    let sysroot = sysroot_candidates.iter()\n-        .map(|sysroot| {\n-            let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(libdir).with_file_name(\n-                option_env!(\"CFG_CODEGEN_BACKENDS_DIR\").unwrap_or(\"codegen-backends\"))\n-        })\n-        .filter(|f| {\n-            info!(\"codegen backend candidate: {}\", f.display());\n-            f.exists()\n-        })\n-        .next();\n-    let sysroot = sysroot.unwrap_or_else(|| {\n-        let candidates = sysroot_candidates.iter()\n-            .map(|p| p.display().to_string())\n-            .collect::<Vec<_>>()\n-            .join(\"\\n* \");\n-        let err = format!(\"failed to find a `codegen-backends` folder \\\n-                           in the sysroot candidates:\\n* {}\", candidates);\n-        early_error(ErrorOutputType::default(), &err);\n-    });\n-    info!(\"probing {} for a codegen backend\", sysroot.display());\n-\n-    let d = sysroot.read_dir().unwrap_or_else(|e| {\n-        let err = format!(\"failed to load default codegen backend, couldn't \\\n-                           read `{}`: {}\", sysroot.display(), e);\n-        early_error(ErrorOutputType::default(), &err);\n-    });\n-\n-    let mut file: Option<PathBuf> = None;\n-\n-    let expected_name = format!(\"rustc_codegen_llvm-{}\", backend_name);\n-    for entry in d.filter_map(|e| e.ok()) {\n-        let path = entry.path();\n-        let filename = match path.file_name().and_then(|s| s.to_str()) {\n-            Some(s) => s,\n-            None => continue,\n-        };\n-        if !(filename.starts_with(DLL_PREFIX) && filename.ends_with(DLL_SUFFIX)) {\n-            continue\n-        }\n-        let name = &filename[DLL_PREFIX.len() .. filename.len() - DLL_SUFFIX.len()];\n-        if name != expected_name {\n-            continue\n-        }\n-        if let Some(ref prev) = file {\n-            let err = format!(\"duplicate codegen backends found\\n\\\n-                               first:  {}\\n\\\n-                               second: {}\\n\\\n-            \", prev.display(), path.display());\n-            early_error(ErrorOutputType::default(), &err);\n-        }\n-        file = Some(path.clone());\n-    }\n-\n-    match file {\n-        Some(ref s) => return load_backend_from_dylib(s),\n-        None => {\n-            let err = format!(\"failed to load default codegen backend for `{}`, \\\n-                               no appropriate codegen dylib found in `{}`\",\n-                              backend_name, sysroot.display());\n-            early_error(ErrorOutputType::default(), &err);\n-        }\n-    }\n+    return sysroot_candidates;\n \n     #[cfg(unix)]\n     fn current_dll_path() -> Option<PathBuf> {\n@@ -459,6 +416,85 @@ pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend\n     }\n }\n \n+pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n+    // For now we only allow this function to be called once as it'll dlopen a\n+    // few things, which seems to work best if we only do that once. In\n+    // general this assertion never trips due to the once guard in `get_codegen_backend`,\n+    // but there's a few manual calls to this function in this file we protect\n+    // against.\n+    static LOADED: AtomicBool = AtomicBool::new(false);\n+    assert!(!LOADED.fetch_or(true, Ordering::SeqCst),\n+            \"cannot load the default codegen backend twice\");\n+\n+    let target = session::config::host_triple();\n+    let sysroot_candidates = sysroot_candidates();\n+\n+    let sysroot = sysroot_candidates.iter()\n+        .map(|sysroot| {\n+            let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n+            sysroot.join(libdir).with_file_name(\n+                option_env!(\"CFG_CODEGEN_BACKENDS_DIR\").unwrap_or(\"codegen-backends\"))\n+        })\n+        .filter(|f| {\n+            info!(\"codegen backend candidate: {}\", f.display());\n+            f.exists()\n+        })\n+        .next();\n+    let sysroot = sysroot.unwrap_or_else(|| {\n+        let candidates = sysroot_candidates.iter()\n+            .map(|p| p.display().to_string())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n* \");\n+        let err = format!(\"failed to find a `codegen-backends` folder \\\n+                           in the sysroot candidates:\\n* {}\", candidates);\n+        early_error(ErrorOutputType::default(), &err);\n+    });\n+    info!(\"probing {} for a codegen backend\", sysroot.display());\n+\n+    let d = sysroot.read_dir().unwrap_or_else(|e| {\n+        let err = format!(\"failed to load default codegen backend, couldn't \\\n+                           read `{}`: {}\", sysroot.display(), e);\n+        early_error(ErrorOutputType::default(), &err);\n+    });\n+\n+    let mut file: Option<PathBuf> = None;\n+\n+    let expected_name = format!(\"rustc_codegen_llvm-{}\", backend_name);\n+    for entry in d.filter_map(|e| e.ok()) {\n+        let path = entry.path();\n+        let filename = match path.file_name().and_then(|s| s.to_str()) {\n+            Some(s) => s,\n+            None => continue,\n+        };\n+        if !(filename.starts_with(DLL_PREFIX) && filename.ends_with(DLL_SUFFIX)) {\n+            continue\n+        }\n+        let name = &filename[DLL_PREFIX.len() .. filename.len() - DLL_SUFFIX.len()];\n+        if name != expected_name {\n+            continue\n+        }\n+        if let Some(ref prev) = file {\n+            let err = format!(\"duplicate codegen backends found\\n\\\n+                               first:  {}\\n\\\n+                               second: {}\\n\\\n+            \", prev.display(), path.display());\n+            early_error(ErrorOutputType::default(), &err);\n+        }\n+        file = Some(path.clone());\n+    }\n+\n+    match file {\n+        Some(ref s) => return load_backend_from_dylib(s),\n+        None => {\n+            let err = format!(\"failed to load default codegen backend for `{}`, \\\n+                               no appropriate codegen dylib found in `{}`\",\n+                              backend_name, sysroot.display());\n+            early_error(ErrorOutputType::default(), &err);\n+        }\n+    }\n+\n+}\n+\n pub(crate) fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {\n     use std::hash::Hasher;\n "}, {"sha": "30ed725ad20890ca892e07fea1b1fb682f10e992", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc32b9e727f0ac372348b9de9016c9311a387dc/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=2fc32b9e727f0ac372348b9de9016c9311a387dc", "patch": "@@ -248,7 +248,7 @@ fn run_test(\n     };\n     let output_file = outdir.path().join(\"rust_out\");\n \n-    let mut compiler = Command::new(std::env::current_exe().unwrap().with_file_name(\"rustc\"));\n+    let mut compiler = Command::new(rustc_interface::util::rustc_path().expect(\"found rustc\"));\n     compiler.arg(\"--crate-type\").arg(\"bin\");\n     for cfg in &options.cfgs {\n         compiler.arg(\"--cfg\").arg(&cfg);"}]}