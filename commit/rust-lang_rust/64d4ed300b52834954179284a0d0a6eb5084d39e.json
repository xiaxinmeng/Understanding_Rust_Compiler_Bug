{"sha": "64d4ed300b52834954179284a0d0a6eb5084d39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZDRlZDMwMGI1MjgzNDk1NDE3OTI4NGEwZDBhNmViNTA4NGQzOWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-14T10:08:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:21:30Z"}, "message": "move ParamEnv methods from `ty/util` to `ty/mod`", "tree": {"sha": "0a1805bd9df980fa7abc977c9301a86fc88e48af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a1805bd9df980fa7abc977c9301a86fc88e48af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64d4ed300b52834954179284a0d0a6eb5084d39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64d4ed300b52834954179284a0d0a6eb5084d39e", "html_url": "https://github.com/rust-lang/rust/commit/64d4ed300b52834954179284a0d0a6eb5084d39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64d4ed300b52834954179284a0d0a6eb5084d39e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc", "html_url": "https://github.com/rust-lang/rust/commit/6d0f9319dfd4a115f64fd5e00be3749da5eda8bc"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "f81a2b9750aed753cf71d886518860d8a7d87582", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/64d4ed300b52834954179284a0d0a6eb5084d39e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d4ed300b52834954179284a0d0a6eb5084d39e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=64d4ed300b52834954179284a0d0a6eb5084d39e", "patch": "@@ -29,7 +29,7 @@ use mir::Mir;\n use mir::interpret::{GlobalId, Value, PrimVal};\n use mir::GeneratorLayout;\n use session::CrateDisambiguator;\n-use traits;\n+use traits::{self, Reveal};\n use ty;\n use ty::subst::{Subst, Substs};\n use ty::util::{IntTypeExt, Discr};\n@@ -1396,6 +1396,48 @@ pub struct ParamEnv<'tcx> {\n }\n \n impl<'tcx> ParamEnv<'tcx> {\n+    /// Construct a trait environment suitable for contexts where\n+    /// there are no where clauses in scope. Hidden types (like `impl\n+    /// Trait`) are left hidden, so this is suitable for ordinary\n+    /// type-checking.\n+    pub fn empty() -> Self {\n+        Self::new(ty::Slice::empty(), Reveal::UserFacing, ty::UniverseIndex::ROOT)\n+    }\n+\n+    /// Construct a trait environment with no where clauses in scope\n+    /// where the values of all `impl Trait` and other hidden types\n+    /// are revealed. This is suitable for monomorphized, post-typeck\n+    /// environments like trans or doing optimizations.\n+    ///\n+    /// NB. If you want to have predicates in scope, use `ParamEnv::new`,\n+    /// or invoke `param_env.with_reveal_all()`.\n+    pub fn reveal_all() -> Self {\n+        Self::new(ty::Slice::empty(), Reveal::All, ty::UniverseIndex::ROOT)\n+    }\n+\n+    /// Construct a trait environment with the given set of predicates.\n+    pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>,\n+               reveal: Reveal,\n+               universe: ty::UniverseIndex)\n+               -> Self {\n+        ty::ParamEnv { caller_bounds, reveal, universe }\n+    }\n+\n+    /// Returns a new parameter environment with the same clauses, but\n+    /// which \"reveals\" the true results of projections in all cases\n+    /// (even for associated types that are specializable).  This is\n+    /// the desired behavior during trans and certain other special\n+    /// contexts; normally though we want to use `Reveal::UserFacing`,\n+    /// which is the default.\n+    pub fn with_reveal_all(self) -> Self {\n+        ty::ParamEnv { reveal: Reveal::All, ..self }\n+    }\n+\n+    /// Returns this same environment but with no caller bounds.\n+    pub fn without_caller_bounds(self) -> Self {\n+        ty::ParamEnv { caller_bounds: ty::Slice::empty(), ..self }\n+    }\n+\n     /// Creates a suitable environment in which to perform trait\n     /// queries on the given value. This will either be `self` *or*\n     /// the empty environment, depending on whether `value` references"}, {"sha": "a7ee8579fb98925b88fc257246ca686d3ff7b40a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/64d4ed300b52834954179284a0d0a6eb5084d39e/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d4ed300b52834954179284a0d0a6eb5084d39e/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=64d4ed300b52834954179284a0d0a6eb5084d39e", "patch": "@@ -16,7 +16,7 @@ use hir::map::{DefPathData, Node};\n use hir;\n use ich::NodeIdHashingMode;\n use middle::const_val::ConstVal;\n-use traits::{self, Reveal};\n+use traits;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::fold::TypeVisitor;\n use ty::subst::{Subst, UnpackedKind};\n@@ -182,48 +182,6 @@ pub enum Representability {\n }\n \n impl<'tcx> ty::ParamEnv<'tcx> {\n-    /// Construct a trait environment suitable for contexts where\n-    /// there are no where clauses in scope. Hidden types (like `impl\n-    /// Trait`) are left hidden, so this is suitable for ordinary\n-    /// type-checking.\n-    pub fn empty() -> Self {\n-        Self::new(ty::Slice::empty(), Reveal::UserFacing, ty::UniverseIndex::ROOT)\n-    }\n-\n-    /// Construct a trait environment with no where clauses in scope\n-    /// where the values of all `impl Trait` and other hidden types\n-    /// are revealed. This is suitable for monomorphized, post-typeck\n-    /// environments like trans or doing optimizations.\n-    ///\n-    /// NB. If you want to have predicates in scope, use `ParamEnv::new`,\n-    /// or invoke `param_env.with_reveal_all()`.\n-    pub fn reveal_all() -> Self {\n-        Self::new(ty::Slice::empty(), Reveal::All, ty::UniverseIndex::ROOT)\n-    }\n-\n-    /// Construct a trait environment with the given set of predicates.\n-    pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>,\n-               reveal: Reveal,\n-               universe: ty::UniverseIndex)\n-               -> Self {\n-        ty::ParamEnv { caller_bounds, reveal, universe }\n-    }\n-\n-    /// Returns a new parameter environment with the same clauses, but\n-    /// which \"reveals\" the true results of projections in all cases\n-    /// (even for associated types that are specializable).  This is\n-    /// the desired behavior during trans and certain other special\n-    /// contexts; normally though we want to use `Reveal::UserFacing`,\n-    /// which is the default.\n-    pub fn with_reveal_all(self) -> Self {\n-        ty::ParamEnv { reveal: Reveal::All, ..self }\n-    }\n-\n-    /// Returns this same environment but with no caller bounds.\n-    pub fn without_caller_bounds(self) -> Self {\n-        ty::ParamEnv { caller_bounds: ty::Slice::empty(), ..self }\n-    }\n-\n     pub fn can_type_implement_copy<'a>(self,\n                                        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        self_type: Ty<'tcx>, span: Span)"}]}