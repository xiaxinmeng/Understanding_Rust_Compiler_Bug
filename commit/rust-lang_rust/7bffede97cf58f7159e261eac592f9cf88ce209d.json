{"sha": "7bffede97cf58f7159e261eac592f9cf88ce209d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZmZlZGU5N2NmNThmNzE1OWUyNjFlYWM1OTJmOWNmODhjZTIwOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-10T14:08:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-10T14:08:21Z"}, "message": "Auto merge of #38958 - sanxiyn:rollup, r=sanxiyn\n\nRollup of 11 pull requests\n\n- Successful merges: #38606, #38607, #38623, #38664, #38799, #38816, #38836, #38839, #38841, #38849, #38874\n- Failed merges: #38845", "tree": {"sha": "ffa2c2c7fbc25c4c6e6684d28f98331c78e2779d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa2c2c7fbc25c4c6e6684d28f98331c78e2779d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bffede97cf58f7159e261eac592f9cf88ce209d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bffede97cf58f7159e261eac592f9cf88ce209d", "html_url": "https://github.com/rust-lang/rust/commit/7bffede97cf58f7159e261eac592f9cf88ce209d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bffede97cf58f7159e261eac592f9cf88ce209d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c892d8659ae1cf1717b9a8a4bb407d8667f672", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c892d8659ae1cf1717b9a8a4bb407d8667f672", "html_url": "https://github.com/rust-lang/rust/commit/78c892d8659ae1cf1717b9a8a4bb407d8667f672"}, {"sha": "db74f11f78e13fe2bbfb4e284c832d520fa5cf87", "url": "https://api.github.com/repos/rust-lang/rust/commits/db74f11f78e13fe2bbfb4e284c832d520fa5cf87", "html_url": "https://github.com/rust-lang/rust/commit/db74f11f78e13fe2bbfb4e284c832d520fa5cf87"}], "stats": {"total": 395, "additions": 346, "deletions": 49}, "files": [{"sha": "a8a047a29285bc77ced95e8cc8ad042e4977fa70", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -316,7 +316,6 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               \"codegen-units\");\n         suite(\"check-incremental\", \"src/test/incremental\", \"incremental\",\n               \"incremental\");\n-        suite(\"check-ui\", \"src/test/ui\", \"ui\", \"ui\");\n     }\n \n     if build.config.build.contains(\"msvc\") {\n@@ -363,6 +362,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  });\n         };\n \n+        suite(\"check-ui\", \"src/test/ui\", \"ui\", \"ui\");\n         suite(\"check-rpass-full\", \"src/test/run-pass-fulldeps\",\n               \"run-pass\", \"run-pass-fulldeps\");\n         suite(\"check-rfail-full\", \"src/test/run-fail-fulldeps\",\n@@ -1374,7 +1374,6 @@ mod tests {\n \n         assert!(plan.iter().any(|s| s.name.contains(\"-ui\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n-        assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"cfail-full\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"codegen-units\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"debuginfo\")));\n@@ -1407,8 +1406,7 @@ mod tests {\n         assert!(plan.iter().all(|s| s.host == \"A\"));\n         assert!(plan.iter().all(|s| s.target == \"C\"));\n \n-        assert!(plan.iter().any(|s| s.name.contains(\"-ui\")));\n-        assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n+        assert!(!plan.iter().any(|s| s.name.contains(\"-ui\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"cfail\")));\n         assert!(!plan.iter().any(|s| s.name.contains(\"cfail-full\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"codegen-units\")));"}, {"sha": "b699946cecaa2314d94072b1ef644ab3cc2b4f11", "filename": "src/doc/nomicon/coercions.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fdoc%2Fnomicon%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fdoc%2Fnomicon%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fcoercions.md?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -17,6 +17,7 @@ Coercion is allowed between the following types:\n     * `&T` to `*const T`\n     * `&mut T` to `*mut T`\n * Unsizing: `T` to `U` if `T` implements `CoerceUnsized<U>`\n+* Deref coercion: Expression `&x` of type `&T` to `&*x` of type `&U` if `T` derefs to `U` (i.e. `T: Deref<Target=U>`)\n \n `CoerceUnsized<Pointer<U>> for Pointer<T> where T: Unsize<U>` is implemented\n for all pointer types (including smart pointers like Box and Rc). Unsize is\n@@ -27,8 +28,9 @@ only implemented automatically, and enables the following transformations:\n * `Foo<..., T, ...>` => `Foo<..., U, ...>` where:\n     * `T: Unsize<U>`\n     * `Foo` is a struct\n-    * Only the last field of `Foo` has type `T`\n+    * Only the last field of `Foo` has type involving `T`\n     * `T` is not part of the type of any other fields\n+    * `Bar<T>: Unsize<Bar<U>>`, if the last field of `Foo` has type `Bar<T>`\n \n Coercions occur at a *coercion site*. Any location that is explicitly typed\n will cause a coercion to its type. If inference is necessary, the coercion will"}, {"sha": "459dc94f33686531efd9ada73e127cfc776dfebf", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -708,7 +708,7 @@ impl<T: ?Sized> Arc<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Drop for Arc<T> {\n+unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     /// Drops the `Arc`.\n     ///\n     /// This will decrement the strong reference count. If the strong reference\n@@ -736,7 +736,6 @@ impl<T: ?Sized> Drop for Arc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n-    #[unsafe_destructor_blind_to_params]\n     #[inline]\n     fn drop(&mut self) {\n         // Because `fetch_sub` is already atomic, we do not need to synchronize"}, {"sha": "c67106cf57aaf0ea2ab83f573d45c324d5f540bd", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -79,9 +79,10 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n #![cfg_attr(not(test), feature(exact_size_is_empty))]\n #![feature(fundamental)]\n+#![feature(generic_param_attrs)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n #![feature(optin_builtin_traits)]"}, {"sha": "357a2724e0020cff95807f63246af3f52ecd4691", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -539,8 +539,7 @@ impl<T> RawVec<T> {\n     }\n }\n \n-impl<T> Drop for RawVec<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for RawVec<T> {\n     /// Frees the memory owned by the RawVec *without* trying to Drop its contents.\n     fn drop(&mut self) {\n         let elem_size = mem::size_of::<T>();"}, {"sha": "010e378ef2f48238ea3880be935b6e2f1f25e737", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -644,7 +644,7 @@ impl<T: ?Sized> Deref for Rc<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Drop for Rc<T> {\n+unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// Drops the `Rc`.\n     ///\n     /// This will decrement the strong reference count. If the strong reference\n@@ -672,7 +672,6 @@ impl<T: ?Sized> Drop for Rc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n-    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         unsafe {\n             let ptr = *self.ptr;"}, {"sha": "a3cfc15895eb73cfb4dae3108482efd378eed447", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -30,10 +30,10 @@\n \n #![feature(alloc)]\n #![feature(core_intrinsics)]\n+#![feature(dropck_eyepatch)]\n #![feature(heap_api)]\n-#![feature(heap_api)]\n+#![feature(generic_param_attrs)]\n #![feature(staged_api)]\n-#![feature(dropck_parametricity)]\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]\n@@ -258,8 +258,7 @@ impl<T> TypedArena<T> {\n     }\n }\n \n-impl<T> Drop for TypedArena<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for TypedArena<T> {\n     fn drop(&mut self) {\n         unsafe {\n             // Determine how much was filled."}, {"sha": "98c71967f3c394ee0d9642bca82f1bd2b24337f7", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -137,8 +137,7 @@ pub struct BTreeMap<K, V> {\n }\n \n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n-impl<K, V> Drop for BTreeMap<K, V> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {\n     fn drop(&mut self) {\n         unsafe {\n             for _ in ptr::read(self).into_iter() {"}, {"sha": "561d8860dc8803f3d5d0e141d19f7c8d12db6edf", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -35,10 +35,11 @@\n #![feature(box_syntax)]\n #![cfg_attr(not(test), feature(char_escape_debug))]\n #![feature(core_intrinsics)]\n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n #![feature(fused)]\n+#![feature(generic_param_attrs)]\n #![feature(heap_api)]\n #![feature(inclusive_range)]\n #![feature(lang_items)]"}, {"sha": "7f913d4afe476aeea2c8611f3e87062f9bbb76fd", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -726,8 +726,7 @@ impl<T> LinkedList<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Drop for LinkedList<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for LinkedList<T> {\n     fn drop(&mut self) {\n         while let Some(_) = self.pop_front_node() {}\n     }"}, {"sha": "27cf0268c99bbb30a33d38ba013358261e3c3521", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -370,7 +370,8 @@ impl<T> Vec<T> {\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n-    /// internal datastructures.\n+    /// internal datastructures. For example it is **not** safe\n+    /// to build a `Vec<u8>` from a pointer to a C `char` array and a `size_t`.\n     ///\n     /// The ownership of `ptr` is effectively transferred to the\n     /// `Vec<T>` which may then deallocate, reallocate or change the\n@@ -1786,8 +1787,7 @@ impl<T: Ord> Ord for Vec<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Drop for Vec<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for Vec<T> {\n     fn drop(&mut self) {\n         unsafe {\n             // use drop for [T]\n@@ -2056,8 +2056,7 @@ impl<T: Clone> Clone for IntoIter<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Drop for IntoIter<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n     fn drop(&mut self) {\n         // destroy the remaining elements\n         for _x in self.by_ref() {}"}, {"sha": "76e44c815793feefa5a6c82be214b68273c5b6e4", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -69,8 +69,7 @@ impl<T: Clone> Clone for VecDeque<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Drop for VecDeque<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T> Drop for VecDeque<T> {\n     fn drop(&mut self) {\n         let (front, back) = self.as_mut_slices();\n         unsafe {"}, {"sha": "6a766fc02df3e8b29f5442f59b74259528cca7c0", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -192,14 +192,12 @@ fn main() {\n \n     if !target.contains(\"ios\") {\n         sources.extend(&[\"absvti2.c\",\n-                         \"addtf3.c\",\n                          \"addvti3.c\",\n                          \"ashlti3.c\",\n                          \"ashrti3.c\",\n                          \"clzti2.c\",\n                          \"cmpti2.c\",\n                          \"ctzti2.c\",\n-                         \"divtf3.c\",\n                          \"divti3.c\",\n                          \"ffsti2.c\",\n                          \"fixdfti.c\",\n@@ -216,17 +214,13 @@ fn main() {\n                          \"floatuntixf.c\",\n                          \"lshrti3.c\",\n                          \"modti3.c\",\n-                         \"multf3.c\",\n                          \"multi3.c\",\n                          \"mulvti3.c\",\n                          \"negti2.c\",\n                          \"negvti2.c\",\n                          \"parityti2.c\",\n                          \"popcountti2.c\",\n-                         \"powitf2.c\",\n-                         \"subtf3.c\",\n                          \"subvti3.c\",\n-                         \"trampoline_setup.c\",\n                          \"ucmpti2.c\",\n                          \"udivmodti4.c\",\n                          \"udivti3.c\","}, {"sha": "798f1e6cbeb844b842b798568bf585261cc75d22", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -100,13 +100,26 @@ pub trait Sized {\n ///\n /// All implementations of `Unsize` are provided automatically by the compiler.\n ///\n+/// `Unsize` is implemented for:\n+///\n+/// - `[T; N]` is `Unsize<[T]>`\n+/// - `T` is `Unsize<Trait>` when `T: Trait`\n+/// - `Foo<..., T, ...>` is `Unsize<Foo<..., U, ...>>` if:\n+///   - `T: Unsize<U>`\n+///   - Foo is a struct\n+///   - Only the last field of `Foo` has a type involving `T`\n+///   - `T` is not part of the type of any other fields\n+///   - `Bar<T>: Unsize<Bar<U>>`, if the last field of `Foo` has type `Bar<T>`\n+///\n /// `Unsize` is used along with [`ops::CoerceUnsized`][coerceunsized] to allow\n /// \"user-defined\" containers such as [`rc::Rc`][rc] to contain dynamically-sized\n-/// types. See the [DST coercion RFC][RFC982] for more details.\n+/// types. See the [DST coercion RFC][RFC982] and [the nomicon entry on coercion][nomicon-coerce]\n+/// for more details.\n ///\n /// [coerceunsized]: ../ops/trait.CoerceUnsized.html\n /// [rc]: ../../std/rc/struct.Rc.html\n /// [RFC982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n+\n #[unstable(feature = \"unsize\", issue = \"27732\")]\n #[lang=\"unsize\"]\n pub trait Unsize<T: ?Sized> {"}, {"sha": "94df72f28fa9ce7b058fe824bc81fb850e88cfe7", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -2710,6 +2710,35 @@ mod impls {\n \n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n+///\n+/// See the [DST coercion RfC][dst-coerce] and [the nomicon entry on coercion][nomicon-coerce]\n+/// for more details.\n+///\n+/// For builtin pointer types, pointers to `T` will coerce to pointers to `U` if `T: Unsize<U>`\n+/// by converting from a thin pointer to a fat pointer.\n+///\n+/// For custom types, the coercion here works by coercing `Foo<T>` to `Foo<U>`\n+/// provided an impl of `CoerceUnsized<Foo<U>> for Foo<T>` exists.\n+/// Such an impl can only be written if `Foo<T>` has only a single non-phantomdata\n+/// field involving `T`. If the type of that field is `Bar<T>`, an implementation\n+/// of `CoerceUnsized<Bar<U>> for Bar<T>` must exist. The coercion will work by\n+/// by coercing the `Bar<T>` field into `Bar<U>` and filling in the rest of the fields\n+/// from `Foo<T>` to create a `Foo<U>`. This will effectively drill down to a pointer\n+/// field and coerce that.\n+///\n+/// Generally, for smart pointers you will implement\n+/// `CoerceUnsized<Ptr<U>> for Ptr<T> where T: Unsize<U>, U: ?Sized`, with an\n+/// optional `?Sized` bound on `T` itself. For wrapper types that directly embed `T`\n+/// like `Cell<T>` and `RefCell<T>`, you\n+/// can directly implement `CoerceUnsized<Wrap<U>> for Wrap<T> where T: CoerceUnsized<U>`.\n+/// This will let coercions of types like `Cell<Box<T>>` work.\n+///\n+/// [`Unsize`][unsize] is used to mark types which can be coerced to DSTs if behind\n+/// pointers. It is implemented automatically by the compiler.\n+///\n+/// [dst-coerce]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n+/// [unsize]: ../marker/trait.Unsize.html\n+/// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n #[lang=\"coerce_unsized\"]\n pub trait CoerceUnsized<T> {"}, {"sha": "104c851e057e6fa524aa2d18d9b592cee8c5f88f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -1175,7 +1175,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                              assumed.\", \"[KIND=]NAME\"),\n         opt::multi_s(\"\", \"crate-type\", \"Comma separated list of types of crates\n                                     for the compiler to emit\",\n-                   \"[bin|lib|rlib|dylib|cdylib|staticlib]\"),\n+                   \"[bin|lib|rlib|dylib|cdylib|staticlib|proc-macro]\"),\n         opt::opt_s(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n                \"NAME\"),\n         opt::multi_s(\"\", \"emit\", \"Comma separated list of types of output for \\"}, {"sha": "1ab62130cd3ddecedce8d39dbc58c9ebe8a3fcef", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -1061,8 +1061,7 @@ impl<K: Clone, V: Clone> Clone for RawTable<K, V> {\n     }\n }\n \n-impl<K, V> Drop for RawTable<K, V> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n     fn drop(&mut self) {\n         if self.capacity == 0 {\n             return;"}, {"sha": "175fe30db661ce149445780742a63725765d757f", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -259,6 +259,15 @@ impl OsStr {\n     /// Yields a `&str` slice if the `OsStr` is valid Unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -267,6 +276,20 @@ impl OsStr {\n     /// Converts an `OsStr` to a `Cow<str>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Calling `to_string_lossy` on an `OsStr` with valid unicode:\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// assert_eq!(os_str.to_string_lossy(), \"foo\");\n+    /// ```\n+    ///\n+    /// Had `os_str` contained invalid unicode, the `to_string_lossy` call might\n+    /// have returned `\"fo\ufffd\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()"}, {"sha": "521b938acfb7ec82c5d36e12b9fb644856218dc4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -250,13 +250,14 @@\n #![feature(const_fn)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n-#![feature(dropck_parametricity)]\n+#![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]\n #![feature(fn_traits)]\n #![feature(fnbox)]\n #![feature(fused)]\n+#![feature(generic_param_attrs)]\n #![feature(hashmap_hasher)]\n #![feature(heap_api)]\n #![feature(inclusive_range)]"}, {"sha": "e203789ce81d90578805574c7cbf2d7deb6288e2", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -52,7 +52,7 @@ pub struct TcpStream(net_imp::TcpStream);\n ///     // ...\n /// }\n ///\n-/// // accept connections and process them, spawning a new thread for each one\n+/// // accept connections and process them serially\n /// for stream in listener.incoming() {\n ///     match stream {\n ///         Ok(stream) => {"}, {"sha": "3f9bf70adde22557cadf3f7fb5e16d6d51479d86", "filename": "src/libstd/path.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -1428,8 +1428,8 @@ impl Path {\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let path_str = Path::new(\"foo.txt\").to_str();\n-    /// assert_eq!(path_str, Some(\"foo.txt\"));\n+    /// let path = Path::new(\"foo.txt\");\n+    /// assert_eq!(path.to_str(), Some(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n@@ -1444,12 +1444,17 @@ impl Path {\n     ///\n     /// # Examples\n     ///\n+    /// Calling `to_string_lossy` on a `Path` with valid unicode:\n+    ///\n     /// ```\n     /// use std::path::Path;\n     ///\n-    /// let path_str = Path::new(\"foo.txt\").to_string_lossy();\n-    /// assert_eq!(path_str, \"foo.txt\");\n+    /// let path = Path::new(\"foo.txt\");\n+    /// assert_eq!(path.to_string_lossy(), \"foo.txt\");\n     /// ```\n+    ///\n+    /// Had `os_str` contained invalid unicode, the `to_string_lossy` call might\n+    /// have returned `\"fo\ufffd.txt\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()"}, {"sha": "ced0288766bb1e6408d49e6385bda0a04585e203", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -502,7 +502,7 @@ mod prim_str { }\n /// [`Hash`]: hash/trait.Hash.html\n ///\n /// Due to a temporary restriction in Rust's type system, these traits are only\n-/// implemented on tuples of arity 32 or less. In the future, this may change.\n+/// implemented on tuples of arity 12 or less. In the future, this may change.\n ///\n /// # Examples\n ///"}, {"sha": "f8426e3b5782fab3fa40fa4e1642991db0828716", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -280,8 +280,7 @@ impl<T: ?Sized> Mutex<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Drop for Mutex<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n         // this mutex (it's up to the user to arrange for a mutex to get"}, {"sha": "adbb98e4b1f4f664a99ab278c06a517639e091de", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -310,8 +310,7 @@ impl<T: ?Sized> RwLock<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized> Drop for RwLock<T> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {\n     fn drop(&mut self) {\n         // IMPORTANT: This code needs to be kept in sync with `RwLock::into_inner`.\n         unsafe { self.inner.destroy() }"}, {"sha": "15094492248e647480c00bb5df1853507f27a5f0", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -402,3 +402,155 @@ impl ChangeArgumentTypeTrait for Foo {\n     fn method_name(&self, _x: char) { }\n }\n \n+\n+\n+struct Bar<T>(T);\n+\n+// Add Type Parameter To Impl --------------------------------------------------\n+trait AddTypeParameterToImpl<T> {\n+    fn id(t: T) -> T;\n+}\n+\n+#[cfg(cfail1)]\n+impl AddTypeParameterToImpl<u32> for Bar<u32> {\n+    fn id(t: u32) -> u32 { t }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl<T> AddTypeParameterToImpl<T> for Bar<T> {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn id(t: T) -> T { t }\n+}\n+\n+\n+\n+// Change Self Type of Impl ----------------------------------------------------\n+trait ChangeSelfTypeOfImpl {\n+    fn id(self) -> Self;\n+}\n+\n+#[cfg(cfail1)]\n+impl ChangeSelfTypeOfImpl for u32 {\n+    fn id(self) -> Self { self }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl ChangeSelfTypeOfImpl for u64 {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn id(self) -> Self { self }\n+}\n+\n+\n+\n+// Add Lifetime Bound to Impl --------------------------------------------------\n+trait AddLifetimeBoundToImplParameter {\n+    fn id(self) -> Self;\n+}\n+\n+#[cfg(cfail1)]\n+impl<T> AddLifetimeBoundToImplParameter for T {\n+    fn id(self) -> Self { self }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl<T: 'static> AddLifetimeBoundToImplParameter for T {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn id(self) -> Self { self }\n+}\n+\n+\n+\n+// Add Trait Bound to Impl Parameter -------------------------------------------\n+trait AddTraitBoundToImplParameter {\n+    fn id(self) -> Self;\n+}\n+\n+#[cfg(cfail1)]\n+impl<T> AddTraitBoundToImplParameter for T {\n+    fn id(self) -> Self { self }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl<T: Clone> AddTraitBoundToImplParameter for T {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn id(self) -> Self { self }\n+}\n+\n+\n+\n+// Add #[no_mangle] to Method --------------------------------------------------\n+trait AddNoMangleToMethod {\n+    fn add_no_mangle_to_method(&self) { }\n+}\n+\n+#[cfg(cfail1)]\n+impl AddNoMangleToMethod for Foo {\n+    fn add_no_mangle_to_method(&self) { }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl AddNoMangleToMethod for Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    #[no_mangle]\n+    fn add_no_mangle_to_method(&self) { }\n+}\n+\n+\n+// Make Method #[inline] -------------------------------------------------------\n+trait MakeMethodInline {\n+    fn make_method_inline(&self) -> u8 { 0 }\n+}\n+\n+#[cfg(cfail1)]\n+impl MakeMethodInline for Foo {\n+    fn make_method_inline(&self) -> u8 { 0 }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+impl MakeMethodInline for Foo {\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    #[inline]\n+    fn make_method_inline(&self) -> u8 { 0 }\n+}"}, {"sha": "c5ba2aa9413e7f8d0adbf5f054119bd6d3960012", "filename": "src/test/ui/custom-derive/auxiliary/plugin.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro, proc_macro_lib)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Foo)]\n+pub fn derive_foo(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(Bar)]\n+pub fn derive_bar(input: TokenStream) -> TokenStream {\n+    panic!(\"lolnope\");\n+}"}, {"sha": "22d603563de1774667a42e5c8def0c29e7b4541f", "filename": "src/test/ui/custom-derive/issue-36935.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:plugin.rs\n+\n+#![feature(proc_macro)]\n+\n+#[macro_use] extern crate plugin;\n+\n+#[derive(Foo, Bar)]\n+struct Baz {\n+    a: i32,\n+    b: i32,\n+}\n+\n+fn main() {}"}, {"sha": "213366a307d40decb9165d209add3f94c337a99e", "filename": "src/test/ui/custom-derive/issue-36935.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -0,0 +1,8 @@\n+error: custom derive attribute panicked\n+  --> $DIR/issue-36935.rs:17:15\n+   |\n+17 | #[derive(Foo, Bar)]\n+   |               ^^^\n+   |\n+   = help: message: lolnope\n+"}, {"sha": "81fcb007eb491f936be27628d3062cdca4b28668", "filename": "src/test/ui/span/issue-27522.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Point at correct span for self type\n+\n+struct SomeType {}\n+\n+trait Foo {\n+    fn handler(self: &SomeType);\n+}\n+\n+fn main() {}"}, {"sha": "71130f4947a683eca2ff60a22356eac147e829c7", "filename": "src/test/ui/span/issue-27522.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bffede97cf58f7159e261eac592f9cf88ce209d/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=7bffede97cf58f7159e261eac592f9cf88ce209d", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched method receiver\n+  --> $DIR/issue-27522.rs:16:22\n+   |\n+16 |     fn handler(self: &SomeType);\n+   |                      ^^^^^^^^^ expected Self, found struct `SomeType`\n+   |\n+   = note: expected type `&Self`\n+   = note:    found type `&SomeType`\n+\n+error: aborting due to previous error\n+"}]}