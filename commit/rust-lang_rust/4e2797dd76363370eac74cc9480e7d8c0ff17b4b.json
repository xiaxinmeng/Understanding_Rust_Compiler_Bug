{"sha": "4e2797dd76363370eac74cc9480e7d8c0ff17b4b", "node_id": "C_kwDOAAsO6NoAKDRlMjc5N2RkNzYzNjMzNzBlYWM3NGNjOTQ4MGU3ZDhjMGZmMTdiNGI", "commit": {"author": {"name": "John Millikin", "email": "john@john-millikin.com", "date": "2022-09-27T02:40:39Z"}, "committer": {"name": "John Millikin", "email": "john@john-millikin.com", "date": "2023-04-20T05:27:29Z"}, "message": "Implement `Neg` for signed non-zero integers.\n\nNegating a non-zero integer currently requires unpacking to a\nprimitive and re-wrapping. Since negation of non-zero signed\nintegers always produces a non-zero result, it is safe to\nimplement `Neg` for `NonZeroI{N}`.\n\nThe new `impl` is marked as stable because trait implementations\nfor two stable types can't be marked unstable.", "tree": {"sha": "509fe2f357fc7270af5aa2a9cd9f65a6c2410c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/509fe2f357fc7270af5aa2a9cd9f65a6c2410c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e2797dd76363370eac74cc9480e7d8c0ff17b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2797dd76363370eac74cc9480e7d8c0ff17b4b", "html_url": "https://github.com/rust-lang/rust/commit/4e2797dd76363370eac74cc9480e7d8c0ff17b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e2797dd76363370eac74cc9480e7d8c0ff17b4b/comments", "author": {"login": "jmillikin", "id": 646128, "node_id": "MDQ6VXNlcjY0NjEyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/646128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmillikin", "html_url": "https://github.com/jmillikin", "followers_url": "https://api.github.com/users/jmillikin/followers", "following_url": "https://api.github.com/users/jmillikin/following{/other_user}", "gists_url": "https://api.github.com/users/jmillikin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmillikin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmillikin/subscriptions", "organizations_url": "https://api.github.com/users/jmillikin/orgs", "repos_url": "https://api.github.com/users/jmillikin/repos", "events_url": "https://api.github.com/users/jmillikin/events{/privacy}", "received_events_url": "https://api.github.com/users/jmillikin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jmillikin", "id": 646128, "node_id": "MDQ6VXNlcjY0NjEyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/646128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmillikin", "html_url": "https://github.com/jmillikin", "followers_url": "https://api.github.com/users/jmillikin/followers", "following_url": "https://api.github.com/users/jmillikin/following{/other_user}", "gists_url": "https://api.github.com/users/jmillikin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmillikin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmillikin/subscriptions", "organizations_url": "https://api.github.com/users/jmillikin/orgs", "repos_url": "https://api.github.com/users/jmillikin/repos", "events_url": "https://api.github.com/users/jmillikin/events{/privacy}", "received_events_url": "https://api.github.com/users/jmillikin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc730521efad6acf9b31fcc99c8a26789fa9a654", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc730521efad6acf9b31fcc99c8a26789fa9a654", "html_url": "https://github.com/rust-lang/rust/commit/dc730521efad6acf9b31fcc99c8a26789fa9a654"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "fc9b07d29e26695e143aefb1e17aad5ad1891379", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e2797dd76363370eac74cc9480e7d8c0ff17b4b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2797dd76363370eac74cc9480e7d8c0ff17b4b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=4e2797dd76363370eac74cc9480e7d8c0ff17b4b", "patch": "@@ -1,7 +1,7 @@\n //! Definitions of integer that is known not to equal zero.\n \n use crate::fmt;\n-use crate::ops::{BitOr, BitOrAssign, Div, Rem};\n+use crate::ops::{BitOr, BitOrAssign, Div, Neg, Rem};\n use crate::str::FromStr;\n \n use super::from_str_radix;\n@@ -664,8 +664,7 @@ macro_rules! nonzero_signed_operations {\n                 /// assert_eq!(pos, pos.wrapping_abs());\n                 /// assert_eq!(pos, neg.wrapping_abs());\n                 /// assert_eq!(min, min.wrapping_abs());\n-                /// # // FIXME: add once Neg is implemented?\n-                /// # // assert_eq!(max, (-max).wrapping_abs());\n+                /// assert_eq!(max, (-max).wrapping_abs());\n                 /// # Some(())\n                 /// # }\n                 /// ```\n@@ -868,6 +867,20 @@ macro_rules! nonzero_signed_operations {\n                     unsafe { $Ty::new_unchecked(result) }\n                 }\n             }\n+\n+            #[stable(feature = \"signed_nonzero_neg\", since = \"CURRENT_RUSTC_VERSION\")]\n+            impl Neg for $Ty {\n+                type Output = $Ty;\n+\n+                #[inline]\n+                fn neg(self) -> $Ty {\n+                    // SAFETY: negation of nonzero cannot yield zero values.\n+                    unsafe { $Ty::new_unchecked(self.get().neg()) }\n+                }\n+            }\n+\n+            forward_ref_unop! { impl Neg, neg for $Ty,\n+                #[stable(feature = \"signed_nonzero_neg\", since = \"CURRENT_RUSTC_VERSION\")] }\n         )+\n     }\n }"}, {"sha": "007f8442533081cd615a28362b02c42092a8212e", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e2797dd76363370eac74cc9480e7d8c0ff17b4b/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2797dd76363370eac74cc9480e7d8c0ff17b4b/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=4e2797dd76363370eac74cc9480e7d8c0ff17b4b", "patch": "@@ -336,3 +336,21 @@ fn test_nonzero_uint_rem() {\n     let x: u32 = 42u32 % nz;\n     assert_eq!(x, 2u32);\n }\n+\n+#[test]\n+fn test_signed_nonzero_neg() {\n+    assert_eq!((-NonZeroI8::new(1).unwrap()).get(), -1);\n+    assert_eq!((-NonZeroI8::new(-1).unwrap()).get(), 1);\n+\n+    assert_eq!((-NonZeroI16::new(1).unwrap()).get(), -1);\n+    assert_eq!((-NonZeroI16::new(-1).unwrap()).get(), 1);\n+\n+    assert_eq!((-NonZeroI32::new(1).unwrap()).get(), -1);\n+    assert_eq!((-NonZeroI32::new(-1).unwrap()).get(), 1);\n+\n+    assert_eq!((-NonZeroI64::new(1).unwrap()).get(), -1);\n+    assert_eq!((-NonZeroI64::new(-1).unwrap()).get(), 1);\n+\n+    assert_eq!((-NonZeroI128::new(1).unwrap()).get(), -1);\n+    assert_eq!((-NonZeroI128::new(-1).unwrap()).get(), 1);\n+}"}, {"sha": "565b7e86fc4b954c875905b45b9bf84a3c912a71", "filename": "tests/ui/numbers-arithmetic/overflowing-neg-nonzero.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e2797dd76363370eac74cc9480e7d8c0ff17b4b/tests%2Fui%2Fnumbers-arithmetic%2Foverflowing-neg-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2797dd76363370eac74cc9480e7d8c0ff17b4b/tests%2Fui%2Fnumbers-arithmetic%2Foverflowing-neg-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbers-arithmetic%2Foverflowing-neg-nonzero.rs?ref=4e2797dd76363370eac74cc9480e7d8c0ff17b4b", "patch": "@@ -0,0 +1,12 @@\n+// run-fail\n+// error-pattern:thread 'main' panicked at 'attempt to negate with overflow'\n+// ignore-emscripten no processes\n+// compile-flags: -C debug-assertions\n+\n+#![allow(arithmetic_overflow)]\n+\n+use std::num::NonZeroI8;\n+\n+fn main() {\n+    let _x = -NonZeroI8::new(i8::MIN).unwrap();\n+}"}]}