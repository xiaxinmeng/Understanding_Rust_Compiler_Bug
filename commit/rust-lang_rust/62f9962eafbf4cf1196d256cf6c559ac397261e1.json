{"sha": "62f9962eafbf4cf1196d256cf6c559ac397261e1", "node_id": "C_kwDOAAsO6NoAKDYyZjk5NjJlYWZiZjRjZjExOTZkMjU2Y2Y2YzU1OWFjMzk3MjYxZTE", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-11-03T18:50:52Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-12-28T11:53:48Z"}, "message": "Made ty_or_sig and trait_path use their actual types instead of String", "tree": {"sha": "5efc0e882da74c8fc00a75daf0ac0649809edb48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5efc0e882da74c8fc00a75daf0ac0649809edb48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62f9962eafbf4cf1196d256cf6c559ac397261e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmOsLkwACgkQspeR1Nh4\n40W8XA/9Em54DpPgc7hGc/QB4tXr2VWWEYRztTN4bba1OgTtx0OcB52iqSxNQdUD\nNT26rmN2NFrpd8HeSlwhKLnXUwLryRYCm1joAeV4WSPiLRh869SMNb5XZCZ5vmua\nK5Fi7G2b3Upmv8ak3tI6q5LiihtV7LV/sVfwNoExgAD90/bMykIJNKZW1jqLbFf6\nVzlSTrM/1dUR5A2zl98YDbqY1B0CzuMsn6oJPmwzGd2IXSNYFRz+J9ZgeUloCPMH\nKFKErVX1ujczKljyFyRSqGcEN2HHR5s7JAJFrhnSvNLTnlBWmWgrN49o9Y5hLj50\nYFB8fy1Z8nTtUHoyDPaIJpA1sInN3K3OBUoim8/yVVGMsdVT5fd117eMh5PDUVOq\n6dHdlK4A2jD9cfcTx/AgIcP/keSgF0EfSVmbqA9KBDawC6gyuCC92bYY4yoc3vlM\n81wyrU3Lb+UCW+3YzPQEap4UQUjwqNep+2TK+xEMYl2ihoEgtnwZwmdlekZdqr9K\n1cOExWmcRgZD/zdV57H+obk40mH9v3hsB/21jzG8mMKrLXE5YsiHY6SOfIR2Lhvg\nS32MWg0FxyHBHZsO0cu5E0Hp4F7SxDu0QlC5v5QmUtV8C+SYuqlCm1q6LanMemXl\noctxAr8GHM3x29U1TGWb+CCXEy5kaqJeDgTQa9De5+AAziMZ0Xc=\n=Xj13\n-----END PGP SIGNATURE-----", "payload": "tree 5efc0e882da74c8fc00a75daf0ac0649809edb48\nparent 7ecd064bbe32419eb473b28cdc8e41dd34f20aa9\nauthor Nikita Tomashevich <quant3234@gmail.com> 1667501452 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1672228428 +0300\n\nMade ty_or_sig and trait_path use their actual types instead of String\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62f9962eafbf4cf1196d256cf6c559ac397261e1", "html_url": "https://github.com/rust-lang/rust/commit/62f9962eafbf4cf1196d256cf6c559ac397261e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62f9962eafbf4cf1196d256cf6c559ac397261e1/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ecd064bbe32419eb473b28cdc8e41dd34f20aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ecd064bbe32419eb473b28cdc8e41dd34f20aa9", "html_url": "https://github.com/rust-lang/rust/commit/7ecd064bbe32419eb473b28cdc8e41dd34f20aa9"}], "stats": {"total": 195, "additions": 118, "deletions": 77}, "files": [{"sha": "388ddd09905ac1d4e270ab5b3b1fe76d983f9f74", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 69, "deletions": 32, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/62f9962eafbf4cf1196d256cf6c559ac397261e1/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f9962eafbf4cf1196d256cf6c559ac397261e1/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=62f9962eafbf4cf1196d256cf6c559ac397261e1", "patch": "@@ -1,16 +1,18 @@\n use hir::GenericParamKind;\n use rustc_errors::{\n     fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticMessage, DiagnosticStyledString,\n-    MultiSpan, SubdiagnosticMessage,\n+    IntoDiagnosticArg, MultiSpan, SubdiagnosticMessage,\n };\n use rustc_hir as hir;\n use rustc_hir::FnRetTy;\n use rustc_macros::{Diagnostic, Subdiagnostic};\n-use rustc_middle::ty::{Region, Ty, TyCtxt};\n+use rustc_middle::ty::print::TraitRefPrintOnlyTraitPath;\n+use rustc_middle::ty::{Binder, FnSig, Region, Ty, TyCtxt};\n use rustc_span::symbol::kw;\n use rustc_span::Symbol;\n use rustc_span::{symbol::Ident, BytePos, Span};\n \n+use crate::infer::error_reporting::nice_region_error::placeholder_error::Highlighted;\n use crate::infer::error_reporting::{\n     need_type_info::{GeneratorKindAsDiagArg, UnderspecifiedArgKind},\n     ObligationCauseAsDiagArg,\n@@ -557,91 +559,126 @@ pub enum ExplicitLifetimeRequired<'a> {\n     },\n }\n \n+pub enum TyOrSig<'tcx> {\n+    Ty(Highlighted<'tcx, Ty<'tcx>>),\n+    ClosureSig(Highlighted<'tcx, Binder<'tcx, FnSig<'tcx>>>),\n+}\n+\n+impl IntoDiagnosticArg for TyOrSig<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        match self {\n+            TyOrSig::Ty(ty) => ty.into_diagnostic_arg(),\n+            TyOrSig::ClosureSig(sig) => sig.into_diagnostic_arg(),\n+        }\n+    }\n+}\n+\n #[derive(Subdiagnostic)]\n-pub enum ActualImplExplNotes {\n+pub enum ActualImplExplNotes<'tcx> {\n     #[note(infer_actual_impl_expl_expected_signature_two)]\n     ExpectedSignatureTwo {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_signature_any)]\n     ExpectedSignatureAny {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_signature_some)]\n     ExpectedSignatureSome {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_signature_nothing)]\n-    ExpectedSignatureNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n+    ExpectedSignatureNothing {\n+        leading_ellipsis: bool,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n+    },\n     #[note(infer_actual_impl_expl_expected_passive_two)]\n     ExpectedPassiveTwo {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_passive_any)]\n     ExpectedPassiveAny {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_passive_some)]\n     ExpectedPassiveSome {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_passive_nothing)]\n-    ExpectedPassiveNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n+    ExpectedPassiveNothing {\n+        leading_ellipsis: bool,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n+    },\n     #[note(infer_actual_impl_expl_expected_other_two)]\n     ExpectedOtherTwo {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_other_any)]\n     ExpectedOtherAny {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_other_some)]\n     ExpectedOtherSome {\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n     },\n     #[note(infer_actual_impl_expl_expected_other_nothing)]\n-    ExpectedOtherNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n+    ExpectedOtherNothing {\n+        leading_ellipsis: bool,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n+    },\n     #[note(infer_actual_impl_expl_but_actually_implements_trait)]\n-    ButActuallyImplementsTrait { trait_path: String, has_lifetime: bool, lifetime: usize },\n+    ButActuallyImplementsTrait {\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n+        has_lifetime: bool,\n+        lifetime: usize,\n+    },\n     #[note(infer_actual_impl_expl_but_actually_implemented_for_ty)]\n     ButActuallyImplementedForTy {\n-        trait_path: String,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         has_lifetime: bool,\n         lifetime: usize,\n         ty: String,\n     },\n     #[note(infer_actual_impl_expl_but_actually_ty_implements)]\n-    ButActuallyTyImplements { trait_path: String, has_lifetime: bool, lifetime: usize, ty: String },\n+    ButActuallyTyImplements {\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n+        has_lifetime: bool,\n+        lifetime: usize,\n+        ty: String,\n+    },\n }\n \n pub enum ActualImplExpectedKind {\n@@ -657,13 +694,13 @@ pub enum ActualImplExpectedLifetimeKind {\n     Nothing,\n }\n \n-impl ActualImplExplNotes {\n+impl<'tcx> ActualImplExplNotes<'tcx> {\n     pub fn new_expected(\n         kind: ActualImplExpectedKind,\n         lt_kind: ActualImplExpectedLifetimeKind,\n         leading_ellipsis: bool,\n-        ty_or_sig: String,\n-        trait_path: String,\n+        ty_or_sig: TyOrSig<'tcx>,\n+        trait_path: Highlighted<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     ) -> Self {\n@@ -728,7 +765,7 @@ impl ActualImplExplNotes {\n \n #[derive(Diagnostic)]\n #[diag(infer_trait_placeholder_mismatch)]\n-pub struct TraitPlaceholderMismatch {\n+pub struct TraitPlaceholderMismatch<'tcx> {\n     #[primary_span]\n     pub span: Span,\n     #[label(label_satisfy)]\n@@ -741,7 +778,7 @@ pub struct TraitPlaceholderMismatch {\n     pub trait_def_id: String,\n \n     #[subdiagnostic(eager)]\n-    pub actual_impl_expl_notes: Vec<ActualImplExplNotes>,\n+    pub actual_impl_expl_notes: Vec<ActualImplExplNotes<'tcx>>,\n }\n \n pub struct ConsiderBorrowingParamHelp {"}, {"sha": "59fb74eb54378f0c1e836c33214251659871d701", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62f9962eafbf4cf1196d256cf6c559ac397261e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f9962eafbf4cf1196d256cf6c559ac397261e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=62f9962eafbf4cf1196d256cf6c559ac397261e1", "patch": "@@ -9,7 +9,7 @@ mod different_lifetimes;\n pub mod find_anon_type;\n mod mismatched_static_lifetime;\n mod named_anon_conflict;\n-mod placeholder_error;\n+pub(crate) mod placeholder_error;\n mod placeholder_relation;\n mod static_impl_trait;\n mod trait_impl_difference;"}, {"sha": "2ff2d1926a260bf66cf6c6163c00f57ccdd9b96d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/62f9962eafbf4cf1196d256cf6c559ac397261e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f9962eafbf4cf1196d256cf6c559ac397261e1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=62f9962eafbf4cf1196d256cf6c559ac397261e1", "patch": "@@ -1,14 +1,14 @@\n use crate::errors::{\n     ActualImplExpectedKind, ActualImplExpectedLifetimeKind, ActualImplExplNotes,\n-    TraitPlaceholderMismatch,\n+    TraitPlaceholderMismatch, TyOrSig,\n };\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::ValuePairs;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -18,6 +18,42 @@ use rustc_middle::ty::{self, RePlaceholder, ReVar, Region, TyCtxt};\n \n use std::fmt;\n \n+// HACK(eddyb) maybe move this in a more central location.\n+#[derive(Copy, Clone)]\n+pub struct Highlighted<'tcx, T> {\n+    tcx: TyCtxt<'tcx>,\n+    highlight: RegionHighlightMode<'tcx>,\n+    value: T,\n+}\n+\n+impl<'tcx, T> IntoDiagnosticArg for Highlighted<'tcx, T>\n+where\n+    T: for<'a> Print<'tcx, FmtPrinter<'a, 'tcx>, Error = fmt::Error, Output = FmtPrinter<'a, 'tcx>>,\n+{\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        rustc_errors::DiagnosticArgValue::Str(self.to_string().into())\n+    }\n+}\n+\n+impl<'tcx, T> Highlighted<'tcx, T> {\n+    fn map<U>(self, f: impl FnOnce(T) -> U) -> Highlighted<'tcx, U> {\n+        Highlighted { tcx: self.tcx, highlight: self.highlight, value: f(self.value) }\n+    }\n+}\n+\n+impl<'tcx, T> fmt::Display for Highlighted<'tcx, T>\n+where\n+    T: for<'a> Print<'tcx, FmtPrinter<'a, 'tcx>, Error = fmt::Error, Output = FmtPrinter<'a, 'tcx>>,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut printer = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS);\n+        printer.region_highlight_mode = self.highlight;\n+\n+        let s = self.value.print(printer)?.into_buffer();\n+        f.write_str(&s)\n+    }\n+}\n+\n impl<'tcx> NiceRegionError<'_, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit a descriptive diagnostic error.\n@@ -328,39 +364,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         actual_has_vid: Option<usize>,\n         any_self_ty_has_vid: bool,\n         leading_ellipsis: bool,\n-    ) -> Vec<ActualImplExplNotes> {\n-        // HACK(eddyb) maybe move this in a more central location.\n-        #[derive(Copy, Clone)]\n-        struct Highlighted<'tcx, T> {\n-            tcx: TyCtxt<'tcx>,\n-            highlight: RegionHighlightMode<'tcx>,\n-            value: T,\n-        }\n-\n-        impl<'tcx, T> Highlighted<'tcx, T> {\n-            fn map<U>(self, f: impl FnOnce(T) -> U) -> Highlighted<'tcx, U> {\n-                Highlighted { tcx: self.tcx, highlight: self.highlight, value: f(self.value) }\n-            }\n-        }\n-\n-        impl<'tcx, T> fmt::Display for Highlighted<'tcx, T>\n-        where\n-            T: for<'a> Print<\n-                'tcx,\n-                FmtPrinter<'a, 'tcx>,\n-                Error = fmt::Error,\n-                Output = FmtPrinter<'a, 'tcx>,\n-            >,\n-        {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                let mut printer = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS);\n-                printer.region_highlight_mode = self.highlight;\n-\n-                let s = self.value.print(printer)?.into_buffer();\n-                f.write_str(&s)\n-            }\n-        }\n-\n+    ) -> Vec<ActualImplExplNotes<'tcx>> {\n         // The weird thing here with the `maybe_highlighting_region` calls and the\n         // the match inside is meant to be like this:\n         //\n@@ -418,27 +422,27 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 });\n                 (\n                     ActualImplExpectedKind::Signature,\n-                    closure_sig.to_string(),\n-                    expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n+                    TyOrSig::ClosureSig(closure_sig),\n+                    expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n                 )\n             } else {\n                 (\n                     ActualImplExpectedKind::Other,\n-                    self_ty.to_string(),\n-                    expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n+                    TyOrSig::Ty(self_ty),\n+                    expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n                 )\n             }\n         } else if passive_voice {\n             (\n                 ActualImplExpectedKind::Passive,\n-                expected_trait_ref.map(|tr| tr.self_ty()).to_string(),\n-                expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n+                TyOrSig::Ty(expected_trait_ref.map(|tr| tr.self_ty())),\n+                expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n             )\n         } else {\n             (\n                 ActualImplExpectedKind::Other,\n-                expected_trait_ref.map(|tr| tr.self_ty()).to_string(),\n-                expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n+                TyOrSig::Ty(expected_trait_ref.map(|tr| tr.self_ty())),\n+                expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n             )\n         };\n \n@@ -474,7 +478,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n             None => true,\n         };\n \n-        let trait_path = actual_trait_ref.map(|tr| tr.print_only_trait_path()).to_string();\n+        let trait_path = actual_trait_ref.map(|tr| tr.print_only_trait_path());\n         let ty = actual_trait_ref.map(|tr| tr.self_ty()).to_string();\n         let has_lifetime = actual_has_vid.is_some();\n         let lifetime = actual_has_vid.unwrap_or_default();"}]}