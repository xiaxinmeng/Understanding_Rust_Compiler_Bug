{"sha": "63e3bf118d69f128f17508da9065b436be6da3c2", "node_id": "C_kwDOAAsO6NoAKDYzZTNiZjExOGQ2OWYxMjhmMTc1MDhkYTkwNjViNDM2YmU2ZGEzYzI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-22T07:34:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-22T07:34:47Z"}, "message": "internal: Add some additional status ouput", "tree": {"sha": "6d222d92c48662bbb89b93f5a8934a5a29e88142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d222d92c48662bbb89b93f5a8934a5a29e88142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63e3bf118d69f128f17508da9065b436be6da3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63e3bf118d69f128f17508da9065b436be6da3c2", "html_url": "https://github.com/rust-lang/rust/commit/63e3bf118d69f128f17508da9065b436be6da3c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63e3bf118d69f128f17508da9065b436be6da3c2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7285507f64c1b63e83cb38a2d005fdab5ff7387", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7285507f64c1b63e83cb38a2d005fdab5ff7387", "html_url": "https://github.com/rust-lang/rust/commit/e7285507f64c1b63e83cb38a2d005fdab5ff7387"}], "stats": {"total": 247, "additions": 175, "deletions": 72}, "files": [{"sha": "116e6b9751cde6880045ece22114a9e410eff89e", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 169, "deletions": 72, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/63e3bf118d69f128f17508da9065b436be6da3c2/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e3bf118d69f128f17508da9065b436be6da3c2/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=63e3bf118d69f128f17508da9065b436be6da3c2", "patch": "@@ -1,9 +1,18 @@\n-use std::{fmt, sync::Arc};\n+use std::{fmt, marker::PhantomData, sync::Arc};\n \n-use hir::{ExpandResult, MacroFile};\n-use ide_db::base_db::{\n-    salsa::debug::{DebugQueryTable, TableEntry},\n-    CrateId, FileId, FileTextQuery, SourceDatabase, SourceRootId,\n+use hir::{\n+    db::{AstIdMapQuery, AttrsQuery, ParseMacroExpansionQuery},\n+    Attr, Attrs, ExpandResult, MacroFile, Module,\n+};\n+use ide_db::{\n+    base_db::{\n+        salsa::{\n+            debug::{DebugQueryTable, TableEntry},\n+            Query, QueryTable,\n+        },\n+        CrateId, FileId, FileTextQuery, ParseQuery, SourceDatabase, SourceRootId,\n+    },\n+    symbol_index::ModuleSymbolsQuery,\n };\n use ide_db::{\n     symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n@@ -15,13 +24,6 @@ use std::env;\n use stdx::format_to;\n use syntax::{ast, Parse, SyntaxNode};\n \n-fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n-    ide_db::base_db::ParseQuery.in_db(db).entries::<SyntaxTreeStats>()\n-}\n-fn macro_syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n-    hir::db::ParseMacroExpansionQuery.in_db(db).entries::<SyntaxTreeStats>()\n-}\n-\n // Feature: Status\n //\n // Shows internal statistic about memory usage of rust-analyzer.\n@@ -34,15 +36,21 @@ fn macro_syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n // image::https://user-images.githubusercontent.com/48062697/113065584-05f34500-91b1-11eb-98cc-5c196f76be7f.gif[]\n pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n     let mut buf = String::new();\n-    format_to!(buf, \"{}\\n\", FileTextQuery.in_db(db).entries::<FilesStats>());\n-    format_to!(buf, \"{}\\n\", LibrarySymbolsQuery.in_db(db).entries::<LibrarySymbolsStats>());\n-    format_to!(buf, \"{}\\n\", syntax_tree_stats(db));\n-    format_to!(buf, \"{} (Macros)\\n\", macro_syntax_tree_stats(db));\n+\n+    format_to!(buf, \"{}\\n\", collect_query(FileTextQuery.in_db(db)));\n+    format_to!(buf, \"{}\\n\", collect_query(ParseQuery.in_db(db)));\n+    format_to!(buf, \"{}\\n\", collect_query(ParseMacroExpansionQuery.in_db(db)));\n+    format_to!(buf, \"{}\\n\", collect_query(LibrarySymbolsQuery.in_db(db)));\n+    format_to!(buf, \"{}\\n\", collect_query(ModuleSymbolsQuery.in_db(db)));\n     format_to!(buf, \"{} in total\\n\", memory_usage());\n     if env::var(\"RA_COUNT\").is_ok() {\n         format_to!(buf, \"\\nCounts:\\n{}\", profile::countme::get_all());\n     }\n \n+    format_to!(buf, \"\\nDebug info:\\n\");\n+    format_to!(buf, \"{}\\n\", collect_query(AttrsQuery.in_db(db)));\n+    format_to!(buf, \"{} ast id maps\\n\", collect_query_count(AstIdMapQuery.in_db(db)));\n+\n     if let Some(file_id) = file_id {\n         format_to!(buf, \"\\nFile info:\\n\");\n         let crates = crate::parent_module::crates_for(db, file_id);\n@@ -52,8 +60,8 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n         let crate_graph = db.crate_graph();\n         for krate in crates {\n             let display_crate = |krate: CrateId| match &crate_graph[krate].display_name {\n-                Some(it) => format!(\"{it}({krate:?})\"),\n-                None => format!(\"{krate:?}\"),\n+                Some(it) => format!(\"{it}({})\", krate.into_raw()),\n+                None => format!(\"{}\", krate.into_raw()),\n             };\n             format_to!(buf, \"Crate: {}\\n\", display_crate(krate));\n             let deps = crate_graph[krate]\n@@ -68,6 +76,82 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n     buf.trim().to_string()\n }\n \n+fn collect_query<'q, Q>(table: QueryTable<'q, Q>) -> <Q as QueryCollect>::Collector\n+where\n+    QueryTable<'q, Q>: DebugQueryTable,\n+    Q: QueryCollect,\n+    <Q as Query>::Storage: 'q,\n+    <Q as QueryCollect>::Collector: StatCollect<\n+        <QueryTable<'q, Q> as DebugQueryTable>::Key,\n+        <QueryTable<'q, Q> as DebugQueryTable>::Value,\n+    >,\n+{\n+    struct StatCollectorWrapper<C>(C);\n+    impl<C: StatCollect<K, V>, K, V> FromIterator<TableEntry<K, V>> for StatCollectorWrapper<C> {\n+        fn from_iter<T>(iter: T) -> StatCollectorWrapper<C>\n+        where\n+            T: IntoIterator<Item = TableEntry<K, V>>,\n+        {\n+            let mut res = C::default();\n+            for entry in iter {\n+                res.collect_entry(entry.key, entry.value);\n+            }\n+            StatCollectorWrapper(res)\n+        }\n+    }\n+    table.entries::<StatCollectorWrapper<<Q as QueryCollect>::Collector>>().0\n+}\n+\n+fn collect_query_count<'q, Q>(table: QueryTable<'q, Q>) -> usize\n+where\n+    QueryTable<'q, Q>: DebugQueryTable,\n+    Q: Query,\n+    <Q as Query>::Storage: 'q,\n+{\n+    struct EntryCounter(usize);\n+    impl<K, V> FromIterator<TableEntry<K, V>> for EntryCounter {\n+        fn from_iter<T>(iter: T) -> EntryCounter\n+        where\n+            T: IntoIterator<Item = TableEntry<K, V>>,\n+        {\n+            EntryCounter(iter.into_iter().count())\n+        }\n+    }\n+    table.entries::<EntryCounter>().0\n+}\n+\n+trait QueryCollect: Query {\n+    type Collector;\n+}\n+\n+impl QueryCollect for LibrarySymbolsQuery {\n+    type Collector = SymbolsStats<SourceRootId>;\n+}\n+\n+impl QueryCollect for ParseQuery {\n+    type Collector = SyntaxTreeStats<false>;\n+}\n+\n+impl QueryCollect for ParseMacroExpansionQuery {\n+    type Collector = SyntaxTreeStats<true>;\n+}\n+\n+impl QueryCollect for FileTextQuery {\n+    type Collector = FilesStats;\n+}\n+\n+impl QueryCollect for ModuleSymbolsQuery {\n+    type Collector = SymbolsStats<Module>;\n+}\n+\n+impl QueryCollect for AttrsQuery {\n+    type Collector = AttrsStats;\n+}\n+\n+trait StatCollect<K, V>: Default {\n+    fn collect_entry(&mut self, key: K, value: Option<V>);\n+}\n+\n #[derive(Default)]\n struct FilesStats {\n     total: usize,\n@@ -80,85 +164,98 @@ impl fmt::Display for FilesStats {\n     }\n }\n \n-impl FromIterator<TableEntry<FileId, Arc<String>>> for FilesStats {\n-    fn from_iter<T>(iter: T) -> FilesStats\n-    where\n-        T: IntoIterator<Item = TableEntry<FileId, Arc<String>>>,\n-    {\n-        let mut res = FilesStats::default();\n-        for entry in iter {\n-            res.total += 1;\n-            res.size += entry.value.unwrap().len();\n-        }\n-        res\n+impl StatCollect<FileId, Arc<String>> for FilesStats {\n+    fn collect_entry(&mut self, _: FileId, value: Option<Arc<String>>) {\n+        self.total += 1;\n+        self.size += value.unwrap().len();\n     }\n }\n \n #[derive(Default)]\n-pub(crate) struct SyntaxTreeStats {\n+pub(crate) struct SyntaxTreeStats<const MACROS: bool> {\n     total: usize,\n     pub(crate) retained: usize,\n }\n \n-impl fmt::Display for SyntaxTreeStats {\n+impl<const MACROS: bool> fmt::Display for SyntaxTreeStats<MACROS> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(fmt, \"{} trees, {} preserved\", self.total, self.retained)\n+        write!(\n+            fmt,\n+            \"{} trees, {} preserved{}\",\n+            self.total,\n+            self.retained,\n+            if MACROS { \" (macros)\" } else { \"\" }\n+        )\n     }\n }\n \n-impl FromIterator<TableEntry<FileId, Parse<ast::SourceFile>>> for SyntaxTreeStats {\n-    fn from_iter<T>(iter: T) -> SyntaxTreeStats\n-    where\n-        T: IntoIterator<Item = TableEntry<FileId, Parse<ast::SourceFile>>>,\n-    {\n-        let mut res = SyntaxTreeStats::default();\n-        for entry in iter {\n-            res.total += 1;\n-            res.retained += entry.value.is_some() as usize;\n-        }\n-        res\n+impl StatCollect<FileId, Parse<ast::SourceFile>> for SyntaxTreeStats<false> {\n+    fn collect_entry(&mut self, _: FileId, value: Option<Parse<ast::SourceFile>>) {\n+        self.total += 1;\n+        self.retained += value.is_some() as usize;\n     }\n }\n \n-impl<M> FromIterator<TableEntry<MacroFile, ExpandResult<(Parse<SyntaxNode>, M)>>>\n-    for SyntaxTreeStats\n-{\n-    fn from_iter<T>(iter: T) -> SyntaxTreeStats\n-    where\n-        T: IntoIterator<Item = TableEntry<MacroFile, ExpandResult<(Parse<SyntaxNode>, M)>>>,\n-    {\n-        let mut res = SyntaxTreeStats::default();\n-        for entry in iter {\n-            res.total += 1;\n-            res.retained += entry.value.is_some() as usize;\n-        }\n-        res\n+impl<M> StatCollect<MacroFile, ExpandResult<(Parse<SyntaxNode>, M)>> for SyntaxTreeStats<true> {\n+    fn collect_entry(&mut self, _: MacroFile, value: Option<ExpandResult<(Parse<SyntaxNode>, M)>>) {\n+        self.total += 1;\n+        self.retained += value.is_some() as usize;\n     }\n }\n \n-#[derive(Default)]\n-struct LibrarySymbolsStats {\n+struct SymbolsStats<Key> {\n     total: usize,\n     size: Bytes,\n+    phantom: PhantomData<Key>,\n }\n \n-impl fmt::Display for LibrarySymbolsStats {\n+impl<Key> Default for SymbolsStats<Key> {\n+    fn default() -> Self {\n+        Self { total: Default::default(), size: Default::default(), phantom: PhantomData }\n+    }\n+}\n+\n+impl fmt::Display for SymbolsStats<Module> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(fmt, \"{} of index symbols ({})\", self.size, self.total)\n+        write!(fmt, \"{} of module index symbols ({})\", self.size, self.total)\n+    }\n+}\n+impl fmt::Display for SymbolsStats<SourceRootId> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(fmt, \"{} of library index symbols ({})\", self.size, self.total)\n+    }\n+}\n+impl<Key> StatCollect<Key, Arc<SymbolIndex>> for SymbolsStats<Key> {\n+    fn collect_entry(&mut self, _: Key, value: Option<Arc<SymbolIndex>>) {\n+        let symbols = value.unwrap();\n+        self.total += symbols.len();\n+        self.size += symbols.memory_size();\n     }\n }\n \n-impl FromIterator<TableEntry<SourceRootId, Arc<SymbolIndex>>> for LibrarySymbolsStats {\n-    fn from_iter<T>(iter: T) -> LibrarySymbolsStats\n-    where\n-        T: IntoIterator<Item = TableEntry<SourceRootId, Arc<SymbolIndex>>>,\n-    {\n-        let mut res = LibrarySymbolsStats::default();\n-        for entry in iter {\n-            let symbols = entry.value.unwrap();\n-            res.total += symbols.len();\n-            res.size += symbols.memory_size();\n-        }\n-        res\n+#[derive(Default)]\n+struct AttrsStats {\n+    entries: usize,\n+    total: usize,\n+}\n+\n+impl fmt::Display for AttrsStats {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let size =\n+            self.entries * std::mem::size_of::<Attrs>() + self.total * std::mem::size_of::<Attr>();\n+        let size = Bytes::new(size as _);\n+        write!(\n+            fmt,\n+            \"{} attribute query entries, {} total attributes ({} for storing entries)\",\n+            self.entries, self.total, size\n+        )\n+    }\n+}\n+\n+impl<Key> StatCollect<Key, Attrs> for AttrsStats {\n+    fn collect_entry(&mut self, _: Key, value: Option<Attrs>) {\n+        let attrs = value.unwrap();\n+        self.entries += 1;\n+        self.total += attrs.len();\n     }\n }"}, {"sha": "f089c78e0c195c0ad276e0d91d9b3db7675fcc9a", "filename": "crates/profile/src/memory_usage.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63e3bf118d69f128f17508da9065b436be6da3c2/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e3bf118d69f128f17508da9065b436be6da3c2/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=63e3bf118d69f128f17508da9065b436be6da3c2", "patch": "@@ -90,6 +90,12 @@ fn memusage_linux() -> MemoryUsage {\n #[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n pub struct Bytes(isize);\n \n+impl Bytes {\n+    pub fn new(bytes: isize) -> Bytes {\n+        Bytes(bytes)\n+    }\n+}\n+\n impl Bytes {\n     pub fn megabytes(self) -> isize {\n         self.0 / 1024 / 1024"}]}