{"sha": "0bdefd706489b29cad89b27daecd63244d52f2ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZGVmZDcwNjQ4OWIyOWNhZDg5YjI3ZGFlY2Q2MzI0NGQ1MmYyZmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-20T21:56:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-21T19:27:29Z"}, "message": "Revamp the fulfillment cache tracking to only cache trait-refs, which\nwas the major use-case, and to update the dep-graph. Other kinds of\npredicates are now excluded from the cache because there is no easy way\nto make a good dep-graph node for them, and because they are not\nbelieved to be that useful. :)\n\nFixes #30741. (However, the test still gives wrong result for trans,\nfor an independent reason which is fixed in the next commit.)", "tree": {"sha": "596fc4996cec7693ea777784bfca36712738b911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596fc4996cec7693ea777784bfca36712738b911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bdefd706489b29cad89b27daecd63244d52f2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bdefd706489b29cad89b27daecd63244d52f2ff", "html_url": "https://github.com/rust-lang/rust/commit/0bdefd706489b29cad89b27daecd63244d52f2ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bdefd706489b29cad89b27daecd63244d52f2ff/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f85cffc8abbaa5b581fa498cf30f211284d378", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f85cffc8abbaa5b581fa498cf30f211284d378", "html_url": "https://github.com/rust-lang/rust/commit/b5f85cffc8abbaa5b581fa498cf30f211284d378"}], "stats": {"total": 112, "additions": 80, "deletions": 32}, "files": [{"sha": "d28504db585c745b5a4c582b2a5b08b0cf1f0ae8", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=0bdefd706489b29cad89b27daecd63244d52f2ff", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use dep_graph::DepGraph;\n use middle::infer::InferCtxt;\n use middle::ty::{self, Ty, TypeFoldable};\n use rustc_data_structures::obligation_forest::{Backtrace, ObligationForest, Error};\n@@ -30,7 +31,12 @@ use super::select::SelectionContext;\n use super::Unimplemented;\n use super::util::predicate_for_builtin_bound;\n \n-pub struct FulfilledPredicates<'tcx> {\n+pub struct GlobalFulfilledPredicates<'tcx> {\n+    set: FnvHashSet<ty::PolyTraitPredicate<'tcx>>,\n+    dep_graph: DepGraph,\n+}\n+\n+pub struct LocalFulfilledPredicates<'tcx> {\n     set: FnvHashSet<ty::Predicate<'tcx>>\n }\n \n@@ -56,7 +62,7 @@ pub struct FulfillmentContext<'tcx> {\n     // initially-distinct type variables are unified after being\n     // inserted. Deduplicating the predicate set on selection had a\n     // significant performance cost the last time I checked.\n-    duplicate_set: FulfilledPredicates<'tcx>,\n+    duplicate_set: LocalFulfilledPredicates<'tcx>,\n \n     // A list of all obligations that have been registered with this\n     // fulfillment context.\n@@ -106,7 +112,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context.\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n-            duplicate_set: FulfilledPredicates::new(),\n+            duplicate_set: LocalFulfilledPredicates::new(),\n             predicates: ObligationForest::new(),\n             region_obligations: NodeMap(),\n         }\n@@ -240,7 +246,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         // local cache).  This is because the tcx cache maintains the\n         // invariant that it only contains things that have been\n         // proven, and we have not yet proven that `predicate` holds.\n-        if predicate.is_global() && tcx.fulfilled_predicates.borrow().is_duplicate(predicate) {\n+        if tcx.fulfilled_predicates.borrow().check_duplicate(predicate) {\n             return true;\n         }\n \n@@ -283,10 +289,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n             // these are obligations that were proven to be true.\n             for pending_obligation in outcome.completed {\n                 let predicate = &pending_obligation.obligation.predicate;\n-                if predicate.is_global() {\n-                    selcx.tcx().fulfilled_predicates.borrow_mut()\n-                                                    .is_duplicate_or_add(predicate);\n-                }\n+                selcx.tcx().fulfilled_predicates.borrow_mut().add_if_global(predicate);\n             }\n \n             errors.extend(\n@@ -329,17 +332,16 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n             // However, this is a touch tricky, so I'm doing something\n             // a bit hackier for now so that the `huge-struct.rs` passes.\n \n+            let tcx = selcx.tcx();\n+\n             let retain_vec: Vec<_> = {\n                 let mut dedup = FnvHashSet();\n                 v.iter()\n                  .map(|o| {\n                      // Screen out obligations that we know globally\n                      // are true. This should really be the DAG check\n                      // mentioned above.\n-                     if\n-                         o.predicate.is_global() &&\n-                         selcx.tcx().fulfilled_predicates.borrow().is_duplicate(&o.predicate)\n-                     {\n+                     if tcx.fulfilled_predicates.borrow().check_duplicate(&o.predicate) {\n                          return false;\n                      }\n \n@@ -611,22 +613,62 @@ fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,\n \n }\n \n-impl<'tcx> FulfilledPredicates<'tcx> {\n-    pub fn new() -> FulfilledPredicates<'tcx> {\n-        FulfilledPredicates {\n+impl<'tcx> LocalFulfilledPredicates<'tcx> {\n+    pub fn new() -> LocalFulfilledPredicates<'tcx> {\n+        LocalFulfilledPredicates {\n             set: FnvHashSet()\n         }\n     }\n \n-    pub fn is_duplicate(&self, key: &ty::Predicate<'tcx>) -> bool {\n-        self.set.contains(key)\n-    }\n-\n     fn is_duplicate_or_add(&mut self, key: &ty::Predicate<'tcx>) -> bool {\n+        // For a `LocalFulfilledPredicates`, if we find a match, we\n+        // don't need to add a read edge to the dep-graph. This is\n+        // because it means that the predicate has already been\n+        // considered by this `FulfillmentContext`, and hence the\n+        // containing task will already have an edge. (Here we are\n+        // assuming each `FulfillmentContext` only gets used from one\n+        // task; but to do otherwise makes no sense)\n         !self.set.insert(key.clone())\n     }\n }\n \n+impl<'tcx> GlobalFulfilledPredicates<'tcx> {\n+    pub fn new(dep_graph: DepGraph) -> GlobalFulfilledPredicates<'tcx> {\n+        GlobalFulfilledPredicates {\n+            set: FnvHashSet(),\n+            dep_graph: dep_graph,\n+        }\n+    }\n+\n+    pub fn check_duplicate(&self, key: &ty::Predicate<'tcx>) -> bool {\n+        if let ty::Predicate::Trait(ref data) = *key {\n+            // For the global predicate registry, when we find a match, it\n+            // may have been computed by some other task, so we want to\n+            // add a read from the node corresponding to the predicate\n+            // processing to make sure we get the transitive dependencies.\n+            if self.set.contains(data) {\n+                debug_assert!(data.is_global());\n+                self.dep_graph.read(data.dep_node());\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    fn add_if_global(&mut self, key: &ty::Predicate<'tcx>) {\n+        if let ty::Predicate::Trait(ref data) = *key {\n+            // We only add things to the global predicate registry\n+            // after the current task has proved them, and hence\n+            // already has the required read edges, so we don't need\n+            // to add any more edges here.\n+            if data.is_global() {\n+                self.set.insert(data.clone());\n+            }\n+        }\n+    }\n+}\n+\n fn to_fulfillment_error<'tcx>(\n     error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>)\n     -> FulfillmentError<'tcx>"}, {"sha": "f0ff0380aaa3109f1172b12fdc4afbd102d03bab", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=0bdefd706489b29cad89b27daecd63244d52f2ff", "patch": "@@ -15,7 +15,6 @@ pub use self::FulfillmentErrorCode::*;\n pub use self::Vtable::*;\n pub use self::ObligationCauseCode::*;\n \n-use dep_graph::DepNode;\n use middle::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use middle::subst;\n@@ -36,7 +35,7 @@ pub use self::error_reporting::report_object_safety_error;\n pub use self::coherence::orphan_check;\n pub use self::coherence::overlapping_impls;\n pub use self::coherence::OrphanCheckErr;\n-pub use self::fulfill::{FulfillmentContext, FulfilledPredicates, RegionObligation};\n+pub use self::fulfill::{FulfillmentContext, GlobalFulfilledPredicates, RegionObligation};\n pub use self::project::MismatchedProjectionTypes;\n pub use self::project::normalize;\n pub use self::project::Normalized;\n@@ -616,11 +615,6 @@ impl<'tcx> FulfillmentError<'tcx> {\n }\n \n impl<'tcx> TraitObligation<'tcx> {\n-    /// Creates the dep-node for selecting/evaluating this trait reference.\n-    fn dep_node(&self) -> DepNode {\n-        DepNode::TraitSelect(self.predicate.def_id())\n-    }\n-\n     fn self_ty(&self) -> ty::Binder<Ty<'tcx>> {\n         ty::Binder(self.predicate.skip_binder().self_ty())\n     }"}, {"sha": "61418734b674bacc1130ad16708c156ed3e18877", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=0bdefd706489b29cad89b27daecd63244d52f2ff", "patch": "@@ -307,7 +307,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(\"select({:?})\", obligation);\n         assert!(!obligation.predicate.has_escaping_regions());\n \n-        let dep_node = obligation.dep_node();\n+        let dep_node = obligation.predicate.dep_node();\n         let _task = self.tcx().dep_graph.in_task(dep_node);\n \n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n@@ -462,7 +462,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // have been proven elsewhere. This cache only contains\n         // predicates that are global in scope and hence unaffected by\n         // the current environment.\n-        if self.tcx().fulfilled_predicates.borrow().is_duplicate(&obligation.predicate) {\n+        if self.tcx().fulfilled_predicates.borrow().check_duplicate(&obligation.predicate) {\n             return EvaluatedToOk;\n         }\n "}, {"sha": "bf768a40999dce598272c79c2c6fc915f42f5b68", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=0bdefd706489b29cad89b27daecd63244d52f2ff", "patch": "@@ -367,7 +367,7 @@ pub struct ctxt<'tcx> {\n     /// This is used to avoid duplicate work. Predicates are only\n     /// added to this set when they mention only \"global\" names\n     /// (i.e., no type or lifetime parameters).\n-    pub fulfilled_predicates: RefCell<traits::FulfilledPredicates<'tcx>>,\n+    pub fulfilled_predicates: RefCell<traits::GlobalFulfilledPredicates<'tcx>>,\n \n     /// Caches the representation hints for struct definitions.\n     repr_hint_cache: RefCell<DepTrackingMap<maps::ReprHints<'tcx>>>,\n@@ -510,6 +510,7 @@ impl<'tcx> ctxt<'tcx> {\n         let interner = RefCell::new(FnvHashMap());\n         let common_types = CommonTypes::new(&arenas.type_, &interner);\n         let dep_graph = DepGraph::new(s.opts.incremental_compilation);\n+        let fulfilled_predicates = traits::GlobalFulfilledPredicates::new(dep_graph.clone());\n         tls::enter(ctxt {\n             arenas: arenas,\n             interner: interner,\n@@ -532,7 +533,7 @@ impl<'tcx> ctxt<'tcx> {\n             adt_defs: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             predicates: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             super_predicates: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n-            fulfilled_predicates: RefCell::new(traits::FulfilledPredicates::new()),\n+            fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             map: map,\n             freevars: RefCell::new(freevars),\n             tcache: RefCell::new(DepTrackingMap::new(dep_graph.clone())),"}, {"sha": "e25c05f6272c62f5ba4134fe3bca5945b47aee15", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=0bdefd706489b29cad89b27daecd63244d52f2ff", "patch": "@@ -838,6 +838,11 @@ impl<'tcx> TraitPredicate<'tcx> {\n         self.trait_ref.def_id\n     }\n \n+    /// Creates the dep-node for selecting/evaluating this trait reference.\n+    fn dep_node(&self) -> DepNode {\n+        DepNode::TraitSelect(self.def_id())\n+    }\n+\n     pub fn input_types(&self) -> &[Ty<'tcx>] {\n         self.trait_ref.substs.types.as_slice()\n     }\n@@ -849,8 +854,14 @@ impl<'tcx> TraitPredicate<'tcx> {\n \n impl<'tcx> PolyTraitPredicate<'tcx> {\n     pub fn def_id(&self) -> DefId {\n+        // ok to skip binder since trait def-id does not care about regions\n         self.0.def_id()\n     }\n+\n+    pub fn dep_node(&self) -> DepNode {\n+        // ok to skip binder since depnode does not care about regions\n+        self.0.dep_node()\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]"}, {"sha": "4a7becca15d089c2ae3b2969aff9f4229b60ec83", "filename": "src/test/compile-fail/dep-graph-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdefd706489b29cad89b27daecd63244d52f2ff/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs?ref=0bdefd706489b29cad89b27daecd63244d52f2ff", "patch": "@@ -41,7 +41,7 @@ mod y {\n     }\n \n     // FIXME(#30741) tcx fulfillment cache not tracked\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn take_foo_with_char() {\n         take_foo::<char>('a');\n@@ -54,7 +54,7 @@ mod y {\n     }\n \n     // FIXME(#30741) tcx fulfillment cache not tracked\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn take_foo_with_u32() {\n         take_foo::<u32>(22);"}]}