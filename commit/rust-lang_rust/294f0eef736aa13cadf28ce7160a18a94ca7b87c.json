{"sha": "294f0eef736aa13cadf28ce7160a18a94ca7b87c", "node_id": "C_kwDOAAsO6NoAKDI5NGYwZWVmNzM2YWExM2NhZGYyOGNlNzE2MGExOGE5NGNhN2I4N2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-15T11:54:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-15T11:54:03Z"}, "message": "Auto merge of #101173 - jyn514:simplify-macro-arguments, r=cjgillot\n\nFurther simplify the macros generated by `rustc_queries`\n\nThis doesn't actually move anything outside the macros, but it makes them simpler to read.\n\n- Add a new `rustc_query_names` macro. This allows a much simpler syntax for the matchers in the macros passed to it as a callback.\n- Convert `define_dep_nodes` and `alloc_once` to use `rustc_query_names`. This is possible because they only use the names\n  (despite the quite complicated matchers in `define_dep_nodes`, none of the other arguments are used).\n- Get rid of `rustc_dep_node_append`.\n\nr? `@cjgillot`", "tree": {"sha": "ba2cfdaac7cbfa964493ae51babf16d9888878d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba2cfdaac7cbfa964493ae51babf16d9888878d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/294f0eef736aa13cadf28ce7160a18a94ca7b87c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/294f0eef736aa13cadf28ce7160a18a94ca7b87c", "html_url": "https://github.com/rust-lang/rust/commit/294f0eef736aa13cadf28ce7160a18a94ca7b87c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/294f0eef736aa13cadf28ce7160a18a94ca7b87c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00fcc82df204ab81cd887da7d04c023a201afd5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/00fcc82df204ab81cd887da7d04c023a201afd5b", "html_url": "https://github.com/rust-lang/rust/commit/00fcc82df204ab81cd887da7d04c023a201afd5b"}, {"sha": "cb2949e6425688078b6b3eb38d91f607ab280a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2949e6425688078b6b3eb38d91f607ab280a16", "html_url": "https://github.com/rust-lang/rust/commit/cb2949e6425688078b6b3eb38d91f607ab280a16"}], "stats": {"total": 92, "additions": 40, "deletions": 52}, "files": [{"sha": "d49926c90ca9ff392fb1444cca697b563aea0dca", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=294f0eef736aa13cadf28ce7160a18a94ca7b87c", "patch": "@@ -289,7 +289,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n     let mut query_stream = quote! {};\n     let mut query_description_stream = quote! {};\n-    let mut dep_node_def_stream = quote! {};\n     let mut cached_queries = quote! {};\n \n     for query in queries.0 {\n@@ -328,6 +327,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             remap_env_constness,\n         );\n \n+        if modifiers.cache.is_some() {\n+            attributes.push(quote! { (cache) });\n+        }\n+        // Pass on the cache modifier\n         if modifiers.cache.is_some() {\n             attributes.push(quote! { (cache) });\n         }\n@@ -340,45 +343,27 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         // be very useful.\n         let span = name.span();\n         let attribute_stream = quote_spanned! {span=> #(#attributes),*};\n-        let doc_comments = query.doc_comments.iter();\n+        let doc_comments = &query.doc_comments;\n         // Add the query to the group\n         query_stream.extend(quote! {\n             #(#doc_comments)*\n             [#attribute_stream] fn #name(#arg) #result,\n         });\n \n-        // Create a dep node for the query\n-        dep_node_def_stream.extend(quote! {\n-            [#attribute_stream] #name(#arg),\n-        });\n-\n         add_query_description_impl(&query, &mut query_description_stream);\n     }\n \n     TokenStream::from(quote! {\n         #[macro_export]\n         macro_rules! rustc_query_append {\n-            ($macro:ident !) => {\n+            ($macro:ident! $( [$($other:tt)*] )?) => {\n                 $macro! {\n+                    $( $($other)* )?\n                     #query_stream\n                 }\n             }\n         }\n-        macro_rules! rustc_dep_node_append {\n-            ($macro:ident! [$($other:tt)*]) => {\n-                $macro!(\n-                    $($other)*\n \n-                    #dep_node_def_stream\n-                );\n-            }\n-        }\n-        #[macro_export]\n-        macro_rules! rustc_cached_queries {\n-            ( $macro:ident! ) => {\n-                $macro!(#cached_queries);\n-            }\n-        }\n         #[macro_export]\n         macro_rules! rustc_query_description {\n             #query_description_stream"}, {"sha": "eded3b3eedc6c49a1869950ebc1048a1824edf83", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=294f0eef736aa13cadf28ce7160a18a94ca7b87c", "patch": "@@ -144,11 +144,9 @@ impl DepKind {\n \n macro_rules! define_dep_nodes {\n     (\n-    $(\n-        [$($attrs:tt)*]\n-        $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n-      ,)*\n-    ) => (\n+     $($(#[$attr:meta])*\n+        [$($modifiers:tt)*] fn $variant:ident($($K:tt)*) -> $V:ty,)*) => {\n+\n         #[macro_export]\n         macro_rules! make_dep_kind_array {\n             ($mod:ident) => {[ $($mod::$variant()),* ]};\n@@ -158,7 +156,7 @@ macro_rules! define_dep_nodes {\n         #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n         #[allow(non_camel_case_types)]\n         pub enum DepKind {\n-            $($variant),*\n+            $( $( #[$attr] )* $variant),*\n         }\n \n         fn dep_kind_from_label_string(label: &str) -> Result<DepKind, ()> {\n@@ -176,24 +174,17 @@ macro_rules! define_dep_nodes {\n                 pub const $variant: &str = stringify!($variant);\n             )*\n         }\n-    );\n+    };\n }\n \n-rustc_dep_node_append!(define_dep_nodes![\n-    // We use this for most things when incr. comp. is turned off.\n-    [] Null,\n-\n-    // We use this to create a forever-red node.\n-    [] Red,\n-\n-    [anon] TraitSelect,\n-\n-    // WARNING: if `Symbol` is changed, make sure you update `make_compile_codegen_unit` below.\n-    [] CompileCodegenUnit(Symbol),\n-\n-    // WARNING: if `MonoItem` is changed, make sure you update `make_compile_mono_item` below.\n-    // Only used by rustc_codegen_cranelift\n-    [] CompileMonoItem(MonoItem),\n+rustc_query_append!(define_dep_nodes![\n+    /// We use this for most things when incr. comp. is turned off.\n+    [] fn Null() -> (),\n+    /// We use this to create a forever-red node.\n+    [] fn Red() -> (),\n+    [] fn TraitSelect() -> (),\n+    [] fn CompileCodegenUnit() -> (),\n+    [] fn CompileMonoItem() -> (),\n ]);\n \n // WARNING: `construct` is generic and does not know that `CompileCodegenUnit` takes `Symbol`s as keys."}, {"sha": "6f39bbfc0dc8ab4bd6a35143783425f18f8143ff", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=294f0eef736aa13cadf28ce7160a18a94ca7b87c", "patch": "@@ -151,19 +151,31 @@ impl<'tcx> QueryCtxt<'tcx> {\n         encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx>,\n         query_result_index: &mut on_disk_cache::EncodedDepNodeIndex,\n     ) {\n+        macro_rules! expand_if_cached {\n+            ([] $encode:expr) => {};\n+            ([(cache) $($rest:tt)*] $encode:expr) => {\n+                $encode\n+            };\n+            ([$other:tt $($modifiers:tt)*] $encode:expr) => {\n+                expand_if_cached!([$($modifiers)*] $encode)\n+            };\n+        }\n+\n         macro_rules! encode_queries {\n-            ($($query:ident,)*) => {\n+            (\n+            $($(#[$attr:meta])*\n+                [$($modifiers:tt)*] fn $query:ident($($K:tt)*) -> $V:ty,)*) => {\n                 $(\n-                    on_disk_cache::encode_query_results::<_, super::queries::$query<'_>>(\n+                    expand_if_cached!([$($modifiers)*] on_disk_cache::encode_query_results::<_, super::queries::$query<'_>>(\n                         self,\n                         encoder,\n                         query_result_index\n-                    );\n+                    ));\n                 )*\n             }\n         }\n \n-        rustc_cached_queries!(encode_queries!);\n+        rustc_query_append!(encode_queries!);\n     }\n \n     pub fn try_print_query_stack("}, {"sha": "98ec3bc097732abdcf09364309818020c89d856f", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294f0eef736aa13cadf28ce7160a18a94ca7b87c/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=294f0eef736aa13cadf28ce7160a18a94ca7b87c", "patch": "@@ -307,16 +307,16 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n \n     macro_rules! alloc_once {\n         (\n-            $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($K:ty) -> $V:ty,)*\n-        ) => {\n-            $({\n+        $($(#[$attr:meta])*\n+            [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n+            $(\n                 alloc_self_profile_query_strings_for_query_cache(\n                     tcx,\n                     stringify!($name),\n                     &tcx.query_caches.$name,\n                     &mut string_cache,\n                 );\n-            })*\n+            )+\n         }\n     }\n "}]}