{"sha": "c19ca083ee79ffa49404b88f2172936fac831e25", "node_id": "C_kwDOAAsO6NoAKGMxOWNhMDgzZWU3OWZmYTQ5NDA0Yjg4ZjIxNzI5MzZmYWM4MzFlMjU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-11T18:15:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-12T10:00:47Z"}, "message": "expose host-to-target path conversion to interpreted program", "tree": {"sha": "383bff8e7f9ce3726e806a9d4b409c0c9048233d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383bff8e7f9ce3726e806a9d4b409c0c9048233d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c19ca083ee79ffa49404b88f2172936fac831e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c19ca083ee79ffa49404b88f2172936fac831e25", "html_url": "https://github.com/rust-lang/rust/commit/c19ca083ee79ffa49404b88f2172936fac831e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c19ca083ee79ffa49404b88f2172936fac831e25/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "html_url": "https://github.com/rust-lang/rust/commit/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58"}], "stats": {"total": 120, "additions": 81, "deletions": 39}, "files": [{"sha": "8cc7e846958af60c5825786d5f9a6afcabad5323", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=c19ca083ee79ffa49404b88f2172936fac831e25", "patch": "@@ -576,6 +576,21 @@ extern \"Rust\" {\n \n     /// Miri-provided extern function to deallocate memory.\n     fn miri_dealloc(ptr: *mut u8, size: usize, align: usize);\n+\n+    /// Convert a path from the host Miri runs on to the target Miri interprets.\n+    /// Performs conversion of path separators as needed.\n+    ///\n+    /// Usually Miri performs this kind of conversion automatically. However, manual conversion\n+    /// might be necessary when reading an environment variable that was set of the host\n+    /// (such as TMPDIR) and using it as a target path.\n+    ///\n+    /// Only works with isolation disabled.\n+    ///\n+    /// `in` must point to a null-terminated string, and will be read as the input host path.\n+    /// `out` must point to at least `out_size` many bytes, and the result will be stored there\n+    /// with a null terminator.\n+    /// Returns 0 if the `out` buffer was large enough, and the required size otherwise.\n+    fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n }\n ```\n "}, {"sha": "abfa73db6404d6c4ef2224dc4bb4a3f896c4c9d8", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=c19ca083ee79ffa49404b88f2172936fac831e25", "patch": "@@ -1,4 +1,4 @@\n-use std::{collections::hash_map::Entry, io::Write, iter};\n+use std::{collections::hash_map::Entry, io::Write, iter, path::Path};\n \n use log::trace;\n \n@@ -442,6 +442,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n                 this.machine.static_roots.push(alloc_id);\n             }\n+            \"miri_host_to_target_path\" => {\n+                let [ptr, out, out_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let ptr = this.read_pointer(ptr)?;\n+                let out = this.read_pointer(out)?;\n+                let out_size = this.read_scalar(out_size)?.to_machine_usize(this)?;\n+\n+                // The host affects program behavior here, so this requires isolation to be disabled.\n+                this.check_no_isolation(\"`miri_host_to_target_path`\")?;\n+\n+                // We read this as a plain OsStr and write it as a path, which will convert it to the target.\n+                let path = this.read_os_str_from_c_str(ptr)?.to_owned();\n+                let (success, needed_size) = this.write_path_to_c_str(Path::new(&path), out, out_size)?;\n+                // Return value: 0 on success, otherwise the size it would have needed.\n+                this.write_int(if success { 0 } else { needed_size }, dest)?;\n+            }\n \n             // Obtains the size of a Miri backtrace. See the README for details.\n             \"miri_backtrace_size\" => {"}, {"sha": "ba5b269f65242427230466a2cb63d500bcf46db5", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs?ref=c19ca083ee79ffa49404b88f2172936fac831e25", "patch": "@@ -5,7 +5,7 @@\n #![feature(io_error_uncategorized)]\n \n use std::convert::TryInto;\n-use std::ffi::CString;\n+use std::ffi::{CStr, CString};\n use std::fs::{canonicalize, remove_dir_all, remove_file, File};\n use std::io::{Error, ErrorKind, Write};\n use std::os::unix::ffi::OsStrExt;\n@@ -23,20 +23,21 @@ fn main() {\n }\n \n fn tmp() -> PathBuf {\n-    std::env::var(\"MIRI_TEMP\")\n-        .map(|tmp| {\n-            // MIRI_TEMP is set outside of our emulated\n-            // program, so it may have path separators that don't\n-            // correspond to our target platform. We normalize them here\n-            // before constructing a `PathBuf`\n-\n-            #[cfg(windows)]\n-            return PathBuf::from(tmp.replace(\"/\", \"\\\\\"));\n-\n-            #[cfg(not(windows))]\n-            return PathBuf::from(tmp.replace(\"\\\\\", \"/\"));\n-        })\n-        .unwrap_or_else(|_| std::env::temp_dir())\n+    let path = std::env::var(\"MIRI_TEMP\")\n+        .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n+    // These are host paths. We need to convert them to the target.\n+    let path = CString::new(path).unwrap();\n+    let mut out = Vec::with_capacity(1024);\n+\n+    unsafe {\n+        extern \"Rust\" {\n+            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+        }\n+        let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n+        assert_eq!(ret, 0);\n+        let out = CStr::from_ptr(out.as_ptr()).to_str().unwrap();\n+        PathBuf::from(out)\n+    }\n }\n \n /// Prepare: compute filename and make sure the file does not exist."}, {"sha": "20e96a92c7c5fc6dc206c3cdf3db4d32a0637100", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=c19ca083ee79ffa49404b88f2172936fac831e25", "patch": "@@ -7,15 +7,23 @@ use std::os::unix::io::AsRawFd;\n use std::path::PathBuf;\n \n fn tmp() -> PathBuf {\n-    std::env::var(\"MIRI_TEMP\")\n-        .map(|tmp| {\n-            // MIRI_TEMP is set outside of our emulated\n-            // program, so it may have path separators that don't\n-            // correspond to our target platform. We normalize them here\n-            // before constructing a `PathBuf`\n-            return PathBuf::from(tmp.replace(\"\\\\\", \"/\"));\n-        })\n-        .unwrap_or_else(|_| std::env::temp_dir())\n+    use std::ffi::{CStr, CString};\n+\n+    let path = std::env::var(\"MIRI_TEMP\")\n+        .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n+    // These are host paths. We need to convert them to the target.\n+    let path = CString::new(path).unwrap();\n+    let mut out = Vec::with_capacity(1024);\n+\n+    unsafe {\n+        extern \"Rust\" {\n+            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+        }\n+        let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n+        assert_eq!(ret, 0);\n+        let out = CStr::from_ptr(out.as_ptr()).to_str().unwrap();\n+        PathBuf::from(out)\n+    }\n }\n \n /// Test allocating variant of `realpath`."}, {"sha": "901a2ab1028c2a96bd31f19bde10cd7756fa7e3b", "filename": "src/tools/miri/tests/pass/shims/fs.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19ca083ee79ffa49404b88f2172936fac831e25/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs?ref=c19ca083ee79ffa49404b88f2172936fac831e25", "patch": "@@ -31,20 +31,23 @@ fn main() {\n }\n \n fn tmp() -> PathBuf {\n-    std::env::var(\"MIRI_TEMP\")\n-        .map(|tmp| {\n-            // MIRI_TEMP is set outside of our emulated\n-            // program, so it may have path separators that don't\n-            // correspond to our target platform. We normalize them here\n-            // before constructing a `PathBuf`\n-\n-            #[cfg(windows)]\n-            return PathBuf::from(tmp.replace(\"/\", \"\\\\\"));\n-\n-            #[cfg(not(windows))]\n-            return PathBuf::from(tmp.replace(\"\\\\\", \"/\"));\n-        })\n-        .unwrap_or_else(|_| std::env::temp_dir())\n+    use std::ffi::{CStr, CString};\n+\n+    let path = std::env::var(\"MIRI_TEMP\")\n+        .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n+    // These are host paths. We need to convert them to the target.\n+    let path = CString::new(path).unwrap();\n+    let mut out = Vec::with_capacity(1024);\n+\n+    unsafe {\n+        extern \"Rust\" {\n+            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+        }\n+        let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n+        assert_eq!(ret, 0);\n+        let out = CStr::from_ptr(out.as_ptr()).to_str().unwrap();\n+        PathBuf::from(out)\n+    }\n }\n \n /// Prepare: compute filename and make sure the file does not exist."}]}