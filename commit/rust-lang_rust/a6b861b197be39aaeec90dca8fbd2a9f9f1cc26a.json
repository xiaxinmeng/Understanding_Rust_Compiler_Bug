{"sha": "a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Yjg2MWIxOTdiZTM5YWFlZWM5MGRjYThmYmQyYTlmOWYxY2MyNmE=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2015-12-13T13:48:43Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2015-12-18T22:33:29Z"}, "message": "[MIR] Initial implementation for translating calls.", "tree": {"sha": "e3ffe8dcb55eb425718cc71158c2939980e90b68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ffe8dcb55eb425718cc71158c2939980e90b68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a", "html_url": "https://github.com/rust-lang/rust/commit/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eadabd9f8818c562446751a0ef03ea2165e7056", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eadabd9f8818c562446751a0ef03ea2165e7056", "html_url": "https://github.com/rust-lang/rust/commit/4eadabd9f8818c562446751a0ef03ea2165e7056"}], "stats": {"total": 188, "additions": 164, "deletions": 24}, "files": [{"sha": "265969c52b39d3608b2078658272f3f2bd8b8d32", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 64, "deletions": 24, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a", "patch": "@@ -9,14 +9,18 @@\n // except according to those terms.\n \n use llvm::BasicBlockRef;\n+use middle::infer;\n+use middle::ty;\n use rustc::mir::repr as mir;\n use trans::adt;\n use trans::base;\n use trans::build;\n-use trans::common::Block;\n+use trans::common::{self, Block};\n use trans::debuginfo::DebugLoc;\n+use trans::type_of;\n \n use super::MirContext;\n+use super::operand::OperandValue::{FatPtr, Immediate, Ref};\n \n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     pub fn trans_block(&mut self, bb: mir::BasicBlock) {\n@@ -101,29 +105,65 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 base::build_return_block(bcx.fcx, bcx, return_ty, DebugLoc::None);\n             }\n \n-            mir::Terminator::Call { .. } => {\n-                unimplemented!()\n-                //let llbb = unimplemented!(); // self.make_landing_pad(panic_bb);\n-                //\n-                //let tr_dest = self.trans_lvalue(bcx, &data.destination);\n-                //\n-                //// Create the callee. This will always be a fn\n-                //// ptr and hence a kind of scalar.\n-                //let callee = self.trans_operand(bcx, &data.func);\n-                //\n-                //// Process the arguments.\n-                //\n-                //let args = unimplemented!();\n-                //\n-                //callee::trans_call_inner(bcx,\n-                //                         DebugLoc::None,\n-                //                         |bcx, _| Callee {\n-                //                             bcx: bcx,\n-                //                             data: CalleeData::Fn(callee.llval),\n-                //                             ty: callee.ty,\n-                //                         },\n-                //                         args,\n-                //                         Some(Dest::SaveIn(tr_dest.llval)));\n+            mir::Terminator::Call { ref data, targets } => {\n+                // The location we'll write the result of the call into.\n+                let call_dest = self.trans_lvalue(bcx, &data.destination);\n+\n+                // Create the callee. This will always be a fn\n+                // ptr and hence a kind of scalar.\n+                let callee = self.trans_operand(bcx, &data.func);\n+                let ret_ty = if let ty::TyBareFn(_, ref f) = callee.ty.sty {\n+                    let sig = bcx.tcx().erase_late_bound_regions(&f.sig);\n+                    let sig = infer::normalize_associated_type(bcx.tcx(), &sig);\n+                    sig.output\n+                } else {\n+                    panic!(\"trans_block: expected TyBareFn as callee\");\n+                };\n+\n+                // The arguments we'll be passing\n+                let mut llargs = vec![];\n+\n+                // Does the fn use an outptr? If so, that's the first arg.\n+                if let ty::FnConverging(ret_ty) = ret_ty {\n+                    if type_of::return_uses_outptr(bcx.ccx(), ret_ty) {\n+                        llargs.push(call_dest.llval);\n+                    }\n+                }\n+\n+                // Process the rest of the args.\n+                for arg in &data.args {\n+                    let arg_op = self.trans_operand(bcx, arg);\n+                    match arg_op.val {\n+                        Ref(llval) | Immediate(llval) => llargs.push(llval),\n+                        FatPtr(base, extra) => {\n+                            // The two words in a fat ptr are passed separately\n+                            llargs.push(base);\n+                            llargs.push(extra);\n+                        }\n+                    }\n+                }\n+\n+                // FIXME: Handle panics\n+                //let panic_bb = self.llblock(targets.1);\n+                //self.make_landing_pad(panic_bb);\n+\n+                // Do the actual call.\n+                let (llret, b) = base::invoke(bcx,\n+                                              callee.immediate(),\n+                                              &llargs[..],\n+                                              callee.ty,\n+                                              DebugLoc::None);\n+                bcx = b;\n+\n+                // Copy the return value into the destination.\n+                if let ty::FnConverging(ret_ty) = ret_ty {\n+                    if !type_of::return_uses_outptr(bcx.ccx(), ret_ty) &&\n+                       !common::type_is_zero_size(bcx.ccx(), ret_ty) {\n+                        base::store_ty(bcx, llret, call_dest.llval, ret_ty);\n+                    }\n+                }\n+\n+                build::Br(bcx, self.llblock(targets.0), DebugLoc::None)\n             }\n         }\n     }"}, {"sha": "2335a3c3348ebd2487404c37c1b63b7135c001b5", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=a6b861b197be39aaeec90dca8fbd2a9f9f1cc26a", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir]\n+fn test1(a: isize, b: (i32, i32), c: &[i32]) -> (isize, (i32, i32), &[i32]) {\n+    // Test passing a number of arguments including a fat pointer.\n+    // Also returning via an out pointer\n+    fn callee(a: isize, b: (i32, i32), c: &[i32]) -> (isize, (i32, i32), &[i32]) {\n+        (a, b, c)\n+    }\n+    callee(a, b, c)\n+}\n+\n+#[rustc_mir]\n+fn test2(a: isize) -> isize {\n+    // Test passing a single argument.\n+    // Not using out pointer.\n+    fn callee(a: isize) -> isize {\n+        a\n+    }\n+    callee(a)\n+}\n+\n+struct Foo;\n+impl Foo {\n+    fn inherent_method(&self, a: isize) -> isize { a }\n+}\n+\n+#[rustc_mir]\n+fn test3(x: &Foo, a: isize) -> isize {\n+    // Test calling inherent method\n+    x.inherent_method(a)\n+}\n+\n+trait Bar {\n+    fn extension_method(&self, a: isize) -> isize { a }\n+}\n+impl Bar for Foo {}\n+\n+#[rustc_mir]\n+fn test4(x: &Foo, a: isize) -> isize {\n+    // Test calling extension method\n+    x.extension_method(a)\n+}\n+\n+#[rustc_mir]\n+fn test5(x: &Bar, a: isize) -> isize {\n+    // Test calling method on trait object\n+    x.extension_method(a)\n+}\n+\n+#[rustc_mir]\n+fn test6<T: Bar>(x: &T, a: isize) -> isize {\n+    // Test calling extension method on generic callee\n+    x.extension_method(a)\n+}\n+\n+trait One<T = Self> {\n+    fn one() -> T;\n+}\n+impl One for isize {\n+    fn one() -> isize { 1 }\n+}\n+\n+#[rustc_mir]\n+fn test7() -> isize {\n+    // Test calling trait static method\n+    <isize as One>::one()\n+}\n+\n+struct Two;\n+impl Two {\n+    fn two() -> isize { 2 }\n+}\n+\n+#[rustc_mir]\n+fn test8() -> isize {\n+    // Test calling impl static method\n+    Two::two()\n+}\n+\n+fn main() {\n+    assert_eq!(test1(1, (2, 3), &[4, 5, 6]), (1, (2, 3), &[4, 5, 6][..]));\n+    assert_eq!(test2(98), 98);\n+    assert_eq!(test3(&Foo, 42), 42);\n+    assert_eq!(test4(&Foo, 970), 970);\n+    assert_eq!(test5(&Foo, 8576), 8576);\n+    assert_eq!(test6(&Foo, 12367), 12367);\n+    assert_eq!(test7(), 1);\n+    assert_eq!(test8(), 2);\n+}"}]}