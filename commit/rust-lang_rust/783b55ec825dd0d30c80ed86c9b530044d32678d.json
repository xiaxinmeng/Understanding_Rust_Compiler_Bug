{"sha": "783b55ec825dd0d30c80ed86c9b530044d32678d", "node_id": "C_kwDOAAsO6NoAKDc4M2I1NWVjODI1ZGQwZDMwYzgwZWQ4NmM5YjUzMDA0NGQzMjY3OGQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T03:33:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-23T20:32:24Z"}, "message": "Rename many interner functions.\n\n(This is a large commit. The changes to\n`compiler/rustc_middle/src/ty/context.rs` are the most important ones.)\n\nThe current naming scheme is a mess, with a mix of `_intern_`, `intern_`\nand `mk_` prefixes, with little consistency. In particular, in many\ncases it's easy to use an iterator interner when a (preferable) slice\ninterner is available.\n\nThe guiding principles of the new naming system:\n- No `_intern_` prefixes.\n- The `intern_` prefix is for internal operations.\n- The `mk_` prefix is for external operations.\n- For cases where there is a slice interner and an iterator interner,\n  the former is `mk_foo` and the latter is `mk_foo_from_iter`.\n\nAlso, `slice_interners!` and `direct_interners!` can now be `pub` or\nnon-`pub`, which helps enforce the internal/external operations\ndivision.\n\nIt's not perfect, but I think it's a clear improvement.\n\nThe following lists show everything that was renamed.\n\nslice_interners\n- const_list\n  - mk_const_list -> mk_const_list_from_iter\n  - intern_const_list -> mk_const_list\n- substs\n  - mk_substs -> mk_substs_from_iter\n  - intern_substs -> mk_substs\n  - check_substs -> check_and_mk_substs (this is a weird one)\n- canonical_var_infos\n  - intern_canonical_var_infos -> mk_canonical_var_infos\n- poly_existential_predicates\n  - mk_poly_existential_predicates -> mk_poly_existential_predicates_from_iter\n  - intern_poly_existential_predicates -> mk_poly_existential_predicates\n  - _intern_poly_existential_predicates -> intern_poly_existential_predicates\n- predicates\n  - mk_predicates -> mk_predicates_from_iter\n  - intern_predicates -> mk_predicates\n  - _intern_predicates -> intern_predicates\n- projs\n  - intern_projs -> mk_projs\n- place_elems\n  - mk_place_elems -> mk_place_elems_from_iter\n  - intern_place_elems -> mk_place_elems\n- bound_variable_kinds\n  - mk_bound_variable_kinds -> mk_bound_variable_kinds_from_iter\n  - intern_bound_variable_kinds -> mk_bound_variable_kinds\n\ndirect_interners\n- region\n  - intern_region (unchanged)\n- const\n  - mk_const_internal -> intern_const\n- const_allocation\n  - intern_const_alloc -> mk_const_alloc\n- layout\n  - intern_layout -> mk_layout\n- adt_def\n  - intern_adt_def -> mk_adt_def_from_data (unusual case, hard to avoid)\n  - alloc_adt_def(!) -> mk_adt_def\n- external_constraints\n  - intern_external_constraints -> mk_external_constraints\n\nOther\n- type_list\n  - mk_type_list -> mk_type_list_from_iter\n  - intern_type_list -> mk_type_list\n- tup\n  - mk_tup -> mk_tup_from_iter\n  - intern_tup -> mk_tup", "tree": {"sha": "42cba6b215243b9bc1b2a4a0489e8cdf01341373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42cba6b215243b9bc1b2a4a0489e8cdf01341373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783b55ec825dd0d30c80ed86c9b530044d32678d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783b55ec825dd0d30c80ed86c9b530044d32678d", "html_url": "https://github.com/rust-lang/rust/commit/783b55ec825dd0d30c80ed86c9b530044d32678d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783b55ec825dd0d30c80ed86c9b530044d32678d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa94d2583162a499227faa91dae474160fda460", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa94d2583162a499227faa91dae474160fda460", "html_url": "https://github.com/rust-lang/rust/commit/daa94d2583162a499227faa91dae474160fda460"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "b8428d66a5dc8b207b9de4e72737a72082b2dadc", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=783b55ec825dd0d30c80ed86c9b530044d32678d", "patch": "@@ -514,7 +514,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n     }\n \n     ParamEnv::new(\n-        tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n+        tcx.mk_predicates_from_iter(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n                     trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),"}, {"sha": "0b0c6adc5045afef5935b3a20412616ff6a16ae6", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=783b55ec825dd0d30c80ed86c9b530044d32678d", "patch": "@@ -173,7 +173,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let Some(iter_item) = cx.tcx\n             .associated_items(iter_trait)\n             .find_by_name_and_kind(cx.tcx, Ident::with_dummy_span(Symbol::intern(\"Item\")), AssocKind::Type, iter_trait)\n-        && let substs = cx.tcx.intern_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n+        && let substs = cx.tcx.mk_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {"}, {"sha": "df26b36b7b32a2ca3461c69f0f507bd2bc444ac4", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=783b55ec825dd0d30c80ed86c9b530044d32678d", "patch": "@@ -414,7 +414,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                             }\n                         });\n \n-                        let new_subst = cx.tcx.mk_substs(\n+                        let new_subst = cx.tcx.mk_substs_from_iter(\n                             call_substs.iter()\n                                 .enumerate()\n                                 .map(|(i, t)|"}, {"sha": "2fdd775ad4893bfa472e8ed181665f7156bb1b7d", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=783b55ec825dd0d30c80ed86c9b530044d32678d", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n-                        cx.tcx.mk_projection(target_id, cx.tcx.intern_substs(&[GenericArg::from(indexed_ty)])),\n+                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs(&[GenericArg::from(indexed_ty)])),\n                     ) {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "e3bfffacb525004b0a5c02f02cfa03c1cbeb9ef1", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=783b55ec825dd0d30c80ed86c9b530044d32678d", "patch": "@@ -237,7 +237,7 @@ pub fn constant<'tcx>(\n         typeck_results,\n         param_env: lcx.param_env,\n         needed_resolution: false,\n-        substs: lcx.tcx.intern_substs(&[]),\n+        substs: lcx.tcx.mk_substs(&[]),\n     };\n     cx.expr(e).map(|cst| (cst, cx.needed_resolution))\n }\n@@ -306,7 +306,7 @@ pub fn constant_context<'a, 'tcx>(\n         typeck_results,\n         param_env: lcx.param_env,\n         needed_resolution: false,\n-        substs: lcx.tcx.intern_substs(&[]),\n+        substs: lcx.tcx.mk_substs(&[]),\n     }\n }\n "}, {"sha": "f8ec4bb54930adeaef870dbe5a1f9199a09b9a30", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b55ec825dd0d30c80ed86c9b530044d32678d/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=783b55ec825dd0d30c80ed86c9b530044d32678d", "patch": "@@ -237,7 +237,7 @@ pub fn implements_trait_with_env<'tcx>(\n         kind: TypeVariableOriginKind::MiscVariable,\n         span: DUMMY_SP,\n     };\n-    let ty_params = tcx.mk_substs(\n+    let ty_params = tcx.mk_substs_from_iter(\n         ty_params\n             .into_iter()\n             .map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())),\n@@ -1065,7 +1065,7 @@ pub fn make_projection<'tcx>(\n         tcx,\n         container_id,\n         assoc_ty,\n-        tcx.mk_substs(substs.into_iter().map(Into::into)),\n+        tcx.mk_substs_from_iter(substs.into_iter().map(Into::into)),\n     )\n }\n "}]}