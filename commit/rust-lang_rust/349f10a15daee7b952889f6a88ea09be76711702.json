{"sha": "349f10a15daee7b952889f6a88ea09be76711702", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OWYxMGExNWRhZWU3Yjk1Mjg4OWY2YTg4ZWEwOWJlNzY3MTE3MDI=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-08-15T17:37:03Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-08-15T17:37:03Z"}, "message": "update E0375 to new format", "tree": {"sha": "5cba45949dc430747474b4eba51b9f6711ed4c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cba45949dc430747474b4eba51b9f6711ed4c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349f10a15daee7b952889f6a88ea09be76711702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349f10a15daee7b952889f6a88ea09be76711702", "html_url": "https://github.com/rust-lang/rust/commit/349f10a15daee7b952889f6a88ea09be76711702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349f10a15daee7b952889f6a88ea09be76711702/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e64f68817d850ccbe642d7f067083bc655115d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/e64f68817d850ccbe642d7f067083bc655115d84", "html_url": "https://github.com/rust-lang/rust/commit/e64f68817d850ccbe642d7f067083bc655115d84"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "f33fb299cacc12e655451cd713dac0186309221b", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/349f10a15daee7b952889f6a88ea09be76711702/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349f10a15daee7b952889f6a88ea09be76711702/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=349f10a15daee7b952889f6a88ea09be76711702", "patch": "@@ -458,13 +458,25 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                                        being coerced, none found\");\n                             return;\n                         } else if diff_fields.len() > 1 {\n-                            span_err!(tcx.sess, span, E0375,\n-                                      \"the trait `CoerceUnsized` may only be implemented \\\n-                                       for a coercion between structures with one field \\\n-                                       being coerced, but {} fields need coercions: {}\",\n-                                       diff_fields.len(), diff_fields.iter().map(|&(i, a, b)| {\n-                                            format!(\"{} ({} to {})\", fields[i].name, a, b)\n-                                       }).collect::<Vec<_>>().join(\", \"));\n+                            let item = tcx.map.expect_item(impl_node_id);\n+                            let span = if let ItemImpl(_, _, _, Some(ref t), _, _) = item.node {\n+                                t.path.span\n+                            } else {\n+                                tcx.map.span(impl_node_id)\n+                            };\n+\n+                            let mut err = struct_span_err!(tcx.sess, span, E0375,\n+                                      \"implementing the trait `CoerceUnsized` \\\n+                                       requires multiple coercions\");\n+                            err.note(\"`CoerceUnsized` may only be implemented for \\\n+                                      a coercion between structures with one field being coerced\");\n+                            err.note(&format!(\"currently, {} fields need coercions: {}\",\n+                                             diff_fields.len(),\n+                                             diff_fields.iter().map(|&(i, a, b)| {\n+                                                format!(\"{} ({} to {})\", fields[i].name, a, b)\n+                                             }).collect::<Vec<_>>().join(\", \") ));\n+                            err.span_label(span, &format!(\"requires multiple coercions\"));\n+                            err.emit();\n                             return;\n                         }\n "}, {"sha": "29d8e920c4ce767ef0ce81642cc208c14212444b", "filename": "src/test/compile-fail/E0375.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349f10a15daee7b952889f6a88ea09be76711702/src%2Ftest%2Fcompile-fail%2FE0375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349f10a15daee7b952889f6a88ea09be76711702/src%2Ftest%2Fcompile-fail%2FE0375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0375.rs?ref=349f10a15daee7b952889f6a88ea09be76711702", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![feature(coerce_unsized)]\n use std::ops::CoerceUnsized;\n \n@@ -17,6 +19,10 @@ struct Foo<T: ?Sized, U: ?Sized> {\n     c: U,\n }\n \n-impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {} //~ ERROR E0375\n+impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n+//~^ ERROR E0375\n+//~| NOTE requires multiple coercions\n+//~| NOTE `CoerceUnsized` may only be implemented for a coercion between structures with one field being coerced\n+//~| NOTE currently, 2 fields need coercions: b (T to U), c (U to T)\n \n fn main() {}"}]}