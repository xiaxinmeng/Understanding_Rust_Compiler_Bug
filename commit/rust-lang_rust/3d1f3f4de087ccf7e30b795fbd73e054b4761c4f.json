{"sha": "3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMWYzZjRkZTA4N2NjZjdlMzBiNzk1ZmJkNzNlMDU0YjQ3NjFjNGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-11-05T19:50:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-11-05T20:51:18Z"}, "message": "Rename misleading contains_managed to owns_managed", "tree": {"sha": "67b80cd97aa0ba3f4d86adbf006b5f15138894bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b80cd97aa0ba3f4d86adbf006b5f15138894bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "html_url": "https://github.com/rust-lang/rust/commit/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3191a450cc08064be6c078773c5135a3b4e83e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3191a450cc08064be6c078773c5135a3b4e83e5", "html_url": "https://github.com/rust-lang/rust/commit/f3191a450cc08064be6c078773c5135a3b4e83e5"}], "stats": {"total": 70, "additions": 44, "deletions": 26}, "files": [{"sha": "9bafea6d861be50987060cdb11b15c6402fc7699", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -1600,7 +1600,7 @@ fn compile_submatch_continue(mut bcx: @mut Block,\n         let pat_ty = node_id_type(bcx, pat_id);\n         let llbox = Load(bcx, val);\n         let unboxed = match ty::get(pat_ty).sty {\n-            ty::ty_uniq(*) if !ty::type_contents(bcx.tcx(), pat_ty).contains_managed() => llbox,\n+            ty::ty_uniq(*) if !ty::type_contents(bcx.tcx(), pat_ty).owns_managed() => llbox,\n             _ => GEPi(bcx, llbox, [0u, abi::box_field_body])\n         };\n         compile_submatch(bcx, enter_uniq(bcx, dm, m, col, val),\n@@ -2220,7 +2220,7 @@ fn bind_irrefutable_pat(bcx: @mut Block,\n             let pat_ty = node_id_type(bcx, pat.id);\n             let llbox = Load(bcx, val);\n             let unboxed = match ty::get(pat_ty).sty {\n-                ty::ty_uniq(*) if !ty::type_contents(bcx.tcx(), pat_ty).contains_managed() => llbox,\n+                ty::ty_uniq(*) if !ty::type_contents(bcx.tcx(), pat_ty).owns_managed() => llbox,\n                     _ => GEPi(bcx, llbox, [0u, abi::box_field_body])\n             };\n             bcx = bind_irrefutable_pat(bcx, inner, unboxed, binding_mode);"}, {"sha": "37e4d4e82be51fde768c59cd7d311caa8a8a1117", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -409,7 +409,7 @@ pub fn malloc_general(bcx: @mut Block, t: ty::t, heap: heap) -> MallocResult {\n }\n \n pub fn heap_for_unique(bcx: @mut Block, t: ty::t) -> heap {\n-    if ty::type_contents(bcx.tcx(), t).contains_managed() {\n+    if ty::type_contents(bcx.tcx(), t).owns_managed() {\n         heap_managed_unique\n     } else {\n         heap_exchange"}, {"sha": "9629615c64dd9210c4678ae390e7b5620d7b4528", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -156,7 +156,7 @@ pub fn mk_closure_tys(tcx: ty::ctxt,\n }\n \n fn heap_for_unique_closure(bcx: @mut Block, t: ty::t) -> heap {\n-    if ty::type_contents(bcx.tcx(), t).contains_managed() {\n+    if ty::type_contents(bcx.tcx(), t).owns_managed() {\n         heap_managed_unique\n     } else {\n         heap_exchange_closure"}, {"sha": "1efa7f763d8f9a96a3240317947c53d3559ac589", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -566,7 +566,7 @@ impl Datum {\n             }\n         };\n \n-        if !header && !ty::type_contents(bcx.tcx(), content_ty).contains_managed() {\n+        if !header && !ty::type_contents(bcx.tcx(), content_ty).owns_managed() {\n             let ptr = self.to_value_llval(bcx);\n             let ty = type_of::type_of(bcx.ccx(), content_ty);\n             let body = PointerCast(bcx, ptr, ty.ptr_to());"}, {"sha": "c6a33864620ad3f0756e8d426fc44c577baa8232", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -2060,7 +2060,7 @@ fn type_metadata(cx: &mut CrateContext,\n                 ty::vstore_fixed(len) => {\n                     fixed_vec_metadata(cx, mt.ty, len, usage_site_span)\n                 }\n-                ty::vstore_uniq if ty::type_contents(cx.tcx, mt.ty).contains_managed() => {\n+                ty::vstore_uniq if ty::type_contents(cx.tcx, mt.ty).owns_managed() => {\n                     let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, usage_site_span);\n                     pointer_type_metadata(cx, t, boxed_vec_metadata)\n                 }\n@@ -2077,7 +2077,7 @@ fn type_metadata(cx: &mut CrateContext,\n                 }\n             }\n         },\n-        ty::ty_uniq(ref mt) if ty::type_contents(cx.tcx, mt.ty).contains_managed() => {\n+        ty::ty_uniq(ref mt) if ty::type_contents(cx.tcx, mt.ty).owns_managed() => {\n             create_pointer_to_box_metadata(cx, t, mt.ty)\n         },\n         ty::ty_uniq(ref mt)    |"}, {"sha": "f461120e4c38aa8644e537e3d7c86a659fe1123d", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -603,7 +603,7 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n \n     let has_header = match ty::get(t).sty {\n         ty::ty_box(*) => true,\n-        ty::ty_uniq(*) => ty::type_contents(ccx.tcx, t).contains_managed(),\n+        ty::ty_uniq(*) => ty::type_contents(ccx.tcx, t).owns_managed(),\n         _ => false\n     };\n "}, {"sha": "a7af10b491ee6d9443035178f5996ec16572cb10", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -387,9 +387,9 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n             let tp_ty = substs.tys[0];\n             Ret(bcx, C_bool(ty::type_needs_drop(ccx.tcx, tp_ty)));\n         }\n-        \"contains_managed\" => {\n+        \"owns_managed\" => {\n             let tp_ty = substs.tys[0];\n-            Ret(bcx, C_bool(ty::type_contents(ccx.tcx, tp_ty).contains_managed()));\n+            Ret(bcx, C_bool(ty::type_contents(ccx.tcx, tp_ty).owns_managed()));\n         }\n         \"visit_tydesc\" => {\n             let td = get_param(decl, first_real_arg);"}, {"sha": "2f4fcfed20be9754c7302cd54186f20df087a9d1", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -183,7 +183,7 @@ impl Reflector {\n           ty::ty_evec(ref mt, vst) => {\n               let (name, extra) = self.vstore_name_and_extra(t, vst);\n               let extra = extra + self.c_mt(mt);\n-              if \"uniq\" == name && ty::type_contents(bcx.tcx(), t).contains_managed() {\n+              if \"uniq\" == name && ty::type_contents(bcx.tcx(), t).owns_managed() {\n                   self.visit(\"evec_uniq_managed\", extra)\n               } else {\n                   self.visit(~\"evec_\" + name, extra)\n@@ -195,7 +195,7 @@ impl Reflector {\n           }\n           ty::ty_uniq(ref mt) => {\n               let extra = self.c_mt(mt);\n-              if ty::type_contents(bcx.tcx(), t).contains_managed() {\n+              if ty::type_contents(bcx.tcx(), t).owns_managed() {\n                   self.visit(\"uniq_managed\", extra)\n               } else {\n                   self.visit(\"uniq\", extra)"}, {"sha": "93718fc1a238292b2a1edd09d3da4ca9bb536f52", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -65,7 +65,7 @@ pub fn get_alloc(bcx: @mut Block, vptr: ValueRef) -> ValueRef {\n }\n \n pub fn get_bodyptr(bcx: @mut Block, vptr: ValueRef, t: ty::t) -> ValueRef {\n-    if ty::type_contents(bcx.tcx(), t).contains_managed() {\n+    if ty::type_contents(bcx.tcx(), t).owns_managed() {\n         GEPi(bcx, vptr, [0u, abi::box_field_body])\n     } else {\n         vptr"}, {"sha": "604321a0492a117728db3772764cd95152b20109", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -226,7 +226,7 @@ pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n       ty::ty_opaque_box => Type::opaque_box(cx).ptr_to(),\n       ty::ty_uniq(ref mt) => {\n           let ty = type_of(cx, mt.ty);\n-          if ty::type_contents(cx.tcx, mt.ty).contains_managed() {\n+          if ty::type_contents(cx.tcx, mt.ty).owns_managed() {\n               Type::unique(cx, &ty).ptr_to()\n           } else {\n               ty.ptr_to()\n@@ -235,7 +235,7 @@ pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n       ty::ty_evec(ref mt, ty::vstore_uniq) => {\n           let ty = type_of(cx, mt.ty);\n           let ty = Type::vec(cx.sess.targ_cfg.arch, &ty);\n-          if ty::type_contents(cx.tcx, mt.ty).contains_managed() {\n+          if ty::type_contents(cx.tcx, mt.ty).owns_managed() {\n               Type::unique(cx, &ty).ptr_to()\n           } else {\n               ty.ptr_to()"}, {"sha": "8ff270e236fa5901c43678be67cde359a1fb765b", "filename": "src/librustc/middle/trans/uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -27,7 +27,7 @@ pub fn make_free_glue(bcx: @mut Block, vptrptr: ValueRef, box_ty: ty::t)\n         let body_datum = box_datum.box_body(bcx);\n         let bcx = glue::drop_ty(bcx, body_datum.to_ref_llval(bcx),\n                                 body_datum.ty);\n-        if ty::type_contents(bcx.tcx(), box_ty).contains_managed() {\n+        if ty::type_contents(bcx.tcx(), box_ty).owns_managed() {\n             glue::trans_free(bcx, box_datum.val)\n         } else {\n             glue::trans_exchange_free(bcx, box_datum.val)"}, {"sha": "7f9edba2f141673bd5377b1a9abf37e093355b6c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -1954,7 +1954,7 @@ impl TypeContents {\n         !self.intersects(TC::Nonsendable)\n     }\n \n-    pub fn contains_managed(&self) -> bool {\n+    pub fn owns_managed(&self) -> bool {\n         self.intersects(TC::OwnsManaged)\n     }\n "}, {"sha": "32284584b65837e03a54da2710679401ae2eb0ff", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -3732,7 +3732,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                ty::mk_nil())\n             }\n             \"needs_drop\" => (1u, ~[], ty::mk_bool()),\n-            \"contains_managed\" => (1u, ~[], ty::mk_bool()),\n+            \"owns_managed\" => (1u, ~[], ty::mk_bool()),\n             \"atomic_xchg\"     | \"atomic_xadd\"     | \"atomic_xsub\"     |\n             \"atomic_xchg_acq\" | \"atomic_xadd_acq\" | \"atomic_xsub_acq\" |\n             \"atomic_xchg_rel\" | \"atomic_xadd_rel\" | \"atomic_xsub_rel\" => {"}, {"sha": "030364c75af4b36b4f3a1f78537f5765614aeacd", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -337,8 +337,13 @@ extern \"rust-intrinsic\" {\n     pub fn needs_drop<T>() -> bool;\n \n     /// Returns `true` if a type is managed (will be allocated on the local heap)\n+    #[cfg(stage0)]\n     pub fn contains_managed<T>() -> bool;\n \n+    /// Returns `true` if a type is managed (will be allocated on the local heap)\n+    #[cfg(not(stage0))]\n+    pub fn owns_managed<T>() -> bool;\n+\n     pub fn visit_tydesc(td: *TyDesc, tv: &mut TyVisitor);\n \n     /// Get the address of the `__morestack` stack growth function."}, {"sha": "c9d557350151eba2f95318da29924a0d63b98e8d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1f3f4de087ccf7e30b795fbd73e054b4761c4f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3d1f3f4de087ccf7e30b795fbd73e054b4761c4f", "patch": "@@ -121,11 +121,19 @@ use mem::size_of;\n use uint;\n use unstable::finally::Finally;\n use unstable::intrinsics;\n-use unstable::intrinsics::{get_tydesc, contains_managed};\n+use unstable::intrinsics::{get_tydesc};\n use unstable::raw::{Box, Repr, Slice, Vec};\n use vec;\n use util;\n \n+#[cfg(not(stage0))]\n+use unstable::intrinsics::owns_managed;\n+\n+#[cfg(stage0)]\n+unsafe fn owns_managed<T>() -> bool {\n+    intrinsics::contains_managed::<T>()\n+}\n+\n /**\n  * Creates and initializes an owned vector.\n  *\n@@ -180,7 +188,7 @@ pub fn from_elem<T:Clone>(n_elts: uint, t: T) -> ~[T] {\n #[inline]\n pub fn with_capacity<T>(capacity: uint) -> ~[T] {\n     unsafe {\n-        if contains_managed::<T>() {\n+        if owns_managed::<T>() {\n             let mut vec = ~[];\n             vec.reserve(capacity);\n             vec\n@@ -1401,7 +1409,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         if self.capacity() < n {\n             unsafe {\n                 let td = get_tydesc::<T>();\n-                if contains_managed::<T>() {\n+                if owns_managed::<T>() {\n                     let ptr: *mut *mut Box<Vec<()>> = cast::transmute(self);\n                     ::at_vec::raw::reserve_raw(td, ptr, n);\n                 } else {\n@@ -1437,7 +1445,7 @@ impl<T> OwnedVector<T> for ~[T] {\n     #[inline]\n     fn capacity(&self) -> uint {\n         unsafe {\n-            if contains_managed::<T>() {\n+            if owns_managed::<T>() {\n                 let repr: **Box<Vec<()>> = cast::transmute(self);\n                 (**repr).data.alloc / mem::nonzero_size_of::<T>()\n             } else {\n@@ -1460,7 +1468,7 @@ impl<T> OwnedVector<T> for ~[T] {\n     #[inline]\n     fn push(&mut self, t: T) {\n         unsafe {\n-            if contains_managed::<T>() {\n+            if owns_managed::<T>() {\n                 let repr: **Box<Vec<()>> = cast::transmute(&mut *self);\n                 let fill = (**repr).data.fill;\n                 if (**repr).data.alloc <= fill {\n@@ -1482,7 +1490,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         // This doesn't bother to make sure we have space.\n         #[inline] // really pretty please\n         unsafe fn push_fast<T>(this: &mut ~[T], t: T) {\n-            if contains_managed::<T>() {\n+            if owns_managed::<T>() {\n                 let repr: **mut Box<Vec<u8>> = cast::transmute(this);\n                 let fill = (**repr).data.fill;\n                 (**repr).data.fill += mem::nonzero_size_of::<T>();\n@@ -2057,9 +2065,14 @@ pub mod raw {\n     use mem;\n     use unstable::intrinsics;\n     use vec::{with_capacity, ImmutableVector, MutableVector};\n-    use unstable::intrinsics::contains_managed;\n     use unstable::raw::{Box, Vec, Slice};\n \n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::owns_managed;\n+\n+    #[cfg(stage0)]\n+    use vec::owns_managed;\n+\n     /**\n      * Sets the length of a vector\n      *\n@@ -2069,7 +2082,7 @@ pub mod raw {\n      */\n     #[inline]\n     pub unsafe fn set_len<T>(v: &mut ~[T], new_len: uint) {\n-        if contains_managed::<T>() {\n+        if owns_managed::<T>() {\n             let repr: **mut Box<Vec<()>> = cast::transmute(v);\n             (**repr).data.fill = new_len * mem::nonzero_size_of::<T>();\n         } else {"}]}