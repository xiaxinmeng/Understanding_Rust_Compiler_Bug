{"sha": "42ca8a70d60d066367484b153c1d84de728b14cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyY2E4YTcwZDYwZDA2NjM2NzQ4NGIxNTNjMWQ4NGRlNzI4YjE0Y2Y=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-28T13:04:21Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-28T15:51:06Z"}, "message": "doc: More efficient Monty Hall simulation", "tree": {"sha": "ff4a202e606877858009ff99f89779e0e4da3cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff4a202e606877858009ff99f89779e0e4da3cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42ca8a70d60d066367484b153c1d84de728b14cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42ca8a70d60d066367484b153c1d84de728b14cf", "html_url": "https://github.com/rust-lang/rust/commit/42ca8a70d60d066367484b153c1d84de728b14cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42ca8a70d60d066367484b153c1d84de728b14cf/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1ba83292e767365be925c132027c67ec40fe68", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1ba83292e767365be925c132027c67ec40fe68", "html_url": "https://github.com/rust-lang/rust/commit/bf1ba83292e767365be925c132027c67ec40fe68"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "013640dba5de4698ffa28a9f7fd35844d439e8f3", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42ca8a70d60d066367484b153c1d84de728b14cf/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42ca8a70d60d066367484b153c1d84de728b14cf/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=42ca8a70d60d066367484b153c1d84de728b14cf", "patch": "@@ -95,12 +95,11 @@ use std::rand::distributions::{IndependentSample, Range};\n \n struct SimulationResult {\n     win: bool,\n-    switch: bool\n+    switch: bool,\n }\n \n // Run a single simulation of the Monty Hall problem.\n-fn simulate<R: Rng>(rng: &mut R) -> SimulationResult {\n-    let random_door = Range::new(0u, 3);\n+fn simulate<R: Rng>(random_door: &Range<uint>, rng: &mut R) -> SimulationResult {\n     let car = random_door.ind_sample(rng);\n \n     // This is our initial choice\n@@ -121,32 +120,33 @@ fn simulate<R: Rng>(rng: &mut R) -> SimulationResult {\n // Returns the door the game host opens given our choice and knowledge of\n // where the car is. The game host will never open the door with the car.\n fn game_host_open<R: Rng>(car: uint, choice: uint, rng: &mut R) -> uint {\n-    let choices = free_doors(vec![car, choice]);\n+    let choices = free_doors(&[car, choice]);\n     rand::sample(rng, choices.move_iter(), 1)[0]\n }\n \n // Returns the door we switch to, given our current choice and\n // the open door. There will only be one valid door.\n fn switch_door(choice: uint, open: uint) -> uint {\n-    free_doors(vec![choice, open])[0]\n+    free_doors(&[choice, open])[0]\n }\n \n-fn free_doors(blocked: Vec<uint>) -> Vec<uint> {\n+fn free_doors(blocked: &[uint]) -> Vec<uint> {\n     range(0u, 3).filter(|x| !blocked.contains(x)).collect()\n }\n \n fn main() {\n-    // The estimation will be more accuraty with more simulations\n+    // The estimation will be more accurate with more simulations\n     let num_simulations = 10000u;\n \n     let mut rng = rand::task_rng();\n+    let random_door = Range::new(0u, 3);\n \n     let (mut switch_wins, mut switch_losses) = (0u, 0u);\n     let (mut keep_wins, mut keep_losses) = (0u, 0u);\n \n     println!(\"Running {} simulations...\", num_simulations);\n     for _ in range(0, num_simulations) {\n-        let result = simulate(&mut rng);\n+        let result = simulate(&random_door, &mut rng);\n \n         match (result.win, result.switch) {\n             (true, true) => switch_wins += 1,"}]}