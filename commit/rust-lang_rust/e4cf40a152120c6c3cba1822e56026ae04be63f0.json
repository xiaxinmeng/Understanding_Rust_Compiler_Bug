{"sha": "e4cf40a152120c6c3cba1822e56026ae04be63f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Y2Y0MGExNTIxMjBjNmMzY2JhMTgyMmU1NjAyNmFlMDRiZTYzZjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-02T09:55:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-02T10:27:09Z"}, "message": "New config in package.json", "tree": {"sha": "45d326021aa8f60c35e44442b2349fc9ff1944bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45d326021aa8f60c35e44442b2349fc9ff1944bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4cf40a152120c6c3cba1822e56026ae04be63f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4cf40a152120c6c3cba1822e56026ae04be63f0", "html_url": "https://github.com/rust-lang/rust/commit/e4cf40a152120c6c3cba1822e56026ae04be63f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4cf40a152120c6c3cba1822e56026ae04be63f0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dde0f92dee7080b91343238ddfa312cc1a7001a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dde0f92dee7080b91343238ddfa312cc1a7001a", "html_url": "https://github.com/rust-lang/rust/commit/0dde0f92dee7080b91343238ddfa312cc1a7001a"}], "stats": {"total": 312, "additions": 166, "deletions": 146}, "files": [{"sha": "b19421c16e74a10ffe09f0795a9e5f7855cd98ac", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e4cf40a152120c6c3cba1822e56026ae04be63f0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cf40a152120c6c3cba1822e56026ae04be63f0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e4cf40a152120c6c3cba1822e56026ae04be63f0", "patch": "@@ -18,13 +18,13 @@ pub struct Config {\n     pub client_caps: ClientCapsConfig,\n \n     pub with_sysroot: bool,\n+    // TODO: verify that it means what I think it means\n     pub publish_diagnostics: bool,\n-    pub use_client_watching: bool,\n     // TODO: move to experimental capabilities\n     pub vscode_lldb: bool,\n     pub lru_capacity: Option<usize>,\n     pub proc_macro_srv: Option<String>,\n-    pub exclude_globs: Vec<String>,\n+    pub files: FilesConfig,\n     pub notifications: NotificationsConfig,\n \n     pub cargo: CargoConfig,\n@@ -36,6 +36,18 @@ pub struct Config {\n     pub call_info_full: bool,\n }\n \n+#[derive(Debug, Clone)]\n+pub struct FilesConfig {\n+    watcher: FilesWatcher,\n+    exclude: Vec<String>,\n+}\n+\n+#[derive(Debug, Clone)]\n+enum FilesWatcher {\n+    Client,\n+    Notify,\n+}\n+\n #[derive(Debug, Clone)]\n pub struct NotificationsConfig {\n     pub workspace_loaded: bool,\n@@ -67,11 +79,10 @@ impl Default for Config {\n \n             with_sysroot: true,\n             publish_diagnostics: true,\n-            use_client_watching: false,\n             vscode_lldb: false,\n             lru_capacity: None,\n             proc_macro_srv: None,\n-            exclude_globs: Vec::new(),\n+            files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n             notifications: NotificationsConfig {\n                 workspace_loaded: true,\n                 cargo_toml_not_found: true,\n@@ -112,39 +123,43 @@ impl Config {\n \n         set(value, \"/withSysroot\", &mut self.with_sysroot);\n         set(value, \"/featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n-        set(value, \"/useClientWatching\", &mut self.use_client_watching);\n         set(value, \"/vscodeLldb\", &mut self.vscode_lldb);\n         set(value, \"/lruCapacity\", &mut self.lru_capacity);\n-        set(value, \"/excludeGlobs\", &mut self.exclude_globs);\n-        set(value, \"/featureFlags/notifications.workspace-loaded\", &mut self.notifications.workspace_loaded);\n-        set(value, \"/featureFlags/notifications.cargo-toml-not-found\", &mut self.notifications.cargo_toml_not_found);\n-\n-        set(value, \"/cargoFeatures/noDefaultFeatures\", &mut self.cargo.no_default_features);\n-        set(value, \"/cargoFeatures/allFeatures\", &mut self.cargo.all_features);\n-        set(value, \"/cargoFeatures/features\", &mut self.cargo.features);\n-        set(value, \"/cargoFeatures/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+        if let Some(watcher) =  get::<String>(value, \"/files/watcher\") {\n+            self.files.watcher = match watcher.as_str() {\n+                \"client\" => FilesWatcher::Client,\n+                \"notify\"| _ => FilesWatcher::Notify,\n+            }\n+        }\n+        set(value, \"/notifications/workspaceLoaded\", &mut self.notifications.workspace_loaded);\n+        set(value, \"/notifications/cargoTomlNotFound\", &mut self.notifications.cargo_toml_not_found);\n+\n+        set(value, \"/cargo/noDefaultFeatures\", &mut self.cargo.no_default_features);\n+        set(value, \"/cargo/allFeatures\", &mut self.cargo.all_features);\n+        set(value, \"/cargo/features\", &mut self.cargo.features);\n+        set(value, \"/cargo/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n         if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n-            set(value, \"/rustfmtArgs\", extra_args);\n+            set(value, \"/rustfmt/extraArgs\", extra_args);\n         }\n-        if let Some(false) = get(value, \"cargo_watch_enable\") {\n+        if let Some(false) = get(value, \"/checkOnSave/enable\") {\n             self.check = None\n         } else {\n             if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets }) = &mut self.check\n             {\n-                set(value, \"/cargoWatchArgs\", extra_args);\n-                set(value, \"/cargoWatchCommand\", command);\n-                set(value, \"/cargoWatchAllTargets\", all_targets);\n+                set(value, \"/checkOnSave/extraArgs\", extra_args);\n+                set(value, \"/checkOnSave/command\", command);\n+                set(value, \"/checkOnSave/allTargets\", all_targets);\n             }\n         };\n \n-        set(value, \"/inlayHintsType\", &mut self.inlay_hints.type_hints);\n-        set(value, \"/inlayHintsParameter\", &mut self.inlay_hints.parameter_hints);\n-        set(value, \"/inlayHintsChaining\", &mut self.inlay_hints.chaining_hints);\n-        set(value, \"/inlayHintsMaxLength\", &mut self.inlay_hints.max_length);\n-        set(value, \"/featureFlags/completion.enable-postfix\", &mut self.completion.enable_postfix_completions);\n-        set(value, \"/featureFlags/completion.insertion.add-call-parenthesis\", &mut self.completion.add_call_parenthesis);\n-        set(value, \"/featureFlags/completion.insertion.add-argument-snippets\", &mut self.completion.add_call_argument_snippets);\n-        set(value, \"/featureFlags/call-info.full\", &mut self.call_info_full);\n+        set(value, \"/inlayHints/typeHints\", &mut self.inlay_hints.type_hints);\n+        set(value, \"/inlayHints/parameterHints\", &mut self.inlay_hints.parameter_hints);\n+        set(value, \"/inlayHints/chainingHints\", &mut self.inlay_hints.chaining_hints);\n+        set(value, \"/inlayHints/maxLength\", &mut self.inlay_hints.max_length);\n+        set(value, \"/completion/postfix/enable\", &mut self.completion.enable_postfix_completions);\n+        set(value, \"/completion/addCallParenthesis\", &mut self.completion.add_call_parenthesis);\n+        set(value, \"/completion/addCallArgumentSnippets\", &mut self.completion.add_call_argument_snippets);\n+        set(value, \"/callInfo/full\", &mut self.call_info_full);\n \n         log::info!(\"Config::update() = {:#?}\", self);\n "}, {"sha": "df8adfe0e17a22fbddb072ef7c2088365e87d97d", "filename": "editors/code/package.json", "status": "modified", "additions": 125, "deletions": 120, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/e4cf40a152120c6c3cba1822e56026ae04be63f0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e4cf40a152120c6c3cba1822e56026ae04be63f0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e4cf40a152120c6c3cba1822e56026ae04be63f0", "patch": "@@ -177,147 +177,102 @@\n             \"type\": \"object\",\n             \"title\": \"Rust Analyzer\",\n             \"properties\": {\n-                \"rust-analyzer.highlighting.semanticTokens\": {\n+                \"rust-analyzer.diagnostics.enable\": {\n                     \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"description\": \"Use proposed semantic tokens API for syntax highlighting\"\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\"\n                 },\n-                \"rust-analyzer.featureFlags\": {\n-                    \"type\": \"object\",\n-                    \"default\": {},\n-                    \"description\": \"Fine grained feature flags to disable annoying features\",\n-                    \"properties\": {\n-                        \"lsp.diagnostics\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show diagnostics from `cargo check`\"\n-                        },\n-                        \"completion.insertion.add-call-parenthesis\": {\n-                            \"type\": \"boolean\",\n-                            \"description\": \"Whether to add parenthesis when completing functions\"\n-                        },\n-                        \"completion.insertion.add-argument-snippets\": {\n-                            \"type\": \"boolean\",\n-                            \"description\": \"Whether to add argument snippets when completing functions\"\n-                        },\n-                        \"completion.enable-postfix\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\"\n-                        },\n-                        \"call-info.full\": {\n-                            \"type\": \"boolean\",\n-                            \"description\": \"Show function name and docs in parameter hints\"\n-                        },\n-                        \"notifications.workspace-loaded\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show `workspace loaded` message\"\n-                        },\n-                        \"notifications.cargo-toml-not-found\": {\n-                            \"type\": \"boolean\",\n-                            \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message\"\n-                        }\n-                    }\n+                \"rust-analyzer.lruCapacity\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"integer\"\n+                    ],\n+                    \"default\": null,\n+                    \"minimum\": 0,\n+                    \"exclusiveMinimum\": true,\n+                    \"description\": \"Number of syntax trees rust-analyzer keeps in memory.\"\n                 },\n-                \"rust-analyzer.updates.channel\": {\n+                \"rust-analyzer.files.watcher\": {\n                     \"type\": \"string\",\n                     \"enum\": [\n-                        \"stable\",\n-                        \"nightly\"\n+                        \"client\",\n+                        \"notify\"\n                     ],\n-                    \"default\": \"stable\",\n-                    \"markdownEnumDescriptions\": [\n-                        \"`\\\"stable\\\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general\",\n-                        \"`\\\"nightly\\\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**\"\n-                    ],\n-                    \"markdownDescription\": \"Choose `\\\"nightly\\\"` updates to get the latest features and bug fixes every day. While `\\\"stable\\\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs\"\n+                    \"default\": \"client\",\n+                    \"description\": \"Controls file watching implementation.\"\n                 },\n-                \"rust-analyzer.updates.askBeforeDownload\": {\n+                \"rust-analyzer.files.exclude\": {\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"default\": [],\n+                    \"description\": \"Paths to exclude from analysis.\"\n+                },\n+                \"rust-analyzer.notifications.workspaceLoaded\": {\n                     \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Whether to ask for permission before downloading any files from the Internet\"\n+                    \"markdownDescription\": \"Whether to show `workspace loaded` message.\"\n                 },\n-                \"rust-analyzer.serverPath\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n-                    ],\n-                    \"default\": null,\n-                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \\\"rust-analyzer.updates.channel\\\" setting is not used\"\n+                \"rust-analyzer.notifications.cargoTomlNotFound\": {\n+                    \"type\": \"boolean\",\n+                    \"markdownDescription\": \"Whether to show `can't find Cargo.toml` error message\"\n+                },\n+\n+                \"rust-analyzer.cargo.noDefaultFeatures\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"markdownDescription\": \"Do not activate the `default` feature\"\n                 },\n-                \"rust-analyzer.excludeGlobs\": {\n+                \"rust-analyzer.cargo.allFeatures\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Activate all available features\"\n+                },\n+                \"rust-analyzer.cargo.features\": {\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n                     \"default\": [],\n-                    \"description\": \"Paths to exclude from analysis\"\n+                    \"description\": \"List of features to activate\"\n                 },\n-                \"rust-analyzer.rustfmtArgs\": {\n+                \"rust-analyzer.cargo.loadOutDirsFromCheck\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n+                },\n+                \"rust-analyzer.rustfmt.extraArgs\": {\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n                     \"default\": [],\n                     \"description\": \"Additional arguments to rustfmt\"\n                 },\n-                \"rust-analyzer.useClientWatching\": {\n+                \"rust-analyzer.checkOnSave.enable\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"client provided file watching instead of notify watching.\"\n+                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save\"\n                 },\n-                \"rust-analyzer.cargo-watch.enable\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Run specified `cargo-watch` command for diagnostics on save\"\n-                },\n-                \"rust-analyzer.cargo-watch.arguments\": {\n+                \"rust-analyzer.checkOnSave.extraArgs\": {\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     },\n-                    \"markdownDescription\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n+                    \"markdownDescription\": \"Extra arguments for `cargo check`\",\n                     \"default\": []\n                 },\n-                \"rust-analyzer.cargo-watch.command\": {\n-                    \"type\": \"string\",\n-                    \"markdownDescription\": \"`cargo-watch` command. (e.g: `clippy` will run as `cargo watch -x clippy` )\",\n-                    \"default\": \"check\"\n-                },\n-                \"rust-analyzer.cargo-watch.allTargets\": {\n-                    \"type\": \"boolean\",\n-                    \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`)\",\n-                    \"default\": true\n-                },\n-                \"rust-analyzer.trace.server\": {\n+                \"rust-analyzer.checkOnSave.command\": {\n                     \"type\": \"string\",\n-                    \"scope\": \"window\",\n-                    \"enum\": [\n-                        \"off\",\n-                        \"messages\",\n-                        \"verbose\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"No traces\",\n-                        \"Error only\",\n-                        \"Full log\"\n-                    ],\n-                    \"default\": \"off\",\n-                    \"description\": \"Trace requests to the rust-analyzer\"\n+                    \"default\": \"check\",\n+                    \"markdownDescription\": \"Cargo command to use for `cargo check`\"\n                 },\n-                \"rust-analyzer.trace.extension\": {\n-                    \"description\": \"Enable logging of VS Code extensions itself\",\n+                \"rust-analyzer.checkOnSave.allTargets\": {\n                     \"type\": \"boolean\",\n-                    \"default\": false\n-                },\n-                \"rust-analyzer.lruCapacity\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"integer\"\n-                    ],\n-                    \"default\": null,\n-                    \"minimum\": 0,\n-                    \"exclusiveMinimum\": true,\n-                    \"description\": \"Number of syntax trees rust-analyzer keeps in memory\"\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Check all targets and tests (will be passed as `--all-targets`)\"\n                 },\n+\n                 \"rust-analyzer.inlayHints.typeHints\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n@@ -343,29 +298,79 @@\n                     \"exclusiveMinimum\": true,\n                     \"description\": \"Maximum length for inlay hints\"\n                 },\n-                \"rust-analyzer.cargoFeatures.noDefaultFeatures\": {\n+\n+                \"rust-analyzer.completion.addCallParenthesis\": {\n                     \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"markdownDescription\": \"Do not activate the `default` feature\"\n+                    \"default\": true,\n+                    \"description\": \"Whether to add parenthesis when completing functions\"\n                 },\n-                \"rust-analyzer.cargoFeatures.allFeatures\": {\n+                \"rust-analyzer.completion.addCallArgumentSnippets\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"Activate all available features\"\n+                    \"description\": \"Whether to add argument snippets when completing functions\"\n                 },\n-                \"rust-analyzer.cargoFeatures.features\": {\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"default\": [],\n-                    \"description\": \"List of features to activate\"\n+                \"rust-analyzer.completion.postfix.enable\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\"\n+                },\n+                \"rust-analyzer.callInfo.full\": {\n+                    \"type\": \"boolean\",\n+                    \"description\": \"Show function name and docs in parameter hints\"\n                 },\n-                \"rust-analyzer.cargoFeatures.loadOutDirsFromCheck\": {\n+\n+                \"rust-analyzer.highlighting.semanticTokens\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,\n-                    \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n-                }\n+                    \"description\": \"Use proposed semantic tokens API for syntax highlighting\"\n+                },\n+                \"rust-analyzer.updates.channel\": {\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"stable\",\n+                        \"nightly\"\n+                    ],\n+                    \"default\": \"stable\",\n+                    \"markdownEnumDescriptions\": [\n+                        \"`\\\"stable\\\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general\",\n+                        \"`\\\"nightly\\\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**\"\n+                    ],\n+                    \"markdownDescription\": \"Choose `\\\"nightly\\\"` updates to get the latest features and bug fixes every day. While `\\\"stable\\\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs\"\n+                },\n+                \"rust-analyzer.updates.askBeforeDownload\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Whether to ask for permission before downloading any files from the Internet\"\n+                },\n+                \"rust-analyzer.serverPath\": {\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \\\"rust-analyzer.updates.channel\\\" setting is not used\"\n+                },\n+                \"rust-analyzer.trace.server\": {\n+                    \"type\": \"string\",\n+                    \"scope\": \"window\",\n+                    \"enum\": [\n+                        \"off\",\n+                        \"messages\",\n+                        \"verbose\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"No traces\",\n+                        \"Error only\",\n+                        \"Full log\"\n+                    ],\n+                    \"default\": \"off\",\n+                    \"description\": \"Trace requests to the rust-analyzer\"\n+                },\n+                \"rust-analyzer.trace.extension\": {\n+                    \"description\": \"Enable logging of VS Code extensions itself\",\n+                    \"type\": \"boolean\",\n+                    \"default\": false\n+                },\n             }\n         },\n         \"problemPatterns\": ["}]}