{"sha": "0336a8633f0734ef269c000c5d7432b7a706a1fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMzZhODYzM2YwNzM0ZWYyNjljMDAwYzVkNzQzMmI3YTcwNmExZmU=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-30T03:19:41Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:19:08Z"}, "message": "RIMOV, round 10\n\nfind ./ -type f -name \"*.rs\" -exec sed -i \"s/~\\[mut /~\\[/g\" {} \\;", "tree": {"sha": "c0a7fdaaa53b2015d20db78a9cae57cef8024d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a7fdaaa53b2015d20db78a9cae57cef8024d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0336a8633f0734ef269c000c5d7432b7a706a1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0336a8633f0734ef269c000c5d7432b7a706a1fe", "html_url": "https://github.com/rust-lang/rust/commit/0336a8633f0734ef269c000c5d7432b7a706a1fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0336a8633f0734ef269c000c5d7432b7a706a1fe/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e95a1357756db52ff7e6b6376f8c6ed59925971", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e95a1357756db52ff7e6b6376f8c6ed59925971", "html_url": "https://github.com/rust-lang/rust/commit/3e95a1357756db52ff7e6b6376f8c6ed59925971"}], "stats": {"total": 142, "additions": 71, "deletions": 71}, "files": [{"sha": "e755b445134cb4423ac9dae252d254adeef15812", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -46,7 +46,7 @@ use vec;\n  * # WARNING\n  *\n  * For maximum performance, this type is implemented using some rather\n- * unsafe code.  In particular, this innocent looking `~[mut A]` pointer\n+ * unsafe code.  In particular, this innocent looking `~[A]` pointer\n  * *may be null!*  Therefore, it is important you not reach into the\n  * data structure manually but instead use the provided extensions.\n  *\n@@ -143,7 +143,7 @@ impl<A> DVec<A> {\n      * and return a new vector to replace it with.\n      */\n     #[inline(always)]\n-    fn swap_mut(f: &fn(v: ~[mut A]) -> ~[mut A]) {\n+    fn swap_mut(f: &fn(v: ~[A]) -> ~[A]) {\n         do self.swap |v| {\n             vec::cast_from_mut(f(vec::cast_to_mut(move v)))\n         }"}, {"sha": "30b3927d6f3dbf803a10ccb28c7abd796c11177a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -206,12 +206,12 @@ pub pure fn build_sized_opt<A>(size: Option<uint>,\n }\n \n /// Produces a mut vector from an immutable vector.\n-pub pure fn cast_to_mut<T>(v: ~[T]) -> ~[mut T] {\n+pub pure fn cast_to_mut<T>(v: ~[T]) -> ~[T] {\n     unsafe { ::cast::transmute(v) }\n }\n \n /// Produces an immutable vector from a mut vector.\n-pub pure fn cast_from_mut<T>(v: ~[mut T]) -> ~[T] {\n+pub pure fn cast_from_mut<T>(v: ~[T]) -> ~[T] {\n     unsafe { ::cast::transmute(v) }\n }\n \n@@ -562,7 +562,7 @@ pub fn consume<T>(v: ~[T], f: fn(uint, v: T)) {\n     }\n }\n \n-pub fn consume_mut<T>(v: ~[mut T], f: fn(uint, v: T)) {\n+pub fn consume_mut<T>(v: ~[T], f: fn(uint, v: T)) {\n     consume(vec::cast_from_mut(v), f)\n }\n \n@@ -731,7 +731,7 @@ pub pure fn append_one<T>(lhs: ~[T], x: T) -> ~[T] {\n }\n \n #[inline(always)]\n-pub pure fn append_mut<T: Copy>(lhs: ~[mut T], rhs: &[const T]) -> ~[mut T] {\n+pub pure fn append_mut<T: Copy>(lhs: ~[T], rhs: &[const T]) -> ~[T] {\n     cast_to_mut(append(cast_from_mut(lhs), rhs))\n }\n \n@@ -1640,9 +1640,9 @@ pub mod traits {\n         }\n     }\n \n-    impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n+    impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n         #[inline(always)]\n-        pure fn add(&self, rhs: & &self/[const T]) -> ~[mut T] {\n+        pure fn add(&self, rhs: & &self/[const T]) -> ~[T] {\n             append_mut(copy *self, (*rhs))\n         }\n     }"}, {"sha": "ee1bfc294294ab6e6343743e129b57dd966f4992", "filename": "src/libfuzzer/cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibfuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibfuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fcycles.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -43,7 +43,7 @@ type pointy = {\n     mut g : fn~()->(),\n \n     mut m : ~[maybe_pointy],\n-    mut n : ~[mut maybe_pointy],\n+    mut n : ~[maybe_pointy],\n     mut o : {x : int, y : maybe_pointy}\n };\n // To add: objects; traits; anything type-parameterized?"}, {"sha": "2b9e415ac2c1505d402bdf3ec5dff72e3bca3108", "filename": "src/libfuzzer/rand_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibfuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibfuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Frand_util.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -25,7 +25,7 @@ fn choice<T: copy>(r : rand::rng, v : ~[T]) -> T {\n fn unlikely(r : rand::rng, n : uint) -> bool { under(r, n) == 0u }\n \n // shuffle a vec in place\n-fn shuffle<T>(r : rand::rng, &v : ~[mut T]) {\n+fn shuffle<T>(r : rand::rng, &v : ~[T]) {\n     let i = vec::len(v);\n     while i >= 2u {\n         // Loop invariant: elements with index >= i have been locked in place."}, {"sha": "834b5add6eb76d07b60a6b93b7ef163fccfab0a7", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -109,7 +109,7 @@ struct BigBitv {\n     mut storage: ~[uint]\n }\n \n-fn BigBitv(storage: ~[mut uint]) -> BigBitv {\n+fn BigBitv(storage: ~[uint]) -> BigBitv {\n     BigBitv {storage: move storage}\n }\n "}, {"sha": "62bce2c2894149a8804434649f75dbe6a3d8acec", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -458,7 +458,7 @@ pub mod chained {\n         }\n     }\n \n-    fn chains<K,V>(nchains: uint) -> ~[mut Option<@Entry<K,V>>] {\n+    fn chains<K,V>(nchains: uint) -> ~[Option<@Entry<K,V>>] {\n         vec::cast_to_mut(vec::from_elem(nchains, None))\n     }\n "}, {"sha": "20359782d962da93fe62837d9f416c4213f85bd7", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -67,13 +67,13 @@ const k3: u32 = 0xCA62C1D6u32;\n /// Construct a `sha` object\n pub fn sha1() -> Sha1 {\n     type Sha1State =\n-        {h: ~[mut u32],\n+        {h: ~[u32],\n          mut len_low: u32,\n          mut len_high: u32,\n          mut msg_block: ~[u8],\n          mut msg_block_idx: uint,\n          mut computed: bool,\n-         work_buf: @~[mut u32]};\n+         work_buf: @~[u32]};\n \n     fn add_input(st: &Sha1State, msg: &[const u8]) {\n         assert (!st.computed);"}, {"sha": "5e39b8b6801acaacb9278d08fd574e93a5c20f2d", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -1019,7 +1019,7 @@ mod big_tests {\n         tabulate_managed(low, high);\n     }\n \n-    fn multiplyVec<T: Copy>(arr: &[const T], num: uint) -> ~[mut T] {\n+    fn multiplyVec<T: Copy>(arr: &[const T], num: uint) -> ~[T] {\n         let size = arr.len();\n         let res = do vec::from_fn(num) |i| {\n             arr[i % size]"}, {"sha": "dabc5b383a4c226d6fe7010b41a5ad3e14f296c8", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -92,7 +92,7 @@ fn new_sem<Q: Owned>(count: int, q: Q) -> Sem<Q> {\n }\n #[doc(hidden)]\n fn new_sem_and_signal(count: int, num_condvars: uint)\n-        -> Sem<~[mut Waitqueue]> {\n+        -> Sem<~[Waitqueue]> {\n     let mut queues = ~[];\n     for num_condvars.times {\n         queues.push(new_waitqueue());\n@@ -150,7 +150,7 @@ impl &Sem<()> {\n     }\n }\n #[doc(hidden)]\n-impl &Sem<~[mut Waitqueue]> {\n+impl &Sem<~[Waitqueue]> {\n     fn access<U>(blk: fn() -> U) -> U {\n         let mut release = None;\n         unsafe {\n@@ -166,7 +166,7 @@ impl &Sem<~[mut Waitqueue]> {\n // FIXME(#3588) should go inside of access()\n #[doc(hidden)]\n type SemRelease = SemReleaseGeneric<()>;\n-type SemAndSignalRelease = SemReleaseGeneric<~[mut Waitqueue]>;\n+type SemAndSignalRelease = SemReleaseGeneric<~[Waitqueue]>;\n struct SemReleaseGeneric<Q> { sem: &Sem<Q> }\n \n impl<Q: Owned> SemReleaseGeneric<Q> : Drop {\n@@ -181,15 +181,15 @@ fn SemRelease(sem: &r/Sem<()>) -> SemRelease/&r {\n     }\n }\n \n-fn SemAndSignalRelease(sem: &r/Sem<~[mut Waitqueue]>)\n+fn SemAndSignalRelease(sem: &r/Sem<~[Waitqueue]>)\n     -> SemAndSignalRelease/&r {\n     SemReleaseGeneric {\n         sem: sem\n     }\n }\n \n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n-pub struct Condvar { priv sem: &Sem<~[mut Waitqueue]> }\n+pub struct Condvar { priv sem: &Sem<~[Waitqueue]> }\n \n impl Condvar : Drop { fn finalize(&self) {} }\n \n@@ -259,7 +259,7 @@ impl &Condvar {\n         // mutex during unwinding. As long as the wrapper (mutex, etc) is\n         // bounded in when it gets released, this shouldn't hang forever.\n         struct SemAndSignalReacquire {\n-            sem: &Sem<~[mut Waitqueue]>,\n+            sem: &Sem<~[Waitqueue]>,\n         }\n \n         impl SemAndSignalReacquire : Drop {\n@@ -273,7 +273,7 @@ impl &Condvar {\n             }\n         }\n \n-        fn SemAndSignalReacquire(sem: &r/Sem<~[mut Waitqueue]>)\n+        fn SemAndSignalReacquire(sem: &r/Sem<~[Waitqueue]>)\n             -> SemAndSignalReacquire/&r {\n             SemAndSignalReacquire {\n                 sem: sem\n@@ -345,7 +345,7 @@ fn check_cvar_bounds<U>(out_of_bounds: Option<uint>, id: uint, act: &str,\n }\n \n #[doc(hidden)]\n-impl &Sem<~[mut Waitqueue]> {\n+impl &Sem<~[Waitqueue]> {\n     // The only other place that condvars get built is rwlock_write_mode.\n     fn access_cond<U>(blk: fn(c: &Condvar) -> U) -> U {\n         do self.access { blk(&Condvar { sem: self }) }\n@@ -400,7 +400,7 @@ impl &Semaphore {\n  * A task which fails while holding a mutex will unlock the mutex as it\n  * unwinds.\n  */\n-struct Mutex { priv sem: Sem<~[mut Waitqueue]> }\n+struct Mutex { priv sem: Sem<~[Waitqueue]> }\n \n /// Create a new mutex, with one associated condvar.\n pub fn Mutex() -> Mutex { mutex_with_condvars(1) }\n@@ -450,7 +450,7 @@ struct RWlockInner {\n  */\n struct RWlock {\n     priv order_lock:  Semaphore,\n-    priv access_lock: Sem<~[mut Waitqueue]>,\n+    priv access_lock: Sem<~[Waitqueue]>,\n     priv state:       Exclusive<RWlockInner>\n }\n "}, {"sha": "d7efff4d02a731d975cdb5e437d9e297a5f4b91a", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -119,7 +119,7 @@ pub fn tok_str(++t: token) -> ~str {\n     }\n }\n \n-pub fn buf_str(toks: ~[mut token], szs: ~[mut int], left: uint, right: uint,\n+pub fn buf_str(toks: ~[token], szs: ~[int], left: uint, right: uint,\n                lim: uint) -> ~str {\n     let n = vec::len(toks);\n     assert (n == vec::len(szs));"}, {"sha": "27083d2583bab861a4aba624ac3d6aac626b3de1", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -32,7 +32,7 @@ use io::{ReaderUtil, WriterUtil};\n export grid_t, read_grid, solve_grid, write_grid;\n \n // internal type of sudoku grids\n-type grid = ~[~[mut u8]];\n+type grid = ~[~[u8]];\n \n // exported type of sudoku grids\n enum grid_t { grid_ctor(grid), }"}, {"sha": "310d3e970864aed658b216b7df32ba0e2514c1d7", "filename": "src/test/compile-fail/borrowck-mut-vec-as-imm-slice-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -14,11 +14,11 @@ fn want_slice(v: &[int]) -> int {\n     return sum;\n }\n \n-fn has_mut_vec(+v: @~[mut int]) -> int {\n+fn has_mut_vec(+v: @~[int]) -> int {\n     want_slice(*v) //~ ERROR illegal borrow unless pure\n         //~^ NOTE impure due to access to impure function\n }\n \n fn main() {\n-    assert has_mut_vec(@~[mut 1, 2, 3]) == 6;\n+    assert has_mut_vec(@~[1, 2, 3]) == 6;\n }\n\\ No newline at end of file"}, {"sha": "78c4ed54c95edabcdacdbc2ebfcb00da2c33961f", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -34,7 +34,7 @@ fn main() {\n         let mut res = foo(x);\n \n         let mut v = ~[];\n-        v = move ~[mut (move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `&static`, missing `copy`)\n+        v = move ~[(move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `&static`, missing `copy`)\n         assert (v.len() == 2);\n     }\n "}, {"sha": "7869e39ba6ca6a8ec9c8848c92dd96c901e0fea7", "filename": "src/test/compile-fail/mutable-huh-variance-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let v = @mut ~[0];\n \n     fn f(&&v: @mut ~[const int]) {\n-        *v = ~[mut 3]\n+        *v = ~[3]\n     }\n \n     f(v);"}, {"sha": "f0147eb3d08cc095f06d98d95741a7baa574111c", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -13,7 +13,7 @@\n fn main() {\n     let mut v = ~[@mut ~mut ~[0]];\n \n-    fn f(&&v: ~[mut @mut ~mut ~[const int]]) {\n+    fn f(&&v: ~[@mut ~mut ~[const int]]) {\n     }\n \n     f(v);"}, {"sha": "5723c49be8b38bb6cddf0910447a6e579c6e7d2d", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -18,7 +18,7 @@ fn main() {\n \n     fn f(&&v: *mut ~[const int]) {\n         unsafe {\n-            *v = ~[mut 3]\n+            *v = ~[3]\n         }\n     }\n "}, {"sha": "fc4be7f588b9e0b63ba1c1e0a5eca94fb77b4c48", "filename": "src/test/compile-fail/mutable-huh-variance-rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let v = {mut g: ~[0]};\n \n     fn f(&&v: {mut g: ~[const int]}) {\n-        v.g = ~[mut 3]\n+        v.g = ~[3]\n     }\n \n     f(v);"}, {"sha": "633d2230aea8bf7f14f0b617494db0bd2ce0c906", "filename": "src/test/compile-fail/mutable-huh-variance-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let v = ~mut ~[0];\n \n     fn f(&&v: ~mut ~[const int]) {\n-        *v = ~[mut 3]\n+        *v = ~[3]\n     }\n \n     f(v);"}, {"sha": "239ae377b9bb7c62583c1e9b2756a25dd9e13838", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -11,11 +11,11 @@\n fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n-    // and assigns a type of ~[mut ~[const int]].\n+    // and assigns a type of ~[~[const int]].\n     let mut v: ~[~[int]] = ~[~[0]];\n \n-    fn f(&&v: ~[mut ~[const int]]) {\n-        v[0] = ~[mut 3]\n+    fn f(&&v: ~[~[const int]]) {\n+        v[0] = ~[3]\n     }\n \n     f(v); //~ ERROR (values differ in mutability)"}, {"sha": "239ae377b9bb7c62583c1e9b2756a25dd9e13838", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -11,10 +11,10 @@\n fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n-    // and assigns a type of ~[mut ~[const int]].\n-    let mut v: ~[~[mut int]] = ~[~[0]];\n+    // and assigns a type of ~[~[const int]].\n+    let mut v: ~[~[int]] = ~[~[0]];\n \n-    fn f(&&v: ~[mut ~[const int]]) {\n+    fn f(&&v: ~[~[const int]]) {\n         v[0] = ~[3]\n     }\n "}, {"sha": "ffcd79772ad3dd28041bb07e3470b0fb2f5843bd", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -11,11 +11,11 @@\n fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n-    // and assigns a type of ~[mut ~[const int]].\n-    let mut v: ~[~[mut ~[int]]] = ~[~[~[0]]];\n+    // and assigns a type of ~[~[const int]].\n+    let mut v: ~[~[~[int]]] = ~[~[~[0]]];\n \n-    fn f(&&v: ~[mut ~[mut ~[const int]]]) {\n-        v[0][1] = ~[mut 3]\n+    fn f(&&v: ~[~[~[const int]]]) {\n+        v[0][1] = ~[3]\n     }\n \n     f(v); //~ ERROR (values differ in mutability)"}, {"sha": "dd65dac5d93f307ddcea33ee75c7538dbb2c7148", "filename": "src/test/compile-fail/mutable-huh-variance-vec4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -17,19 +17,19 @@ fn main() {\n     let mut w = ~[~[0]];\n     let mut x = ~[~[0]];\n \n-    fn f(&&v: ~[mut ~[int]]) {\n+    fn f(&&v: ~[~[int]]) {\n         v[0] = ~[3]\n     }\n \n     fn g(&&v: ~[const ~[const int]]) {\n     }\n \n-    fn h(&&v: ~[mut ~[mut int]]) {\n-        v[0] = ~[mut 3]\n+    fn h(&&v: ~[~[int]]) {\n+        v[0] = ~[3]\n     }\n \n-    fn i(&&v: ~[mut ~[const int]]) {\n-        v[0] = ~[mut 3]\n+    fn i(&&v: ~[~[const int]]) {\n+        v[0] = ~[3]\n     }\n \n     fn j(&&v: ~[~[const int]]) {\n@@ -48,7 +48,7 @@ fn main() {\n     j(w); //~ ERROR (values differ in mutability)\n \n     // Note that without adding f() or h() to the mix, it is valid for\n-    // x to have the type ~[mut ~[const int]], and thus we can safely\n+    // x to have the type ~[~[const int]], and thus we can safely\n     // call g() and i() but not j():\n     g(x);\n     i(x);"}, {"sha": "b708f50004fa7d920cbbb39f25351ceb9dcb8bd9", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -44,7 +44,7 @@ fn main() {\n     foo({f: 3});\n     foo({mut f: 3}); //~ ERROR missing `const`\n     foo(~[1]);\n-    foo(~[mut 1]); //~ ERROR missing `const`\n+    foo(~[1]); //~ ERROR missing `const`\n     foo(~1);\n     foo(~mut 1); //~ ERROR missing `const`\n     foo(@1);"}, {"sha": "445f23ac46b35c6b4e7288bed1de3961b382805d", "filename": "src/test/compile-fail/vec-add.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-add.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -14,7 +14,7 @@\n // the right hand side in all cases. We are getting compiler errors\n // about this now, so I'm xfailing the test for now. -eholk\n \n-fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n+fn add(i: ~[int], m: ~[int], c: ~[const int]) {\n \n     // Check that:\n     //  (1) vectors of any two mutabilities can be added\n@@ -24,9 +24,9 @@ fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n        m + ~[3],\n        ~[3]);\n \n-   add(i + ~[mut 3],\n-       m + ~[mut 3],\n-       ~[mut 3]);\n+   add(i + ~[3],\n+       m + ~[3],\n+       ~[3]);\n \n    add(i + i,\n        m + i,\n@@ -54,19 +54,19 @@ fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n                 //~^ mismatched types\n        ~[3]);\n \n-   add(m + ~[mut 3], //~ ERROR mismatched types\n-       m + ~[mut 3],\n-       m + ~[mut 3]);\n+   add(m + ~[3], //~ ERROR mismatched types\n+       m + ~[3],\n+       m + ~[3]);\n \n-   add(i + ~[mut 3],\n-       i + ~[mut 3], //~ ERROR mismatched types\n-       i + ~[mut 3]);\n+   add(i + ~[3],\n+       i + ~[3], //~ ERROR mismatched types\n+       i + ~[3]);\n \n-   add(c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n+   add(c + ~[3], //~ ERROR binary operation + cannot be applied\n                     //~^ mismatched types\n-       c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n+       c + ~[3], //~ ERROR binary operation + cannot be applied\n                     //~^ mismatched types\n-       ~[mut 3]);\n+       ~[3]);\n \n    add(m + i, //~ ERROR mismatched types\n        m + i,"}, {"sha": "a53dab33b978c5417b17b20733fe2f2798f22245", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -14,10 +14,10 @@ fn want_slice(v: &[int]) -> int {\n     return sum;\n }\n \n-fn has_mut_vec(+v: ~[mut int]) -> int {\n+fn has_mut_vec(+v: ~[int]) -> int {\n     want_slice(v)\n }\n \n fn main() {\n-    assert has_mut_vec(~[mut 1, 2, 3]) == 6;\n+    assert has_mut_vec(~[1, 2, 3]) == 6;\n }\n\\ No newline at end of file"}, {"sha": "2bad284ad53b3ca411214c3a5c954bd9c054a139", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -51,7 +51,7 @@ struct AsciiArt\n     width: uint,\n     height: uint,\n     priv fill: char,\n-    priv lines: ~[~[mut char]],\n+    priv lines: ~[~[char]],\n \n     // This struct can be quite large so we'll disable copying: developers need\n     // to either pass these structs around via borrowed pointers or move them."}, {"sha": "2f5771ca5ae1869e44869ab7b88f03bc278f1558", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -15,9 +15,9 @@ enum option<T> {\n     some(T),\n }\n \n-struct Smallintmap<T> {mut v: ~[mut option<T>]}\n+struct Smallintmap<T> {mut v: ~[option<T>]}\n \n-struct V<T> { v: ~[mut option<T>] }\n+struct V<T> { v: ~[option<T>] }\n \n fn mk<T>() -> @Smallintmap<T> {\n     let mut v: ~[option<T>] = ~[];"}, {"sha": "34e7795918c72cdedc684d523086434d7ada6e2f", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0336a8633f0734ef269c000c5d7432b7a706a1fe/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=0336a8633f0734ef269c000c5d7432b7a706a1fe", "patch": "@@ -14,5 +14,5 @@ struct Pair { a: int, b: int}\n fn main() {\n     // This just tests whether the vec leaks its members.\n     let mut pvec: ~[@Pair] =\n-        ~[mut @Pair{a: 1, b: 2}, @Pair{a: 3, b: 4}, @Pair{a: 5, b: 6}];\n+        ~[@Pair{a: 1, b: 2}, @Pair{a: 3, b: 4}, @Pair{a: 5, b: 6}];\n }"}]}