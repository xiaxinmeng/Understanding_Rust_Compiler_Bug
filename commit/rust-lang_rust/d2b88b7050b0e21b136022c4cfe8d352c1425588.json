{"sha": "d2b88b7050b0e21b136022c4cfe8d352c1425588", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjg4YjcwNTBiMGUyMWIxMzYwMjJjNGNmZThkMzUyYzE0MjU1ODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-02T20:17:49Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-02T20:17:49Z"}, "message": "move_ref_pattern: test captures inside closure", "tree": {"sha": "9f25bbf6188739bb31831707495839d4d067435c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f25bbf6188739bb31831707495839d4d067435c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b88b7050b0e21b136022c4cfe8d352c1425588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b88b7050b0e21b136022c4cfe8d352c1425588", "html_url": "https://github.com/rust-lang/rust/commit/d2b88b7050b0e21b136022c4cfe8d352c1425588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b88b7050b0e21b136022c4cfe8d352c1425588/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd318be05dab2e1149595aacbf3d808559fa42dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd318be05dab2e1149595aacbf3d808559fa42dc", "html_url": "https://github.com/rust-lang/rust/commit/bd318be05dab2e1149595aacbf3d808559fa42dc"}], "stats": {"total": 526, "additions": 526, "deletions": 0}, "files": [{"sha": "4c3ca62e1658697ce12de9942b897d9f27cf7dc9", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-inside.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/d2b88b7050b0e21b136022c4cfe8d352c1425588/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b88b7050b0e21b136022c4cfe8d352c1425588/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.rs?ref=d2b88b7050b0e21b136022c4cfe8d352c1425588", "patch": "@@ -0,0 +1,122 @@\n+#![feature(move_ref_pattern)]\n+\n+fn main() {\n+    struct S; // Not `Copy`.\n+\n+    let mut tup0 = (S, S);\n+    let mut tup1 = (S, S, S);\n+    let tup2 = (S, S);\n+    let tup3 = (S, S, S);\n+    let tup4 = (S, S);\n+    let mut arr0 = [S, S, S];\n+    let mut arr1 = [S, S, S, S, S];\n+    let arr2 = [S, S, S];\n+    let arr3 = [S, S, S, S, S];\n+\n+    // The `mov` bindings require that we capture the scrutinees by-move.\n+    let mut closure = || {\n+        // Tuples...\n+        let (ref mut borrow, mov) = tup0;\n+        let (mov, _, ref mut borrow) = tup1;\n+        let (ref borrow, mov) = tup2;\n+        let (mov, _, ref borrow) = tup3;\n+        let (ref borrow, mov) = tup4;\n+        // Arrays...\n+        let [mov @ .., ref borrow] = arr0;\n+        let [_, ref mut borrow @ .., _, mov] = arr1;\n+        let [mov @ .., ref borrow] = arr2;\n+        let [_, ref borrow @ .., _, mov] = arr3;\n+    };\n+\n+    // Now we try to borrow and move the captures, which should result in errors...\n+    // ...for tuples:\n+    drop(&tup0); //~ ERROR borrow of moved value: `tup0`\n+    drop(&tup1); //~ ERROR borrow of moved value: `tup1`\n+    drop(&tup2); //~ ERROR borrow of moved value: `tup2`\n+    drop(&tup3); //~ ERROR borrow of moved value: `tup3`\n+    // Ostensibly this should compile.\n+    // However, because closures don't capture individual fields, which is changed in RFC 2229,\n+    // this won't compile because the entire product is moved into the closure.\n+    // The same applies to the array patterns below.\n+    drop(&tup4.0); //~ ERROR borrow of moved value: `tup4`\n+    // ...for arrays:\n+    drop(&arr0); //~ ERROR borrow of moved value: `arr0`\n+    let [_, mov1, mov2, mov3, _] = &arr1; //~ ERROR borrow of moved value: `arr1`\n+    drop(&arr2); //~ ERROR borrow of moved value: `arr2`\n+    let [_, mov1, mov2, mov3, _] = &arr3; //~ ERROR borrow of moved value: `arr3`\n+\n+    // Let's redo ^--- with a `match` + sum type:\n+    macro_rules! m {\n+        ($p:pat = $s:expr) => {\n+            match $s {\n+                Some($p) => {}\n+                _ => {}\n+            }\n+        };\n+    }\n+    let mut tup0: Option<(S, S)> = None;\n+    let mut tup1: Option<(S, S, S)> = None;\n+    let tup2: Option<(S, S)> = None;\n+    let tup3: Option<(S, S, S)> = None;\n+    let tup4: Option<(S, S)> = None;\n+    let mut arr0: Option<[S; 3]> = None;\n+    let mut arr1: Option<[S; 5]> = None;\n+    let arr2: Option<[S; 3]> = None;\n+    let arr3: Option<[S; 5]> = None;\n+    let mut closure = || {\n+        m!((ref mut borrow, mov) = tup0);\n+        m!((mov, _, ref mut borrow) = tup1);\n+        m!((ref borrow, mov) = tup2);\n+        m!((mov, _, ref borrow) = tup3);\n+        m!((ref borrow, mov) = tup4);\n+        m!([mov @ .., ref borrow] = arr0);\n+        m!([_, ref mut borrow @ .., _, mov] = arr1);\n+        m!([mov @ .., ref borrow] = arr2);\n+        m!([_, ref borrow @ .., _, mov] = arr3);\n+    };\n+    drop(&tup0); //~ ERROR borrow of moved value: `tup0`\n+    drop(&tup1); //~ ERROR borrow of moved value: `tup1`\n+    drop(&tup2); //~ ERROR borrow of moved value: `tup2`\n+    drop(&tup3); //~ ERROR borrow of moved value: `tup3`\n+    m!((ref x, _) = &tup4); //~ ERROR borrow of moved value: `tup4`\n+    drop(&arr0); //~ ERROR borrow of moved value: `arr0`\n+    m!([_, mov1, mov2, mov3, _] = &arr1); //~ ERROR borrow of moved value: `arr1`\n+    drop(&arr2); //~ ERROR borrow of moved value: `arr2`\n+    m!([_, mov1, mov2, mov3, _] = &arr3); //~ ERROR borrow of moved value: `arr3`\n+\n+    // Let's redo ^--- with `if let` (which may diverge from `match` in the future):\n+    macro_rules! m {\n+        ($p:pat = $s:expr) => {\n+            if let Some($p) = $s {}\n+        };\n+    }\n+    let mut tup0: Option<(S, S)> = None;\n+    let mut tup1: Option<(S, S, S)> = None;\n+    let tup2: Option<(S, S)> = None;\n+    let tup3: Option<(S, S, S)> = None;\n+    let tup4: Option<(S, S)> = None;\n+    let mut arr0: Option<[S; 3]> = None;\n+    let mut arr1: Option<[S; 5]> = None;\n+    let arr2: Option<[S; 3]> = None;\n+    let arr3: Option<[S; 5]> = None;\n+    let mut closure = || {\n+        m!((ref mut borrow, mov) = tup0);\n+        m!((mov, _, ref mut borrow) = tup1);\n+        m!((ref borrow, mov) = tup2);\n+        m!((mov, _, ref borrow) = tup3);\n+        m!((ref borrow, mov) = tup4);\n+        m!([mov @ .., ref borrow] = arr0);\n+        m!([_, ref mut borrow @ .., _, mov] = arr1);\n+        m!([mov @ .., ref borrow] = arr2);\n+        m!([_, ref borrow @ .., _, mov] = arr3);\n+    };\n+    drop(&tup0); //~ ERROR borrow of moved value: `tup0`\n+    drop(&tup1); //~ ERROR borrow of moved value: `tup1`\n+    drop(&tup2); //~ ERROR borrow of moved value: `tup2`\n+    drop(&tup3); //~ ERROR borrow of moved value: `tup3`\n+    m!((ref x, _) = &tup4); //~ ERROR borrow of moved value: `tup4`\n+    drop(&arr0); //~ ERROR borrow of moved value: `arr0`\n+    m!([_, mov1, mov2, mov3, _] = &arr1); //~ ERROR borrow of moved value: `arr1`\n+    drop(&arr2); //~ ERROR borrow of moved value: `arr2`\n+    m!([_, mov1, mov2, mov3, _] = &arr3); //~ ERROR borrow of moved value: `arr3`\n+}"}, {"sha": "9159e3e221349a58c22a527dd6af7cf38e5ddce8", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-inside.stderr", "status": "added", "additions": 404, "deletions": 0, "changes": 404, "blob_url": "https://github.com/rust-lang/rust/blob/d2b88b7050b0e21b136022c4cfe8d352c1425588/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2b88b7050b0e21b136022c4cfe8d352c1425588/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.stderr?ref=d2b88b7050b0e21b136022c4cfe8d352c1425588", "patch": "@@ -0,0 +1,404 @@\n+error[E0382]: borrow of moved value: `tup0`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:33:10\n+   |\n+LL |     let mut tup0 = (S, S);\n+   |         -------- move occurs because `tup0` has type `(main::S, main::S)`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+LL |         // Tuples...\n+LL |         let (ref mut borrow, mov) = tup0;\n+   |                                     ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup0);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup1`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:34:10\n+   |\n+LL |     let mut tup1 = (S, S, S);\n+   |         -------- move occurs because `tup1` has type `(main::S, main::S, main::S)`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let (mov, _, ref mut borrow) = tup1;\n+   |                                        ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup1);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup2`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:35:10\n+   |\n+LL |     let tup2 = (S, S);\n+   |         ---- move occurs because `tup2` has type `(main::S, main::S)`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let (ref borrow, mov) = tup2;\n+   |                                 ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup2);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup3`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:36:10\n+   |\n+LL |     let tup3 = (S, S, S);\n+   |         ---- move occurs because `tup3` has type `(main::S, main::S, main::S)`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let (mov, _, ref borrow) = tup3;\n+   |                                    ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup3);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup4`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:41:10\n+   |\n+LL |     let tup4 = (S, S);\n+   |         ---- move occurs because `tup4` has type `(main::S, main::S)`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let (ref borrow, mov) = tup4;\n+   |                                 ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup4.0);\n+   |          ^^^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr0`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:43:10\n+   |\n+LL |     let mut arr0 = [S, S, S];\n+   |         -------- move occurs because `arr0` has type `[main::S; 3]`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let [mov @ .., ref borrow] = arr0;\n+   |                                      ---- variable moved due to use in closure\n+...\n+LL |     drop(&arr0);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr1`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:44:36\n+   |\n+LL |     let mut arr1 = [S, S, S, S, S];\n+   |         -------- move occurs because `arr1` has type `[main::S; 5]`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let [_, ref mut borrow @ .., _, mov] = arr1;\n+   |                                                ---- variable moved due to use in closure\n+...\n+LL |     let [_, mov1, mov2, mov3, _] = &arr1;\n+   |                                    ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr2`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:45:10\n+   |\n+LL |     let arr2 = [S, S, S];\n+   |         ---- move occurs because `arr2` has type `[main::S; 3]`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let [mov @ .., ref borrow] = arr2;\n+   |                                      ---- variable moved due to use in closure\n+...\n+LL |     drop(&arr2);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr3`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:46:36\n+   |\n+LL |     let arr3 = [S, S, S, S, S];\n+   |         ---- move occurs because `arr3` has type `[main::S; 5]`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         let [_, ref borrow @ .., _, mov] = arr3;\n+   |                                            ---- variable moved due to use in closure\n+...\n+LL |     let [_, mov1, mov2, mov3, _] = &arr3;\n+   |                                    ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup0`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:77:10\n+   |\n+LL |     let mut tup0: Option<(S, S)> = None;\n+   |         -------- move occurs because `tup0` has type `std::option::Option<(main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+LL |         m!((ref mut borrow, mov) = tup0);\n+   |                                    ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup0);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup1`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:78:10\n+   |\n+LL |     let mut tup1: Option<(S, S, S)> = None;\n+   |         -------- move occurs because `tup1` has type `std::option::Option<(main::S, main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+LL |         m!((ref mut borrow, mov) = tup0);\n+LL |         m!((mov, _, ref mut borrow) = tup1);\n+   |                                       ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup1);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup2`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:79:10\n+   |\n+LL |     let tup2: Option<(S, S)> = None;\n+   |         ---- move occurs because `tup2` has type `std::option::Option<(main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!((ref borrow, mov) = tup2);\n+   |                                ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup2);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup3`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:80:10\n+   |\n+LL |     let tup3: Option<(S, S, S)> = None;\n+   |         ---- move occurs because `tup3` has type `std::option::Option<(main::S, main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!((mov, _, ref borrow) = tup3);\n+   |                                   ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup3);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup4`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:81:21\n+   |\n+LL |     let tup4: Option<(S, S)> = None;\n+   |         ---- move occurs because `tup4` has type `std::option::Option<(main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!((ref borrow, mov) = tup4);\n+   |                                ---- variable moved due to use in closure\n+...\n+LL |     m!((ref x, _) = &tup4);\n+   |                     ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr0`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:82:10\n+   |\n+LL |     let mut arr0: Option<[S; 3]> = None;\n+   |         -------- move occurs because `arr0` has type `std::option::Option<[main::S; 3]>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([mov @ .., ref borrow] = arr0);\n+   |                                     ---- variable moved due to use in closure\n+...\n+LL |     drop(&arr0);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr1`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:83:35\n+   |\n+LL |     let mut arr1: Option<[S; 5]> = None;\n+   |         -------- move occurs because `arr1` has type `std::option::Option<[main::S; 5]>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([_, ref mut borrow @ .., _, mov] = arr1);\n+   |                                               ---- variable moved due to use in closure\n+...\n+LL |     m!([_, mov1, mov2, mov3, _] = &arr1);\n+   |                                   ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr2`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:84:10\n+   |\n+LL |     let arr2: Option<[S; 3]> = None;\n+   |         ---- move occurs because `arr2` has type `std::option::Option<[main::S; 3]>`, which does not implement the `Copy` trait\n+LL |     let arr3: Option<[S; 5]> = None;\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([mov @ .., ref borrow] = arr2);\n+   |                                     ---- variable moved due to use in closure\n+...\n+LL |     drop(&arr2);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr3`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:85:35\n+   |\n+LL |     let arr3: Option<[S; 5]> = None;\n+   |         ---- move occurs because `arr3` has type `std::option::Option<[main::S; 5]>`, which does not implement the `Copy` trait\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([_, ref borrow @ .., _, mov] = arr3);\n+   |                                           ---- variable moved due to use in closure\n+...\n+LL |     m!([_, mov1, mov2, mov3, _] = &arr3);\n+   |                                   ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup0`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:113:10\n+   |\n+LL |     let mut tup0: Option<(S, S)> = None;\n+   |         -------- move occurs because `tup0` has type `std::option::Option<(main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+LL |         m!((ref mut borrow, mov) = tup0);\n+   |                                    ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup0);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup1`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:114:10\n+   |\n+LL |     let mut tup1: Option<(S, S, S)> = None;\n+   |         -------- move occurs because `tup1` has type `std::option::Option<(main::S, main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+LL |         m!((ref mut borrow, mov) = tup0);\n+LL |         m!((mov, _, ref mut borrow) = tup1);\n+   |                                       ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup1);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup2`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:115:10\n+   |\n+LL |     let tup2: Option<(S, S)> = None;\n+   |         ---- move occurs because `tup2` has type `std::option::Option<(main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!((ref borrow, mov) = tup2);\n+   |                                ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup2);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup3`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:116:10\n+   |\n+LL |     let tup3: Option<(S, S, S)> = None;\n+   |         ---- move occurs because `tup3` has type `std::option::Option<(main::S, main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!((mov, _, ref borrow) = tup3);\n+   |                                   ---- variable moved due to use in closure\n+...\n+LL |     drop(&tup3);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `tup4`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:117:21\n+   |\n+LL |     let tup4: Option<(S, S)> = None;\n+   |         ---- move occurs because `tup4` has type `std::option::Option<(main::S, main::S)>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!((ref borrow, mov) = tup4);\n+   |                                ---- variable moved due to use in closure\n+...\n+LL |     m!((ref x, _) = &tup4);\n+   |                     ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr0`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:118:10\n+   |\n+LL |     let mut arr0: Option<[S; 3]> = None;\n+   |         -------- move occurs because `arr0` has type `std::option::Option<[main::S; 3]>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([mov @ .., ref borrow] = arr0);\n+   |                                     ---- variable moved due to use in closure\n+...\n+LL |     drop(&arr0);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr1`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:119:35\n+   |\n+LL |     let mut arr1: Option<[S; 5]> = None;\n+   |         -------- move occurs because `arr1` has type `std::option::Option<[main::S; 5]>`, which does not implement the `Copy` trait\n+...\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([_, ref mut borrow @ .., _, mov] = arr1);\n+   |                                               ---- variable moved due to use in closure\n+...\n+LL |     m!([_, mov1, mov2, mov3, _] = &arr1);\n+   |                                   ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr2`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:120:10\n+   |\n+LL |     let arr2: Option<[S; 3]> = None;\n+   |         ---- move occurs because `arr2` has type `std::option::Option<[main::S; 3]>`, which does not implement the `Copy` trait\n+LL |     let arr3: Option<[S; 5]> = None;\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([mov @ .., ref borrow] = arr2);\n+   |                                     ---- variable moved due to use in closure\n+...\n+LL |     drop(&arr2);\n+   |          ^^^^^ value borrowed here after move\n+\n+error[E0382]: borrow of moved value: `arr3`\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:121:35\n+   |\n+LL |     let arr3: Option<[S; 5]> = None;\n+   |         ---- move occurs because `arr3` has type `std::option::Option<[main::S; 5]>`, which does not implement the `Copy` trait\n+LL |     let mut closure = || {\n+   |                       -- value moved into closure here\n+...\n+LL |         m!([_, ref borrow @ .., _, mov] = arr3);\n+   |                                           ---- variable moved due to use in closure\n+...\n+LL |     m!([_, mov1, mov2, mov3, _] = &arr3);\n+   |                                   ^^^^^ value borrowed here after move\n+\n+error: aborting due to 27 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}]}