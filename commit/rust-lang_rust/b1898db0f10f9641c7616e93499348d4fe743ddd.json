{"sha": "b1898db0f10f9641c7616e93499348d4fe743ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxODk4ZGIwZjEwZjk2NDFjNzYxNmU5MzQ5OTM0OGQ0ZmU3NDNkZGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-04T00:55:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-10T17:28:48Z"}, "message": "std: Implement CommandExt::before_exec\n\nThis is a Unix-specific function which adds the ability to register a closure to\nrun pre-exec to configure the child process as required (note that these\nclosures are run post-fork).\n\ncc #31398", "tree": {"sha": "c0f4add8dbc41cf4946ba211b2cff3ce1416a6cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0f4add8dbc41cf4946ba211b2cff3ce1416a6cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1898db0f10f9641c7616e93499348d4fe743ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1898db0f10f9641c7616e93499348d4fe743ddd", "html_url": "https://github.com/rust-lang/rust/commit/b1898db0f10f9641c7616e93499348d4fe743ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1898db0f10f9641c7616e93499348d4fe743ddd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c4198469025bf037f59d617c5b75229546ce68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4198469025bf037f59d617c5b75229546ce68a", "html_url": "https://github.com/rust-lang/rust/commit/6c4198469025bf037f59d617c5b75229546ce68a"}], "stats": {"total": 147, "additions": 143, "deletions": 4}, "files": [{"sha": "e11bb72a35a5875f6cfcd6f95178ec5f8db69a23", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=b1898db0f10f9641c7616e93499348d4fe743ddd", "patch": "@@ -269,7 +269,7 @@ impl Command {\n         self\n     }\n \n-    fn spawn_inner(&self, default_io: StdioImp) -> io::Result<Child> {\n+    fn spawn_inner(&mut self, default_io: StdioImp) -> io::Result<Child> {\n         let default_io = Stdio(default_io);\n \n         // See comment on `setup_io` for what `_drop_later` is.\n@@ -283,7 +283,7 @@ impl Command {\n             setup_io(self.stderr.as_ref().unwrap_or(&default_io), false)\n         );\n \n-        match imp::Process::spawn(&self.inner, their_stdin, their_stdout,\n+        match imp::Process::spawn(&mut self.inner, their_stdin, their_stdout,\n                                   their_stderr) {\n             Err(e) => Err(e),\n             Ok(handle) => Ok(Child {"}, {"sha": "96727ed66745a14b8804a6e4780e8726a17eabb9", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=b1898db0f10f9641c7616e93499348d4fe743ddd", "patch": "@@ -12,6 +12,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use prelude::v1::*;\n+\n+use io;\n use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n use os::unix::raw::{uid_t, gid_t};\n use process;\n@@ -44,6 +47,34 @@ pub trait CommandExt {\n     #[unstable(feature = \"process_session_leader\", reason = \"recently added\",\n                issue = \"27811\")]\n     fn session_leader(&mut self, on: bool) -> &mut process::Command;\n+\n+    /// Schedules a closure to be run just before the `exec` function is\n+    /// invoked.\n+    ///\n+    /// The closure is allowed to return an I/O error whose OS error code will\n+    /// be communicated back to the parent and returned as an error from when\n+    /// the spawn was requested.\n+    ///\n+    /// Multiple closures can be registered and they will be called in order of\n+    /// their registration. If a closure returns `Err` then no further closures\n+    /// will be called and the spawn operation will immediately return with a\n+    /// failure.\n+    ///\n+    /// # Notes\n+    ///\n+    /// This closure will be run in the context of the child process after a\n+    /// `fork`. This primarily means that any modificatons made to memory on\n+    /// behalf of this closure will **not** be visible to the parent process.\n+    /// This is often a very constrained environment where normal operations\n+    /// like `malloc` or acquiring a mutex are not guaranteed to work (due to\n+    /// other threads perhaps still running when the `fork` was run).\n+    ///\n+    /// When this closure is run, aspects such as the stdio file descriptors and\n+    /// working directory have successfully been changed, so output to these\n+    /// locations may not appear where intended.\n+    #[unstable(feature = \"process_exec\", issue = \"31398\")]\n+    fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -62,6 +93,13 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().session_leader(on);\n         self\n     }\n+\n+    fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static\n+    {\n+        self.as_inner_mut().before_exec(Box::new(f));\n+        self\n+    }\n }\n \n /// Unix-specific extensions to `std::process::ExitStatus`"}, {"sha": "7387e9def9f04b6b412f117798626bcabd03cbf6", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=b1898db0f10f9641c7616e93499348d4fe743ddd", "patch": "@@ -58,6 +58,7 @@ pub struct Command {\n     gid: Option<gid_t>,\n     session_leader: bool,\n     saw_nul: bool,\n+    closures: Vec<Box<FnMut() -> io::Result<()> + Send + Sync>>,\n }\n \n impl Command {\n@@ -75,6 +76,7 @@ impl Command {\n             gid: None,\n             session_leader: false,\n             saw_nul: saw_nul,\n+            closures: Vec::new(),\n         }\n     }\n \n@@ -164,6 +166,11 @@ impl Command {\n     pub fn session_leader(&mut self, session_leader: bool) {\n         self.session_leader = session_leader;\n     }\n+\n+    pub fn before_exec(&mut self,\n+                       f: Box<FnMut() -> io::Result<()> + Send + Sync>) {\n+        self.closures.push(f);\n+    }\n }\n \n fn os2c(s: &OsStr, saw_nul: &mut bool) -> CString {\n@@ -283,7 +290,7 @@ impl Process {\n         Ok(())\n     }\n \n-    pub fn spawn(cfg: &Command,\n+    pub fn spawn(cfg: &mut Command,\n                  in_fd: Stdio,\n                  out_fd: Stdio,\n                  err_fd: Stdio) -> io::Result<Process> {\n@@ -387,7 +394,7 @@ impl Process {\n     // allocation). Instead we just close it manually. This will never\n     // have the drop glue anyway because this code never returns (the\n     // child will either exec() or invoke libc::exit)\n-    unsafe fn exec(cfg: &Command,\n+    unsafe fn exec(cfg: &mut Command,\n                    in_fd: Stdio,\n                    out_fd: Stdio,\n                    err_fd: Stdio) -> io::Error {\n@@ -497,6 +504,10 @@ impl Process {\n             }\n         }\n \n+        for callback in cfg.closures.iter_mut() {\n+            try!(callback());\n+        }\n+\n         libc::execvp(cfg.argv[0], cfg.argv.as_ptr());\n         io::Error::last_os_error()\n     }"}, {"sha": "16560637b692667da1e96c0588ec638c1d1f29f7", "filename": "src/test/run-pass/command-before-exec.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1898db0f10f9641c7616e93499348d4fe743ddd/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs?ref=b1898db0f10f9641c7616e93499348d4fe743ddd", "patch": "@@ -0,0 +1,90 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows - this is a unix-specific test\n+\n+#![feature(process_exec, libc)]\n+\n+extern crate libc;\n+\n+use std::env;\n+use std::io::Error;\n+use std::os::unix::process::CommandExt;\n+use std::process::Command;\n+use std::sync::Arc;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+fn main() {\n+    if let Some(arg) = env::args().skip(1).next() {\n+        match &arg[..] {\n+            \"test1\" => println!(\"hello2\"),\n+            \"test2\" => assert_eq!(env::var(\"FOO\").unwrap(), \"BAR\"),\n+            \"test3\" => assert_eq!(env::current_dir().unwrap()\n+                                      .to_str().unwrap(), \"/\"),\n+            \"empty\" => {}\n+            _ => panic!(\"unknown argument: {}\", arg),\n+        }\n+        return\n+    }\n+\n+    let me = env::current_exe().unwrap();\n+\n+    let output = Command::new(&me).arg(\"test1\").before_exec(|| {\n+        println!(\"hello\");\n+        Ok(())\n+    }).output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"hello\\nhello2\\n\");\n+\n+    let output = Command::new(&me).arg(\"test2\").before_exec(|| {\n+        env::set_var(\"FOO\", \"BAR\");\n+        Ok(())\n+    }).output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+\n+    let output = Command::new(&me).arg(\"test3\").before_exec(|| {\n+        env::set_current_dir(\"/\").unwrap();\n+        Ok(())\n+    }).output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+\n+    let output = Command::new(&me).arg(\"bad\").before_exec(|| {\n+        Err(Error::from_raw_os_error(102))\n+    }).output().err().unwrap();\n+    assert_eq!(output.raw_os_error(), Some(102));\n+\n+    let pid = unsafe { libc::getpid() };\n+    assert!(pid >= 0);\n+    let output = Command::new(&me).arg(\"empty\").before_exec(move || {\n+        let child = unsafe { libc::getpid() };\n+        assert!(child >= 0);\n+        assert!(pid != child);\n+        Ok(())\n+    }).output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+\n+    let mem = Arc::new(AtomicUsize::new(0));\n+    let mem2 = mem.clone();\n+    let output = Command::new(&me).arg(\"empty\").before_exec(move || {\n+        assert_eq!(mem2.fetch_add(1, Ordering::SeqCst), 0);\n+        Ok(())\n+    }).output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+    assert_eq!(mem.load(Ordering::SeqCst), 0);\n+}"}]}