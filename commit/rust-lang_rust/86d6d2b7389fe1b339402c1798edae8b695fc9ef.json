{"sha": "86d6d2b7389fe1b339402c1798edae8b695fc9ef", "node_id": "C_kwDOAAsO6NoAKDg2ZDZkMmI3Mzg5ZmUxYjMzOTQwMmMxNzk4ZWRhZThiNjk1ZmM5ZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T07:27:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T07:27:44Z"}, "message": "Auto merge of #89755 - jkugelman:must-use-conversions-that-move-self, r=joshtriplett\n\nAdd #[must_use] to conversions that move self\n\nEverything here got the same message. Is the wording okay?\n\n```rust\n#[must_use = \"`self` will be dropped if the result is not used\"]\n```\n\nI want to draw attention to these methods in particular:\n\n```rust\nalloc::sync::Arc<MaybeUninit<T>>     unsafe fn assume_init(self) -> Arc<T>;\nalloc::sync::Arc<[MaybeUninit<T>]>   unsafe fn assume_init(self) -> Arc<[T]>;\ncore::pin::Pin<&'a mut T>            const fn into_ref(self) -> Pin<&'a T>;\ncore::pin::Pin<&'a mut T>            const fn get_mut(self) -> &'a mut T;\ncore::pin::Pin<&'a mut T>            const unsafe fn get_unchecked_mut(self) -> &'a mut T;\ncore::pin::Pin<&'a mut T>            unsafe fn map_unchecked_mut(self, func: F) -> Pin<&'a mut U>;\ncore::pin::Pin<&'a mut Pin<P>>       fn as_deref_mut(self) -> Pin<&'a mut P::Target>;\n```\n\nParent issue: #89692\n\nr? `@joshtriplett`", "tree": {"sha": "88c37951da1bbc2c46818b1705d6fa5e962eae5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88c37951da1bbc2c46818b1705d6fa5e962eae5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d6d2b7389fe1b339402c1798edae8b695fc9ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d6d2b7389fe1b339402c1798edae8b695fc9ef", "html_url": "https://github.com/rust-lang/rust/commit/86d6d2b7389fe1b339402c1798edae8b695fc9ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d6d2b7389fe1b339402c1798edae8b695fc9ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a757817c352801de8b0593728f8aee21e23cd53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a757817c352801de8b0593728f8aee21e23cd53", "html_url": "https://github.com/rust-lang/rust/commit/9a757817c352801de8b0593728f8aee21e23cd53"}, {"sha": "b115781bcd0609e94c08192924853097c73f1a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b115781bcd0609e94c08192924853097c73f1a1c", "html_url": "https://github.com/rust-lang/rust/commit/b115781bcd0609e94c08192924853097c73f1a1c"}], "stats": {"total": 65, "additions": 54, "deletions": 11}, "files": [{"sha": "75720a970a31f780fcda4d458b2a8624a0a18a0c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -848,6 +848,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), vec![5, 4]);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n     pub fn into_iter_sorted(self) -> IntoIterSorted<T> {\n         IntoIterSorted { inner: self }\n@@ -1028,6 +1029,7 @@ impl<T> BinaryHeap<T> {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n     pub fn into_vec(self) -> Vec<T> {\n         self.into()"}, {"sha": "e9265262c8b8402448b6c71eb4b9348541c2c5f3", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -1264,6 +1264,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n@@ -1286,6 +1287,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }"}, {"sha": "3e9048b17688fb78f7d589c0dac2ba352a773415", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -448,6 +448,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     /// }\n     /// assert_eq!(map[\"poneyland\"], 22);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_mut(self) -> &'a mut V {\n         self.handle.into_val_mut()"}, {"sha": "173960341f859b5acab3b8b8f094de9c6b1ee36e", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -1755,20 +1755,20 @@ fn test_send() {\n #[test]\n fn test_ord_absence() {\n     fn map<K>(mut map: BTreeMap<K, ()>) {\n-        map.is_empty();\n-        map.len();\n+        let _ = map.is_empty();\n+        let _ = map.len();\n         map.clear();\n-        map.iter();\n-        map.iter_mut();\n-        map.keys();\n-        map.values();\n-        map.values_mut();\n+        let _ = map.iter();\n+        let _ = map.iter_mut();\n+        let _ = map.keys();\n+        let _ = map.values();\n+        let _ = map.values_mut();\n         if true {\n-            map.into_values();\n+            let _ = map.into_values();\n         } else if true {\n-            map.into_iter();\n+            let _ = map.into_iter();\n         } else {\n-            map.into_keys();\n+            let _ = map.into_keys();\n         }\n     }\n "}, {"sha": "c6573597b1e8c6ecc8da3de52261fd7ca3169089", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -2130,6 +2130,7 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// [`from_raw`]: Weak::from_raw\n     /// [`as_ptr`]: Weak::as_ptr\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn into_raw(self) -> *const T {\n         let result = self.as_ptr();"}, {"sha": "d00792b9c3e71961b8fb1c53e159f590ade168df", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -676,6 +676,7 @@ impl String {\n     /// let rebuilt = unsafe { String::from_raw_parts(ptr, len, cap) };\n     /// assert_eq!(rebuilt, \"hello\");\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue = \"65816\")]\n     pub fn into_raw_parts(self) -> (*mut u8, usize, usize) {\n         self.vec.into_raw_parts()\n@@ -781,6 +782,7 @@ impl String {\n     /// assert_eq!(&[104, 101, 108, 108, 111][..], &bytes[..]);\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.vec\n@@ -1738,6 +1740,7 @@ impl String {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n@@ -1783,6 +1786,7 @@ impl FromUtf8Error {\n     ///\n     /// assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.bytes"}, {"sha": "7dd1bc51560390b419d900ee65fe203766178c73", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -735,6 +735,7 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     /// assert_eq!(*five, 5)\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<T> {\n         Arc::from_inner(mem::ManuallyDrop::new(self).ptr.cast())\n@@ -776,6 +777,7 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<[T]> {\n         unsafe { Arc::from_ptr(mem::ManuallyDrop::new(self).ptr.as_ptr() as _) }\n@@ -1759,6 +1761,7 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// [`from_raw`]: Weak::from_raw\n     /// [`as_ptr`]: Weak::as_ptr\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn into_raw(self) -> *const T {\n         let result = self.as_ptr();"}, {"sha": "df8af22a317bcbe7ce1eeb58b7a3d7e2452d555f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -1473,6 +1473,7 @@ impl<T: Copy> Option<&mut T> {\n     /// let copied = opt_x.copied();\n     /// assert_eq!(copied, Some(12));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n     pub fn copied(self) -> Option<T> {\n         self.map(|&mut t| t)\n@@ -1492,6 +1493,7 @@ impl<T: Clone> Option<&T> {\n     /// let cloned = opt_x.cloned();\n     /// assert_eq!(cloned, Some(12));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn cloned(self) -> Option<T> {\n         self.map(|t| t.clone())"}, {"sha": "34fc874ada09b7171017fcf43f9ec3b01462ab31", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -715,6 +715,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Converts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[inline(always)]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub const fn into_ref(self) -> Pin<&'a T> {\n@@ -731,6 +732,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n     #[inline(always)]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     pub const fn get_mut(self) -> &'a mut T\n@@ -751,6 +753,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// If the underlying data is `Unpin`, `Pin::get_mut` should be used\n     /// instead.\n     #[inline(always)]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     pub const unsafe fn get_unchecked_mut(self) -> &'a mut T {\n@@ -772,6 +775,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// not move out of the argument you receive to the interior function.\n     ///\n     /// [`pin` module]: self#projections-and-structural-pinning\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub unsafe fn map_unchecked_mut<U, F>(self, func: F) -> Pin<&'a mut U>\n     where\n@@ -811,6 +815,7 @@ impl<'a, P: DerefMut> Pin<&'a mut Pin<P>> {\n     /// implementations of `P::DerefMut` are likewise ruled out by the contract of\n     /// `Pin::new_unchecked`.\n     #[unstable(feature = \"pin_deref_mut\", issue = \"86918\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline(always)]\n     pub fn as_deref_mut(self) -> Pin<&'a mut P::Target> {\n         // SAFETY: What we're asserting here is that going from"}, {"sha": "b3deddca18efea9801175a809bf3d5cc4d2db05e", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -101,6 +101,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n@@ -131,6 +132,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Casts to a pointer of another type.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n         // SAFETY: Unique::new_unchecked() creates a new unique and needs"}, {"sha": "70e59cda63f26dd071900a0a1150ce251418d685", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -267,6 +267,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// // Now slice is \"[2, 2, 3]\":\n     /// println!(\"{:?}\", slice);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n         // SAFETY: the iterator was created from a mutable slice with pointer\n@@ -1869,6 +1870,7 @@ impl<'a, T> ChunksExactMut<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem\n@@ -2264,6 +2266,7 @@ impl<'a, T, const N: usize> ArrayChunksMut<'a, T, N> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `N-1`\n     /// elements.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem\n@@ -2875,6 +2878,7 @@ impl<'a, T> RChunksExactMut<'a, T> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem"}, {"sha": "f0bd09091d7b53f8a60767e8ddf7acf46aa8767d", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -1720,6 +1720,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Converts the entry into a mutable reference to the key in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_key(self) -> &'a mut K {\n         self.base.into_key()\n@@ -1735,6 +1736,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_mut(self) -> &'a mut V {\n         self.base.into_mut()\n@@ -1764,6 +1766,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Converts the `OccupiedEntry` into a mutable reference to the key and value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_key_value(self) -> (&'a mut K, &'a mut V) {\n         self.base.into_key_value()"}, {"sha": "6b488e49ed74b4dc9b0c07e4c6a0667592219355", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -322,6 +322,7 @@ impl FromVecWithNulError {\n     ///\n     /// assert_eq!(bytes, value.unwrap_err().into_bytes());\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.bytes\n     }\n@@ -524,6 +525,7 @@ impl CString {\n     /// }\n     /// ```\n     #[inline]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut c_char {\n         Box::into_raw(self.into_inner()) as *mut c_char\n@@ -547,7 +549,6 @@ impl CString {\n     /// let err = cstring.into_string().err().expect(\"into_string().err() failed\");\n     /// assert_eq!(err.utf8_error().valid_up_to(), 1);\n     /// ```\n-\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_string(self) -> Result<String, IntoStringError> {\n         String::from_utf8(self.into_bytes()).map_err(|e| IntoStringError {\n@@ -571,6 +572,7 @@ impl CString {\n     /// let bytes = c_string.into_bytes();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o']);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         let mut vec = self.into_inner().into_vec();\n@@ -591,6 +593,7 @@ impl CString {\n     /// let bytes = c_string.into_bytes_with_nul();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes_with_nul(self) -> Vec<u8> {\n         self.into_inner().into_vec()\n@@ -667,6 +670,7 @@ impl CString {\n     /// assert_eq!(&*boxed,\n     ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n         unsafe { Box::from_raw(Box::into_raw(self.into_inner()) as *mut CStr) }\n@@ -1018,6 +1022,7 @@ impl NulError {\n     /// let nul_error = CString::new(\"foo\\0bar\").unwrap_err();\n     /// assert_eq!(nul_error.into_vec(), b\"foo\\0bar\");\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_vec(self) -> Vec<u8> {\n         self.1\n@@ -1092,6 +1097,7 @@ impl fmt::Display for FromVecWithNulError {\n impl IntoStringError {\n     /// Consumes this error, returning original [`CString`] which generated the\n     /// error.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_cstring(self) -> CString {\n         self.inner"}, {"sha": "f5cef60e1267ac88bca50cc27ae627c4294d4622", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -346,6 +346,7 @@ impl OsString {\n     ///\n     /// let b: Box<OsStr> = s.into_boxed_os_str();\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {\n         let rw = Box::into_raw(self.inner.into_box()) as *mut OsStr;"}, {"sha": "c7423e4d92a896c359743285a3e76f2d47ab3ed6", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -476,6 +476,7 @@ pub struct WriterPanicked {\n impl WriterPanicked {\n     /// Returns the perhaps-unwritten data.  Some of this data may have been written by the\n     /// panicking call(s) to the underlying writer, so simply writing it again is not a good idea.\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"bufwriter_into_parts\", since = \"1.56.0\")]\n     pub fn into_inner(self) -> Vec<u8> {\n         self.buf"}, {"sha": "6101260e149a0838b7497d239c4a101390272515", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -657,6 +657,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_inner(self) -> Option<Box<dyn error::Error + Send + Sync>> {\n         match self.repr {"}, {"sha": "9389501e0129e63b8a6d4d5a042b06a79e7a27a5", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -464,6 +464,7 @@ impl Stdin {\n     ///     println!(\"got a line: {}\", line.unwrap());\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n     pub fn lines(self) -> Lines<StdinLock<'static>> {\n         self.into_locked().lines()"}, {"sha": "2c6e3930059905bd94f42b56c2305db7b4a72b2b", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -883,6 +883,7 @@ impl TcpListener {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n     pub fn into_incoming(self) -> IntoIncoming {\n         IntoIncoming { listener: self }"}, {"sha": "6bfc7b0a5c1dfb89b42a3f79840495da3fa12825", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d6d2b7389fe1b339402c1798edae8b695fc9ef/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=86d6d2b7389fe1b339402c1798edae8b695fc9ef", "patch": "@@ -532,6 +532,7 @@ impl<'a> Component<'a> {\n     /// let components: Vec<_> = path.components().map(|comp| comp.as_os_str()).collect();\n     /// assert_eq!(&components, &[\".\", \"tmp\", \"foo\", \"bar.txt\"]);\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_os_str(self) -> &'a OsStr {\n         match self {\n@@ -1428,13 +1429,15 @@ impl PathBuf {\n     /// let os_str = p.into_os_string();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_os_string(self) -> OsString {\n         self.inner\n     }\n \n     /// Converts this `PathBuf` into a [boxed](Box) [`Path`].\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub fn into_boxed_path(self) -> Box<Path> {\n         let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;"}]}