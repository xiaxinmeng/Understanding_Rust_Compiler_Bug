{"sha": "0f9b7bd80fbb96c7743b86b154f8882918b5737f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOWI3YmQ4MGZiYjk2Yzc3NDNiODZiMTU0Zjg4ODI5MThiNTczN2Y=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-29T23:38:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-29T23:38:28Z"}, "message": "Rollup merge of #74902 - rust-lang:into_raw_non_null, r=dtolnay\n\nRemove deprecated unstable `{Box,Rc,Arc}::into_raw_non_null`\u00a0functions\n\nFCP: https://github.com/rust-lang/rust/issues/47336#issuecomment-619369613", "tree": {"sha": "19d0252e055412e2cac8ed8cdc851e7fe4f375a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d0252e055412e2cac8ed8cdc851e7fe4f375a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9b7bd80fbb96c7743b86b154f8882918b5737f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIgh0CRBK7hj4Ov3rIwAAdHIIABYioQKgo/tC1fL9YV8KxGWs\nehCKp1thuM6pq1hWhh6nHU3X1L0K382FoTa2QEp5zB37wCzIUMkA7uPtWkvg0jLN\nf9ZJQzB7/8p8YoazuNg7SHf7l01+llaFw/dIe21lRh/7ICmDyFbs8H02rwjq+Z8Q\nrLXpUzG7iUXG9mq7WTtGwPjJ8KhVCL9gxeBcVrkzfvYV0PKcx5AFkVl7gsx9SCxd\neQHT3U4KIjIrasIRUAmJ15zBt1/8rMkfuoD4dC8DRytPYuHEACvxal6WXiiLZ5CD\n+q5eRH54vMD4Jzm1p4cy8dPguS4fC8rLApAn1Q7PO/wNVhP9ayuD5Za0sFWNuIs=\n=56MK\n-----END PGP SIGNATURE-----\n", "payload": "tree 19d0252e055412e2cac8ed8cdc851e7fe4f375a3\nparent e6b0376e7b63cb7a6e57762bd4c8e4955afdec61\nparent 1fb67363bfeb66a956297a81bc1c95c8aaee056a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1596065908 -0700\ncommitter GitHub <noreply@github.com> 1596065908 -0700\n\nRollup merge of #74902 - rust-lang:into_raw_non_null, r=dtolnay\n\nRemove deprecated unstable `{Box,Rc,Arc}::into_raw_non_null`\u00a0functions\n\nFCP: https://github.com/rust-lang/rust/issues/47336#issuecomment-619369613\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9b7bd80fbb96c7743b86b154f8882918b5737f", "html_url": "https://github.com/rust-lang/rust/commit/0f9b7bd80fbb96c7743b86b154f8882918b5737f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9b7bd80fbb96c7743b86b154f8882918b5737f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b0376e7b63cb7a6e57762bd4c8e4955afdec61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b0376e7b63cb7a6e57762bd4c8e4955afdec61", "html_url": "https://github.com/rust-lang/rust/commit/e6b0376e7b63cb7a6e57762bd4c8e4955afdec61"}, {"sha": "1fb67363bfeb66a956297a81bc1c95c8aaee056a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb67363bfeb66a956297a81bc1c95c8aaee056a", "html_url": "https://github.com/rust-lang/rust/commit/1fb67363bfeb66a956297a81bc1c95c8aaee056a"}], "stats": {"total": 92, "additions": 1, "deletions": 91}, "files": [{"sha": "65e0c984fe893d0eaba2faf63adb74de20447e24", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0f9b7bd80fbb96c7743b86b154f8882918b5737f/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9b7bd80fbb96c7743b86b154f8882918b5737f/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=0f9b7bd80fbb96c7743b86b154f8882918b5737f", "patch": "@@ -143,7 +143,7 @@ use core::ops::{\n     CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Generator, GeneratorState, Receiver,\n };\n use core::pin::Pin;\n-use core::ptr::{self, NonNull, Unique};\n+use core::ptr::{self, Unique};\n use core::task::{Context, Poll};\n \n use crate::alloc::{self, AllocInit, AllocRef, Global};\n@@ -451,50 +451,6 @@ impl<T: ?Sized> Box<T> {\n         Box::leak(b) as *mut T\n     }\n \n-    /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n-    ///\n-    /// After calling this function, the caller is responsible for the\n-    /// memory previously managed by the `Box`. In particular, the\n-    /// caller should properly destroy `T` and release the memory. The\n-    /// easiest way to do so is to convert the `NonNull<T>` pointer\n-    /// into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n-    /// function.\n-    ///\n-    /// Note: this is an associated function, which means that you have\n-    /// to call it as `Box::into_raw_non_null(b)`\n-    /// instead of `b.into_raw_non_null()`. This\n-    /// is so that there is no conflict with a method on the inner type.\n-    ///\n-    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(box_into_raw_non_null)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// let x = Box::new(5);\n-    /// let ptr = Box::into_raw_non_null(x);\n-    ///\n-    /// // Clean up the memory by converting the NonNull pointer back\n-    /// // into a Box and letting the Box be dropped.\n-    /// let x = unsafe { Box::from_raw(ptr.as_ptr()) };\n-    /// ```\n-    #[unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")]\n-    #[rustc_deprecated(\n-        since = \"1.44.0\",\n-        reason = \"use `Box::leak(b).into()` or `NonNull::from(Box::leak(b))` instead\"\n-    )]\n-    #[inline]\n-    pub fn into_raw_non_null(b: Box<T>) -> NonNull<T> {\n-        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n-        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n-        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n-        // so all raw pointer methods go through `leak` which creates a (unique)\n-        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n-        Box::leak(b).into()\n-    }\n-\n     #[unstable(\n         feature = \"ptr_internals\",\n         issue = \"none\","}, {"sha": "d3450cfbc814eee0309fd4b7da1b03c3b772df5a", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f9b7bd80fbb96c7743b86b154f8882918b5737f/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9b7bd80fbb96c7743b86b154f8882918b5737f/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=0f9b7bd80fbb96c7743b86b154f8882918b5737f", "patch": "@@ -645,29 +645,6 @@ impl<T: ?Sized> Rc<T> {\n         unsafe { Self::from_ptr(rc_ptr) }\n     }\n \n-    /// Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_into_raw_non_null)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// use std::rc::Rc;\n-    ///\n-    /// let x = Rc::new(\"hello\".to_owned());\n-    /// let ptr = Rc::into_raw_non_null(x);\n-    /// let deref = unsafe { ptr.as_ref() };\n-    /// assert_eq!(deref, \"hello\");\n-    /// ```\n-    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n-    #[rustc_deprecated(since = \"1.44.0\", reason = \"use `Rc::into_raw` instead\")]\n-    #[inline]\n-    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n-        // safe because Rc guarantees its pointer is non-null\n-        unsafe { NonNull::new_unchecked(Rc::into_raw(this) as *mut _) }\n-    }\n-\n     /// Creates a new [`Weak`][weak] pointer to this allocation.\n     ///\n     /// [weak]: struct.Weak.html"}, {"sha": "906beba2a6296199159044b904d0db19675fda3f", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f9b7bd80fbb96c7743b86b154f8882918b5737f/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9b7bd80fbb96c7743b86b154f8882918b5737f/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=0f9b7bd80fbb96c7743b86b154f8882918b5737f", "patch": "@@ -646,29 +646,6 @@ impl<T: ?Sized> Arc<T> {\n         }\n     }\n \n-    /// Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(rc_into_raw_non_null)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// use std::sync::Arc;\n-    ///\n-    /// let x = Arc::new(\"hello\".to_owned());\n-    /// let ptr = Arc::into_raw_non_null(x);\n-    /// let deref = unsafe { ptr.as_ref() };\n-    /// assert_eq!(deref, \"hello\");\n-    /// ```\n-    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n-    #[rustc_deprecated(since = \"1.44.0\", reason = \"use `Arc::into_raw` instead\")]\n-    #[inline]\n-    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n-        // safe because Arc guarantees its pointer is non-null\n-        unsafe { NonNull::new_unchecked(Arc::into_raw(this) as *mut _) }\n-    }\n-\n     /// Creates a new [`Weak`][weak] pointer to this allocation.\n     ///\n     /// [weak]: struct.Weak.html"}]}