{"sha": "04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjVmY2ZkYjI4ZjE4ZjRkNTI3OWI0M2MyYmIyYjNmOWMwODIzMTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-13T08:27:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-13T08:27:00Z"}, "message": "Ensure that listing&resolving code actions use the same set of actions", "tree": {"sha": "6f15b2ffa1bd22ec7543b1cb9fb059b12d6ec002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f15b2ffa1bd22ec7543b1cb9fb059b12d6ec002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "html_url": "https://github.com/rust-lang/rust/commit/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "html_url": "https://github.com/rust-lang/rust/commit/fe29a9e837c6e9699185ccae55e83902b4f6ef6a"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "bbc0d5eec335f98e0bb9b5add8874fe38e249e86", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "patch": "@@ -531,6 +531,34 @@ impl Analysis {\n         self.with_db(|db| diagnostics::diagnostics(db, config, file_id))\n     }\n \n+    /// Convenience function to return assists + quick fixes for diagnostics\n+    pub fn assists_with_fixes(\n+        &self,\n+        assist_config: &AssistConfig,\n+        diagnostics_config: &DiagnosticsConfig,\n+        resolve: bool,\n+        frange: FileRange,\n+    ) -> Cancelable<Vec<Assist>> {\n+        let include_fixes = match &assist_config.allowed {\n+            Some(it) => it.iter().any(|&it| it == AssistKind::None || it == AssistKind::QuickFix),\n+            None => true,\n+        };\n+\n+        self.with_db(|db| {\n+            let mut res = Assist::get(db, assist_config, resolve, frange);\n+            ssr::add_ssr_assist(db, &mut res, resolve, frange);\n+\n+            if include_fixes {\n+                res.extend(\n+                    diagnostics::diagnostics(db, diagnostics_config, frange.file_id)\n+                        .into_iter()\n+                        .filter_map(|it| it.fix),\n+                );\n+            }\n+            res\n+        })\n+    }\n+\n     /// Returns the edit required to rename reference at the position to the new\n     /// name.\n     pub fn rename("}, {"sha": "85cc8602e021f431ae7042355578eda72cf4fa8e", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "patch": "@@ -8,8 +8,8 @@ use std::{\n };\n \n use ide::{\n-    AnnotationConfig, AssistKind, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n-    Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n+    AnnotationConfig, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, Query,\n+    RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n@@ -1003,27 +1003,13 @@ pub(crate) fn handle_code_action(\n \n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n-    let include_quick_fixes = match &assists_config.allowed {\n-        Some(v) => v.iter().any(|it| it == &AssistKind::None || it == &AssistKind::QuickFix),\n-        None => true,\n-    };\n     let code_action_resolve_cap = snap.config.code_action_resolve();\n-\n-    let mut assists = Vec::new();\n-\n-    // Fixes from native diagnostics.\n-    if include_quick_fixes {\n-        let diagnostics = snap.analysis.diagnostics(&snap.config.diagnostics(), frange.file_id)?;\n-        assists.extend(\n-            diagnostics\n-                .into_iter()\n-                .filter_map(|d| d.fix)\n-                .filter(|fix| fix.target.intersect(frange.range).is_some()),\n-        )\n-    }\n-\n-    // Assists proper.\n-    assists.extend(snap.analysis.assists(&assists_config, !code_action_resolve_cap, frange)?);\n+    let assists = snap.analysis.assists_with_fixes(\n+        &assists_config,\n+        &snap.config.diagnostics(),\n+        !code_action_resolve_cap,\n+        frange,\n+    )?;\n     for (index, assist) in assists.into_iter().enumerate() {\n         let resolve_data =\n             if code_action_resolve_cap { Some((index, params.clone())) } else { None };\n@@ -1066,7 +1052,13 @@ pub(crate) fn handle_code_action_resolve(\n         .only\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n-    let assists = snap.analysis.assists(&assists_config, true, frange)?;\n+    let assists = snap.analysis.assists_with_fixes(\n+        &assists_config,\n+        &snap.config.diagnostics(),\n+        true,\n+        frange,\n+    )?;\n+\n     let (id, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];"}]}