{"sha": "5b9e110eab9c30428e99995a0adbec82857e3a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOWUxMTBlYWI5YzMwNDI4ZTk5OTk1YTBhZGJlYzgyODU3ZTNhMWE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-25T14:19:44Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-25T14:19:44Z"}, "message": "libsyntax: Convert ast::attribute_ to store a @meta_item", "tree": {"sha": "eee469f01c305aa346c070a430336852d5900753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eee469f01c305aa346c070a430336852d5900753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9e110eab9c30428e99995a0adbec82857e3a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9e110eab9c30428e99995a0adbec82857e3a1a", "html_url": "https://github.com/rust-lang/rust/commit/5b9e110eab9c30428e99995a0adbec82857e3a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9e110eab9c30428e99995a0adbec82857e3a1a/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b26d434ad126c1ee35ca63c02ff3d9a243e3a00a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b26d434ad126c1ee35ca63c02ff3d9a243e3a00a", "html_url": "https://github.com/rust-lang/rust/commit/b26d434ad126c1ee35ca63c02ff3d9a243e3a00a"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "94dbfb51eb8226d97c57643348c7c32634244825", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -358,7 +358,7 @@ pub mod test {\n     pub fn make_crate_type_attr(+t: ~str) -> ast::attribute {\n         codemap::respan(codemap::dummy_sp(), ast::attribute_ {\n             style: ast::attr_outer,\n-            value: codemap::respan(codemap::dummy_sp(),\n+            value: @codemap::respan(codemap::dummy_sp(),\n                 ast::meta_name_value(\n                     @~\"crate_type\",\n                     codemap::respan(codemap::dummy_sp(),"}, {"sha": "62a2dfd880b46ddae7dc99e6ac9c5c2dc47ff6d3", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -50,7 +50,7 @@ fn inject_libcore_ref(sess: Session,\n                 attrs: ~[\n                     spanned(ast::attribute_ {\n                         style: ast::attr_inner,\n-                        value: spanned(ast::meta_name_value(\n+                        value: @spanned(ast::meta_name_value(\n                             @~\"vers\",\n                             spanned(ast::lit_str(@CORE_VERSION.to_str()))\n                         )),"}, {"sha": "5d74d03e27b1ab325b0980bd28a8267d87804e26", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -994,7 +994,7 @@ fn get_attributes(md: ebml::Doc) -> ~[ast::attribute] {\n                 codemap::spanned {\n                     node: ast::attribute_ {\n                         style: ast::attr_outer,\n-                        value: /*bad*/copy *meta_item,\n+                        value: meta_item,\n                         is_sugared_doc: false,\n                     },\n                     span: codemap::dummy_sp()"}, {"sha": "c862a15dbc7a42eb2f0b2b29ede8ec7f21017c3c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -1020,7 +1020,7 @@ fn write_int(writer: io::Writer, &&n: int) {\n     writer.write_be_u32(n as u32);\n }\n \n-fn encode_meta_item(ebml_w: writer::Encoder, mi: meta_item) {\n+fn encode_meta_item(ebml_w: writer::Encoder, mi: @meta_item) {\n     match mi.node {\n       meta_word(name) => {\n         ebml_w.start_tag(tag_meta_item_word);\n@@ -1050,7 +1050,7 @@ fn encode_meta_item(ebml_w: writer::Encoder, mi: meta_item) {\n         ebml_w.writer.write(str::to_bytes(*name));\n         ebml_w.end_tag();\n         for items.each |inner_item| {\n-            encode_meta_item(ebml_w, **inner_item);\n+            encode_meta_item(ebml_w, *inner_item);\n         }\n         ebml_w.end_tag();\n       }"}, {"sha": "586a4f29b7dad5504ea3113538062385f2c0d6a5", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -316,7 +316,7 @@ struct LanguageItemCollector {\n \n impl LanguageItemCollector {\n     fn match_and_collect_meta_item(&self, item_def_id: def_id,\n-                                   meta_item: meta_item) {\n+                                   meta_item: @meta_item) {\n         match meta_item.node {\n             meta_name_value(key, literal) => {\n                 match literal.node {\n@@ -368,10 +368,10 @@ impl LanguageItemCollector {\n             visit_item: |item| {\n                 for item.attrs.each |attribute| {\n                     unsafe {\n-                        (*this).match_and_collect_meta_item(local_def(item\n-                                                                      .id),\n-                                                            attribute.node\n-                                                                     .value);\n+                        (*this).match_and_collect_meta_item(\n+                            local_def(item.id),\n+                            attribute.node.value\n+                        );\n                     }\n                 }\n             },"}, {"sha": "4d071e4b26fbf4ac4ea85ebe9ada596d0d2fac92", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -1142,7 +1142,7 @@ pub enum attr_style { attr_outer, attr_inner, }\n #[deriving_eq]\n pub struct attribute_ {\n     style: attr_style,\n-    value: meta_item,\n+    value: @meta_item,\n     is_sugared_doc: bool,\n }\n "}, {"sha": "3967ea3437b418ec7e39dac9f7e059da85921ad8", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -51,16 +51,17 @@ pub fn mk_word_item(name: @~str) -> @ast::meta_item {\n \n pub fn mk_attr(item: @ast::meta_item) -> ast::attribute {\n     dummy_spanned(ast::attribute_ { style: ast::attr_inner,\n-                                    value: *item,\n+                                    value: item,\n                                     is_sugared_doc: false })\n }\n \n-pub fn mk_sugared_doc_attr(text: ~str,\n+pub fn mk_sugared_doc_attr(+text: ~str,\n                            +lo: BytePos, +hi: BytePos) -> ast::attribute {\n+    let style = doc_comment_style(text);\n     let lit = spanned(lo, hi, ast::lit_str(@text));\n     let attr = ast::attribute_ {\n-        style: doc_comment_style(text),\n-        value: spanned(lo, hi, ast::meta_name_value(@~\"doc\", lit)),\n+        style: style,\n+        value: @spanned(lo, hi, ast::meta_name_value(@~\"doc\", lit)),\n         is_sugared_doc: true\n     };\n     spanned(lo, hi, attr)\n@@ -69,7 +70,7 @@ pub fn mk_sugared_doc_attr(text: ~str,\n /* Conversion */\n \n pub fn attr_meta(attr: ast::attribute) -> @ast::meta_item {\n-    @attr.node.value\n+    attr.node.value\n }\n \n // Get the meta_items from inside a vector of attributes\n@@ -79,7 +80,7 @@ pub fn attr_metas(attrs: ~[ast::attribute]) -> ~[@ast::meta_item] {\n \n pub fn desugar_doc_attr(attr: &ast::attribute) -> ast::attribute {\n     if attr.node.is_sugared_doc {\n-        let comment = get_meta_item_value_str(@attr.node.value).get();\n+        let comment = get_meta_item_value_str(attr.node.value).get();\n         let meta = mk_name_value_item_str(@~\"doc\",\n                                      @strip_doc_comment_decoration(*comment));\n         mk_attr(meta)\n@@ -91,7 +92,7 @@ pub fn desugar_doc_attr(attr: &ast::attribute) -> ast::attribute {\n /* Accessors */\n \n pub pure fn get_attr_name(attr: &ast::attribute) -> @~str {\n-    get_meta_item_name(@attr.node.value)\n+    get_meta_item_name(attr.node.value)\n }\n \n pub pure fn get_meta_item_name(meta: @ast::meta_item) -> @~str {"}, {"sha": "c2d1d82833d2699b2d3cf125ae5a599bf9007e75", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -110,7 +110,7 @@ mod syntax {\n pub fn expand_auto_encode(\n     cx: ext_ctxt,\n     span: span,\n-    _mitem: ast::meta_item,\n+    _mitem: @ast::meta_item,\n     in_items: ~[@ast::item]\n ) -> ~[@ast::item] {\n     fn is_auto_encode(a: &ast::attribute) -> bool {\n@@ -165,7 +165,7 @@ pub fn expand_auto_encode(\n pub fn expand_auto_decode(\n     cx: ext_ctxt,\n     span: span,\n-    _mitem: ast::meta_item,\n+    _mitem: @ast::meta_item,\n     in_items: ~[@ast::item]\n ) -> ~[@ast::item] {\n     fn is_auto_decode(a: &ast::attribute) -> bool {"}, {"sha": "2f35e9ed97864cd01db9c30e7c5c2d087f149638", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -38,7 +38,7 @@ pub struct MacroDef {\n }\n \n pub type ItemDecorator =\n-    fn@(ext_ctxt, span, ast::meta_item, ~[@ast::item]) -> ~[@ast::item];\n+    fn@(ext_ctxt, span, @ast::meta_item, ~[@ast::item]) -> ~[@ast::item];\n \n pub struct SyntaxExpanderTT {\n     expander: SyntaxExpanderTTFun,"}, {"sha": "4942558f8bc3409c066639228b2c57d3d6fdbb42", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -58,7 +58,7 @@ type ExpandDerivingEnumDefFn = &fn(ext_ctxt,\n \n pub fn expand_deriving_eq(cx: ext_ctxt,\n                           span: span,\n-                          _mitem: meta_item,\n+                          _mitem: @meta_item,\n                           in_items: ~[@item])\n                        -> ~[@item] {\n     expand_deriving(cx,\n@@ -70,7 +70,7 @@ pub fn expand_deriving_eq(cx: ext_ctxt,\n \n pub fn expand_deriving_iter_bytes(cx: ext_ctxt,\n                                   span: span,\n-                                  _mitem: meta_item,\n+                                  _mitem: @meta_item,\n                                   in_items: ~[@item])\n                                -> ~[@item] {\n     expand_deriving(cx,"}, {"sha": "cc8435947097ce538eef88598725f0ea8767b45e", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -227,7 +227,7 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n         // Rust coding conventions\n         let non_camel_case_attribute = respan(dummy_sp(), ast::attribute_ {\n             style: ast::attr_outer,\n-            value: respan(dummy_sp(),\n+            value: @respan(dummy_sp(),\n                           ast::meta_list(@~\"allow\", ~[\n                               @respan(dummy_sp(),\n                                       ast::meta_word("}, {"sha": "eaf29d40c3b78e7f2a2f7379b66336ff651ce014", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -98,7 +98,7 @@ fn fold_attribute_(at: attribute, fld: ast_fold) -> attribute {\n     spanned {\n         node: ast::attribute_ {\n             style: at.node.style,\n-            value: *fold_meta_item_(@at.node.value, fld),\n+            value: fold_meta_item_(at.node.value, fld),\n             is_sugared_doc: at.node.is_sugared_doc,\n         },\n         span: fld.new_span(at.span),"}, {"sha": "87ecf6a95676b9f59fe23c932fe8ef6424dba5b5", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -72,7 +72,7 @@ impl parser_attr for Parser {\n         self.expect(token::RBRACKET);\n         let mut hi = self.span.hi;\n         return spanned(lo, hi, ast::attribute_ { style: style,\n-                                                 value: *meta_item,\n+                                                 value: meta_item,\n                                                  is_sugared_doc: false });\n     }\n "}, {"sha": "6230b0465dcc2ef31174a64626ef5dbc86ced747", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9e110eab9c30428e99995a0adbec82857e3a1a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5b9e110eab9c30428e99995a0adbec82857e3a1a", "patch": "@@ -904,7 +904,7 @@ pub fn print_attribute(s: @ps, attr: ast::attribute) {\n         word(s.s, *comment);\n     } else {\n         word(s.s, ~\"#[\");\n-        print_meta_item(s, @attr.node.value);\n+        print_meta_item(s, attr.node.value);\n         word(s.s, ~\"]\");\n     }\n }"}]}