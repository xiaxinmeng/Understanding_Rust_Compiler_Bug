{"sha": "fcbdac96dd261eb3433e8bee52db8860d6e3416a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYmRhYzk2ZGQyNjFlYjM0MzNlOGJlZTUyZGI4ODYwZDZlMzQxNmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T05:27:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T05:27:22Z"}, "message": "Update README files", "tree": {"sha": "ec46ada7c0dcc6ccca6b72d3a6940d8fb9f02101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec46ada7c0dcc6ccca6b72d3a6940d8fb9f02101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcbdac96dd261eb3433e8bee52db8860d6e3416a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbdac96dd261eb3433e8bee52db8860d6e3416a", "html_url": "https://github.com/rust-lang/rust/commit/fcbdac96dd261eb3433e8bee52db8860d6e3416a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcbdac96dd261eb3433e8bee52db8860d6e3416a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d76bcd7d512280631b31f8f80582151968545b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d76bcd7d512280631b31f8f80582151968545b", "html_url": "https://github.com/rust-lang/rust/commit/f2d76bcd7d512280631b31f8f80582151968545b"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "bc7351f357ee2d80334b9bcb5985e0f60dc717b8", "filename": "src/README", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcbdac96dd261eb3433e8bee52db8860d6e3416a/src%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/fcbdac96dd261eb3433e8bee52db8860d6e3416a/src%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME?ref=fcbdac96dd261eb3433e8bee52db8860d6e3416a", "patch": "@@ -4,14 +4,18 @@ Source layout:\n \n comp/              The self-hosted compiler\n \n+lib/               The standard library\n+\n+rustllvm/          LLVM support code\n+\n rt/                The runtime system\n rt/rust_*.cpp      - The majority of the runtime services\n rt/isaac           - The PRNG used for pseudo-random choices in the runtime\n rt/bigint          - The bigint library used for the 'big' type\n rt/uthash          - Small hashtable-and-list library for C, used in runtime\n rt/{sync,util}     - Small utility classes for the runtime.\n \n-test/              Testsuite (for both bootstrap and self-hosted)\n+test/              Testsuite\n test/compile-fail  - Tests that should fail to compile\n test/run-fail      - Tests that should compile, run and fail\n test/run-pass      - Tests that should compile, run and succeed"}, {"sha": "dab8fc0a5cdb5c614eb76d264846c76328f70f59", "filename": "src/comp/README", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/fcbdac96dd261eb3433e8bee52db8860d6e3416a/src%2Fcomp%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/fcbdac96dd261eb3433e8bee52db8860d6e3416a/src%2Fcomp%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2FREADME?ref=fcbdac96dd261eb3433e8bee52db8860d6e3416a", "patch": "@@ -2,8 +2,9 @@ An informal guide to reading and working on the rustc compiler.\n ==================================================================\n \n If you wish to expand on this document, or have one of the\n-slightly-more-familiar authors add anything else to it, please get in touch or\n-file a bug. Your concerns are probably the same as someone else's.\n+slightly-more-familiar authors add anything else to it, please get in\n+touch or file a bug. Your concerns are probably the same as someone\n+else's.\n \n \n High-level concepts\n@@ -13,65 +14,63 @@ Rustc consists of the following subdirectories:\n \n front/    - front-end: lexer, parser, AST.\n middle/   - middle-end: resolving, typechecking, translating\n+back/     - back-end: linking and ABI\n driver/   - command-line processing, main() entrypoint\n util/     - ubiquitous types and helper functions\n lib/      - bindings to LLVM\n+pretty/   - pretty-printing\n \n-The entry-point for the compiler is main() in driver/rustc.rs, and this file\n-sequences the various parts together.\n+The entry-point for the compiler is main() in driver/rustc.rs, and\n+this file sequences the various parts together.\n \n \n The 3 central data structures:\n ------------------------------\n \n-#1: front/ast.rs defines the AST. The AST is treated as immutable after\n-    parsing despite containing some mutable types (hashtables and such).\n-    There are three interesting details to know about this structure:\n-\n-      - Many -- though not all -- nodes within this data structure are wrapped\n-        in the type spanned[T], meaning that the front-end has marked the\n-        input coordinates of that node. The member .node is the data itself,\n-        the member .span is the input location (file, line, column; both low\n-        and high).\n-\n-      - Many other nodes within this data structure carry a def_id. These\n-        nodes represent the 'target' of some name reference elsewhere in the\n-        tree. When the AST is resolved, by middle/resolve.rs, all names wind\n-        up acquiring a def that they point to. So anything that can be\n-        pointed-to by a name winds up with a def_id.\n-\n-      - Many nodes carry an additional type 'ann', for annotations. These\n-        nodes are those that later stages of the middle-end add information\n-        to, augmenting the basic structure of the tree. Currently that\n-        includes the calculated type of any node that has a type; it will also\n-        likely include typestates, layers and effects, when such things are\n-        calculated.\n-\n-#2: middle/ty.rs defines the datatype ty.t, with its central member ty.struct.\n-    This is the type that represents types after they have been resolved and\n-    normalized by the middle-end. The typeck phase converts every ast type to\n-    a ty.t, and the latter is used to drive later phases of compilation.  Most\n-    variants in the ast.ty tag have a corresponding variant in the ty.struct\n-    tag.\n-\n-#3: lib/llvm.rs defines the exported types ValueRef, TypeRef, BasicBlockRef,\n-    and several others. Each of these is an opaque pointer to an LLVM type,\n-    manipulated through the lib.llvm interface.\n+#1: front/ast.rs defines the AST. The AST is treated as immutable\n+    after parsing despite containing some mutable types (hashtables\n+    and such).  There are three interesting details to know about this\n+    structure:\n+\n+      - Many -- though not all -- nodes within this data structure are\n+        wrapped in the type spanned[T], meaning that the front-end has\n+        marked the input coordinates of that node. The member .node is\n+        the data itself, the member .span is the input location (file,\n+        line, column; both low and high).\n+\n+      - Many other nodes within this data structure carry a\n+        def_id. These nodes represent the 'target' of some name\n+        reference elsewhere in the tree. When the AST is resolved, by\n+        middle/resolve.rs, all names wind up acquiring a def that they\n+        point to. So anything that can be pointed-to by a name winds\n+        up with a def_id.\n+\n+#2: middle/ty.rs defines the datatype sty.  This is the type that\n+    represents types after they have been resolved and normalized by\n+    the middle-end. The typeck phase converts every ast type to a\n+    ty::sty, and the latter is used to drive later phases of\n+    compilation.  Most variants in the ast::ty tag have a\n+    corresponding variant in the ty::sty tag.\n+\n+#3: lib/llvm.rs defines the exported types ValueRef, TypeRef,\n+    BasicBlockRef, and several others. Each of these is an opaque\n+    pointer to an LLVM type, manipulated through the lib.llvm\n+    interface.\n \n \n Control and information flow within the compiler:\n -------------------------------------------------\n \n-- main() in driver/rustc.rs assumes control on startup. Options are parsed,\n-  platform is detected, etc.\n+- main() in driver/rustc.rs assumes control on startup. Options are\n+  parsed, platform is detected, etc.\n \n - front/parser.rs is driven over the input files.\n \n-- Multiple middle-end passes (middle/resolve.rs, middle/typeck.rs) are run\n-  over the resulting AST. Each pass produces a new AST with some number of\n-  annotations or modifications.\n+- Multiple middle-end passes (middle/resolve.rs, middle/typeck.rs) are\n+  run over the resulting AST. Each pass generates new information\n+  about the AST which is stored in various side data structures.\n \n - Finally middle/trans.rs is applied to the AST, which performs a\n-  type-directed translation to LLVM-ese. When it's finished synthesizing LLVM\n-  values, rustc asks LLVM to write them out as an executable, on which the\n-  normal LLVM pipeline (opt, llc, as) was run.\n+  type-directed translation to LLVM-ese. When it's finished\n+  synthesizing LLVM values, rustc asks LLVM to write them out in some\n+  form (.bc, .o) and possibly run the system linker."}]}