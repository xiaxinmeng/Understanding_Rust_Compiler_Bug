{"sha": "4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODVlZTJjMDVmNmFiZmIwYWRmNGNhMzc5N2JmNmEyZjQ5NWEyYzA=", "commit": {"author": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-26T00:45:09Z"}, "committer": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-28T07:43:53Z"}, "message": "Fixed tidy errors", "tree": {"sha": "27d8ce499acca861e240178ca8721e47ef533a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27d8ce499acca861e240178ca8721e47ef533a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0", "html_url": "https://github.com/rust-lang/rust/commit/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0/comments", "author": null, "committer": null, "parents": [{"sha": "6ef625fb41772b8a694588b7497687b8f7ee1c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef625fb41772b8a694588b7497687b8f7ee1c72", "html_url": "https://github.com/rust-lang/rust/commit/6ef625fb41772b8a694588b7497687b8f7ee1c72"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "00a647c84e6a2ab47811c5ee5853dda8e4c1b993", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0", "patch": "@@ -142,8 +142,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         OverflowNeg => err_panic!(OverflowNeg),\n                         DivisionByZero => err_panic!(DivisionByZero),\n                         RemainderByZero => err_panic!(RemainderByZero),\n-                        ResumedAfterReturn(generator_kind) => err_panic!(ResumedAfterReturn(*generator_kind)),\n-                        ResumedAfterPanic(generator_kind) => err_panic!(ResumedAfterPanic(*generator_kind)),\n+                        ResumedAfterReturn(generator_kind)\n+                            => err_panic!(ResumedAfterReturn(*generator_kind)),\n+                        ResumedAfterPanic(generator_kind)\n+                            => err_panic!(ResumedAfterPanic(*generator_kind)),\n                         Panic { .. } => bug!(\"`Panic` variant cannot occur in MIR\"),\n                     }\n                     .into());"}, {"sha": "943e8e094daae02077f34cefcf0b781494de9c4f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=4b85ee2c05f6abfb0adf4ca3797bf6a2f495a2c0", "patch": "@@ -1065,8 +1065,12 @@ fn create_generator_resume_function<'tcx>(\n \n     // Panic when resumed on the returned or poisoned state\n     if let Some(generator_kind) = body.generator_kind {\n-        cases.insert(1, (RETURNED, insert_panic_block(tcx, body, ResumedAfterReturn(generator_kind))));\n-        cases.insert(2, (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))));\n+        cases.insert(1, (RETURNED, insert_panic_block(tcx,\n+                                                      body,\n+                                                      ResumedAfterReturn(generator_kind))));\n+        cases.insert(2, (POISONED, insert_panic_block(tcx,\n+                                                      body,\n+                                                      ResumedAfterPanic(generator_kind))));\n     };\n \n     insert_switch(body, cases, &transform, TerminatorKind::Unreachable);"}]}