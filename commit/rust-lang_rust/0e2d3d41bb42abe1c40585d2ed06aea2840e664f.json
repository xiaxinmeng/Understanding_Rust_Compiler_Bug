{"sha": "0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMmQzZDQxYmI0MmFiZTFjNDA1ODVkMmVkMDZhZWEyODQwZTY2NGY=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-31T14:59:01Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-31T15:00:24Z"}, "message": "Test sort algorithms using a random cmp function", "tree": {"sha": "af4dfaafb7d896e28ef0772d41f26b9676704fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4dfaafb7d896e28ef0772d41f26b9676704fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "html_url": "https://github.com/rust-lang/rust/commit/0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e2d3d41bb42abe1c40585d2ed06aea2840e664f/comments", "author": null, "committer": null, "parents": [{"sha": "c6df67afca788453a3c494899fbf5295992bcfba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6df67afca788453a3c494899fbf5295992bcfba", "html_url": "https://github.com/rust-lang/rust/commit/c6df67afca788453a3c494899fbf5295992bcfba"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "c3e5304fb2b3544b855e7441d7ab32d88e0b7b09", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e2d3d41bb42abe1c40585d2ed06aea2840e664f/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2d3d41bb42abe1c40585d2ed06aea2840e664f/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "patch": "@@ -383,9 +383,11 @@ fn test_reverse() {\n \n #[test]\n fn test_sort() {\n+    let mut rng = thread_rng();\n+\n     for len in (2..25).chain(500..510) {\n         for _ in 0..100 {\n-            let mut v: Vec<_> = thread_rng().gen_iter::<i32>().take(len).collect();\n+            let mut v: Vec<_> = rng.gen_iter::<i32>().take(len).collect();\n             let mut v1 = v.clone();\n \n             v.sort();\n@@ -399,6 +401,18 @@ fn test_sort() {\n         }\n     }\n \n+    // Sort using a completely random comparison function.\n+    // This will reorder the elements *somehow*, but won't panic.\n+    let mut v = [0; 500];\n+    for i in 0..v.len() {\n+        v[i] = i as i32;\n+    }\n+    v.sort_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort();\n+    for i in 0..v.len() {\n+        assert_eq!(v[i], i as i32);\n+    }\n+\n     // Should not panic.\n     [0i32; 0].sort();\n     [(); 10].sort();"}, {"sha": "ec38345030fa5897423ff55d2f4f882dcff4c1ee", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e2d3d41bb42abe1c40585d2ed06aea2840e664f/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2d3d41bb42abe1c40585d2ed06aea2840e664f/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::cmp::Ordering::{Equal, Greater, Less};\n use core::slice::heapsort;\n use core::result::Result::{Ok, Err};\n use rand::{Rng, XorShiftRng};\n@@ -268,6 +269,17 @@ fn sort_unstable() {\n         }\n     }\n \n+    // Sort using a completely random comparison function.\n+    // This will reorder the elements *somehow*, but won't panic.\n+    for i in 0..v.len() {\n+        v[i] = i as i32;\n+    }\n+    v.sort_unstable_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort_unstable();\n+    for i in 0..v.len() {\n+        assert_eq!(v[i], i as i32);\n+    }\n+\n     // Should not panic.\n     [0i32; 0].sort_unstable();\n     [(); 10].sort_unstable();"}]}