{"sha": "ffa83596fe216c19e9d58c8318786edd07d23d5f", "node_id": "C_kwDOAAsO6NoAKGZmYTgzNTk2ZmUyMTZjMTllOWQ1OGM4MzE4Nzg2ZWRkMDdkMjNkNWY", "commit": {"author": {"name": "Daniil Belov", "email": "70999565+BelovDV@users.noreply.github.com", "date": "2022-08-24T10:10:40Z"}, "committer": {"name": "Daniil Belov", "email": "70999565+BelovDV@users.noreply.github.com", "date": "2022-09-12T13:45:03Z"}, "message": "change rlib format to discern native dependencies", "tree": {"sha": "c4c1947168a229b527608a92095f38498a4755a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c1947168a229b527608a92095f38498a4755a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa83596fe216c19e9d58c8318786edd07d23d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa83596fe216c19e9d58c8318786edd07d23d5f", "html_url": "https://github.com/rust-lang/rust/commit/ffa83596fe216c19e9d58c8318786edd07d23d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa83596fe216c19e9d58c8318786edd07d23d5f/comments", "author": {"login": "belovdv", "id": 70999565, "node_id": "MDQ6VXNlcjcwOTk5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/70999565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belovdv", "html_url": "https://github.com/belovdv", "followers_url": "https://api.github.com/users/belovdv/followers", "following_url": "https://api.github.com/users/belovdv/following{/other_user}", "gists_url": "https://api.github.com/users/belovdv/gists{/gist_id}", "starred_url": "https://api.github.com/users/belovdv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belovdv/subscriptions", "organizations_url": "https://api.github.com/users/belovdv/orgs", "repos_url": "https://api.github.com/users/belovdv/repos", "events_url": "https://api.github.com/users/belovdv/events{/privacy}", "received_events_url": "https://api.github.com/users/belovdv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "belovdv", "id": 70999565, "node_id": "MDQ6VXNlcjcwOTk5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/70999565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belovdv", "html_url": "https://github.com/belovdv", "followers_url": "https://api.github.com/users/belovdv/followers", "following_url": "https://api.github.com/users/belovdv/following{/other_user}", "gists_url": "https://api.github.com/users/belovdv/gists{/gist_id}", "starred_url": "https://api.github.com/users/belovdv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belovdv/subscriptions", "organizations_url": "https://api.github.com/users/belovdv/orgs", "repos_url": "https://api.github.com/users/belovdv/repos", "events_url": "https://api.github.com/users/belovdv/events{/privacy}", "received_events_url": "https://api.github.com/users/belovdv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e7678ca97e9740f7d09206f767d5bb676917f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e7678ca97e9740f7d09206f767d5bb676917f7", "html_url": "https://github.com/rust-lang/rust/commit/56e7678ca97e9740f7d09206f767d5bb676917f7"}], "stats": {"total": 382, "additions": 328, "deletions": 54}, "files": [{"sha": "bad58d0a8a0a14656e13c2803aaf366f3b446bc7", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -1,44 +1,16 @@\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::memmap::Mmap;\n use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n+use rustc_span::symbol::Symbol;\n \n+use object::read::archive::ArchiveFile;\n+\n+use std::fmt::Display;\n+use std::fs::File;\n use std::io;\n use std::path::{Path, PathBuf};\n \n-pub(super) fn find_library(\n-    name: &str,\n-    verbatim: bool,\n-    search_paths: &[PathBuf],\n-    sess: &Session,\n-) -> PathBuf {\n-    // On Windows, static libraries sometimes show up as libfoo.a and other\n-    // times show up as foo.lib\n-    let oslibname = if verbatim {\n-        name.to_string()\n-    } else {\n-        format!(\"{}{}{}\", sess.target.staticlib_prefix, name, sess.target.staticlib_suffix)\n-    };\n-    let unixlibname = format!(\"lib{}.a\", name);\n-\n-    for path in search_paths {\n-        debug!(\"looking for {} inside {:?}\", name, path);\n-        let test = path.join(&oslibname);\n-        if test.exists() {\n-            return test;\n-        }\n-        if oslibname != unixlibname {\n-            let test = path.join(&unixlibname);\n-            if test.exists() {\n-                return test;\n-            }\n-        }\n-    }\n-    sess.fatal(&format!(\n-        \"could not find native static library `{}`, \\\n-                         perhaps an -L flag is missing?\",\n-        name\n-    ));\n-}\n-\n pub trait ArchiveBuilderBuilder {\n     fn new_archive_builder<'a>(&self, sess: &'a Session) -> Box<dyn ArchiveBuilder<'a> + 'a>;\n \n@@ -54,6 +26,36 @@ pub trait ArchiveBuilderBuilder {\n         dll_imports: &[DllImport],\n         tmpdir: &Path,\n     ) -> PathBuf;\n+\n+    fn extract_bundled_libs(\n+        &self,\n+        rlib: &Path,\n+        outdir: &Path,\n+        bundled_lib_file_names: &FxHashSet<Symbol>,\n+    ) -> Result<(), String> {\n+        let message = |msg: &str, e: &dyn Display| format!(\"{} '{}': {}\", msg, &rlib.display(), e);\n+        let archive_map = unsafe {\n+            Mmap::map(File::open(rlib).map_err(|e| message(\"failed to open file\", &e))?)\n+                .map_err(|e| message(\"failed to mmap file\", &e))?\n+        };\n+        let archive = ArchiveFile::parse(&*archive_map)\n+            .map_err(|e| message(\"failed to parse archive\", &e))?;\n+\n+        for entry in archive.members() {\n+            let entry = entry.map_err(|e| message(\"failed to read entry\", &e))?;\n+            let data = entry\n+                .data(&*archive_map)\n+                .map_err(|e| message(\"failed to get data from archive member\", &e))?;\n+            let name = std::str::from_utf8(entry.name())\n+                .map_err(|e| message(\"failed to convert name\", &e))?;\n+            if !bundled_lib_file_names.contains(&Symbol::intern(name)) {\n+                continue; // We need to extract only native libraries.\n+            }\n+            std::fs::write(&outdir.join(&name), data)\n+                .map_err(|e| message(\"failed to write file\", &e))?;\n+        }\n+        Ok(())\n+    }\n }\n \n pub trait ArchiveBuilder<'a> {"}, {"sha": "61c5cff0d43fd6aca09ceaa8332d603c7f8ff815", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 89, "deletions": 9, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -1,11 +1,13 @@\n use rustc_arena::TypedArena;\n use rustc_ast::CRATE_NODE_ID;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n+use rustc_metadata::find_native_static_library;\n use rustc_metadata::fs::{emit_metadata, METADATA_FILENAME};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n@@ -24,7 +26,7 @@ use rustc_target::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor, SplitDebuginfo};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, SanitizerSet, Target};\n \n-use super::archive::{find_library, ArchiveBuilder, ArchiveBuilderBuilder};\n+use super::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n use super::command::Command;\n use super::linker::{self, Linker};\n use super::metadata::{create_rmeta_file, MetadataPosition};\n@@ -307,6 +309,9 @@ fn link_rlib<'a>(\n         }\n     }\n \n+    // Used if packed_bundled_libs flag enabled.\n+    let mut packed_bundled_libs = Vec::new();\n+\n     // Note that in this loop we are ignoring the value of `lib.cfg`. That is,\n     // we may not be configured to actually include a static library if we're\n     // adding it here. That's because later when we consume this rlib we'll\n@@ -325,6 +330,8 @@ fn link_rlib<'a>(\n     // metadata of the rlib we're generating somehow.\n     for lib in codegen_results.crate_info.used_libraries.iter() {\n         match lib.kind {\n+            NativeLibKind::Static { bundle: None | Some(true), whole_archive: Some(true) }\n+                if flavor == RlibFlavor::Normal && sess.opts.unstable_opts.packed_bundled_libs => {}\n             NativeLibKind::Static { bundle: None | Some(true), whole_archive: Some(true) }\n                 if flavor == RlibFlavor::Normal =>\n             {\n@@ -348,7 +355,16 @@ fn link_rlib<'a>(\n         }\n         if let Some(name) = lib.name {\n             let location =\n-                find_library(name.as_str(), lib.verbatim.unwrap_or(false), &lib_search_paths, sess);\n+                find_native_static_library(name.as_str(), lib.verbatim, &lib_search_paths, sess);\n+            if sess.opts.unstable_opts.packed_bundled_libs && flavor == RlibFlavor::Normal {\n+                packed_bundled_libs.push(find_native_static_library(\n+                    lib.filename.unwrap().as_str(),\n+                    Some(true),\n+                    &lib_search_paths,\n+                    sess,\n+                ));\n+                continue;\n+            }\n             ab.add_archive(&location, Box::new(|_| false)).unwrap_or_else(|e| {\n                 sess.fatal(&format!(\n                     \"failed to add native library {}: {}\",\n@@ -403,6 +419,12 @@ fn link_rlib<'a>(\n         ab.add_file(&trailing_metadata);\n     }\n \n+    // Add all bundled static native library dependencies.\n+    // Archives added to the end of .rlib archive, see comment above for the reason.\n+    for lib in packed_bundled_libs {\n+        ab.add_file(&lib)\n+    }\n+\n     return Ok(ab);\n }\n \n@@ -2350,7 +2372,15 @@ fn add_upstream_rust_crates<'a>(\n         let src = &codegen_results.crate_info.used_crate_source[&cnum];\n         match data[cnum.as_usize() - 1] {\n             _ if codegen_results.crate_info.profiler_runtime == Some(cnum) => {\n-                add_static_crate(cmd, sess, archive_builder_builder, codegen_results, tmpdir, cnum);\n+                add_static_crate(\n+                    cmd,\n+                    sess,\n+                    archive_builder_builder,\n+                    codegen_results,\n+                    tmpdir,\n+                    cnum,\n+                    &Default::default(),\n+                );\n             }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n@@ -2360,7 +2390,23 @@ fn add_upstream_rust_crates<'a>(\n             }\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n-                add_static_crate(cmd, sess, archive_builder_builder, codegen_results, tmpdir, cnum);\n+                let bundled_libs = if sess.opts.unstable_opts.packed_bundled_libs {\n+                    codegen_results.crate_info.native_libraries[&cnum]\n+                        .iter()\n+                        .filter_map(|lib| lib.filename)\n+                        .collect::<FxHashSet<_>>()\n+                } else {\n+                    Default::default()\n+                };\n+                add_static_crate(\n+                    cmd,\n+                    sess,\n+                    archive_builder_builder,\n+                    codegen_results,\n+                    tmpdir,\n+                    cnum,\n+                    &bundled_libs,\n+                );\n \n                 // Link static native libs with \"-bundle\" modifier only if the crate they originate from\n                 // is being linked statically to the current crate.  If it's linked dynamically\n@@ -2371,6 +2417,14 @@ fn add_upstream_rust_crates<'a>(\n                 // external build system already has the native dependencies defined, and it\n                 // will provide them to the linker itself.\n                 if sess.opts.unstable_opts.link_native_libraries {\n+                    if sess.opts.unstable_opts.packed_bundled_libs {\n+                        // If rlib contains native libs as archives, unpack them to tmpdir.\n+                        let rlib = &src.rlib.as_ref().unwrap().0;\n+                        archive_builder_builder\n+                            .extract_bundled_libs(rlib, tmpdir, &bundled_libs)\n+                            .unwrap_or_else(|e| sess.fatal(e));\n+                    }\n+\n                     let mut last = (None, NativeLibKind::Unspecified, None);\n                     for lib in &codegen_results.crate_info.native_libraries[&cnum] {\n                         let Some(name) = lib.name else {\n@@ -2420,10 +2474,17 @@ fn add_upstream_rust_crates<'a>(\n                             | NativeLibKind::Framework { .. }\n                             | NativeLibKind::Unspecified\n                             | NativeLibKind::RawDylib => {}\n-                            NativeLibKind::Static {\n-                                bundle: Some(true) | None,\n-                                whole_archive: _,\n-                            } => {}\n+                            NativeLibKind::Static { bundle: Some(true) | None, whole_archive } => {\n+                                if sess.opts.unstable_opts.packed_bundled_libs {\n+                                    // If rlib contains native libs as archives, they are unpacked to tmpdir.\n+                                    let path = tmpdir.join(lib.filename.unwrap().as_str());\n+                                    if whole_archive == Some(true) {\n+                                        cmd.link_whole_rlib(&path);\n+                                    } else {\n+                                        cmd.link_rlib(&path);\n+                                    }\n+                                }\n+                            }\n                         }\n                     }\n                 }\n@@ -2438,7 +2499,15 @@ fn add_upstream_rust_crates<'a>(\n     // was already \"included\" in a dylib (e.g., `libstd` when `-C prefer-dynamic`\n     // is used)\n     if let Some(cnum) = compiler_builtins {\n-        add_static_crate(cmd, sess, archive_builder_builder, codegen_results, tmpdir, cnum);\n+        add_static_crate(\n+            cmd,\n+            sess,\n+            archive_builder_builder,\n+            codegen_results,\n+            tmpdir,\n+            cnum,\n+            &Default::default(),\n+        );\n     }\n \n     // Converts a library file-stem into a cc -l argument\n@@ -2471,6 +2540,7 @@ fn add_upstream_rust_crates<'a>(\n         codegen_results: &CodegenResults,\n         tmpdir: &Path,\n         cnum: CrateNum,\n+        bundled_lib_file_names: &FxHashSet<Symbol>,\n     ) {\n         let src = &codegen_results.crate_info.used_crate_source[&cnum];\n         let cratepath = &src.rlib.as_ref().unwrap().0;\n@@ -2499,6 +2569,7 @@ fn add_upstream_rust_crates<'a>(\n         let dst = tmpdir.join(cratepath.file_name().unwrap());\n         let name = cratepath.file_name().unwrap().to_str().unwrap();\n         let name = &name[3..name.len() - 5]; // chop off lib/.rlib\n+        let bundled_lib_file_names = bundled_lib_file_names.clone();\n \n         sess.prof.generic_activity_with_arg(\"link_altering_rlib\", name).run(|| {\n             let canonical_name = name.replace('-', \"_\");\n@@ -2532,6 +2603,15 @@ fn add_upstream_rust_crates<'a>(\n                     let skip_because_lto =\n                         upstream_rust_objects_already_included && is_rust_object && is_builtins;\n \n+                    // We skip native libraries because:\n+                    // 1. This native libraries won't be used from the generated rlib,\n+                    //    so we can throw them away to avoid the copying work.\n+                    // 2. We can't allow it to be a single remaining entry in archive\n+                    //    as some linkers may complain on that.\n+                    if bundled_lib_file_names.contains(&Symbol::intern(f)) {\n+                        return true;\n+                    }\n+\n                     if skip_because_cfg_say_so || skip_because_lto {\n                         return true;\n                     }"}, {"sha": "e505543b27ca77a6e6163da3989e6714423f02c0", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -1,4 +1,3 @@\n-use super::archive;\n use super::command::Command;\n use super::symbol_export;\n use rustc_span::symbol::sym;\n@@ -11,6 +10,7 @@ use std::path::{Path, PathBuf};\n use std::{env, mem, str};\n \n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_metadata::find_native_static_library;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo, SymbolExportKind};\n use rustc_middle::ty::TyCtxt;\n@@ -514,7 +514,7 @@ impl<'a> Linker for GccLinker<'a> {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n             self.linker_arg(\"-force_load\");\n-            let lib = archive::find_library(lib, verbatim, search_path, &self.sess);\n+            let lib = find_native_static_library(lib, Some(verbatim), search_path, &self.sess);\n             self.linker_arg(&lib);\n         }\n     }"}, {"sha": "4ea75dba4712032add234f655f5980cfe007339b", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -112,6 +112,7 @@ bitflags::bitflags! {\n pub struct NativeLib {\n     pub kind: NativeLibKind,\n     pub name: Option<Symbol>,\n+    pub filename: Option<Symbol>,\n     pub cfg: Option<ast::MetaItem>,\n     pub verbatim: Option<bool>,\n     pub dll_imports: Vec<cstore::DllImport>,\n@@ -121,6 +122,7 @@ impl From<&cstore::NativeLib> for NativeLib {\n     fn from(lib: &cstore::NativeLib) -> Self {\n         NativeLib {\n             kind: lib.kind,\n+            filename: lib.filename,\n             name: lib.name,\n             cfg: lib.cfg.clone(),\n             verbatim: lib.verbatim,"}, {"sha": "d27100c56aff5bbd3611642f9f15e9b4f3c156f8", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -162,6 +162,9 @@ metadata_no_transitive_needs_dep =\n metadata_failed_write_error =\n     failed to write {$filename}: {$err}\n \n+metadata_missing_native_library =\n+    could not find native static library `{$libname}`, perhaps an -L flag is missing?\n+\n metadata_failed_create_tempdir =\n     couldn't create a temp dir: {$err}\n "}, {"sha": "c7615a5775e333ef24ae0f445a78e01ba4a60669", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -765,6 +765,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(no_profiler_runtime, true);\n     tracked!(oom, OomStrategy::Panic);\n     tracked!(osx_rpath_install_name, true);\n+    tracked!(packed_bundled_libs, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(panic_in_drop, PanicStrategy::Abort);\n     tracked!(pick_stable_methods_before_any_unstable, false);"}, {"sha": "7d63fad32400678dc57f624ab323e9ed3fa9be33", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -369,6 +369,12 @@ pub struct FailedWriteError {\n     pub err: Error,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::missing_native_library)]\n+pub struct MissingNativeLibrary<'a> {\n+    pub libname: &'a str,\n+}\n+\n #[derive(SessionDiagnostic)]\n #[diag(metadata::failed_create_tempdir)]\n pub struct FailedCreateTempdir {"}, {"sha": "57c5ec2f28c652ca96a24371bd65fa74585e80c7", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -44,4 +44,5 @@ pub mod fs;\n pub mod locator;\n \n pub use fs::{emit_metadata, METADATA_FILENAME};\n+pub use native_libs::find_native_static_library;\n pub use rmeta::{encode_metadata, EncodedMetadata, METADATA_HEADER};"}, {"sha": "cc33ad07db605433b3e1fa4e96421ef658558b58", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -4,8 +4,10 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::ty::{List, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_session::config::CrateType;\n use rustc_session::cstore::{DllCallingConvention, DllImport, NativeLib, PeImportNameType};\n use rustc_session::parse::feature_err;\n+use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n@@ -16,13 +18,66 @@ use crate::errors::{\n     FrameworkOnlyWindows, ImportNameTypeForm, ImportNameTypeRaw, ImportNameTypeX86,\n     IncompatibleWasmLink, InvalidLinkModifier, LibFrameworkApple, LinkCfgForm,\n     LinkCfgSinglePredicate, LinkFrameworkApple, LinkKindForm, LinkModifiersForm, LinkNameForm,\n-    LinkOrdinalRawDylib, LinkRequiresName, MultipleCfgs, MultipleImportNameType,\n-    MultipleKindsInLink, MultipleLinkModifiers, MultipleModifiers, MultipleNamesInLink,\n-    MultipleRenamings, MultipleWasmImport, NoLinkModOverride, RawDylibNoNul, RenamingNoLink,\n-    UnexpectedLinkArg, UnknownImportNameType, UnknownLinkKind, UnknownLinkModifier, UnsupportedAbi,\n-    UnsupportedAbiI686, WasmImportForm, WholeArchiveNeedsStatic,\n+    LinkOrdinalRawDylib, LinkRequiresName, MissingNativeLibrary, MultipleCfgs,\n+    MultipleImportNameType, MultipleKindsInLink, MultipleLinkModifiers, MultipleModifiers,\n+    MultipleNamesInLink, MultipleRenamings, MultipleWasmImport, NoLinkModOverride, RawDylibNoNul,\n+    RenamingNoLink, UnexpectedLinkArg, UnknownImportNameType, UnknownLinkKind, UnknownLinkModifier,\n+    UnsupportedAbi, UnsupportedAbiI686, WasmImportForm, WholeArchiveNeedsStatic,\n };\n \n+use std::path::PathBuf;\n+\n+pub fn find_native_static_library(\n+    name: &str,\n+    verbatim: Option<bool>,\n+    search_paths: &[PathBuf],\n+    sess: &Session,\n+) -> PathBuf {\n+    let verbatim = verbatim.unwrap_or(false);\n+    // On Windows, static libraries sometimes show up as libfoo.a and other\n+    // times show up as foo.lib\n+    let oslibname = if verbatim {\n+        name.to_string()\n+    } else {\n+        format!(\"{}{}{}\", sess.target.staticlib_prefix, name, sess.target.staticlib_suffix)\n+    };\n+    let unixlibname = format!(\"lib{}.a\", name);\n+\n+    for path in search_paths {\n+        let test = path.join(&oslibname);\n+        if test.exists() {\n+            return test;\n+        }\n+        if oslibname != unixlibname {\n+            let test = path.join(&unixlibname);\n+            if test.exists() {\n+                return test;\n+            }\n+        }\n+    }\n+    sess.emit_fatal(MissingNativeLibrary { libname: name });\n+}\n+\n+fn find_bundled_library(\n+    name: Option<Symbol>,\n+    verbatim: Option<bool>,\n+    kind: NativeLibKind,\n+    sess: &Session,\n+) -> Option<Symbol> {\n+    if sess.opts.unstable_opts.packed_bundled_libs &&\n+            sess.crate_types().iter().any(|ct| ct == &CrateType::Rlib || ct == &CrateType::Staticlib) &&\n+            let NativeLibKind::Static { bundle: Some(true) | None, .. } = kind {\n+        find_native_static_library(\n+            name.unwrap().as_str(),\n+            verbatim,\n+            &sess.target_filesearch(PathKind::Native).search_path_dirs(),\n+            sess,\n+        ).file_name().and_then(|s| s.to_str()).map(Symbol::intern)\n+    } else {\n+        None\n+    }\n+}\n+\n pub(crate) fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n     let mut collector = Collector { tcx, libs: Vec::new() };\n     for id in tcx.hir().items() {\n@@ -341,9 +396,14 @@ impl<'tcx> Collector<'tcx> {\n                     Vec::new()\n                 }\n             };\n+\n+            let name = name.map(|(name, _)| name);\n+            let kind = kind.unwrap_or(NativeLibKind::Unspecified);\n+            let filename = find_bundled_library(name, verbatim, kind, sess);\n             self.libs.push(NativeLib {\n-                name: name.map(|(name, _)| name),\n-                kind: kind.unwrap_or(NativeLibKind::Unspecified),\n+                name,\n+                filename,\n+                kind,\n                 cfg,\n                 foreign_module: Some(it.def_id.to_def_id()),\n                 wasm_import_module: wasm_import_module.map(|(name, _)| name),\n@@ -423,8 +483,13 @@ impl<'tcx> Collector<'tcx> {\n             if existing.is_empty() {\n                 // Add if not found\n                 let new_name: Option<&str> = passed_lib.new_name.as_deref();\n+                let name = Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name)));\n+                let sess = self.tcx.sess;\n+                let filename =\n+                    find_bundled_library(name, passed_lib.verbatim, passed_lib.kind, sess);\n                 self.libs.push(NativeLib {\n-                    name: Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name))),\n+                    name,\n+                    filename,\n                     kind: passed_lib.kind,\n                     cfg: None,\n                     foreign_module: None,"}, {"sha": "7d4a1e212a41749c9606750faf6347358f43a1c4", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -68,6 +68,8 @@ pub enum LinkagePreference {\n pub struct NativeLib {\n     pub kind: NativeLibKind,\n     pub name: Option<Symbol>,\n+    /// If packed_bundled_libs enabled, actual filename of library is stored.\n+    pub filename: Option<Symbol>,\n     pub cfg: Option<ast::MetaItem>,\n     pub foreign_module: Option<DefId>,\n     pub wasm_import_module: Option<Symbol>,"}, {"sha": "a0fb8d2bdcb7f4beb46dcb1c2107c8e43fc6560d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -1439,6 +1439,8 @@ options! {\n         \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n     diagnostic_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"set the current output width for diagnostic truncation\"),\n+    packed_bundled_libs: bool = (false, parse_bool, [TRACKED],\n+        \"change rlib format to store native libraries as archives\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n         \"support compiling tests with panic=abort (default: no)\"),\n     panic_in_drop: PanicStrategy = (PanicStrategy::Unwind, parse_panic_strategy, [TRACKED],"}, {"sha": "4574cf17f0ef069454b85ead103384503dd7813c", "filename": "src/test/run-make/rlib-format-packed-bundled-libs-2/Makefile", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2FMakefile?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,22 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# ignore-cross-compile\n+\n+# Make sure -Zpacked_bundled_libs is compatible with verbatim.\n+\n+# We're using the llvm-nm instead of the system nm to ensure it is compatible\n+# with the LLVM bitcode generated by rustc.\n+NM = \"$(LLVM_BIN_DIR)\"/llvm-nm\n+\n+all:\n+\t# Build strange-named dep.\n+\t$(RUSTC) native_dep.rs --crate-type=staticlib -o $(TMPDIR)/native_dep.ext\n+\n+\t$(RUSTC) rust_dep.rs --crate-type=rlib -Zpacked_bundled_libs\n+\t$(NM) $(TMPDIR)/librust_dep.rlib | $(CGREP) -e \"U.*native_f1\"\n+\t$(AR) t $(TMPDIR)/librust_dep.rlib | $(CGREP) \"native_dep.ext\"\n+\n+\t# Make sure compiler doesn't use files, that it shouldn't know about.\n+\trm $(TMPDIR)/native_dep.ext\n+\n+\t$(RUSTC) main.rs --extern rust_dep=$(TMPDIR)/librust_dep.rlib -Zpacked_bundled_libs"}, {"sha": "8d2b8a2859c055eaa4f5a8e66ff11c7c2c4ea2b1", "filename": "src/test/run-make/rlib-format-packed-bundled-libs-2/main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Fmain.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,5 @@\n+extern crate rust_dep;\n+\n+pub fn main() {\n+    rust_dep::rust_dep();\n+}"}, {"sha": "321a8237e8a4b2bfd2bd0abf20cbbac85b1802f1", "filename": "src/test/run-make/rlib-format-packed-bundled-libs-2/native_dep.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Fnative_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Fnative_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Fnative_dep.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,4 @@\n+#[no_mangle]\n+pub fn native_f1() -> i32 {\n+    return 1;\n+}"}, {"sha": "d99dda05cf215dc5ef2abaeb23731567e333335b", "filename": "src/test/run-make/rlib-format-packed-bundled-libs-2/rust_dep.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Frust_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Frust_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs-2%2Frust_dep.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,11 @@\n+#![feature(native_link_modifiers_verbatim)]\n+#[link(name = \"native_dep.ext\", kind = \"static\", modifiers = \"+verbatim\")]\n+extern \"C\" {\n+    fn native_f1() -> i32;\n+}\n+\n+pub fn rust_dep() {\n+    unsafe {\n+        assert!(native_f1() == 1);\n+    }\n+}"}, {"sha": "0b991ac42e3dc5a634e9848e670adc8be621583b", "filename": "src/test/run-make/rlib-format-packed-bundled-libs/Makefile", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2FMakefile?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,34 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# ignore-cross-compile\n+\n+# Make sure rlib format with -Zpacked_bundled_libs is correct.\n+\n+# We're using the llvm-nm instead of the system nm to ensure it is compatible\n+# with the LLVM bitcode generated by rustc.\n+NM = \"$(LLVM_BIN_DIR)\"/llvm-nm\n+\n+all: $(call NATIVE_STATICLIB,native_dep_1) $(call NATIVE_STATICLIB,native_dep_2) $(call NATIVE_STATICLIB,native_dep_3)\n+\t$(RUSTC) rust_dep_up.rs --crate-type=rlib -Zpacked_bundled_libs\n+\t$(NM) $(TMPDIR)/librust_dep_up.rlib | $(CGREP) -e \"U.*native_f2\"\n+\t$(NM) $(TMPDIR)/librust_dep_up.rlib | $(CGREP) -e \"U.*native_f3\"\n+\t$(NM) $(TMPDIR)/librust_dep_up.rlib | $(CGREP) -e \"T.*rust_dep_up\"\n+\t$(AR) t $(TMPDIR)/librust_dep_up.rlib | $(CGREP) \"native_dep_2\"\n+\t$(AR) t $(TMPDIR)/librust_dep_up.rlib | $(CGREP) \"native_dep_3\"\n+\t$(RUSTC) rust_dep_local.rs --extern rlib=$(TMPDIR)/librust_dep_up.rlib -Zpacked_bundled_libs --crate-type=rlib\n+\t$(NM) $(TMPDIR)/librust_dep_local.rlib | $(CGREP) -e \"U.*native_f1\"\n+\t$(NM) $(TMPDIR)/librust_dep_local.rlib | $(CGREP) -e \"T.*rust_dep_local\"\n+\t$(AR) t $(TMPDIR)/librust_dep_local.rlib | $(CGREP) \"native_dep_1\"\n+\n+\t# Make sure compiler doesn't use files, that it shouldn't know about.\n+\trm $(TMPDIR)/*native_dep_*\n+\n+\t$(RUSTC) main.rs --extern lib=$(TMPDIR)/librust_dep_local.rlib -o $(TMPDIR)/main.exe -Zpacked_bundled_libs --print link-args | $(CGREP) -e \"native_dep_1.*native_dep_2.*native_dep_3\"\n+\n+ifndef IS_MSVC\n+\t$(NM) $(TMPDIR)/main.exe | $(CGREP) -e \"T.*native_f1\"\n+\t$(NM) $(TMPDIR)/main.exe | $(CGREP) -e \"T.*native_f2\"\n+\t$(NM) $(TMPDIR)/main.exe | $(CGREP) -e \"T.*native_f3\"\n+\t$(NM) $(TMPDIR)/main.exe | $(CGREP) -e \"T.*rust_dep_local\"\n+\t$(NM) $(TMPDIR)/main.exe | $(CGREP) -e \"T.*rust_dep_up\"\n+endif"}, {"sha": "042a4879fe4e1fb2945ab1ddd76a1adfee759cb4", "filename": "src/test/run-make/rlib-format-packed-bundled-libs/main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fmain.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,4 @@\n+extern crate rust_dep_local;\n+pub fn main() {\n+    rust_dep_local::rust_dep_local();\n+}"}, {"sha": "07be8562c928fbfa2a13aebddd5a4d4db4933e0c", "filename": "src/test/run-make/rlib-format-packed-bundled-libs/native_dep_1.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_1.c", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_1.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_1.c?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1 @@\n+int native_f1() { return 1; }"}, {"sha": "a1b94e40dc0478f271fe84c1596c2fd4024167ae", "filename": "src/test/run-make/rlib-format-packed-bundled-libs/native_dep_2.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_2.c", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_2.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_2.c?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1 @@\n+int native_f2() { return 2; }"}, {"sha": "f81f397a4b1d0528381251e9c06c763a19821be8", "filename": "src/test/run-make/rlib-format-packed-bundled-libs/native_dep_3.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_3.c", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_3.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Fnative_dep_3.c?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1 @@\n+int native_f3() { return 3; }"}, {"sha": "8280c7d6c5156e68ffa6ca3d6ec4423461a09724", "filename": "src/test/run-make/rlib-format-packed-bundled-libs/rust_dep_local.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Frust_dep_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Frust_dep_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Frust_dep_local.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,13 @@\n+#[link(name = \"native_dep_1\", kind = \"static\")]\n+extern \"C\" {\n+    fn native_f1() -> i32;\n+}\n+\n+extern crate rust_dep_up;\n+\n+pub fn rust_dep_local() {\n+    unsafe {\n+        assert!(native_f1() == 1);\n+    }\n+    rust_dep_up::rust_dep_up();\n+}"}, {"sha": "edcd7c5212984f3b31d2068646ca3bf29a760584", "filename": "src/test/run-make/rlib-format-packed-bundled-libs/rust_dep_up.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Frust_dep_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Frust_dep_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-format-packed-bundled-libs%2Frust_dep_up.rs?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -0,0 +1,13 @@\n+#[link(name = \"native_dep_2\", kind = \"static\")]\n+#[link(name = \"native_dep_3\", kind = \"static\")]\n+extern \"C\" {\n+    fn native_f2() -> i32;\n+    fn native_f3() -> i32;\n+}\n+\n+pub fn rust_dep_up() {\n+    unsafe {\n+        assert!(native_f2() == 2);\n+        assert!(native_f3() == 3);\n+    }\n+}"}, {"sha": "f865e0e8814794285fa97682fde978afb6632a49", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ffa83596fe216c19e9d58c8318786edd07d23d5f/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=ffa83596fe216c19e9d58c8318786edd07d23d5f", "patch": "@@ -97,6 +97,7 @@\n     -Z                                     oom=val -- panic strategy for out-of-memory handling\n     -Z                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n     -Z                        diagnostic-width=val -- set the current output width for diagnostic truncation\n+    -Z                     packed-bundled-libs=val -- change rlib format to store native libraries as archives\n     -Z                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n     -Z                           panic-in-drop=val -- panic strategy for panics in drops\n     -Z                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)"}]}