{"sha": "dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMmVjNmEwOTk2ZDc2ZGMxMGJjZjgzZWE5M2FhNjU1NjIxODg1ZDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-04T09:07:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-04T09:07:24Z"}, "message": "Rollup merge of #49607 - cuviper:stable-iter-1.27, r=alexcrichton\n\nStabilize iterator methods in 1.27\n\n- Closes #39480, feature  `iter_rfind`\n  - `DoubleEndedIterator::rfind`\n- Closes #44705, feature `iter_rfold`\n  - `DoubleEndedIterator::rfold`\n- Closes #45594, feature `iterator_try_fold`\n  - `Iterator::try_fold`\n  - `Iterator::try_for_each`\n  - `DoubleEndedIterator::try_rfold`", "tree": {"sha": "48253d3115313975fcf158fd57e05b5095e6061c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48253d3115313975fcf158fd57e05b5095e6061c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxJXMCRBK7hj4Ov3rIwAAdHIIALE91dU2l2wBN0Os3HF7Kkn0\npPqpcEnU6oM8A0ELvemxJlyrIzIs0aHYX3JRKedWbaajr92F9J3qeR1CGwC2S9tg\nyjFK7OTLLAtffCz79jhZcw3yTufTzBZ23QMdiCF4ThgnehQDYc2vmY862YKm5gO8\nK+UFPqRS5Lnzf4eE78BSItwdzwQkVwhUr8tkMopcsD+M2jBDiikPH6QGRZkdP7zi\nkgQdAxuiZp95h217vhi0a9+1IQQUxKXZ04uBAWgsPlXofvXXF7Jf1kkPgqeNn+Vi\nIoL2z9QwE4zsCaDCzQLDh0Nib3YgW0Y1nxP7gQ0EatYjJPy4hshEzW+YdICcItg=\n=LOZT\n-----END PGP SIGNATURE-----\n", "payload": "tree 48253d3115313975fcf158fd57e05b5095e6061c\nparent 52fd162603f75ae10bafebb9dfdd0acd36f5aab5\nparent 9db63bb033271c7b9c9f4315eb6db3314758a33e\nauthor kennytm <kennytm@gmail.com> 1522832844 +0200\ncommitter GitHub <noreply@github.com> 1522832844 +0200\n\nRollup merge of #49607 - cuviper:stable-iter-1.27, r=alexcrichton\n\nStabilize iterator methods in 1.27\n\n- Closes #39480, feature  `iter_rfind`\n  - `DoubleEndedIterator::rfind`\n- Closes #44705, feature `iter_rfold`\n  - `DoubleEndedIterator::rfold`\n- Closes #45594, feature `iterator_try_fold`\n  - `Iterator::try_fold`\n  - `Iterator::try_for_each`\n  - `DoubleEndedIterator::try_rfold`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "html_url": "https://github.com/rust-lang/rust/commit/dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fd162603f75ae10bafebb9dfdd0acd36f5aab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fd162603f75ae10bafebb9dfdd0acd36f5aab5", "html_url": "https://github.com/rust-lang/rust/commit/52fd162603f75ae10bafebb9dfdd0acd36f5aab5"}, {"sha": "9db63bb033271c7b9c9f4315eb6db3314758a33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db63bb033271c7b9c9f4315eb6db3314758a33e", "html_url": "https://github.com/rust-lang/rust/commit/9db63bb033271c7b9c9f4315eb6db3314758a33e"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "51a7802540192967d0547ec09e9e7389a6bb6f79", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "patch": "@@ -99,7 +99,6 @@\n #![feature(fundamental)]\n #![feature(generic_param_attrs)]\n #![cfg_attr(stage0, feature(i128_type))]\n-#![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n #![feature(nonzero)]"}, {"sha": "4ccf446aa6346f007655b95e50ebe30e60881c1a", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "patch": "@@ -1447,7 +1447,6 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [1, 2, 3];\n     ///\n     /// // the checked sum of all of the elements of the array\n@@ -1459,7 +1458,6 @@ pub trait Iterator {\n     /// Short-circuiting:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [10, 20, 30, 100, 40, 50];\n     /// let mut it = a.iter();\n     ///\n@@ -1473,7 +1471,7 @@ pub trait Iterator {\n     /// assert_eq!(it.next(), Some(&40));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n@@ -1496,7 +1494,6 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// use std::fs::rename;\n     /// use std::io::{stdout, Write};\n     /// use std::path::Path;\n@@ -1513,7 +1510,7 @@ pub trait Iterator {\n     /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_for_each<F, R>(&mut self, mut f: F) -> R where\n         Self: Sized, F: FnMut(Self::Item) -> R, R: Try<Ok=()>\n     {"}, {"sha": "ddbb59989424f11502b5c4b0f17e8f29498c571c", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "patch": "@@ -427,7 +427,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [\"1\", \"2\", \"3\"];\n     /// let sum = a.iter()\n     ///     .map(|&s| s.parse::<i32>())\n@@ -438,7 +437,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Short-circuiting:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [\"1\", \"rust\", \"3\"];\n     /// let mut it = a.iter();\n     /// let sum = it\n@@ -452,7 +450,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(it.next_back(), Some(&\"1\"));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n@@ -491,7 +489,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_rfold)]\n     /// let a = [1, 2, 3];\n     ///\n     /// // the sum of all of the elements of a\n@@ -505,7 +502,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// and continuing with each element from the back until the front:\n     ///\n     /// ```\n-    /// #![feature(iter_rfold)]\n     /// let numbers = [1, 2, 3, 4, 5];\n     ///\n     /// let zero = \"0\".to_string();\n@@ -517,14 +513,14 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_rfold\", issue = \"44705\")]\n+    #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n     fn rfold<B, F>(mut self, accum: B, mut f: F) -> B where\n         Self: Sized, F: FnMut(B, Self::Item) -> B,\n     {\n         self.try_rfold(accum, move |acc, x| AlwaysOk(f(acc, x))).0\n     }\n \n-    /// Searches for an element of an iterator from the right that satisfies a predicate.\n+    /// Searches for an element of an iterator from the back that satisfies a predicate.\n     ///\n     /// `rfind()` takes a closure that returns `true` or `false`. It applies\n     /// this closure to each element of the iterator, starting at the end, and if any\n@@ -547,8 +543,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_rfind)]\n-    ///\n     /// let a = [1, 2, 3];\n     ///\n     /// assert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n@@ -559,8 +553,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Stopping at the first `true`:\n     ///\n     /// ```\n-    /// #![feature(iter_rfind)]\n-    ///\n     /// let a = [1, 2, 3];\n     ///\n     /// let mut iter = a.iter();\n@@ -571,7 +563,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(iter.next_back(), Some(&1));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_rfind\", issue = \"39480\")]\n+    #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n     fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n         Self: Sized,\n         P: FnMut(&Self::Item) -> bool"}, {"sha": "de7211e718c9f20333b33a576cbf019f71cc1389", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2ec6a0996d76dc10bcf83ea93aa655621885d8/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=dd2ec6a0996d76dc10bcf83ea93aa655621885d8", "patch": "@@ -25,11 +25,8 @@\n #![feature(iterator_step_by)]\n #![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n-#![feature(iterator_try_fold)]\n #![feature(iterator_flatten)]\n #![cfg_attr(stage0, feature(conservative_impl_trait))]\n-#![feature(iter_rfind)]\n-#![feature(iter_rfold)]\n #![feature(iterator_repeat_with)]\n #![feature(nonzero)]\n #![feature(pattern)]"}]}