{"sha": "3dabab1c1e642e0da9242fdda90e58ea447eba01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYWJhYjFjMWU2NDJlMGRhOTI0MmZkZGE5MGU1OGVhNDQ3ZWJhMDE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-04-10T20:05:28Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-04-10T20:05:28Z"}, "message": "Fix NixOS patching\n\nMoving the `.nix-deps` has resulted in rpath links being broken and\ntherefore bootstrap on NixOS broken entirely.\n\nThis PR still produces a `.nix-deps` but only for the purposes of\nproducing a gc root. We rpath a symlink-resolved result instead.\n\nFor purposes of simplicity we also use joinSymlink to produce a single\nmerged output directory so that we don't need to update multiple\nlocations every time we add a library or something.", "tree": {"sha": "2ff2f449d423845dde72595b0958cdd891a93607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff2f449d423845dde72595b0958cdd891a93607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dabab1c1e642e0da9242fdda90e58ea447eba01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dabab1c1e642e0da9242fdda90e58ea447eba01", "html_url": "https://github.com/rust-lang/rust/commit/3dabab1c1e642e0da9242fdda90e58ea447eba01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dabab1c1e642e0da9242fdda90e58ea447eba01/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54dc7cebce9e983a72ee06657e931ba34b373ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/54dc7cebce9e983a72ee06657e931ba34b373ea8", "html_url": "https://github.com/rust-lang/rust/commit/54dc7cebce9e983a72ee06657e931ba34b373ea8"}], "stats": {"total": 89, "additions": 41, "deletions": 48}, "files": [{"sha": "4111420e4745a17d2ffeaa0b618254bf0b5f323e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/3dabab1c1e642e0da9242fdda90e58ea447eba01/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/3dabab1c1e642e0da9242fdda90e58ea447eba01/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=3dabab1c1e642e0da9242fdda90e58ea447eba01", "patch": "@@ -429,7 +429,7 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n             lib_dir = \"{}/lib\".format(bin_root)\n             for lib in os.listdir(lib_dir):\n                 if lib.endswith(\".so\"):\n-                    self.fix_bin_or_dylib(os.path.join(lib_dir, lib), rpath_libz=True)\n+                    self.fix_bin_or_dylib(os.path.join(lib_dir, lib))\n             with output(self.rustc_stamp(stage0)) as rust_stamp:\n                 rust_stamp.write(key)\n \n@@ -477,10 +477,10 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n             if self.program_out_of_date(self.llvm_stamp(), llvm_sha + str(llvm_assertions)):\n                 self._download_ci_llvm(llvm_sha, llvm_assertions)\n                 for binary in [\"llvm-config\", \"FileCheck\"]:\n-                    self.fix_bin_or_dylib(os.path.join(llvm_root, \"bin\", binary), rpath_libz=True)\n+                    self.fix_bin_or_dylib(os.path.join(llvm_root, \"bin\", binary))\n                 for lib in os.listdir(llvm_lib):\n                     if lib.endswith(\".so\"):\n-                        self.fix_bin_or_dylib(os.path.join(llvm_lib, lib), rpath_libz=True)\n+                        self.fix_bin_or_dylib(os.path.join(llvm_lib, lib))\n                 with output(self.llvm_stamp()) as llvm_stamp:\n                     llvm_stamp.write(llvm_sha + str(llvm_assertions))\n \n@@ -548,7 +548,7 @@ def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n                 match=\"rust-dev\",\n                 verbose=self.verbose)\n \n-    def fix_bin_or_dylib(self, fname, rpath_libz=False):\n+    def fix_bin_or_dylib(self, fname):\n         \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n         or the RPATH section, to fix the dynamic library search path\n \n@@ -583,56 +583,49 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n         # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n         if not nix_deps_dir:\n-            nix_deps_dir = \".nix-deps\"\n-            if not os.path.exists(nix_deps_dir):\n-                os.makedirs(nix_deps_dir)\n-\n-            nix_deps = [\n-                # Needed for the path of `ld-linux.so` (via `nix-support/dynamic-linker`).\n-                \"stdenv.cc.bintools\",\n-\n-                # Needed as a system dependency of `libLLVM-*.so`.\n-                \"zlib\",\n-\n-                # Needed for patching ELF binaries (see doc comment above).\n-                \"patchelf\",\n-            ]\n-\n             # Run `nix-build` to \"build\" each dependency (which will likely reuse\n             # the existing `/nix/store` copy, or at most download a pre-built copy).\n-            # Importantly, we don't rely on `nix-build` printing the `/nix/store`\n-            # path on stdout, but use `-o` to symlink it into `stage0/.nix-deps/$dep`,\n-            # ensuring garbage collection will never remove the `/nix/store` path\n-            # (which would break our patched binaries that hardcode those paths).\n-            for dep in nix_deps:\n-                try:\n-                    subprocess.check_output([\n-                        \"nix-build\", \"<nixpkgs>\",\n-                        \"-A\", dep,\n-                        \"-o\", \"{}/{}\".format(nix_deps_dir, dep),\n-                    ])\n-                except subprocess.CalledProcessError as reason:\n-                    print(\"warning: failed to call nix-build:\", reason)\n-                    return\n-\n+            #\n+            # Importantly, we create a gc-root called `.nix-deps` in the `build/`\n+            # directory, but still reference the actual `/nix/store` path in the rpath\n+            # as it makes it significantly more robust against changes to the location of\n+            # the `.nix-deps` location.\n+            #\n+            # bintools: Needed for the path of `ld-linux.so` (via `nix-support/dynamic-linker`).\n+            # zlib: Needed as a system dependency of `libLLVM-*.so`.\n+            # patchelf: Needed for patching ELF binaries (see doc comment above).\n+            nix_deps_dir = \"{}/{}\".format(self.build_dir, \".nix-deps\")\n+            nix_expr = '''\n+            with (import <nixpkgs> {});\n+            symlinkJoin {\n+              name = \"rust-stage0-dependencies\";\n+              paths = [\n+                zlib\n+                patchelf\n+                stdenv.cc.bintools\n+              ];\n+            }\n+            '''\n+            try:\n+                subprocess.check_output([\n+                    \"nix-build\", \"-E\", nix_expr, \"-o\", nix_deps_dir,\n+                ])\n+            except subprocess.CalledProcessError as reason:\n+                print(\"warning: failed to call nix-build:\", reason)\n+                return\n             self.nix_deps_dir = nix_deps_dir\n \n-        patchelf = \"{}/patchelf/bin/patchelf\".format(nix_deps_dir)\n-        patchelf_args = []\n-\n-        if rpath_libz:\n-            # Patch RPATH to add `zlib` dependency that stems from LLVM\n-            dylib_deps = [\"zlib\"]\n-            rpath_entries = [\n-                # Relative default, all binary and dynamic libraries we ship\n-                # appear to have this (even when `../lib` is redundant).\n-                \"$ORIGIN/../lib\",\n-            ] + [\"{}/{}/lib\".format(nix_deps_dir, dep) for dep in dylib_deps]\n-            patchelf_args += [\"--set-rpath\", \":\".join(rpath_entries)]\n+        patchelf = \"{}/bin/patchelf\".format(nix_deps_dir)\n+        rpath_entries = [\n+            # Relative default, all binary and dynamic libraries we ship\n+            # appear to have this (even when `../lib` is redundant).\n+            \"$ORIGIN/../lib\",\n+            os.path.join(os.path.realpath(nix_deps_dir), \"lib\")\n+        ]\n+        patchelf_args = [\"--set-rpath\", \":\".join(rpath_entries)]\n         if not fname.endswith(\".so\"):\n             # Finally, set the corret .interp for binaries\n-            bintools_dir = \"{}/stdenv.cc.bintools\".format(nix_deps_dir)\n-            with open(\"{}/nix-support/dynamic-linker\".format(bintools_dir)) as dynamic_linker:\n+            with open(\"{}/nix-support/dynamic-linker\".format(nix_deps_dir)) as dynamic_linker:\n                 patchelf_args += [\"--set-interpreter\", dynamic_linker.read().rstrip()]\n \n         try:"}]}