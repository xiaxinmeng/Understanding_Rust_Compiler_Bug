{"sha": "e5e3256b5942a0c2e280700fff7f33bbdc803436", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZTMyNTZiNTk0MmEwYzJlMjgwNzAwZmZmN2YzM2JiZGM4MDM0MzY=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-27T02:23:10Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T15:10:35Z"}, "message": "Address review comments", "tree": {"sha": "9c7dbefc9bb975e4474d7e54ce598f7715b5031d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7dbefc9bb975e4474d7e54ce598f7715b5031d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e3256b5942a0c2e280700fff7f33bbdc803436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e3256b5942a0c2e280700fff7f33bbdc803436", "html_url": "https://github.com/rust-lang/rust/commit/e5e3256b5942a0c2e280700fff7f33bbdc803436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e3256b5942a0c2e280700fff7f33bbdc803436/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3884dae6d34370c0841d61acefe8d4a3f8d05c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3884dae6d34370c0841d61acefe8d4a3f8d05c", "html_url": "https://github.com/rust-lang/rust/commit/ba3884dae6d34370c0841d61acefe8d4a3f8d05c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "960eca5510a2496d13c393d6bdb7ef087118edc6", "filename": "src/shims/sync.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e5e3256b5942a0c2e280700fff7f33bbdc803436/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e3256b5942a0c2e280700fff7f33bbdc803436/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=e5e3256b5942a0c2e280700fff7f33bbdc803436", "patch": "@@ -167,7 +167,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let locked_count = mutex_get_locked_count(this, mutex_op)?.to_u32()?;\n \n         if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? {\n-            if locked_count == 1 {\n+            if locked_count != 0 {\n                 mutex_set_locked_count(this, mutex_op, Scalar::from_u32(0))?;\n                 Ok(0)\n             } else {\n@@ -176,7 +176,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 );\n             }\n         } else if kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")? {\n-            if locked_count == 1 {\n+            if locked_count != 0 {\n                 mutex_set_locked_count(this, mutex_op, Scalar::from_u32(0))?;\n                 Ok(0)\n             } else {\n@@ -363,8 +363,9 @@ fn assert_ptr_target_min_size<'mir, 'tcx: 'mir>(\n     Ok(())\n }\n \n-// pthread_mutexattr_t is either 4 or 8 bytes, depending on the platform\n-// memory layout: store an i32 in the first four bytes equal to the\n+// pthread_mutexattr_t is either 4 or 8 bytes, depending on the platform.\n+\n+// Our chosen memory layout: store an i32 in the first four bytes equal to the\n // corresponding libc mutex kind constant (i.e. PTHREAD_MUTEX_NORMAL)\n \n fn mutexattr_get_kind<'mir, 'tcx: 'mir>(\n@@ -392,13 +393,14 @@ fn mutexattr_set_kind<'mir, 'tcx: 'mir>(\n     ecx.write_scalar(kind.into(), kind_place.into())\n }\n \n-// pthread_mutex_t is between 24 and 48 bytes, depending on the platform\n-// memory layout:\n+// pthread_mutex_t is between 24 and 48 bytes, depending on the platform.\n+\n+// Our chosen memory layout:\n // bytes 0-3: reserved for signature on macOS\n+// (need to avoid this because it is set by static initializer macros)\n // bytes 4-7: count of how many times this mutex has been locked, as a u32\n // bytes 12-15: mutex kind, as an i32\n-// (the kind should be at this offset for compatibility with the static\n-// initializer macro)\n+// (the kind has to be at this offset for compatibility with static initializer macros)\n \n fn mutex_get_locked_count<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n@@ -454,9 +456,11 @@ fn mutex_set_kind<'mir, 'tcx: 'mir>(\n     ecx.write_scalar(kind.into(), kind_place.into())\n }\n \n-// pthread_rwlock_t is between 32 and 56 bytes, depending on the platform\n-// memory layout:\n+// pthread_rwlock_t is between 32 and 56 bytes, depending on the platform.\n+\n+// Our chosen memory layout:\n // bytes 0-3: reserved for signature on macOS\n+// (need to avoid this because it is set by static initializer macros)\n // bytes 4-7: reader count, as a u32\n // bytes 8-11: writer count, as a u32\n "}]}