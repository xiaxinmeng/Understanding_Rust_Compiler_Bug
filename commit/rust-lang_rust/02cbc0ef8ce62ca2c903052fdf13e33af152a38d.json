{"sha": "02cbc0ef8ce62ca2c903052fdf13e33af152a38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyY2JjMGVmOGNlNjJjYTJjOTAzMDUyZmRmMTNlMzNhZjE1MmEzOGQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-07T07:04:31Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-07T07:04:31Z"}, "message": "trans: don't create allocas anywhere other than the entry block.", "tree": {"sha": "dff2ef5dc4403690f1926df42af245453831ad28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff2ef5dc4403690f1926df42af245453831ad28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02cbc0ef8ce62ca2c903052fdf13e33af152a38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02cbc0ef8ce62ca2c903052fdf13e33af152a38d", "html_url": "https://github.com/rust-lang/rust/commit/02cbc0ef8ce62ca2c903052fdf13e33af152a38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02cbc0ef8ce62ca2c903052fdf13e33af152a38d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e31091a9e7e3604d79d9e820067120945c538d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e31091a9e7e3604d79d9e820067120945c538d", "html_url": "https://github.com/rust-lang/rust/commit/11e31091a9e7e3604d79d9e820067120945c538d"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "56bf803fcd818586a9e91a60b3cf3b2e320ac1b6", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02cbc0ef8ce62ca2c903052fdf13e33af152a38d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cbc0ef8ce62ca2c903052fdf13e33af152a38d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=02cbc0ef8ce62ca2c903052fdf13e33af152a38d", "patch": "@@ -894,8 +894,11 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         //   bitcasting to the struct type yields invalid cast errors.\n \n         // We instead thus allocate some scratch space...\n-        let llscratch = bcx.alloca(llcast_ty, \"fn_ret_cast\");\n-        bcx.with_block(|bcx| base::call_lifetime_start(bcx, llscratch));\n+        let llscratch = bcx.with_block(|bcx| {\n+            let alloca = base::alloca(bcx, llcast_ty, \"fn_ret_cast\");\n+            base::call_lifetime_start(bcx, alloca);\n+            alloca\n+        });\n \n         // ...where we first store the value...\n         bcx.store(op.immediate(), llscratch);"}]}