{"sha": "68ecd06f4cf67a996af348a5ccc90d6a0f25589f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZWNkMDZmNGNmNjdhOTk2YWYzNDhhNWNjYzkwZDZhMGYyNTU4OWY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-11T22:49:35Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-12T13:30:52Z"}, "message": "Small optimisation of most common cases", "tree": {"sha": "1588984d00942f9b9f236fa41ce1635349ffddbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1588984d00942f9b9f236fa41ce1635349ffddbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68ecd06f4cf67a996af348a5ccc90d6a0f25589f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68ecd06f4cf67a996af348a5ccc90d6a0f25589f", "html_url": "https://github.com/rust-lang/rust/commit/68ecd06f4cf67a996af348a5ccc90d6a0f25589f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68ecd06f4cf67a996af348a5ccc90d6a0f25589f/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f309dc3c0fae39b993f95058a619f8591e9935df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f309dc3c0fae39b993f95058a619f8591e9935df", "html_url": "https://github.com/rust-lang/rust/commit/f309dc3c0fae39b993f95058a619f8591e9935df"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "e2defe8f3649f687da9a17517dcb787c2027bf05", "filename": "src/copies.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ecd06f4cf67a996af348a5ccc90d6a0f25589f/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ecd06f4cf67a996af348a5ccc90d6a0f25589f/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=68ecd06f4cf67a996af348a5ccc90d6a0f25589f", "patch": "@@ -4,6 +4,7 @@ use rustc_front::hir::*;\n use std::collections::HashMap;\n use std::collections::hash_map::Entry;\n use syntax::parse::token::InternedString;\n+use syntax::util::small_vector::SmallVector;\n use utils::{SpanlessEq, SpanlessHash};\n use utils::{get_parent_expr, in_macro, span_note_and_lint};\n \n@@ -78,8 +79,8 @@ impl LateLintPass for CopyAndPaste {\n             }\n \n             let (conds, blocks) = if_sequence(expr);\n-            lint_same_then_else(cx, &blocks);\n-            lint_same_cond(cx, &conds);\n+            lint_same_then_else(cx, blocks.as_slice());\n+            lint_same_cond(cx, conds.as_slice());\n             lint_match_arms(cx, expr);\n         }\n     }\n@@ -143,9 +144,9 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n /// Return the list of condition expressions and the list of blocks in a sequence of `if/else`.\n /// Eg. would return `([a, b], [c, d, e])` for the expression\n /// `if a { c } else if b { d } else { e }`.\n-fn if_sequence(mut expr: &Expr) -> (Vec<&Expr>, Vec<&Block>) {\n-    let mut conds = vec![];\n-    let mut blocks = vec![];\n+fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n+    let mut conds = SmallVector::zero();\n+    let mut blocks = SmallVector::zero();\n \n     while let ExprIf(ref cond, ref then_block, ref else_expr) = expr.node {\n         conds.push(&**cond);"}]}