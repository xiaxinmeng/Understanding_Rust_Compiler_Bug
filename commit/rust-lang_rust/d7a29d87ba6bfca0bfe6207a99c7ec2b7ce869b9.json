{"sha": "d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTI5ZDg3YmE2YmZjYTBiZmU2MjA3YTk5YzdlYzJiN2NlODY5Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T13:41:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T13:41:38Z"}, "message": "auto merge of #19031 : nodakai/rust/libcore-pow-and-sq, r=bjz\n\n[breaking-change]\r\n\r\nDeprecates `core::num::pow` in favor of `Int::pow`.", "tree": {"sha": "d5ef76ecd61bb50bb094b01423893d1f49b42260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ef76ecd61bb50bb094b01423893d1f49b42260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "html_url": "https://github.com/rust-lang/rust/commit/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516ece6ee4393990b8a62fb8f16bb7423e0e8828", "url": "https://api.github.com/repos/rust-lang/rust/commits/516ece6ee4393990b8a62fb8f16bb7423e0e8828", "html_url": "https://github.com/rust-lang/rust/commit/516ece6ee4393990b8a62fb8f16bb7423e0e8828"}, {"sha": "3fcf2840a484159c9e27601dc9480f9636d2f2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcf2840a484159c9e27601dc9480f9636d2f2e5", "html_url": "https://github.com/rust-lang/rust/commit/3fcf2840a484159c9e27601dc9480f9636d2f2e5"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "04ca2c6001b2fbcf17d2b631327fca5d0cf76c07", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "patch": "@@ -39,28 +39,10 @@ pub fn div_rem<T: Div<T, T> + Rem<T, T>>(x: T, y: T) -> (T, T) {\n }\n \n /// Raises a `base` to the power of `exp`, using exponentiation by squaring.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::num;\n-///\n-/// assert_eq!(num::pow(2i, 4), 16);\n-/// ```\n #[inline]\n-pub fn pow<T: Int>(mut base: T, mut exp: uint) -> T {\n-    if exp == 1 { base }\n-    else {\n-        let mut acc: T = Int::one();\n-        while exp > 0 {\n-            if (exp & 1) == 1 {\n-                acc = acc * base;\n-            }\n-            base = base * base;\n-            exp = exp >> 1;\n-        }\n-        acc\n-    }\n+#[deprecated = \"Use Int::pow() instead, as in 2i.pow(4)\"]\n+pub fn pow<T: Int>(base: T, exp: uint) -> T {\n+    base.pow(exp)\n }\n \n /// A built-in signed or unsigned integer.\n@@ -361,6 +343,29 @@ pub trait Int\n             None                         => Int::max_value(),\n         }\n     }\n+\n+    /// Raises self to the power of `exp`, using exponentiation by squaring.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::num::Int;\n+    ///\n+    /// assert_eq!(2i.pow(4), 16);\n+    /// ```\n+    #[inline]\n+    fn pow(self, mut exp: uint) -> Self {\n+        let mut base = self;\n+        let mut acc: Self = Int::one();\n+        while exp > 0 {\n+            if (exp & 1) == 1 {\n+                acc = acc * base;\n+            }\n+            base = base * base;\n+            exp /= 2;\n+        }\n+        acc\n+    }\n }\n \n macro_rules! checked_op {"}, {"sha": "f49b2b0deed327815715922e74967647718fba67", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "patch": "@@ -757,7 +757,7 @@ mod tests {\n         }\n         macro_rules! assert_pow(\n             (($num:expr, $exp:expr) => $expected:expr) => {{\n-                let result = pow($num, $exp);\n+                let result = $num.pow($exp);\n                 assert_eq!(result, $expected);\n                 assert_eq!(result, naive_pow($num, $exp));\n             }}\n@@ -775,12 +775,12 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::Bencher;\n-    use num;\n+    use num::Int;\n     use prelude::*;\n \n     #[bench]\n     fn bench_pow_function(b: &mut Bencher) {\n         let v = Vec::from_fn(1024u, |n| n);\n-        b.iter(|| {v.iter().fold(0u, |old, new| num::pow(old, *new));});\n+        b.iter(|| {v.iter().fold(0u, |old, new| old.pow(*new));});\n     }\n }"}, {"sha": "509cb37b2e6ff0cd7b76ff11980b15bf3eaa364b", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "patch": "@@ -93,8 +93,8 @@ fn main() {\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n \n     let mut messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n-            use std::num::pow;\n-            let iterations = pow(2i, (max_depth - depth + min_depth) as uint);\n+            use std::num::Int;\n+            let iterations = 2i.pow((max_depth - depth + min_depth) as uint);\n             Future::spawn(proc() {\n                 let mut chk = 0;\n                 for i in range(1, iterations + 1) {"}, {"sha": "0d5b562e04cdd191afd220f4e1c8099954bada8f", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "patch": "@@ -14,7 +14,7 @@\n \n extern crate libc;\n \n-use std::num;\n+use std::num::Int;\n \n struct Foo {\n     x: uint,\n@@ -23,7 +23,7 @@ struct Foo {\n }\n \n fn field_read(f: Foo) -> uint {\n-    num::pow(f.x, 2)\n+    f.x.pow(2)\n }\n \n enum XYZ {"}]}