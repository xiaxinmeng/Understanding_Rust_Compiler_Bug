{"sha": "02084f3304acfa68e79d213a5ebd1c3478680741", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDg0ZjMzMDRhY2ZhNjhlNzlkMjEzYTVlYmQxYzM0Nzg2ODA3NDE=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-18T19:31:23Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-27T17:42:54Z"}, "message": "No fallback in `structurally_resolve_types`. Further refactoring.\n\nPut all fallback in `apply_fallback_if_possible`.", "tree": {"sha": "ff6f8116a0ceffcf4832a6f9a651945a04087002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6f8116a0ceffcf4832a6f9a651945a04087002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02084f3304acfa68e79d213a5ebd1c3478680741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02084f3304acfa68e79d213a5ebd1c3478680741", "html_url": "https://github.com/rust-lang/rust/commit/02084f3304acfa68e79d213a5ebd1c3478680741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02084f3304acfa68e79d213a5ebd1c3478680741/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad", "html_url": "https://github.com/rust-lang/rust/commit/f3cd4a7f64c50ff5935f4d507ae1103c93b8a2ad"}], "stats": {"total": 113, "additions": 59, "deletions": 54}, "files": [{"sha": "631f7a740c4bb248cf95a2228eb532a3f70dac1f", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=02084f3304acfa68e79d213a5ebd1c3478680741", "patch": "@@ -393,7 +393,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n \n     pub fn check(mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) {\n         self.expr_ty = fcx.resolved_type(self.span, self.expr_ty);\n-        self.cast_ty = fcx.resolved_type(self.span, self.cast_ty);\n+        self.cast_ty = fcx.structurally_resolved_type(self.span, self.cast_ty);\n \n         debug!(\"check_cast({}, {:?} as {:?})\",\n                self.expr.id,"}, {"sha": "610510c5c74ed77ed2a28ce180242150bb156a3c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=02084f3304acfa68e79d213a5ebd1c3478680741", "patch": "@@ -2127,23 +2127,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn apply_diverging_fallback_to_type(&self, ty: Ty<'tcx>) {\n-        assert!(ty.is_ty_infer());\n-        if self.type_var_diverges(ty) {\n-            debug!(\"default_type_parameters: defaulting `{:?}` to `!` because it diverges\", ty);\n-            self.demand_eqtype(syntax_pos::DUMMY_SP, ty, self.tcx.mk_diverging_default());\n-        }\n-    }\n-\n-    fn apply_numeric_fallback_to_type(&self, ty: Ty<'tcx>) {\n+    // Tries to apply a fallback to `ty` if it is an unsolved variable.\n+    // Non-numerics get replaced with ! or () (depending on whether\n+    // feature(never_type) is enabled), unconstrained ints with i32,\n+    // unconstrained floats with f64.\n+    // Defaulting inference variables becomes very dubious if we have\n+    // encountered type-checking errors. In that case, fallback to TyError.\n+    fn apply_fallback_if_possible(&self, ty: Ty<'tcx>) {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n \n         assert!(ty.is_ty_infer());\n         let fallback = match self.type_is_unconstrained_numeric(ty) {\n+            _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither => return,\n+            Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n+            Neither => return\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);\n         self.demand_eqtype(syntax_pos::DUMMY_SP, ty, fallback);\n@@ -2158,21 +2158,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         self.select_obligations_where_possible();\n \n-        // Apply fallbacks to unsolved variables.\n-        // Non-numerics get replaced with ! or () (depending on whether\n-        // feature(never_type) is enabled), unconstrained ints with i32,\n-        // unconstrained floats with f64.\n         for ty in &self.unsolved_variables() {\n-            if self.is_tainted_by_errors() {\n-                // Defaulting inference variables becomes very dubious if we have\n-                // encountered type-checking errors. In that case,\n-                // just resolve all uninstanted type variables to TyError.\n-                debug!(\"default_type_parameters: defaulting `{:?}` to error\", ty);\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx().types.err);\n-            } else {\n-                self.apply_diverging_fallback_to_type(ty);\n-                self.apply_numeric_fallback_to_type(ty);\n-            }\n+            self.apply_fallback_if_possible(ty);\n         }\n \n         let mut fulfillment_cx = self.fulfillment_cx.borrow_mut();\n@@ -4942,18 +4929,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // If no resolution is possible, then an error is reported.\n     // Numeric inference variables may be left unresolved.\n     pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let mut ty = self.resolve_type_vars_with_obligations(ty);\n+        let ty = self.resolve_type_vars_with_obligations(ty);\n         if !ty.is_ty_var() {\n             ty\n         } else {\n-            // Try divering fallback.\n-            self.apply_diverging_fallback_to_type(ty);\n-            ty = self.resolve_type_vars_with_obligations(ty);\n-            if !ty.is_ty_var() {\n-                ty\n-            } else { // Fallback failed, error.\n-                self.must_be_known_in_context(sp, ty)\n-            }\n+            self.must_be_known_in_context(sp, ty)\n         }\n     }\n \n@@ -4963,9 +4943,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if !ty.is_ty_infer() {\n             return ty;\n         } else {\n-            // Try diverging or numeric fallback.\n-            self.apply_diverging_fallback_to_type(ty);\n-            self.apply_numeric_fallback_to_type(ty);\n+            self.apply_fallback_if_possible(ty);\n             ty = self.resolve_type_vars_with_obligations(ty);\n             if !ty.is_ty_infer() {\n                 ty"}, {"sha": "36a30ccb0fc3d59060db3176064346bb5704c478", "filename": "src/test/ui/mismatched_types/issue-26480-1.rs", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.rs?ref=02084f3304acfa68e79d213a5ebd1c3478680741", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// compile-flags: --error-format=human\n \n extern {\n     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n@@ -28,12 +29,7 @@ macro_rules! write {\n     }}\n }\n \n-macro_rules! cast {\n-    ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n-}\n-\n fn main() {\n     let hello = ['H', 'e', 'y'];\n     write!(hello);\n-    cast!(2);\n }", "previous_filename": "src/test/ui/mismatched_types/issue-26480.rs"}, {"sha": "326b427b0fbe6c3a34da926b26d9c300a3f560e8", "filename": "src/test/ui/mismatched_types/issue-26480-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-1.stderr?ref=02084f3304acfa68e79d213a5ebd1c3478680741", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-26480-1.rs:27:19\n+   |\n+27 |                   $arr.len() * size_of($arr[0])); //~ ERROR mismatched types\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n+...\n+34 |     write!(hello);\n+   |     -------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "7015e5909e9baba909da33ad25b3f496186da715", "filename": "src/test/ui/mismatched_types/issue-26480-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.rs?ref=02084f3304acfa68e79d213a5ebd1c3478680741", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// compile-flags: --error-format=human\n+\n+macro_rules! cast {\n+    ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n+}\n+\n+fn main() {\n+    cast!(2);\n+}"}, {"sha": "3f6dcccdedb4f45a07ebecbfd45b0a62d6e6df2d", "filename": "src/test/ui/mismatched_types/issue-26480-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480-2.stderr?ref=02084f3304acfa68e79d213a5ebd1c3478680741", "patch": "@@ -0,0 +1,13 @@\n+error[E0605]: non-primitive cast: `i32` as `()`\n+  --> $DIR/issue-26480-2.rs:13:19\n+   |\n+13 |     ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n+   |                   ^^^^^^^^\n+...\n+17 |     cast!(2);\n+   |     --------- in this macro invocation\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "27698c864c3fb73a0907af7e3cd2cc484a753968", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02084f3304acfa68e79d213a5ebd1c3478680741/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=02084f3304acfa68e79d213a5ebd1c3478680741", "patch": "@@ -7,16 +7,5 @@ error[E0308]: mismatched types\n 37 |     write!(hello);\n    |     -------------- in this macro invocation\n \n-error[E0605]: non-primitive cast: `i32` as `()`\n-  --> $DIR/issue-26480.rs:32:19\n-   |\n-32 |     ($x:expr) => ($x as ()) //~ ERROR non-primitive cast\n-   |                   ^^^^^^^^\n-...\n-38 |     cast!(2);\n-   |     --------- in this macro invocation\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}