{"sha": "813886b22ccd0976db03c1bfcbb9738b5b7c41db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzg4NmIyMmNjZDA5NzZkYjAzYzFiZmNiYjk3MzhiNWI3YzQxZGI=", "commit": {"author": {"name": "chromatic", "email": "chromatic@wgz.org", "date": "2014-02-03T00:32:52Z"}, "committer": {"name": "chromatic", "email": "chromatic@wgz.org", "date": "2014-02-07T17:59:19Z"}, "message": "Removed prelude::* from libstd files.\n\nThis replaces the imports from the prelude with the re-exported symbols.", "tree": {"sha": "dfcd088cfc04989509241e1f7ece9ca0a50c9059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfcd088cfc04989509241e1f7ece9ca0a50c9059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/813886b22ccd0976db03c1bfcbb9738b5b7c41db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/813886b22ccd0976db03c1bfcbb9738b5b7c41db", "html_url": "https://github.com/rust-lang/rust/commit/813886b22ccd0976db03c1bfcbb9738b5b7c41db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/813886b22ccd0976db03c1bfcbb9738b5b7c41db/comments", "author": {"login": "chromatic", "id": 50255, "node_id": "MDQ6VXNlcjUwMjU1", "avatar_url": "https://avatars.githubusercontent.com/u/50255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chromatic", "html_url": "https://github.com/chromatic", "followers_url": "https://api.github.com/users/chromatic/followers", "following_url": "https://api.github.com/users/chromatic/following{/other_user}", "gists_url": "https://api.github.com/users/chromatic/gists{/gist_id}", "starred_url": "https://api.github.com/users/chromatic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chromatic/subscriptions", "organizations_url": "https://api.github.com/users/chromatic/orgs", "repos_url": "https://api.github.com/users/chromatic/repos", "events_url": "https://api.github.com/users/chromatic/events{/privacy}", "received_events_url": "https://api.github.com/users/chromatic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chromatic", "id": 50255, "node_id": "MDQ6VXNlcjUwMjU1", "avatar_url": "https://avatars.githubusercontent.com/u/50255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chromatic", "html_url": "https://github.com/chromatic", "followers_url": "https://api.github.com/users/chromatic/followers", "following_url": "https://api.github.com/users/chromatic/following{/other_user}", "gists_url": "https://api.github.com/users/chromatic/gists{/gist_id}", "starred_url": "https://api.github.com/users/chromatic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chromatic/subscriptions", "organizations_url": "https://api.github.com/users/chromatic/orgs", "repos_url": "https://api.github.com/users/chromatic/repos", "events_url": "https://api.github.com/users/chromatic/events{/privacy}", "received_events_url": "https://api.github.com/users/chromatic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3ccaacc6c90fc678cbba9c3c0427f0a7dece75c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ccaacc6c90fc678cbba9c3c0427f0a7dece75c", "html_url": "https://github.com/rust-lang/rust/commit/c3ccaacc6c90fc678cbba9c3c0427f0a7dece75c"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "4a43a00c5f5a9bfa3fdcfb4fc51f0c2348b6d757", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -18,9 +18,9 @@ use str::OwnedStr;\n use container::Container;\n use cast;\n use iter::Iterator;\n-use vec::{ImmutableVector, MutableVector, Vector};\n+use vec::{ImmutableVector,MutableVector,Vector};\n use to_bytes::IterBytes;\n-use option::{Option, Some, None};\n+use option::{Option,Some,None};\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n #[deriving(Clone, Eq, Ord, TotalOrd, TotalEq)]"}, {"sha": "6fab74cbc2fc2f1db6be1cc1423e94451b67f9e0", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -10,7 +10,10 @@\n \n //! Types dealing with dynamic mutability\n \n-use prelude::*;\n+use clone::{Clone,DeepClone};\n+use cmp::Eq;\n+use ops::Drop;\n+use option::{None,Option,Some};\n use cast;\n use kinds::{marker, Pod};\n "}, {"sha": "5c3ca07f128c45692deecd276dbdea1ec20d929e", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -41,7 +41,9 @@ local_data::get(key_vector, |opt| assert_eq!(*opt.unwrap(), ~[4]));\n // magic.\n \n use cast;\n-use prelude::*;\n+use option::{None,Option,Some};\n+use vec::{ImmutableVector,MutableVector,OwnedVector};\n+use iter::{Iterator};\n use rt::task::{Task, LocalStorage};\n use util::replace;\n "}, {"sha": "fb67f82d612a61ffc66565ac3224fac044ac6f5e", "filename": "src/libstd/os.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -28,20 +28,31 @@\n \n #[allow(missing_doc)];\n \n-use clone::Clone;\n-use container::Container;\n #[cfg(target_os = \"macos\")]\n+#[cfg(windows)]\n use iter::range;\n+\n+use clone::Clone;\n+use container::Container;\n use libc;\n use libc::{c_char, c_void, c_int};\n-use option::{Some, None};\n+use option::{Some, None, Option};\n use os;\n-use prelude::*;\n+use ops::Drop;\n+use result::{Err, Ok, Result};\n use ptr;\n use str;\n+use str::{Str, StrSlice};\n use fmt;\n use unstable::finally::Finally;\n use sync::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n+use path::{Path, GenericPath};\n+use iter::Iterator;\n+use vec::{Vector, CloneableVector, ImmutableVector, MutableVector, OwnedVector};\n+use ptr::RawPtr;\n+\n+#[cfg(unix)]\n+use c_str::ToCStr;\n \n /// Delegates to the libc close() function, returning the same return value.\n pub fn close(fd: int) -> int {\n@@ -396,6 +407,8 @@ pub fn self_exe_name() -> Option<Path> {\n \n     #[cfg(windows)]\n     fn load_self() -> Option<~[u8]> {\n+        use str::OwnedStr;\n+\n         unsafe {\n             use os::win32::fill_utf16_buf_and_decode;\n             fill_utf16_buf_and_decode(|buf, sz| {\n@@ -967,6 +980,7 @@ impl MemoryMap {\n     /// `ErrZeroLength`.\n     pub fn new(min_len: uint, options: &[MapOption]) -> Result<MemoryMap, MapError> {\n         use libc::off_t;\n+        use cmp::Equiv;\n \n         if min_len == 0 {\n             return Err(ErrZeroLength)"}, {"sha": "7584d07ed6423c13fd15301c5baaece143466713", "filename": "src/libstd/reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freference.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -11,7 +11,7 @@\n //! Utilities for references\n \n #[cfg(not(test))]\n-use prelude::*;\n+use cmp::{Eq,Ord,Ordering,TotalEq,TotalOrd};\n \n // Equality for region pointers\n #[cfg(not(test))]"}, {"sha": "1b880bc43ee8233700652d4fc5210ad6439a87d7", "filename": "src/libstd/run.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -20,7 +20,13 @@ use io::process;\n use io;\n use libc::{pid_t, c_int};\n use libc;\n-use prelude::*;\n+use option::{None,Option,Some};\n+use task::spawn;\n+use path::{Path,GenericPath};\n+use result::Ok;\n+use str::Str;\n+use vec::Vector;\n+use clone::Clone;\n \n /**\n  * A value representing a child process."}, {"sha": "7530c5e338aada75510c68887cfcfa0b9c38e568", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -10,12 +10,16 @@\n \n //! Ordered containers with integer keys, implemented as radix tries (`TrieSet` and `TrieMap` types)\n \n-use prelude::*;\n+use option::{None,Option,Some};\n+use container::{Container,Map,Mutable,MutableMap};\n+use iter::{Extendable,FromIterator,Iterator};\n use mem;\n use uint;\n use util::replace;\n use unstable::intrinsics::init;\n use vec;\n+use ptr::RawPtr;\n+use vec::{ImmutableVector,Items,MutableVector,MutItems,OwnedVector};\n \n // FIXME: #5244: need to manually update the TrieNode constructor\n static SHIFT: uint = 4;"}, {"sha": "d62fcca63a49e54ccec89f6c921e6b2c4afb0ab3", "filename": "src/libstd/unit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funit.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -11,7 +11,8 @@\n //! Functions for the unit type.\n \n #[cfg(not(test))]\n-use prelude::*;\n+use default::Default;\n+use cmp::{Eq,Equal,Ord,Ordering,TotalEq,TotalOrd};\n \n #[cfg(not(test))]\n impl Eq for () {"}, {"sha": "c49a7302e729d8de9ea4ebc2df947268fc216c3f", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813886b22ccd0976db03c1bfcbb9738b5b7c41db/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=813886b22ccd0976db03c1bfcbb9738b5b7c41db", "patch": "@@ -11,12 +11,16 @@\n // Migrate documentation over from `std::vec` when it is removed.\n #[doc(hidden)];\n \n-use prelude::*;\n+use ops::Drop;\n+use option::{None, Option, Some};\n+use clone::Clone;\n+use iter::{DoubleEndedIterator, Iterator};\n+use num::CheckedMul;\n use container::Container;\n use mem::size_of;\n use cast::{forget, transmute};\n use rt::global_heap::{malloc_raw, realloc_raw};\n-use vec::Items;\n+use vec::{ImmutableVector, Items, MutableVector};\n use unstable::raw::Slice;\n use ptr::{offset, read_ptr};\n use libc::{free, c_void};"}]}