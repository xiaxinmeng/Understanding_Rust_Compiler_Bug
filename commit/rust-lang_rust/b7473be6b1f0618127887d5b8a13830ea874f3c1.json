{"sha": "b7473be6b1f0618127887d5b8a13830ea874f3c1", "node_id": "C_kwDOAAsO6NoAKGI3NDczYmU2YjFmMDYxODEyNzg4N2Q1YjhhMTM4MzBlYTg3NGYzYzE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-05-02T07:25:55Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-05-02T07:27:50Z"}, "message": "handle excluded strings across boundaries", "tree": {"sha": "fc0a8a877fb9155e459fa2a9c6a8ab69e361316e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc0a8a877fb9155e459fa2a9c6a8ab69e361316e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7473be6b1f0618127887d5b8a13830ea874f3c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmJvh/cACgkQzXazX3c0\ndp7ynA//eC1aP5QGYJYNqdWYrOy9DQVBXKq2U15hPb+ZQap2AamzsgMwRxrMfG7h\n1Gr+Uj4MK7xndv3gdOp66HbXU/G1nsHDvuV1QXvwpGt+nJXW7xmpmdOYtHt2Umhw\n1EM93kKsp4k/ayPDPzc6qdiIPtzJp1GTUEmrvQGss7bcOJkzQWS66fBoxWzhZp7v\nd6w12JgoiM2VOa9Hk+/CRi27auvntamwg0DGVhhCd+WLxLv2/ps/iDh2usLrzZeU\nCkeBR00cXt8e20ZnOP6bvdpRLPpK5kpikN87Qs3vkwDnxKzlmmF+3jzQEW5onfab\nNfIzNuhAyai60lJyXYaAiR5XgshE0pSrU5/TnkUcaqXBYtQBB9Jpu21ajGkqq7Tz\nj1IvZoVYy9pIZUOldy301xKGi4rbvEkOcj00w+nfD8BKzeHaZwUSVGD/8KBSvZvs\nN5XIuSFUn+0HvFh3Y/71ExgYWKVlp6KD5gq5W+CHi7yO5ATT3VUoE8hFc68m6++5\nnVIPiyOKmQWGwfR4k9AyZspw7jqyQjH3BN9Oh9I0gVID5T9CJXHzIm1xRMN2QYD8\nz0vc3oKnWgP1XBhjo0l3WeaADFX7dz0PXL8xSzzKn32FoNHcwvmpjIy3PXgjpHUa\nhZ6ErJ9pyb6JuhNWU8qQnLpJt7YklSgwTI3oAJao8uQg0zV/bS8=\n=uc3L\n-----END PGP SIGNATURE-----", "payload": "tree fc0a8a877fb9155e459fa2a9c6a8ab69e361316e\nparent 47d8ba9095219fe018c9dd86453d2853a59555fe\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1651476355 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1651476470 +0200\n\nhandle excluded strings across boundaries\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7473be6b1f0618127887d5b8a13830ea874f3c1", "html_url": "https://github.com/rust-lang/rust/commit/b7473be6b1f0618127887d5b8a13830ea874f3c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7473be6b1f0618127887d5b8a13830ea874f3c1/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47d8ba9095219fe018c9dd86453d2853a59555fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/47d8ba9095219fe018c9dd86453d2853a59555fe", "html_url": "https://github.com/rust-lang/rust/commit/47d8ba9095219fe018c9dd86453d2853a59555fe"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "f13a3d7bfee6eb006c851cee9a4402a07b79d657", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7473be6b1f0618127887d5b8a13830ea874f3c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7473be6b1f0618127887d5b8a13830ea874f3c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=b7473be6b1f0618127887d5b8a13830ea874f3c1", "patch": "@@ -22,6 +22,7 @@ pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::R\n         fn extend(&mut self, data: &[u8], exclude_from_len: &[String]) {\n             let new_self = match *self {\n                 ProcOutput::Full { ref mut bytes, ref mut excluded_len } => {\n+                    let old_len = bytes.len();\n                     bytes.extend_from_slice(data);\n \n                     // We had problems in the past with tests failing only in some environments,\n@@ -37,7 +38,10 @@ pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::R\n                     // the configured threshold.\n                     for pattern in exclude_from_len {\n                         let pattern_bytes = pattern.as_bytes();\n-                        let matches = data\n+                        // We start matching `pattern_bytes - 1` into the previously loaded data,\n+                        // to account for the fact a pattern might be included across multiple\n+                        // `extend` calls. Starting from `- 1` avoids double-counting patterns.\n+                        let matches = (&bytes[(old_len.saturating_sub(pattern_bytes.len() - 1))..])\n                             .windows(pattern_bytes.len())\n                             .filter(|window| window == &pattern_bytes)\n                             .count();"}]}