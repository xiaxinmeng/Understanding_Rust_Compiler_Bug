{"sha": "4ae6c835cb69332e982babcfca1a4e5657ec8bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTZjODM1Y2I2OTMzMmU5ODJiYWJjZmNhMWE0ZTU2NTdlYzhiYmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-03T21:50:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-03T22:09:00Z"}, "message": "Add some hacks to get stdin piping working more correctly in windows\n\nThe way pipes work in windows is not the same as unix, though I'm not\nentirely clear on the differences. This patch changes the windows pipe\nmethod to return non-inheritable fds, and the windows rust_run_program\nmethod to duplicate them before spawning the new process.\n\nThis allows make-check-pretty to work on windows.", "tree": {"sha": "3c0a0618f8ff22673529bb412bdf72194d1407f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c0a0618f8ff22673529bb412bdf72194d1407f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae6c835cb69332e982babcfca1a4e5657ec8bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae6c835cb69332e982babcfca1a4e5657ec8bbd", "html_url": "https://github.com/rust-lang/rust/commit/4ae6c835cb69332e982babcfca1a4e5657ec8bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae6c835cb69332e982babcfca1a4e5657ec8bbd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e33de59e47c5076a89eadeb38f4934f58a3618a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e33de59e47c5076a89eadeb38f4934f58a3618a6", "html_url": "https://github.com/rust-lang/rust/commit/e33de59e47c5076a89eadeb38f4934f58a3618a6"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "c502ebbfcb700b1353e34c82f338c09dcd34912b", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ae6c835cb69332e982babcfca1a4e5657ec8bbd/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae6c835cb69332e982babcfca1a4e5657ec8bbd/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=4ae6c835cb69332e982babcfca1a4e5657ec8bbd", "patch": "@@ -38,6 +38,7 @@ mod libc_constants {\n     fn O_TRUNC() -> int { ret 512; }\n     fn O_TEXT() -> int { ret 16384; }\n     fn O_BINARY() -> int { ret 32768; }\n+    fn O_NOINHERIT() -> int { ret 0x0080; }\n     fn S_IRUSR() -> uint {\n         ret 256u; // really _S_IREAD  in win32\n \n@@ -60,9 +61,18 @@ fn target_os() -> str { ret \"win32\"; }\n fn dylib_filename(base: str) -> str { ret base + \".dll\"; }\n \n fn pipe() -> {in: int, out: int} {\n+    // Windows pipes work subtly differently than unix pipes, and their\n+    // inheritance has to be handled in a different way that I don't fully\n+    // understand. Here we explicitly make the pipe non-inheritable,\n+    // which means to pass it to a subprocess they need to be duplicated\n+    // first, as in rust_run_program.\n     let fds = {mutable in: 0, mutable out: 0};\n-    assert (os::libc::_pipe(ptr::addr_of(fds.in), 1024u,\n-                            libc_constants::O_BINARY()) == 0);\n+    let res = os::libc::_pipe(ptr::addr_of(fds.in), 1024u,\n+                            libc_constants::O_BINARY()\n+                            | libc_constants::O_NOINHERIT());\n+    assert res == 0;\n+    assert fds.in != -1 && fds.in != 0;\n+    assert fds.out != -1 && fds.in != 0;\n     ret {in: fds.in, out: fds.out};\n }\n "}, {"sha": "69f3cf7e146fb788de15cac869f089a7ed98cafb", "filename": "src/rt/rust_run_program.cpp", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ae6c835cb69332e982babcfca1a4e5657ec8bbd/src%2Frt%2Frust_run_program.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ae6c835cb69332e982babcfca1a4e5657ec8bbd/src%2Frt%2Frust_run_program.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_run_program.cpp?ref=4ae6c835cb69332e982babcfca1a4e5657ec8bbd", "patch": "@@ -12,9 +12,20 @@ rust_run_program(void* task, const char* argv[],\n     ZeroMemory(&si, sizeof(STARTUPINFO));\n     si.cb = sizeof(STARTUPINFO);\n     si.dwFlags = STARTF_USESTDHANDLES;\n-    si.hStdInput = (HANDLE)_get_osfhandle(in_fd ? in_fd : 0);\n-    si.hStdOutput = (HANDLE)_get_osfhandle(out_fd ? out_fd : 1);\n-    si.hStdError = (HANDLE)_get_osfhandle(err_fd ? err_fd : 2);\n+\n+    HANDLE curproc = GetCurrentProcess();\n+    HANDLE origStdin = (HANDLE)_get_osfhandle(in_fd ? in_fd : 0);\n+    if (!DuplicateHandle(curproc, origStdin,\n+        curproc, &si.hStdInput, 0, 1, DUPLICATE_SAME_ACCESS))\n+        return -1;\n+    HANDLE origStdout = (HANDLE)_get_osfhandle(out_fd ? out_fd : 1);\n+    if (!DuplicateHandle(curproc, origStdout,\n+        curproc, &si.hStdOutput, 0, 1, DUPLICATE_SAME_ACCESS))\n+        return -1;\n+    HANDLE origStderr = (HANDLE)_get_osfhandle(err_fd ? err_fd : 2);\n+    if (!DuplicateHandle(curproc, origStderr,\n+        curproc, &si.hStdError, 0, 1, DUPLICATE_SAME_ACCESS))\n+        return -1;\n \n     size_t cmd_len = 0;\n     for (const char** arg = argv; *arg; arg++) {\n@@ -32,6 +43,10 @@ rust_run_program(void* task, const char* argv[],\n     PROCESS_INFORMATION pi;\n     BOOL created = CreateProcess(NULL, cmd, NULL, NULL, TRUE,\n                                  0, NULL, NULL, &si, &pi);\n+                                 \n+    CloseHandle(si.hStdInput);\n+    CloseHandle(si.hStdOutput);\n+    CloseHandle(si.hStdError);\n     free(cmd);\n \n     if (!created) return -1;"}, {"sha": "2adfbbe173ecfc0afebffca19f4ee0a2b915d241", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4ae6c835cb69332e982babcfca1a4e5657ec8bbd/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae6c835cb69332e982babcfca1a4e5657ec8bbd/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=4ae6c835cb69332e982babcfca1a4e5657ec8bbd", "patch": "@@ -1,5 +1,9 @@\n use std;\n import std::run;\n+import std::os;\n+import std::io;\n+import std::option;\n+import std::str;\n \n // Regression test for memory leaks\n #[cfg(target_os = \"linux\")]\n@@ -15,4 +19,49 @@ fn test_leaks() {\n #[cfg(target_os = \"win32\")]\n #[test]\n #[ignore]\n-fn test_leaks() { }\n\\ No newline at end of file\n+fn test_leaks() { }\n+\n+#[test]\n+fn test_pipes() {\n+    let pipe_in = os::pipe();\n+    let pipe_out = os::pipe();\n+    let pipe_err = os::pipe();\n+\n+    let pid = run::spawn_process(\"cat\", [],\n+       pipe_in.in, pipe_out.out, pipe_err.out);\n+    os::libc::close(pipe_in.in);\n+    os::libc::close(pipe_out.out);\n+    os::libc::close(pipe_err.out);    \n+    \n+    if pid == -1 { fail; }\n+    let expected = \"test\";\n+    writeclose(pipe_in.out, expected);\n+    let actual = readclose(pipe_out.in);\n+    readclose(pipe_err.in);\n+    os::waitpid(pid);\n+    \n+    log expected;\n+    log actual;\n+    assert expected == actual;\n+    \n+    fn writeclose(fd: int, s: &str) {\n+        let writer = io::new_writer(\n+            io::fd_buf_writer(fd, option::none));\n+        writer.write_str(s);\n+\n+        os::libc::close(fd);\n+    }\n+\n+    fn readclose(fd: int) -> str {\n+        // Copied from run::program_output\n+        let file = os::fd_FILE(fd);\n+        let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n+        let buf = \"\";\n+        while !reader.eof() {\n+            let bytes = reader.read_bytes(4096u);\n+            buf += str::unsafe_from_bytes(bytes);\n+        }\n+        os::libc::fclose(file);\n+        ret buf;\n+    }\n+}\n\\ No newline at end of file"}]}