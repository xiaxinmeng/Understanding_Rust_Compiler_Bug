{"sha": "f82d4845f219357c80ed68a6391d0bf00611f228", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MmQ0ODQ1ZjIxOTM1N2M4MGVkNjhhNjM5MWQwYmYwMDYxMWYyMjg=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-06-13T22:30:05Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-07-03T22:36:32Z"}, "message": "Pretty-print macro matchers instead of using source code\n\nThe output is not quite as nice as it used to be, but it does work.", "tree": {"sha": "c334e1802fbb7a16b71b82cd22cc157e3af7e328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c334e1802fbb7a16b71b82cd22cc157e3af7e328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82d4845f219357c80ed68a6391d0bf00611f228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82d4845f219357c80ed68a6391d0bf00611f228", "html_url": "https://github.com/rust-lang/rust/commit/f82d4845f219357c80ed68a6391d0bf00611f228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82d4845f219357c80ed68a6391d0bf00611f228/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f749d97b8a1fdea250642f9f92d050452a081d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/f749d97b8a1fdea250642f9f92d050452a081d37", "html_url": "https://github.com/rust-lang/rust/commit/f749d97b8a1fdea250642f9f92d050452a081d37"}], "stats": {"total": 115, "additions": 53, "deletions": 62}, "files": [{"sha": "7b1b23ff8e6d37ad0aea986455e395b196e31b58", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=f82d4845f219357c80ed68a6391d0bf00611f228", "patch": "@@ -13,10 +13,9 @@ use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n \n use crate::clean::{\n-    self, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, ToSource, Type,\n+    self, utils, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, Type,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -547,23 +546,20 @@ fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::Item\n     let imported_from = cx.tcx.crate_name(did.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n         LoadedMacro::MacroDef(def, _) => {\n-            let matchers: Vec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {\n+            if let ast::ItemKind::MacroDef(ref def) = def.kind {\n                 let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n-                tts.chunks(4).map(|arm| arm[0].span()).collect()\n-            } else {\n-                unreachable!()\n-            };\n+                let matchers = tts.chunks(4).map(|arm| &arm[0]);\n \n-            let source = format!(\n-                \"macro_rules! {} {{\\n{}}}\",\n-                name.clean(cx),\n-                matchers\n-                    .iter()\n-                    .map(|span| { format!(\"    {} => {{ ... }};\\n\", span.to_src(cx)) })\n-                    .collect::<String>()\n-            );\n+                let source = format!(\n+                    \"macro_rules! {} {{\\n{}}}\",\n+                    name.clean(cx),\n+                    utils::render_macro_arms(matchers, \";\")\n+                );\n \n-            clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n+                clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n+            } else {\n+                unreachable!()\n+            }\n         }\n         LoadedMacro::ProcMacro(ext) => clean::ProcMacroItem(clean::ProcMacro {\n             kind: ext.macro_kind(),"}, {"sha": "b0e75493aa4dcbbcbf797d69bf327739930ef71b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f82d4845f219357c80ed68a6391d0bf00611f228", "patch": "@@ -2172,17 +2172,11 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n         let (item, renamed) = self;\n         let name = renamed.unwrap_or(item.ident.name);\n         let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n-        // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n-        let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect::<Vec<_>>();\n+        // Extract the macro's matchers. They represent the \"interface\" of the macro.\n+        let matchers = tts.chunks(4).map(|arm| &arm[0]);\n+\n         let source = if item.ast.macro_rules {\n-            format!(\n-                \"macro_rules! {} {{\\n{}}}\",\n-                name,\n-                matchers\n-                    .iter()\n-                    .map(|span| { format!(\"    {} => {{ ... }};\\n\", span.to_src(cx)) })\n-                    .collect::<String>(),\n-            )\n+            format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n         } else {\n             let vis = item.vis.clean(cx);\n             let def_id = item.def_id.to_def_id();\n@@ -2192,17 +2186,14 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n                     \"{}macro {}{} {{\\n    ...\\n}}\",\n                     vis.to_src_with_space(cx.tcx, def_id),\n                     name,\n-                    matchers.iter().map(|span| span.to_src(cx)).collect::<String>(),\n+                    matchers.map(render_macro_matcher).collect::<String>(),\n                 )\n             } else {\n                 format!(\n                     \"{}macro {} {{\\n{}}}\",\n                     vis.to_src_with_space(cx.tcx, def_id),\n                     name,\n-                    matchers\n-                        .iter()\n-                        .map(|span| { format!(\"    {} => {{ ... }},\\n\", span.to_src(cx)) })\n-                        .collect::<String>(),\n+                    render_macro_arms(matchers, \",\"),\n                 )\n             }\n         };"}, {"sha": "9e98d0b7bbe0dd80e8b7ad4f9129d39568ceef6e", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f82d4845f219357c80ed68a6391d0bf00611f228", "patch": "@@ -7,13 +7,15 @@ use crate::clean::{\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n+use rustc_ast::tokenstream::TokenTree;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n+use std::fmt::Write as _;\n use std::mem;\n \n #[cfg(test)]\n@@ -248,22 +250,6 @@ crate fn build_deref_target_impls(cx: &mut DocContext<'_>, items: &[Item], ret:\n     }\n }\n \n-crate trait ToSource {\n-    fn to_src(&self, cx: &DocContext<'_>) -> String;\n-}\n-\n-impl ToSource for rustc_span::Span {\n-    fn to_src(&self, cx: &DocContext<'_>) -> String {\n-        debug!(\"converting span {:?} to snippet\", self);\n-        let sn = match cx.sess().source_map().span_to_snippet(*self) {\n-            Ok(x) => x,\n-            Err(_) => String::new(),\n-        };\n-        debug!(\"got snippet {}\", sn);\n-        sn\n-    }\n-}\n-\n crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n     use rustc_hir::*;\n     debug!(\"trying to get a name from pattern: {:?}\", p);\n@@ -572,3 +558,22 @@ crate fn has_doc_flag(attrs: ty::Attributes<'_>, flag: Symbol) -> bool {\n ///\n /// Set by `bootstrap::Builder::doc_rust_lang_org_channel` in order to keep tests passing on beta/stable.\n crate const DOC_RUST_LANG_ORG_CHANNEL: &'static str = env!(\"DOC_RUST_LANG_ORG_CHANNEL\");\n+\n+/// Render a sequence of macro arms in a format suitable for displaying to the user\n+/// as part of an item declaration.\n+pub(super) fn render_macro_arms<'a>(\n+    matchers: impl Iterator<Item = &'a TokenTree>,\n+    arm_delim: &str,\n+) -> String {\n+    let mut out = String::new();\n+    for matcher in matchers {\n+        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(matcher), arm_delim).unwrap();\n+    }\n+    out\n+}\n+\n+/// Render a macro matcher in a format suitable for displaying to the user\n+/// as part of an item declaration.\n+pub(super) fn render_macro_matcher(matcher: &TokenTree) -> String {\n+    rustc_ast_pretty::pprust::tt_to_string(matcher)\n+}"}, {"sha": "2b7021d9a53bbe604dff69c7a47430f7cbcfbb9f", "filename": "src/test/rustdoc/decl_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro.rs?ref=f82d4845f219357c80ed68a6391d0bf00611f228", "patch": "@@ -9,7 +9,7 @@ pub macro my_macro() {\n \n }\n \n-// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok:tt)*) {'\n+// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($ ($ tok : tt) *) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro my_macro_2($($tok:tt)*) {\n@@ -18,8 +18,8 @@ pub macro my_macro_2($($tok:tt)*) {\n \n // @has decl_macro/macro.my_macro_multi.html //pre 'pub macro my_macro_multi {'\n // @has - //pre '(_) => { ... },'\n-// @has - //pre '($foo:ident . $bar:expr) => { ... },'\n-// @has - //pre '($($foo:literal),+) => { ... }'\n+// @has - //pre '($ foo : ident.$ bar : expr) => { ... },'\n+// @has - //pre '($ ($ foo : literal), +) => { ... },'\n // @has - //pre '}'\n pub macro my_macro_multi {\n     (_) => {\n@@ -33,7 +33,7 @@ pub macro my_macro_multi {\n     }\n }\n \n-// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo:expr) {'\n+// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($ foo : expr) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro by_example_single {\n@@ -42,12 +42,12 @@ pub macro by_example_single {\n \n mod a {\n     mod b {\n-        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo:expr) {'\n+        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($ foo : expr) {'\n         pub(in super) macro by_example_vis {\n             ($foo:expr) => {}\n         }\n         mod c {\n-            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo:expr) {'\n+            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($ foo : expr) {'\n             pub(in a) macro by_example_vis_named {\n                 ($foo:expr) => {}\n             }"}, {"sha": "c243094f81ce00c2bcb6cc867e2cd6f5a4a6feb0", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=f82d4845f219357c80ed68a6391d0bf00611f228", "patch": "@@ -7,16 +7,15 @@\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n // @has - '//span[@class=\"ident\"]' 'todo'\n // Note: count = 2 * ('=' + '>') + '+' = 2 * (1 + 1) + 1 = 5\n-// @count - '//span[@class=\"op\"]' 5\n+// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 5\n \n // @has - '{ ()'\n // @has - '//span[@class=\"op\"]' '='\n // @has - '//span[@class=\"op\"]' '>'\n // @has - '{ ... };'\n \n-// @has - '($('\n-// @has - '//span[@class=\"macro-nonterminal\"]' '$'\n-// @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n+// @has - '($ ($'\n+// @has - '//span[@class=\"ident\"]' 'arg'\n // @has - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n // @has - '//span[@class=\"op\"]' '+'\n@@ -28,7 +27,7 @@ mod mod1 {\n     // @has - 'macro_rules!'\n     // @has - 'macro1'\n     // @has - '{ ()'\n-    // @has - '($('\n+    // @has - '($ ('\n     // @has - 'arg'\n     // @has - 'expr'\n     // @has - ','"}, {"sha": "f415be3669d16d1016698b3770b8e3d5c13a7f64", "filename": "src/test/rustdoc/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Ftest%2Frustdoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d4845f219357c80ed68a6391d0bf00611f228/src%2Ftest%2Frustdoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacros.rs?ref=f82d4845f219357c80ed68a6391d0bf00611f228", "patch": "@@ -1,7 +1,7 @@\n // @has macros/macro.my_macro.html //pre 'macro_rules! my_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a:tt) => { ... };'\n-// @has - //pre '($e:expr) => { ... };'\n+// @has - //pre '($ a : tt) => { ... };'\n+// @has - //pre '($ e : expr) => { ... };'\n #[macro_export]\n macro_rules! my_macro {\n     () => [];\n@@ -12,8 +12,8 @@ macro_rules! my_macro {\n // Check that exported macro defined in a module are shown at crate root.\n // @has macros/macro.my_sub_macro.html //pre 'macro_rules! my_sub_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a:tt) => { ... };'\n-// @has - //pre '($e:expr) => { ... };'\n+// @has - //pre '($ a : tt) => { ... };'\n+// @has - //pre '($ e : expr) => { ... };'\n mod sub {\n     #[macro_export]\n     macro_rules! my_sub_macro {"}]}