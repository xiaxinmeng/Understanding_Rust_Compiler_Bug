{"sha": "017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxN2E5Yjc2NDFkMjkxYzdiMjNmZmRjYjBkOGYzMDVkNmU5Y2FkMjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-30T17:00:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-30T17:00:24Z"}, "message": "Rustup to rustc 1.44.0-nightly (699f83f52 2020-03-29)", "tree": {"sha": "10f4b6c64118f619c18d3e925dd95daf38c6ddcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f4b6c64118f619c18d3e925dd95daf38c6ddcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "html_url": "https://github.com/rust-lang/rust/commit/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203b0b6b11842a2ff9281c797c1412011463aaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/203b0b6b11842a2ff9281c797c1412011463aaf5", "html_url": "https://github.com/rust-lang/rust/commit/203b0b6b11842a2ff9281c797c1412011463aaf5"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "8746986fb4f5dc41b5b432aa480ee5c94f39932e", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -1 +1 @@\n-nightly-2020-03-28\n+nightly-2020-03-30"}, {"sha": "773b49f8e4458d6a362e10fe4d0e95753d250c66", "filename": "src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -61,7 +61,7 @@ pub(super) fn add_local_place_comments<'tcx>(\n     place: CPlace<'tcx>,\n     local: Local,\n ) {\n-    let TyLayout { ty, layout } = place.layout();\n+    let TyAndLayout { ty, layout } = place.layout();\n     let ty::layout::Layout {\n         size,\n         align,"}, {"sha": "eb03552bf0ef1142508b7aa8a6507022f8a13b43", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -271,7 +271,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n fn local_place<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     local: Local,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n     is_ssa: bool,\n ) -> CPlace<'tcx> {\n     let place = if is_ssa {"}, {"sha": "8ebc981d9b055951f0acc1970c5d03a982196a97", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -76,7 +76,7 @@ impl PassMode {\n     }\n }\n \n-pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyLayout<'tcx>) -> PassMode {\n+pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> PassMode {\n     if layout.is_zst() {\n         // WARNING zst arguments must never be passed, as that will break CastKind::ClosureFnPointer\n         PassMode::NoPass"}, {"sha": "d53abe32147d1597e179c7c3cabcef37af46b8f6", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -1,11 +1,11 @@\n use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n-fn return_layout<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> TyLayout<'tcx> {\n+fn return_layout<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> TyAndLayout<'tcx> {\n     fx.layout_of(fx.monomorphize(&fx.mir.local_decls[RETURN_PLACE].ty))\n }\n \n-pub(crate) fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyLayout<'tcx>) -> bool {\n+pub(crate) fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyAndLayout<'tcx>) -> bool {\n     match get_pass_mode(tcx, dest_layout) {\n         PassMode::NoPass | PassMode::ByVal(_) => true,\n         // FIXME Make it possible to return ByValPair and ByRef to an ssa var."}, {"sha": "1d3fdfc75bf3f7a1639f942071bbe3106627255a", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -282,9 +282,9 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n \n impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n     type Ty = Ty<'tcx>;\n-    type TyLayout = TyLayout<'tcx>;\n+    type TyAndLayout = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyLayout<'tcx> {\n+    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n         assert!(!ty.needs_subst());\n         self.tcx\n             .layout_of(ParamEnv::reveal_all().and(&ty))"}, {"sha": "306f61aa074b75c3300d441984bcf56ac1c5cfa8", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n fn codegen_static_ref<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     def_id: DefId,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n ) -> CPlace<'tcx> {\n     let linkage = crate::linkage::get_static_ref_linkage(fx.tcx, def_id);\n     let data_id = data_id_for_static(fx.tcx, fx.module, def_id, linkage);\n@@ -277,7 +277,7 @@ fn data_id_for_static(\n \n fn cplace_for_dataid<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n     local_data_id: GlobalValue,\n ) -> CPlace<'tcx> {\n     let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);"}, {"sha": "2d0b36a5480f2fb9450330aedf7e455ec5ff0bae", "filename": "src/discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n pub(crate) fn codegen_get_discriminant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     value: CValue<'tcx>,\n-    dest_layout: TyLayout<'tcx>,\n+    dest_layout: TyAndLayout<'tcx>,\n ) -> CValue<'tcx> {\n     let layout = value.layout();\n "}, {"sha": "feacb3e6e9e338b4c780fafca8d281d4636dbea8", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -140,8 +140,8 @@ macro atomic_minmax($fx:expr, $cc:expr, <$T:ident> ($ptr:ident, $src:ident) -> $\n \n fn lane_type_and_count<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    layout: TyLayout<'tcx>,\n-) -> (TyLayout<'tcx>, u16) {\n+    layout: TyAndLayout<'tcx>,\n+) -> (TyAndLayout<'tcx>, u16) {\n     assert!(layout.ty.is_simd());\n     let lane_count = match layout.fields {\n         layout::FieldPlacement::Array { stride: _, count } => u16::try_from(count).unwrap(),\n@@ -154,7 +154,7 @@ fn lane_type_and_count<'tcx>(\n     (lane_layout, lane_count)\n }\n \n-fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyLayout<'tcx>) -> Option<Type> {\n+fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Option<Type> {\n     let (element, count) = match &layout.abi {\n         Abi::Vector { element, count } => (element.clone(), *count),\n         _ => unreachable!(),\n@@ -175,8 +175,8 @@ fn simd_for_each_lane<'tcx, B: Backend>(\n     ret: CPlace<'tcx>,\n     f: impl Fn(\n         &mut FunctionCx<'_, 'tcx, B>,\n-        TyLayout<'tcx>,\n-        TyLayout<'tcx>,\n+        TyAndLayout<'tcx>,\n+        TyAndLayout<'tcx>,\n         Value,\n     ) -> CValue<'tcx>,\n ) {\n@@ -203,8 +203,8 @@ fn simd_pair_for_each_lane<'tcx, B: Backend>(\n     ret: CPlace<'tcx>,\n     f: impl Fn(\n         &mut FunctionCx<'_, 'tcx, B>,\n-        TyLayout<'tcx>,\n-        TyLayout<'tcx>,\n+        TyAndLayout<'tcx>,\n+        TyAndLayout<'tcx>,\n         Value,\n         Value,\n     ) -> CValue<'tcx>,\n@@ -229,7 +229,7 @@ fn simd_pair_for_each_lane<'tcx, B: Backend>(\n \n fn bool_to_zero_or_max_uint<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n     val: Value,\n ) -> CValue<'tcx> {\n     let ty = fx.clif_type(layout.ty).unwrap();"}, {"sha": "fb0620713392913c27955497b9d2871b2b9067dd", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -72,7 +72,7 @@ mod prelude {\n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc::mir::{self, *};\n     pub(crate) use rustc_session::Session;\n-    pub(crate) use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout, VariantIdx};\n+    pub(crate) use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyAndLayout, VariantIdx};\n     pub(crate) use rustc::ty::{\n         self, FnSig, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeAndMut, TypeFoldable,\n     };"}, {"sha": "86af1ee538119b1f5b1473d38d21f6f803f6ee4e", "filename": "src/trap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -80,7 +80,7 @@ pub(crate) fn trap_unreachable(\n /// Trap code: user65535\n pub(crate) fn trap_unreachable_ret_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n-    dest_layout: TyLayout<'tcx>,\n+    dest_layout: TyAndLayout<'tcx>,\n     msg: impl AsRef<str>,\n ) -> CValue<'tcx> {\n     trap_unreachable(fx, msg);\n@@ -106,7 +106,7 @@ pub(crate) fn trap_unimplemented(\n /// Trap code: user65535\n pub(crate) fn trap_unimplemented_ret_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n-    dest_layout: TyLayout<'tcx>,\n+    dest_layout: TyAndLayout<'tcx>,\n     msg: impl AsRef<str>,\n ) -> CValue<'tcx> {\n     trap_unimplemented(fx, msg);"}, {"sha": "affb36d7d371297dffedfb62bc0d78318fad287d", "filename": "src/unsize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -43,8 +43,8 @@ pub(crate) fn unsized_info<'tcx>(\n fn unsize_thin_ptr<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     src: Value,\n-    src_layout: TyLayout<'tcx>,\n-    dst_layout: TyLayout<'tcx>,\n+    src_layout: TyAndLayout<'tcx>,\n+    dst_layout: TyAndLayout<'tcx>,\n ) -> (Value, Value) {\n     match (&src_layout.ty.kind, &dst_layout.ty.kind) {\n         (&ty::Ref(_, a, _), &ty::Ref(_, b, _))\n@@ -139,7 +139,7 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n \n pub(crate) fn size_and_align_of_dst<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n     info: Value,\n ) -> (Value, Value) {\n     if !layout.is_unsized() {"}, {"sha": "226c78ed01cfcd43d06df28f3d1b2bf4ff0b3be9", "filename": "src/value_and_place.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -6,9 +6,9 @@ fn codegen_field<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     base: Pointer,\n     extra: Option<Value>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n     field: mir::Field,\n-) -> (Pointer, TyLayout<'tcx>) {\n+) -> (Pointer, TyAndLayout<'tcx>) {\n     let field_offset = layout.fields.offset(field.index());\n     let field_layout = layout.field(&*fx, field.index());\n \n@@ -62,7 +62,7 @@ fn scalar_pair_calculate_b_offset(tcx: TyCtxt<'_>, a_scalar: &Scalar, b_scalar:\n \n /// A read-only value\n #[derive(Debug, Copy, Clone)]\n-pub(crate) struct CValue<'tcx>(CValueInner, TyLayout<'tcx>);\n+pub(crate) struct CValue<'tcx>(CValueInner, TyAndLayout<'tcx>);\n \n #[derive(Debug, Copy, Clone)]\n enum CValueInner {\n@@ -72,23 +72,23 @@ enum CValueInner {\n }\n \n impl<'tcx> CValue<'tcx> {\n-    pub(crate) fn by_ref(ptr: Pointer, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_ref(ptr: Pointer, layout: TyAndLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByRef(ptr, None), layout)\n     }\n \n-    pub(crate) fn by_ref_unsized(ptr: Pointer, meta: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_ref_unsized(ptr: Pointer, meta: Value, layout: TyAndLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByRef(ptr, Some(meta)), layout)\n     }\n \n-    pub(crate) fn by_val(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_val(value: Value, layout: TyAndLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByVal(value), layout)\n     }\n \n-    pub(crate) fn by_val_pair(value: Value, extra: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+    pub(crate) fn by_val_pair(value: Value, extra: Value, layout: TyAndLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByValPair(value, extra), layout)\n     }\n \n-    pub(crate) fn layout(&self) -> TyLayout<'tcx> {\n+    pub(crate) fn layout(&self) -> TyAndLayout<'tcx> {\n         self.1\n     }\n \n@@ -194,7 +194,7 @@ impl<'tcx> CValue<'tcx> {\n     /// If `ty` is signed, `const_val` must already be sign extended.\n     pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-        layout: TyLayout<'tcx>,\n+        layout: TyAndLayout<'tcx>,\n         const_val: u128,\n     ) -> CValue<'tcx> {\n         use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};\n@@ -243,7 +243,7 @@ impl<'tcx> CValue<'tcx> {\n         CValue::by_val(val, layout)\n     }\n \n-    pub(crate) fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n+    pub(crate) fn unchecked_cast_to(self, layout: TyAndLayout<'tcx>) -> Self {\n         CValue(self.0, layout)\n     }\n }\n@@ -252,7 +252,7 @@ impl<'tcx> CValue<'tcx> {\n #[derive(Debug, Copy, Clone)]\n pub(crate) struct CPlace<'tcx> {\n     inner: CPlaceInner,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n }\n \n #[derive(Debug, Copy, Clone)]\n@@ -263,15 +263,15 @@ pub(crate) enum CPlaceInner {\n }\n \n impl<'tcx> CPlace<'tcx> {\n-    pub(crate) fn layout(&self) -> TyLayout<'tcx> {\n+    pub(crate) fn layout(&self) -> TyAndLayout<'tcx> {\n         self.layout\n     }\n \n     pub(crate) fn inner(&self) -> &CPlaceInner {\n         &self.inner\n     }\n \n-    pub(crate) fn no_place(layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+    pub(crate) fn no_place(layout: TyAndLayout<'tcx>) -> CPlace<'tcx> {\n         CPlace {\n             inner: CPlaceInner::NoPlace,\n             layout,\n@@ -280,7 +280,7 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub(crate) fn new_stack_slot(\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-        layout: TyLayout<'tcx>,\n+        layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n         assert!(!layout.is_unsized());\n         if layout.size.bytes() == 0 {\n@@ -304,7 +304,7 @@ impl<'tcx> CPlace<'tcx> {\n     pub(crate) fn new_var(\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         local: Local,\n-        layout: TyLayout<'tcx>,\n+        layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n         fx.bcx\n             .declare_var(mir_var(local), fx.clif_type(layout.ty).unwrap());\n@@ -314,14 +314,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub(crate) fn for_ptr(ptr: Pointer, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+    pub(crate) fn for_ptr(ptr: Pointer, layout: TyAndLayout<'tcx>) -> CPlace<'tcx> {\n         CPlace {\n             inner: CPlaceInner::Addr(ptr, None),\n             layout,\n         }\n     }\n \n-    pub(crate) fn for_ptr_with_extra(ptr: Pointer, extra: Value, layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+    pub(crate) fn for_ptr_with_extra(ptr: Pointer, extra: Value, layout: TyAndLayout<'tcx>) -> CPlace<'tcx> {\n         CPlace {\n             inner: CPlaceInner::Addr(ptr, Some(extra)),\n             layout,\n@@ -578,7 +578,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub(crate) fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n+    pub(crate) fn unchecked_cast_to(self, layout: TyAndLayout<'tcx>) -> Self {\n         assert!(!self.layout().is_unsized());\n         match self.inner {\n             CPlaceInner::NoPlace => {"}, {"sha": "436073d26ce5cb41fd6b21da58d67c01a90e6950", "filename": "src/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017a9b7641d291c7b23ffdcb0d8f305d6e9cad23/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=017a9b7641d291c7b23ffdcb0d8f305d6e9cad23", "patch": "@@ -69,7 +69,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n \n pub(crate) fn get_vtable<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n     let data_id = if let Some(data_id) = fx.vtables.get(&(layout.ty, trait_ref)) {\n@@ -86,7 +86,7 @@ pub(crate) fn get_vtable<'tcx>(\n \n fn build_vtable<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    layout: TyLayout<'tcx>,\n+    layout: TyAndLayout<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> DataId {\n     let tcx = fx.tcx;"}]}