{"sha": "69d62e04e524d4b202b7fdce791e1418a4adbb38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZDYyZTA0ZTUyNGQ0YjIwMmI3ZmRjZTc5MWUxNDE4YTRhZGJiMzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-16T09:32:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-24T08:50:45Z"}, "message": "introduce a Vec<Ty> to TyClosure for storing upvar types", "tree": {"sha": "bbe05e9213768bdb568f5f724c78c8b98d8b2879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe05e9213768bdb568f5f724c78c8b98d8b2879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d62e04e524d4b202b7fdce791e1418a4adbb38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d62e04e524d4b202b7fdce791e1418a4adbb38", "html_url": "https://github.com/rust-lang/rust/commit/69d62e04e524d4b202b7fdce791e1418a4adbb38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d62e04e524d4b202b7fdce791e1418a4adbb38/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9ef1a5c19b8f9a254b0fb0b79a3bebf0722a9ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ef1a5c19b8f9a254b0fb0b79a3bebf0722a9ce", "html_url": "https://github.com/rust-lang/rust/commit/c9ef1a5c19b8f9a254b0fb0b79a3bebf0722a9ce"}], "stats": {"total": 158, "additions": 104, "deletions": 54}, "files": [{"sha": "72e1525b506d13edc96722dfb35977812a4017d2", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -564,8 +564,13 @@ fn parse_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> Ty<'tcx> w\n           assert_eq!(next(st), '[');\n           let did = parse_def_(st, ClosureSource, conv);\n           let substs = parse_substs_(st, conv);\n+          let mut tys = vec![];\n+          while peek(st) != '.' {\n+              tys.push(parse_ty_(st, conv));\n+          }\n+          assert_eq!(next(st), '.');\n           assert_eq!(next(st), ']');\n-          return st.tcx.mk_closure(did, st.tcx.mk_substs(substs));\n+          return st.tcx.mk_closure(did, st.tcx.mk_substs(substs), tys);\n       }\n       'P' => {\n           assert_eq!(next(st), '[');"}, {"sha": "77b5306c36e43262416c14ad94c2badfb6527e59", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -143,9 +143,13 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) {\n             enc_substs(w, cx, substs);\n             mywrite!(w, \"]\");\n         }\n-        ty::TyClosure(def, substs) => {\n+        ty::TyClosure(def, substs, ref tys) => {\n             mywrite!(w, \"k[{}|\", (cx.ds)(def));\n             enc_substs(w, cx, substs);\n+            for ty in tys {\n+                enc_ty(w, cx, ty);\n+            }\n+            mywrite!(w, \".\");\n             mywrite!(w, \"]\");\n         }\n         ty::TyProjection(ref data) => {"}, {"sha": "4635e406c4122320e9c5b65556d56a8659e36d46", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -76,7 +76,7 @@ pub fn simplify_type(tcx: &ty::ctxt,\n                 Err(msg) => tcx.sess.fatal(&msg),\n             }\n         }\n-        ty::TyClosure(def_id, _) => {\n+        ty::TyClosure(def_id, _, _) => {\n             Some(ClosureSimplifiedType(def_id))\n         }\n         ty::TyTuple(ref tys) => {"}, {"sha": "b6a8037fe033ec45044757bef7a84fa00cf17c58", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -96,7 +96,8 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n                 // No borrowed content reachable here.\n             }\n \n-            ty::TyClosure(def_id, substs) => {\n+            ty::TyClosure(def_id, substs, _) => {\n+                // TODO remove RegionSubClosure\n                 let &(r_a, opt_ty) = self.stack.last().unwrap();\n                 self.out.push(Implication::RegionSubClosure(opt_ty, r_a, def_id, substs));\n             }"}, {"sha": "fbb80fef9e6df2977c0aebec3eb082c105607005", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -1493,7 +1493,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn fn_ret(&self, id: NodeId) -> ty::PolyFnOutput<'tcx> {\n         let fn_ty = self.ir.tcx.node_id_to_type(id);\n         match fn_ty.sty {\n-            ty::TyClosure(closure_def_id, substs) =>\n+            ty::TyClosure(closure_def_id, substs, _) =>\n                 self.ir.tcx.closure_type(closure_def_id, substs).sig.output(),\n             _ => fn_ty.fn_ret()\n         }"}, {"sha": "4ba154b1046f30797f307056f2490f8b0976e36f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -584,7 +584,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n           def::DefUpvar(var_id, fn_node_id) => {\n               let ty = try!(self.node_ty(fn_node_id));\n               match ty.sty {\n-                  ty::TyClosure(closure_id, _) => {\n+                  ty::TyClosure(closure_id, _, _) => {\n                       match self.typer.closure_kind(closure_id) {\n                           Some(kind) => {\n                               self.cat_upvar(id, span, var_id, fn_node_id, kind)"}, {"sha": "ea2dee761593555d131b07d59faa0c76b108cfa1", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -271,6 +271,7 @@ pub struct VtableImplData<'tcx, N> {\n pub struct VtableClosureData<'tcx, N> {\n     pub closure_def_id: ast::DefId,\n     pub substs: subst::Substs<'tcx>,\n+    pub upvar_tys: Vec<Ty<'tcx>>,\n     /// Nested obligations. This can be non-empty if the closure\n     /// signature contains associated types.\n     pub nested: Vec<N>\n@@ -548,7 +549,8 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableClosure(c) => VtableClosure(VtableClosureData {\n                 closure_def_id: c.closure_def_id,\n                 substs: c.substs,\n-                nested: c.nested.into_iter().map(f).collect()\n+                nested: c.nested.into_iter().map(f).collect(),\n+                upvar_tys: c.upvar_tys,\n             })\n         }\n     }"}, {"sha": "b678aa405a89cfdc01947b01a3a9b4d01f479a95", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -154,7 +154,7 @@ fn consider_unification_despite_ambiguity<'cx,'tcx>(selcx: &mut SelectionContext\n     debug!(\"consider_unification_despite_ambiguity: self_ty.sty={:?}\",\n            self_ty.sty);\n     match self_ty.sty {\n-        ty::TyClosure(closure_def_id, substs) => {\n+        ty::TyClosure(closure_def_id, substs, _) => {\n             let closure_typer = selcx.closure_typer();\n             let closure_type = closure_typer.closure_type(closure_def_id, substs);\n             let ty::Binder((_, ret_type)) ="}, {"sha": "af41e205aec6672d9a0ff2f6732d69f8e820c42a", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -201,7 +201,7 @@ enum SelectionCandidate<'tcx> {\n \n     /// Implementation of a `Fn`-family trait by one of the\n     /// anonymous types generated for a `||` expression.\n-    ClosureCandidate(/* closure */ ast::DefId, Substs<'tcx>),\n+    ClosureCandidate(/* closure */ ast::DefId, &'tcx Substs<'tcx>, &'tcx Vec<Ty<'tcx>>),\n \n     /// Implementation of a `Fn`-family trait by one of the anonymous\n     /// types generated for a fn pointer type (e.g., `fn(int)->int`)\n@@ -348,7 +348,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // lifetimes can appear inside the self-type.\n         let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n         let (closure_def_id, substs) = match self_ty.sty {\n-            ty::TyClosure(id, ref substs) => (id, substs.clone()),\n+            ty::TyClosure(id, ref substs, _) => (id, substs.clone()),\n             _ => { return; }\n         };\n         assert!(!substs.has_escaping_regions());\n@@ -1142,8 +1142,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n-        let (closure_def_id, substs) = match self_ty.sty {\n-            ty::TyClosure(id, substs) => (id, substs),\n+        let (closure_def_id, substs, upvar_tys) = match self_ty.sty {\n+            ty::TyClosure(id, substs, ref upvar_tys) => (id, substs, upvar_tys),\n             ty::TyInfer(ty::TyVar(_)) => {\n                 debug!(\"assemble_unboxed_closure_candidates: ambiguous self-type\");\n                 candidates.ambiguous = true;\n@@ -1161,8 +1161,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             Some(closure_kind) => {\n                 debug!(\"assemble_unboxed_candidates: closure_kind = {:?}\", closure_kind);\n                 if closure_kind.extends(kind) {\n-                    candidates.vec.push(ClosureCandidate(closure_def_id,\n-                                                         substs.clone()));\n+                    candidates.vec.push(ClosureCandidate(closure_def_id, substs, upvar_tys));\n                 }\n             }\n             None => {\n@@ -1704,7 +1703,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet\n             ty::TyTuple(ref tys) => ok_if(tys.clone()),\n \n-            ty::TyClosure(def_id, substs) => {\n+            ty::TyClosure(def_id, substs, _) => {\n                 // FIXME -- This case is tricky. In the case of by-ref\n                 // closures particularly, we need the results of\n                 // inference to decide how to reflect the type of each\n@@ -1730,6 +1729,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     return ok_if(Vec::new());\n                 }\n \n+                // TODO\n                 match self.infcx.closure_upvars(def_id, substs) {\n                     Some(upvars) => ok_if(upvars.iter().map(|c| c.ty).collect()),\n                     None => {\n@@ -1865,9 +1865,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Some(tys.clone())\n             }\n \n-            ty::TyClosure(def_id, substs) => {\n+            ty::TyClosure(def_id, substs, _) => {\n                 assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n \n+                // TODO\n                 match self.infcx.closure_upvars(def_id, substs) {\n                     Some(upvars) => {\n                         Some(upvars.iter().map(|c| c.ty).collect())\n@@ -2014,9 +2015,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(VtableImpl(vtable_impl))\n             }\n \n-            ClosureCandidate(closure_def_id, substs) => {\n+            ClosureCandidate(closure_def_id, substs, upvar_tys) => {\n                 let vtable_closure =\n-                    try!(self.confirm_closure_candidate(obligation, closure_def_id, &substs));\n+                    try!(self.confirm_closure_candidate(obligation, closure_def_id,\n+                                                        &substs, upvar_tys));\n                 Ok(VtableClosure(vtable_closure))\n             }\n \n@@ -2365,7 +2367,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_closure_candidate(&mut self,\n                                  obligation: &TraitObligation<'tcx>,\n                                  closure_def_id: ast::DefId,\n-                                 substs: &Substs<'tcx>)\n+                                 substs: &Substs<'tcx>,\n+                                 upvar_tys: &'tcx Vec<Ty<'tcx>>)\n                                  -> Result<VtableClosureData<'tcx, PredicateObligation<'tcx>>,\n                                            SelectionError<'tcx>>\n     {\n@@ -2391,6 +2394,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(VtableClosureData {\n             closure_def_id: closure_def_id,\n             substs: substs.clone(),\n+            upvar_tys: upvar_tys.clone(),\n             nested: obligations\n         })\n     }"}, {"sha": "17d55737114fb73787862044e81dd477c853e2c4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -1767,7 +1767,7 @@ pub enum TypeVariants<'tcx> {\n \n     /// The anonymous type of a closure. Used to represent the type of\n     /// `|a| a`.\n-    TyClosure(DefId, &'tcx Substs<'tcx>),\n+    TyClosure(DefId, &'tcx Substs<'tcx>, Vec<Ty<'tcx>>),\n \n     /// A tuple type.  For example, `(i32, bool)`.\n     TyTuple(Vec<Ty<'tcx>>),\n@@ -3214,10 +3214,11 @@ impl FlagComputation {\n                 }\n             }\n \n-            &TyClosure(_, substs) => {\n+            &TyClosure(_, substs, ref tys) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n                 self.add_substs(substs);\n+                self.add_tys(tys);\n             }\n \n             &TyInfer(_) => {\n@@ -3659,9 +3660,12 @@ impl<'tcx> ctxt<'tcx> {\n         self.mk_ty(TyStruct(struct_id, substs))\n     }\n \n-    pub fn mk_closure(&self, closure_id: ast::DefId, substs: &'tcx Substs<'tcx>)\n+    pub fn mk_closure(&self,\n+                      closure_id: ast::DefId,\n+                      substs: &'tcx Substs<'tcx>,\n+                      tys: Vec<Ty<'tcx>>)\n                       -> Ty<'tcx> {\n-        self.mk_ty(TyClosure(closure_id, substs))\n+        self.mk_ty(TyClosure(closure_id, substs, tys))\n     }\n \n     pub fn mk_var(&self, v: TyVid) -> Ty<'tcx> {\n@@ -3928,7 +3932,7 @@ impl<'tcx> TyS<'tcx> {\n             TyTrait(ref tt) => Some(tt.principal_def_id()),\n             TyStruct(id, _) |\n             TyEnum(id, _) |\n-            TyClosure(id, _) => Some(id),\n+            TyClosure(id, _, _) => Some(id),\n             _ => None\n         }\n     }\n@@ -4146,7 +4150,7 @@ impl<'tcx> TyS<'tcx> {\n                     apply_lang_items(cx, did, res)\n                 }\n \n-                TyClosure(did, substs) => {\n+                TyClosure(did, substs, _) => {\n                     let param_env = cx.empty_parameter_environment();\n                     let infcx = infer::new_infer_ctxt(cx, &cx.tables, Some(param_env), false);\n                     let upvars = infcx.closure_upvars(did, substs).unwrap();\n@@ -6378,7 +6382,7 @@ impl<'tcx> ctxt<'tcx> {\n                     }\n                     TyInfer(_) => unreachable!(),\n                     TyError => byte!(21),\n-                    TyClosure(d, _) => {\n+                    TyClosure(d, _, _) => {\n                         byte!(22);\n                         did(state, d);\n                     }"}, {"sha": "87b5fcbd28e90e3fb6bf67480fe0748c8dc6a434", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -450,6 +450,7 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableClosureDa\n             closure_def_id: self.closure_def_id,\n             substs: self.substs.fold_with(folder),\n             nested: self.nested.fold_with(folder),\n+            upvar_tys: self.upvar_tys.fold_with(folder),\n         }\n     }\n }\n@@ -602,9 +603,10 @@ pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n             let substs = substs.fold_with(this);\n             ty::TyStruct(did, this.tcx().mk_substs(substs))\n         }\n-        ty::TyClosure(did, ref substs) => {\n+        ty::TyClosure(did, ref substs, ref tys) => {\n             let s = substs.fold_with(this);\n-            ty::TyClosure(did, this.tcx().mk_substs(s))\n+            let tys = tys.fold_with(this);\n+            ty::TyClosure(did, this.tcx().mk_substs(s), tys)\n         }\n         ty::TyProjection(ref data) => {\n             ty::TyProjection(data.fold_with(this))"}, {"sha": "33cddc978d9bb46d5905100630d8f7b2e842e5eb", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -48,6 +48,12 @@ pub trait TypeRelation<'a,'tcx> : Sized {\n         Relate::relate(self, a, b)\n     }\n \n+    /// Relete elements of two slices pairwise.\n+    fn relate_zip<T:Relate<'a,'tcx>>(&mut self, a: &[T], b: &[T]) -> RelateResult<'tcx, Vec<T>> {\n+        assert_eq!(a.len(), b.len());\n+        a.iter().zip(b).map(|(a, b)| self.relate(a, b)).collect()\n+    }\n+\n     /// Switch variance for the purpose of relating `a` and `b`.\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n@@ -500,15 +506,16 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n             Ok(tcx.mk_struct(a_id, tcx.mk_substs(substs)))\n         }\n \n-        (&ty::TyClosure(a_id, a_substs),\n-         &ty::TyClosure(b_id, b_substs))\n+        (&ty::TyClosure(a_id, a_substs, ref a_tys),\n+         &ty::TyClosure(b_id, b_substs, ref b_tys))\n             if a_id == b_id =>\n         {\n             // All TyClosure types with the same id represent\n             // the (anonymous) type of the same closure expression. So\n             // all of their regions should be equated.\n             let substs = try!(relate_substs(relation, None, a_substs, b_substs));\n-            Ok(tcx.mk_closure(a_id, tcx.mk_substs(substs)))\n+            let tys = try!(relation.relate_zip(a_tys, b_tys));\n+            Ok(tcx.mk_closure(a_id, tcx.mk_substs(substs), tys))\n         }\n \n         (&ty::TyBox(a_inner), &ty::TyBox(b_inner)) =>"}, {"sha": "97f3bd1297197e4a67d3264b1fb650fe2c3fc710", "filename": "src/librustc/middle/ty_walk.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -88,10 +88,13 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n             }).collect::<Vec<_>>());\n         }\n         ty::TyEnum(_, ref substs) |\n-        ty::TyStruct(_, ref substs) |\n-        ty::TyClosure(_, ref substs) => {\n+        ty::TyStruct(_, ref substs) => {\n             push_reversed(stack, substs.types.as_slice());\n         }\n+        ty::TyClosure(_, ref substs, ref tys) => {\n+            push_reversed(stack, substs.types.as_slice());\n+            push_reversed(stack, tys);\n+        }\n         ty::TyTuple(ref ts) => {\n             push_reversed(stack, ts);\n         }"}, {"sha": "d6696e392bcff4c726188b27e7c988a44195e29d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -662,7 +662,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n             TyTrait(ref data) => write!(f, \"{}\", data),\n             ty::TyProjection(ref data) => write!(f, \"{}\", data),\n             TyStr => write!(f, \"str\"),\n-            TyClosure(ref did, substs) => ty::tls::with(|tcx| {\n+            TyClosure(ref did, substs, _) => ty::tls::with(|tcx| {\n                 try!(write!(f, \"[closure\"));\n                 let closure_tys = &tcx.tables.borrow().closure_tys;\n                 try!(closure_tys.get(did).map(|cty| &cty.sig).and_then(|sig| {"}, {"sha": "331bcaa8da89b8dab27b10fa7d7a0bf2bb5b6592", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -2529,7 +2529,7 @@ impl LintPass for DropWithReprExtern {\n             match dtor_self_type.sty {\n                 ty::TyEnum(self_type_did, _) |\n                 ty::TyStruct(self_type_did, _) |\n-                ty::TyClosure(self_type_did, _) => {\n+                ty::TyClosure(self_type_did, _, _) => {\n                     let hints = ctx.tcx.lookup_repr_hints(self_type_did);\n                     if hints.iter().any(|attr| *attr == attr::ReprExtern) &&\n                         ctx.tcx.ty_dtor(self_type_did).has_drop_flag() {"}, {"sha": "985ef2d7b14fcf979562039578fd4478661ec58a", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -221,9 +221,9 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             Univariant(mk_struct(cx, &ftys[..], packed, t), dtor_to_init_u8(dtor))\n         }\n-        ty::TyClosure(def_id, substs) => {\n+        ty::TyClosure(def_id, substs, _) => {\n             let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables);\n-            let upvars = infcx.closure_upvars(def_id, substs).unwrap();\n+            let upvars = infcx.closure_upvars(def_id, substs).unwrap(); // TODO\n             let upvar_types = upvars.iter().map(|u| u.ty).collect::<Vec<_>>();\n             Univariant(mk_struct(cx, &upvar_types[..], false, t), 0)\n         }\n@@ -441,9 +441,9 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n         // Perhaps one of the upvars of this struct is non-zero\n         // Let's recurse and find out!\n-        ty::TyClosure(def_id, substs) => {\n+        ty::TyClosure(def_id, substs, _) => {\n             let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables);\n-            let upvars = infcx.closure_upvars(def_id, substs).unwrap();\n+            let upvars = infcx.closure_upvars(def_id, substs).unwrap(); // TODO\n             let upvar_types = upvars.iter().map(|u| u.ty).collect::<Vec<_>>();\n \n             for (j, &ty) in upvar_types.iter().enumerate() {"}, {"sha": "03e7d9e3aa28596dc06e89a9ec2a5683cfc6b727", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -145,7 +145,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n     let function_type;\n     let (fn_sig, abi, env_ty) = match fn_type.sty {\n         ty::TyBareFn(_, ref f) => (&f.sig, f.abi, None),\n-        ty::TyClosure(closure_did, substs) => {\n+        ty::TyClosure(closure_did, substs, _) => {\n             let infcx = infer::normalizing_infer_ctxt(ccx.tcx(), &ccx.tcx().tables);\n             function_type = infcx.closure_type(closure_did, substs);\n             let self_type = base::self_type_for_closure(ccx, closure_did, fn_type);"}, {"sha": "678b5063816c70531148e13a9c71610e4503bef2", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -470,7 +470,7 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n               }\n           })\n       }\n-      ty::TyClosure(def_id, substs) => {\n+      ty::TyClosure(def_id, substs, _) => { // TODO\n           let repr = adt::represent_type(cx.ccx(), t);\n           let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables);\n           let upvars = infcx.closure_upvars(def_id, substs).unwrap();"}, {"sha": "defa0a1d898bf60e5c52d3d0aade1233e9f9fab2", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -12,6 +12,7 @@ use arena::TypedArena;\n use back::link::{self, mangle_internal_name_by_path_and_seq};\n use llvm::{ValueRef, get_params};\n use middle::infer;\n+use middle::ty::Ty;\n use trans::adt;\n use trans::attributes;\n use trans::base::*;\n@@ -142,7 +143,7 @@ pub fn get_or_create_declaration_if_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tc\n     // duplicate declarations\n     let function_type = erase_regions(ccx.tcx(), &function_type);\n     let params = match function_type.sty {\n-        ty::TyClosure(_, substs) => &substs.types,\n+        ty::TyClosure(_, substs, _) => &substs.types,\n         _ => unreachable!()\n     };\n     let mono_id = MonoId {\n@@ -269,6 +270,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n pub fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n                                       closure_def_id: ast::DefId,\n                                       substs: Substs<'tcx>,\n+                                      upvar_tys: Vec<Ty<'tcx>>,\n                                       node: ExprOrMethodCall,\n                                       param_substs: &'tcx Substs<'tcx>,\n                                       trait_closure_kind: ty::ClosureKind)\n@@ -288,6 +290,7 @@ pub fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     trans_closure_adapter_shim(ccx,\n                                closure_def_id,\n                                substs,\n+                               upvar_tys,\n                                closure_kind,\n                                trait_closure_kind,\n                                llfn)\n@@ -297,6 +300,7 @@ fn trans_closure_adapter_shim<'a, 'tcx>(\n     ccx: &'a CrateContext<'a, 'tcx>,\n     closure_def_id: ast::DefId,\n     substs: Substs<'tcx>,\n+    upvar_tys: Vec<Ty<'tcx>>,\n     llfn_closure_kind: ty::ClosureKind,\n     trait_closure_kind: ty::ClosureKind,\n     llfn: ValueRef)\n@@ -335,7 +339,7 @@ fn trans_closure_adapter_shim<'a, 'tcx>(\n             //     fn call_once(mut self, ...) { call_mut(&mut self, ...) }\n             //\n             // These are both the same at trans time.\n-            trans_fn_once_adapter_shim(ccx, closure_def_id, substs, llfn)\n+            trans_fn_once_adapter_shim(ccx, closure_def_id, substs, upvar_tys, llfn)\n         }\n         _ => {\n             tcx.sess.bug(&format!(\"trans_closure_adapter_shim: cannot convert {:?} to {:?}\",\n@@ -349,6 +353,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     ccx: &'a CrateContext<'a, 'tcx>,\n     closure_def_id: ast::DefId,\n     substs: Substs<'tcx>,\n+    upvar_tys: Vec<Ty<'tcx>>,\n     llreffn: ValueRef)\n     -> ValueRef\n {\n@@ -363,7 +368,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // Find a version of the closure type. Substitute static for the\n     // region since it doesn't really matter.\n     let substs = tcx.mk_substs(substs);\n-    let closure_ty = tcx.mk_closure(closure_def_id, substs);\n+    let closure_ty = tcx.mk_closure(closure_def_id, substs, upvar_tys);\n     let ref_closure_ty = tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic), closure_ty);\n \n     // Make a version with the type of by-ref closure."}, {"sha": "d0c6c0ab308c4bec0b52411366d6ffb721f6e4b0", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -287,7 +287,7 @@ impl<'tcx> TypeMap<'tcx> {\n                     }\n                 }\n             },\n-            ty::TyClosure(def_id, substs) => {\n+            ty::TyClosure(def_id, substs, _) => {\n                 let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables);\n                 let closure_ty = infcx.closure_type(def_id, substs);\n                 self.get_unique_type_id_of_closure_type(cx,\n@@ -811,7 +811,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             MetadataCreationResult::new(pointer_type_metadata(cx, t, fn_metadata), false)\n \n         }\n-        ty::TyClosure(def_id, substs) => {\n+        ty::TyClosure(def_id, substs, _) => {\n             let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables);\n             let upvars = infcx.closure_upvars(def_id, substs).unwrap();\n             let upvar_types = upvars.iter().map(|u| u.ty).collect::<Vec<_>>();"}, {"sha": "a641302e53fab835c6dc31d44dbf19c069d6c594", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -116,7 +116,7 @@ pub fn declare_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n         ty::TyBareFn(_, ref f) => {\n             (&f.sig, f.abi, None)\n         }\n-        ty::TyClosure(closure_did, substs) => {\n+        ty::TyClosure(closure_did, substs, _) => {\n             let infcx = infer::normalizing_infer_ctxt(ccx.tcx(), &ccx.tcx().tables);\n             function_type = infcx.closure_type(closure_did, substs);\n             let self_type = base::self_type_for_closure(ccx, closure_did, fn_type);"}, {"sha": "cf2a226db41eb45426a4d910683b07e108b3f7ec", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -341,6 +341,7 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let llfn = closure::trans_closure_method(bcx.ccx(),\n                                                      vtable_closure.closure_def_id,\n                                                      vtable_closure.substs,\n+                                                     vtable_closure.upvar_tys,\n                                                      MethodCallKey(method_call),\n                                                      bcx.fcx.param_substs,\n                                                      trait_closure_kind);\n@@ -641,11 +642,13 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 traits::VtableClosureData {\n                     closure_def_id,\n                     substs,\n+                    upvar_tys,\n                     nested: _ }) => {\n                 let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_ref.def_id()).unwrap();\n                 let llfn = closure::trans_closure_method(ccx,\n                                                          closure_def_id,\n                                                          substs,\n+                                                         upvar_tys,\n                                                          ExprId(0),\n                                                          param_substs,\n                                                          trait_closure_kind);"}, {"sha": "955a301340519b84c4600732b49a42a5a990f731", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -131,7 +131,7 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             return Some(CallStep::Builtin);\n         }\n \n-        ty::TyClosure(def_id, substs) => {\n+        ty::TyClosure(def_id, substs, _) => {\n             assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n \n             // Check whether this is a call to a closure where we"}, {"sha": "71e51292a7846f145b733dd82e8606a34f43ece1", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -60,8 +60,18 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n         abi::RustCall,\n         expected_sig);\n \n-    let closure_type = fcx.ccx.tcx.mk_closure(expr_def_id,\n-        fcx.ccx.tcx.mk_substs(fcx.inh.infcx.parameter_environment.free_substs.clone()));\n+    let freevar_tys =\n+        fcx.tcx().with_freevars(expr.id, |fv| {\n+            fv.iter()\n+              .map(|_| fcx.tcx().types.bool) // TODO\n+              .collect()\n+        });\n+\n+    let closure_type =\n+        fcx.ccx.tcx.mk_closure(\n+            expr_def_id,\n+            fcx.ccx.tcx.mk_substs(fcx.inh.infcx.parameter_environment.free_substs.clone()),\n+            freevar_tys);\n \n     fcx.write_ty(expr.id, closure_type);\n "}, {"sha": "f37177684d55219b35424c919cc93844d75c6291", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -42,7 +42,7 @@ pub fn check_drop_impl(tcx: &ty::ctxt, drop_impl_did: ast::DefId) -> Result<(),\n     match dtor_self_type.sty {\n         ty::TyEnum(self_type_did, self_to_impl_substs) |\n         ty::TyStruct(self_type_did, self_to_impl_substs) |\n-        ty::TyClosure(self_type_did, self_to_impl_substs) => {\n+        ty::TyClosure(self_type_did, self_to_impl_substs, _) => {\n             try!(ensure_drop_params_and_item_params_correspond(tcx,\n                                                                drop_impl_did,\n                                                                dtor_generics,"}, {"sha": "8b9871428c4d12d78f06aa917d7da38bf5d1d174", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -288,7 +288,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             }\n             ty::TyEnum(did, _) |\n             ty::TyStruct(did, _) |\n-            ty::TyClosure(did, _) => {\n+            ty::TyClosure(did, _, _) => {\n                 self.assemble_inherent_impl_candidates_for_type(did);\n             }\n             ty::TyBox(_) => {\n@@ -711,7 +711,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         let steps = self.steps.clone();\n         for step in steps.iter() {\n             let closure_def_id = match step.self_ty.sty {\n-                ty::TyClosure(a, _) => a,\n+                ty::TyClosure(a, _, _) => a,\n                 _ => continue,\n             };\n "}, {"sha": "0878ca1c29562c66ed9342d3c6fa820776543deb", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d62e04e524d4b202b7fdce791e1418a4adbb38/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=69d62e04e524d4b202b7fdce791e1418a4adbb38", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             match self_type.ty.sty {\n                 ty::TyEnum(type_def_id, _) |\n                 ty::TyStruct(type_def_id, _) |\n-                ty::TyClosure(type_def_id, _) => {\n+                ty::TyClosure(type_def_id, _, _) => {\n                     tcx.destructor_for_type\n                        .borrow_mut()\n                        .insert(type_def_id, method_def_id.def_id());"}]}