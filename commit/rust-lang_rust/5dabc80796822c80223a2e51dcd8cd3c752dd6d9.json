{"sha": "5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYWJjODA3OTY4MjJjODAyMjNhMmU1MWRjZDhjZDNjNzUyZGQ2ZDk=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-24T04:52:57Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-25T13:12:29Z"}, "message": "Refactor #82270 as lint instead of an error", "tree": {"sha": "4004f49f49c1fbca1ae928477f5568e875a7b65d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4004f49f49c1fbca1ae928477f5568e875a7b65d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "html_url": "https://github.com/rust-lang/rust/commit/5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd94f4aa9683158c7df96b9661be193c39a55ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd94f4aa9683158c7df96b9661be193c39a55ed", "html_url": "https://github.com/rust-lang/rust/commit/2bd94f4aa9683158c7df96b9661be193c39a55ed"}], "stats": {"total": 297, "additions": 179, "deletions": 118}, "files": [{"sha": "e6afc81d0396afabb5377322104cd339bf94809a", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 30, "deletions": 65, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "patch": "@@ -7,11 +7,10 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_span::{\n-    symbol::{kw, sym, Symbol},\n-    BytePos,\n-};\n+use rustc_session::lint;\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{InnerSpan, Span};\n+use rustc_target::asm::InlineAsmArch;\n \n struct AsmArgs {\n     templates: Vec<P<ast::Expr>>,\n@@ -402,8 +401,6 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n     let mut line_spans = Vec::with_capacity(args.templates.len());\n     let mut curarg = 0;\n \n-    let default_dialect = ecx.sess.inline_asm_dialect();\n-\n     for template_expr in args.templates.into_iter() {\n         if !template.is_empty() {\n             template.push(ast::InlineAsmTemplatePiece::String(\"\\n\".to_string()));\n@@ -430,56 +427,36 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         let template_str = &template_str.as_str();\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n \n-        if let Some(snippet) = &template_snippet {\n-            let snippet = snippet.trim_matches('\"');\n-            match default_dialect {\n-                ast::LlvmAsmDialect::Intel => {\n-                    if let Some(span) = check_syntax_directive(snippet, \".intel_syntax\") {\n-                        let span = template_span.from_inner(span);\n-                        let mut err = ecx.struct_span_err(span, \"intel syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n-                        err.span_suggestion(\n-                            span,\n-                            \"remove this assembler directive\",\n-                            \"\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n-\n-                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n-                        let span = template_span.from_inner(span);\n-                        let mut err = ecx.struct_span_err(span, \"using the .att_syntax directive may cause issues, use the att_syntax option instead\");\n-                        let asm_end = sp.hi() - BytePos(2);\n-                        let suggestions = vec![\n-                            (span, \"\".to_string()),\n-                            (\n-                                Span::new(asm_end, asm_end, sp.ctxt()),\n-                                \", options(att_syntax)\".to_string(),\n-                            ),\n-                        ];\n-                        err.multipart_suggestion(\n-                        \"remove the assembler directive and replace it with options(att_syntax)\",\n-                        suggestions,\n-                        Applicability::MachineApplicable,\n-                    );\n-                        err.emit();\n+        if let Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) = ecx.sess.asm_arch {\n+            let find_span = |needle: &str| -> Span {\n+                if let Some(snippet) = &template_snippet {\n+                    if let Some(pos) = snippet.find(needle) {\n+                        let end = pos\n+                            + &snippet[pos..]\n+                                .find(|c| matches!(c, '\\n' | ';' | '\\\\' | '\"'))\n+                                .unwrap_or(snippet[pos..].len() - 1);\n+                        let inner = InnerSpan::new(pos, end);\n+                        return template_sp.from_inner(inner);\n                     }\n                 }\n-                ast::LlvmAsmDialect::Att => {\n-                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n-                        let span = template_span.from_inner(span);\n-                        let mut err = ecx.struct_span_err(span, \"att syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n-                        err.span_suggestion(\n-                            span,\n-                            \"remove this assembler directive\",\n-                            \"\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n+                template_sp\n+            };\n \n-                    // Use of .intel_syntax is ignored\n-                }\n+            if template_str.contains(\".intel_syntax\") {\n+                ecx.parse_sess().buffer_lint(\n+                    lint::builtin::BAD_ASM_STYLE,\n+                    find_span(\".intel_syntax\"),\n+                    ecx.resolver.lint_node_id(ecx.current_expansion.id),\n+                    \"avoid using `.intel_syntax`, Intel syntax is the default\",\n+                );\n+            }\n+            if template_str.contains(\".att_syntax\") {\n+                ecx.parse_sess().buffer_lint(\n+                    lint::builtin::BAD_ASM_STYLE,\n+                    find_span(\".att_syntax\"),\n+                    ecx.resolver.lint_node_id(ecx.current_expansion.id),\n+                    \"avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\",\n+                );\n             }\n         }\n \n@@ -690,15 +667,3 @@ pub fn expand_asm<'cx>(\n         }\n     }\n }\n-\n-fn check_syntax_directive<S: AsRef<str>>(piece: S, syntax: &str) -> Option<InnerSpan> {\n-    let piece = piece.as_ref();\n-    if let Some(idx) = piece.find(syntax) {\n-        let end =\n-            idx + &piece[idx..].find(|c| matches!(c, '\\n' | ';')).unwrap_or(piece[idx..].len());\n-        // Offset by one because these represent the span with the \" removed\n-        Some(InnerSpan::new(idx + 1, end + 1))\n-    } else {\n-        None\n-    }\n-}"}, {"sha": "cd4d01ddc058e0514417b7d6786d229cfe8fbe2b", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "patch": "@@ -2486,6 +2486,52 @@ declare_lint! {\n     \"using only a subset of a register for inline asm inputs\",\n }\n \n+declare_lint! {\n+    /// The `bad_asm_style` lint detects the use of the `.intel_syntax` and\n+    /// `.att_syntax` directives.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (fails on system llvm)\n+    /// #![feature(asm)]\n+    ///\n+    /// fn main() {\n+    ///     #[cfg(target_arch=\"x86_64\")]\n+    ///     unsafe {\n+    ///         asm!(\n+    ///             \".att_syntax\",\n+    ///             \"movl {0}, {0}\", in(reg) 0usize\n+    ///         );\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    ///  warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n+    ///  --> test.rs:7:14\n+    ///   |\n+    /// 7 |             \".att_syntax\",\n+    ///   |              ^^^^^^^^^^^\n+    /// 8 |             \"movq {0}, {0}\", out(reg) _,\n+    /// 9 |         );\n+    ///   |         - help: add option: `, options(att_syntax)`\n+    ///   |\n+    ///   = note: `#[warn(bad_asm_style)]` on by default\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// On x86, `asm!` uses the intel assembly syntax by default. While this\n+    /// can be switched using assembler directives like `.att_syntax`, using the\n+    /// `att_syntax` option is recomended instead because it will also properly\n+    /// prefix register placeholders with `%` as required by AT&T syntax.\n+    pub BAD_ASM_STYLE,\n+    Warn,\n+    \"incorrect use of inline assembly\",\n+}\n+\n declare_lint! {\n     /// The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\n     /// functions without an explicit unsafe block."}, {"sha": "4f6111183607c3a483af0d20d4124dd89b8f3aab", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "patch": "@@ -793,13 +793,6 @@ impl Session {\n         }\n     }\n \n-    pub fn inline_asm_dialect(&self) -> rustc_ast::LlvmAsmDialect {\n-        match self.asm_arch {\n-            Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) => rustc_ast::LlvmAsmDialect::Intel,\n-            _ => rustc_ast::LlvmAsmDialect::Att,\n-        }\n-    }\n-\n     pub fn relocation_model(&self) -> RelocModel {\n         self.opts.cg.relocation_model.unwrap_or(self.target.relocation_model)\n     }"}, {"sha": "56e6572fc6703c27c100c953f91c884e39e7c927", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "patch": "@@ -1,14 +1,74 @@\n-error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:23:15\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:22:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .intel_syntax noprefix\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:25:15\n+   |\n+LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .intel_syntax aaa noprefix\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:28:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .att_syntax noprefix\n+   |     ^\n \n-error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:26:15\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:31:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .att_syntax bbb noprefix\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:34:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix; nop\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .intel_syntax noprefix; nop\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:40:13\n+   |\n+LL |             .intel_syntax noprefix\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:13\n+   |\n+LL |             .intel_syntax noprefix\n+   |             ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "78dde5a58e1500f1708a2898df809bf781866b6b", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "patch": "@@ -1,9 +1,12 @@\n // needs-llvm-components: arm\n // revisions: x86_64 arm\n //[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[x86_64] check-pass\n //[arm] compile-flags: --target armv7-unknown-linux-gnueabihf\n+//[arm] build-fail\n \n #![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n #![no_core]\n \n #[rustc_builtin_macro]\n@@ -14,26 +17,30 @@ macro_rules! asm {\n #[lang = \"sized\"]\n trait Sized {}\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         asm!(\".intel_syntax noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".att_syntax noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n-        //[arm]~^^ att syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.att_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".att_syntax bbb noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n-        //[arm]~^^ att syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.att_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".intel_syntax noprefix; nop\");\n-        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^ ERROR unknown directive\n \n         asm!(\n             r\"\n             .intel_syntax noprefix\n             nop\"\n         );\n-        //[x86_64]~^^^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^^^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^^^ ERROR unknown directive\n     }\n }"}, {"sha": "5c03d3a002c5a2af770746595a80871473690949", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dabc80796822c80223a2e51dcd8cd3c752dd6d9/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=5dabc80796822c80223a2e51dcd8cd3c752dd6d9", "patch": "@@ -1,50 +1,40 @@\n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:19:15\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:22:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bad_asm_style)]` on by default\n \n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:21:15\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:25:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n-  --> $DIR/inline-syntax.rs:23:15\n+warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n+  --> $DIR/inline-syntax.rs:28:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: remove the assembler directive and replace it with options(att_syntax)\n-   |\n-LL |         asm!(\"\", \"nop\", options(att_syntax));\n-   |              --       ^^^^^^^^^^^^^^^^^^^^^\n \n-error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n-  --> $DIR/inline-syntax.rs:26:15\n+warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n+  --> $DIR/inline-syntax.rs:31:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: remove the assembler directive and replace it with options(att_syntax)\n-   |\n-LL |         asm!(\"\", \"nop\", options(att_syntax));\n-   |              --       ^^^^^^^^^^^^^^^^^^^^^\n \n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:29:15\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:34:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:34:14\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:40:13\n    |\n-LL |               .intel_syntax noprefix\n-   |  ______________^\n-LL | |             nop\"\n-   | |_ help: remove this assembler directive\n+LL |             .intel_syntax noprefix\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+warning: 6 warnings emitted\n "}]}