{"sha": "7f5891184d55c3d01f57cf480d718e19f9f8268d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTg5MTE4NGQ1NWMzZDAxZjU3Y2Y0ODBkNzE4ZTE5ZjlmODI2OGQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T11:55:55Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-01T11:55:55Z"}, "message": "merged upstream master", "tree": {"sha": "9011c1a59654e7fd6bdb0aec488bd84d8372bf2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9011c1a59654e7fd6bdb0aec488bd84d8372bf2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5891184d55c3d01f57cf480d718e19f9f8268d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5891184d55c3d01f57cf480d718e19f9f8268d", "html_url": "https://github.com/rust-lang/rust/commit/7f5891184d55c3d01f57cf480d718e19f9f8268d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5891184d55c3d01f57cf480d718e19f9f8268d/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdca2c93c1949fcb9a4e3dd696fff01f3ff3dcf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdca2c93c1949fcb9a4e3dd696fff01f3ff3dcf1", "html_url": "https://github.com/rust-lang/rust/commit/cdca2c93c1949fcb9a4e3dd696fff01f3ff3dcf1"}, {"sha": "4c76465154408e2361699696e7d9f321bd60954c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c76465154408e2361699696e7d9f321bd60954c", "html_url": "https://github.com/rust-lang/rust/commit/4c76465154408e2361699696e7d9f321bd60954c"}], "stats": {"total": 157, "additions": 152, "deletions": 5}, "files": [{"sha": "e1308fb9cb894a901b5f73ec8e056faa11ccf47e", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7f5891184d55c3d01f57cf480d718e19f9f8268d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7f5891184d55c3d01f57cf480d718e19f9f8268d", "patch": "@@ -19,3 +19,4 @@ plugin = true\n compiletest_rs = \"*\"\n regex = \"*\"\n regex_macros = \"*\"\n+lazy_static = \"*\""}, {"sha": "31ac1e62be6fd7946a41c1b3995cb391596d5531", "filename": "src/collapsible_if.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=7f5891184d55c3d01f57cf480d718e19f9f8268d", "patch": "@@ -0,0 +1,80 @@\n+//! Checks for if expressions that contain only an if expression.\n+//!\n+//! For example, the lint would catch:\n+//!\n+//! ```\n+//! if x {\n+//!     if y {\n+//!         println!(\"Hello world\");\n+//!     }\n+//! }\n+//! ```\n+//!\n+//! This lint is **warn** by default\n+\n+use rustc::plugin::Registry;\n+use rustc::lint::*;\n+use rustc::middle::def::*;\n+use syntax::ast::*;\n+use syntax::ptr::P;\n+use syntax::codemap::{Span, Spanned};\n+use syntax::print::pprust::expr_to_string;\n+\n+declare_lint! {\n+    pub COLLAPSIBLE_IF,\n+    Warn,\n+    \"Warn on if expressions that can be collapsed\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct CollapsibleIf;\n+\n+impl LintPass for CollapsibleIf {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(COLLAPSIBLE_IF)\n+    }\n+    \n+    fn check_expr(&mut self, cx: &Context, e: &Expr) {\n+        if let ExprIf(ref check, ref then_block, None) = e.node {\n+            let expr = check_block(then_block);\n+            let expr = match expr {\n+                Some(e) => e,\n+                None => return\n+            };\n+            if let ExprIf(ref check_inner, _, None) = expr.node {\n+                let (check, check_inner) = (check_to_string(check), check_to_string(check_inner));\n+                cx.span_lint(COLLAPSIBLE_IF, e.span,\n+                             &format!(\"This if statement can be collapsed. Try: if {} && {}\", check, check_inner));\n+            }\n+\t\t    }\n+    }\n+}\n+\n+fn requires_brackets(e: &Expr) -> bool {\n+    match e.node {\n+        ExprBinary(Spanned {node: n, ..}, _, _) if n == BiEq => false,\n+        _ => true\n+    }\n+}\n+\n+fn check_to_string(e: &Expr) -> String {\n+    if requires_brackets(e) {\n+        format!(\"({})\", expr_to_string(e))\n+    } else {\n+        format!(\"{}\", expr_to_string(e))\n+    }\n+}\n+\n+fn check_block(b: &Block) -> Option<&P<Expr>> {\n+    if b.stmts.len() == 1 && b.expr.is_none() {\n+        let stmt = &b.stmts[0];\n+        return match stmt.node {\n+            StmtExpr(ref e, _) => Some(e),\n+            _ => None\n+        };\n+    }\n+    if let Some(ref e) = b.expr {\n+        return Some(e);\n+    }\n+    None\n+}"}, {"sha": "5d97efdf02c0c7b30f8e8b62a1a75f7b9f09c79d", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=7f5891184d55c3d01f57cf480d718e19f9f8268d", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::*;\n use misc::walk_ty;\n \n declare_lint!(pub LEN_ZERO, Warn,\n-              \"Warn on usage of double-mut refs, e.g. '&mut &mut ...'\");\n+              \"Warn when .is_empty() could be used instead of checking .len()\");\n \n declare_lint!(pub LEN_WITHOUT_IS_EMPTY, Warn,\n               \"Warn on traits and impls that have .len() but not .is_empty()\");"}, {"sha": "37cdf6a9c582558b97530394ddcfb5c62f5eb38b", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7f5891184d55c3d01f57cf480d718e19f9f8268d", "patch": "@@ -25,6 +25,7 @@ pub mod identity_op;\n pub mod mut_mut;\n pub mod len_zero;\n pub mod attrs;\n+pub mod collapsible_if;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -46,6 +47,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box len_zero::LenZero as LintPassObject);\n     reg.register_lint_pass(box misc::CmpOwned as LintPassObject);\n     reg.register_lint_pass(box attrs::AttrPass as LintPassObject);\n+    reg.register_lint_pass(box collapsible_if::CollapsibleIf as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -63,5 +65,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            len_zero::LEN_ZERO,\n                                            len_zero::LEN_WITHOUT_IS_EMPTY,\n                                            attrs::INLINE_ALWAYS,\n+                                           collapsible_if::COLLAPSIBLE_IF,\n                                            ]);\n }"}, {"sha": "a4c2d3932a3f03b3e7153e2380036b15f7bad8b7", "filename": "src/mut_mut.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5891184d55c3d01f57cf480d718e19f9f8268d/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=7f5891184d55c3d01f57cf480d718e19f9f8268d", "patch": "@@ -2,7 +2,7 @@ use syntax::ptr::P;\n use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n use rustc::middle::ty::{expr_ty, sty, ty_ptr, ty_rptr, mt};\n-use syntax::codemap::ExpnInfo;\n+use syntax::codemap::{BytePos, ExpnInfo, MacroFormat, Span};\n \n declare_lint!(pub MUT_MUT, Warn,\n               \"Warn on usage of double-mut refs, e.g. '&mut &mut ...'\");\n@@ -27,7 +27,7 @@ impl LintPass for MutMut {\n }\n \n fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n-\tif in_macro(info) { return; }\n+\tif in_macro(cx, info) { return; }\n \n \tfn unwrap_addr(expr : &Expr) -> Option<&Expr> {\n \t\tmatch expr.node {\n@@ -51,8 +51,14 @@ fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n \t})\n }\n \n-fn in_macro(info: Option<&ExpnInfo>) -> bool {\n-\tinfo.is_some()\n+fn in_macro(cx: &Context, opt_info: Option<&ExpnInfo>) -> bool {\n+\topt_info.map_or(false, |info| {\n+\t\tinfo.callee.span.map_or(true, |span| {\n+\t\t\tcx.sess().codemap().span_to_snippet(span).ok().map_or(true, |code| \n+\t\t\t\t!code.starts_with(\"macro_rules\")\n+\t\t\t)\n+\t\t})\n+\t})\n }\n \n fn unwrap_mut(ty : &Ty) -> Option<&Ty> {"}, {"sha": "3aa86c893c60ce6c7bb146de2aeba2a1a57dd74f", "filename": "tests/compile-fail/collapsible_if.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5891184d55c3d01f57cf480d718e19f9f8268d/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=7f5891184d55c3d01f57cf480d718e19f9f8268d", "patch": "@@ -0,0 +1,37 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(collapsible_if)]\n+fn main() {\n+    let x = \"hello\";\n+    let y = \"world\";\n+    if x == \"hello\" { //~ERROR This if statement can be collapsed\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    if x == \"hello\" || x == \"world\" { //~ERROR This if statement can be collapsed\n+        if y == \"world\" || y == \"hello\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    // Works because any if with an else statement cannot be collapsed.\n+    if x == \"hello\" {\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    } else {\n+        println!(\"Not Hello world\");\n+    }\n+\n+    if x == \"hello\" {\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        } else {\n+            println!(\"Hello something else\");\n+        }\n+    }\n+\n+}"}, {"sha": "32fdea3a3402f0f6774f1c1f6122760336ac25d2", "filename": "tests/mut_mut_macro.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/tests%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5891184d55c3d01f57cf480d718e19f9f8268d/tests%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmut_mut_macro.rs?ref=7f5891184d55c3d01f57cf480d718e19f9f8268d", "patch": "@@ -1,11 +1,31 @@\n #![feature(plugin)]\n #![plugin(clippy, regex_macros)]\n \n+#[macro_use]\n+extern crate lazy_static;\n extern crate regex;\n \n+use std::collections::HashMap;\n+\n #[test]\n #[deny(mut_mut)]\n fn test_regex() {\n \tlet pattern = regex!(r\"^(?P<level>[#]+)\\s(?P<title>.+)$\");\n \tassert!(pattern.is_match(\"# headline\"));\n }\n+\n+#[test]\n+#[deny(mut_mut)]\n+#[allow(unused_variables, unused_mut)]\n+fn test_lazy_static() {\n+\tlazy_static! {\n+\t\tstatic ref MUT_MAP : HashMap<usize, &'static str> = {\n+\t\t\tlet mut m = HashMap::new();\n+\t\t\tlet mut zero = &mut &mut \"zero\";\n+\t\t\tm.insert(0, \"zero\");\n+\t\t\tm\n+\t\t};\n+\t\tstatic ref MUT_COUNT : usize = MUT_MAP.len();\n+\t}\n+\tassert!(*MUT_COUNT == 1);\n+}"}]}