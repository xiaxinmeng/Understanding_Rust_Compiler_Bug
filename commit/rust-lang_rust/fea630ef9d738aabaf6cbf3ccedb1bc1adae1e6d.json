{"sha": "fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYTYzMGVmOWQ3MzhhYWJhZjZjYmYzY2NlZGIxYmMxYWRhZTFlNmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-19T20:33:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-20T17:28:10Z"}, "message": "Tweak path parsing logic", "tree": {"sha": "ffb16874f8f8c6b7ccf16239bfd1a58f5cfe7f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb16874f8f8c6b7ccf16239bfd1a58f5cfe7f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "html_url": "https://github.com/rust-lang/rust/commit/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ff4ca2948301f59b6a6eab14234d005378859a", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ff4ca2948301f59b6a6eab14234d005378859a", "html_url": "https://github.com/rust-lang/rust/commit/65ff4ca2948301f59b6a6eab14234d005378859a"}], "stats": {"total": 129, "additions": 93, "deletions": 36}, "files": [{"sha": "463ec334cc567a07d611d55242588a05c6d1a9a4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -3620,7 +3620,7 @@ impl<'a> Parser<'a> {\n                 // Parse box pat\n                 let subpat = self.parse_pat()?;\n                 pat = PatKind::Box(subpat);\n-            } else if self.token.is_ident() && self.token.is_path_start() &&\n+            } else if self.token.is_ident() && !self.token.is_any_keyword() &&\n                       self.look_ahead(1, |t| match *t {\n                           token::OpenDelim(token::Paren) | token::OpenDelim(token::Brace) |\n                           token::DotDotDot | token::ModSep | token::Not => false,\n@@ -3871,6 +3871,11 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn is_union_item(&mut self) -> bool {\n+        self.token.is_keyword(keywords::Union) &&\n+        self.look_ahead(1, |t| t.is_ident() && !t.is_any_keyword())\n+    }\n+\n     fn parse_stmt_without_recovery(&mut self,\n                                    macro_legacy_warnings: bool)\n                                    -> PResult<'a, Option<Stmt>> {\n@@ -3885,10 +3890,10 @@ impl<'a> Parser<'a> {\n                 node: StmtKind::Local(self.parse_local(attrs.into())?),\n                 span: mk_sp(lo, self.prev_span.hi),\n             }\n-        } else if self.token.is_path_start() && self.token != token::Lt && {\n-            !self.check_keyword(keywords::Union) ||\n-            self.look_ahead(1, |t| *t == token::Not || *t == token::ModSep)\n-        } {\n+        // Starts like a simple path, but not a union item.\n+        } else if self.token.is_path_start() &&\n+                  !self.token.is_qpath_start() &&\n+                  !self.is_union_item() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n@@ -4599,6 +4604,10 @@ impl<'a> Parser<'a> {\n             token::Ident(ident) => { this.bump(); codemap::respan(this.prev_span, ident) }\n             _ => unreachable!()\n         };\n+        let isolated_self = |this: &mut Self, n| {\n+            this.look_ahead(n, |t| t.is_keyword(keywords::SelfValue)) &&\n+            this.look_ahead(n + 1, |t| t != &token::ModSep)\n+        };\n \n         // Parse optional self parameter of a method.\n         // Only a limited set of initial token sequences is considered self parameters, anything\n@@ -4611,22 +4620,22 @@ impl<'a> Parser<'a> {\n                 // &'lt self\n                 // &'lt mut self\n                 // &not_self\n-                if self.look_ahead(1, |t| t.is_keyword(keywords::SelfValue)) {\n+                if isolated_self(self, 1) {\n                     self.bump();\n                     (SelfKind::Region(None, Mutability::Immutable), expect_ident(self))\n                 } else if self.look_ahead(1, |t| t.is_keyword(keywords::Mut)) &&\n-                          self.look_ahead(2, |t| t.is_keyword(keywords::SelfValue)) {\n+                          isolated_self(self, 2) {\n                     self.bump();\n                     self.bump();\n                     (SelfKind::Region(None, Mutability::Mutable), expect_ident(self))\n                 } else if self.look_ahead(1, |t| t.is_lifetime()) &&\n-                          self.look_ahead(2, |t| t.is_keyword(keywords::SelfValue)) {\n+                          isolated_self(self, 2) {\n                     self.bump();\n                     let lt = self.parse_lifetime()?;\n                     (SelfKind::Region(Some(lt), Mutability::Immutable), expect_ident(self))\n                 } else if self.look_ahead(1, |t| t.is_lifetime()) &&\n                           self.look_ahead(2, |t| t.is_keyword(keywords::Mut)) &&\n-                          self.look_ahead(3, |t| t.is_keyword(keywords::SelfValue)) {\n+                          isolated_self(self, 3) {\n                     self.bump();\n                     let lt = self.parse_lifetime()?;\n                     self.bump();\n@@ -4641,12 +4650,12 @@ impl<'a> Parser<'a> {\n                 // *mut self\n                 // *not_self\n                 // Emit special error for `self` cases.\n-                if self.look_ahead(1, |t| t.is_keyword(keywords::SelfValue)) {\n+                if isolated_self(self, 1) {\n                     self.bump();\n                     self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n                     (SelfKind::Value(Mutability::Immutable), expect_ident(self))\n                 } else if self.look_ahead(1, |t| t.is_mutability()) &&\n-                          self.look_ahead(2, |t| t.is_keyword(keywords::SelfValue)) {\n+                          isolated_self(self, 2) {\n                     self.bump();\n                     self.bump();\n                     self.span_err(self.span, \"cannot pass `self` by raw pointer\");\n@@ -4656,7 +4665,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n             token::Ident(..) => {\n-                if self.token.is_keyword(keywords::SelfValue) {\n+                if isolated_self(self, 0) {\n                     // self\n                     // self: TYPE\n                     let eself_ident = expect_ident(self);\n@@ -4667,7 +4676,7 @@ impl<'a> Parser<'a> {\n                         (SelfKind::Value(Mutability::Immutable), eself_ident)\n                     }\n                 } else if self.token.is_keyword(keywords::Mut) &&\n-                        self.look_ahead(1, |t| t.is_keyword(keywords::SelfValue)) {\n+                          isolated_self(self, 1) {\n                     // mut self\n                     // mut self: TYPE\n                     self.bump();\n@@ -5958,8 +5967,7 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n-        if self.check_keyword(keywords::Union) &&\n-                self.look_ahead(1, |t| t.is_ident() && !t.is_any_keyword()) {\n+        if self.is_union_item() {\n             // UNION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) = self.parse_item_union()?;"}, {"sha": "4d0da660302ae8c40e655e1d3f30bd5a6b9bb82e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -159,10 +159,8 @@ impl Token {\n     /// Returns `true` if the token can appear at the start of an expression.\n     pub fn can_begin_expr(&self) -> bool {\n         match *self {\n-            OpenDelim(_)                => true,\n+            OpenDelim(..)               => true,\n             Ident(..)                   => true,\n-            Underscore                  => true,\n-            Tilde                       => true,\n             Literal(..)                 => true,\n             Not                         => true,\n             BinOp(Minus)                => true,\n@@ -172,6 +170,7 @@ impl Token {\n             OrOr                        => true, // in lambda syntax\n             AndAnd                      => true, // double borrow\n             DotDot | DotDotDot          => true, // range notation\n+            Lt | BinOp(Shl)             => true, // associated path\n             ModSep                      => true,\n             Interpolated(NtExpr(..))    => true,\n             Interpolated(NtIdent(..))   => true,\n@@ -236,8 +235,12 @@ impl Token {\n         self.is_keyword(keywords::Const)\n     }\n \n+    pub fn is_qpath_start(&self) -> bool {\n+        self == &Lt || self == &BinOp(Shl)\n+    }\n+\n     pub fn is_path_start(&self) -> bool {\n-        self == &ModSep || self == &Lt || self.is_path() ||\n+        self == &ModSep || self.is_qpath_start() || self.is_path() ||\n         self.is_path_segment_keyword() || self.is_ident() && !self.is_any_keyword()\n     }\n "}, {"sha": "6bc110239cdbf157c2191f1c72690bba4cb69edb", "filename": "src/test/compile-fail/associated-path-shl.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that associated paths starting with `<<` are successfully parsed.\n+\n+fn main() {\n+    let _: <<A>::B>::C; //~ ERROR type name `A` is undefined or not in scope\n+    let _ = <<A>::B>::C; //~ ERROR type name `A` is undefined or not in scope\n+    let <<A>::B>::C; //~ ERROR type name `A` is undefined or not in scope\n+    let 0 ... <<A>::B>::C; //~ ERROR type name `A` is undefined or not in scope\n+                           //~^ ERROR only char and numeric types are allowed in range patterns\n+    <<A>::B>::C; //~ ERROR type name `A` is undefined or not in scope\n+}"}, {"sha": "650874711a669f47b28ecd0993cb657a68fbe58b", "filename": "src/test/compile-fail/keyword-self-as-identifier.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-self-as-identifier.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n fn main() {\n-    let Self = \"foo\"; //~ error: expected identifier, found keyword `Self`\n+    let Self = \"foo\"; //~ ERROR unresolved unit struct/variant or constant `Self`\n }", "previous_filename": "src/test/parse-fail/keyword-self-as-identifier.rs"}, {"sha": "531705563e2e070ccfaacb82e5d01963d400a1f8", "filename": "src/test/compile-fail/keyword-super-as-identifier.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fkeyword-super-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fkeyword-super-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-super-as-identifier.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n fn main() {\n-    let super = \"foo\"; //~ error: expected identifier, found keyword `super`\n+    let super = \"foo\"; //~ ERROR unresolved unit struct/variant or constant `super`\n }", "previous_filename": "src/test/parse-fail/keyword-super-as-identifier.rs"}, {"sha": "9ac9e800c843bb4218cf601c41f09046b7f8a970", "filename": "src/test/compile-fail/keyword-super.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fkeyword-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fkeyword-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword-super.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n fn main() {\n-    let super: isize; //~ ERROR expected identifier, found keyword `super`\n+    let super: isize; //~ ERROR unresolved unit struct/variant or constant `super`\n }", "previous_filename": "src/test/parse-fail/keyword-super.rs"}, {"sha": "9753014e7810ae49c17a1b4aeddde670c7711e8a", "filename": "src/test/compile-fail/self-vs-path-ambiguity.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fself-vs-path-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fself-vs-path-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself-vs-path-ambiguity.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that `self::foo` is parsed as a general pattern and not a self argument.\n+\n+struct S;\n+\n+impl S {\n+    fn f(self::S: S) {}\n+    fn g(&self::S: &S) {}\n+    fn h(&mut self::S: &mut S) {}\n+    fn i(&'a self::S: &S) {} //~ ERROR unexpected lifetime `'a` in pattern\n+                             //~^ ERROR expected one of `)` or `mut`, found `'a`\n+}\n+\n+fn main() {}"}, {"sha": "118d3d8a0bec224027ad0e702b6202b11059ca12", "filename": "src/test/compile-fail/self_type_keyword-2.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fself_type_keyword-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fself_type_keyword-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself_type_keyword-2.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -10,4 +10,14 @@\n \n use self::Self as Foo; //~ ERROR unresolved import `self::Self`\n \n-pub fn main() {}\n+pub fn main() {\n+    let Self = 5;\n+    //~^ ERROR unresolved unit struct/variant or constant `Self`\n+\n+    match 15 {\n+        Self => (),\n+        //~^ ERROR unresolved unit struct/variant or constant `Self`\n+        Foo { x: Self } => (),\n+        //~^ ERROR unresolved unit struct/variant or constant `Self`\n+    }\n+}"}, {"sha": "db6bcc611b823cee3835b74f38019a2ef196012d", "filename": "src/test/compile-fail/self_type_keyword.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -17,12 +17,7 @@ struct Bar<'Self>;\n //~^ ERROR lifetimes cannot use keyword names\n \n pub fn main() {\n-    let Self = 5;\n-    //~^ ERROR expected identifier, found keyword `Self`\n-\n     match 15 {\n-        Self => (),\n-        //~^ ERROR expected identifier, found keyword `Self`\n         ref Self => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n         mut Self => (),\n@@ -31,8 +26,6 @@ pub fn main() {\n         //~^ ERROR expected identifier, found keyword `Self`\n         Self!() => (),\n         //~^ ERROR macro undefined: 'Self!'\n-        Foo { x: Self } => (),\n-        //~^ ERROR expected identifier, found keyword `Self`\n         Foo { Self } => (),\n         //~^ ERROR expected identifier, found keyword `Self`\n     }"}, {"sha": "0f8c996bebda8bec170b9709a6ab0f6b711d6c82", "filename": "src/test/run-pass/union/union-backcomp.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Frun-pass%2Funion%2Funion-backcomp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d/src%2Ftest%2Frun-pass%2Funion%2Funion-backcomp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-backcomp.rs?ref=fea630ef9d738aabaf6cbf3ccedb1bc1adae1e6d", "patch": "@@ -10,6 +10,12 @@\n \n #![feature(untagged_unions)]\n \n+macro_rules! union {\n+    () => (struct S;)\n+}\n+\n+union!();\n+\n fn union() {}\n \n fn main() {"}]}