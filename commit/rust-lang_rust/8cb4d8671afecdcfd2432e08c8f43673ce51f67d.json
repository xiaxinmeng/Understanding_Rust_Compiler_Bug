{"sha": "8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYjRkODY3MWFmZWNkY2ZkMjQzMmUwOGM4ZjQzNjczY2U1MWY2N2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-17T20:23:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-17T21:03:32Z"}, "message": "std: Clean up primitive integer modules\n\nAll of the modules in the standard library were just straight reexports of those\nin libcore, so remove all the \"macro modules\" from the standard library and just\nreexport what's in core directly.", "tree": {"sha": "c42f8eb09400c6b9d5004d22155299eb0be03410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c42f8eb09400c6b9d5004d22155299eb0be03410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "html_url": "https://github.com/rust-lang/rust/commit/8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "html_url": "https://github.com/rust-lang/rust/commit/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4"}], "stats": {"total": 400, "additions": 86, "deletions": 314}, "files": [{"sha": "4054497941797140ccc4fa1c9d7c8496e8efe446", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 16-bits integers (`i16` type)\n+//! The 16-bit signed integer type.\n+//!\n+//! *[See also the `i16` primitive type](../primitive.i16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "5d2ade8d8e0e93b3dcd0e0adb539e48a9391a8e3", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 32-bits integers (`i32` type)\n+//! The 32-bit signed integer type.\n+//!\n+//! *[See also the `i32` primitive type](../primitive.i32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "b1d43a3b83872a79b2dd55de5c2ca2e0276674c9", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 64-bits integers (`i64` type)\n+//! The 64-bit signed integer type.\n+//!\n+//! *[See also the `i64` primitive type](../primitive.i64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "ee003d92b28235c47e366624cd6410722faa0548", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for signed 8-bits integers (`i8` type)\n+//! The 8-bit signed integer type.\n+//!\n+//! *[See also the `i8` primitive type](../primitive.i8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "034a5c0eb89d4388c16be66883a5baff71bf84c8", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for pointer-sized signed integers (`isize` type)\n+//! The pointer-sized signed integer type.\n+//!\n+//! *[See also the `isize` primitive type](../primitive.isize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "68e50e8a400ea021a472b0542c64509c7eaa976c", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 16-bits integers (`u16` type)\n+//! The 16-bit unsigned integer type.\n+//!\n+//! *[See also the `u16` primitive type](../primitive.u16.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "c1ee96b363c27783e016f113c6a59b54e0a3f651", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 32-bits integers (`u32` type)\n+//! The 32-bit unsigned integer type.\n+//!\n+//! *[See also the `u32` primitive type](../primitive.u32.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "c0d18d850a796d9a841c17f85c448a42f5becb47", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 64-bits integer (`u64` type)\n+//! The 64-bit unsigned integer type.\n+//!\n+//! *[See also the `u64` primitive type](../primitive.u64.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "a60c480d810ea4e20be74b5add6271c9e95c7760", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for unsigned 8-bits integers (`u8` type)\n+//! The 8-bit unsigned integer type.\n+//!\n+//! *[See also the `u8` primitive type](../primitive.u8.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "70e790106e1c6706e4e96f8cb9ce4a858fae2201", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for pointer-sized unsigned integers (`usize` type)\n+//! The pointer-sized unsigned integer type.\n+//!\n+//! *[See also the `usize` primitive type](../primitive.usize.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "6238c6d43e353e033b3ee54314518e9fe38ee5ab", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -14,6 +14,7 @@ mod tests {\n     use core::$T_i::*;\n     use num;\n     use core::ops::{BitOr, BitAnd, BitXor, Shl, Shr, Not};\n+    use std::str;\n \n     #[test]\n     fn test_overflows() {\n@@ -121,6 +122,35 @@ mod tests {\n         assert!((10 as $T).checked_div(2) == Some(5));\n         assert!((5 as $T).checked_div(0) == None);\n     }\n-}\n+\n+    fn from_str<T: FromStr>(t: &str) -> Option<T> {\n+        FromStr::from_str(t).ok()\n+    }\n+\n+    #[test]\n+    pub fn test_from_str() {\n+        assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n+        assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));\n+        assert_eq!(from_str::<$T>(\"10\"), Some(10 as $T));\n+        assert_eq!(from_str::<u32>(\"123456789\"), Some(123456789 as u32));\n+        assert_eq!(from_str::<$T>(\"00100\"), Some(100 as $T));\n+\n+        assert_eq!(from_str::<$T>(\"\"), None);\n+        assert_eq!(from_str::<$T>(\" \"), None);\n+        assert_eq!(from_str::<$T>(\"x\"), None);\n+    }\n+\n+    #[test]\n+    pub fn test_parse_bytes() {\n+        assert_eq!($T::from_str_radix(\"123\", 10), Ok(123 as $T));\n+        assert_eq!($T::from_str_radix(\"1001\", 2), Ok(9 as $T));\n+        assert_eq!($T::from_str_radix(\"123\", 8), Ok(83 as $T));\n+        assert_eq!(u16::from_str_radix(\"123\", 16), Ok(291 as u16));\n+        assert_eq!(u16::from_str_radix(\"ffff\", 16), Ok(65535 as u16));\n+        assert_eq!($T::from_str_radix(\"z\", 36), Ok(35 as $T));\n+\n+        assert_eq!($T::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n+        assert_eq!($T::from_str_radix(\"_\", 2).ok(), None::<$T>);\n+    }\n \n )}"}, {"sha": "8fed380a5b46865cc808a4ef7289a0c31c642ddb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -253,7 +253,6 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-#![allow(trivial_casts)]\n #![deny(missing_docs)]\n \n #[cfg(test)] extern crate test;\n@@ -263,7 +262,7 @@\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n // add a new crate name so we can attach the reexports to it.\n #[macro_reexport(assert, assert_eq, debug_assert, debug_assert_eq,\n-    unreachable, unimplemented, write, writeln)]\n+                 unreachable, unimplemented, write, writeln)]\n extern crate core as __core;\n \n #[macro_use]\n@@ -307,7 +306,6 @@ pub use core_collections::fmt;\n pub use core_collections::slice;\n pub use core_collections::str;\n pub use core_collections::string;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::vec;\n \n pub use rustc_unicode::char;\n@@ -326,32 +324,21 @@ pub mod prelude;\n \n /* Primitive types */\n \n-// NB: slice and str are primitive types too, but their module docs + primitive doc pages\n-// are inlined from the public re-exports of core_collections::{slice, str} above.\n-\n-#[path = \"num/float_macros.rs\"]\n-#[macro_use]\n-mod float_macros;\n-\n-#[path = \"num/int_macros.rs\"]\n-#[macro_use]\n-mod int_macros;\n-\n-#[path = \"num/uint_macros.rs\"]\n-#[macro_use]\n-mod uint_macros;\n-\n-#[path = \"num/isize.rs\"]  pub mod isize;\n-#[path = \"num/i8.rs\"]   pub mod i8;\n-#[path = \"num/i16.rs\"]  pub mod i16;\n-#[path = \"num/i32.rs\"]  pub mod i32;\n-#[path = \"num/i64.rs\"]  pub mod i64;\n-\n-#[path = \"num/usize.rs\"] pub mod usize;\n-#[path = \"num/u8.rs\"]   pub mod u8;\n-#[path = \"num/u16.rs\"]  pub mod u16;\n-#[path = \"num/u32.rs\"]  pub mod u32;\n-#[path = \"num/u64.rs\"]  pub mod u64;\n+// NB: slice and str are primitive types too, but their module docs + primitive\n+// doc pages are inlined from the public re-exports of core_collections::{slice,\n+// str} above.\n+\n+pub use core::isize;\n+pub use core::i8;\n+pub use core::i16;\n+pub use core::i32;\n+pub use core::i64;\n+\n+pub use core::usize;\n+pub use core::u8;\n+pub use core::u16;\n+pub use core::u32;\n+pub use core::u64;\n \n #[path = \"num/f32.rs\"]   pub mod f32;\n #[path = \"num/f64.rs\"]   pub mod f64;"}, {"sha": "53a14c2b21b174c8a7ef728c5a7290e86c80dbfa", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb4d8671afecdcfd2432e08c8f43673ce51f67d/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8cb4d8671afecdcfd2432e08c8f43673ce51f67d", "patch": "@@ -197,6 +197,15 @@ macro_rules! log {\n     )\n }\n \n+#[cfg(test)]\n+macro_rules! assert_approx_eq {\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+}\n+\n /// Built-in macros to the compiler itself.\n ///\n /// These macros do not have any corresponding definition with a `macro_rules!`"}, {"sha": "16ad21a07d700acb842a19973f9ff4d3b98cb3fd", "filename": "src/libstd/num/float_macros.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(hidden)]\n-\n-macro_rules! assert_approx_eq {\n-    ($a:expr, $b:expr) => ({\n-        let (a, b) = (&$a, &$b);\n-        assert!((*a - *b).abs() < 1.0e-6,\n-                \"{} is not approximately equal to {}\", *a, *b);\n-    })\n-}"}, {"sha": "eb53e0821f2a6f44fdaed228d074e35720262369", "filename": "src/libstd/num/i16.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 16-bit signed integer type.\n-//!\n-//! *[See also the `i16` primitive type](../primitive.i16.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i16::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i16 }"}, {"sha": "3c9eedf38c7cd5030236fef6b18e97c3d9e835ab", "filename": "src/libstd/num/i32.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 32-bit signed integer type.\n-//!\n-//! *[See also the `i32` primitive type](../primitive.i32.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i32::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i32 }"}, {"sha": "2df7478a820bf94df5299d1f08572ff00bc0fc4c", "filename": "src/libstd/num/i64.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 64-bit signed integer type.\n-//!\n-//! *[See also the `i64` primitive type](../primitive.i64.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i64::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i64 }"}, {"sha": "4e4bee8a791e45dce28d0dc9a12953dda4532baa", "filename": "src/libstd/num/i8.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 8-bit signed integer type.\n-//!\n-//! *[See also the `i8` primitive type](../primitive.i8.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::i8::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { i8 }"}, {"sha": "178fad09f9881a4d4c84a0c005f4d8141b44a96e", "filename": "src/libstd/num/int_macros.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(hidden)]\n-\n-macro_rules! int_module { ($T:ty) => (\n-\n-) }"}, {"sha": "d46b6b80d0d25d91812ebaabf2fda216541decd8", "filename": "src/libstd/num/isize.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fisize.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The pointer-sized signed integer type.\n-//!\n-//! *[See also the `isize` primitive type](../primitive.isize.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::isize::{BITS, BYTES, MIN, MAX};\n-\n-int_module! { isize }"}, {"sha": "893618aeffafd2d32419c7930823049415a1406b", "filename": "src/libstd/num/u16.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 16-bit unsigned integer type.\n-//!\n-//! *[See also the `u16` primitive type](../primitive.u16.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u16::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u16 }"}, {"sha": "2da25519696579ca0c72251c232ee3f494e2a7a9", "filename": "src/libstd/num/u32.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 32-bit unsigned integer type.\n-//!\n-//! *[See also the `u32` primitive type](../primitive.u32.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u32::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u32 }"}, {"sha": "26a8b5373940306b5d3f4815ce8ebddbaff2a379", "filename": "src/libstd/num/u64.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 64-bit unsigned integer type.\n-//!\n-//! *[See also the `u64` primitive type](../primitive.u64.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u64::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u64 }"}, {"sha": "385754b93a04b69668dfa18970c05e7070695e24", "filename": "src/libstd/num/u8.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The 8-bit unsigned integer type.\n-//!\n-//! *[See also the `u8` primitive type](../primitive.u8.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::u8::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { u8 }"}, {"sha": "902c78c0a46f869e9f8306783fff25f53c0e7495", "filename": "src/libstd/num/uint_macros.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(hidden)]\n-\n-macro_rules! uint_module { ($T:ident) => (\n-\n-#[cfg(test)]\n-mod tests {\n-    use prelude::v1::*;\n-\n-    fn from_str<T: ::str::FromStr>(t: &str) -> Option<T> {\n-        ::str::FromStr::from_str(t).ok()\n-    }\n-\n-    #[test]\n-    pub fn test_from_str() {\n-        assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n-        assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));\n-        assert_eq!(from_str::<$T>(\"10\"), Some(10 as $T));\n-        assert_eq!(from_str::<u32>(\"123456789\"), Some(123456789 as u32));\n-        assert_eq!(from_str::<$T>(\"00100\"), Some(100 as $T));\n-\n-        assert_eq!(from_str::<$T>(\"\"), None);\n-        assert_eq!(from_str::<$T>(\" \"), None);\n-        assert_eq!(from_str::<$T>(\"x\"), None);\n-    }\n-\n-    #[test]\n-    pub fn test_parse_bytes() {\n-        assert_eq!($T::from_str_radix(\"123\", 10), Ok(123 as $T));\n-        assert_eq!($T::from_str_radix(\"1001\", 2), Ok(9 as $T));\n-        assert_eq!($T::from_str_radix(\"123\", 8), Ok(83 as $T));\n-        assert_eq!(u16::from_str_radix(\"123\", 16), Ok(291 as u16));\n-        assert_eq!(u16::from_str_radix(\"ffff\", 16), Ok(65535 as u16));\n-        assert_eq!($T::from_str_radix(\"z\", 36), Ok(35 as $T));\n-\n-        assert_eq!($T::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n-        assert_eq!($T::from_str_radix(\"_\", 2).ok(), None::<$T>);\n-    }\n-}\n-\n-) }"}, {"sha": "6960ba3b8296bb2defcad4167cb755c5a4da2550", "filename": "src/libstd/num/usize.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4/src%2Flibstd%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fusize.rs?ref=47ea0cfb6bd250c970e3a61d62bfa1b1c7bb27d4", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The pointer-sized unsigned integer type.\n-//!\n-//! *[See also the `usize` primitive type](../primitive.usize.html).*\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-pub use core::usize::{BITS, BYTES, MIN, MAX};\n-\n-uint_module! { usize }"}]}