{"sha": "ec645f2d75d2939a2f64959019dd916750f1ec00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNjQ1ZjJkNzVkMjkzOWEyZjY0OTU5MDE5ZGQ5MTY3NTBmMWVjMDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-20T21:26:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-20T21:26:25Z"}, "message": "Merge #4066\n\n4066: Fix restart missing arguments in proc-macro-srv r=edwin0cheng a=edwin0cheng\n\ncc @Veetaha \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "561d2f7d88aa6019a44cd20c2ecdadaff344e033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/561d2f7d88aa6019a44cd20c2ecdadaff344e033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec645f2d75d2939a2f64959019dd916750f1ec00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJenhOBCRBK7hj4Ov3rIwAAdHIIACnCCoDxCfXSweoSmblw9qdC\nSxLxetVgFKhLBaBJWrPW2tu60+dR6nyhXQS1lVxUTJjhIppHRazBMYe8NgKvKBT2\nbAT6+ruvE3yM6nqJBfnamlOjXD8lXXj48wKn9BT3cZUSMzgIEaHmryz55l2KpEGF\n2Z8z66s5WL9WVhojOUGNUoeJP/7op73YChOFSYjh0BcEq9/kVWcTv2WT+tUIfY4C\nlUGXAAJA61eSTkWwhGpq84iSsFaS/30yX9/Afu6fy1nGSOiH+MHVN4DLA9p/m8uh\n3FlTX3Hg6DVcJ3WRzN2q+zU+SbWvU4ufswmDab+4uoWo4ycY+PHLcz5Vs1Ebqmc=\n=q7D6\n-----END PGP SIGNATURE-----\n", "payload": "tree 561d2f7d88aa6019a44cd20c2ecdadaff344e033\nparent 0ad6b6d40763f67cc727d000f616f88a47f43d41\nparent ce382e6a79edf9c00d4e7d7c3834cde7577e6517\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587417985 +0000\ncommitter GitHub <noreply@github.com> 1587417985 +0000\n\nMerge #4066\n\n4066: Fix restart missing arguments in proc-macro-srv r=edwin0cheng a=edwin0cheng\n\ncc @Veetaha \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec645f2d75d2939a2f64959019dd916750f1ec00", "html_url": "https://github.com/rust-lang/rust/commit/ec645f2d75d2939a2f64959019dd916750f1ec00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec645f2d75d2939a2f64959019dd916750f1ec00/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad6b6d40763f67cc727d000f616f88a47f43d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad6b6d40763f67cc727d000f616f88a47f43d41", "html_url": "https://github.com/rust-lang/rust/commit/0ad6b6d40763f67cc727d000f616f88a47f43d41"}, {"sha": "ce382e6a79edf9c00d4e7d7c3834cde7577e6517", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce382e6a79edf9c00d4e7d7c3834cde7577e6517", "html_url": "https://github.com/rust-lang/rust/commit/ce382e6a79edf9c00d4e7d7c3834cde7577e6517"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "673f80a7ab02aed8aedb0c79bbe14194cf60de00", "filename": "crates/ra_proc_macro/src/process.rs", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/ec645f2d75d2939a2f64959019dd916750f1ec00/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec645f2d75d2939a2f64959019dd916750f1ec00/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs?ref=ec645f2d75d2939a2f64959019dd916750f1ec00", "patch": "@@ -9,7 +9,7 @@ use crate::rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTas\n use io::{BufRead, BufReader};\n use std::{\n     convert::{TryFrom, TryInto},\n-    ffi::OsStr,\n+    ffi::{OsStr, OsString},\n     io::{self, Write},\n     path::{Path, PathBuf},\n     process::{Child, Command, Stdio},\n@@ -28,56 +28,6 @@ pub(crate) struct ProcMacroProcessThread {\n     handle: jod_thread::JoinHandle<()>,\n }\n \n-struct Task {\n-    req: Request,\n-    result_tx: Sender<Option<Response>>,\n-}\n-\n-struct Process {\n-    path: PathBuf,\n-    child: Child,\n-}\n-\n-impl Drop for Process {\n-    fn drop(&mut self) {\n-        let _ = self.child.kill();\n-    }\n-}\n-\n-impl Process {\n-    fn run(\n-        process_path: PathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n-    ) -> io::Result<Process> {\n-        let child = Command::new(&process_path)\n-            .args(args)\n-            .stdin(Stdio::piped())\n-            .stdout(Stdio::piped())\n-            .stderr(Stdio::null())\n-            .spawn()?;\n-\n-        Ok(Process { path: process_path, child })\n-    }\n-\n-    fn restart(&mut self) -> io::Result<()> {\n-        let _ = self.child.kill();\n-        self.child = Command::new(&self.path)\n-            .stdin(Stdio::piped())\n-            .stdout(Stdio::piped())\n-            .stderr(Stdio::null())\n-            .spawn()?;\n-        Ok(())\n-    }\n-\n-    fn stdio(&mut self) -> Option<(impl Write, impl BufRead)> {\n-        let stdin = self.child.stdin.take()?;\n-        let stdout = self.child.stdout.take()?;\n-        let read = BufReader::new(stdout);\n-\n-        Some((stdin, read))\n-    }\n-}\n-\n impl ProcMacroProcessSrv {\n     pub fn run(\n         process_path: PathBuf,\n@@ -192,6 +142,57 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n     }\n }\n \n+struct Task {\n+    req: Request,\n+    result_tx: Sender<Option<Response>>,\n+}\n+\n+struct Process {\n+    path: PathBuf,\n+    args: Vec<OsString>,\n+    child: Child,\n+}\n+\n+impl Drop for Process {\n+    fn drop(&mut self) {\n+        let _ = self.child.kill();\n+    }\n+}\n+\n+impl Process {\n+    fn run(\n+        path: PathBuf,\n+        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+    ) -> io::Result<Process> {\n+        let args = args.into_iter().map(|s| s.as_ref().into()).collect();\n+        let child = mk_child(&path, &args)?;\n+        Ok(Process { path, args, child })\n+    }\n+\n+    fn restart(&mut self) -> io::Result<()> {\n+        let _ = self.child.kill();\n+        self.child = mk_child(&self.path, &self.args)?;\n+        Ok(())\n+    }\n+\n+    fn stdio(&mut self) -> Option<(impl Write, impl BufRead)> {\n+        let stdin = self.child.stdin.take()?;\n+        let stdout = self.child.stdout.take()?;\n+        let read = BufReader::new(stdout);\n+\n+        Some((stdin, read))\n+    }\n+}\n+\n+fn mk_child(path: &Path, args: impl IntoIterator<Item = impl AsRef<OsStr>>) -> io::Result<Child> {\n+    Command::new(&path)\n+        .args(args)\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .stderr(Stdio::null())\n+        .spawn()\n+}\n+\n fn send_request(\n     mut writer: &mut impl Write,\n     mut reader: &mut impl BufRead,"}]}