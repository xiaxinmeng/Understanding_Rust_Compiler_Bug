{"sha": "48270044b04750477da7276a8845ceb06d7b2185", "node_id": "C_kwDOAAsO6NoAKDQ4MjcwMDQ0YjA0NzUwNDc3ZGE3Mjc2YTg4NDVjZWIwNmQ3YjIxODU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-08T04:02:50Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-08T05:16:48Z"}, "message": "Move has_structural_eq_impls provider to rustc_ty_utils", "tree": {"sha": "f49468e1ecc81bf0b8ad68152ed053ff7ce97061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f49468e1ecc81bf0b8ad68152ed053ff7ce97061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48270044b04750477da7276a8845ceb06d7b2185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48270044b04750477da7276a8845ceb06d7b2185", "html_url": "https://github.com/rust-lang/rust/commit/48270044b04750477da7276a8845ceb06d7b2185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48270044b04750477da7276a8845ceb06d7b2185/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "html_url": "https://github.com/rust-lang/rust/commit/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "6d731ac3f7595b517fa5f472f217803112de0e54", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=48270044b04750477da7276a8845ceb06d7b2185", "patch": "@@ -922,7 +922,6 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     object_safety::provide(providers);\n-    structural_match::provide(providers);\n     *providers = ty::query::Providers {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,"}, {"sha": "4dc08e0f9dab0da99be2c049b08e755c9f7c5b04", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=48270044b04750477da7276a8845ceb06d7b2185", "patch": "@@ -1,10 +1,5 @@\n-use crate::infer::{InferCtxt, TyCtxtInferExt};\n-use crate::traits::{ObligationCause, ObligationCtxt};\n-\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::lang_items::LangItem;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_span::Span;\n use std::ops::ControlFlow;\n@@ -59,41 +54,6 @@ pub fn search_for_adt_const_param_violation<'tcx>(\n         .break_value()\n }\n \n-/// This method returns true if and only if `adt_ty` itself has been marked as\n-/// eligible for structural-match: namely, if it implements both\n-/// `StructuralPartialEq` and `StructuralEq` (which are respectively injected by\n-/// `#[derive(PartialEq)]` and `#[derive(Eq)]`).\n-///\n-/// Note that this does *not* recursively check if the substructure of `adt_ty`\n-/// implements the traits.\n-fn type_marked_structural<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n-    adt_ty: Ty<'tcx>,\n-    cause: ObligationCause<'tcx>,\n-) -> bool {\n-    let ocx = ObligationCtxt::new(infcx);\n-    // require `#[derive(PartialEq)]`\n-    let structural_peq_def_id =\n-        infcx.tcx.require_lang_item(LangItem::StructuralPeq, Some(cause.span));\n-    ocx.register_bound(cause.clone(), ty::ParamEnv::empty(), adt_ty, structural_peq_def_id);\n-    // for now, require `#[derive(Eq)]`. (Doing so is a hack to work around\n-    // the type `for<'a> fn(&'a ())` failing to implement `Eq` itself.)\n-    let structural_teq_def_id =\n-        infcx.tcx.require_lang_item(LangItem::StructuralTeq, Some(cause.span));\n-    ocx.register_bound(cause, ty::ParamEnv::empty(), adt_ty, structural_teq_def_id);\n-\n-    // We deliberately skip *reporting* fulfillment errors (via\n-    // `report_fulfillment_errors`), for two reasons:\n-    //\n-    // 1. The error messages would mention `std::marker::StructuralPartialEq`\n-    //    (a trait which is solely meant as an implementation detail\n-    //    for now), and\n-    //\n-    // 2. We are sometimes doing future-incompatibility lints for\n-    //    now, so we do not want unconditional errors here.\n-    ocx.select_all_or_error().is_empty()\n-}\n-\n /// This implements the traversal over the structure of a given type to try to\n /// find instances of ADTs (specifically structs or enums) that do not implement\n /// the structural-match traits (`StructuralPartialEq` and `StructuralEq`).\n@@ -249,11 +209,3 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n         })\n     }\n }\n-\n-pub fn provide(providers: &mut Providers) {\n-    providers.has_structural_eq_impls = |tcx, ty| {\n-        let infcx = tcx.infer_ctxt().build();\n-        let cause = ObligationCause::dummy();\n-        type_marked_structural(&infcx, ty, cause)\n-    };\n-}"}, {"sha": "7ad5cbc01ccf25293c116f05025bca179b33d0e3", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=48270044b04750477da7276a8845ceb06d7b2185", "patch": "@@ -29,6 +29,7 @@ mod layout;\n mod layout_sanity_check;\n mod needs_drop;\n pub mod representability;\n+mod structural_match;\n mod ty;\n \n pub fn provide(providers: &mut Providers) {\n@@ -42,4 +43,5 @@ pub fn provide(providers: &mut Providers) {\n     representability::provide(providers);\n     ty::provide(providers);\n     instance::provide(providers);\n+    structural_match::provide(providers);\n }"}, {"sha": "a55bb7e7e904d224b8d1f70b492a695f90719509", "filename": "compiler/rustc_ty_utils/src/structural_match.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48270044b04750477da7276a8845ceb06d7b2185/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs?ref=48270044b04750477da7276a8845ceb06d7b2185", "patch": "@@ -0,0 +1,44 @@\n+use rustc_hir::lang_items::LangItem;\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_trait_selection::traits::{ObligationCause, ObligationCtxt};\n+\n+/// This method returns true if and only if `adt_ty` itself has been marked as\n+/// eligible for structural-match: namely, if it implements both\n+/// `StructuralPartialEq` and `StructuralEq` (which are respectively injected by\n+/// `#[derive(PartialEq)]` and `#[derive(Eq)]`).\n+///\n+/// Note that this does *not* recursively check if the substructure of `adt_ty`\n+/// implements the traits.\n+fn has_structural_eq_impls<'tcx>(tcx: TyCtxt<'tcx>, adt_ty: Ty<'tcx>) -> bool {\n+    let ref infcx = tcx.infer_ctxt().build();\n+    let cause = ObligationCause::dummy();\n+\n+    let ocx = ObligationCtxt::new(infcx);\n+    // require `#[derive(PartialEq)]`\n+    let structural_peq_def_id =\n+        infcx.tcx.require_lang_item(LangItem::StructuralPeq, Some(cause.span));\n+    ocx.register_bound(cause.clone(), ty::ParamEnv::empty(), adt_ty, structural_peq_def_id);\n+    // for now, require `#[derive(Eq)]`. (Doing so is a hack to work around\n+    // the type `for<'a> fn(&'a ())` failing to implement `Eq` itself.)\n+    let structural_teq_def_id =\n+        infcx.tcx.require_lang_item(LangItem::StructuralTeq, Some(cause.span));\n+    ocx.register_bound(cause, ty::ParamEnv::empty(), adt_ty, structural_teq_def_id);\n+\n+    // We deliberately skip *reporting* fulfillment errors (via\n+    // `report_fulfillment_errors`), for two reasons:\n+    //\n+    // 1. The error messages would mention `std::marker::StructuralPartialEq`\n+    //    (a trait which is solely meant as an implementation detail\n+    //    for now), and\n+    //\n+    // 2. We are sometimes doing future-incompatibility lints for\n+    //    now, so we do not want unconditional errors here.\n+    ocx.select_all_or_error().is_empty()\n+}\n+\n+pub fn provide(providers: &mut Providers) {\n+    providers.has_structural_eq_impls = has_structural_eq_impls;\n+}"}]}