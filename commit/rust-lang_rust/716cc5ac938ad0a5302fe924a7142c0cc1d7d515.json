{"sha": "716cc5ac938ad0a5302fe924a7142c0cc1d7d515", "node_id": "C_kwDOAAsO6NoAKDcxNmNjNWFjOTM4YWQwYTUzMDJmZTkyNGE3MTQyYzBjYzFkN2Q1MTU", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2023-06-02T15:52:14Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2023-06-02T15:52:14Z"}, "message": "Only determine clock res once; give up before sleeping more than 1 second", "tree": {"sha": "10e2cee8c5f0b56870c6369a9a3476fa81980c65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10e2cee8c5f0b56870c6369a9a3476fa81980c65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/716cc5ac938ad0a5302fe924a7142c0cc1d7d515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/716cc5ac938ad0a5302fe924a7142c0cc1d7d515", "html_url": "https://github.com/rust-lang/rust/commit/716cc5ac938ad0a5302fe924a7142c0cc1d7d515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/716cc5ac938ad0a5302fe924a7142c0cc1d7d515/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8f21101ec383d33c68f1867faf2ba74b3dca1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f21101ec383d33c68f1867faf2ba74b3dca1a8", "html_url": "https://github.com/rust-lang/rust/commit/d8f21101ec383d33c68f1867faf2ba74b3dca1a8"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "3721988b405b4ff9a74cd2a3b7ef0355117c54f4", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/716cc5ac938ad0a5302fe924a7142c0cc1d7d515/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716cc5ac938ad0a5302fe924a7142c0cc1d7d515/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=716cc5ac938ad0a5302fe924a7142c0cc1d7d515", "patch": "@@ -36,19 +36,25 @@ cfg_if::cfg_if! {\n         use crate::thread;\n         use libc::{c_char, posix_spawn_file_actions_t, posix_spawnattr_t};\n         use crate::time::Duration;\n+        use crate::sync::LazyLock;\n         // Get smallest amount of time we can sleep.\n         // Return a common value if it cannot be determined.\n         fn get_clock_resolution() -> Duration {\n-            let mut mindelay = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n-            if unsafe { libc::clock_getres(libc::CLOCK_MONOTONIC, &mut mindelay) } == 0\n-            {\n-                Duration::from_nanos(mindelay.tv_nsec as u64)\n-            } else {\n-                Duration::from_millis(1)\n-            }\n+            static MIN_DELAY: LazyLock<Duration, fn() -> Duration> = LazyLock::new(|| {\n+                let mut mindelay = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n+                if unsafe { libc::clock_getres(libc::CLOCK_MONOTONIC, &mut mindelay) } == 0\n+                {\n+                    Duration::from_nanos(mindelay.tv_nsec as u64)\n+                } else {\n+                    Duration::from_millis(1)\n+                }\n+            });\n+            *MIN_DELAY\n         }\n         // Arbitrary minimum sleep duration for retrying fork/spawn\n         const MIN_FORKSPAWN_SLEEP: Duration = Duration::from_nanos(1);\n+        // Maximum duration of sleeping before giving up and returning an error\n+        const MAX_FORKSPAWN_SLEEP: Duration = Duration::from_millis(1000);\n     }\n }\n \n@@ -175,21 +181,22 @@ impl Command {\n     unsafe fn do_fork(&mut self) -> Result<(pid_t, pid_t), io::Error> {\n         use crate::sys::os::errno;\n \n-        let mut minimum_delay = None;\n         let mut delay = MIN_FORKSPAWN_SLEEP;\n \n         loop {\n             let r = libc::fork();\n             if r == -1 as libc::pid_t && errno() as libc::c_int == libc::EBADF {\n-                if minimum_delay.is_none() {\n-                    minimum_delay = Some(get_clock_resolution());\n-                }\n-                if delay < minimum_delay.unwrap() {\n+                if delay < get_clock_resolution() {\n                     // We cannot sleep this short (it would be longer).\n                     // Yield instead.\n                     thread::yield_now();\n-                } else {\n+                } else if delay < MAX_FORKSPAWN_SLEEP {\n                     thread::sleep(delay);\n+                } else {\n+                    return Err(io::const_io_error!(\n+                        ErrorKind::WouldBlock,\n+                        \"forking returned EBADF too often\",\n+                    ));\n                 }\n                 delay *= 2;\n                 continue;\n@@ -504,27 +511,28 @@ impl Command {\n             attrp: *const posix_spawnattr_t,\n             argv: *const *mut c_char,\n             envp: *const *mut c_char,\n-        ) -> i32 {\n-            let mut minimum_delay = None;\n+        ) -> io::Result<i32> {\n             let mut delay = MIN_FORKSPAWN_SLEEP;\n             loop {\n                 match libc::posix_spawnp(pid, file, file_actions, attrp, argv, envp) {\n                     libc::EBADF => {\n-                        if minimum_delay.is_none() {\n-                            minimum_delay = Some(get_clock_resolution());\n-                        }\n-                        if delay < minimum_delay.unwrap() {\n+                        if delay < get_clock_resolution() {\n                             // We cannot sleep this short (it would be longer).\n                             // Yield instead.\n                             thread::yield_now();\n-                        } else {\n+                        } else if delay < MAX_FORKSPAWN_SLEEP {\n                             thread::sleep(delay);\n+                        } else {\n+                            return Err(io::const_io_error!(\n+                                ErrorKind::WouldBlock,\n+                                \"posix_spawnp returned EBADF too often\",\n+                            ));\n                         }\n                         delay *= 2;\n                         continue;\n                     }\n                     r => {\n-                        return r;\n+                        return Ok(r);\n                     }\n                 }\n             }\n@@ -654,14 +662,20 @@ impl Command {\n             let spawn_fn = libc::posix_spawnp;\n             #[cfg(target_os = \"nto\")]\n             let spawn_fn = retrying_libc_posix_spawnp;\n-            cvt_nz(spawn_fn(\n+\n+            let spawn_res = spawn_fn(\n                 &mut p.pid,\n                 self.get_program_cstr().as_ptr(),\n                 file_actions.0.as_ptr(),\n                 attrs.0.as_ptr(),\n                 self.get_argv().as_ptr() as *const _,\n                 envp as *const _,\n-            ))?;\n+            );\n+\n+            #[cfg(target_os = \"nto\")]\n+            let spawn_res = spawn_res?;\n+\n+            cvt_nz(spawn_res)?;\n             Ok(Some(p))\n         }\n     }"}]}