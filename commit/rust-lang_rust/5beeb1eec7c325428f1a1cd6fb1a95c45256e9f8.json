{"sha": "5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZWViMWVlYzdjMzI1NDI4ZjFhMWNkNmZiMWE5NWM0NTI1NmU5Zjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-07T12:14:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-07T12:14:47Z"}, "message": "remove useless lifetime outlives bounds", "tree": {"sha": "228b3162bb1f2b4f6ea12fad6852fef4824cdb4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/228b3162bb1f2b4f6ea12fad6852fef4824cdb4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYR/03AAoJEFbW7qD8Z6xGdcwP/RLn8/Sn0ic683fPX55p3+BT\nrO3z/gQYbJMt6ZIHxvurJrnf0QyuPJ1zCqeKJWJPM00vAM70UzDyv17Sf/4ufFry\nXvsjH4VEvv7F/c1B1eg483mdyc6qQfuYYGn3Hq/9xaT2OzeOzuY2IWpckBvBS7xo\nmNCz8AXmmp9xk4p2W4xzNQFBxO8kC1IK3pyFY1maCLGWb1lt2gTaMTM+hRz9e2Al\nrr/HE6wjNC9OpF2rycOHvg5wQyv3Rc5sfPljuozHiE535bctAhBYfGfnNgGM/vjV\nETlc/5e7CCTcixEVsHadoFMhzgaBwsqrrhn7kYqa8M4FacObkWXABOE8+hSU/nhD\nsmOQMgT1+oP4TY3SPZwywWZgqv1wr1OYT+1upjVFrtgBjJzX3qSm8Jl+bdouw4eU\nsX1nMHOXh7NyPmXJ9q+Y9W7zfIDjf+x8opPtINaBmWCOrL2T7JInTko+qaUDxQvo\nLGCyq+KDCLkYMlU9NEFr4lpjmGPsAP52UHRtIWG/j0zOlCGCpziE2+MDu65fvjPr\n9XAexBfr7gPRzSb7PDpdRukEc+GrDSq2+jbAuogipqaExEGT21HcDD9jXLO48og1\nMg2fkrp2ek45KY6rng6H7+S8sD2K9QenX9Vg9tBqF+YZjNPVCTr/tkPast98KR/+\ngVFBPqO5mVqi3N6x3bOL\n=c/2g\n-----END PGP SIGNATURE-----", "payload": "tree 228b3162bb1f2b4f6ea12fad6852fef4824cdb4a\nparent 5e51edb0de138d3805db5ca16160c829d3d32291\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481112887 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481112887 +0100\n\nremove useless lifetime outlives bounds"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "html_url": "https://github.com/rust-lang/rust/commit/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e51edb0de138d3805db5ca16160c829d3d32291", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e51edb0de138d3805db5ca16160c829d3d32291", "html_url": "https://github.com/rust-lang/rust/commit/5e51edb0de138d3805db5ca16160c829d3d32291"}], "stats": {"total": 355, "additions": 165, "deletions": 190}, "files": [{"sha": "02c1ece163497665e1a57207f0a2337a78284300", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -262,4 +262,4 @@ impl LintPass for HardwiredLints {\n     }\n }\n \n-impl LateLintPass for HardwiredLints {}\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HardwiredLints {}"}, {"sha": "ccf53f01cd5323112bfe2b3e9d21bde83ef65e58", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 74, "deletions": 95, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -129,106 +129,85 @@ pub trait LintPass {\n //\n // FIXME: eliminate the duplication with `Visitor`. But this also\n // contains a few lint-specific methods with no equivalent in `Visitor`.\n-pub trait LateLintPass: LintPass {\n+pub trait LateLintPass<'a, 'tcx>: LintPass {\n     fn check_name(&mut self, _: &LateContext, _: Span, _: ast::Name) { }\n-    fn check_crate<'a, 'tcx:'a >(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Crate) { }\n-    fn check_crate_post<'a, 'tcx: 'a>(&mut self,\n-                                      _: &'a LateContext<'a, 'tcx>,\n-                                      _: &'tcx hir::Crate) { }\n-    fn check_mod<'a, 'tcx: 'a>(&mut self,\n-                               _: &'a LateContext<'a, 'tcx>,\n-                               _: &'tcx hir::Mod,\n-                               _: Span,\n-                               _: ast::NodeId) { }\n-    fn check_mod_post<'a, 'tcx: 'a>(&mut self,\n-                                    _: &'a LateContext<'a, 'tcx>,\n-                                    _: &'tcx hir::Mod,\n-                                    _: Span,\n-                                    _: ast::NodeId) { }\n-    fn check_foreign_item<'a, 'tcx: 'a>(&mut self,\n-                                        _: &'a LateContext<'a, 'tcx>,\n-                                        _: &'tcx hir::ForeignItem) { }\n-    fn check_foreign_item_post<'a, 'tcx: 'a>(&mut self,\n-                                             _: &'a LateContext<'a, 'tcx>,\n-                                             _: &'tcx hir::ForeignItem) { }\n-    fn check_item<'a, 'tcx: 'a>(&mut self,\n-                                _: &'a LateContext<'a, 'tcx>,\n-                                _: &'tcx hir::Item) { }\n-    fn check_item_post<'a, 'tcx: 'a>(&mut self,\n-                                     _: &'a LateContext<'a, 'tcx>,\n-                                     _: &'tcx hir::Item) { }\n-    fn check_local<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Local) { }\n-    fn check_block<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Block) { }\n-    fn check_block_post<'a, 'tcx: 'a>(&mut self,\n-                                      _: &'a LateContext<'a, 'tcx>,\n-                                      _: &'tcx hir::Block) { }\n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Stmt) { }\n-    fn check_arm<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Arm) { }\n-    fn check_pat<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Pat) { }\n-    fn check_decl<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Decl) { }\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Expr) { }\n-    fn check_expr_post<'a, 'tcx: 'a>(&mut self,\n-                                     _: &'a LateContext<'a, 'tcx>,\n-                                     _: &'tcx hir::Expr) { }\n-    fn check_ty<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>, _: &'tcx hir::Ty) { }\n-    fn check_generics<'a, 'tcx: 'a>(&mut self,\n-                                    _: &'a LateContext<'a, 'tcx>,\n-                                    _: &'tcx hir::Generics) { }\n-    fn check_fn<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>,\n-        _: FnKind<'tcx>, _: &'tcx hir::FnDecl, _: &'tcx hir::Expr, _: Span, _: ast::NodeId) { }\n-    fn check_fn_post<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>,\n-        _: FnKind<'tcx>, _: &'tcx hir::FnDecl, _: &'tcx hir::Expr, _: Span, _: ast::NodeId) { }\n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self,\n-                                      _: &'a LateContext<'a, 'tcx>,\n-                                      _: &'tcx hir::TraitItem) { }\n-    fn check_trait_item_post<'a, 'tcx: 'a>(&mut self,\n-                                           _: &'a LateContext<'a, 'tcx>,\n-                                           _: &'tcx hir::TraitItem) { }\n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self,\n-                                     _: &'a LateContext<'a, 'tcx>,\n-                                     _: &'tcx hir::ImplItem) { }\n-    fn check_impl_item_post<'a, 'tcx: 'a>(&mut self,\n-                                          _: &'a LateContext<'a, 'tcx>,\n-                                          _: &'tcx hir::ImplItem) { }\n-    fn check_struct_def<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>,\n-        _: &'tcx hir::VariantData, _: ast::Name, _: &'tcx hir::Generics, _: ast::NodeId) { }\n-    fn check_struct_def_post<'a, 'tcx: 'a>(&mut self, _: &'a LateContext<'a, 'tcx>,\n-        _: &'tcx hir::VariantData, _: ast::Name, _: &'tcx hir::Generics, _: ast::NodeId) { }\n-    fn check_struct_field<'a, 'tcx: 'a>(&mut self,\n-                                        _: &'a LateContext<'a, 'tcx>,\n-                                        _: &'tcx hir::StructField) { }\n-    fn check_variant<'a, 'tcx: 'a>(&mut self,\n-                                   _: &'a LateContext<'a, 'tcx>,\n-                                   _: &'tcx hir::Variant,\n-                                   _: &'tcx hir::Generics) { }\n-    fn check_variant_post<'a, 'tcx: 'a>(&mut self,\n-                                        _: &'a LateContext<'a, 'tcx>,\n-                                        _: &'tcx hir::Variant,\n-                                        _: &'tcx hir::Generics) { }\n-    fn check_lifetime<'a, 'tcx: 'a>(&mut self,\n-                                    _: &'a LateContext<'a, 'tcx>,\n-                                    _: &'tcx hir::Lifetime) { }\n-    fn check_lifetime_def<'a, 'tcx: 'a>(&mut self,\n-                                        _: &'a LateContext<'a, 'tcx>,\n-                                        _: &'tcx hir::LifetimeDef) { }\n-    fn check_path<'a, 'tcx: 'a>(&mut self,\n-                                _: &'a LateContext<'a, 'tcx>,\n-                                _: &'tcx hir::Path,\n-                                _: ast::NodeId) { }\n-    fn check_attribute<'a, 'tcx: 'a>(&mut self,\n-                                     _: &'a LateContext<'a, 'tcx>,\n-                                     _: &'tcx ast::Attribute) { }\n+    fn check_crate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Crate) { }\n+    fn check_crate_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Crate) { }\n+    fn check_mod(&mut self,\n+                 _: &LateContext<'a, 'tcx>,\n+                 _: &'tcx hir::Mod,\n+                 _: Span,\n+                 _: ast::NodeId) { }\n+    fn check_mod_post(&mut self,\n+                      _: &LateContext<'a, 'tcx>,\n+                      _: &'tcx hir::Mod,\n+                      _: Span,\n+                      _: ast::NodeId) { }\n+    fn check_foreign_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ForeignItem) { }\n+    fn check_foreign_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ForeignItem) { }\n+    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Item) { }\n+    fn check_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Item) { }\n+    fn check_local(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Local) { }\n+    fn check_block(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Block) { }\n+    fn check_block_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Block) { }\n+    fn check_stmt(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Stmt) { }\n+    fn check_arm(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Arm) { }\n+    fn check_pat(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Pat) { }\n+    fn check_decl(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Decl) { }\n+    fn check_expr(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Expr) { }\n+    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Expr) { }\n+    fn check_ty(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Ty) { }\n+    fn check_generics(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Generics) { }\n+    fn check_fn(&mut self,\n+                _: &LateContext<'a, 'tcx>,\n+                _: FnKind<'tcx>,\n+                _: &'tcx hir::FnDecl,\n+                _: &'tcx hir::Expr,\n+                _: Span,\n+                _: ast::NodeId) { }\n+    fn check_fn_post(&mut self,\n+                     _: &LateContext<'a, 'tcx>,\n+                     _: FnKind<'tcx>,\n+                     _: &'tcx hir::FnDecl,\n+                     _: &'tcx hir::Expr,\n+                     _: Span,\n+                     _: ast::NodeId) { }\n+    fn check_trait_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::TraitItem) { }\n+    fn check_trait_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::TraitItem) { }\n+    fn check_impl_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ImplItem) { }\n+    fn check_impl_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ImplItem) { }\n+    fn check_struct_def(&mut self,\n+                        _: &LateContext<'a, 'tcx>,\n+                        _: &'tcx hir::VariantData,\n+                        _: ast::Name,\n+                        _: &'tcx hir::Generics,\n+                        _: ast::NodeId) { }\n+    fn check_struct_def_post(&mut self,\n+                             _: &LateContext<'a, 'tcx>,\n+                             _: &'tcx hir::VariantData,\n+                             _: ast::Name,\n+                             _: &'tcx hir::Generics,\n+                             _: ast::NodeId) { }\n+    fn check_struct_field(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::StructField) { }\n+    fn check_variant(&mut self,\n+                     _: &LateContext<'a, 'tcx>,\n+                     _: &'tcx hir::Variant,\n+                     _: &'tcx hir::Generics) { }\n+    fn check_variant_post(&mut self,\n+                          _: &LateContext<'a, 'tcx>,\n+                          _: &'tcx hir::Variant,\n+                          _: &'tcx hir::Generics) { }\n+    fn check_lifetime(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Lifetime) { }\n+    fn check_lifetime_def(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::LifetimeDef) { }\n+    fn check_path(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Path, _: ast::NodeId) { }\n+    fn check_attribute(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx ast::Attribute) { }\n \n     /// Called when entering a syntax node that can have lint attributes such\n     /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n-    fn enter_lint_attrs<'a, 'tcx: 'a>(&mut self,\n-                                      _: &'a LateContext<'a, 'tcx>,\n-                                      _: &'tcx [ast::Attribute]) { }\n+    fn enter_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) { }\n \n     /// Counterpart to `enter_lint_attrs`.\n-    fn exit_lint_attrs<'a, 'tcx: 'a>(&mut self,\n-                                     _: &'a LateContext<'a, 'tcx>,\n-                                     _: &'tcx [ast::Attribute]) { }\n+    fn exit_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) { }\n }\n \n pub trait EarlyLintPass: LintPass {\n@@ -282,7 +261,7 @@ pub trait EarlyLintPass: LintPass {\n \n /// A lint pass boxed up as a trait object.\n pub type EarlyLintPassObject = Box<EarlyLintPass + 'static>;\n-pub type LateLintPassObject = Box<LateLintPass + 'static>;\n+pub type LateLintPassObject = Box<for<'a, 'tcx> LateLintPass<'a, 'tcx> + 'static>;\n \n /// Identifies a lint known to the compiler.\n #[derive(Clone, Copy, Debug)]"}, {"sha": "4bdd78d55b1a38b389517069484ab8ee213b446b", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -99,8 +99,8 @@ impl LintPass for NonCamelCaseTypes {\n     }\n }\n \n-impl LateLintPass for NonCamelCaseTypes {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         let extern_repr_count = it.attrs\n             .iter()\n             .filter(|attr| {\n@@ -133,7 +133,7 @@ impl LateLintPass for NonCamelCaseTypes {\n         }\n     }\n \n-    fn check_generics<'a, 'tcx: 'a>(&mut self,\n+    fn check_generics(&mut self,\n                                     cx: &LateContext<'a, 'tcx>,\n                                     it: &'tcx hir::Generics) {\n         for gen in it.ty_params.iter() {\n@@ -228,8 +228,8 @@ impl LintPass for NonSnakeCase {\n     }\n }\n \n-impl LateLintPass for NonSnakeCase {\n-    fn check_crate<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, cr: &'tcx hir::Crate) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, cr: &'tcx hir::Crate) {\n         let attr_crate_name = cr.attrs\n             .iter()\n             .find(|at| at.check_name(\"crate_name\"))\n@@ -241,7 +241,7 @@ impl LateLintPass for NonSnakeCase {\n         }\n     }\n \n-    fn check_fn<'a, 'tcx: 'a>(&mut self,\n+    fn check_fn(&mut self,\n                               cx: &LateContext<'a, 'tcx>,\n                               fk: FnKind,\n                               _: &'tcx hir::FnDecl,\n@@ -267,13 +267,13 @@ impl LateLintPass for NonSnakeCase {\n         }\n     }\n \n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         if let hir::ItemMod(_) = it.node {\n             self.check_snake_case(cx, \"module\", &it.name.as_str(), Some(it.span));\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self,\n+    fn check_trait_item(&mut self,\n                                       cx: &LateContext<'a, 'tcx>,\n                                       trait_item: &'tcx hir::TraitItem) {\n         if let hir::MethodTraitItem(_, None) = trait_item.node {\n@@ -284,7 +284,7 @@ impl LateLintPass for NonSnakeCase {\n         }\n     }\n \n-    fn check_lifetime_def<'a, 'tcx: 'a>(&mut self,\n+    fn check_lifetime_def(&mut self,\n                                         cx: &LateContext<'a, 'tcx>,\n                                         t: &'tcx hir::LifetimeDef) {\n         self.check_snake_case(cx,\n@@ -293,7 +293,7 @@ impl LateLintPass for NonSnakeCase {\n                               Some(t.lifetime.span));\n     }\n \n-    fn check_pat<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, p: &'tcx hir::Pat) {\n+    fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, p: &'tcx hir::Pat) {\n         // Exclude parameter names from foreign functions\n         let parent_node = cx.tcx.map.get_parent_node(p.id);\n         if let hir::map::NodeForeignItem(item) = cx.tcx.map.get(parent_node) {\n@@ -307,7 +307,7 @@ impl LateLintPass for NonSnakeCase {\n         }\n     }\n \n-    fn check_struct_def<'a, 'tcx: 'a>(&mut self,\n+    fn check_struct_def(&mut self,\n                                       cx: &LateContext<'a, 'tcx>,\n                                       s: &'tcx hir::VariantData,\n                                       _: ast::Name,\n@@ -354,8 +354,8 @@ impl LintPass for NonUpperCaseGlobals {\n     }\n }\n \n-impl LateLintPass for NonUpperCaseGlobals {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         match it.node {\n             hir::ItemStatic(..) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", it.name, it.span);\n@@ -367,7 +367,7 @@ impl LateLintPass for NonUpperCaseGlobals {\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self,\n+    fn check_trait_item(&mut self,\n                                       cx: &LateContext<'a, 'tcx>,\n                                       ti: &'tcx hir::TraitItem) {\n         match ti.node {\n@@ -378,7 +378,7 @@ impl LateLintPass for NonUpperCaseGlobals {\n         }\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self,\n+    fn check_impl_item(&mut self,\n                                      cx: &LateContext<'a, 'tcx>,\n                                      ii: &'tcx hir::ImplItem) {\n         match ii.node {\n@@ -389,7 +389,7 @@ impl LateLintPass for NonUpperCaseGlobals {\n         }\n     }\n \n-    fn check_pat<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, p: &'tcx hir::Pat) {\n+    fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, p: &'tcx hir::Pat) {\n         // Lint for constants that look like binding identifiers (#7526)\n         if let PatKind::Path(hir::QPath::Resolved(None, ref path)) = p.node {\n             if !path.global && path.segments.len() == 1 && path.segments[0].parameters.is_empty() {"}, {"sha": "ed6eaf0171de1ed9bf56019efb27215f4925dd03", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 40, "deletions": 44, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -69,8 +69,8 @@ impl LintPass for WhileTrue {\n     }\n }\n \n-impl LateLintPass for WhileTrue {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for WhileTrue {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         if let hir::ExprWhile(ref cond, ..) = e.node {\n             if let hir::ExprLit(ref lit) = cond.node {\n                 if let ast::LitKind::Bool(true) = lit.node {\n@@ -109,8 +109,8 @@ impl LintPass for BoxPointers {\n     }\n }\n \n-impl LateLintPass for BoxPointers {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         match it.node {\n             hir::ItemFn(..) |\n             hir::ItemTy(..) |\n@@ -137,7 +137,7 @@ impl LateLintPass for BoxPointers {\n         }\n     }\n \n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         let ty = cx.tcx.tables().node_id_to_type(e.id);\n         self.check_heap_type(cx, e.span, ty);\n     }\n@@ -158,8 +158,8 @@ impl LintPass for NonShorthandFieldPatterns {\n     }\n }\n \n-impl LateLintPass for NonShorthandFieldPatterns {\n-    fn check_pat<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx hir::Pat) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n+    fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx hir::Pat) {\n         if let PatKind::Struct(_, ref field_pats, _) = pat.node {\n             for fieldpat in field_pats {\n                 if fieldpat.node.is_shorthand {\n@@ -194,8 +194,8 @@ impl LintPass for UnsafeCode {\n     }\n }\n \n-impl LateLintPass for UnsafeCode {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         if let hir::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == hir::UnsafeBlock(hir::UserProvided) {\n@@ -204,7 +204,7 @@ impl LateLintPass for UnsafeCode {\n         }\n     }\n \n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         match it.node {\n             hir::ItemTrait(hir::Unsafety::Unsafe, ..) => {\n                 cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` trait\")\n@@ -218,7 +218,7 @@ impl LateLintPass for UnsafeCode {\n         }\n     }\n \n-    fn check_fn<'a, 'tcx: 'a>(&mut self,\n+    fn check_fn(&mut self,\n                               cx: &LateContext<'a, 'tcx>,\n                               fk: FnKind<'tcx>,\n                               _: &'tcx hir::FnDecl,\n@@ -240,7 +240,7 @@ impl LateLintPass for UnsafeCode {\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self,\n+    fn check_trait_item(&mut self,\n                                       cx: &LateContext<'a, 'tcx>,\n                                       trait_item: &'tcx hir::TraitItem) {\n         if let hir::MethodTraitItem(ref sig, None) = trait_item.node {\n@@ -329,10 +329,8 @@ impl LintPass for MissingDoc {\n     }\n }\n \n-impl LateLintPass for MissingDoc {\n-    fn enter_lint_attrs<'a, 'tcx: 'a>(&mut self,\n-                                      _: &LateContext<'a, 'tcx>,\n-                                      attrs: &'tcx [ast::Attribute]) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n+    fn enter_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, attrs: &'tcx [ast::Attribute]) {\n         let doc_hidden = self.doc_hidden() ||\n                          attrs.iter().any(|attr| {\n             attr.check_name(\"doc\") &&\n@@ -344,13 +342,11 @@ impl LateLintPass for MissingDoc {\n         self.doc_hidden_stack.push(doc_hidden);\n     }\n \n-    fn exit_lint_attrs<'a, 'tcx: 'a>(&mut self,\n-                                     _: &LateContext<'a, 'tcx>,\n-                                     _attrs: &'tcx [ast::Attribute]) {\n+    fn exit_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _attrs: &'tcx [ast::Attribute]) {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_struct_def<'a, 'tcx: 'a>(&mut self,\n+    fn check_struct_def(&mut self,\n                                       _: &LateContext<'a, 'tcx>,\n                                       _: &'tcx hir::VariantData,\n                                       _: ast::Name,\n@@ -359,7 +355,7 @@ impl LateLintPass for MissingDoc {\n         self.struct_def_stack.push(item_id);\n     }\n \n-    fn check_struct_def_post<'a, 'tcx: 'a>(&mut self,\n+    fn check_struct_def_post(&mut self,\n                                            _: &LateContext<'a, 'tcx>,\n                                            _: &'tcx hir::VariantData,\n                                            _: ast::Name,\n@@ -369,11 +365,11 @@ impl LateLintPass for MissingDoc {\n         assert!(popped == item_id);\n     }\n \n-    fn check_crate<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n         self.check_missing_docs_attrs(cx, None, &krate.attrs, krate.span, \"crate\");\n     }\n \n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         let desc = match it.node {\n             hir::ItemFn(..) => \"a function\",\n             hir::ItemMod(..) => \"a module\",\n@@ -418,7 +414,7 @@ impl LateLintPass for MissingDoc {\n         self.check_missing_docs_attrs(cx, Some(it.id), &it.attrs, it.span, desc);\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self,\n+    fn check_trait_item(&mut self,\n                                       cx: &LateContext<'a, 'tcx>,\n                                       trait_item: &'tcx hir::TraitItem) {\n         if self.private_traits.contains(&trait_item.id) {\n@@ -438,7 +434,7 @@ impl LateLintPass for MissingDoc {\n                                       desc);\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self,\n+    fn check_impl_item(&mut self,\n                                      cx: &LateContext<'a, 'tcx>,\n                                      impl_item: &'tcx hir::ImplItem) {\n         // If the method is an impl for a trait, don't doc.\n@@ -458,7 +454,7 @@ impl LateLintPass for MissingDoc {\n                                       desc);\n     }\n \n-    fn check_struct_field<'a, 'tcx: 'a>(&mut self,\n+    fn check_struct_field(&mut self,\n                                         cx: &LateContext<'a, 'tcx>,\n                                         sf: &'tcx hir::StructField) {\n         if !sf.is_positional() {\n@@ -475,7 +471,7 @@ impl LateLintPass for MissingDoc {\n         }\n     }\n \n-    fn check_variant<'a, 'tcx: 'a>(&mut self,\n+    fn check_variant(&mut self,\n                                    cx: &LateContext<'a, 'tcx>,\n                                    v: &'tcx hir::Variant,\n                                    _: &'tcx hir::Generics) {\n@@ -488,7 +484,7 @@ impl LateLintPass for MissingDoc {\n         self.in_variant = true;\n     }\n \n-    fn check_variant_post<'a, 'tcx: 'a>(&mut self,\n+    fn check_variant_post(&mut self,\n                                         _: &LateContext<'a, 'tcx>,\n                                         _: &'tcx hir::Variant,\n                                         _: &'tcx hir::Generics) {\n@@ -512,8 +508,8 @@ impl LintPass for MissingCopyImplementations {\n     }\n }\n \n-impl LateLintPass for MissingCopyImplementations {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         if !cx.access_levels.is_reachable(item.id) {\n             return;\n         }\n@@ -581,8 +577,8 @@ impl LintPass for MissingDebugImplementations {\n     }\n }\n \n-impl LateLintPass for MissingDebugImplementations {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         if !cx.access_levels.is_reachable(item.id) {\n             return;\n         }\n@@ -687,8 +683,8 @@ impl LintPass for UnconditionalRecursion {\n     }\n }\n \n-impl LateLintPass for UnconditionalRecursion {\n-    fn check_fn<'a, 'tcx: 'a>(&mut self,\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n+    fn check_fn(&mut self,\n                               cx: &LateContext<'a, 'tcx>,\n                               fn_kind: FnKind<'tcx>,\n                               _: &'tcx hir::FnDecl,\n@@ -950,8 +946,8 @@ impl LintPass for PluginAsLibrary {\n     }\n }\n \n-impl LateLintPass for PluginAsLibrary {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         if cx.sess().plugin_registrar_fn.get().is_some() {\n             // We're compiling a plugin; it's fine to link other plugins.\n             return;\n@@ -1016,8 +1012,8 @@ impl LintPass for InvalidNoMangleItems {\n     }\n }\n \n-impl LateLintPass for InvalidNoMangleItems {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         match it.node {\n             hir::ItemFn(.., ref generics, _) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") {\n@@ -1070,8 +1066,8 @@ impl LintPass for MutableTransmutes {\n     }\n }\n \n-impl LateLintPass for MutableTransmutes {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         use syntax::abi::Abi::RustIntrinsic;\n \n         let msg = \"mutating transmuted &mut T from &T may cause undefined behavior, \\\n@@ -1138,8 +1134,8 @@ impl LintPass for UnstableFeatures {\n     }\n }\n \n-impl LateLintPass for UnstableFeatures {\n-    fn check_attribute<'a, 'tcx: 'a>(&mut self,\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnstableFeatures {\n+    fn check_attribute(&mut self,\n                                      ctx: &LateContext<'a, 'tcx>,\n                                      attr: &'tcx ast::Attribute) {\n         if attr.meta().check_name(\"feature\") {\n@@ -1167,8 +1163,8 @@ impl LintPass for UnionsWithDropFields {\n     }\n }\n \n-impl LateLintPass for UnionsWithDropFields {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, ctx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n+    fn check_item(&mut self, ctx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         if let hir::ItemUnion(ref vdata, _) = item.node {\n             let param_env = &ty::ParameterEnvironment::for_item(ctx.tcx, item.id);\n             for field in vdata.fields() {"}, {"sha": "98b87a141ea4a65152ac1fa94d51413ebaba24d4", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -103,8 +103,8 @@ impl LintPass for TypeLimits {\n     }\n }\n \n-impl LateLintPass for TypeLimits {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         match e.node {\n             hir::ExprUnary(hir::UnNeg, ref expr) => {\n                 if let hir::ExprLit(ref lit) = expr.node {\n@@ -706,8 +706,8 @@ impl LintPass for ImproperCTypes {\n     }\n }\n \n-impl LateLintPass for ImproperCTypes {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         let mut vis = ImproperCTypesVisitor { cx: cx };\n         if let hir::ItemForeignMod(ref nmod) = it.node {\n             if nmod.abi != Abi::RustIntrinsic && nmod.abi != Abi::PlatformIntrinsic {\n@@ -734,8 +734,8 @@ impl LintPass for VariantSizeDifferences {\n     }\n }\n \n-impl LateLintPass for VariantSizeDifferences {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         if let hir::ItemEnum(ref enum_definition, ref gens) = it.node {\n             if gens.ty_params.is_empty() {\n                 // sizes only make sense for non-generic types"}, {"sha": "89f8f464ee79104c0177b4e85919cd3f2ccb3a9f", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -77,24 +77,24 @@ impl LintPass for UnusedMut {\n     }\n }\n \n-impl LateLintPass for UnusedMut {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedMut {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         if let hir::ExprMatch(_, ref arms, _) = e.node {\n             for a in arms {\n                 self.check_unused_mut_pat(cx, &a.pats)\n             }\n         }\n     }\n \n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx hir::Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx hir::Stmt) {\n         if let hir::StmtDecl(ref d, _) = s.node {\n             if let hir::DeclLocal(ref l) = d.node {\n                 self.check_unused_mut_pat(cx, slice::ref_slice(&l.pat));\n             }\n         }\n     }\n \n-    fn check_fn<'a, 'tcx: 'a>(&mut self,\n+    fn check_fn(&mut self,\n                               cx: &LateContext<'a, 'tcx>,\n                               _: FnKind<'tcx>,\n                               decl: &'tcx hir::FnDecl,\n@@ -128,8 +128,8 @@ impl LintPass for UnusedResults {\n     }\n }\n \n-impl LateLintPass for UnusedResults {\n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx hir::Stmt) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx hir::Stmt) {\n         let expr = match s.node {\n             hir::StmtSemi(ref expr, _) => &**expr,\n             _ => return,\n@@ -187,8 +187,8 @@ impl LintPass for UnusedUnsafe {\n     }\n }\n \n-impl LateLintPass for UnusedUnsafe {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedUnsafe {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         if let hir::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == hir::UnsafeBlock(hir::UserProvided) &&\n@@ -214,8 +214,8 @@ impl LintPass for PathStatements {\n     }\n }\n \n-impl LateLintPass for PathStatements {\n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx hir::Stmt) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx hir::Stmt) {\n         if let hir::StmtSemi(ref expr, _) = s.node {\n             if let hir::ExprPath(_) = expr.node {\n                 cx.span_lint(PATH_STATEMENTS, s.span, \"path statement with no effect\");\n@@ -239,8 +239,8 @@ impl LintPass for UnusedAttributes {\n     }\n }\n \n-impl LateLintPass for UnusedAttributes {\n-    fn check_attribute<'a, 'tcx: 'a>(&mut self,\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n+    fn check_attribute(&mut self,\n                                      cx: &LateContext<'a, 'tcx>,\n                                      attr: &'tcx ast::Attribute) {\n         debug!(\"checking attribute: {:?}\", attr);\n@@ -435,8 +435,8 @@ impl LintPass for UnusedAllocation {\n     }\n }\n \n-impl LateLintPass for UnusedAllocation {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAllocation {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         match e.node {\n             hir::ExprBox(_) => {}\n             _ => return,"}, {"sha": "4011ce86414c6c6d1e084cee453a08e2c19f1ff0", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_for_crate.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -32,8 +32,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_crate<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n         if !attr::contains_name(&krate.attrs, \"crate_okay\") {\n             cx.span_lint(CRATE_NOT_OKAY, krate.span,\n                          \"crate is not marked with #![crate_okay]\");\n@@ -43,5 +43,5 @@ impl LateLintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass as LateLintPassObject);\n+    reg.register_late_lint_pass(box Pass);\n }"}, {"sha": "cc17a011e5546134fe5e0f1fdc50080d31c8d047", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -34,8 +34,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         match &*it.name.as_str() {\n             \"lintme\" => cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\"),\n             \"pleaselintme\" => cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\"),\n@@ -46,6 +46,6 @@ impl LateLintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass as LateLintPassObject);\n+    reg.register_late_lint_pass(box Pass);\n     reg.register_lint_group(\"lint_me\", vec![TEST_LINT, PLEASE_LINT]);\n }"}, {"sha": "4011ce86414c6c6d1e084cee453a08e2c19f1ff0", "filename": "src/test/run-pass-fulldeps/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -32,8 +32,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_crate<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n         if !attr::contains_name(&krate.attrs, \"crate_okay\") {\n             cx.span_lint(CRATE_NOT_OKAY, krate.span,\n                          \"crate is not marked with #![crate_okay]\");\n@@ -43,5 +43,5 @@ impl LateLintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass as LateLintPassObject);\n+    reg.register_late_lint_pass(box Pass);\n }"}, {"sha": "cc17a011e5546134fe5e0f1fdc50080d31c8d047", "filename": "src/test/run-pass-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -34,8 +34,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         match &*it.name.as_str() {\n             \"lintme\" => cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\"),\n             \"pleaselintme\" => cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\"),\n@@ -46,6 +46,6 @@ impl LateLintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_late_lint_pass(box Pass as LateLintPassObject);\n+    reg.register_late_lint_pass(box Pass);\n     reg.register_lint_group(\"lint_me\", vec![TEST_LINT, PLEASE_LINT]);\n }"}, {"sha": "77996b71a46571b7ff6bcc7913069c69f03a0c27", "filename": "src/test/run-pass-fulldeps/issue-37290/auxiliary/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fauxiliary%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fauxiliary%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-37290%2Fauxiliary%2Flint.rs?ref=5beeb1eec7c325428f1a1cd6fb1a95c45256e9f8", "patch": "@@ -39,8 +39,8 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray { lint_array!(REGION_HIERARCHY) }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_fn<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>,\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>,\n                               fk: FnKind<'tcx>, _: &'tcx hir::FnDecl, expr: &'tcx hir::Expr,\n                               span: Span, node: ast::NodeId)\n     {"}]}