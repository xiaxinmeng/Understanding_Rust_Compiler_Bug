{"sha": "e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05", "node_id": "C_kwDOAAsO6NoAKGU5YjRhODRkZmE5YjhkOGViOTJhMmMzMjRiNWM1Nzk5ZGM3ZjNlMDU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-11T15:21:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T15:21:39Z"}, "message": "Rollup merge of #104146 - Ayush1325:remote-test-server, r=jyn514\n\nRetry binding TCP Socket in remote-test-server\n\nThis allows retrying binding TCP Socket multiple times. This is useful when using emulators as network might not be available in the beginning.\n\nThis was orignally implemented in https://github.com/rust-lang/rust/pull/100316\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "f7e152d6cc1bbccf200659b7d336ad215f5071ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e152d6cc1bbccf200659b7d336ad215f5071ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbmiDCRBK7hj4Ov3rIwAA+DkIAK0CdcIAbqQOPBEH2VLSef1N\nbERFAQ0Hc0SnUt+FGnrr38JuBul6nCP42WKcU7o81T07hOgUIDtvRL0u6C0wGjwj\npQCn+F60oPHD0hE/LLL8enG1lS4bVrj0+6wBoio05U8uQqJc4kc8m9Q3d540iSsn\n4bXIFl+1FnpaXk5hGz9Rrjaj0udKN6gwGVTqyMf30+z7uvc8vukA1A8Qm1hPX97V\nArkgv8jzg3HrC+Ammpj34zC0OvOeNjbfO+sCnXUg5KSUwEvIwBLXI7+5AYQ+avOO\nQaijjzcSoeVBNFJWgrjw1KwzZJpY/X1hRESOGQjLO0r4BjeJJ5JkJ8W3a2+BQDk=\n=DVEm\n-----END PGP SIGNATURE-----\n", "payload": "tree f7e152d6cc1bbccf200659b7d336ad215f5071ee\nparent 6e819af3a79b20a31d582aff0b626769a4955ae9\nparent 06a77af35dea5dcdabe1676b795d375e119a0407\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1668180099 +0530\ncommitter GitHub <noreply@github.com> 1668180099 +0530\n\nRollup merge of #104146 - Ayush1325:remote-test-server, r=jyn514\n\nRetry binding TCP Socket in remote-test-server\n\nThis allows retrying binding TCP Socket multiple times. This is useful when using emulators as network might not be available in the beginning.\n\nThis was orignally implemented in https://github.com/rust-lang/rust/pull/100316\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05", "html_url": "https://github.com/rust-lang/rust/commit/e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e819af3a79b20a31d582aff0b626769a4955ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e819af3a79b20a31d582aff0b626769a4955ae9", "html_url": "https://github.com/rust-lang/rust/commit/6e819af3a79b20a31d582aff0b626769a4955ae9"}, {"sha": "06a77af35dea5dcdabe1676b795d375e119a0407", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a77af35dea5dcdabe1676b795d375e119a0407", "html_url": "https://github.com/rust-lang/rust/commit/06a77af35dea5dcdabe1676b795d375e119a0407"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "8e7c39e72b68bddf1dd817c524adc4f31bc432db", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=e9b4a84dfa9b8d8eb92a2c324b5c5799dc7f3e05", "patch": "@@ -39,6 +39,8 @@ macro_rules! t {\n }\n \n static TEST: AtomicUsize = AtomicUsize::new(0);\n+const RETRY_INTERVAL: u64 = 1;\n+const NUMBER_OF_RETRIES: usize = 5;\n \n #[derive(Copy, Clone)]\n struct Config {\n@@ -115,7 +117,7 @@ fn main() {\n     let config = Config::parse_args();\n     println!(\"starting test server\");\n \n-    let listener = t!(TcpListener::bind(config.bind));\n+    let listener = bind_socket(config.bind);\n     let (work, tmp): (PathBuf, PathBuf) = if cfg!(target_os = \"android\") {\n         (\"/data/local/tmp/work\".into(), \"/data/local/tmp/work/tmp\".into())\n     } else {\n@@ -159,6 +161,16 @@ fn main() {\n     }\n }\n \n+fn bind_socket(addr: SocketAddr) -> TcpListener {\n+    for _ in 0..(NUMBER_OF_RETRIES - 1) {\n+        if let Ok(x) = TcpListener::bind(addr) {\n+            return x;\n+        }\n+        std::thread::sleep(std::time::Duration::from_secs(RETRY_INTERVAL));\n+    }\n+    TcpListener::bind(addr).unwrap()\n+}\n+\n fn handle_push(socket: TcpStream, work: &Path, config: Config) {\n     let mut reader = BufReader::new(socket);\n     let dst = recv(&work, &mut reader);"}]}