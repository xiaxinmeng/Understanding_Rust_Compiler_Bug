{"sha": "ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYWM0ODM4ZTE5NjJjNjFjYWM4NTI2Y2Q2NDIxYzVmYzllMmJmNDQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-08T20:00:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-08T20:00:45Z"}, "message": "Merge pull request #3080 from topecongiro/issue-3031\n\nFormat macro calls with item-like arguments", "tree": {"sha": "8c3fd7045f990bf4fae0ab3345b3629c263bf80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c3fd7045f990bf4fae0ab3345b3629c263bf80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbu7dtCRBK7hj4Ov3rIwAAdHIIAEf42dBxS7D7uhoVOZz975iU\n5Jd6ZGvTuSiHqmKgtHcgHPetrK25UpyYr6290VwmPmxxMLfMUlnxcAbzCwIr1K93\ne0+uShl0ZJ5j4eYWdEbI6LedQWeH8PYEVmrUVakgaZVDxkS0zhz/k6yZ7T6N+k9d\n4lWHdyTOlmiq9kf3lmMd3azVcFe5CJFfJ8vq8EqOvu1kL/gM2uY5zOACJ1BoqNPs\njAhbyyaks/b6SPdDiXTJ7kxPl5CrfBa0iEALwiToY5syJxdMv9OgGPBoL2eByGKB\niMdwJX3lEpC8fqQE9Se/kuzcChwFU5TvE8a0wVsgyF7eCOhmGOzJHrt8y9GdJg8=\n=x0Lu\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c3fd7045f990bf4fae0ab3345b3629c263bf80a\nparent 1b2e72726f2e395578d4713f75743761677b6a4e\nparent 70177a08a47eb6e3a84cee4d92c0eb4ccbd125c4\nauthor Nick Cameron <nrc@ncameron.org> 1539028845 +1200\ncommitter GitHub <noreply@github.com> 1539028845 +1200\n\nMerge pull request #3080 from topecongiro/issue-3031\n\nFormat macro calls with item-like arguments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "html_url": "https://github.com/rust-lang/rust/commit/ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b2e72726f2e395578d4713f75743761677b6a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2e72726f2e395578d4713f75743761677b6a4e", "html_url": "https://github.com/rust-lang/rust/commit/1b2e72726f2e395578d4713f75743761677b6a4e"}, {"sha": "70177a08a47eb6e3a84cee4d92c0eb4ccbd125c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/70177a08a47eb6e3a84cee4d92c0eb4ccbd125c4", "html_url": "https://github.com/rust-lang/rust/commit/70177a08a47eb6e3a84cee4d92c0eb4ccbd125c4"}], "stats": {"total": 122, "additions": 119, "deletions": 3}, "files": [{"sha": "dab27d8a073bf08930fd0bbc6cb37a5290a03306", "filename": "src/macros.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "patch": "@@ -44,6 +44,7 @@ use shape::{Indent, Shape};\n use source_map::SpanUtils;\n use spanned::Spanned;\n use utils::{format_visibility, mk_sp, rewrite_ident, wrap_str};\n+use visitor::FmtVisitor;\n \n const FORCED_BRACKET_MACROS: &[&str] = &[\"vec!\"];\n \n@@ -63,6 +64,15 @@ pub enum MacroArg {\n     Item(ptr::P<ast::Item>),\n }\n \n+impl MacroArg {\n+    fn is_item(&self) -> bool {\n+        match self {\n+            MacroArg::Item(..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n impl Rewrite for ast::Item {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let mut visitor = ::visitor::FmtVisitor::from_context(context);\n@@ -259,6 +269,7 @@ pub fn rewrite_macro_inner(\n                     }\n                     return return_original_snippet_with_failure_marked(context, mac.span);\n                 }\n+                _ if arg_vec.last().map_or(false, MacroArg::is_item) => continue,\n                 _ => return return_original_snippet_with_failure_marked(context, mac.span),\n             }\n \n@@ -271,6 +282,18 @@ pub fn rewrite_macro_inner(\n         }\n     }\n \n+    if !arg_vec.is_empty() && arg_vec.iter().all(MacroArg::is_item) {\n+        return rewrite_macro_with_items(\n+            context,\n+            &arg_vec,\n+            &macro_name,\n+            shape,\n+            style,\n+            position,\n+            mac.span,\n+        );\n+    }\n+\n     match style {\n         DelimToken::Paren => {\n             // Format macro invocation as function call, preserve the trailing\n@@ -1428,3 +1451,45 @@ fn format_lazy_static(context: &RewriteContext, shape: Shape, ts: &TokenStream)\n \n     Some(result)\n }\n+\n+fn rewrite_macro_with_items(\n+    context: &RewriteContext,\n+    items: &[MacroArg],\n+    macro_name: &str,\n+    shape: Shape,\n+    style: DelimToken,\n+    position: MacroPosition,\n+    span: Span,\n+) -> Option<String> {\n+    let (opener, closer) = match style {\n+        DelimToken::Paren => (\"(\", \")\"),\n+        DelimToken::Bracket => (\"[\", \"]\"),\n+        DelimToken::Brace => (\" {\", \"}\"),\n+        _ => return None,\n+    };\n+    let trailing_semicolon = match style {\n+        DelimToken::Paren | DelimToken::Bracket if position == MacroPosition::Item => \";\",\n+        _ => \"\",\n+    };\n+\n+    let mut visitor = FmtVisitor::from_context(context);\n+    visitor.block_indent = shape.indent.block_indent(context.config);\n+    visitor.last_pos = context.snippet_provider.span_after(span, opener.trim());\n+    for item in items {\n+        let item = match item {\n+            MacroArg::Item(item) => item,\n+            _ => return None,\n+        };\n+        visitor.visit_item(&item);\n+    }\n+\n+    let mut result = String::with_capacity(256);\n+    result.push_str(&macro_name);\n+    result.push_str(opener);\n+    result.push_str(&visitor.block_indent.to_string_with_newline(context.config));\n+    result.push_str(visitor.buffer.trim());\n+    result.push_str(&shape.indent.to_string_with_newline(context.config));\n+    result.push_str(closer);\n+    result.push_str(trailing_semicolon);\n+    return Some(result);\n+}"}, {"sha": "dc08a1200479eb57c70ddc4f792b0ef960f8d1c1", "filename": "tests/source/macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "patch": "@@ -426,3 +426,29 @@ named!(\n \n // #2857\n convert_args!(vec!(1, 2, 3));\n+\n+// #3031\n+thread_local!(\n+/// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new()) ;\n+) ;\n+\n+thread_local![\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new()) ;\n+\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new(0)) ;\n+\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new(), xxx, yyy) ;\n+\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new(1234)) ;\n+\n+] ;"}, {"sha": "c62e058cde682d263d25f5c3b765e5d39a623987", "filename": "tests/target/issue-2523.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/tests%2Ftarget%2Fissue-2523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/tests%2Ftarget%2Fissue-2523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2523.rs?ref=ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "patch": "@@ -11,7 +11,9 @@\n // Format items that appear as arguments of macro call.\n //! ```rust\n //! let x = 3;\n-//! some_macro!(pub fn foo() {\n-//!     println!(\"Don't unindent me!\");\n-//! });\n+//! some_macro!(\n+//!     pub fn foo() {\n+//!         println!(\"Don't unindent me!\");\n+//!     }\n+//! );\n //! ```"}, {"sha": "1bb5ecf9cb1b78c2cba7253932e058868016af63", "filename": "tests/target/macros.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac4838e1962c61cac8526cd6421c5fc9e2bf44/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=ceac4838e1962c61cac8526cd6421c5fc9e2bf44", "patch": "@@ -1007,3 +1007,26 @@ named!(\n \n // #2857\n convert_args!(vec!(1, 2, 3));\n+\n+// #3031\n+thread_local!(\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> = RefCell::new(RootedTraceableSet::new());\n+);\n+\n+thread_local![\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> = RefCell::new(RootedTraceableSet::new());\n+\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new(0));\n+\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new(), xxx, yyy);\n+\n+    /// TLV Holds a set of JSTraceables that need to be rooted\n+    static ROOTED_TRACEABLES: RefCell<RootedTraceableSet> =\n+        RefCell::new(RootedTraceableSet::new(1234));\n+];"}]}