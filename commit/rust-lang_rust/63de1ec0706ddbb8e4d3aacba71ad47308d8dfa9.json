{"sha": "63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9", "node_id": "C_kwDOAAsO6NoAKDYzZGUxZWMwNzA2ZGRiYjhlNGQzYWFjYmE3MWFkNDczMDhkOGRmYTk", "commit": {"author": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-19T13:34:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-19T13:34:20Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Guillaume Gomez <guillaume1.gomez@gmail.com>", "tree": {"sha": "0a95174768005dfac7934c20ac1f0bd97e59ff50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a95174768005dfac7934c20ac1f0bd97e59ff50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/5FcCRBK7hj4Ov3rIwAAYdwIADW7keDAR2GjN/NFWR+qjdZg\nY8xfN/tDQbu2dmd0zRqX7YlIBUtg0eY3PF4GcY/zAjzwiHoQcfg5bocRXGVl81wx\n2xKHmpxT/o+rAcLZXKzu6GnaUZ4ZB1toWJnYh9lnIdrg0fXLOmino/lU4MQ+PB1I\nLnp6//noOLpHRLjOFzZQf7GW+LzKUPP3yzJjob2THCQR3NUNz9zZdeX8D5K1fTqT\nJNp6EHEnNInxG/lOkdGQEL1s/7n4XcEjqw7U01KmhBnosnijknObvOTPZNjjYwze\nFVlV6TSGGQVuEeD9aOdqAHMMsyEElkwwmt0ItisXmsnZ4q+Oc03mC6hmef3hvNI=\n=mgUI\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a95174768005dfac7934c20ac1f0bd97e59ff50\nparent 08fa70e5c5beb8d84c528d8effb481c4f830b28d\nauthor Matthew Kelly <matthew.kelly2@gmail.com> 1660916060 -0400\ncommitter GitHub <noreply@github.com> 1660916060 -0400\n\nApply suggestions from code review\n\nCo-authored-by: Guillaume Gomez <guillaume1.gomez@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9", "html_url": "https://github.com/rust-lang/rust/commit/63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9/comments", "author": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08fa70e5c5beb8d84c528d8effb481c4f830b28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/08fa70e5c5beb8d84c528d8effb481c4f830b28d", "html_url": "https://github.com/rust-lang/rust/commit/08fa70e5c5beb8d84c528d8effb481c4f830b28d"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "a5975c4f472be31b87cf7637ca7cd6453a9cec66", "filename": "compiler/rustc_error_codes/src/error_codes/E0311.md", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "raw_url": "https://github.com/rust-lang/rust/raw/63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md?ref=63de1ec0706ddbb8e4d3aacba71ad47308d8dfa9", "patch": "@@ -1,9 +1,9 @@\n-E0311 occurs when there is insufficient information for the rust compiler to\n+This error occurs when there is insufficient information for the rust compiler to\n prove that some time has a long enough lifetime.\n \n Erroneous code example:\n \n-```compile_fail, E0311\n+```compile_fail,E0311\n use std::borrow::BorrowMut;\n \n trait NestedBorrowMut<U, V> {\n@@ -13,20 +13,19 @@ trait NestedBorrowMut<U, V> {\n impl<T, U, V> NestedBorrowMut<U, V> for T\n where\n     T: BorrowMut<U>,\n-    U: BorrowMut<V>,  // missing lifetime specifier here --> compile fail\n+    U: BorrowMut<V>, // error: missing lifetime specifier\n {\n     fn nested_borrow_mut(&mut self) -> &mut V {\n         self.borrow_mut().borrow_mut()\n     }\n }\n ```\n \n-In this example we have a trait that borrows some inner data element of type V\n-from an outer type T, through an intermediate type U. The compiler is unable to\n-prove that the livetime of U is long enough to support the reference, so it\n-throws E0311. To fix the issue we can explicitly add lifetime specifiers to the\n-trait, which link the lifetimes of the various data types and allow the code\n-to compile.\n+In this example we have a trait that borrows some inner data element of type `V`\n+from an outer type `T`, through an intermediate type `U`. The compiler is unable to\n+prove that the livetime of `U` is long enough to support the reference. To fix the\n+issue we can explicitly add lifetime specifiers to the `NestedBorrowMut` trait, which\n+link the lifetimes of the various data types and allow the code to compile.\n \n Working implementation of the `NestedBorrowMut` trait:\n \n@@ -40,7 +39,7 @@ trait NestedBorrowMut<'a, U, V> {\n impl<'a, T, U, V> NestedBorrowMut<'a, U, V> for T\n where\n     T: BorrowMut<U>,\n-    U: BorrowMut<V> + 'a,\n+    U: BorrowMut<V> + 'a, // Adding lifetime specifier\n {\n     fn nested_borrow_mut(&'a mut self) -> &'a mut V {\n         self.borrow_mut().borrow_mut()"}]}