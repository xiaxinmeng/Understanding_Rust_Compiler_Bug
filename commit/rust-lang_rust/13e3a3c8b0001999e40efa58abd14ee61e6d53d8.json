{"sha": "13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTNhM2M4YjAwMDE5OTllNDBlZmE1OGFiZDE0ZWU2MWU2ZDUzZDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-31T11:20:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-31T11:20:19Z"}, "message": "Rustup to rustc 1.44.0-nightly (211365947 2020-03-30)", "tree": {"sha": "fe0328c863b73dd467c6b3c821c809ec24b1c4d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe0328c863b73dd467c6b3c821c809ec24b1c4d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "html_url": "https://github.com/rust-lang/rust/commit/13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eefebeeb39d6bf58a0babd8dc363e4a83028fe98", "url": "https://api.github.com/repos/rust-lang/rust/commits/eefebeeb39d6bf58a0babd8dc363e4a83028fe98", "html_url": "https://github.com/rust-lang/rust/commit/eefebeeb39d6bf58a0babd8dc363e4a83028fe98"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "cd37a8d267e64cb155fd0bc1505dbd4c42496a2f", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1 +1 @@\n-nightly-2020-03-30\n+nightly-2020-03-31"}, {"sha": "fb95a25606f3671bb9e00186da3b0760c5835361", "filename": "src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,6 +1,6 @@\n use std::borrow::Cow;\n \n-use rustc::mir;\n+use rustc_middle::mir;\n \n use crate::abi::pass_mode::*;\n use crate::prelude::*;"}, {"sha": "2ea4a1659f8bf7fc21613d37f8d12c3833cc625f", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -15,7 +15,7 @@ use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS\n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) -> bool {\n     let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n-        use rustc::middle::dependency_format::Linkage;\n+        use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });\n     if any_dynamic_crate {"}, {"sha": "afb8ac409fe6407625dac695749b41d9f04b09ac", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-use rustc::mir::StatementKind::*;\n+use rustc_middle::mir::StatementKind::*;\n use rustc_index::vec::IndexVec;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "cc7692a6795bd056a0954e71610b8360c52aee8f", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::adjustment::PointerCast;\n+use rustc_middle::ty::adjustment::PointerCast;\n use rustc_index::vec::IndexVec;\n \n use crate::prelude::*;\n@@ -592,7 +592,7 @@ fn trans_stmt<'tcx>(\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n+                    use rustc_middle::middle::lang_items::ExchangeMallocFnLangItem;\n \n                     let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n                     let content_ty = fx.monomorphize(content_ty);"}, {"sha": "4c0e314d3ff421de8dd29afa90da418b8defba76", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::layout::{Integer, Primitive};\n+use rustc_middle::ty::layout::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n use rustc_index::vec::IndexVec;\n "}, {"sha": "1d98404c75fbd1069736316abf1696171723b81d", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -2,11 +2,11 @@ use std::borrow::Cow;\n \n use rustc_span::DUMMY_SP;\n \n-use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc::mir::interpret::{\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n+use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, InterpResult, Scalar,\n };\n-use rustc::ty::{layout::Align, Const, ConstKind};\n+use rustc_middle::ty::{layout::Align, Const, ConstKind};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_mir::interpret::{\n     ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,"}, {"sha": "226d67fe044239a033f64cd4526b85b2c44cc0d7", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -16,7 +16,7 @@ use gimli::{Encoding, Format, LineEncoding, Register, RunTimeEndian, X86_64};\n pub(crate) use emit::{DebugReloc, DebugRelocName};\n \n fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n-    use rustc::ty::layout::Endian;\n+    use rustc_middle::ty::layout::Endian;\n \n     match tcx.data_layout.endian {\n         Endian::Big => RunTimeEndian::Big,"}, {"sha": "b4f0a03bbd52d09563cf0e4e0a3d8aa06fc2b568", "filename": "src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,6 +1,6 @@\n-use rustc::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n-use rustc::middle::cstore::EncodedMetadata;\n-use rustc::mir::mono::CodegenUnit;\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n+use rustc_middle::middle::cstore::EncodedMetadata;\n+use rustc_middle::mir::mono::CodegenUnit;\n use rustc_session::config::{DebugInfo, OutputType};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_codegen_ssa::back::linker::LinkerInfo;\n@@ -170,7 +170,7 @@ pub(super) fn run_aot(\n \n             let dep_node = cgu.codegen_dep_node(tcx);\n             let (ModuleCodegenResult(module, work_product), _) =\n-                tcx.dep_graph.with_task(dep_node, tcx, cgu.name(), module_codegen, rustc::dep_graph::hash_result);\n+                tcx.dep_graph.with_task(dep_node, tcx, cgu.name(), module_codegen, rustc_middle::dep_graph::hash_result);\n \n             if let Some((id, product)) = work_product {\n                 work_products.insert(id, product);\n@@ -207,7 +207,7 @@ pub(super) fn run_aot(\n     let metadata_module = if need_metadata_module {\n         let _timer = tcx.prof.generic_activity(\"codegen crate metadata\");\n         let (metadata_cgu_name, tmp_file) = tcx.sess.time(\"write compressed metadata\", || {\n-            use rustc::mir::mono::CodegenUnitNameBuilder;\n+            use rustc_middle::mir::mono::CodegenUnitNameBuilder;\n \n             let cgu_name_builder = &mut CodegenUnitNameBuilder::new(tcx);\n             let metadata_cgu_name = cgu_name_builder"}, {"sha": "b4d16011cad7f2d05a575d6088d8131ee10f527b", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -81,7 +81,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n }\n \n fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n-    use rustc::middle::dependency_format::Linkage;\n+    use rustc_middle::middle::dependency_format::Linkage;\n \n     let mut dylib_paths = Vec::new();\n "}, {"sha": "6aa736d18ce6eb664bf5d1447f3f586f2243e02b", "filename": "src/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,7 +1,7 @@\n use std::any::Any;\n \n-use rustc::middle::cstore::EncodedMetadata;\n-use rustc::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n+use rustc_middle::middle::cstore::EncodedMetadata;\n+use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n "}, {"sha": "b99a3dffa11c2ad3fb628e68fc2cb6059e72fc0c", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,7 +1,7 @@\n use crate::intrinsics::*;\n use crate::prelude::*;\n \n-use rustc::ty::subst::SubstsRef;\n+use rustc_middle::ty::subst::SubstsRef;\n \n pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,"}, {"sha": "cf7decb046492edaf9a0047f2cf4826c2dbc322b", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -67,7 +67,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             let total_len = lane_count * 2;\n \n             let indexes = {\n-                use rustc::mir::interpret::*;\n+                use rustc_middle::mir::interpret::*;\n                 let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n \n                 let idx_bytes = match idx_const.val {\n@@ -81,7 +81,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n                 (0..ret_lane_count).map(|i| {\n                     let i = usize::try_from(i).unwrap();\n-                    let idx = rustc::mir::interpret::read_target_uint(\n+                    let idx = rustc_middle::mir::interpret::read_target_uint(\n                         fx.tcx.data_layout.endian,\n                         &idx_bytes[4*i.. 4*i + 4],\n                     ).expect(\"read_target_uint\");"}, {"sha": "b23e74cd5bfe4fc6d9f7dde617602bf172e54245", "filename": "src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -4,7 +4,7 @@\n extern crate flate2;\n extern crate libc;\n extern crate tempfile;\n-extern crate rustc;\n+extern crate rustc_middle;\n extern crate rustc_codegen_ssa;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n@@ -21,11 +21,11 @@ extern crate rustc_ast;\n \n use std::any::Any;\n \n-use rustc::dep_graph::{DepGraph, WorkProduct, WorkProductId};\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n+use rustc_middle::dep_graph::{DepGraph, WorkProduct, WorkProductId};\n+use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n use rustc_session::config::OutputFilenames;\n-use rustc::ty::query::Providers;\n-use rustc::util::common::ErrorReported;\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::util::common::ErrorReported;\n use rustc_codegen_ssa::traits::CodegenBackend;\n \n use cranelift_codegen::settings;\n@@ -68,12 +68,12 @@ mod prelude {\n     pub(crate) use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n     pub(crate) use rustc_span::Span;\n \n-    pub(crate) use rustc::bug;\n+    pub(crate) use rustc_middle::bug;\n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-    pub(crate) use rustc::mir::{self, *};\n+    pub(crate) use rustc_middle::mir::{self, *};\n     pub(crate) use rustc_session::Session;\n-    pub(crate) use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyAndLayout, VariantIdx};\n-    pub(crate) use rustc::ty::{\n+    pub(crate) use rustc_middle::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyAndLayout, VariantIdx};\n+    pub(crate) use rustc_middle::ty::{\n         self, FnSig, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeAndMut, TypeFoldable,\n     };\n "}, {"sha": "893ec851f1034149f2154104aee1b829d54a6a6b", "filename": "src/linkage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinkage.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -1,4 +1,4 @@\n-use rustc::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n+use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n "}, {"sha": "193d1cde163a04715efb95a231b1778b2d51b91b", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) {\n-    use rustc::middle::lang_items::StartFnLangItem;\n+    use rustc_middle::middle::lang_items::StartFnLangItem;\n     use rustc_session::config::EntryFnType;\n \n     let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {"}, {"sha": "daf2127a376547b9f46ca06f6d8497630e39cafd", "filename": "src/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -2,9 +2,9 @@ use std::convert::TryFrom;\n use std::fs::File;\n use std::path::Path;\n \n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n+use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n use rustc_session::config;\n-use rustc::ty::TyCtxt;\n+use rustc_middle::ty::TyCtxt;\n use rustc_codegen_ssa::METADATA_FILENAME;\n use rustc_data_structures::owning_ref::{self, OwningRef};\n use rustc_data_structures::rustc_erase_owner;\n@@ -104,7 +104,7 @@ pub(crate) fn write_metadata<P: WriteMetadata>(tcx: TyCtxt<'_>, product: &mut P)\n         .unwrap();\n \n     product.add_rustc_section(\n-        rustc::middle::exported_symbols::metadata_symbol_name(tcx),\n+        rustc_middle::middle::exported_symbols::metadata_symbol_name(tcx),\n         compressed,\n         tcx.sess.target.target.options.is_like_osx,\n     );"}, {"sha": "4f196d6f056ed1f0bdf6acb22db998311921b8ba", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e3a3c8b0001999e40efa58abd14ee61e6d53d8/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=13e3a3c8b0001999e40efa58abd14ee61e6d53d8", "patch": "@@ -225,7 +225,7 @@ impl<'tcx> CValue<'tcx> {\n                     .iconst(clif_ty, u64::try_from(const_val).expect(\"uint\") as i64)\n             }\n             ty::TyKind::Int(_) => {\n-                let const_val = rustc::mir::interpret::sign_extend(const_val, layout.size);\n+                let const_val = rustc_middle::mir::interpret::sign_extend(const_val, layout.size);\n                 fx.bcx.ins().iconst(clif_ty, i64::try_from(const_val as i128).unwrap())\n             }\n             ty::TyKind::Float(FloatTy::F32) => {"}]}