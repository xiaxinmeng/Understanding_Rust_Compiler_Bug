{"sha": "509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOWVhOGVmYzYzMGQ0ZTMyOWRjMmE0NDBhMmMwZmMyYTNmZWEyMzY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-07T20:51:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T06:46:24Z"}, "message": "Only suggest casting numeric types using `into()`", "tree": {"sha": "78862b195316fc545e6e2cb36c798f5111e3daa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78862b195316fc545e6e2cb36c798f5111e3daa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "html_url": "https://github.com/rust-lang/rust/commit/509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af91d9955b036630657d69210ad4040e1725c14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af91d9955b036630657d69210ad4040e1725c14e", "html_url": "https://github.com/rust-lang/rust/commit/af91d9955b036630657d69210ad4040e1725c14e"}], "stats": {"total": 1101, "additions": 303, "deletions": 798}, "files": [{"sha": "dbda8a6e32bab3ceedaceb2edc767dd5a7ecd6ab", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "patch": "@@ -331,13 +331,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // We want to minimize the amount of casting operations that are suggested, as it can be a\n         // lossy operation with potentially bad side effects, so we only suggest when encountering\n         // an expression that indicates that the original type couldn't be directly changed.\n-        let can_cast = match expr.node {\n-            hir::ExprPath(..) |\n-            hir::ExprCall(..) |\n-            hir::ExprMethodCall(..) |\n-            hir::ExprBinary(..) => true,\n-            _ => false,\n-        };\n+        //\n+        // For now, don't suggest casting with `as`.\n+        let can_cast = false;\n \n         let needs_paren = match expr.node {\n             hir::ExprBinary(..) => true,\n@@ -369,7 +365,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         (None, _) | (_, None) => {\n                             if can_cast {\n                                 err.span_suggestion(expr.span,\n-                                                    &format!(\"{}, which {}\", msg, depending_on_isize),\n+                                                    &format!(\"{}, which {}\",\n+                                                             msg,\n+                                                             depending_on_isize),\n                                                     cast_suggestion);\n                             }\n                         }\n@@ -393,7 +391,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         (None, _) | (_, None) => {\n                             if can_cast {\n                                 err.span_suggestion(expr.span,\n-                                                    &format!(\"{}, which {}\", msg, depending_on_usize),\n+                                                    &format!(\"{}, which {}\",\n+                                                             msg,\n+                                                             depending_on_usize),\n                                                     cast_suggestion);\n                             }\n                         }\n@@ -420,12 +420,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                             (None, _) => {\n                                 err.span_suggestion(expr.span,\n-                                                    &format!(\"{}, which {}\", msg, depending_on_isize),\n+                                                    &format!(\"{}, which {}\",\n+                                                             msg,\n+                                                             depending_on_isize),\n                                                     cast_suggestion);\n                             }\n                             (_, None) => {\n                                 err.span_suggestion(expr.span,\n-                                                    &format!(\"{}, which {}\", msg, depending_on_usize),\n+                                                    &format!(\"{}, which {}\",\n+                                                             msg,\n+                                                             depending_on_usize),\n                                                     cast_suggestion);\n                             }\n                             _ => {\n@@ -452,12 +456,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                             (None, _) => {\n                                 err.span_suggestion(expr.span,\n-                                                    &format!(\"{}, which {}\", msg, depending_on_usize),\n+                                                    &format!(\"{}, which {}\",\n+                                                             msg,\n+                                                             depending_on_usize),\n                                                     cast_suggestion);\n                             }\n                             (_, None) => {\n                                 err.span_suggestion(expr.span,\n-                                                    &format!(\"{}, which {}\", msg, depending_on_isize),\n+                                                    &format!(\"{}, which {}\",\n+                                                             msg,\n+                                                             depending_on_isize),\n                                                     cast_suggestion);\n                             }\n                             _ => {"}, {"sha": "5d25cb2f93c158c83d65d382692e18efadeb2d24", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "patch": "@@ -6,10 +6,6 @@ error[E0308]: mismatched types\n ...\n 37 |     write!(hello);\n    |     -------------- in this macro invocation\n-help: you can cast an `usize` to `u64`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-26 |                   ($arr.len() * size_of($arr[0])) as u64); //~ ERROR mismatched types\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:32:19"}, {"sha": "2092b6bce37c1733bcd4da00647779542b548eef", "filename": "src/test/ui/suggestions/numeric-cast-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast-2.rs?ref=509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "patch": "@@ -12,7 +12,9 @@ fn foo() -> i32 {\n     4\n }\n fn main() {\n-    let x: u32 = foo();\n+    let x: u16 = foo();\n+    //~^ ERROR mismatched types\n+    let y: i64 = x + x;\n     //~^ ERROR mismatched types\n     let z: i32 = x + x;\n     //~^ ERROR mismatched types"}, {"sha": "90086d247d6e92764f3e2f925c54307d15ffaa61", "filename": "src/test/ui/suggestions/numeric-cast-2.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast-2.stderr?ref=509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "patch": "@@ -1,22 +1,20 @@\n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:15:18\n    |\n-15 |     let x: u32 = foo();\n-   |                  ^^^^^ expected u32, found i32\n-help: you can cast an `i32` to `u32`, which will sign-extend the source value\n-   |\n-15 |     let x: u32 = foo() as u32;\n-   |                  ^^^^^^^^^^^^\n+15 |     let x: u16 = foo();\n+   |                  ^^^^^ expected u16, found i32\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:17:18\n    |\n-17 |     let z: i32 = x + x;\n-   |                  ^^^^^ expected i32, found u32\n-help: you can cast an `u32` to `i32`, which will truncate the source value\n+17 |     let y: i64 = x + x;\n+   |                  ^^^^^ expected i64, found u16\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-2.rs:19:18\n    |\n-17 |     let z: i32 = (x + x) as i32;\n-   |                  ^^^^^^^^^^^^^^\n+19 |     let z: i32 = x + x;\n+   |                  ^^^^^ expected i32, found u16\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "6e144037ec2208a8eddf94dd5e7976696c862a4e", "filename": "src/test/ui/suggestions/numeric-cast.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.rs?ref=509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "patch": "@@ -46,10 +46,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<usize>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<usize>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<isize>(x_usize);\n     //~^ ERROR mismatched types\n@@ -72,10 +70,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<isize>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<isize>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<u64>(x_usize);\n     //~^ ERROR mismatched types\n@@ -98,10 +94,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u64>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<u64>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<i64>(x_usize);\n     //~^ ERROR mismatched types\n@@ -124,10 +118,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i64>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<i64>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<u32>(x_usize);\n     //~^ ERROR mismatched types\n@@ -150,10 +142,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u32>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<u32>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<i32>(x_usize);\n     //~^ ERROR mismatched types\n@@ -176,10 +166,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i32>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<i32>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<u16>(x_usize);\n     //~^ ERROR mismatched types\n@@ -202,10 +190,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u16>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<u16>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<i16>(x_usize);\n     //~^ ERROR mismatched types\n@@ -228,10 +214,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i16>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<i16>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<u8>(x_usize);\n     //~^ ERROR mismatched types\n@@ -254,10 +238,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u8>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<u8>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<i8>(x_usize);\n     //~^ ERROR mismatched types\n@@ -280,10 +262,8 @@ fn main() {\n     foo::<i8>(x_i8);\n     foo::<i8>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n     foo::<i8>(x_f32);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause Undefined Behavior\n \n     foo::<f64>(x_usize);\n     //~^ ERROR mismatched types\n@@ -331,6 +311,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<f32>(x_f64);\n     //~^ ERROR mismatched types\n-    //~| WARN casting here will cause undefined behavior\n     foo::<f32>(x_f32);\n }"}, {"sha": "9c05dacf4ec785869445f5ea5a4893a185551db6", "filename": "src/test/ui/suggestions/numeric-cast.stderr", "status": "modified", "additions": 269, "deletions": 747, "changes": 1016, "blob_url": "https://github.com/rust-lang/rust/blob/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509ea8efc630d4e329dc2a440a2c0fc2a3fea236/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr?ref=509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "patch": "@@ -3,1362 +3,884 @@ error[E0308]: mismatched types\n    |\n 29 |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected usize, found u64\n-help: you can cast an `u64` to `usize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-29 |     foo::<usize>(x_u64 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:31:18\n    |\n 31 |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected usize, found u32\n-help: you can cast an `u32` to `usize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-31 |     foo::<usize>(x_u32 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:33:18\n    |\n 33 |     foo::<usize>(x_u16);\n    |                  ^^^^^ expected usize, found u16\n-help: you can cast an `u16` to `usize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-33 |     foo::<usize>(x_u16 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:35:18\n    |\n 35 |     foo::<usize>(x_u8);\n    |                  ^^^^ expected usize, found u8\n-help: you can cast an `u8` to `usize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-35 |     foo::<usize>(x_u8 as usize);\n-   |                  ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:37:18\n    |\n 37 |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected usize, found isize\n-help: you can cast an `isize` to `usize`, which will sign-extend the source value\n-   |\n-37 |     foo::<usize>(x_isize as usize);\n-   |                  ^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:39:18\n    |\n 39 |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected usize, found i64\n-help: you can cast an `i64` to `usize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-39 |     foo::<usize>(x_i64 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:41:18\n    |\n 41 |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected usize, found i32\n-help: you can cast an `i32` to `usize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-41 |     foo::<usize>(x_i32 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:43:18\n    |\n 43 |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected usize, found i16\n-help: you can cast an `i16` to `usize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-43 |     foo::<usize>(x_i16 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:45:18\n    |\n 45 |     foo::<usize>(x_i8);\n    |                  ^^^^ expected usize, found i8\n-help: you can cast an `i8` to `usize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-45 |     foo::<usize>(x_i8 as usize);\n-   |                  ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:47:18\n    |\n 47 |     foo::<usize>(x_f64);\n    |                  ^^^^^ expected usize, found f64\n-   |\n-   = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `usize`, rounding the float towards zero\n-   |\n-47 |     foo::<usize>(x_f64 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:50:18\n+  --> $DIR/numeric-cast.rs:49:18\n    |\n-50 |     foo::<usize>(x_f32);\n+49 |     foo::<usize>(x_f32);\n    |                  ^^^^^ expected usize, found f32\n-   |\n-   = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `usize`, rounding the float towards zero\n-   |\n-50 |     foo::<usize>(x_f32 as usize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:54:18\n+  --> $DIR/numeric-cast.rs:52:18\n    |\n-54 |     foo::<isize>(x_usize);\n+52 |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected isize, found usize\n-help: you can cast an `usize` to `isize`, which will truncate the source value\n-   |\n-54 |     foo::<isize>(x_usize as isize);\n-   |                  ^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:56:18\n+  --> $DIR/numeric-cast.rs:54:18\n    |\n-56 |     foo::<isize>(x_u64);\n+54 |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected isize, found u64\n-help: you can cast an `u64` to `isize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-56 |     foo::<isize>(x_u64 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:58:18\n+  --> $DIR/numeric-cast.rs:56:18\n    |\n-58 |     foo::<isize>(x_u32);\n+56 |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected isize, found u32\n-help: you can cast an `u32` to `isize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-58 |     foo::<isize>(x_u32 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:60:18\n+  --> $DIR/numeric-cast.rs:58:18\n    |\n-60 |     foo::<isize>(x_u16);\n+58 |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected isize, found u16\n-help: you can cast an `u16` to `isize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-60 |     foo::<isize>(x_u16 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:62:18\n+  --> $DIR/numeric-cast.rs:60:18\n    |\n-62 |     foo::<isize>(x_u8);\n+60 |     foo::<isize>(x_u8);\n    |                  ^^^^ expected isize, found u8\n-help: you can cast an `u8` to `isize`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-62 |     foo::<isize>(x_u8 as isize);\n-   |                  ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:65:18\n+  --> $DIR/numeric-cast.rs:63:18\n    |\n-65 |     foo::<isize>(x_i64);\n+63 |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected isize, found i64\n-help: you can cast an `i64` to `isize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-65 |     foo::<isize>(x_i64 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:67:18\n+  --> $DIR/numeric-cast.rs:65:18\n    |\n-67 |     foo::<isize>(x_i32);\n+65 |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected isize, found i32\n-help: you can cast an `i32` to `isize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-67 |     foo::<isize>(x_i32 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:69:18\n+  --> $DIR/numeric-cast.rs:67:18\n    |\n-69 |     foo::<isize>(x_i16);\n+67 |     foo::<isize>(x_i16);\n    |                  ^^^^^ expected isize, found i16\n-help: you can cast an `i16` to `isize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-69 |     foo::<isize>(x_i16 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:71:18\n+  --> $DIR/numeric-cast.rs:69:18\n    |\n-71 |     foo::<isize>(x_i8);\n+69 |     foo::<isize>(x_i8);\n    |                  ^^^^ expected isize, found i8\n-help: you can cast an `i8` to `isize`, which will truncate or zero-extend depending on the bit width of `isize`\n-   |\n-71 |     foo::<isize>(x_i8 as isize);\n-   |                  ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:73:18\n+  --> $DIR/numeric-cast.rs:71:18\n    |\n-73 |     foo::<isize>(x_f64);\n+71 |     foo::<isize>(x_f64);\n    |                  ^^^^^ expected isize, found f64\n-   |\n-   = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `isize`, rounding the float towards zero\n-   |\n-73 |     foo::<isize>(x_f64 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:76:18\n+  --> $DIR/numeric-cast.rs:73:18\n    |\n-76 |     foo::<isize>(x_f32);\n+73 |     foo::<isize>(x_f32);\n    |                  ^^^^^ expected isize, found f32\n-   |\n-   = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `isize`, rounding the float towards zero\n-   |\n-76 |     foo::<isize>(x_f32 as isize);\n-   |                  ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:80:16\n+  --> $DIR/numeric-cast.rs:76:16\n    |\n-80 |     foo::<u64>(x_usize);\n+76 |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected u64, found usize\n-help: you can cast an `usize` to `u64`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-80 |     foo::<u64>(x_usize as u64);\n-   |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:83:16\n+  --> $DIR/numeric-cast.rs:79:16\n    |\n-83 |     foo::<u64>(x_u32);\n+79 |     foo::<u64>(x_u32);\n    |                ^^^^^ expected u64, found u32\n help: you can cast an `u32` to `u64`, which will zero-extend the source value\n    |\n-83 |     foo::<u64>(x_u32.into());\n+79 |     foo::<u64>(x_u32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:85:16\n+  --> $DIR/numeric-cast.rs:81:16\n    |\n-85 |     foo::<u64>(x_u16);\n+81 |     foo::<u64>(x_u16);\n    |                ^^^^^ expected u64, found u16\n help: you can cast an `u16` to `u64`, which will zero-extend the source value\n    |\n-85 |     foo::<u64>(x_u16.into());\n+81 |     foo::<u64>(x_u16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:87:16\n+  --> $DIR/numeric-cast.rs:83:16\n    |\n-87 |     foo::<u64>(x_u8);\n+83 |     foo::<u64>(x_u8);\n    |                ^^^^ expected u64, found u8\n help: you can cast an `u8` to `u64`, which will zero-extend the source value\n    |\n-87 |     foo::<u64>(x_u8.into());\n+83 |     foo::<u64>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:89:16\n+  --> $DIR/numeric-cast.rs:85:16\n    |\n-89 |     foo::<u64>(x_isize);\n+85 |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected u64, found isize\n-help: you can cast an `isize` to `u64`, which will truncate or zero-extend depending on the bit width of `usize`\n-   |\n-89 |     foo::<u64>(x_isize as u64);\n-   |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:91:16\n+  --> $DIR/numeric-cast.rs:87:16\n    |\n-91 |     foo::<u64>(x_i64);\n+87 |     foo::<u64>(x_i64);\n    |                ^^^^^ expected u64, found i64\n-help: you can cast an `i64` to `u64`, which will sign-extend the source value\n-   |\n-91 |     foo::<u64>(x_i64 as u64);\n-   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:93:16\n+  --> $DIR/numeric-cast.rs:89:16\n    |\n-93 |     foo::<u64>(x_i32);\n+89 |     foo::<u64>(x_i32);\n    |                ^^^^^ expected u64, found i32\n-help: you can cast an `i32` to `u64`, which will sign-extend the source value\n-   |\n-93 |     foo::<u64>(x_i32 as u64);\n-   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:95:16\n+  --> $DIR/numeric-cast.rs:91:16\n    |\n-95 |     foo::<u64>(x_i16);\n+91 |     foo::<u64>(x_i16);\n    |                ^^^^^ expected u64, found i16\n-help: you can cast an `i16` to `u64`, which will sign-extend the source value\n-   |\n-95 |     foo::<u64>(x_i16 as u64);\n-   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:97:16\n+  --> $DIR/numeric-cast.rs:93:16\n    |\n-97 |     foo::<u64>(x_i8);\n+93 |     foo::<u64>(x_i8);\n    |                ^^^^ expected u64, found i8\n-help: you can cast an `i8` to `u64`, which will sign-extend the source value\n-   |\n-97 |     foo::<u64>(x_i8 as u64);\n-   |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:99:16\n+  --> $DIR/numeric-cast.rs:95:16\n    |\n-99 |     foo::<u64>(x_f64);\n+95 |     foo::<u64>(x_f64);\n    |                ^^^^^ expected u64, found f64\n-   |\n-   = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `u64`, rounding the float towards zero\n-   |\n-99 |     foo::<u64>(x_f64 as u64);\n-   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:102:16\n-    |\n-102 |     foo::<u64>(x_f32);\n-    |                ^^^^^ expected u64, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `u64`, rounding the float towards zero\n-    |\n-102 |     foo::<u64>(x_f32 as u64);\n-    |                ^^^^^^^^^^^^\n+  --> $DIR/numeric-cast.rs:97:16\n+   |\n+97 |     foo::<u64>(x_f32);\n+   |                ^^^^^ expected u64, found f32\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:106:16\n+   --> $DIR/numeric-cast.rs:100:16\n     |\n-106 |     foo::<i64>(x_usize);\n+100 |     foo::<i64>(x_usize);\n     |                ^^^^^^^ expected i64, found usize\n-help: you can cast an `usize` to `i64`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-106 |     foo::<i64>(x_usize as i64);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:108:16\n+   --> $DIR/numeric-cast.rs:102:16\n     |\n-108 |     foo::<i64>(x_u64);\n+102 |     foo::<i64>(x_u64);\n     |                ^^^^^ expected i64, found u64\n-help: you can cast an `u64` to `i64`, which will truncate the source value\n-    |\n-108 |     foo::<i64>(x_u64 as i64);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:110:16\n+   --> $DIR/numeric-cast.rs:104:16\n     |\n-110 |     foo::<i64>(x_u32);\n+104 |     foo::<i64>(x_u32);\n     |                ^^^^^ expected i64, found u32\n-help: you can cast an `u32` to `i64`, which will zero-extend the source value\n-    |\n-110 |     foo::<i64>(x_u32 as i64);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:112:16\n+   --> $DIR/numeric-cast.rs:106:16\n     |\n-112 |     foo::<i64>(x_u16);\n+106 |     foo::<i64>(x_u16);\n     |                ^^^^^ expected i64, found u16\n-help: you can cast an `u16` to `i64`, which will zero-extend the source value\n-    |\n-112 |     foo::<i64>(x_u16 as i64);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:114:16\n+   --> $DIR/numeric-cast.rs:108:16\n     |\n-114 |     foo::<i64>(x_u8);\n+108 |     foo::<i64>(x_u8);\n     |                ^^^^ expected i64, found u8\n-help: you can cast an `u8` to `i64`, which will zero-extend the source value\n-    |\n-114 |     foo::<i64>(x_u8 as i64);\n-    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:116:16\n+   --> $DIR/numeric-cast.rs:110:16\n     |\n-116 |     foo::<i64>(x_isize);\n+110 |     foo::<i64>(x_isize);\n     |                ^^^^^^^ expected i64, found isize\n-help: you can cast an `isize` to `i64`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-116 |     foo::<i64>(x_isize as i64);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:119:16\n+   --> $DIR/numeric-cast.rs:113:16\n     |\n-119 |     foo::<i64>(x_i32);\n+113 |     foo::<i64>(x_i32);\n     |                ^^^^^ expected i64, found i32\n help: you can cast an `i32` to `i64`, which will sign-extend the source value\n     |\n-119 |     foo::<i64>(x_i32.into());\n+113 |     foo::<i64>(x_i32.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:121:16\n+   --> $DIR/numeric-cast.rs:115:16\n     |\n-121 |     foo::<i64>(x_i16);\n+115 |     foo::<i64>(x_i16);\n     |                ^^^^^ expected i64, found i16\n help: you can cast an `i16` to `i64`, which will sign-extend the source value\n     |\n-121 |     foo::<i64>(x_i16.into());\n+115 |     foo::<i64>(x_i16.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:123:16\n+   --> $DIR/numeric-cast.rs:117:16\n     |\n-123 |     foo::<i64>(x_i8);\n+117 |     foo::<i64>(x_i8);\n     |                ^^^^ expected i64, found i8\n help: you can cast an `i8` to `i64`, which will sign-extend the source value\n     |\n-123 |     foo::<i64>(x_i8.into());\n+117 |     foo::<i64>(x_i8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:125:16\n+   --> $DIR/numeric-cast.rs:119:16\n     |\n-125 |     foo::<i64>(x_f64);\n+119 |     foo::<i64>(x_f64);\n     |                ^^^^^ expected i64, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `i64`, rounding the float towards zero\n-    |\n-125 |     foo::<i64>(x_f64 as i64);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:128:16\n+   --> $DIR/numeric-cast.rs:121:16\n     |\n-128 |     foo::<i64>(x_f32);\n+121 |     foo::<i64>(x_f32);\n     |                ^^^^^ expected i64, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `i64`, rounding the float towards zero\n-    |\n-128 |     foo::<i64>(x_f32 as i64);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:132:16\n+   --> $DIR/numeric-cast.rs:124:16\n     |\n-132 |     foo::<u32>(x_usize);\n+124 |     foo::<u32>(x_usize);\n     |                ^^^^^^^ expected u32, found usize\n-help: you can cast an `usize` to `u32`, which will truncate or zero-extend depending on the bit width of `usize`\n-    |\n-132 |     foo::<u32>(x_usize as u32);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:134:16\n+   --> $DIR/numeric-cast.rs:126:16\n     |\n-134 |     foo::<u32>(x_u64);\n+126 |     foo::<u32>(x_u64);\n     |                ^^^^^ expected u32, found u64\n-help: you can cast an `u64` to `u32`, which will truncate the source value\n-    |\n-134 |     foo::<u32>(x_u64 as u32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:137:16\n+   --> $DIR/numeric-cast.rs:129:16\n     |\n-137 |     foo::<u32>(x_u16);\n+129 |     foo::<u32>(x_u16);\n     |                ^^^^^ expected u32, found u16\n help: you can cast an `u16` to `u32`, which will zero-extend the source value\n     |\n-137 |     foo::<u32>(x_u16.into());\n+129 |     foo::<u32>(x_u16.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:139:16\n+   --> $DIR/numeric-cast.rs:131:16\n     |\n-139 |     foo::<u32>(x_u8);\n+131 |     foo::<u32>(x_u8);\n     |                ^^^^ expected u32, found u8\n help: you can cast an `u8` to `u32`, which will zero-extend the source value\n     |\n-139 |     foo::<u32>(x_u8.into());\n+131 |     foo::<u32>(x_u8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:141:16\n+   --> $DIR/numeric-cast.rs:133:16\n     |\n-141 |     foo::<u32>(x_isize);\n+133 |     foo::<u32>(x_isize);\n     |                ^^^^^^^ expected u32, found isize\n-help: you can cast an `isize` to `u32`, which will truncate or zero-extend depending on the bit width of `usize`\n-    |\n-141 |     foo::<u32>(x_isize as u32);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:143:16\n+   --> $DIR/numeric-cast.rs:135:16\n     |\n-143 |     foo::<u32>(x_i64);\n+135 |     foo::<u32>(x_i64);\n     |                ^^^^^ expected u32, found i64\n-help: you can cast an `i64` to `u32`, which will truncate the source value\n-    |\n-143 |     foo::<u32>(x_i64 as u32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:145:16\n+   --> $DIR/numeric-cast.rs:137:16\n     |\n-145 |     foo::<u32>(x_i32);\n+137 |     foo::<u32>(x_i32);\n     |                ^^^^^ expected u32, found i32\n-help: you can cast an `i32` to `u32`, which will sign-extend the source value\n-    |\n-145 |     foo::<u32>(x_i32 as u32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:147:16\n+   --> $DIR/numeric-cast.rs:139:16\n     |\n-147 |     foo::<u32>(x_i16);\n+139 |     foo::<u32>(x_i16);\n     |                ^^^^^ expected u32, found i16\n-help: you can cast an `i16` to `u32`, which will sign-extend the source value\n-    |\n-147 |     foo::<u32>(x_i16 as u32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:149:16\n+   --> $DIR/numeric-cast.rs:141:16\n     |\n-149 |     foo::<u32>(x_i8);\n+141 |     foo::<u32>(x_i8);\n     |                ^^^^ expected u32, found i8\n-help: you can cast an `i8` to `u32`, which will sign-extend the source value\n-    |\n-149 |     foo::<u32>(x_i8 as u32);\n-    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:151:16\n+   --> $DIR/numeric-cast.rs:143:16\n     |\n-151 |     foo::<u32>(x_f64);\n+143 |     foo::<u32>(x_f64);\n     |                ^^^^^ expected u32, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `u32`, rounding the float towards zero\n-    |\n-151 |     foo::<u32>(x_f64 as u32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:154:16\n+   --> $DIR/numeric-cast.rs:145:16\n     |\n-154 |     foo::<u32>(x_f32);\n+145 |     foo::<u32>(x_f32);\n     |                ^^^^^ expected u32, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `u32`, rounding the float towards zero\n-    |\n-154 |     foo::<u32>(x_f32 as u32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:158:16\n+   --> $DIR/numeric-cast.rs:148:16\n     |\n-158 |     foo::<i32>(x_usize);\n+148 |     foo::<i32>(x_usize);\n     |                ^^^^^^^ expected i32, found usize\n-help: you can cast an `usize` to `i32`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-158 |     foo::<i32>(x_usize as i32);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:160:16\n+   --> $DIR/numeric-cast.rs:150:16\n     |\n-160 |     foo::<i32>(x_u64);\n+150 |     foo::<i32>(x_u64);\n     |                ^^^^^ expected i32, found u64\n-help: you can cast an `u64` to `i32`, which will truncate the source value\n-    |\n-160 |     foo::<i32>(x_u64 as i32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:162:16\n+   --> $DIR/numeric-cast.rs:152:16\n     |\n-162 |     foo::<i32>(x_u32);\n+152 |     foo::<i32>(x_u32);\n     |                ^^^^^ expected i32, found u32\n-help: you can cast an `u32` to `i32`, which will truncate the source value\n-    |\n-162 |     foo::<i32>(x_u32 as i32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:164:16\n+   --> $DIR/numeric-cast.rs:154:16\n     |\n-164 |     foo::<i32>(x_u16);\n+154 |     foo::<i32>(x_u16);\n     |                ^^^^^ expected i32, found u16\n-help: you can cast an `u16` to `i32`, which will zero-extend the source value\n-    |\n-164 |     foo::<i32>(x_u16 as i32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:166:16\n+   --> $DIR/numeric-cast.rs:156:16\n     |\n-166 |     foo::<i32>(x_u8);\n+156 |     foo::<i32>(x_u8);\n     |                ^^^^ expected i32, found u8\n-help: you can cast an `u8` to `i32`, which will zero-extend the source value\n-    |\n-166 |     foo::<i32>(x_u8 as i32);\n-    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:168:16\n+   --> $DIR/numeric-cast.rs:158:16\n     |\n-168 |     foo::<i32>(x_isize);\n+158 |     foo::<i32>(x_isize);\n     |                ^^^^^^^ expected i32, found isize\n-help: you can cast an `isize` to `i32`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-168 |     foo::<i32>(x_isize as i32);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:170:16\n+   --> $DIR/numeric-cast.rs:160:16\n     |\n-170 |     foo::<i32>(x_i64);\n+160 |     foo::<i32>(x_i64);\n     |                ^^^^^ expected i32, found i64\n-help: you can cast an `i64` to `i32`, which will truncate the source value\n-    |\n-170 |     foo::<i32>(x_i64 as i32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:173:16\n+   --> $DIR/numeric-cast.rs:163:16\n     |\n-173 |     foo::<i32>(x_i16);\n+163 |     foo::<i32>(x_i16);\n     |                ^^^^^ expected i32, found i16\n help: you can cast an `i16` to `i32`, which will sign-extend the source value\n     |\n-173 |     foo::<i32>(x_i16.into());\n+163 |     foo::<i32>(x_i16.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:175:16\n+   --> $DIR/numeric-cast.rs:165:16\n     |\n-175 |     foo::<i32>(x_i8);\n+165 |     foo::<i32>(x_i8);\n     |                ^^^^ expected i32, found i8\n help: you can cast an `i8` to `i32`, which will sign-extend the source value\n     |\n-175 |     foo::<i32>(x_i8.into());\n+165 |     foo::<i32>(x_i8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:177:16\n+   --> $DIR/numeric-cast.rs:167:16\n     |\n-177 |     foo::<i32>(x_f64);\n+167 |     foo::<i32>(x_f64);\n     |                ^^^^^ expected i32, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `i32`, rounding the float towards zero\n-    |\n-177 |     foo::<i32>(x_f64 as i32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:180:16\n+   --> $DIR/numeric-cast.rs:169:16\n     |\n-180 |     foo::<i32>(x_f32);\n+169 |     foo::<i32>(x_f32);\n     |                ^^^^^ expected i32, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `i32`, rounding the float towards zero\n-    |\n-180 |     foo::<i32>(x_f32 as i32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:184:16\n+   --> $DIR/numeric-cast.rs:172:16\n     |\n-184 |     foo::<u16>(x_usize);\n+172 |     foo::<u16>(x_usize);\n     |                ^^^^^^^ expected u16, found usize\n-help: you can cast an `usize` to `u16`, which will truncate or zero-extend depending on the bit width of `usize`\n-    |\n-184 |     foo::<u16>(x_usize as u16);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:186:16\n+   --> $DIR/numeric-cast.rs:174:16\n     |\n-186 |     foo::<u16>(x_u64);\n+174 |     foo::<u16>(x_u64);\n     |                ^^^^^ expected u16, found u64\n-help: you can cast an `u64` to `u16`, which will truncate the source value\n-    |\n-186 |     foo::<u16>(x_u64 as u16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:188:16\n+   --> $DIR/numeric-cast.rs:176:16\n     |\n-188 |     foo::<u16>(x_u32);\n+176 |     foo::<u16>(x_u32);\n     |                ^^^^^ expected u16, found u32\n-help: you can cast an `u32` to `u16`, which will truncate the source value\n-    |\n-188 |     foo::<u16>(x_u32 as u16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:191:16\n+   --> $DIR/numeric-cast.rs:179:16\n     |\n-191 |     foo::<u16>(x_u8);\n+179 |     foo::<u16>(x_u8);\n     |                ^^^^ expected u16, found u8\n help: you can cast an `u8` to `u16`, which will zero-extend the source value\n     |\n-191 |     foo::<u16>(x_u8.into());\n+179 |     foo::<u16>(x_u8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:193:16\n+   --> $DIR/numeric-cast.rs:181:16\n     |\n-193 |     foo::<u16>(x_isize);\n+181 |     foo::<u16>(x_isize);\n     |                ^^^^^^^ expected u16, found isize\n-help: you can cast an `isize` to `u16`, which will truncate or zero-extend depending on the bit width of `usize`\n-    |\n-193 |     foo::<u16>(x_isize as u16);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:195:16\n+   --> $DIR/numeric-cast.rs:183:16\n     |\n-195 |     foo::<u16>(x_i64);\n+183 |     foo::<u16>(x_i64);\n     |                ^^^^^ expected u16, found i64\n-help: you can cast an `i64` to `u16`, which will truncate the source value\n-    |\n-195 |     foo::<u16>(x_i64 as u16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:197:16\n+   --> $DIR/numeric-cast.rs:185:16\n     |\n-197 |     foo::<u16>(x_i32);\n+185 |     foo::<u16>(x_i32);\n     |                ^^^^^ expected u16, found i32\n-help: you can cast an `i32` to `u16`, which will truncate the source value\n-    |\n-197 |     foo::<u16>(x_i32 as u16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:199:16\n+   --> $DIR/numeric-cast.rs:187:16\n     |\n-199 |     foo::<u16>(x_i16);\n+187 |     foo::<u16>(x_i16);\n     |                ^^^^^ expected u16, found i16\n-help: you can cast an `i16` to `u16`, which will sign-extend the source value\n-    |\n-199 |     foo::<u16>(x_i16 as u16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:201:16\n+   --> $DIR/numeric-cast.rs:189:16\n     |\n-201 |     foo::<u16>(x_i8);\n+189 |     foo::<u16>(x_i8);\n     |                ^^^^ expected u16, found i8\n-help: you can cast an `i8` to `u16`, which will sign-extend the source value\n-    |\n-201 |     foo::<u16>(x_i8 as u16);\n-    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:203:16\n+   --> $DIR/numeric-cast.rs:191:16\n     |\n-203 |     foo::<u16>(x_f64);\n+191 |     foo::<u16>(x_f64);\n     |                ^^^^^ expected u16, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `u16`, rounding the float towards zero\n-    |\n-203 |     foo::<u16>(x_f64 as u16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:206:16\n+   --> $DIR/numeric-cast.rs:193:16\n     |\n-206 |     foo::<u16>(x_f32);\n+193 |     foo::<u16>(x_f32);\n     |                ^^^^^ expected u16, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `u16`, rounding the float towards zero\n-    |\n-206 |     foo::<u16>(x_f32 as u16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:210:16\n+   --> $DIR/numeric-cast.rs:196:16\n     |\n-210 |     foo::<i16>(x_usize);\n+196 |     foo::<i16>(x_usize);\n     |                ^^^^^^^ expected i16, found usize\n-help: you can cast an `usize` to `i16`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-210 |     foo::<i16>(x_usize as i16);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:212:16\n+   --> $DIR/numeric-cast.rs:198:16\n     |\n-212 |     foo::<i16>(x_u64);\n+198 |     foo::<i16>(x_u64);\n     |                ^^^^^ expected i16, found u64\n-help: you can cast an `u64` to `i16`, which will truncate the source value\n-    |\n-212 |     foo::<i16>(x_u64 as i16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:214:16\n+   --> $DIR/numeric-cast.rs:200:16\n     |\n-214 |     foo::<i16>(x_u32);\n+200 |     foo::<i16>(x_u32);\n     |                ^^^^^ expected i16, found u32\n-help: you can cast an `u32` to `i16`, which will truncate the source value\n-    |\n-214 |     foo::<i16>(x_u32 as i16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:216:16\n+   --> $DIR/numeric-cast.rs:202:16\n     |\n-216 |     foo::<i16>(x_u16);\n+202 |     foo::<i16>(x_u16);\n     |                ^^^^^ expected i16, found u16\n-help: you can cast an `u16` to `i16`, which will truncate the source value\n-    |\n-216 |     foo::<i16>(x_u16 as i16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:218:16\n+   --> $DIR/numeric-cast.rs:204:16\n     |\n-218 |     foo::<i16>(x_u8);\n+204 |     foo::<i16>(x_u8);\n     |                ^^^^ expected i16, found u8\n-help: you can cast an `u8` to `i16`, which will zero-extend the source value\n-    |\n-218 |     foo::<i16>(x_u8 as i16);\n-    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:220:16\n+   --> $DIR/numeric-cast.rs:206:16\n     |\n-220 |     foo::<i16>(x_isize);\n+206 |     foo::<i16>(x_isize);\n     |                ^^^^^^^ expected i16, found isize\n-help: you can cast an `isize` to `i16`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-220 |     foo::<i16>(x_isize as i16);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:222:16\n+   --> $DIR/numeric-cast.rs:208:16\n     |\n-222 |     foo::<i16>(x_i64);\n+208 |     foo::<i16>(x_i64);\n     |                ^^^^^ expected i16, found i64\n-help: you can cast an `i64` to `i16`, which will truncate the source value\n-    |\n-222 |     foo::<i16>(x_i64 as i16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:224:16\n+   --> $DIR/numeric-cast.rs:210:16\n     |\n-224 |     foo::<i16>(x_i32);\n+210 |     foo::<i16>(x_i32);\n     |                ^^^^^ expected i16, found i32\n-help: you can cast an `i32` to `i16`, which will truncate the source value\n-    |\n-224 |     foo::<i16>(x_i32 as i16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:227:16\n+   --> $DIR/numeric-cast.rs:213:16\n     |\n-227 |     foo::<i16>(x_i8);\n+213 |     foo::<i16>(x_i8);\n     |                ^^^^ expected i16, found i8\n help: you can cast an `i8` to `i16`, which will sign-extend the source value\n     |\n-227 |     foo::<i16>(x_i8.into());\n+213 |     foo::<i16>(x_i8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:229:16\n+   --> $DIR/numeric-cast.rs:215:16\n     |\n-229 |     foo::<i16>(x_f64);\n+215 |     foo::<i16>(x_f64);\n     |                ^^^^^ expected i16, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `i16`, rounding the float towards zero\n-    |\n-229 |     foo::<i16>(x_f64 as i16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:232:16\n+   --> $DIR/numeric-cast.rs:217:16\n     |\n-232 |     foo::<i16>(x_f32);\n+217 |     foo::<i16>(x_f32);\n     |                ^^^^^ expected i16, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `i16`, rounding the float towards zero\n-    |\n-232 |     foo::<i16>(x_f32 as i16);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:236:15\n+   --> $DIR/numeric-cast.rs:220:15\n     |\n-236 |     foo::<u8>(x_usize);\n+220 |     foo::<u8>(x_usize);\n     |               ^^^^^^^ expected u8, found usize\n-help: you can cast an `usize` to `u8`, which will truncate or zero-extend depending on the bit width of `usize`\n-    |\n-236 |     foo::<u8>(x_usize as u8);\n-    |               ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:238:15\n+   --> $DIR/numeric-cast.rs:222:15\n     |\n-238 |     foo::<u8>(x_u64);\n+222 |     foo::<u8>(x_u64);\n     |               ^^^^^ expected u8, found u64\n-help: you can cast an `u64` to `u8`, which will truncate the source value\n-    |\n-238 |     foo::<u8>(x_u64 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:240:15\n+   --> $DIR/numeric-cast.rs:224:15\n     |\n-240 |     foo::<u8>(x_u32);\n+224 |     foo::<u8>(x_u32);\n     |               ^^^^^ expected u8, found u32\n-help: you can cast an `u32` to `u8`, which will truncate the source value\n-    |\n-240 |     foo::<u8>(x_u32 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:242:15\n+   --> $DIR/numeric-cast.rs:226:15\n     |\n-242 |     foo::<u8>(x_u16);\n+226 |     foo::<u8>(x_u16);\n     |               ^^^^^ expected u8, found u16\n-help: you can cast an `u16` to `u8`, which will truncate the source value\n-    |\n-242 |     foo::<u8>(x_u16 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:245:15\n+   --> $DIR/numeric-cast.rs:229:15\n     |\n-245 |     foo::<u8>(x_isize);\n+229 |     foo::<u8>(x_isize);\n     |               ^^^^^^^ expected u8, found isize\n-help: you can cast an `isize` to `u8`, which will truncate or zero-extend depending on the bit width of `usize`\n-    |\n-245 |     foo::<u8>(x_isize as u8);\n-    |               ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:247:15\n+   --> $DIR/numeric-cast.rs:231:15\n     |\n-247 |     foo::<u8>(x_i64);\n+231 |     foo::<u8>(x_i64);\n     |               ^^^^^ expected u8, found i64\n-help: you can cast an `i64` to `u8`, which will truncate the source value\n-    |\n-247 |     foo::<u8>(x_i64 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:249:15\n+   --> $DIR/numeric-cast.rs:233:15\n     |\n-249 |     foo::<u8>(x_i32);\n+233 |     foo::<u8>(x_i32);\n     |               ^^^^^ expected u8, found i32\n-help: you can cast an `i32` to `u8`, which will truncate the source value\n-    |\n-249 |     foo::<u8>(x_i32 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:251:15\n+   --> $DIR/numeric-cast.rs:235:15\n     |\n-251 |     foo::<u8>(x_i16);\n+235 |     foo::<u8>(x_i16);\n     |               ^^^^^ expected u8, found i16\n-help: you can cast an `i16` to `u8`, which will truncate the source value\n-    |\n-251 |     foo::<u8>(x_i16 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:253:15\n+   --> $DIR/numeric-cast.rs:237:15\n     |\n-253 |     foo::<u8>(x_i8);\n+237 |     foo::<u8>(x_i8);\n     |               ^^^^ expected u8, found i8\n-help: you can cast an `i8` to `u8`, which will sign-extend the source value\n-    |\n-253 |     foo::<u8>(x_i8 as u8);\n-    |               ^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:255:15\n+   --> $DIR/numeric-cast.rs:239:15\n     |\n-255 |     foo::<u8>(x_f64);\n+239 |     foo::<u8>(x_f64);\n     |               ^^^^^ expected u8, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `u8`, rounding the float towards zero\n-    |\n-255 |     foo::<u8>(x_f64 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:258:15\n+   --> $DIR/numeric-cast.rs:241:15\n     |\n-258 |     foo::<u8>(x_f32);\n+241 |     foo::<u8>(x_f32);\n     |               ^^^^^ expected u8, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `u8`, rounding the float towards zero\n-    |\n-258 |     foo::<u8>(x_f32 as u8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:262:15\n+   --> $DIR/numeric-cast.rs:244:15\n     |\n-262 |     foo::<i8>(x_usize);\n+244 |     foo::<i8>(x_usize);\n     |               ^^^^^^^ expected i8, found usize\n-help: you can cast an `usize` to `i8`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-262 |     foo::<i8>(x_usize as i8);\n-    |               ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:264:15\n+   --> $DIR/numeric-cast.rs:246:15\n     |\n-264 |     foo::<i8>(x_u64);\n+246 |     foo::<i8>(x_u64);\n     |               ^^^^^ expected i8, found u64\n-help: you can cast an `u64` to `i8`, which will truncate the source value\n-    |\n-264 |     foo::<i8>(x_u64 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:266:15\n+   --> $DIR/numeric-cast.rs:248:15\n     |\n-266 |     foo::<i8>(x_u32);\n+248 |     foo::<i8>(x_u32);\n     |               ^^^^^ expected i8, found u32\n-help: you can cast an `u32` to `i8`, which will truncate the source value\n-    |\n-266 |     foo::<i8>(x_u32 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:268:15\n+   --> $DIR/numeric-cast.rs:250:15\n     |\n-268 |     foo::<i8>(x_u16);\n+250 |     foo::<i8>(x_u16);\n     |               ^^^^^ expected i8, found u16\n-help: you can cast an `u16` to `i8`, which will truncate the source value\n-    |\n-268 |     foo::<i8>(x_u16 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:270:15\n+   --> $DIR/numeric-cast.rs:252:15\n     |\n-270 |     foo::<i8>(x_u8);\n+252 |     foo::<i8>(x_u8);\n     |               ^^^^ expected i8, found u8\n-help: you can cast an `u8` to `i8`, which will truncate the source value\n-    |\n-270 |     foo::<i8>(x_u8 as i8);\n-    |               ^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:272:15\n+   --> $DIR/numeric-cast.rs:254:15\n     |\n-272 |     foo::<i8>(x_isize);\n+254 |     foo::<i8>(x_isize);\n     |               ^^^^^^^ expected i8, found isize\n-help: you can cast an `isize` to `i8`, which will truncate or zero-extend depending on the bit width of `isize`\n-    |\n-272 |     foo::<i8>(x_isize as i8);\n-    |               ^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:274:15\n+   --> $DIR/numeric-cast.rs:256:15\n     |\n-274 |     foo::<i8>(x_i64);\n+256 |     foo::<i8>(x_i64);\n     |               ^^^^^ expected i8, found i64\n-help: you can cast an `i64` to `i8`, which will truncate the source value\n-    |\n-274 |     foo::<i8>(x_i64 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:276:15\n+   --> $DIR/numeric-cast.rs:258:15\n     |\n-276 |     foo::<i8>(x_i32);\n+258 |     foo::<i8>(x_i32);\n     |               ^^^^^ expected i8, found i32\n-help: you can cast an `i32` to `i8`, which will truncate the source value\n-    |\n-276 |     foo::<i8>(x_i32 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:278:15\n+   --> $DIR/numeric-cast.rs:260:15\n     |\n-278 |     foo::<i8>(x_i16);\n+260 |     foo::<i8>(x_i16);\n     |               ^^^^^ expected i8, found i16\n-help: you can cast an `i16` to `i8`, which will truncate the source value\n-    |\n-278 |     foo::<i8>(x_i16 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:281:15\n+   --> $DIR/numeric-cast.rs:263:15\n     |\n-281 |     foo::<i8>(x_f64);\n+263 |     foo::<i8>(x_f64);\n     |               ^^^^^ expected i8, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `i8`, rounding the float towards zero\n-    |\n-281 |     foo::<i8>(x_f64 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:284:15\n+   --> $DIR/numeric-cast.rs:265:15\n     |\n-284 |     foo::<i8>(x_f32);\n+265 |     foo::<i8>(x_f32);\n     |               ^^^^^ expected i8, found f32\n-    |\n-    = warning: casting here will cause undefined behavior if the rounded value cannot be represented by the target integer type, including `Inf` and `NaN` (this is a bug and will be fixed)\n-help: you can cast an `f32` to `i8`, rounding the float towards zero\n-    |\n-284 |     foo::<i8>(x_f32 as i8);\n-    |               ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:288:16\n+   --> $DIR/numeric-cast.rs:268:16\n     |\n-288 |     foo::<f64>(x_usize);\n+268 |     foo::<f64>(x_usize);\n     |                ^^^^^^^ expected f64, found usize\n-help: you can cast an `usize` to `f64`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-288 |     foo::<f64>(x_usize as f64);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:290:16\n+   --> $DIR/numeric-cast.rs:270:16\n     |\n-290 |     foo::<f64>(x_u64);\n+270 |     foo::<f64>(x_u64);\n     |                ^^^^^ expected f64, found u64\n-help: you can cast an `u64` to `f64`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-290 |     foo::<f64>(x_u64 as f64);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:292:16\n+   --> $DIR/numeric-cast.rs:272:16\n     |\n-292 |     foo::<f64>(x_u32);\n+272 |     foo::<f64>(x_u32);\n     |                ^^^^^ expected f64, found u32\n help: you can cast an `u32` to `f64`, producing the floating point representation of the integer, rounded if necessary\n     |\n-292 |     foo::<f64>(x_u32.into());\n+272 |     foo::<f64>(x_u32.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:294:16\n+   --> $DIR/numeric-cast.rs:274:16\n     |\n-294 |     foo::<f64>(x_u16);\n+274 |     foo::<f64>(x_u16);\n     |                ^^^^^ expected f64, found u16\n help: you can cast an `u16` to `f64`, producing the floating point representation of the integer, rounded if necessary\n     |\n-294 |     foo::<f64>(x_u16.into());\n+274 |     foo::<f64>(x_u16.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:296:16\n+   --> $DIR/numeric-cast.rs:276:16\n     |\n-296 |     foo::<f64>(x_u8);\n+276 |     foo::<f64>(x_u8);\n     |                ^^^^ expected f64, found u8\n help: you can cast an `u8` to `f64`, producing the floating point representation of the integer, rounded if necessary\n     |\n-296 |     foo::<f64>(x_u8.into());\n+276 |     foo::<f64>(x_u8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:298:16\n+   --> $DIR/numeric-cast.rs:278:16\n     |\n-298 |     foo::<f64>(x_isize);\n+278 |     foo::<f64>(x_isize);\n     |                ^^^^^^^ expected f64, found isize\n-help: you can cast an `isize` to `f64`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-298 |     foo::<f64>(x_isize as f64);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:300:16\n+   --> $DIR/numeric-cast.rs:280:16\n     |\n-300 |     foo::<f64>(x_i64);\n+280 |     foo::<f64>(x_i64);\n     |                ^^^^^ expected f64, found i64\n-help: you can cast an `i64` to `f64`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-300 |     foo::<f64>(x_i64 as f64);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:302:16\n+   --> $DIR/numeric-cast.rs:282:16\n     |\n-302 |     foo::<f64>(x_i32);\n+282 |     foo::<f64>(x_i32);\n     |                ^^^^^ expected f64, found i32\n help: you can cast an `i32` to `f64`, producing the floating point representation of the integer, rounded if necessary\n     |\n-302 |     foo::<f64>(x_i32.into());\n+282 |     foo::<f64>(x_i32.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:304:16\n+   --> $DIR/numeric-cast.rs:284:16\n     |\n-304 |     foo::<f64>(x_i16);\n+284 |     foo::<f64>(x_i16);\n     |                ^^^^^ expected f64, found i16\n help: you can cast an `i16` to `f64`, producing the floating point representation of the integer, rounded if necessary\n     |\n-304 |     foo::<f64>(x_i16.into());\n+284 |     foo::<f64>(x_i16.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:306:16\n+   --> $DIR/numeric-cast.rs:286:16\n     |\n-306 |     foo::<f64>(x_i8);\n+286 |     foo::<f64>(x_i8);\n     |                ^^^^ expected f64, found i8\n help: you can cast an `i8` to `f64`, producing the floating point representation of the integer, rounded if necessary\n     |\n-306 |     foo::<f64>(x_i8.into());\n+286 |     foo::<f64>(x_i8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:309:16\n+   --> $DIR/numeric-cast.rs:289:16\n     |\n-309 |     foo::<f64>(x_f32);\n+289 |     foo::<f64>(x_f32);\n     |                ^^^^^ expected f64, found f32\n help: you can cast an `f32` to `f64` in a lossless way\n     |\n-309 |     foo::<f64>(x_f32.into());\n+289 |     foo::<f64>(x_f32.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:312:16\n+   --> $DIR/numeric-cast.rs:292:16\n     |\n-312 |     foo::<f32>(x_usize);\n+292 |     foo::<f32>(x_usize);\n     |                ^^^^^^^ expected f32, found usize\n-help: you can cast an `usize` to `f32`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-312 |     foo::<f32>(x_usize as f32);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:314:16\n+   --> $DIR/numeric-cast.rs:294:16\n     |\n-314 |     foo::<f32>(x_u64);\n+294 |     foo::<f32>(x_u64);\n     |                ^^^^^ expected f32, found u64\n-help: you can cast an `u64` to `f32`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-314 |     foo::<f32>(x_u64 as f32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:316:16\n+   --> $DIR/numeric-cast.rs:296:16\n     |\n-316 |     foo::<f32>(x_u32);\n+296 |     foo::<f32>(x_u32);\n     |                ^^^^^ expected f32, found u32\n-help: you can cast an `u32` to `f32`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-316 |     foo::<f32>(x_u32 as f32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:318:16\n+   --> $DIR/numeric-cast.rs:298:16\n     |\n-318 |     foo::<f32>(x_u16);\n+298 |     foo::<f32>(x_u16);\n     |                ^^^^^ expected f32, found u16\n help: you can cast an `u16` to `f32`, producing the floating point representation of the integer, rounded if necessary\n     |\n-318 |     foo::<f32>(x_u16.into());\n+298 |     foo::<f32>(x_u16.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:320:16\n+   --> $DIR/numeric-cast.rs:300:16\n     |\n-320 |     foo::<f32>(x_u8);\n+300 |     foo::<f32>(x_u8);\n     |                ^^^^ expected f32, found u8\n help: you can cast an `u8` to `f32`, producing the floating point representation of the integer, rounded if necessary\n     |\n-320 |     foo::<f32>(x_u8.into());\n+300 |     foo::<f32>(x_u8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:322:16\n+   --> $DIR/numeric-cast.rs:302:16\n     |\n-322 |     foo::<f32>(x_isize);\n+302 |     foo::<f32>(x_isize);\n     |                ^^^^^^^ expected f32, found isize\n-help: you can cast an `isize` to `f32`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-322 |     foo::<f32>(x_isize as f32);\n-    |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:324:16\n+   --> $DIR/numeric-cast.rs:304:16\n     |\n-324 |     foo::<f32>(x_i64);\n+304 |     foo::<f32>(x_i64);\n     |                ^^^^^ expected f32, found i64\n-help: you can cast an `i64` to `f32`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-324 |     foo::<f32>(x_i64 as f32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:326:16\n+   --> $DIR/numeric-cast.rs:306:16\n     |\n-326 |     foo::<f32>(x_i32);\n+306 |     foo::<f32>(x_i32);\n     |                ^^^^^ expected f32, found i32\n-help: you can cast an `i32` to `f32`, producing the floating point representation of the integer, rounded if necessary\n-    |\n-326 |     foo::<f32>(x_i32 as f32);\n-    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:328:16\n+   --> $DIR/numeric-cast.rs:308:16\n     |\n-328 |     foo::<f32>(x_i16);\n+308 |     foo::<f32>(x_i16);\n     |                ^^^^^ expected f32, found i16\n help: you can cast an `i16` to `f32`, producing the floating point representation of the integer, rounded if necessary\n     |\n-328 |     foo::<f32>(x_i16.into());\n+308 |     foo::<f32>(x_i16.into());\n     |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:330:16\n+   --> $DIR/numeric-cast.rs:310:16\n     |\n-330 |     foo::<f32>(x_i8);\n+310 |     foo::<f32>(x_i8);\n     |                ^^^^ expected f32, found i8\n help: you can cast an `i8` to `f32`, producing the floating point representation of the integer, rounded if necessary\n     |\n-330 |     foo::<f32>(x_i8.into());\n+310 |     foo::<f32>(x_i8.into());\n     |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-   --> $DIR/numeric-cast.rs:332:16\n+   --> $DIR/numeric-cast.rs:312:16\n     |\n-332 |     foo::<f32>(x_f64);\n+312 |     foo::<f32>(x_f64);\n     |                ^^^^^ expected f32, found f64\n-    |\n-    = warning: casting here will cause undefined behavior if the value is finite but larger or smaller than the largest or smallest finite value representable by `f32` (this is a bug and will be fixed)\n-help: you can cast an `f64` to `f32`, producing the closest possible value\n-    |\n-332 |     foo::<f32>(x_f64 as f32);\n-    |                ^^^^^^^^^^^^\n \n error: aborting due to 132 previous errors\n "}]}