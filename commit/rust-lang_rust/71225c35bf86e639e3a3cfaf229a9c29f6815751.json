{"sha": "71225c35bf86e639e3a3cfaf229a9c29f6815751", "node_id": "C_kwDOAAsO6NoAKDcxMjI1YzM1YmY4NmU2MzllM2EzY2ZhZjIyOWE5YzI5ZjY4MTU3NTE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-25T09:40:35Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-25T09:41:10Z"}, "message": "Replace `debug_assert!` with `stdx::always!`", "tree": {"sha": "6e714bd62550996b903abb446b689f3eaa865609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e714bd62550996b903abb446b689f3eaa865609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71225c35bf86e639e3a3cfaf229a9c29f6815751", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmLeZTcACgkQ4laYqTBY\nYXF5oBAAlIrvvA6J3nUoKdGc1+ftMW7pCJhUez37D+bzdWWxmQ2L2XwevEAsNpXr\n9oGWZU2xwiTm2dBKLSbZoM1XR1hI2UP/m5ArD1cR2TKtpaReJ6r1JQisoBh1F14w\nLD9EhLSWW1EJH1YOdJI7fKgR9rZF9cuYFxse3sHtmXKpktO4aK2CLOJfvlT5xpWV\nGnTKD7SBFIKKenTzjGfd8RtjkRbuapvfhfG85efQV3DhSEjE/PfOUh8b3gYWCPzM\nKVSyZ5dGpWa0cu2jK6e1eHy0nciibYroPvMvL6CgsYbgQhvdW2/0z+xXJGOaYUtC\nzSgtorFIMbsMo9TOE5W2iFpFwjS/nKkxNyktOnEdzfMeQMF5iK7+NhzOg+t0y7PD\n29qjJ6K3TTMoFqLJIF8pgHaYDcAC5oJS+Ur+nZ4GRcytfaaGCpoc1ZCIJHChWnDn\nc+m0/kt2nBTsHv2V+VpvHHa7IeahOMf+UgrsSRdwKy5Fm2CgfLQ0vWmPJwQ9luf5\nWI5X7wFnN+JvkBIttnuVcIRh6GBMuGBRKmTRz6fcM7B9WyqGO+jFi8F/t+6PrVul\n27Wj28g8FpZ/zZ1H0MWsqCEivhnwk4oXtpm2DteyywaNRiyRlQtcVaXAP5U3xnC5\nrN2SzpFGUp8MtKM0hyNZXG0IeVzATB6auESnQ+f8kkUpXRSqi8Q=\n=KPpa\n-----END PGP SIGNATURE-----", "payload": "tree 6e714bd62550996b903abb446b689f3eaa865609\nparent 7e2b983fd459977e11026683ee4afb9598960a4c\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1658742035 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1658742070 +0900\n\nReplace `debug_assert!` with `stdx::always!`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71225c35bf86e639e3a3cfaf229a9c29f6815751", "html_url": "https://github.com/rust-lang/rust/commit/71225c35bf86e639e3a3cfaf229a9c29f6815751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71225c35bf86e639e3a3cfaf229a9c29f6815751/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2b983fd459977e11026683ee4afb9598960a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2b983fd459977e11026683ee4afb9598960a4c", "html_url": "https://github.com/rust-lang/rust/commit/7e2b983fd459977e11026683ee4afb9598960a4c"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "7a0c912959a12c53b9b909225accc56e866d3ca5", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71225c35bf86e639e3a3cfaf229a9c29f6815751/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71225c35bf86e639e3a3cfaf229a9c29f6815751/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=71225c35bf86e639e3a3cfaf229a9c29f6815751", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn gen_trait_fn_body(\n \n /// Generate a `Clone` impl based on the fields and members of the target type.\n fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"clone\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"clone\"));\n     fn gen_clone_call(target: ast::Expr) -> ast::Expr {\n         let method = make::name_ref(\"clone\");\n         make::expr_method_call(target, method, make::arg_list(None))\n@@ -340,7 +340,7 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `Hash` impl based on the fields and members of the target type.\n fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"hash\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"hash\"));\n     fn gen_hash_call(target: ast::Expr) -> ast::Stmt {\n         let method = make::name_ref(\"hash\");\n         let arg = make::expr_path(make::ext::ident_path(\"state\"));\n@@ -396,7 +396,7 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `PartialEq` impl based on the fields and members of the target type.\n fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"eq\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"eq\"));\n     fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n         match expr {\n             Some(expr) => Some(make::expr_bin_op(expr, BinaryOp::LogicOp(LogicOp::And), cmp)),\n@@ -573,7 +573,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    debug_assert!(func.name().map_or(false, |name| name.text() == \"partial_cmp\"));\n+    stdx::always!(func.name().map_or(false, |name| name.text() == \"partial_cmp\"));\n     fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n         let mut arms = vec![];\n "}]}