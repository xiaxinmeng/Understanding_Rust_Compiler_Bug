{"sha": "10d8b4e861faedb734636a80dc4963392f1f82c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZDhiNGU4NjFmYWVkYjczNDYzNmE4MGRjNDk2MzM5MmYxZjgyYzU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-09T20:05:22Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-09T20:05:22Z"}, "message": "Fix access to the rust stack.", "tree": {"sha": "8e592e999737c2be6df261375a7f55ec7340b3b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e592e999737c2be6df261375a7f55ec7340b3b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d8b4e861faedb734636a80dc4963392f1f82c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d8b4e861faedb734636a80dc4963392f1f82c5", "html_url": "https://github.com/rust-lang/rust/commit/10d8b4e861faedb734636a80dc4963392f1f82c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d8b4e861faedb734636a80dc4963392f1f82c5/comments", "author": null, "committer": null, "parents": [{"sha": "aeca13894438af8876f88e26a4947b4e7627111d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeca13894438af8876f88e26a4947b4e7627111d", "html_url": "https://github.com/rust-lang/rust/commit/aeca13894438af8876f88e26a4947b4e7627111d"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "b9ba24c6e27deafbcb1aef0095637bf0727aa3aa", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/10d8b4e861faedb734636a80dc4963392f1f82c5/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d8b4e861faedb734636a80dc4963392f1f82c5/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=10d8b4e861faedb734636a80dc4963392f1f82c5", "patch": "@@ -25,22 +25,39 @@ fn restore_callee_saves() -> vec[str] {\n             \"popl  %ebp\");\n }\n \n-fn load_esp_from_rust_sp() -> vec[str] {\n+fn load_esp_from_rust_sp_first_arg() -> vec[str] {\n     ret vec(\"movl  \" + wstr(abi.task_field_rust_sp) + \"(%ecx), %esp\");\n }\n \n-fn load_esp_from_runtime_sp() -> vec[str] {\n+fn load_esp_from_runtime_sp_first_arg() -> vec[str] {\n     ret vec(\"movl  \" + wstr(abi.task_field_runtime_sp) + \"(%ecx), %esp\");\n }\n \n-fn store_esp_to_rust_sp() -> vec[str] {\n+fn store_esp_to_rust_sp_first_arg() -> vec[str] {\n     ret vec(\"movl  %esp, \" + wstr(abi.task_field_rust_sp) + \"(%ecx)\");\n }\n \n-fn store_esp_to_runtime_sp() -> vec[str] {\n+fn store_esp_to_runtime_sp_first_arg() -> vec[str] {\n     ret vec(\"movl  %esp, \" + wstr(abi.task_field_runtime_sp) + \"(%ecx)\");\n }\n \n+fn load_esp_from_rust_sp_second_arg() -> vec[str] {\n+    ret vec(\"movl  \" + wstr(abi.task_field_rust_sp) + \"(%edx), %esp\");\n+}\n+\n+fn load_esp_from_runtime_sp_second_arg() -> vec[str] {\n+    ret vec(\"movl  \" + wstr(abi.task_field_runtime_sp) + \"(%edx), %esp\");\n+}\n+\n+fn store_esp_to_rust_sp_second_arg() -> vec[str] {\n+    ret vec(\"movl  %esp, \" + wstr(abi.task_field_rust_sp) + \"(%edx)\");\n+}\n+\n+fn store_esp_to_runtime_sp_second_arg() -> vec[str] {\n+    ret vec(\"movl  %esp, \" + wstr(abi.task_field_runtime_sp) + \"(%edx)\");\n+}\n+\n+\n /*\n  * This is a bit of glue-code. It should be emitted once per\n  * compilation unit.\n@@ -61,8 +78,8 @@ fn store_esp_to_runtime_sp() -> vec[str] {\n fn rust_activate_glue() -> vec[str] {\n     ret vec(\"movl  4(%esp), %ecx    # ecx = rust_task\")\n         + save_callee_saves()\n-        + store_esp_to_runtime_sp()\n-        + load_esp_from_rust_sp()\n+        + store_esp_to_runtime_sp_first_arg()\n+        + load_esp_from_rust_sp_first_arg()\n \n         /*\n          * There are two paths we can arrive at this code from:\n@@ -154,10 +171,10 @@ fn rust_activate_glue() -> vec[str] {\n \n fn rust_yield_glue() -> vec[str] {\n     ret vec(\"movl  0(%esp), %ecx    # ecx = rust_task\")\n-        + load_esp_from_rust_sp()\n+        + load_esp_from_rust_sp_first_arg()\n         + save_callee_saves()\n-        + store_esp_to_rust_sp()\n-        + load_esp_from_runtime_sp()\n+        + store_esp_to_rust_sp_first_arg()\n+        + load_esp_from_runtime_sp_first_arg()\n         + restore_callee_saves()\n         + vec(\"ret\");\n }\n@@ -192,19 +209,19 @@ fn upcall_glue(int n_args) -> vec[str] {\n \n         + vec(\"movl  %esp, %ebp     # ebp = rust_sp\")\n \n-        + store_esp_to_rust_sp()\n-        + load_esp_from_runtime_sp()\n+        + store_esp_to_rust_sp_second_arg()\n+        + load_esp_from_runtime_sp_second_arg()\n \n         + vec(\"subl  $\" + wstr(n_args + 1) + \", %esp   # esp -= args\",\n               \"andl  $~0xf, %esp    # align esp down\")\n \n         + _vec.init_fn[str](carg, (n_args + 1) as uint)\n \n-        +  vec(\"movl  %edx, %edi     # save task from ecx to edi\",\n-               \"call  *%ecx          # call *%edx\",\n-               \"movl  %edi, %edx     # restore edi-saved task to ecx\")\n+        +  vec(\"movl  %edx, %edi     # save task from edx to edi\",\n+               \"call  *%ecx          # call *%ecx\",\n+               \"movl  %edi, %edx     # restore edi-saved task to edx\")\n \n-        + load_esp_from_rust_sp()\n+        + load_esp_from_rust_sp_second_arg()\n         + restore_callee_saves()\n         + vec(\"ret\");\n "}]}