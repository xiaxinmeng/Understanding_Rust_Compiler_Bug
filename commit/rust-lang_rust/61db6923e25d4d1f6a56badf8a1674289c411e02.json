{"sha": "61db6923e25d4d1f6a56badf8a1674289c411e02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZGI2OTIzZTI1ZDRkMWY2YTU2YmFkZjhhMTY3NDI4OWM0MTFlMDI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-10T22:43:38Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-10T22:43:38Z"}, "message": "Fix ICE when compiling \"extern\" rust functions\n\nAs the function comment already says, the types generated in the\nforeign_signture function don't necessarily match the types used for a\ncorresponding rust function. Therefore we can't just use these types to\nguide the translation of the wrapper function that bridges between the\nexternal ABI and the rust ABI. Instead, we can query LLVM about the\ntypes used in the rust function and use those to generate an appropriate\nwrapper.\n\nFixes #21454", "tree": {"sha": "47a806773538ace2e5f4c31c455afc0cdde885a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47a806773538ace2e5f4c31c455afc0cdde885a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61db6923e25d4d1f6a56badf8a1674289c411e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61db6923e25d4d1f6a56badf8a1674289c411e02", "html_url": "https://github.com/rust-lang/rust/commit/61db6923e25d4d1f6a56badf8a1674289c411e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61db6923e25d4d1f6a56badf8a1674289c411e02/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d8ba5ab3b1d22288b021708c3d87464e43b880", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d8ba5ab3b1d22288b021708c3d87464e43b880", "html_url": "https://github.com/rust-lang/rust/commit/88d8ba5ab3b1d22288b021708c3d87464e43b880"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "96bd028aa9d3d6981be966e3c3bb93b66b841359", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61db6923e25d4d1f6a56badf8a1674289c411e02/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61db6923e25d4d1f6a56badf8a1674289c411e02/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=61db6923e25d4d1f6a56badf8a1674289c411e02", "patch": "@@ -670,14 +670,19 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             }\n         };\n \n+        let rustfn_ty = Type::from_ref(llvm::LLVMTypeOf(llrustfn)).element_type();\n+        let mut rust_param_tys = rustfn_ty.func_params().into_iter();\n         // Push Rust return pointer, using null if it will be unused.\n         let rust_uses_outptr = match tys.fn_sig.output {\n             ty::FnConverging(ret_ty) => type_of::return_uses_outptr(ccx, ret_ty),\n             ty::FnDiverging => false\n         };\n         let return_alloca: Option<ValueRef>;\n-        let llrust_ret_ty = tys.llsig.llret_ty;\n-        let llrust_retptr_ty = llrust_ret_ty.ptr_to();\n+        let llrust_ret_ty = if rust_uses_outptr {\n+            rust_param_tys.next().expect(\"Missing return type!\").element_type()\n+        } else {\n+            rustfn_ty.return_type()\n+        };\n         if rust_uses_outptr {\n             // Rust expects to use an outpointer. If the foreign fn\n             // also uses an outpointer, we can reuse it, but the types\n@@ -689,7 +694,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     debug!(\"out pointer, foreign={}\",\n                            ccx.tn().val_to_string(llforeign_outptr));\n                     let llrust_retptr =\n-                        builder.bitcast(llforeign_outptr, llrust_retptr_ty);\n+                        builder.bitcast(llforeign_outptr, llrust_ret_ty.ptr_to());\n                     debug!(\"out pointer, foreign={} (casted)\",\n                            ccx.tn().val_to_string(llrust_retptr));\n                     llrust_args.push(llrust_retptr);\n@@ -721,8 +726,13 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // a pointer and Rust does not or vice versa.\n         for i in 0..tys.fn_sig.inputs.len() {\n             let rust_ty = tys.fn_sig.inputs[i];\n-            let llrust_ty = tys.llsig.llarg_tys[i];\n             let rust_indirect = type_of::arg_is_indirect(ccx, rust_ty);\n+            let llty = rust_param_tys.next().expect(\"Not enough parameter types!\");\n+            let llrust_ty = if rust_indirect {\n+                llty.element_type()\n+            } else {\n+                llty\n+            };\n             let llforeign_arg_ty = tys.fn_ty.arg_tys[i];\n             let foreign_indirect = llforeign_arg_ty.is_indirect();\n \n@@ -838,7 +848,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 // Foreign ABI requires an out pointer, but Rust doesn't.\n                 // Store Rust return value.\n                 let llforeign_outptr_casted =\n-                    builder.bitcast(llforeign_outptr, llrust_retptr_ty);\n+                    builder.bitcast(llforeign_outptr, llrust_ret_ty.ptr_to());\n                 builder.store(llrust_ret_val, llforeign_outptr_casted);\n                 builder.ret_void();\n             }"}, {"sha": "8ba39a24514cb7d872798a02a370868e7ef16328", "filename": "src/test/run-pass/extern-rust.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61db6923e25d4d1f6a56badf8a1674289c411e02/src%2Ftest%2Frun-pass%2Fextern-rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61db6923e25d4d1f6a56badf8a1674289c411e02/src%2Ftest%2Frun-pass%2Fextern-rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-rust.rs?ref=61db6923e25d4d1f6a56badf8a1674289c411e02", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(C)]\n+pub struct Foo(u32);\n+\n+// ICE trigger, bad handling of differing types between rust and external ABIs\n+pub extern fn bar() -> Foo {\n+    Foo(0)\n+}\n+\n+fn main() {}"}]}