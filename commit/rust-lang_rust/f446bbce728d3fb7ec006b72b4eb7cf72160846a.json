{"sha": "f446bbce728d3fb7ec006b72b4eb7cf72160846a", "node_id": "C_kwDOAAsO6NoAKGY0NDZiYmNlNzI4ZDNmYjdlYzAwNmI3MmI0ZWI3Y2Y3MjE2MDg0NmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-18T17:20:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-22T06:04:24Z"}, "message": "Fix parallel compiler.", "tree": {"sha": "2768bbe980fa8d14de4afa9922000ac96d294203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2768bbe980fa8d14de4afa9922000ac96d294203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f446bbce728d3fb7ec006b72b4eb7cf72160846a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f446bbce728d3fb7ec006b72b4eb7cf72160846a", "html_url": "https://github.com/rust-lang/rust/commit/f446bbce728d3fb7ec006b72b4eb7cf72160846a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f446bbce728d3fb7ec006b72b4eb7cf72160846a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86290effd511d9cd8b6339704a85495552c66c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/86290effd511d9cd8b6339704a85495552c66c90", "html_url": "https://github.com/rust-lang/rust/commit/86290effd511d9cd8b6339704a85495552c66c90"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "8622a6207212c731769b38c8ffa8de8eda0f16e8", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f446bbce728d3fb7ec006b72b4eb7cf72160846a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f446bbce728d3fb7ec006b72b4eb7cf72160846a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=f446bbce728d3fb7ec006b72b4eb7cf72160846a", "patch": "@@ -10,6 +10,7 @@ use crate::ty::query::Providers;\n use crate::ty::{DefIdTree, ImplSubject, TyCtxt};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::*;\n use rustc_query_system::ich::StableHashingContext;\n@@ -61,6 +62,22 @@ impl ModuleItems {\n     pub fn foreign_items(&self) -> impl Iterator<Item = ForeignItemId> + '_ {\n         self.foreign_items.iter().copied()\n     }\n+\n+    pub fn par_items(&self, f: impl Fn(ItemId) + Send + Sync) {\n+        par_for_each_in(&self.items[..], |&id| f(id))\n+    }\n+\n+    pub fn par_trait_items(&self, f: impl Fn(TraitItemId) + Send + Sync) {\n+        par_for_each_in(&self.trait_items[..], |&id| f(id))\n+    }\n+\n+    pub fn par_impl_items(&self, f: impl Fn(ImplItemId) + Send + Sync) {\n+        par_for_each_in(&self.impl_items[..], |&id| f(id))\n+    }\n+\n+    pub fn par_foreign_items(&self, f: impl Fn(ForeignItemId) + Send + Sync) {\n+        par_for_each_in(&self.foreign_items[..], |&id| f(id))\n+    }\n }\n \n impl<'tcx> TyCtxt<'tcx> {"}, {"sha": "174f74f062b238c3821d208f0d4f8b0891c86578", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f446bbce728d3fb7ec006b72b4eb7cf72160846a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f446bbce728d3fb7ec006b72b4eb7cf72160846a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f446bbce728d3fb7ec006b72b4eb7cf72160846a", "patch": "@@ -4,7 +4,6 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n \n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::sync::par_for_each_in;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -1861,10 +1860,10 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirI\n \n fn check_mod_type_wf(tcx: TyCtxt<'_>, module: LocalDefId) {\n     let items = tcx.hir_module_items(module);\n-    par_for_each_in(items.items(), |item| tcx.ensure().check_well_formed(item.def_id));\n-    par_for_each_in(items.impl_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n-    par_for_each_in(items.trait_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n-    par_for_each_in(items.foreign_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n+    items.par_items(|item| tcx.ensure().check_well_formed(item.def_id));\n+    items.par_impl_items(|item| tcx.ensure().check_well_formed(item.def_id));\n+    items.par_trait_items(|item| tcx.ensure().check_well_formed(item.def_id));\n+    items.par_foreign_items(|item| tcx.ensure().check_well_formed(item.def_id));\n }\n \n ///////////////////////////////////////////////////////////////////////////"}]}