{"sha": "cb66d8948a9375e7be65296d19586166157ec667", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjZkODk0OGE5Mzc1ZTdiZTY1Mjk2ZDE5NTg2MTY2MTU3ZWM2Njc=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2013-05-08T11:11:23Z"}, "committer": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2013-05-08T11:11:23Z"}, "message": "Remove #[cfg(notest)] and use #[cfg(not(test))] to cooincide with #[cfg(debug)]", "tree": {"sha": "43174998d9e6babcb867ff16aef05da07e49d7e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43174998d9e6babcb867ff16aef05da07e49d7e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb66d8948a9375e7be65296d19586166157ec667", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb66d8948a9375e7be65296d19586166157ec667", "html_url": "https://github.com/rust-lang/rust/commit/cb66d8948a9375e7be65296d19586166157ec667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb66d8948a9375e7be65296d19586166157ec667/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6529c36af56eedf01dc5db29f9f6408f07e97c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6529c36af56eedf01dc5db29f9f6408f07e97c3", "html_url": "https://github.com/rust-lang/rust/commit/e6529c36af56eedf01dc5db29f9f6408f07e97c3"}], "stats": {"total": 263, "additions": 131, "deletions": 132}, "files": [{"sha": "d797e02f5408de762d0c38c437e554101706c986", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -166,7 +166,7 @@ pub fn from_slice<T:Copy>(v: &[T]) -> @[T] {\n     from_fn(v.len(), |i| v[i])\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n pub mod traits {\n     use at_vec::append;\n     use kinds::Copy;"}, {"sha": "76a8f456cd5f30c892150cda71ccd11fc6fddbc4", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -10,7 +10,7 @@\n \n //! Boolean logic\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n use cmp::{Eq, Ord, TotalOrd, Ordering};\n use option::{None, Option, Some};\n use from_str::FromStr;\n@@ -75,7 +75,7 @@ pub fn all_values(blk: &fn(v: bool)) {\n #[inline(always)]\n pub fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for bool {\n     #[inline(always)]\n     fn lt(&self, other: &bool) -> bool { to_bit(*self) < to_bit(*other) }\n@@ -87,13 +87,13 @@ impl Ord for bool {\n     fn ge(&self, other: &bool) -> bool { to_bit(*self) >= to_bit(*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl TotalOrd for bool {\n     #[inline(always)]\n     fn cmp(&self, other: &bool) -> Ordering { to_bit(*self).cmp(&to_bit(*other)) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for bool {\n     #[inline(always)]\n     fn eq(&self, other: &bool) -> bool { (*self) == (*other) }"}, {"sha": "a9c46b81f862e91a211b5ce67a1d4b4a46cce0cf", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -10,15 +10,15 @@\n \n //! Utilities for manipulating the char type\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n use cmp::Ord;\n use option::{None, Option, Some};\n use str;\n use u32;\n use uint;\n use unicode::{derived_property, general_category};\n \n-#[cfg(notest)] use cmp::Eq;\n+#[cfg(not(test))] use cmp::Eq;\n \n /*\n     Lu  Uppercase_Letter    an uppercase letter\n@@ -244,15 +244,15 @@ pub fn len_utf8_bytes(c: char) -> uint {\n     else { fail!(~\"invalid character!\") }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for char {\n     #[inline(always)]\n     fn eq(&self, other: &char) -> bool { (*self) == (*other) }\n     #[inline(always)]\n     fn ne(&self, other: &char) -> bool { (*self) != (*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for char {\n     #[inline(always)]\n     fn lt(&self, other: &char) -> bool { *self < *other }"}, {"sha": "912f965db7c9af283713776cdba7e4d4614d1bf1", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -15,9 +15,9 @@ use ptr::mut_null;\n use repr::BoxRepr;\n use sys::TypeDesc;\n use cast::transmute;\n-#[cfg(notest)] use unstable::lang::clear_task_borrow_list;\n+#[cfg(not(test))] use unstable::lang::clear_task_borrow_list;\n \n-#[cfg(notest)] use ptr::to_unsafe_ptr;\n+#[cfg(not(test))] use ptr::to_unsafe_ptr;\n \n /**\n  * Runtime structures\n@@ -164,7 +164,7 @@ fn debug_mem() -> bool {\n }\n \n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n-#[cfg(notest)]\n+#[cfg(not(test))]\n #[lang=\"annihilate\"]\n pub unsafe fn annihilate() {\n     use unstable::lang::local_free;"}, {"sha": "c8ab49f273e12352244d31700e2430881150da49", "filename": "src/libcore/core.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -179,9 +179,9 @@ pub mod managed;\n \n /* Core language traits */\n \n-#[cfg(notest)] pub mod kinds;\n-#[cfg(notest)] pub mod ops;\n-#[cfg(notest)] pub mod cmp;\n+#[cfg(not(test))] pub mod kinds;\n+#[cfg(not(test))] pub mod ops;\n+#[cfg(not(test))] pub mod cmp;\n \n \n /* Common traits */"}, {"sha": "69ecad56a8f5c9e345a309eeef645418b7d5c285", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -42,7 +42,7 @@ pub fn console_off() {\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n #[lang=\"log_type\"]\n pub fn log_type<T>(level: u32, object: &T) {\n     use cast::transmute;"}, {"sha": "d2bb88ca302020fbc10e92a1725f43b34600ada9", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -12,7 +12,7 @@\n \n use ptr::to_unsafe_ptr;\n \n-#[cfg(notest)] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use cmp::{Eq, Ord};\n \n pub mod raw {\n     use intrinsic::TyDesc;\n@@ -49,23 +49,23 @@ pub fn mut_ptr_eq<T>(a: @mut T, b: @mut T) -> bool {\n     a_ptr == b_ptr\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Eq> Eq for @T {\n     #[inline(always)]\n     fn eq(&self, other: &@T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n     fn ne(&self, other: &@T) -> bool { *(*self) != *(*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Eq> Eq for @mut T {\n     #[inline(always)]\n     fn eq(&self, other: &@mut T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n     fn ne(&self, other: &@mut T) -> bool { *(*self) != *(*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Ord> Ord for @T {\n     #[inline(always)]\n     fn lt(&self, other: &@T) -> bool { *(*self) < *(*other) }\n@@ -77,7 +77,7 @@ impl<T:Ord> Ord for @T {\n     fn gt(&self, other: &@T) -> bool { *(*self) > *(*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Ord> Ord for @mut T {\n     #[inline(always)]\n     fn lt(&self, other: &@mut T) -> bool { *(*self) < *(*other) }"}, {"sha": "833bd3459cebf4b76a3006f9a80cbfcdf92552da", "filename": "src/libcore/nil.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnil.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -14,18 +14,18 @@ Functions for the unit type.\n \n */\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n use prelude::*;\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for () {\n     #[inline(always)]\n     fn eq(&self, _other: &()) -> bool { true }\n     #[inline(always)]\n     fn ne(&self, _other: &()) -> bool { false }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for () {\n     #[inline(always)]\n     fn lt(&self, _other: &()) -> bool { false }\n@@ -37,13 +37,13 @@ impl Ord for () {\n     fn gt(&self, _other: &()) -> bool { false }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl TotalOrd for () {\n     #[inline(always)]\n     fn cmp(&self, _other: &()) -> Ordering { Equal }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl TotalEq for () {\n     #[inline(always)]\n     fn equals(&self, _other: &()) -> bool { true }"}, {"sha": "93e881c50e82f4dafea5bdf06b245492b3795919", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -198,15 +198,15 @@ pub mod consts {\n \n impl Num for f32 {}\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for f32 {\n     #[inline(always)]\n     fn eq(&self, other: &f32) -> bool { (*self) == (*other) }\n     #[inline(always)]\n     fn ne(&self, other: &f32) -> bool { (*self) != (*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl ApproxEq<f32> for f32 {\n     #[inline(always)]\n     fn approx_epsilon() -> f32 { 1.0e-6 }\n@@ -222,7 +222,7 @@ impl ApproxEq<f32> for f32 {\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for f32 {\n     #[inline(always)]\n     fn lt(&self, other: &f32) -> bool { (*self) < (*other) }\n@@ -272,37 +272,37 @@ impl One for f32 {\n     fn one() -> f32 { 1.0 }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Add<f32,f32> for f32 {\n     #[inline(always)]\n     fn add(&self, other: &f32) -> f32 { *self + *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Sub<f32,f32> for f32 {\n     #[inline(always)]\n     fn sub(&self, other: &f32) -> f32 { *self - *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Mul<f32,f32> for f32 {\n     #[inline(always)]\n     fn mul(&self, other: &f32) -> f32 { *self * *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Div<f32,f32> for f32 {\n     #[inline(always)]\n     fn div(&self, other: &f32) -> f32 { *self / *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Rem<f32,f32> for f32 {\n     #[inline(always)]\n     fn rem(&self, other: &f32) -> f32 { *self % *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Neg<f32> for f32 {\n     #[inline(always)]\n     fn neg(&self) -> f32 { -*self }"}, {"sha": "096206d7183010ed29094143daf9d7e09debf95d", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -221,15 +221,15 @@ pub mod consts {\n \n impl Num for f64 {}\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for f64 {\n     #[inline(always)]\n     fn eq(&self, other: &f64) -> bool { (*self) == (*other) }\n     #[inline(always)]\n     fn ne(&self, other: &f64) -> bool { (*self) != (*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl ApproxEq<f64> for f64 {\n     #[inline(always)]\n     fn approx_epsilon() -> f64 { 1.0e-6 }\n@@ -245,7 +245,7 @@ impl ApproxEq<f64> for f64 {\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for f64 {\n     #[inline(always)]\n     fn lt(&self, other: &f64) -> bool { (*self) < (*other) }\n@@ -295,28 +295,28 @@ impl One for f64 {\n     fn one() -> f64 { 1.0 }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Add<f64,f64> for f64 {\n     fn add(&self, other: &f64) -> f64 { *self + *other }\n }\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Sub<f64,f64> for f64 {\n     fn sub(&self, other: &f64) -> f64 { *self - *other }\n }\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Mul<f64,f64> for f64 {\n     fn mul(&self, other: &f64) -> f64 { *self * *other }\n }\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Div<f64,f64> for f64 {\n     fn div(&self, other: &f64) -> f64 { *self / *other }\n }\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Rem<f64,f64> for f64 {\n     #[inline(always)]\n     fn rem(&self, other: &f64) -> f64 { *self % *other }\n }\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Neg<f64> for f64 {\n     fn neg(&self) -> f64 { -*self }\n }"}, {"sha": "e6a2ed7ea97590747fd6d891f241bc2abfaf85bb", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -363,15 +363,15 @@ pub fn tan(x: float) -> float {\n \n impl Num for float {}\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for float {\n     #[inline(always)]\n     fn eq(&self, other: &float) -> bool { (*self) == (*other) }\n     #[inline(always)]\n     fn ne(&self, other: &float) -> bool { (*self) != (*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl ApproxEq<float> for float {\n     #[inline(always)]\n     fn approx_epsilon() -> float { 1.0e-6 }\n@@ -387,7 +387,7 @@ impl ApproxEq<float> for float {\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for float {\n     #[inline(always)]\n     fn lt(&self, other: &float) -> bool { (*self) < (*other) }\n@@ -695,36 +695,36 @@ impl RealExt for float {\n     fn yn(&self, n: int) -> float { yn(n as c_int, *self as f64) as float }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Add<float,float> for float {\n     #[inline(always)]\n     fn add(&self, other: &float) -> float { *self + *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Sub<float,float> for float {\n     #[inline(always)]\n     fn sub(&self, other: &float) -> float { *self - *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Mul<float,float> for float {\n     #[inline(always)]\n     fn mul(&self, other: &float) -> float { *self * *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Div<float,float> for float {\n     #[inline(always)]\n     fn div(&self, other: &float) -> float { *self / *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Rem<float,float> for float {\n     #[inline(always)]\n     fn rem(&self, other: &float) -> float { *self % *other }\n }\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Neg<float> for float {\n     #[inline(always)]\n     fn neg(&self) -> float { -*self }"}, {"sha": "9ee5ba4753db0848981348b023bd0efdcf13f858", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -131,7 +131,7 @@ pub fn abs(i: T) -> T { i.abs() }\n \n impl Num for T {}\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for T {\n     #[inline(always)]\n     fn lt(&self, other: &T) -> bool { return (*self) < (*other); }\n@@ -143,7 +143,7 @@ impl Ord for T {\n     fn gt(&self, other: &T) -> bool { return (*self) > (*other); }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for T {\n     #[inline(always)]\n     fn eq(&self, other: &T) -> bool { return (*self) == (*other); }\n@@ -182,25 +182,25 @@ impl One for T {\n     fn one() -> T { 1 }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Add<T,T> for T {\n     #[inline(always)]\n     fn add(&self, other: &T) -> T { *self + *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Sub<T,T> for T {\n     #[inline(always)]\n     fn sub(&self, other: &T) -> T { *self - *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Mul<T,T> for T {\n     #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Div<T,T> for T {\n     ///\n     /// Integer division, truncated towards 0. As this behaviour reflects the underlying\n@@ -224,7 +224,7 @@ impl Div<T,T> for T {\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Rem<T,T> for T {\n     ///\n     /// Returns the integer remainder after division, satisfying:\n@@ -251,7 +251,7 @@ impl Rem<T,T> for T {\n     fn rem(&self, other: &T) -> T { *self % *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Neg<T> for T {\n     #[inline(always)]\n     fn neg(&self) -> T { -*self }\n@@ -417,37 +417,37 @@ impl Integer for T {\n \n impl Bitwise for T {}\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl BitOr<T,T> for T {\n     #[inline(always)]\n     fn bitor(&self, other: &T) -> T { *self | *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl BitAnd<T,T> for T {\n     #[inline(always)]\n     fn bitand(&self, other: &T) -> T { *self & *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl BitXor<T,T> for T {\n     #[inline(always)]\n     fn bitxor(&self, other: &T) -> T { *self ^ *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Shl<T,T> for T {\n     #[inline(always)]\n     fn shl(&self, other: &T) -> T { *self << *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Shr<T,T> for T {\n     #[inline(always)]\n     fn shr(&self, other: &T) -> T { *self >> *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Not<T> for T {\n     #[inline(always)]\n     fn not(&self) -> T { !*self }"}, {"sha": "dcb0865cb9b9843758267e0a72c5e8b809821f4e", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -96,7 +96,7 @@ pub fn compl(i: T) -> T {\n \n impl Num for T {}\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for T {\n     #[inline(always)]\n     fn lt(&self, other: &T) -> bool { (*self) < (*other) }\n@@ -108,7 +108,7 @@ impl Ord for T {\n     fn gt(&self, other: &T) -> bool { (*self) > (*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for T {\n     #[inline(always)]\n     fn eq(&self, other: &T) -> bool { return (*self) == (*other); }\n@@ -147,37 +147,37 @@ impl One for T {\n     fn one() -> T { 1 }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Add<T,T> for T {\n     #[inline(always)]\n     fn add(&self, other: &T) -> T { *self + *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Sub<T,T> for T {\n     #[inline(always)]\n     fn sub(&self, other: &T) -> T { *self - *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Mul<T,T> for T {\n     #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Div<T,T> for T {\n     #[inline(always)]\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Rem<T,T> for T {\n     #[inline(always)]\n     fn rem(&self, other: &T) -> T { *self % *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Neg<T> for T {\n     #[inline(always)]\n     fn neg(&self) -> T { -*self }\n@@ -240,37 +240,37 @@ impl Integer for T {\n \n impl Bitwise for T {}\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl BitOr<T,T> for T {\n     #[inline(always)]\n     fn bitor(&self, other: &T) -> T { *self | *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl BitAnd<T,T> for T {\n     #[inline(always)]\n     fn bitand(&self, other: &T) -> T { *self & *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl BitXor<T,T> for T {\n     #[inline(always)]\n     fn bitxor(&self, other: &T) -> T { *self ^ *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Shl<T,T> for T {\n     #[inline(always)]\n     fn shl(&self, other: &T) -> T { *self << *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Shr<T,T> for T {\n     #[inline(always)]\n     fn shr(&self, other: &T) -> T { *self >> *other }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Not<T> for T {\n     #[inline(always)]\n     fn not(&self) -> T { !*self }"}, {"sha": "3262fb4afdcf6ad5a6406ff4bee2e594da95dff5", "filename": "src/libcore/owned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -10,17 +10,17 @@\n \n //! Operations on unique pointer types\n \n-#[cfg(notest)] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use cmp::{Eq, Ord};\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Eq> Eq for ~T {\n     #[inline(always)]\n     fn eq(&self, other: &~T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n     fn ne(&self, other: &~T) -> bool { *(*self) != *(*other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Ord> Ord for ~T {\n     #[inline(always)]\n     fn lt(&self, other: &~T) -> bool { *(*self) < *(*other) }"}, {"sha": "7f2165185eb885190dd2cbc4fde61d71f7b15298", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -15,7 +15,7 @@ use libc;\n use libc::{c_void, size_t};\n use sys;\n \n-#[cfg(notest)] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n \n pub mod libc_ {\n@@ -243,7 +243,7 @@ impl<T> Ptr<T> for *mut T {\n }\n \n // Equality for pointers\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T> Eq for *const T {\n     #[inline(always)]\n     fn eq(&self, other: &*const T) -> bool {\n@@ -258,7 +258,7 @@ impl<T> Eq for *const T {\n }\n \n // Comparison for pointers\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T> Ord for *const T {\n     #[inline(always)]\n     fn lt(&self, other: &*const T) -> bool {\n@@ -295,7 +295,7 @@ impl<T> Ord for *const T {\n }\n \n // Equality for region pointers\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self,T:Eq> Eq for &'self T {\n     #[inline(always)]\n     fn eq(&self, other: & &'self T) -> bool {\n@@ -308,7 +308,7 @@ impl<'self,T:Eq> Eq for &'self T {\n }\n \n // Comparison for region pointers\n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self,T:Ord> Ord for &'self T {\n     #[inline(always)]\n     fn lt(&self, other: & &'self T) -> bool {"}, {"sha": "44c07e86814f2f0a801fa214d3759614818b1893", "filename": "src/libcore/str.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -32,7 +32,7 @@ use uint;\n use vec;\n use to_str::ToStr;\n \n-#[cfg(notest)] use cmp::{Eq, Ord, Equiv, TotalEq};\n+#[cfg(not(test))] use cmp::{Eq, Ord, Equiv, TotalEq};\n \n /*\n Section: Creating a string\n@@ -913,7 +913,7 @@ Section: Comparing strings\n */\n \n /// Bytewise slice equality\n-#[cfg(notest)]\n+#[cfg(not(test))]\n #[lang=\"str_eq\"]\n #[inline]\n pub fn eq_slice(a: &str, b: &str) -> bool {\n@@ -949,7 +949,7 @@ pub fn eq_slice(a: &str, b: &str) -> bool {\n }\n \n /// Bytewise string equality\n-#[cfg(notest)]\n+#[cfg(not(test))]\n #[lang=\"uniq_str_eq\"]\n #[inline]\n pub fn eq(a: &~str, b: &~str) -> bool {\n@@ -977,19 +977,19 @@ fn cmp(a: &str, b: &str) -> Ordering {\n     a.len().cmp(&b.len())\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self> TotalOrd for &'self str {\n     #[inline]\n     fn cmp(&self, other: & &'self str) -> Ordering { cmp(*self, *other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl TotalOrd for ~str {\n     #[inline]\n     fn cmp(&self, other: &~str) -> Ordering { cmp(*self, *other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl TotalOrd for @str {\n     #[inline]\n     fn cmp(&self, other: &@str) -> Ordering { cmp(*self, *other) }\n@@ -1030,7 +1030,7 @@ fn gt(a: &str, b: &str) -> bool {\n     !le(a, b)\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self> Eq for &'self str {\n     #[inline(always)]\n     fn eq(&self, other: & &'self str) -> bool {\n@@ -1040,7 +1040,7 @@ impl<'self> Eq for &'self str {\n     fn ne(&self, other: & &'self str) -> bool { !(*self).eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for ~str {\n     #[inline(always)]\n     fn eq(&self, other: &~str) -> bool {\n@@ -1050,7 +1050,7 @@ impl Eq for ~str {\n     fn ne(&self, other: &~str) -> bool { !(*self).eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Eq for @str {\n     #[inline(always)]\n     fn eq(&self, other: &@str) -> bool {\n@@ -1060,31 +1060,31 @@ impl Eq for @str {\n     fn ne(&self, other: &@str) -> bool { !(*self).eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self> TotalEq for &'self str {\n     #[inline(always)]\n     fn equals(&self, other: & &'self str) -> bool {\n         eq_slice((*self), (*other))\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl TotalEq for ~str {\n     #[inline(always)]\n     fn equals(&self, other: &~str) -> bool {\n         eq_slice((*self), (*other))\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl TotalEq for @str {\n     #[inline(always)]\n     fn equals(&self, other: &@str) -> bool {\n         eq_slice((*self), (*other))\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for ~str {\n     #[inline(always)]\n     fn lt(&self, other: &~str) -> bool { lt((*self), (*other)) }\n@@ -1096,7 +1096,7 @@ impl Ord for ~str {\n     fn gt(&self, other: &~str) -> bool { gt((*self), (*other)) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self> Ord for &'self str {\n     #[inline(always)]\n     fn lt(&self, other: & &'self str) -> bool { lt((*self), (*other)) }\n@@ -1108,7 +1108,7 @@ impl<'self> Ord for &'self str {\n     fn gt(&self, other: & &'self str) -> bool { gt((*self), (*other)) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl Ord for @str {\n     #[inline(always)]\n     fn lt(&self, other: &@str) -> bool { lt((*self), (*other)) }\n@@ -1120,7 +1120,7 @@ impl Ord for @str {\n     fn gt(&self, other: &@str) -> bool { gt((*self), (*other)) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self> Equiv<~str> for &'self str {\n     #[inline(always)]\n     fn equiv(&self, other: &~str) -> bool { eq_slice(*self, *other) }\n@@ -2451,7 +2451,7 @@ pub mod raw {\n \n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n pub mod traits {\n     use ops::Add;\n     use str::append;"}, {"sha": "b29a4e55426dfb0f1da22fe6372c2e3e88d61bb8", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -14,7 +14,7 @@ use clone::Clone;\n use kinds::Copy;\n use vec;\n \n-#[cfg(notest)] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use cmp::{Eq, Ord};\n \n pub trait CopyableTuple<T, U> {\n     fn first(&self) -> T;\n@@ -122,7 +122,7 @@ impl<A:Copy,B:Copy> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n     }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<A:Eq> Eq for (A,) {\n     #[inline(always)]\n     fn eq(&self, other: &(A,)) -> bool {\n@@ -138,7 +138,7 @@ impl<A:Eq> Eq for (A,) {\n     fn ne(&self, other: &(A,)) -> bool { !(*self).eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<A:Ord> Ord for (A,) {\n     #[inline(always)]\n     fn lt(&self, other: &(A,)) -> bool {\n@@ -161,7 +161,7 @@ impl<A:Ord> Ord for (A,) {\n     fn gt(&self, other: &(A,)) -> bool { other.lt(&(*self))  }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<A:Eq,B:Eq> Eq for (A, B) {\n     #[inline(always)]\n     fn eq(&self, other: &(A, B)) -> bool {\n@@ -177,7 +177,7 @@ impl<A:Eq,B:Eq> Eq for (A, B) {\n     fn ne(&self, other: &(A, B)) -> bool { !(*self).eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<A:Ord,B:Ord> Ord for (A, B) {\n     #[inline(always)]\n     fn lt(&self, other: &(A, B)) -> bool {\n@@ -202,7 +202,7 @@ impl<A:Ord,B:Ord> Ord for (A, B) {\n     fn gt(&self, other: &(A, B)) -> bool { (*other).lt(&(*self))  }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<A:Eq,B:Eq,C:Eq> Eq for (A, B, C) {\n     #[inline(always)]\n     fn eq(&self, other: &(A, B, C)) -> bool {\n@@ -219,7 +219,7 @@ impl<A:Eq,B:Eq,C:Eq> Eq for (A, B, C) {\n     fn ne(&self, other: &(A, B, C)) -> bool { !(*self).eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<A:Ord,B:Ord,C:Ord> Ord for (A, B, C) {\n     #[inline(always)]\n     fn lt(&self, other: &(A, B, C)) -> bool {"}, {"sha": "400830c0a6db99b72e011d62a4e6d8b8f50c05d1", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -33,7 +33,7 @@ pub mod intrinsics;\n #[path = \"unstable/extfmt.rs\"]\n pub mod extfmt;\n #[path = \"unstable/lang.rs\"]\n-#[cfg(notest)]\n+#[cfg(not(test))]\n pub mod lang;\n \n mod rustrt {"}, {"sha": "5e2f0926c980b47f5d3238befe31e3aa145e2698", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -30,7 +30,7 @@ use uint;\n use unstable::intrinsics;\n use vec;\n \n-#[cfg(notest)] use cmp::Equiv;\n+#[cfg(not(test))] use cmp::Equiv;\n \n pub mod rustrt {\n     use libc;\n@@ -1656,49 +1656,49 @@ fn equals<T: TotalEq>(a: &[T], b: &[T]) -> bool {\n     true\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self,T:Eq> Eq for &'self [T] {\n     #[inline(always)]\n     fn eq(&self, other: & &'self [T]) -> bool { eq(*self, *other) }\n     #[inline(always)]\n     fn ne(&self, other: & &'self [T]) -> bool { !self.eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Eq> Eq for ~[T] {\n     #[inline(always)]\n     fn eq(&self, other: &~[T]) -> bool { eq(*self, *other) }\n     #[inline(always)]\n     fn ne(&self, other: &~[T]) -> bool { !self.eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Eq> Eq for @[T] {\n     #[inline(always)]\n     fn eq(&self, other: &@[T]) -> bool { eq(*self, *other) }\n     #[inline(always)]\n     fn ne(&self, other: &@[T]) -> bool { !self.eq(other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self,T:TotalEq> TotalEq for &'self [T] {\n     #[inline(always)]\n     fn equals(&self, other: & &'self [T]) -> bool { equals(*self, *other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:TotalEq> TotalEq for ~[T] {\n     #[inline(always)]\n     fn equals(&self, other: &~[T]) -> bool { equals(*self, *other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:TotalEq> TotalEq for @[T] {\n     #[inline(always)]\n     fn equals(&self, other: &@[T]) -> bool { equals(*self, *other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self,T:Eq> Equiv<~[T]> for &'self [T] {\n     #[inline(always)]\n     fn equiv(&self, other: &~[T]) -> bool { eq(*self, *other) }\n@@ -1720,19 +1720,19 @@ fn cmp<T: TotalOrd>(a: &[T], b: &[T]) -> Ordering {\n     a.len().cmp(&b.len())\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self,T:TotalOrd> TotalOrd for &'self [T] {\n     #[inline(always)]\n     fn cmp(&self, other: & &'self [T]) -> Ordering { cmp(*self, *other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T: TotalOrd> TotalOrd for ~[T] {\n     #[inline(always)]\n     fn cmp(&self, other: &~[T]) -> Ordering { cmp(*self, *other) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T: TotalOrd> TotalOrd for @[T] {\n     #[inline(always)]\n     fn cmp(&self, other: &@[T]) -> Ordering { cmp(*self, *other) }\n@@ -1757,7 +1757,7 @@ fn le<T:Ord>(a: &[T], b: &[T]) -> bool { !lt(b, a) }\n fn ge<T:Ord>(a: &[T], b: &[T]) -> bool { !lt(a, b) }\n fn gt<T:Ord>(a: &[T], b: &[T]) -> bool { lt(b, a)  }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<'self,T:Ord> Ord for &'self [T] {\n     #[inline(always)]\n     fn lt(&self, other: & &'self [T]) -> bool { lt((*self), (*other)) }\n@@ -1769,7 +1769,7 @@ impl<'self,T:Ord> Ord for &'self [T] {\n     fn gt(&self, other: & &'self [T]) -> bool { gt((*self), (*other)) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Ord> Ord for ~[T] {\n     #[inline(always)]\n     fn lt(&self, other: &~[T]) -> bool { lt((*self), (*other)) }\n@@ -1781,7 +1781,7 @@ impl<T:Ord> Ord for ~[T] {\n     fn gt(&self, other: &~[T]) -> bool { gt((*self), (*other)) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n impl<T:Ord> Ord for @[T] {\n     #[inline(always)]\n     fn lt(&self, other: &@[T]) -> bool { lt((*self), (*other)) }\n@@ -1793,7 +1793,7 @@ impl<T:Ord> Ord for @[T] {\n     fn gt(&self, other: &@[T]) -> bool { gt((*self), (*other)) }\n }\n \n-#[cfg(notest)]\n+#[cfg(not(test))]\n pub mod traits {\n     use kinds::Copy;\n     use ops::Add;"}, {"sha": "43d90095424efa92806be09e0f2cb816e66ddcb4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb66d8948a9375e7be65296d19586166157ec667/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=cb66d8948a9375e7be65296d19586166157ec667", "patch": "@@ -119,9 +119,8 @@ pub fn build_configuration(sess: Session, argv0: @~str, input: &input) ->\n     let default_cfg = default_configuration(sess, argv0, input);\n     let user_cfg = /*bad*/copy sess.opts.cfg;\n     // If the user wants a test runner, then add the test cfg\n-    let user_cfg = append_configuration(\n-        user_cfg,\n-        if sess.opts.test { ~\"test\" } else { ~\"notest\" });\n+    let user_cfg = if sess.opts.test { append_configuration(user_cfg, ~\"test\") }\n+                   else { user_cfg };\n     // If the user requested GC, then add the GC cfg\n     let user_cfg = append_configuration(\n         user_cfg,"}]}