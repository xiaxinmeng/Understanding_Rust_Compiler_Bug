{"sha": "181dbd71d6e979215c43356d1b9b72898b649dc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MWRiZDcxZDZlOTc5MjE1YzQzMzU2ZDFiOWI3Mjg5OGI2NDlkYzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-11T21:57:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-19T17:53:06Z"}, "message": "rustc_trans: Add MSVC linker support\n\nThis commit adds an implementation of the `Linker` trait which is used to drive\nMSVC's `link.exe` support. Nothing too surprising here as it's mostly just\nfilling out the necessary tidbits here and there.", "tree": {"sha": "54b2ba45425919eaa0dfd86634ebe9db6c2ca56f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b2ba45425919eaa0dfd86634ebe9db6c2ca56f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/181dbd71d6e979215c43356d1b9b72898b649dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/181dbd71d6e979215c43356d1b9b72898b649dc4", "html_url": "https://github.com/rust-lang/rust/commit/181dbd71d6e979215c43356d1b9b72898b649dc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/181dbd71d6e979215c43356d1b9b72898b649dc4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a", "html_url": "https://github.com/rust-lang/rust/commit/eb50ffd2343eef3afcfbf0696d04fcc3fe8a075a"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "844a0a698677ff312240ef61bd5b5951b925b7d6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/181dbd71d6e979215c43356d1b9b72898b649dc4/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181dbd71d6e979215c43356d1b9b72898b649dc4/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=181dbd71d6e979215c43356d1b9b72898b649dc4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use super::archive::{Archive, ArchiveBuilder, ArchiveConfig, METADATA_FILENAME};\n-use super::linker::{Linker, GnuLinker};\n+use super::linker::{Linker, GnuLinker, MsvcLinker};\n use super::rpath::RPathConfig;\n use super::rpath;\n use super::svh::Svh;\n@@ -805,8 +805,12 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     }\n \n     {\n-        let mut linker = GnuLinker { cmd: &mut cmd, sess: &sess };\n-        link_args(&mut linker, sess, dylib, tmpdir.path(),\n+        let mut linker = if sess.target.target.options.is_like_msvc {\n+            Box::new(MsvcLinker { cmd: &mut cmd, sess: &sess }) as Box<Linker>\n+        } else {\n+            Box::new(GnuLinker { cmd: &mut cmd, sess: &sess }) as Box<Linker>\n+        };\n+        link_args(&mut *linker, sess, dylib, tmpdir.path(),\n                   trans, obj_filename, out_filename);\n         if !sess.target.target.options.no_compiler_rt {\n             linker.link_staticlib(\"compiler-rt\");\n@@ -874,9 +878,8 @@ fn link_args(cmd: &mut Linker,\n     let t = &sess.target.target;\n \n     cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n-\n-    cmd.output_filename(out_filename);\n     cmd.add_object(obj_filename);\n+    cmd.output_filename(out_filename);\n \n     // Stack growth requires statically linking a __morestack function. Note\n     // that this is listed *before* all other libraries. Due to the usage of the"}, {"sha": "1eacec46c87bbad7b130cccc8f4fb0ef34ffd0b2", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/181dbd71d6e979215c43356d1b9b72898b649dc4/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181dbd71d6e979215c43356d1b9b72898b649dc4/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=181dbd71d6e979215c43356d1b9b72898b649dc4", "patch": "@@ -173,3 +173,81 @@ impl<'a> Linker for GnuLinker<'a> {\n         self.cmd.arg(\"-Wl,-Bdynamic\");\n     }\n }\n+\n+pub struct MsvcLinker<'a> {\n+    pub cmd: &'a mut Command,\n+    pub sess: &'a Session,\n+}\n+\n+impl<'a> Linker for MsvcLinker<'a> {\n+    fn link_rlib(&mut self, lib: &Path) { self.cmd.arg(lib); }\n+    fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n+    fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n+    fn build_dylib(&mut self, _out_filename: &Path) { self.cmd.arg(\"/DLL\"); }\n+    fn gc_sections(&mut self, _is_dylib: bool) { self.cmd.arg(\"/OPT:REF,ICF\"); }\n+\n+    fn link_dylib(&mut self, lib: &str) {\n+        self.cmd.arg(&format!(\"{}.lib\", lib));\n+    }\n+    fn link_staticlib(&mut self, lib: &str) {\n+        self.cmd.arg(&format!(\"{}.lib\", lib));\n+    }\n+\n+    fn position_independent_executable(&mut self) {\n+        // noop\n+    }\n+\n+    fn no_default_libraries(&mut self) {\n+        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n+        // as there's been trouble in the past of linking the C++ standard\n+        // library required by LLVM. This likely needs to happen one day, but\n+        // in general Windows is also a more controlled environment than\n+        // Unix, so it's not necessarily as critical that this be implemented.\n+        //\n+        // Note that there are also some licensing worries about statically\n+        // linking some libraries which require a specific agreement, so it may\n+        // not ever be possible for us to pass this flag.\n+    }\n+\n+    fn include_path(&mut self, path: &Path) {\n+        let mut arg = OsString::from(\"/LIBPATH:\");\n+        arg.push(path);\n+        self.cmd.arg(&arg);\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        let mut arg = OsString::from(\"/OUT:\");\n+        arg.push(path);\n+        self.cmd.arg(&arg);\n+    }\n+\n+    fn framework_path(&mut self, _path: &Path) {\n+        panic!(\"frameworks are not supported on windows\")\n+    }\n+    fn link_framework(&mut self, _framework: &str) {\n+        panic!(\"frameworks are not supported on windows\")\n+    }\n+\n+    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n+        // not supported?\n+        self.link_staticlib(lib);\n+    }\n+    fn optimize(&mut self) {\n+        // Needs more investigation of `/OPT` arguments\n+    }\n+    fn whole_archives(&mut self) {\n+        // hints not supported?\n+    }\n+    fn no_whole_archives(&mut self) {\n+        // hints not supported?\n+    }\n+\n+    // On windows static libraries are of the form `foo.lib` and dynamic\n+    // libraries are not linked against directly, but rather through their\n+    // import libraries also called `foo.lib`. As a result there's no\n+    // possibility for a native library to appear both dynamically and\n+    // statically in the same folder so we don't have to worry about hints like\n+    // we do on Unix platforms.\n+    fn hint_static(&mut self) {}\n+    fn hint_dynamic(&mut self) {}\n+}"}]}