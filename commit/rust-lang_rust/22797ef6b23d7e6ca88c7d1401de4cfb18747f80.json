{"sha": "22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "node_id": "C_kwDOAAsO6NoAKDIyNzk3ZWY2YjIzZDdlNmNhODhjN2QxNDAxZGU0Y2ZiMTg3NDdmODA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-16T13:02:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-16T13:02:17Z"}, "message": "Rollup merge of #105725 - fee1-dead-contrib:allow-impl-const-trait, r=oli-obk\n\nAllow `impl ~const Trait` opaque types", "tree": {"sha": "5def6b588a3be2d35b9b14df40a5287b799c608e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5def6b588a3be2d35b9b14df40a5287b799c608e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnGxZCRBK7hj4Ov3rIwAAj7sIAAaGa9ej9UIb3ZepYPqghm7p\nnS8wmsuRDEhXsbMV0OGs2307i+5xCVhuga0itq3Xdyh60daPSACrX+++oXoFob1d\n6DP199r2oEu0ggaxNYCWfHViTf+OnDcJ9KFdNUfmKUhmQoHCn88kpdZkje0rSvHL\nXqmZ58bIfeInmXB4wP0a2uDDttDV2EXNru7s14xlMcaGFd5DyXEt9A7zBbi+vUjD\nBvTOeHNhy0Z+bs1AEzCKSOIkhTenyiFR0H3qzk3Z9mYP9iolbcO/8aIaLUQItNbl\nhDRkmGj37QxFuEmI86WshW98tuSgxzIeKCWOrgVMju7bQjqKgTRh0GgisTGoqzE=\n=7E68\n-----END PGP SIGNATURE-----\n", "payload": "tree 5def6b588a3be2d35b9b14df40a5287b799c608e\nparent 01ef4b21dc5251b58bd9c6fd6face2ae95d56da1\nparent a8b9e00518aef62e20ff2ab79801d200c869ea8f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671195737 +0100\ncommitter GitHub <noreply@github.com> 1671195737 +0100\n\nRollup merge of #105725 - fee1-dead-contrib:allow-impl-const-trait, r=oli-obk\n\nAllow `impl ~const Trait` opaque types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "html_url": "https://github.com/rust-lang/rust/commit/22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ef4b21dc5251b58bd9c6fd6face2ae95d56da1", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ef4b21dc5251b58bd9c6fd6face2ae95d56da1", "html_url": "https://github.com/rust-lang/rust/commit/01ef4b21dc5251b58bd9c6fd6face2ae95d56da1"}, {"sha": "a8b9e00518aef62e20ff2ab79801d200c869ea8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b9e00518aef62e20ff2ab79801d200c869ea8f", "html_url": "https://github.com/rust-lang/rust/commit/a8b9e00518aef62e20ff2ab79801d200c869ea8f"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "55ea12d25ea2ceead70b4c4e6c4de49548a84852", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "patch": "@@ -42,7 +42,6 @@ enum SelfSemantic {\n /// What is the context that prevents using `~const`?\n enum DisallowTildeConstContext<'a> {\n     TraitObject,\n-    ImplTrait,\n     Fn(FnKind<'a>),\n }\n \n@@ -187,11 +186,7 @@ impl<'a> AstValidator<'a> {\n \n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n-        if outer.is_some() {\n-            self.with_banned_tilde_const(DisallowTildeConstContext::ImplTrait, f);\n-        } else {\n-            f(self);\n-        }\n+        f(self);\n         self.outer_impl_trait = old;\n     }\n \n@@ -1384,7 +1379,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     let mut err = self.err_handler().struct_span_err(bound.span(), \"`~const` is not allowed here\");\n                     match reason {\n                         DisallowTildeConstContext::TraitObject => err.note(\"trait objects cannot have `~const` trait bounds\"),\n-                        DisallowTildeConstContext::ImplTrait => err.note(\"`impl Trait`s cannot have `~const` trait bounds\"),\n                         DisallowTildeConstContext::Fn(FnKind::Closure(..)) => err.note(\"closures cannot have `~const` trait bounds\"),\n                         DisallowTildeConstContext::Fn(FnKind::Fn(_, ident, ..)) => err.span_note(ident.span, \"this function is not `const`, so it cannot have `~const` trait bounds\"),\n                     };"}, {"sha": "0622f96e70d818ebf7772d472d4a11aa4337d5a3", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-trait.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs?ref=22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "patch": "@@ -0,0 +1,55 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(\n+    associated_type_bounds,\n+    const_trait_impl,\n+    const_cmp,\n+    return_position_impl_trait_in_trait,\n+)]\n+\n+use std::marker::Destruct;\n+\n+const fn cmp(a: &impl ~const PartialEq) -> bool {\n+    a == a\n+}\n+\n+const fn wrap(x: impl ~const PartialEq + ~const Destruct)\n+    -> impl ~const PartialEq + ~const Destruct\n+{\n+    x\n+}\n+\n+#[const_trait]\n+trait Foo {\n+    fn huh() -> impl ~const PartialEq + ~const Destruct + Copy;\n+}\n+\n+impl const Foo for () {\n+    fn huh() -> impl ~const PartialEq + ~const Destruct + Copy {\n+        123\n+    }\n+}\n+\n+const _: () = {\n+    assert!(cmp(&0xDEADBEEFu32));\n+    assert!(cmp(&()));\n+    assert!(wrap(123) == wrap(123));\n+    assert!(wrap(123) != wrap(456));\n+    let x = <() as Foo>::huh();\n+    assert!(x == x);\n+};\n+\n+#[const_trait]\n+trait T {}\n+struct S;\n+impl const T for S {}\n+\n+const fn rpit() -> impl ~const T { S }\n+\n+const fn apit(_: impl ~const T + ~const Destruct) {}\n+\n+const fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n+\n+const fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T> + ~const Destruct) {}\n+\n+fn main() {}"}, {"sha": "95f7aaba0fc389fe5d8c895e6a319947bb554829", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "patch": "@@ -1,23 +1,6 @@\n #![feature(const_trait_impl)]\n #![feature(associated_type_bounds)]\n \n-#[const_trait]\n-trait T {}\n-struct S;\n-impl T for S {}\n-\n-fn rpit() -> impl ~const T { S }\n-//~^ ERROR `~const` is not allowed\n-\n-fn apit(_: impl ~const T) {}\n-//~^ ERROR `~const` is not allowed\n-\n-fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n-//~^ ERROR `~const` is not allowed\n-\n-fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n-//~^ ERROR `~const` is not allowed\n-\n struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n //~^ ERROR `~const` and `?` are mutually exclusive\n "}, {"sha": "d20f146df3f1a102fa36cbe168734f1cec616f91", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22797ef6b23d7e6ca88c7d1401de4cfb18747f80/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=22797ef6b23d7e6ca88c7d1401de4cfb18747f80", "patch": "@@ -1,40 +1,8 @@\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:9:19\n-   |\n-LL | fn rpit() -> impl ~const T { S }\n-   |                   ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:12:17\n-   |\n-LL | fn apit(_: impl ~const T) {}\n-   |                 ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:15:50\n-   |\n-LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n-   |                                                  ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:18:48\n-   |\n-LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n-   |                                                ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n error: `~const` and `?` are mutually exclusive\n-  --> $DIR/tilde-const-invalid-places.rs:21:25\n+  --> $DIR/tilde-const-invalid-places.rs:4:25\n    |\n LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n    |                         ^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n "}]}