{"sha": "dd927a5b0f29342f7ad919fb52ca29510d2e7362", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTI3YTViMGYyOTM0MmY3YWQ5MTlmYjUyY2EyOTUxMGQyZTczNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-16T17:47:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-16T17:47:21Z"}, "message": "Auto merge of #72276 - RalfJung:rollup-nkfu3is, r=RalfJung\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72045 (Incomplete features can also be unsound)\n - #72047 (Literal error reporting cleanup)\n - #72060 (move `ty::List` into a new submodule)\n - #72094 (cmdline: Make target features individually overridable)\n - #72254 (Remove redundant backtick in error message.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "70d83a4352454c951413f2a3cc0a056d07a1bccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70d83a4352454c951413f2a3cc0a056d07a1bccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd927a5b0f29342f7ad919fb52ca29510d2e7362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd927a5b0f29342f7ad919fb52ca29510d2e7362", "html_url": "https://github.com/rust-lang/rust/commit/dd927a5b0f29342f7ad919fb52ca29510d2e7362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd927a5b0f29342f7ad919fb52ca29510d2e7362/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6163394e1ff98c53abc9d27f68b5608faa8cd9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6163394e1ff98c53abc9d27f68b5608faa8cd9b6", "html_url": "https://github.com/rust-lang/rust/commit/6163394e1ff98c53abc9d27f68b5608faa8cd9b6"}, {"sha": "12112f4d7d3a9dd1b5f285a38b661e9d50c2c0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/12112f4d7d3a9dd1b5f285a38b661e9d50c2c0fa", "html_url": "https://github.com/rust-lang/rust/commit/12112f4d7d3a9dd1b5f285a38b661e9d50c2c0fa"}], "stats": {"total": 1155, "additions": 608, "deletions": 547}, "files": [{"sha": "c638f88057a526aa394457bc425acc88a49f1d57", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -464,7 +464,15 @@ machine. Each target has a default base CPU.\n \n Individual targets will support different features; this flag lets you control\n enabling or disabling a feature. Each feature should be prefixed with a `+` to\n-enable it or `-` to disable it. Separate multiple features with commas.\n+enable it or `-` to disable it.\n+\n+Features from multiple `-C target-feature` options are combined. \\\n+Multiple features can be specified in a single option by separating them\n+with commas - `-C target-feature=+x,-y`. \\\n+If some feature is specified more than once with both `+` and `-`,\n+then values passed later override values passed earlier. \\\n+For example, `-C target-feature=+x,-y,+z -Ctarget-feature=-x,+y`\n+is equivalent to `-C target-feature=-x,+y,+z`.\n \n To see the valid options and an example of use, run `rustc --print\n target-features`."}, {"sha": "4428d09902b92d6b8a3360e130737b33eb66b32d", "filename": "src/librustc_ast/util/literal.rs", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fliteral.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -6,8 +6,7 @@ use crate::tokenstream::TokenTree;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_lexer::unescape::{unescape_byte, unescape_char};\n-use rustc_lexer::unescape::{unescape_byte_str, unescape_str};\n-use rustc_lexer::unescape::{unescape_raw_byte_str, unescape_raw_str};\n+use rustc_lexer::unescape::{unescape_byte_literal, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n@@ -59,45 +58,53 @@ impl LitKind {\n                 // new symbol because the string in the LitKind is different to the\n                 // string in the token.\n                 let s = symbol.as_str();\n-                let symbol = if s.contains(&['\\\\', '\\r'][..]) {\n-                    let mut buf = String::with_capacity(s.len());\n-                    let mut error = Ok(());\n-                    unescape_str(&s, &mut |_, unescaped_char| match unescaped_char {\n-                        Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n-                    });\n-                    error?;\n-                    Symbol::intern(&buf)\n-                } else {\n-                    symbol\n-                };\n+                let symbol =\n+                    if s.contains(&['\\\\', '\\r'][..]) {\n+                        let mut buf = String::with_capacity(s.len());\n+                        let mut error = Ok(());\n+                        unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {\n+                            match unescaped_char {\n+                                Ok(c) => buf.push(c),\n+                                Err(_) => error = Err(LitError::LexerError),\n+                            }\n+                        });\n+                        error?;\n+                        Symbol::intern(&buf)\n+                    } else {\n+                        symbol\n+                    };\n                 LitKind::Str(symbol, ast::StrStyle::Cooked)\n             }\n             token::StrRaw(n) => {\n                 // Ditto.\n                 let s = symbol.as_str();\n-                let symbol = if s.contains('\\r') {\n-                    let mut buf = String::with_capacity(s.len());\n-                    let mut error = Ok(());\n-                    unescape_raw_str(&s, &mut |_, unescaped_char| match unescaped_char {\n-                        Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n-                    });\n-                    error?;\n-                    buf.shrink_to_fit();\n-                    Symbol::intern(&buf)\n-                } else {\n-                    symbol\n-                };\n+                let symbol =\n+                    if s.contains('\\r') {\n+                        let mut buf = String::with_capacity(s.len());\n+                        let mut error = Ok(());\n+                        unescape_literal(&s, Mode::RawStr, &mut |_, unescaped_char| {\n+                            match unescaped_char {\n+                                Ok(c) => buf.push(c),\n+                                Err(_) => error = Err(LitError::LexerError),\n+                            }\n+                        });\n+                        error?;\n+                        buf.shrink_to_fit();\n+                        Symbol::intern(&buf)\n+                    } else {\n+                        symbol\n+                    };\n                 LitKind::Str(symbol, ast::StrStyle::Raw(n))\n             }\n             token::ByteStr => {\n                 let s = symbol.as_str();\n                 let mut buf = Vec::with_capacity(s.len());\n                 let mut error = Ok(());\n-                unescape_byte_str(&s, &mut |_, unescaped_byte| match unescaped_byte {\n-                    Ok(c) => buf.push(c),\n-                    Err(_) => error = Err(LitError::LexerError),\n+                unescape_byte_literal(&s, Mode::ByteStr, &mut |_, unescaped_byte| {\n+                    match unescaped_byte {\n+                        Ok(c) => buf.push(c),\n+                        Err(_) => error = Err(LitError::LexerError),\n+                    }\n                 });\n                 error?;\n                 buf.shrink_to_fit();\n@@ -108,9 +115,11 @@ impl LitKind {\n                 let bytes = if s.contains('\\r') {\n                     let mut buf = Vec::with_capacity(s.len());\n                     let mut error = Ok(());\n-                    unescape_raw_byte_str(&s, &mut |_, unescaped_byte| match unescaped_byte {\n-                        Ok(c) => buf.push(c),\n-                        Err(_) => error = Err(LitError::LexerError),\n+                    unescape_byte_literal(&s, Mode::RawByteStr, &mut |_, unescaped_byte| {\n+                        match unescaped_byte {\n+                            Ok(c) => buf.push(c),\n+                            Err(_) => error = Err(LitError::LexerError),\n+                        }\n                     });\n                     error?;\n                     buf.shrink_to_fit();"}, {"sha": "e44feee96607a7d4d0eaf669945bf8fa1c29b5d0", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,11 @@\n //! Low-level Rust lexer.\n //!\n+//! The idea with `librustc_lexer` is to make a reusable library,\n+//! by separating out pure lexing and rustc-specific concerns, like spans,\n+//! error reporting an interning.  So, rustc_lexer operates directly on `&str`,\n+//! produces simple tokens which are a pair of type-tag and a bit of original text,\n+//! and does not report errors, instead storing them as flags on the token.\n+//!\n //! Tokens produced by this lexer are not yet ready for parsing the Rust syntax,\n //! for that see `librustc_parse::lexer`, which converts this basic token stream\n //! into wide tokens used by actual parser.\n@@ -719,6 +725,9 @@ impl Cursor<'_> {\n \n             // Check that amount of closing '#' symbols\n             // is equal to the amount of opening ones.\n+            // Note that this will not consume extra trailing `#` characters:\n+            // `r###\"abcde\"####` is lexed as a `LexedRawString { n_hashes: 3 }`\n+            // followed by a `#` token.\n             let mut hashes_left = n_start_hashes;\n             let is_closing_hash = |c| {\n                 if c == '#' && hashes_left != 0 {\n@@ -739,8 +748,8 @@ impl Cursor<'_> {\n                     possible_terminator_offset: None,\n                 };\n             } else if n_end_hashes > max_hashes {\n-                // Keep track of possible terminators to give a hint about where there might be\n-                // a missing terminator\n+                // Keep track of possible terminators to give a hint about\n+                // where there might be a missing terminator\n                 possible_terminator_offset =\n                     Some(self.len_consumed() - start_pos - n_end_hashes + prefix_len);\n                 max_hashes = n_end_hashes;"}, {"sha": "2a9e1b7cbc3460a440b35fc9da3785ab80fac262", "filename": "src/librustc_lexer/src/unescape.rs", "status": "modified", "additions": 41, "deletions": 51, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -58,69 +58,57 @@ pub enum EscapeError {\n     NonAsciiCharInByteString,\n }\n \n-/// Takes a contents of a char literal (without quotes), and returns an\n-/// unescaped char or an error\n-pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n-    let mut chars = literal_text.chars();\n-    unescape_char_or_byte(&mut chars, Mode::Char)\n-        .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n-}\n-\n-/// Takes a contents of a byte literal (without quotes), and returns an\n-/// unescaped byte or an error.\n-pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n-    let mut chars = literal_text.chars();\n-    unescape_char_or_byte(&mut chars, Mode::Byte)\n-        .map(byte_from_char)\n-        .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n-}\n-\n-/// Takes a contents of a string literal (without quotes) and produces a\n+/// Takes a contents of a literal (without quotes) and produces a\n /// sequence of escaped characters or errors.\n /// Values are returned through invoking of the provided callback.\n-pub fn unescape_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n-    unescape_str_or_byte_str(literal_text, Mode::Str, callback)\n+    match mode {\n+        Mode::Char | Mode::Byte => {\n+            let mut chars = literal_text.chars();\n+            let result = unescape_char_or_byte(&mut chars, mode);\n+            // The Chars iterator moved forward.\n+            callback(0..(literal_text.len() - chars.as_str().len()), result);\n+        }\n+        Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),\n+        // NOTE: Raw strings do not perform any explicit character escaping, here we\n+        // only translate CRLF to LF and produce errors on bare CR.\n+        Mode::RawStr | Mode::RawByteStr => {\n+            unescape_raw_str_or_byte_str(literal_text, mode, callback)\n+        }\n+    }\n }\n \n-/// Takes a contents of a byte string literal (without quotes) and produces a\n-/// sequence of bytes or errors.\n+/// Takes a contents of a byte, byte string or raw byte string (without quotes)\n+/// and produces a sequence of bytes or errors.\n /// Values are returned through invoking of the provided callback.\n-pub fn unescape_byte_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<u8, EscapeError>),\n {\n-    unescape_str_or_byte_str(literal_text, Mode::ByteStr, &mut |range, char| {\n-        callback(range, char.map(byte_from_char))\n+    assert!(mode.is_bytes());\n+    unescape_literal(literal_text, mode, &mut |range, result| {\n+        callback(range, result.map(byte_from_char));\n     })\n }\n \n-/// Takes a contents of a raw string literal (without quotes) and produces a\n-/// sequence of characters or errors.\n-/// Values are returned through invoking of the provided callback.\n-/// NOTE: Raw strings do not perform any explicit character escaping, here we\n-/// only translate CRLF to LF and produce errors on bare CR.\n-pub fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<char, EscapeError>),\n-{\n-    unescape_raw_str_or_byte_str(literal_text, Mode::Str, callback)\n+/// Takes a contents of a char literal (without quotes), and returns an\n+/// unescaped char or an error\n+pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n+    let mut chars = literal_text.chars();\n+    unescape_char_or_byte(&mut chars, Mode::Char)\n+        .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n }\n \n-/// Takes a contents of a raw byte string literal (without quotes) and produces a\n-/// sequence of bytes or errors.\n-/// Values are returned through invoking of the provided callback.\n-/// NOTE: Raw strings do not perform any explicit character escaping, here we\n-/// only translate CRLF to LF and produce errors on bare CR.\n-pub fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n-where\n-    F: FnMut(Range<usize>, Result<u8, EscapeError>),\n-{\n-    unescape_raw_str_or_byte_str(literal_text, Mode::ByteStr, &mut |range, char| {\n-        callback(range, char.map(byte_from_char))\n-    })\n+/// Takes a contents of a byte literal (without quotes), and returns an\n+/// unescaped byte or an error.\n+pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n+    let mut chars = literal_text.chars();\n+    unescape_char_or_byte(&mut chars, Mode::Byte)\n+        .map(byte_from_char)\n+        .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n }\n \n /// What kind of literal do we parse.\n@@ -130,13 +118,15 @@ pub enum Mode {\n     Str,\n     Byte,\n     ByteStr,\n+    RawStr,\n+    RawByteStr,\n }\n \n impl Mode {\n     pub fn in_single_quotes(self) -> bool {\n         match self {\n             Mode::Char | Mode::Byte => true,\n-            Mode::Str | Mode::ByteStr => false,\n+            Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,\n         }\n     }\n \n@@ -146,8 +136,8 @@ impl Mode {\n \n     pub fn is_bytes(self) -> bool {\n         match self {\n-            Mode::Byte | Mode::ByteStr => true,\n-            Mode::Char | Mode::Str => false,\n+            Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,\n+            Mode::Char | Mode::Str | Mode::RawStr => false,\n         }\n     }\n }\n@@ -345,7 +335,7 @@ where\n \n fn byte_from_char(c: char) -> u8 {\n     let res = c as u32;\n-    assert!(res <= u8::max_value() as u32, \"guaranteed because of Mode::Byte(Str)\");\n+    assert!(res <= u8::max_value() as u32, \"guaranteed because of Mode::ByteStr\");\n     res as u8\n }\n "}, {"sha": "f2b751a78f27fbd11a2a16987e54b7ddabf7253c", "filename": "src/librustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -102,7 +102,7 @@ fn test_unescape_char_good() {\n fn test_unescape_str_good() {\n     fn check(literal_text: &str, expected: &str) {\n         let mut buf = Ok(String::with_capacity(literal_text.len()));\n-        unescape_str(literal_text, &mut |range, c| {\n+        unescape_literal(literal_text, Mode::Str, &mut |range, c| {\n             if let Ok(b) = &mut buf {\n                 match c {\n                     Ok(c) => b.push(c),\n@@ -222,7 +222,7 @@ fn test_unescape_byte_good() {\n fn test_unescape_byte_str_good() {\n     fn check(literal_text: &str, expected: &[u8]) {\n         let mut buf = Ok(Vec::with_capacity(literal_text.len()));\n-        unescape_byte_str(literal_text, &mut |range, c| {\n+        unescape_byte_literal(literal_text, Mode::ByteStr, &mut |range, c| {\n             if let Ok(b) = &mut buf {\n                 match c {\n                     Ok(c) => b.push(c),\n@@ -246,7 +246,7 @@ fn test_unescape_byte_str_good() {\n fn test_unescape_raw_str() {\n     fn check(literal: &str, expected: &[(Range<usize>, Result<char, EscapeError>)]) {\n         let mut unescaped = Vec::with_capacity(literal.len());\n-        unescape_raw_str(literal, &mut |range, res| unescaped.push((range, res)));\n+        unescape_literal(literal, Mode::RawStr, &mut |range, res| unescaped.push((range, res)));\n         assert_eq!(unescaped, expected);\n     }\n \n@@ -258,7 +258,9 @@ fn test_unescape_raw_str() {\n fn test_unescape_raw_byte_str() {\n     fn check(literal: &str, expected: &[(Range<usize>, Result<u8, EscapeError>)]) {\n         let mut unescaped = Vec::with_capacity(literal.len());\n-        unescape_raw_byte_str(literal, &mut |range, res| unescaped.push((range, res)));\n+        unescape_byte_literal(literal, Mode::RawByteStr, &mut |range, res| {\n+            unescaped.push((range, res))\n+        });\n         assert_eq!(unescaped, expected);\n     }\n "}, {"sha": "327dbecba26ce6f0a47206fb0d4d9099bd46cff6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -28,8 +28,8 @@ use rustc_ast::visit::{FnCtxt, FnKind};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc_feature::Stability;\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n+use rustc_feature::{GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -1817,13 +1817,21 @@ impl EarlyLintPass for IncompleteFeatures {\n             .map(|(name, span, _)| (name, span))\n             .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n             .filter(|(name, _)| rustc_feature::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n-            .for_each(|(name, &span)| {\n+            .for_each(|(&name, &span)| {\n                 cx.struct_span_lint(INCOMPLETE_FEATURES, span, |lint| {\n-                    lint.build(&format!(\n-                        \"the feature `{}` is incomplete and may cause the compiler to crash\",\n+                    let mut builder = lint.build(&format!(\n+                        \"the feature `{}` is incomplete and may not be safe to use \\\n+                         and/or cause compiler crashes\",\n                         name,\n-                    ))\n-                    .emit()\n+                    ));\n+                    if let Some(n) = rustc_feature::find_feature_issue(name, GateIssue::Language) {\n+                        builder.note(&format!(\n+                            \"see issue #{} <https://github.com/rust-lang/rust/issues/{}> \\\n+                             for more information\",\n+                            n, n,\n+                        ));\n+                    }\n+                    builder.emit();\n                 })\n             });\n     }"}, {"sha": "6427c547a8f295afbed58035d186a354237dab4e", "filename": "src/librustc_middle/ty/list.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_middle%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_middle%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flist.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -0,0 +1,149 @@\n+use crate::arena::Arena;\n+\n+use rustc_serialize::{Encodable, Encoder};\n+\n+use std::cmp::{self, Ordering};\n+use std::fmt;\n+use std::hash::{Hash, Hasher};\n+use std::mem;\n+use std::ops::Deref;\n+use std::ptr;\n+use std::slice;\n+\n+extern \"C\" {\n+    /// A dummy type used to force `List` to be unsized while not requiring references to it be wide\n+    /// pointers.\n+    type OpaqueListContents;\n+}\n+\n+/// A wrapper for slices with the additional invariant\n+/// that the slice is interned and no other slice with\n+/// the same contents can exist in the same context.\n+/// This means we can use pointer for both\n+/// equality comparisons and hashing.\n+/// Note: `Slice` was already taken by the `Ty`.\n+#[repr(C)]\n+pub struct List<T> {\n+    len: usize,\n+    data: [T; 0],\n+    opaque: OpaqueListContents,\n+}\n+\n+unsafe impl<T: Sync> Sync for List<T> {}\n+\n+impl<T: Copy> List<T> {\n+    #[inline]\n+    pub(super) fn from_arena<'tcx>(arena: &'tcx Arena<'tcx>, slice: &[T]) -> &'tcx List<T> {\n+        assert!(!mem::needs_drop::<T>());\n+        assert!(mem::size_of::<T>() != 0);\n+        assert!(!slice.is_empty());\n+\n+        // Align up the size of the len (usize) field\n+        let align = mem::align_of::<T>();\n+        let align_mask = align - 1;\n+        let offset = mem::size_of::<usize>();\n+        let offset = (offset + align_mask) & !align_mask;\n+\n+        let size = offset + slice.len() * mem::size_of::<T>();\n+\n+        let mem = arena\n+            .dropless\n+            .alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n+        unsafe {\n+            let result = &mut *(mem.as_mut_ptr() as *mut List<T>);\n+            // Write the length\n+            result.len = slice.len();\n+\n+            // Write the elements\n+            let arena_slice = slice::from_raw_parts_mut(result.data.as_mut_ptr(), result.len);\n+            arena_slice.copy_from_slice(slice);\n+\n+            result\n+        }\n+    }\n+}\n+\n+impl<T: fmt::Debug> fmt::Debug for List<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        (**self).fmt(f)\n+    }\n+}\n+\n+impl<T: Encodable> Encodable for List<T> {\n+    #[inline]\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        (**self).encode(s)\n+    }\n+}\n+\n+impl<T> Ord for List<T>\n+where\n+    T: Ord,\n+{\n+    fn cmp(&self, other: &List<T>) -> Ordering {\n+        if self == other { Ordering::Equal } else { <[T] as Ord>::cmp(&**self, &**other) }\n+    }\n+}\n+\n+impl<T> PartialOrd for List<T>\n+where\n+    T: PartialOrd,\n+{\n+    fn partial_cmp(&self, other: &List<T>) -> Option<Ordering> {\n+        if self == other {\n+            Some(Ordering::Equal)\n+        } else {\n+            <[T] as PartialOrd>::partial_cmp(&**self, &**other)\n+        }\n+    }\n+}\n+\n+impl<T: PartialEq> PartialEq for List<T> {\n+    #[inline]\n+    fn eq(&self, other: &List<T>) -> bool {\n+        ptr::eq(self, other)\n+    }\n+}\n+impl<T: Eq> Eq for List<T> {}\n+\n+impl<T> Hash for List<T> {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, s: &mut H) {\n+        (self as *const List<T>).hash(s)\n+    }\n+}\n+\n+impl<T> Deref for List<T> {\n+    type Target = [T];\n+    #[inline(always)]\n+    fn deref(&self) -> &[T] {\n+        self.as_ref()\n+    }\n+}\n+\n+impl<T> AsRef<[T]> for List<T> {\n+    #[inline(always)]\n+    fn as_ref(&self) -> &[T] {\n+        unsafe { slice::from_raw_parts(self.data.as_ptr(), self.len) }\n+    }\n+}\n+\n+impl<'a, T> IntoIterator for &'a List<T> {\n+    type Item = &'a T;\n+    type IntoIter = <&'a [T] as IntoIterator>::IntoIter;\n+    #[inline(always)]\n+    fn into_iter(self) -> Self::IntoIter {\n+        self[..].iter()\n+    }\n+}\n+\n+impl<T> List<T> {\n+    #[inline(always)]\n+    pub fn empty<'a>() -> &'a List<T> {\n+        #[repr(align(64), C)]\n+        struct EmptySlice([u8; 64]);\n+        static EMPTY_SLICE: EmptySlice = EmptySlice([0; 64]);\n+        assert!(mem::align_of::<T>() <= 64);\n+        unsafe { &*(&EMPTY_SLICE as *const _ as *const List<T>) }\n+    }\n+}"}, {"sha": "6d6e1699feb222c37fde257fef0c083cac1f6405", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 145, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -4,7 +4,6 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n \n-use crate::arena::Arena;\n use crate::hir::exports::ExportMap;\n use crate::ich::StableHashingContext;\n use crate::infer::canonical::Canonical;\n@@ -43,13 +42,11 @@ use rustc_span::Span;\n use rustc_target::abi::{Align, VariantIdx};\n \n use std::cell::RefCell;\n-use std::cmp::{self, Ordering};\n+use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use std::ops::Deref;\n use std::ops::Range;\n-use std::slice;\n-use std::{mem, ptr};\n+use std::ptr;\n \n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;\n@@ -81,6 +78,8 @@ pub use self::context::{\n \n pub use self::instance::{Instance, InstanceDef};\n \n+pub use self::list::List;\n+\n pub use self::trait_def::TraitDef;\n \n pub use self::query::queries;\n@@ -112,6 +111,7 @@ pub mod walk;\n mod context;\n mod diagnostics;\n mod instance;\n+mod list;\n mod structural_impls;\n mod sty;\n \n@@ -663,148 +663,9 @@ pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl<'tcx> rustc_serialize::UseSpecializedEncodable for Ty<'tcx> {}\n impl<'tcx> rustc_serialize::UseSpecializedDecodable for Ty<'tcx> {}\n-\n-pub type CanonicalTy<'tcx> = Canonical<'tcx, Ty<'tcx>>;\n-\n-extern \"C\" {\n-    /// A dummy type used to force `List` to be unsized while not requiring references to it be wide\n-    /// pointers.\n-    type OpaqueListContents;\n-}\n-\n-/// A wrapper for slices with the additional invariant\n-/// that the slice is interned and no other slice with\n-/// the same contents can exist in the same context.\n-/// This means we can use pointer for both\n-/// equality comparisons and hashing.\n-/// Note: `Slice` was already taken by the `Ty`.\n-#[repr(C)]\n-pub struct List<T> {\n-    len: usize,\n-    data: [T; 0],\n-    opaque: OpaqueListContents,\n-}\n-\n-unsafe impl<T: Sync> Sync for List<T> {}\n-\n-impl<T: Copy> List<T> {\n-    #[inline]\n-    fn from_arena<'tcx>(arena: &'tcx Arena<'tcx>, slice: &[T]) -> &'tcx List<T> {\n-        assert!(!mem::needs_drop::<T>());\n-        assert!(mem::size_of::<T>() != 0);\n-        assert!(!slice.is_empty());\n-\n-        // Align up the size of the len (usize) field\n-        let align = mem::align_of::<T>();\n-        let align_mask = align - 1;\n-        let offset = mem::size_of::<usize>();\n-        let offset = (offset + align_mask) & !align_mask;\n-\n-        let size = offset + slice.len() * mem::size_of::<T>();\n-\n-        let mem = arena\n-            .dropless\n-            .alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n-        unsafe {\n-            let result = &mut *(mem.as_mut_ptr() as *mut List<T>);\n-            // Write the length\n-            result.len = slice.len();\n-\n-            // Write the elements\n-            let arena_slice = slice::from_raw_parts_mut(result.data.as_mut_ptr(), result.len);\n-            arena_slice.copy_from_slice(slice);\n-\n-            result\n-        }\n-    }\n-}\n-\n-impl<T: fmt::Debug> fmt::Debug for List<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        (**self).fmt(f)\n-    }\n-}\n-\n-impl<T: Encodable> Encodable for List<T> {\n-    #[inline]\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        (**self).encode(s)\n-    }\n-}\n-\n-impl<T> Ord for List<T>\n-where\n-    T: Ord,\n-{\n-    fn cmp(&self, other: &List<T>) -> Ordering {\n-        if self == other { Ordering::Equal } else { <[T] as Ord>::cmp(&**self, &**other) }\n-    }\n-}\n-\n-impl<T> PartialOrd for List<T>\n-where\n-    T: PartialOrd,\n-{\n-    fn partial_cmp(&self, other: &List<T>) -> Option<Ordering> {\n-        if self == other {\n-            Some(Ordering::Equal)\n-        } else {\n-            <[T] as PartialOrd>::partial_cmp(&**self, &**other)\n-        }\n-    }\n-}\n-\n-impl<T: PartialEq> PartialEq for List<T> {\n-    #[inline]\n-    fn eq(&self, other: &List<T>) -> bool {\n-        ptr::eq(self, other)\n-    }\n-}\n-impl<T: Eq> Eq for List<T> {}\n-\n-impl<T> Hash for List<T> {\n-    #[inline]\n-    fn hash<H: Hasher>(&self, s: &mut H) {\n-        (self as *const List<T>).hash(s)\n-    }\n-}\n-\n-impl<T> Deref for List<T> {\n-    type Target = [T];\n-    #[inline(always)]\n-    fn deref(&self) -> &[T] {\n-        self.as_ref()\n-    }\n-}\n-\n-impl<T> AsRef<[T]> for List<T> {\n-    #[inline(always)]\n-    fn as_ref(&self) -> &[T] {\n-        unsafe { slice::from_raw_parts(self.data.as_ptr(), self.len) }\n-    }\n-}\n-\n-impl<'a, T> IntoIterator for &'a List<T> {\n-    type Item = &'a T;\n-    type IntoIter = <&'a [T] as IntoIterator>::IntoIter;\n-    #[inline(always)]\n-    fn into_iter(self) -> Self::IntoIter {\n-        self[..].iter()\n-    }\n-}\n-\n impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx List<Ty<'tcx>> {}\n \n-impl<T> List<T> {\n-    #[inline(always)]\n-    pub fn empty<'a>() -> &'a List<T> {\n-        #[repr(align(64), C)]\n-        struct EmptySlice([u8; 64]);\n-        static EMPTY_SLICE: EmptySlice = EmptySlice([0; 64]);\n-        assert!(mem::align_of::<T>() <= 64);\n-        unsafe { &*(&EMPTY_SLICE as *const _ as *const List<T>) }\n-    }\n-}\n+pub type CanonicalTy<'tcx> = Canonical<'tcx, Ty<'tcx>>;\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UpvarPath {"}, {"sha": "2b7d5e5adb432924f25bea312e0292f573dbf4b3", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 30, "deletions": 122, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -15,6 +15,7 @@ mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;\n \n+use rustc_lexer::unescape::Mode;\n use unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n \n #[derive(Clone, Debug)]\n@@ -325,38 +326,27 @@ impl<'a> StringReader<'a> {\n         suffix_start: BytePos,\n         kind: rustc_lexer::LiteralKind,\n     ) -> (token::LitKind, Symbol) {\n-        match kind {\n+        // prefix means `\"` or `br\"` or `r###\"`, ...\n+        let (lit_kind, mode, prefix_len, postfix_len) = match kind {\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n                     self.fatal_span_(start, suffix_start, \"unterminated character literal\").raise()\n                 }\n-                let content_start = start + BytePos(1);\n-                let content_end = suffix_start - BytePos(1);\n-                self.validate_char_escape(content_start, content_end);\n-                let id = self.symbol_from_to(content_start, content_end);\n-                (token::Char, id)\n+                (token::Char, Mode::Char, 1, 1) // ' '\n             }\n             rustc_lexer::LiteralKind::Byte { terminated } => {\n                 if !terminated {\n                     self.fatal_span_(start + BytePos(1), suffix_start, \"unterminated byte constant\")\n                         .raise()\n                 }\n-                let content_start = start + BytePos(2);\n-                let content_end = suffix_start - BytePos(1);\n-                self.validate_byte_escape(content_start, content_end);\n-                let id = self.symbol_from_to(content_start, content_end);\n-                (token::Byte, id)\n+                (token::Byte, Mode::Byte, 2, 1) // b' '\n             }\n             rustc_lexer::LiteralKind::Str { terminated } => {\n                 if !terminated {\n                     self.fatal_span_(start, suffix_start, \"unterminated double quote string\")\n                         .raise()\n                 }\n-                let content_start = start + BytePos(1);\n-                let content_end = suffix_start - BytePos(1);\n-                self.validate_str_escape(content_start, content_end);\n-                let id = self.symbol_from_to(content_start, content_end);\n-                (token::Str, id)\n+                (token::Str, Mode::Str, 1, 1) // \" \"\n             }\n             rustc_lexer::LiteralKind::ByteStr { terminated } => {\n                 if !terminated {\n@@ -367,42 +357,28 @@ impl<'a> StringReader<'a> {\n                     )\n                     .raise()\n                 }\n-                let content_start = start + BytePos(2);\n-                let content_end = suffix_start - BytePos(1);\n-                self.validate_byte_str_escape(content_start, content_end);\n-                let id = self.symbol_from_to(content_start, content_end);\n-                (token::ByteStr, id)\n+                (token::ByteStr, Mode::ByteStr, 2, 1) // b\" \"\n             }\n             rustc_lexer::LiteralKind::RawStr(unvalidated_raw_str) => {\n                 let valid_raw_str = self.validate_and_report_errors(start, unvalidated_raw_str);\n                 let n_hashes = valid_raw_str.num_hashes();\n                 let n = u32::from(n_hashes);\n-\n-                let content_start = start + BytePos(2 + n);\n-                let content_end = suffix_start - BytePos(1 + n);\n-                self.validate_raw_str_escape(content_start, content_end);\n-                let id = self.symbol_from_to(content_start, content_end);\n-                (token::StrRaw(n_hashes), id)\n+                (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##\" \"##\n             }\n             rustc_lexer::LiteralKind::RawByteStr(unvalidated_raw_str) => {\n                 let validated_raw_str = self.validate_and_report_errors(start, unvalidated_raw_str);\n                 let n_hashes = validated_raw_str.num_hashes();\n                 let n = u32::from(n_hashes);\n-\n-                let content_start = start + BytePos(3 + n);\n-                let content_end = suffix_start - BytePos(1 + n);\n-                self.validate_raw_byte_str_escape(content_start, content_end);\n-                let id = self.symbol_from_to(content_start, content_end);\n-                (token::ByteStrRaw(n_hashes), id)\n+                (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##\" \"##\n             }\n             rustc_lexer::LiteralKind::Int { base, empty_int } => {\n-                if empty_int {\n+                return if empty_int {\n                     self.err_span_(start, suffix_start, \"no valid digits found for number\");\n                     (token::Integer, sym::integer(0))\n                 } else {\n                     self.validate_int_literal(base, start, suffix_start);\n                     (token::Integer, self.symbol_from_to(start, suffix_start))\n-                }\n+                };\n             }\n             rustc_lexer::LiteralKind::Float { base, empty_exponent } => {\n                 if empty_exponent {\n@@ -430,9 +406,14 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 let id = self.symbol_from_to(start, suffix_start);\n-                (token::Float, id)\n+                return (token::Float, id);\n             }\n-        }\n+        };\n+        let content_start = start + BytePos(prefix_len);\n+        let content_end = suffix_start - BytePos(postfix_len);\n+        let id = self.symbol_from_to(content_start, content_end);\n+        self.validate_literal_escape(mode, content_start, content_end);\n+        return (lit_kind, id);\n     }\n \n     pub fn pos(&self) -> BytePos {\n@@ -558,96 +539,23 @@ impl<'a> StringReader<'a> {\n         .raise();\n     }\n \n-    fn validate_char_escape(&self, content_start: BytePos, content_end: BytePos) {\n-        let lit = self.str_from_to(content_start, content_end);\n-        if let Err((off, err)) = unescape::unescape_char(lit) {\n-            emit_unescape_error(\n-                &self.sess.span_diagnostic,\n-                lit,\n-                self.mk_sp(content_start - BytePos(1), content_end + BytePos(1)),\n-                unescape::Mode::Char,\n-                0..off,\n-                err,\n-            )\n-        }\n-    }\n-\n-    fn validate_byte_escape(&self, content_start: BytePos, content_end: BytePos) {\n-        let lit = self.str_from_to(content_start, content_end);\n-        if let Err((off, err)) = unescape::unescape_byte(lit) {\n-            emit_unescape_error(\n-                &self.sess.span_diagnostic,\n-                lit,\n-                self.mk_sp(content_start - BytePos(1), content_end + BytePos(1)),\n-                unescape::Mode::Byte,\n-                0..off,\n-                err,\n-            )\n-        }\n-    }\n-\n-    fn validate_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n-        let lit = self.str_from_to(content_start, content_end);\n-        unescape::unescape_str(lit, &mut |range, c| {\n-            if let Err(err) = c {\n+    fn validate_literal_escape(&self, mode: Mode, content_start: BytePos, content_end: BytePos) {\n+        let lit_content = self.str_from_to(content_start, content_end);\n+        unescape::unescape_literal(lit_content, mode, &mut |range, result| {\n+            // Here we only check for errors. The actual unescaping is done later.\n+            if let Err(err) = result {\n+                let span_with_quotes =\n+                    self.mk_sp(content_start - BytePos(1), content_end + BytePos(1));\n                 emit_unescape_error(\n                     &self.sess.span_diagnostic,\n-                    lit,\n-                    self.mk_sp(content_start - BytePos(1), content_end + BytePos(1)),\n-                    unescape::Mode::Str,\n+                    lit_content,\n+                    span_with_quotes,\n+                    mode,\n                     range,\n                     err,\n-                )\n-            }\n-        })\n-    }\n-\n-    fn validate_raw_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n-        let lit = self.str_from_to(content_start, content_end);\n-        unescape::unescape_raw_str(lit, &mut |range, c| {\n-            if let Err(err) = c {\n-                emit_unescape_error(\n-                    &self.sess.span_diagnostic,\n-                    lit,\n-                    self.mk_sp(content_start - BytePos(1), content_end + BytePos(1)),\n-                    unescape::Mode::Str,\n-                    range,\n-                    err,\n-                )\n-            }\n-        })\n-    }\n-\n-    fn validate_raw_byte_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n-        let lit = self.str_from_to(content_start, content_end);\n-        unescape::unescape_raw_byte_str(lit, &mut |range, c| {\n-            if let Err(err) = c {\n-                emit_unescape_error(\n-                    &self.sess.span_diagnostic,\n-                    lit,\n-                    self.mk_sp(content_start - BytePos(1), content_end + BytePos(1)),\n-                    unescape::Mode::ByteStr,\n-                    range,\n-                    err,\n-                )\n-            }\n-        })\n-    }\n-\n-    fn validate_byte_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n-        let lit = self.str_from_to(content_start, content_end);\n-        unescape::unescape_byte_str(lit, &mut |range, c| {\n-            if let Err(err) = c {\n-                emit_unescape_error(\n-                    &self.sess.span_diagnostic,\n-                    lit,\n-                    self.mk_sp(content_start - BytePos(1), content_end + BytePos(1)),\n-                    unescape::Mode::ByteStr,\n-                    range,\n-                    err,\n-                )\n+                );\n             }\n-        })\n+        });\n     }\n \n     fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {"}, {"sha": "93c7faf22a73fe993833ff477faf3136c43733d5", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -927,7 +927,7 @@ impl<'a> Parser<'a> {\n             return Ok(());\n         }\n         let sm = self.sess.source_map();\n-        let msg = format!(\"expected `;`, found `{}`\", super::token_descr(&self.token));\n+        let msg = format!(\"expected `;`, found {}\", super::token_descr(&self.token));\n         let appl = Applicability::MachineApplicable;\n         if self.token.span == DUMMY_SP || self.prev_token.span == DUMMY_SP {\n             // Likely inside a macro, can't provide meaningful suggestions."}, {"sha": "e2c82a397c7384c150db62c9fa0f5d55de309acf", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -271,6 +271,7 @@ macro_rules! options {\n             \"one of supported relocation models (`rustc --print relocation-models`)\";\n         pub const parse_tls_model: &str =\n             \"one of supported TLS models (`rustc --print tls-models`)\";\n+        pub const parse_target_feature: &str = parse_string;\n     }\n \n     #[allow(dead_code)]\n@@ -647,6 +648,19 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_target_feature(slot: &mut String, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => {\n+                    if !slot.is_empty() {\n+                        slot.push_str(\",\");\n+                    }\n+                    slot.push_str(s);\n+                    true\n+                }\n+                None => false,\n+            }\n+        }\n     }\n ) }\n \n@@ -742,7 +756,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"use soft float ABI (*eabihf targets only) (default: no)\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (`rustc --print target-cpus` for details)\"),\n-    target_feature: String = (String::new(), parse_string, [TRACKED],\n+    target_feature: String = (String::new(), parse_target_feature, [TRACKED],\n         \"target specific attributes. (`rustc --print target-features` for details). \\\n         This feature is unsafe.\"),\n "}, {"sha": "f71a9c3c58216b119738d90c6977dc7bea28a158", "filename": "src/test/codegen/target-feature-multiple.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -0,0 +1,9 @@\n+// only-x86_64\n+// compile-flags: -C target-feature=+sse2,-avx,+avx2 -C target-feature=+avx,-avx2\n+\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+pub fn foo() {\n+    // CHECK: attributes #0 = { {{.*}}\"target-features\"=\"+sse2,-avx,+avx2,+avx,-avx2\"{{.*}} }\n+}"}, {"sha": "0eaeb910be64a591cbe078a40d000fc8e2fb039a", "filename": "src/test/incremental/const-generics/issue-62536.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n // revisions:cfail1\n #![feature(const_generics)]\n-//[cfail1]~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//[cfail1]~^ WARN the feature `const_generics` is incomplete\n \n struct S<T, const N: usize>([T; N]);\n "}, {"sha": "6b10c5404944d743beea80c609c93a775e8722c7", "filename": "src/test/incremental/const-generics/issue-64087.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n // revisions:cfail1\n #![feature(const_generics)]\n-//[cfail1]~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//[cfail1]~^ WARN the feature `const_generics` is incomplete\n \n fn combinator<T, const S: usize>() -> [T; S] {}\n //[cfail1]~^ ERROR mismatched types"}, {"sha": "45b2889f1ca4c76d037ee1ec07609163120831da", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn is_123<const N: usize>(x: [u32; N]) -> bool {\n     match x {"}, {"sha": "4fe8572c2d53130dfc9addddff24c8770e628af8", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/match_arr_unknown_len.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0308]: mismatched types\n   --> $DIR/match_arr_unknown_len.rs:6:9"}, {"sha": "8b396f23efd545f5c05b0aefb66f6981f3b5bec1", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(associated_type_bounds)]\n #![feature(type_alias_impl_trait)]\n-#![feature(impl_trait_in_bindings)] //~ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash [incomplete_features]\n+#![feature(impl_trait_in_bindings)] //~ WARN the feature `impl_trait_in_bindings` is incomplete\n #![feature(untagged_unions)]\n \n use std::iter;"}, {"sha": "71f6e4ff8b62d9eb8061948dfb63aad44cf7ee91", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/duplicate.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:10:36"}, {"sha": "3637f9558be7bd2d5483e218f6fe517e31458000", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/dyn-lcsit.rs:4:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "11ff03db361470de371cb4713209bc7eb70f8dce", "filename": "src/test/ui/associated-type-bounds/lcsit.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/lcsit.rs:4:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "316fac623254825469c320b309ff395f21f28381", "filename": "src/test/ui/binding/const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0158]: const parameters cannot be referenced in patterns\n   --> $DIR/const-param.rs:7:9"}, {"sha": "f9c6e201b1762dfe0d6a65e3764c271c92ffea18", "filename": "src/test/ui/const-generics/apit-with-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait Trait {}\n "}, {"sha": "4389e4738eadc8b734accb3719a8d92443b81c0b", "filename": "src/test/ui/const-generics/apit-with-const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/apit-with-const-param.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "6110d16c070d9016ef0faf6f4fcf39bd43f869c2", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Bad<const N: usize, T> { //~ ERROR type parameters must be declared prior\n     arr: [u8; { N }],"}, {"sha": "f77ae49cf10b17cc66d3466ba8e58a4ef27980c5", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -4,13 +4,14 @@ error: type parameters must be declared prior to const parameters\n LL | struct Bad<const N: usize, T> {\n    |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/argument_order.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "5c02e585dc8ba1270a9330c4e3ff07da1ee714ad", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);"}, {"sha": "14cf64eeb7ac69841461972e8e033910824b6869", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/array-size-in-generic-struct-param.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: constant expression depends on a generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:5:38"}, {"sha": "49fc53b32bd920f9a070a15abb959df5190d20a2", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #![allow(dead_code)]\n "}, {"sha": "e6eb2a0a78303ff7e9bc8557efeed159bd7592fe", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/array-wrapper-struct-ctor.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "f137be2d6a6faf97e594df1c0b71ae552c830ba8", "filename": "src/test/ui/const-generics/broken-mir-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n pub trait Foo {\n     fn foo(&self);"}, {"sha": "a5532bde1f5e9cb02008e5071e184db32e2e2568", "filename": "src/test/ui/const-generics/broken-mir-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/broken-mir-1.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "c2f9b786f8f898f4a830fd928993d8992d5b4605", "filename": "src/test/ui/const-generics/broken-mir-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "05552027f13d01ee5c8f23a79c337629d87dcd0d", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/broken-mir-2.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/broken-mir-2.rs:7:36"}, {"sha": "2f6ad2654c12c4dfda97f22e6497bb6c9f704d8d", "filename": "src/test/ui/const-generics/cannot-infer-const-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn foo<const X: usize>() -> usize {\n     0"}, {"sha": "6696b025855a87bc9c57d67e9001212f4d95f759", "filename": "src/test/ui/const-generics/cannot-infer-const-args.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/cannot-infer-const-args.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:9:5"}, {"sha": "aac5d195f76af63f21a7eade8d4a21843bee9174", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n // This test confirms that the types can be inferred correctly for this example with const\n // generics. Previously this would ICE, and more recently error."}, {"sha": "c5c48d7be46895123d03a9f0935675e060c35793", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/cannot-infer-type-for-const-param.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "18ebba49f6f91e0cc3aaeb51c47afdcbf83cd3d8", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -2,7 +2,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct A<const N: usize>; // ok\n "}, {"sha": "c8f3a8beaf83f825a58a35bd65b371d7bd02adf5", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/concrete-const-as-fn-arg.rs:4:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "c1ddf9a33140d63260398799cbda052925238e68", "filename": "src/test/ui/const-generics/concrete-const-impl-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n pub struct A<const N: u32>;\n "}, {"sha": "5edb4f4f6cdad2f409dc86403a4a04727830feed", "filename": "src/test/ui/const-generics/concrete-const-impl-method.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/concrete-const-impl-method.rs:5:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "9d8aaed54bd75896f3074bf2b50eb401624774b3", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait IsZeroTrait<const IS_ZERO: bool>{}\n "}, {"sha": "9ac33454128b52b8176a1a9515272dfe408631ab", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/condition-in-trait-const-arg.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "5ea2cf92fdc6084f034cfcf905ab73f30d5ee9ed", "filename": "src/test/ui/const-generics/const-arg-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn const_u32_identity<const X: u32>() -> u32 {\n     X"}, {"sha": "bb66849c7fe6c6b53e14f0b710163246fd8aeb3d", "filename": "src/test/ui/const-generics/const-arg-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-arg-in-fn.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "9f989ee20a5692e62fdbb001188b0ab74ef44d25", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n type Array<T, const N: usize> = [T; N];\n "}, {"sha": "ad38b632b75f0eac4ba7d1d754bbaec47b7d4b6e", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-arg-type-arg-misordered.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0747]: constant provided when a type was expected\n   --> $DIR/const-arg-type-arg-misordered.rs:6:35"}, {"sha": "e0b66a7c14c3aafbdb24e73323e468193189903f", "filename": "src/test/ui/const-generics/const-expression-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn i32_identity<const X: i32>() -> i32 {\n     5"}, {"sha": "e421c22be01a87026d2abd1b0bc5ac64acb18ca9", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -4,13 +4,14 @@ error: expected one of `,` or `>`, found `+`\n LL |     i32_identity::<1 + 2>();\n    |                      ^ expected one of `,` or `>`\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-expression-parameter.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "bbc55815e9a208b77fe4cd906f49f21f470257d4", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n const fn const_u32_identity<const X: u32>() -> u32 {\n     X"}, {"sha": "109b50028480b4bc43ee14df2fe80357a0b532bc", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-fn-with-const-param.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "3e43387163b62da5b680a3bd8ba2ec4aa3a6a2a3", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Foo<T, const N: usize>([T; N]);\n "}, {"sha": "47448bbd19d6d268ef1d04da7b417f057805535f", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-generic-array-wrapper.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "22f9bd2a0f0b2556c318d86bd1af5c1f6e32b7a6", "filename": "src/test/ui/const-generics/const-generic-type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #[derive(Debug)]\n struct S<const N: usize>;"}, {"sha": "f161739c9c8a6f0dddab681dbd995bee151747aa", "filename": "src/test/ui/const-generics/const-generic-type_name.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-generic-type_name.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "5e6b6c4dabe0238210a203d8db01e5b1d6af433b", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -4,7 +4,7 @@\n // lifetimes within const/static items.\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct A<const N: &u8>;\n //~^ ERROR `&` without an explicit lifetime name cannot be used here"}, {"sha": "8c50fb73679a90fc5e1f361e8f9947ace38d85e2", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -28,13 +28,14 @@ error[E0637]: `&` without an explicit lifetime name cannot be used here\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param-elided-lifetime.rs:6:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}, {"sha": "4b8e2db7233e4bd2a3eef99fcdad9cbadfac69d7", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn foo<const X: u32>() {\n     fn bar() -> u32 {"}, {"sha": "30bd1d7291456e74c4a8bdbce767440edc278051", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -8,13 +8,14 @@ LL |     fn bar() -> u32 {\n LL |         X\n    |         ^ use of generic parameter from outer function\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param-from-outer-fn.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6874072571108b8a8f9c6dfcff85b046064ddc25", "filename": "src/test/ui/const-generics/const-param-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait Trait<const T: ()> {}\n "}, {"sha": "a2e367b25ade05c1c90b53cba9253305d371e86e", "filename": "src/test/ui/const-generics/const-param-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param-in-trait.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "654e36df37e98fcc6b58465416923e7d890faaa1", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n // Currently, const parameters cannot depend on type parameters, because there is no way to\n // enforce the structural-match property on an arbitrary type parameter. This restriction"}, {"sha": "ed05264161e538c5765ed9c2b088b8592c4115aa", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n   --> $DIR/const-param-type-depends-on-type-param.rs:9:34"}, {"sha": "54a33e2181284224e7a905f9f45657927e3435ae", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #![deny(non_upper_case_globals)]\n "}, {"sha": "b7febed7bdd22e477fd62c12057ad619c5be2a55", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-parameter-uppercase-lint.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: const parameter `x` should have an upper case name\n   --> $DIR/const-parameter-uppercase-lint.rs:6:15"}, {"sha": "bde80f4a1ed0948d23705b192ec14e0a2822535c", "filename": "src/test/ui/const-generics/const-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "4628c9003188450a82497ffa4b4b0828047be84d", "filename": "src/test/ui/const-generics/const-types.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-types.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "c6d8b32f276f31930a8f6ca7e9443c19cd5cb518", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #[derive(Debug)]\n struct X<const N: usize> {"}, {"sha": "a0abbd168946ac634b5bff303c41d6e4954d6d3c", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/derive-debug-array-wrapper.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/derive-debug-array-wrapper.rs:6:5"}, {"sha": "78964eb3dee6e781d21857ba721b8415f3d4e567", "filename": "src/test/ui/const-generics/different_byref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Const<const V: [usize; 1]> {}\n "}, {"sha": "001d9852a69f8516714b1f097cebb9fcf5300cb2", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/different_byref.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0308]: mismatched types\n   --> $DIR/different_byref.rs:8:9"}, {"sha": "afa577fa67ff288f4ac3df0b17d1a587bad9ca0c", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics, const_compare_raw_pointers)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn function() -> u32 {\n     17"}, {"sha": "9c0f7e3ab9b87f82228f3c5bc0ab32f5753ca2c6", "filename": "src/test/ui/const-generics/fn-const-param-call.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/fn-const-param-call.rs:3:12\n    |\n LL | #![feature(const_generics, const_compare_raw_pointers)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "08f6e0db31cae41ee6fc4a7d25fc4ce955820b4d", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics, const_compare_raw_pointers)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Checked<const F: fn(usize) -> bool>;\n "}, {"sha": "3e07393b9aa8967587ae7cd557000d9689b90d39", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/fn-const-param-infer.rs:1:12\n    |\n LL | #![feature(const_generics, const_compare_raw_pointers)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:16:31"}, {"sha": "8e16221ed4bd25beb197066eed44eb0dc4bd47b4", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n use std::fmt::Display;\n "}, {"sha": "52fd0a8fec03b94c97fd4c79f12c57d3d0565db2", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/fn-taking-const-generic-array.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "514e215ba1aa2f5f2b869448694b6e8b6153515e", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #[derive(PartialEq, Eq)]\n struct A;"}, {"sha": "600be64b1e1b8f3dac0a5b04abbd464ef52f6cdb", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/forbid-non-structural_match-types.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/forbid-non-structural_match-types.rs:11:19"}, {"sha": "41113780de32e4550d866d3c5f86f84f36bd1cca", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n extern \"C\" {\n     fn foo<const X: usize>(); //~ ERROR foreign items may not have const parameters"}, {"sha": "ee947943af134d3c4d57999fb9bc81218bc9710c", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/foreign-item-const-parameter.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0044]: foreign items may not have const parameters\n   --> $DIR/foreign-item-const-parameter.rs:5:5"}, {"sha": "4c2aee59ffebef14ec73eb5b337cdbad45952d8e", "filename": "src/test/ui/const-generics/impl-const-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct S<const X: u32>;\n "}, {"sha": "9d68df07ce6772f7e957325fb6722252bbb32ed0", "filename": "src/test/ui/const-generics/impl-const-generic-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/impl-const-generic-struct.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "cea64654e11a022603445065be276bb7dfc42b3b", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn foo<const X: usize, const Y: usize>() -> usize {\n     0"}, {"sha": "51064d7f90fb2fa9968212bb8daa74bc819482d3", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/incorrect-number-of-const-args.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0107]: wrong number of const arguments: expected 2, found 1\n   --> $DIR/incorrect-number-of-const-args.rs:9:5"}, {"sha": "7e8152dacc46ce10621d5f6855b0e91507607152", "filename": "src/test/ui/const-generics/infer_arg_from_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -2,7 +2,7 @@\n //\n // see issue #70529\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct A<const N: usize> {\n     arr: [u8; N],"}, {"sha": "f52e5e49a3bde78d18a235cace61ede8d3b89c76", "filename": "src/test/ui/const-generics/infer_arg_from_pat.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/infer_arg_from_pat.rs:4:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "cede9ea045d4434339b2272a974f9554a9e1604a", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -2,7 +2,7 @@\n //\n // see issue #70529\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn as_chunks<const N: usize>() -> [u8; N] {\n     loop {}"}, {"sha": "dfadfbb16637ac24336698208167d7990b20eb25", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/infer_arr_len_from_pat.rs:4:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "952e05bac30f4bc96242040801a1d95f295ba28e", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn takes_closure_of_array_3<F>(f: F) where F: Fn([i32; 3]) {\n     f([1, 2, 3]);"}, {"sha": "aadd10e5ccab361cfbf4b050b0555520af2d601c", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/integer-literal-generic-arg-in-where-clause.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "7c8cdeece871892abe59b859f91b85c7e15eff4d", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n //~^ ERROR constant expression depends on a generic parameter"}, {"sha": "a1fbd5f2025bf35e93670c7dd718221f8b5eb1b0", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61522-array-len-succ.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: constant expression depends on a generic parameter\n   --> $DIR/issue-61522-array-len-succ.rs:4:40"}, {"sha": "74f036e6d89b57d3c06b59d1bf2a91f83fcc0c66", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait Trait<const NAME: &'static str> {\n     type Assoc;"}, {"sha": "720420d9cd684e06fdf6b45f27402bef4bf54a88", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-66596-impl-trait-for-str-const-arg.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "26d74ffb254cebe230785581e22e2995783639c6", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Generic<const V: usize>;\n "}, {"sha": "94a2b673a51eca3f30519169af06bcaa2745d655", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-60818-struct-constructors.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "2135c868bbc7013cd103295c415653dec1ff73f1", "filename": "src/test/ui/const-generics/issues/issue-61336-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n // build-pass\n "}, {"sha": "b2c69d57c40b7dc50d864c3be4a35da4f311b2a8", "filename": "src/test/ui/const-generics/issues/issue-61336-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61336-1.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "52969056f00a5552cc768926ef7df712ab0d1fe0", "filename": "src/test/ui/const-generics/issues/issue-61336-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; { N }]"}, {"sha": "5f3395223f95ddc7a3c137cbc890daa2992e1b70", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61336-2.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-61336-2.rs:9:5"}, {"sha": "eb0f309762764f5eb79aa625ff1534d958ea4582", "filename": "src/test/ui/const-generics/issues/issue-61336.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; N]"}, {"sha": "0eee37df3dd52c1858e6aa3ceb11be62738f2eac", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61336.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-61336.rs:9:5"}, {"sha": "7e7ef6867ed075c2cd8e790575763d6164a8e321", "filename": "src/test/ui/const-generics/issues/issue-61422.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n use std::mem;\n "}, {"sha": "69bbaada691879eff52e710c876b7267c6d47cf6", "filename": "src/test/ui/const-generics/issues/issue-61422.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61422.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "0440468e9e6228e4782906ac91636a0e26c420eb", "filename": "src/test/ui/const-generics/issues/issue-61432.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn promote<const N: i32>() {\n     // works:"}, {"sha": "1d547b1b6c98e150b9e40b7be1f7930244dc4850", "filename": "src/test/ui/const-generics/issues/issue-61432.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61432.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "9e0572d3568cb771bcf13065218fb4ebfe6d9ed2", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Const<const N: usize>;\n "}, {"sha": "2e405370dc0df9a527ec572a3c9decc270ab2f36", "filename": "src/test/ui/const-generics/issues/issue-61747.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61747.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "2f3b5c5dc5b899bd034f87d307a9e3a9f9d2f0a2", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n pub trait BitLen: Sized {\n     const BIT_LEN: usize;"}, {"sha": "a9abb877c094c81a488d10ff7278b3b52d72e2ad", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-62187-encountered-polymorphic-const.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: unused variable: `foo`\n   --> $DIR/issue-62187-encountered-polymorphic-const.rs:15:9"}, {"sha": "37947ad1b331cf37a11cc832e2922a2f60773b71", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];"}, {"sha": "0454fed670598667acfb85290a9ef7275eeb1d4c", "filename": "src/test/ui/const-generics/issues/issue-62456.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-62456.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: constant expression depends on a generic parameter\n   --> $DIR/issue-62456.rs:5:20"}, {"sha": "7eaf5eea0787b55bd3e659dd9bf89a796c85980f", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n #[derive(PartialEq, Eq)]\n struct NoMatch;"}, {"sha": "9fb9b5b13d8d529eba87c07bf22697d94c1410db", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-62579-no-match.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "2bcaa27b4d271226f71e844a9bfd281728c59c8c", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait A {}\n struct B;"}, {"sha": "32054e43716cb39cff3e499a04e8e55b7d429fb7", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-63322-forbid-dyn.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-63322-forbid-dyn.rs:8:18"}, {"sha": "e9391096b04d440426a0de363839cb15ceebbac8", "filename": "src/test/ui/const-generics/issues/issue-64519.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Foo<const D: usize> {\n     state: Option<[u8; D]>,"}, {"sha": "6552aea4ad1f17976934ef8fb20247906c94c5d6", "filename": "src/test/ui/const-generics/issues/issue-64519.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-64519.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "486c72d8a349f03ebfaea5788660df3308ca3ea6", "filename": "src/test/ui/const-generics/issues/issue-66906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n pub struct Tuple;\n "}, {"sha": "8e8b552f90eb5604e56264ae8f6b0d6f73664c8c", "filename": "src/test/ui/const-generics/issues/issue-66906.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-66906.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "08a8309d4319f40d966bc1f3e50fb3e86214dde9", "filename": "src/test/ui/const-generics/issues/issue-70125-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n const L: usize = 4;\n "}, {"sha": "8ad4b25ae5bc0c23095d919c59a093d1ae245aed", "filename": "src/test/ui/const-generics/issues/issue-70125-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-70125-1.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "fb7d4886a7c173173d4e3157a11e5f98c809c368", "filename": "src/test/ui/const-generics/issues/issue-70125-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn main() {\n     <()>::foo();"}, {"sha": "c1f9634810e4897ab298a6440378d5d29029447a", "filename": "src/test/ui/const-generics/issues/issue-70125-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-70125-2.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "b53cec80071fd429615eaf2e28997360977d84f5", "filename": "src/test/ui/const-generics/issues/issue-70167.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n pub trait Trait<const N: usize>: From<<Self as Trait<N>>::Item> {\n   type Item;"}, {"sha": "5d647e933c4c56daf25021c687d5fba91d16d9c8", "filename": "src/test/ui/const-generics/issues/issue-70167.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-70167.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "c22e61d0ce337d2c9921f614ee949f1305077120", "filename": "src/test/ui/const-generics/issues/issue70273-assoc-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait T<const A: usize> {\n     fn f();"}, {"sha": "931701b64b48165a10dd68504dbfe582304dfafd", "filename": "src/test/ui/const-generics/issues/issue70273-assoc-fn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue70273-assoc-fn.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "9ca1f4552f596c5dfb415883f2e557df097837ff", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n use std::ops::AddAssign;\n "}, {"sha": "acbc2df1d740f05d23457fb9a3dc0b559aa20232", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/mut-ref-const-param-array.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "c498bfe2e978166a22eca5598cdcdecfc135047b", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![feature(const_generics, const_compare_raw_pointers)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n const A: u32 = 3;\n "}, {"sha": "1ffc63ffdac03577c22d6ad7763590eaa1e39a4e", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/raw-ptr-const-param-deref.rs:2:12\n    |\n LL | #![feature(const_generics, const_compare_raw_pointers)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "d7d970e952b656adf6bf0fcbbeb0b73d6ead57a1", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics, const_compare_raw_pointers)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct Const<const P: *const u32>;\n "}, {"sha": "6644c72236b8627b16b341c74c940bd84271cfb4", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/raw-ptr-const-param.rs:1:12\n    |\n LL | #![feature(const_generics, const_compare_raw_pointers)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0308]: mismatched types\n   --> $DIR/raw-ptr-const-param.rs:7:40"}, {"sha": "4f321b02b82770bc3723a462d4269012585416c7", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct ConstString<const T: &'static str>;\n struct ConstBytes<const T: &'static [u8]>;"}, {"sha": "cc21f197e08b1f904ff22b3beb58312bd20a9e5d", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/slice-const-param-mismatch.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:9:35"}, {"sha": "9668f7ddabb38a81568a21c875cdd292105b50fc", "filename": "src/test/ui/const-generics/slice-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n     STRING"}, {"sha": "524bd41a669b44df1c66e8348005735c88d0eca3", "filename": "src/test/ui/const-generics/slice-const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/slice-const-param.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "0b00481d903e02962c221a0982f35f8551f0c5f9", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct S<const C: u8>(C); //~ ERROR expected type, found const parameter\n "}, {"sha": "a968b26bc2611ff3ebf339ecb6982033a914423c", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -7,13 +7,14 @@ LL | struct S<const C: u8>(C);\n    | |                     help: a struct with a similar name exists: `S`\n    | similarly named struct `S` defined here\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/struct-with-invalid-const-param.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "1aed9cfe927301f5b030faefa4c66104236ce8ad", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n use std::mem::MaybeUninit;\n "}, {"sha": "6077fe5b1ed39edf74ed4c653e4907d8faa5d29e", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/transparent-maybeunit-array-wrapper.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "588c7b9523aad37a9fe6cbd9f8e9bece1cf920e4", "filename": "src/test/ui/const-generics/type_of_anon_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait T<const A: usize> {\n     fn l<const N: bool>() -> usize;"}, {"sha": "8afed0d39866a9cfe81893fc751deadea71ba931", "filename": "src/test/ui/const-generics/type_of_anon_const.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/type_of_anon_const.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "bf517c11262f06807103630d7454cd15392f075a", "filename": "src/test/ui/const-generics/types-mismatch-const-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n // tests the diagnostic output of type mismatches for types that have const generics arguments.\n "}, {"sha": "2131738554f87c960256b02b45598f0b4343999a", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/types-mismatch-const-args.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:13:41"}, {"sha": "7473718351e912bbfd918c45f33386f329accc75", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n use std::fmt;\n "}, {"sha": "f41628d5d8ee945d80d2b081daf65b4945c93193", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/uninferred-consts-during-codegen-1.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "8b95a010473e2941b2e0269095414b82d065b26e", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n use std::fmt;\n "}, {"sha": "f1703bc3a2f8db1d0887e253675d4845c7ffd6b1", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/uninferred-consts-during-codegen-2.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "d9292efc21b749b8dc82ada5f9b7f06e202779ef", "filename": "src/test/ui/const-generics/unused-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct A<const N: usize>; // ok\n "}, {"sha": "be015a689ae14883038ddc23088d2c52083da3af", "filename": "src/test/ui/const-generics/unused-const-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/unused-const-param.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "2c3ce7c9eab4de82d6d21ee04d6ac47cab209940", "filename": "src/test/ui/const-generics/unused_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -2,7 +2,7 @@\n #![warn(unused_braces)]\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n struct A<const N: usize>;\n "}, {"sha": "e14958ee566ee42f8e02ffaa625584a15178afae", "filename": "src/test/ui/const-generics/unused_braces.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/unused_braces.rs:4:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: unnecessary braces around const expression\n   --> $DIR/unused_braces.rs:11:14"}, {"sha": "30745814b4a744456d74555c54c7ff511e02ee8d", "filename": "src/test/ui/error-codes/E0730.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn is_123<const N: usize>(x: [u32; N]) -> bool {\n     match x {"}, {"sha": "f915f6edef52b974c652b106e903b77eeaad96d3", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/E0730.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error[E0730]: cannot pattern-match on an array without a fixed length\n   --> $DIR/E0730.rs:6:9"}, {"sha": "0215ff395df7d835f0008855b0a1e6c7f5f6b9af", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/gat-incomplete-warning.rs:3:12\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "4ca6d1998353f882ae2119a921e1de8bcc86afa1", "filename": "src/test/ui/hygiene/generic_params.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/generic_params.rs:6:37\n    |\n LL | #![feature(decl_macro, rustc_attrs, const_generics)]\n    |                                     ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "b351b8b73a0e58b6e8fab3ae419f9b2738958861", "filename": "src/test/ui/hygiene/issue-61574-const-parameters.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-61574-const-parameters.rs:6:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "8b9874715342c30e23133117b9a38eec1061a4de", "filename": "src/test/ui/if-attrs/let-chains-attr.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `let_chains` is incomplete and may cause the compiler to crash\n+warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/let-chains-attr.rs:3:12\n    |\n LL | #![feature(let_chains)]\n    |            ^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "c7fae45d5ca2cf70d1b527ec13e63ebfe7164ddb", "filename": "src/test/ui/impl-trait-in-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n use std::fmt::Debug;\n "}, {"sha": "bf739d4722f6823e4e7fcf6754b57a4586480b50", "filename": "src/test/ui/impl-trait-in-bindings.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/impl-trait-in-bindings.rs:3:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "d1f42be077dc82a78b0a3e734b829c981acab5ca", "filename": "src/test/ui/impl-trait/bindings-opaque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n const FOO: impl Copy = 42;\n "}, {"sha": "6656968d79ae032aa94a1178b4eb2910be0fdd35", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bindings-opaque.rs:1:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0599]: no method named `count_ones` found for opaque type `impl std::marker::Copy` in the current scope\n   --> $DIR/bindings-opaque.rs:11:17"}, {"sha": "fd79ba68fbddb08df24e971c9ba3ba259367f4ac", "filename": "src/test/ui/impl-trait/bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n fn a<T: Clone>(x: T) {\n     const foo: impl Clone = x;"}, {"sha": "e983fdecdba79d4eec39ab3f26e997e8e8460720", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -22,13 +22,14 @@ error[E0435]: attempt to use a non-constant value in a constant\n LL |         const foo: impl Clone = x;\n    |                                 ^ non-constant value\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bindings.rs:1:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "36b4ebca4dfc5a4a93d094e575c5b1748914b85f", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bound-normalization-fail.rs:4:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:27:32"}, {"sha": "afc181a906ac7d155bfc50aaf8b7e71c04eb37ae", "filename": "src/test/ui/impl-trait/bound-normalization-pass.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bound-normalization-pass.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "2e96022318b47ce35bca03d1ae19c4cd5993a36e", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n #![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n use std::io::Error;\n "}, {"sha": "89a22f5e5d6358fc513585b3c4c0511d3142c331", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:2:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0282]: type annotations needed for `impl std::future::Future`\n   --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:9"}, {"sha": "a687a9e3be12c4408857ff38eecc40d47d23a3c1", "filename": "src/test/ui/issues/issue-59508-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,6 +1,6 @@\n #![allow(dead_code)]\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n // This test checks that generic parameter re-ordering diagnostic suggestions mention that\n // consts come after types and lifetimes when the `const_generics` feature is enabled."}, {"sha": "85db20b13fb4cd00aab4fa02fc2e5f9f8968765b", "filename": "src/test/ui/issues/issue-59508-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -4,13 +4,14 @@ error: lifetime parameters must be declared prior to type parameters\n LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n    |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b: 'a, T>`\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-59508-1.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "214467793bcea2ca591e0f8e93b63a781b931b0d", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -42,13 +42,14 @@ LL |     type W where Self: Eq;\n    |                          |\n    |                          help: provide a definition for the type: `= <type>;`\n \n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:1:12\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:9:5"}, {"sha": "e5f5a7d8968dc0e3d1ea6812e0d3e7d7dc977b91", "filename": "src/test/ui/parser/issue-3036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,4 +1,4 @@\n-error: expected `;`, found ``}``\n+error: expected `;`, found `}`\n   --> $DIR/issue-3036.rs:5:14\n    |\n LL |     let x = 3"}, {"sha": "ba47982853871fecc709ab4ebdf546f65ef2da86", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,4 +1,4 @@\n-error: expected `;`, found `keyword `let``\n+error: expected `;`, found keyword `let`\n   --> $DIR/recover-missing-semi.rs:2:22\n    |\n LL |     let _: usize = ()\n@@ -7,7 +7,7 @@ LL |     let _: usize = ()\n LL |     let _ = 3;\n    |     --- unexpected token\n \n-error: expected `;`, found `keyword `return``\n+error: expected `;`, found keyword `return`\n   --> $DIR/recover-missing-semi.rs:9:22\n    |\n LL |     let _: usize = ()"}, {"sha": "f09ab3bf919881a2053fa05b0feadfc3d3d880f8", "filename": "src/test/ui/resolve/issue-65035-static-with-parent-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn f<T>() {\n     extern \"C\" {"}, {"sha": "7f8151db06f5b8a8ca55699fc564754c6f35465d", "filename": "src/test/ui/resolve/issue-65035-static-with-parent-generics.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -40,13 +40,14 @@ LL | fn i<const N: usize>() {\n LL |     static a: [u8; N] = [0; N];\n    |                             ^ use of generic parameter from outer function\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-65035-static-with-parent-generics.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}, {"sha": "4c3a00e5f3583dbd0cf6b11a4b71cad4882cee26", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -499,19 +499,22 @@ LL |         true && let 1 = 1\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/disallowed-positions.rs:20:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: the feature `let_chains` is incomplete and may cause the compiler to crash\n+warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/disallowed-positions.rs:22:12\n    |\n LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n    |            ^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n \n error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/disallowed-positions.rs:218:17"}, {"sha": "bf082932bd6ce789deaf558910f1622cd02ea757", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-and-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(raw_dylib)]\n-//~^ WARN the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `raw_dylib` is incomplete\n \n #[link(name=\"foo\")]\n extern {"}, {"sha": "5d8545b506204698ec33cf2ca5b52b5f54105577", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-and-name.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/link-ordinal-and-name.rs:1:12\n    |\n LL | #![feature(raw_dylib)]\n    |            ^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n error: cannot use `#[link_name]` with `#[link_ordinal]`\n   --> $DIR/link-ordinal-and-name.rs:7:5"}, {"sha": "ea633c5bcce24a0ef5e5e05ab6a12b7885e12e70", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-invalid-format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(raw_dylib)]\n-//~^ WARN the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `raw_dylib` is incomplete\n \n #[link(name=\"foo\")]\n extern {"}, {"sha": "8453a3966bee5f90cbd578222fdc7ce9d194d140", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-invalid-format.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/link-ordinal-invalid-format.rs:1:12\n    |\n LL | #![feature(raw_dylib)]\n    |            ^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n error: illegal ordinal format in `link_ordinal`\n   --> $DIR/link-ordinal-invalid-format.rs:6:5"}, {"sha": "55cc329dc594b6b8e450275fc26c53236a661f73", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,5 +1,5 @@\n #![feature(raw_dylib)]\n-//~^ WARN the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `raw_dylib` is incomplete\n \n #[link(name=\"foo\")]\n extern {"}, {"sha": "35f9b53fdf7201bd57a4bd3c2bde023fc4046960", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `raw_dylib` is incomplete and may cause the compiler to crash\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/link-ordinal-too-large.rs:1:12\n    |\n LL | #![feature(raw_dylib)]\n    |            ^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n error: ordinal value in `link_ordinal` is too large: `18446744073709551616`\n   --> $DIR/link-ordinal-too-large.rs:6:5"}, {"sha": "d53f562e99f4bf8ee866c554f5b0a1bb7cdcde09", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(type_alias_impl_trait)]\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `const_generics` is incomplete\n \n trait UnwrapItemsExt<'a, const C: usize> {\n     type Iter;"}, {"sha": "e0c1b023861278b69a07989c53c0dd367693ae14", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/assoc-type-const.rs:6:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "bc2bf9eca93bdc24c7d0f63526db93c008c96a7b", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -6,7 +6,7 @@\n // Specifically, this line requires `impl_trait_in_bindings` to be enabled:\n // https://github.com/rust-lang/rust/blob/481068a707679257e2a738b40987246e0420e787/src/librustc_typeck/check/mod.rs#L856\n #![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n // Ensures that `const` items can constrain an opaque `impl Trait`.\n "}, {"sha": "b0593d51a250cea5031660e37e30db7027753e7e", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.stderr?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -1,10 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/type-alias-impl-trait-const.rs:8:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "26bf463bd2922eefd941e9bedd4d106eb6f9a011", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd927a5b0f29342f7ad919fb52ca29510d2e7362/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=dd927a5b0f29342f7ad919fb52ca29510d2e7362", "patch": "@@ -483,8 +483,8 @@ fn check_newlines(fmtstr: &StrLit) -> bool {\n     };\n \n     match fmtstr.style {\n-        StrStyle::Cooked => unescape::unescape_str(contents, &mut cb),\n-        StrStyle::Raw(_) => unescape::unescape_raw_str(contents, &mut cb),\n+        StrStyle::Cooked => unescape::unescape_literal(contents, unescape::Mode::Str, &mut cb),\n+        StrStyle::Raw(_) => unescape::unescape_literal(contents, unescape::Mode::RawStr, &mut cb),\n     }\n \n     should_lint"}]}