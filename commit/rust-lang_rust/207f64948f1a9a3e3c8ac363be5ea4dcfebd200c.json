{"sha": "207f64948f1a9a3e3c8ac363be5ea4dcfebd200c", "node_id": "C_kwDOAAsO6NoAKDIwN2Y2NDk0OGYxYTlhM2UzYzhhYzM2M2JlNWVhNGRjZmViZDIwMGM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-22T22:03:51Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-05-22T22:03:51Z"}, "message": "Clean up `&args[..]`, use more readable `args.iter()` instead", "tree": {"sha": "92e330f109ddab73f97ae9a3351bb92d1275e8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e330f109ddab73f97ae9a3351bb92d1275e8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c", "html_url": "https://github.com/rust-lang/rust/commit/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc", "html_url": "https://github.com/rust-lang/rust/commit/3657d0936f3b0e4f973d37ecb27dcd7ce91db4cc"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "9d5619bacf516797fed496e279d2c5f2c1a2e307", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=207f64948f1a9a3e3c8ac363be5ea4dcfebd200c", "patch": "@@ -1205,7 +1205,7 @@ impl Clean<Item> for ty::AssocItem {\n                                             || generics\n                                                 .params\n                                                 .iter()\n-                                                .zip(&args[..])\n+                                                .zip(args.iter())\n                                                 .any(|(param, arg)| !param_eq_arg(param, arg))\n                                         {\n                                             return false;"}, {"sha": "da32d8c90be647b348dbcd29433412aa81fd1258", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207f64948f1a9a3e3c8ac363be5ea4dcfebd200c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=207f64948f1a9a3e3c8ac363be5ea4dcfebd200c", "patch": "@@ -457,7 +457,7 @@ impl clean::GenericArgs {\n                             f.write_str(\"&lt;\")?;\n                         }\n                         let mut comma = false;\n-                        for arg in &args[..] {\n+                        for arg in args.iter() {\n                             if comma {\n                                 f.write_str(\", \")?;\n                             }\n@@ -468,7 +468,7 @@ impl clean::GenericArgs {\n                                 write!(f, \"{}\", arg.print(cx))?;\n                             }\n                         }\n-                        for binding in &bindings[..] {\n+                        for binding in bindings.iter() {\n                             if comma {\n                                 f.write_str(\", \")?;\n                             }\n@@ -489,7 +489,7 @@ impl clean::GenericArgs {\n                 clean::GenericArgs::Parenthesized { inputs, output } => {\n                     f.write_str(\"(\")?;\n                     let mut comma = false;\n-                    for ty in &inputs[..] {\n+                    for ty in inputs.iter() {\n                         if comma {\n                             f.write_str(\", \")?;\n                         }"}]}