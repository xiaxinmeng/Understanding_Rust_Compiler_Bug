{"sha": "4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "node_id": "C_kwDOAAsO6NoAKDRkNGMwNWQzMmI1ODI4NDk0OWIyYjU2MTRlNGE1NmNhYzNlYmQ4ZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T16:21:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T16:21:32Z"}, "message": "Auto merge of #13428 - Veykril:fmt-stuck, r=Veykril\n\nfix: Fix formatting requests hanging when r-a is still starting\n\nThe reason for that was that we were calculating the crate defmaps of the file we are saving by accident causing us to get stuck waiting on their expensive computation, while we only need the relevant crate id.\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/4054\nCloses https://github.com/rust-lang/rust-analyzer/issues/11654", "tree": {"sha": "61a54148014a9e1daba068c93577d14c0aec083c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a54148014a9e1daba068c93577d14c0aec083c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "html_url": "https://github.com/rust-lang/rust/commit/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "106285b5c41f2f4b34bc869724e5fb38d771f770", "url": "https://api.github.com/repos/rust-lang/rust/commits/106285b5c41f2f4b34bc869724e5fb38d771f770", "html_url": "https://github.com/rust-lang/rust/commit/106285b5c41f2f4b34bc869724e5fb38d771f770"}, {"sha": "a762baca028e2a6f5efeb7d7804de08d035ba0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a762baca028e2a6f5efeb7d7804de08d035ba0c5", "html_url": "https://github.com/rust-lang/rust/commit/a762baca028e2a6f5efeb7d7804de08d035ba0c5"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "09a5cb03ecdc58d6904196218e47cb94020688d7", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -482,8 +482,8 @@ impl Analysis {\n     }\n \n     /// Returns crates this file belongs too.\n-    pub fn crate_for(&self, file_id: FileId) -> Cancellable<Vec<CrateId>> {\n-        self.with_db(|db| parent_module::crate_for(db, file_id))\n+    pub fn crates_for(&self, file_id: FileId) -> Cancellable<Vec<CrateId>> {\n+        self.with_db(|db| parent_module::crates_for(db, file_id))\n     }\n \n     /// Returns the edition of the given crate."}, {"sha": "9d425954e3907bcd7b1952fe6261b853dc7c7fb0", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -1,9 +1,8 @@\n use hir::Semantics;\n use ide_db::{\n-    base_db::{CrateId, FileId, FilePosition},\n+    base_db::{CrateId, FileId, FileLoader, FilePosition},\n     RootDatabase,\n };\n-use itertools::Itertools;\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstNode},\n@@ -55,9 +54,8 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n }\n \n /// Returns `Vec` for the same reason as `parent_module`\n-pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n-    let sema = Semantics::new(db);\n-    sema.to_module_defs(file_id).map(|module| module.krate().into()).unique().collect()\n+pub(crate) fn crates_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n+    db.relevant_crates(file_id).iter().copied().collect()\n }\n \n #[cfg(test)]\n@@ -147,7 +145,7 @@ $0\n mod foo;\n \"#,\n         );\n-        assert_eq!(analysis.crate_for(file_id).unwrap().len(), 1);\n+        assert_eq!(analysis.crates_for(file_id).unwrap().len(), 1);\n     }\n \n     #[test]\n@@ -162,6 +160,6 @@ mod baz;\n mod baz;\n \"#,\n         );\n-        assert_eq!(analysis.crate_for(file_id).unwrap().len(), 2);\n+        assert_eq!(analysis.crates_for(file_id).unwrap().len(), 2);\n     }\n }"}, {"sha": "20810c25b3e81f976ee1b99190d788389165ad80", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n \n     if let Some(file_id) = file_id {\n         format_to!(buf, \"\\nFile info:\\n\");\n-        let crates = crate::parent_module::crate_for(db, file_id);\n+        let crates = crate::parent_module::crates_for(db, file_id);\n         if crates.is_empty() {\n             format_to!(buf, \"Does not belong to any crate\");\n         }"}, {"sha": "cbde73547619ce1023d03b65c354167b3447a6db", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -118,11 +118,7 @@ impl CargoTargetSpec {\n         global_state_snapshot: &GlobalStateSnapshot,\n         file_id: FileId,\n     ) -> Result<Option<CargoTargetSpec>> {\n-        let crate_id = match &*global_state_snapshot.analysis.crate_for(file_id)? {\n-            &[crate_id, ..] => crate_id,\n-            _ => return Ok(None),\n-        };\n-        let (cargo_ws, target) = match global_state_snapshot.cargo_target_for_crate_root(crate_id) {\n+        let (cargo_ws, target) = match global_state_snapshot.cargo_target_for_file_id(file_id) {\n             Some(it) => it,\n             None => return Ok(None),\n         };"}, {"sha": "57899b599146693e176c6135107b05dcff363fe1", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -52,7 +52,7 @@ impl<'a> RequestDispatcher<'a> {\n             let _pctx = stdx::panic_context::enter(panic_context);\n             f(self.global_state, params)\n         };\n-        if let Ok(response) = result_to_response::<R>(req.id.clone(), result) {\n+        if let Ok(response) = result_to_response::<R>(req.id, result) {\n             self.global_state.respond(response);\n         }\n \n@@ -80,7 +80,7 @@ impl<'a> RequestDispatcher<'a> {\n             f(global_state_snapshot, params)\n         });\n \n-        if let Ok(response) = thread_result_to_response::<R>(req.id.clone(), result) {\n+        if let Ok(response) = thread_result_to_response::<R>(req.id, result) {\n             self.global_state.respond(response);\n         }\n "}, {"sha": "4cddb12083a12b873ce45d12be16cea2ee41d29a", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -8,7 +8,7 @@ use std::{sync::Arc, time::Instant};\n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n use ide::{Analysis, AnalysisHost, Cancellable, Change, FileId};\n-use ide_db::base_db::{CrateId, FileLoader, SourceDatabase};\n+use ide_db::base_db::{FileLoader, SourceDatabase};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use proc_macro_api::ProcMacroServer;\n@@ -398,11 +398,10 @@ impl GlobalStateSnapshot {\n         url_from_abs_path(path)\n     }\n \n-    pub(crate) fn cargo_target_for_crate_root(\n+    pub(crate) fn cargo_target_for_file_id(\n         &self,\n-        crate_id: CrateId,\n+        file_id: FileId,\n     ) -> Option<(&CargoWorkspace, Target)> {\n-        let file_id = self.analysis.crate_root(crate_id).ok()?;\n         let path = self.vfs.read().0.file_path(file_id);\n         let path = path.as_path()?;\n         self.workspaces.iter().find_map(|ws| match ws {"}, {"sha": "701a009ea8bd0b9fbb189a875b16f9f531155f3f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -658,7 +658,7 @@ pub(crate) fn handle_parent_module(\n \n         // check if invoked at the crate root\n         let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-        let crate_id = match snap.analysis.crate_for(file_id)?.first() {\n+        let crate_id = match snap.analysis.crates_for(file_id)?.first() {\n             Some(&crate_id) => crate_id,\n             None => return Ok(None),\n         };\n@@ -1782,7 +1782,7 @@ fn run_rustfmt(\n ) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n     let file_id = from_proto::file_id(snap, &text_document.uri)?;\n     let file = snap.analysis.file_text(file_id)?;\n-    let crate_ids = snap.analysis.crate_for(file_id)?;\n+    let crate_ids = snap.analysis.crates_for(file_id)?;\n \n     let line_index = snap.file_line_index(file_id)?;\n "}, {"sha": "89189cef149941a1ad417d46044213dcb4483370", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c05d32b58284949b2b5614e4a56cac3ebd8eb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=4d4c05d32b58284949b2b5614e4a56cac3ebd8eb", "patch": "@@ -783,7 +783,7 @@ impl GlobalState {\n                         let analysis = this.analysis_host.analysis();\n                         // Crates containing or depending on the saved file\n                         let crate_ids: Vec<_> = analysis\n-                            .crate_for(file_id)?\n+                            .crates_for(file_id)?\n                             .into_iter()\n                             .flat_map(|id| {\n                                 this.analysis_host"}]}