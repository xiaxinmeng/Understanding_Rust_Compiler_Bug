{"sha": "6a371d2c8939c3a32ff0da69eb66b271ffa58288", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMzcxZDJjODkzOWMzYTMyZmYwZGE2OWViNjZiMjcxZmZhNTgyODg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T20:05:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-20T09:52:51Z"}, "message": "Make allocator_kind a query.", "tree": {"sha": "2179683d40b533739caf3ded086d3bf0e5c7d9c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2179683d40b533739caf3ded086d3bf0e5c7d9c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a371d2c8939c3a32ff0da69eb66b271ffa58288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a371d2c8939c3a32ff0da69eb66b271ffa58288", "html_url": "https://github.com/rust-lang/rust/commit/6a371d2c8939c3a32ff0da69eb66b271ffa58288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a371d2c8939c3a32ff0da69eb66b271ffa58288/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9543636cd6609cd2a9880da8f93aac96192ae40a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9543636cd6609cd2a9880da8f93aac96192ae40a", "html_url": "https://github.com/rust-lang/rust/commit/9543636cd6609cd2a9880da8f93aac96192ae40a"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "1976e4ad3c9fc73e4fe06f704990a7bcebacff7c", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=6a371d2c8939c3a32ff0da69eb66b271ffa58288", "patch": "@@ -1,6 +1,6 @@\n use rustc_span::symbol::{sym, Symbol};\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Debug, Copy, HashStable_Generic)]\n pub enum AllocatorKind {\n     Global,\n     Default,"}, {"sha": "d39486c2f1002e485f849fb0c27fb3564c384e46", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=6a371d2c8939c3a32ff0da69eb66b271ffa58288", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn codegen(\n     });\n     if any_dynamic_crate {\n         false\n-    } else if let Some(kind) = tcx.allocator_kind() {\n+    } else if let Some(kind) = tcx.allocator_kind(()) {\n         codegen_inner(module, unwind_context, kind);\n         true\n     } else {"}, {"sha": "8a035e62e2a93263ad67700382f2e7b7a9080307", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=6a371d2c8939c3a32ff0da69eb66b271ffa58288", "patch": "@@ -180,7 +180,7 @@ fn exported_symbols_provider_local(\n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n-    if tcx.allocator_kind().is_some() {\n+    if tcx.allocator_kind(()).is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));"}, {"sha": "31ae84f4ca11d4d628fe7d115a30cc8f2d7198ca", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=6a371d2c8939c3a32ff0da69eb66b271ffa58288", "patch": "@@ -518,7 +518,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     });\n     let allocator_module = if any_dynamic_crate {\n         None\n-    } else if let Some(kind) = tcx.allocator_kind() {\n+    } else if let Some(kind) = tcx.allocator_kind(()) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n         let mut modules = backend.new_metadata(tcx, &llmod_id);"}, {"sha": "f66ff008801b689d9a76424fb38f639654ef054a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6a371d2c8939c3a32ff0da69eb66b271ffa58288", "patch": "@@ -1416,6 +1416,10 @@ rustc_queries! {\n         eval_always\n         desc { \"check whether crate {} is a private dependency\", c }\n     }\n+    query allocator_kind(_: ()) -> Option<AllocatorKind> {\n+        eval_always\n+        desc { \"allocator kind for the current crate\" }\n+    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "558d3adffa9945b392f49f4cff93649466ceccc5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6a371d2c8939c3a32ff0da69eb66b271ffa58288", "patch": "@@ -26,7 +26,6 @@ use crate::ty::{\n     TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy, Visibility,\n };\n use rustc_ast as ast;\n-use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n@@ -1259,10 +1258,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.all_crate_nums(())\n     }\n \n-    pub fn allocator_kind(self) -> Option<AllocatorKind> {\n-        self.cstore.allocator_kind()\n-    }\n-\n     pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(())\n     }\n@@ -2839,4 +2834,5 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n+    providers.allocator_kind = |tcx, ()| tcx.cstore.allocator_kind();\n }"}, {"sha": "2ac121fec7ee0db4df90c7de2766bf16695d300d", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a371d2c8939c3a32ff0da69eb66b271ffa58288/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=6a371d2c8939c3a32ff0da69eb66b271ffa58288", "patch": "@@ -33,6 +33,7 @@ use crate::traits::{self, ImplSource};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;"}]}