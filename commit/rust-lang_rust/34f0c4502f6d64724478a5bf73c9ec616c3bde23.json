{"sha": "34f0c4502f6d64724478a5bf73c9ec616c3bde23", "node_id": "C_kwDOAAsO6NoAKDM0ZjBjNDUwMmY2ZDY0NzI0NDc4YTViZjczYzllYzYxNmMzYmRlMjM", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-09-05T06:24:13Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-09-15T02:08:11Z"}, "message": "supplement for the missing or incomplete comments", "tree": {"sha": "1eaebb42c989737a84e2a504a062e5a9342d7949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eaebb42c989737a84e2a504a062e5a9342d7949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f0c4502f6d64724478a5bf73c9ec616c3bde23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmMiiQsACgkQPNdIZH7v\nY1nmbhAAmfW7oNvaqTWmQj6D33EvlOEs/2PDMpTtnNbuHOJ656rnQGmUMEYjjo0W\nhuD95cchc9SM+5ydk27ggTcARDpC0/FJtw0kjjxu6zssCGRjhpw63tWIT4ZPoYog\n2YUxuOXufwgveFmVZkoEbkg5a80xGRX572IkeQvleBI/hhk5tXAae8gW7fUlgA7q\nPh63kc87EQJuBgFe3QpQnd4KBHs33MMtbevEFi3Nu0QGnS2fRENDcQqDr0A1ZyL/\neBn5rM6gIywBFCQmugeJy/zd8D4T+reCq5a+LBvoZzD/mhYerCFM7oHkfw0Sw8Z+\nQkcjpGM1WJHx8lxNhx8Y/EGjvaW2AS1vaTrLEf1ZGCj9hkd8tuGxA9aKAUn7fcSD\nS7B8eTOuhsL+b9K8MGUcaAY7qjGF2HYVa4bU/RadUcEknGEOaZhoQ0CJOYexXeyS\nZCjEbdoIStD/OnsZJAqglBUpaTLIXPkGBy3R9xdZN8YPjxizJzyXXNghipxFRG7s\nOLfjy8INgKf+uj3QOI1FHvBq5+kUTCzmK1fyKL01fz+MmXioFSV/pTcRwQSo8yjt\nodD5eqxNPaPkE827J2Li1ui2ENnOgC5RYMlxtZ8+pR1Pi+tlWFTrw7LzWPk0Jl6C\n5J9jWiraeGivQWc98FnF23IhpPkV0zltf0kzR7qZ2hqa+ttV3go=\n=I0P6\n-----END PGP SIGNATURE-----", "payload": "tree 1eaebb42c989737a84e2a504a062e5a9342d7949\nparent af591ebe4d0cf2097a5fdc0bb710442d0f2e7876\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1662359053 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1663207691 +0800\n\nsupplement for the missing or incomplete comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f0c4502f6d64724478a5bf73c9ec616c3bde23", "html_url": "https://github.com/rust-lang/rust/commit/34f0c4502f6d64724478a5bf73c9ec616c3bde23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f0c4502f6d64724478a5bf73c9ec616c3bde23/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af591ebe4d0cf2097a5fdc0bb710442d0f2e7876", "url": "https://api.github.com/repos/rust-lang/rust/commits/af591ebe4d0cf2097a5fdc0bb710442d0f2e7876", "html_url": "https://github.com/rust-lang/rust/commit/af591ebe4d0cf2097a5fdc0bb710442d0f2e7876"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "d611f02333ff1b1d6386bc99cd92f6d511415617", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34f0c4502f6d64724478a5bf73c9ec616c3bde23/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f0c4502f6d64724478a5bf73c9ec616c3bde23/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=34f0c4502f6d64724478a5bf73c9ec616c3bde23", "patch": "@@ -119,10 +119,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } => {\n                     let ignores_expr_result = matches!(pattern.kind, PatKind::Wild);\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result });\n+\n+                    // Lower the `else` block first because its parent scope is actually\n+                    // enclosing the rest of the `let .. else ..` parts.\n+                    let else_block_span = this.thir[*else_block].span;\n                     // This place is not really used because this destination place\n                     // should never be used to take values at the end of the failure\n                     // block.\n-                    let else_block_span = this.thir[*else_block].span;\n                     let dummy_place = this.temp(this.tcx.types.never, else_block_span);\n                     let failure_entry = this.cfg.start_new_block();\n                     let failure_block;"}, {"sha": "46ffafc5a619a8b005698df9ced8af685d035391", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34f0c4502f6d64724478a5bf73c9ec616c3bde23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f0c4502f6d64724478a5bf73c9ec616c3bde23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=34f0c4502f6d64724478a5bf73c9ec616c3bde23", "patch": "@@ -128,16 +128,24 @@ fn resolve_block<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'tcx h\n             match statement.kind {\n                 hir::StmtKind::Local(hir::Local { els: Some(els), .. }) => {\n                     // Let-else has a special lexical structure for variables.\n+                    // First we take a checkpoint of the current scope context here.\n                     let mut prev_cx = visitor.cx;\n+\n                     visitor.enter_scope(Scope {\n                         id: blk.hir_id.local_id,\n                         data: ScopeData::Remainder(FirstStatementIndex::new(i)),\n                     });\n                     visitor.cx.var_parent = visitor.cx.parent;\n                     visitor.visit_stmt(statement);\n+                    // We need to back out temporarily to the last enclosing scope\n+                    // for the `else` block, so that even the temporaries receiving\n+                    // extended lifetime will be dropped inside this block.\n+                    // We are visiting the `else` block in this order so that\n+                    // the sequence of visits agree with the order in the default\n+                    // `hir::intravisit` visitor.\n                     mem::swap(&mut prev_cx, &mut visitor.cx);\n-                    // We need to back out temporarily and\n                     visitor.visit_block(els);\n+                    // From now on, we continue normally.\n                     visitor.cx = prev_cx;\n                 }\n                 hir::StmtKind::Local(..) | hir::StmtKind::Item(..) => {"}]}