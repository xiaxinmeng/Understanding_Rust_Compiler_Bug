{"sha": "51aa3f86a040599dad36a75c22fa0321f7de0741", "node_id": "C_kwDOAAsO6NoAKDUxYWEzZjg2YTA0MDU5OWRhZDM2YTc1YzIyZmEwMzIxZjdkZTA3NDE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-29T09:18:40Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-29T09:18:40Z"}, "message": "Add type for slices in ValTrees", "tree": {"sha": "5cd381d1c474ca16216b43984827b3a08a582395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd381d1c474ca16216b43984827b3a08a582395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51aa3f86a040599dad36a75c22fa0321f7de0741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51aa3f86a040599dad36a75c22fa0321f7de0741", "html_url": "https://github.com/rust-lang/rust/commit/51aa3f86a040599dad36a75c22fa0321f7de0741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51aa3f86a040599dad36a75c22fa0321f7de0741/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c9fc38c94969ce4b91615bc803d923be8e0f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c9fc38c94969ce4b91615bc803d923be8e0f51", "html_url": "https://github.com/rust-lang/rust/commit/13c9fc38c94969ce4b91615bc803d923be8e0f51"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "64a3b80988e33b11c0f849f7c4f96192bad38a7f", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/51aa3f86a040599dad36a75c22fa0321f7de0741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51aa3f86a040599dad36a75c22fa0321f7de0741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=51aa3f86a040599dad36a75c22fa0321f7de0741", "patch": "@@ -1,5 +1,7 @@\n use super::ScalarInt;\n-use rustc_macros::HashStable;\n+use crate::ty::codec::TyDecoder;\n+use rustc_macros::{HashStable, TyDecodable, TyEncodable};\n+use rustc_serialize::{Decodable, Encodable, Encoder};\n \n #[derive(Copy, Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]\n #[derive(HashStable)]\n@@ -20,6 +22,7 @@ pub enum ValTree<'tcx> {\n     /// See the `ScalarInt` documentation for how `ScalarInt` guarantees that equal values\n     /// of these types have the same representation.\n     Leaf(ScalarInt),\n+    SliceOrStr(ValSlice<'tcx>),\n     /// The fields of any kind of aggregate. Structs, tuples and arrays are represented by\n     /// listing their fields' values in order.\n     /// Enums are represented by storing their discriminant as a field, followed by all\n@@ -32,3 +35,28 @@ impl<'tcx> ValTree<'tcx> {\n         Self::Branch(&[])\n     }\n }\n+\n+#[derive(Copy, Clone, Debug, HashStable, Hash, Eq, PartialEq, PartialOrd, Ord)]\n+pub struct ValSlice<'tcx> {\n+    pub bytes: &'tcx [u8],\n+}\n+\n+impl<'tcx, S: Encoder> Encodable<S> for ValSlice<'tcx> {\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_usize(self.bytes.len())?;\n+        s.emit_raw_bytes(self.bytes)?;\n+\n+        Ok(())\n+    }\n+}\n+\n+impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ValSlice<'tcx> {\n+    fn decode(d: &mut D) -> Self {\n+        let tcx = d.tcx();\n+        let len = d.read_usize();\n+        let bytes_raw = d.read_raw_bytes(len);\n+        let bytes = tcx.arena.alloc_slice(&bytes_raw[..]);\n+\n+        ValSlice { bytes }\n+    }\n+}"}, {"sha": "9c81a90529c26e0c0b67921cb9eb4f164438e955", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51aa3f86a040599dad36a75c22fa0321f7de0741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51aa3f86a040599dad36a75c22fa0321f7de0741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=51aa3f86a040599dad36a75c22fa0321f7de0741", "patch": "@@ -62,7 +62,7 @@ pub use self::closure::{\n     CAPTURE_STRUCT_LOCAL,\n };\n pub use self::consts::{\n-    Const, ConstInt, ConstKind, ConstS, InferConst, ScalarInt, Unevaluated, ValTree,\n+    Const, ConstInt, ConstKind, ConstS, InferConst, ScalarInt, Unevaluated, ValSlice, ValTree,\n };\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,"}]}