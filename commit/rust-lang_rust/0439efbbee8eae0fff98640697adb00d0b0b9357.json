{"sha": "0439efbbee8eae0fff98640697adb00d0b0b9357", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzllZmJiZWU4ZWFlMGZmZjk4NjQwNjk3YWRiMDBkMGIwYjkzNTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-03T13:41:47Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-04T13:39:43Z"}, "message": "Improve subst error when parameter kinds mismatch", "tree": {"sha": "be82a5b90ecdf87e0b4896de7c8f22a8416cf8e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be82a5b90ecdf87e0b4896de7c8f22a8416cf8e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0439efbbee8eae0fff98640697adb00d0b0b9357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0439efbbee8eae0fff98640697adb00d0b0b9357", "html_url": "https://github.com/rust-lang/rust/commit/0439efbbee8eae0fff98640697adb00d0b0b9357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0439efbbee8eae0fff98640697adb00d0b0b9357/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a6ddfe10a1b0002e76c82696c8a093d87dc155", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a6ddfe10a1b0002e76c82696c8a093d87dc155", "html_url": "https://github.com/rust-lang/rust/commit/d0a6ddfe10a1b0002e76c82696c8a093d87dc155"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "8d51fbc174a045cba9e5678189a026dfcd30ef4e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0439efbbee8eae0fff98640697adb00d0b0b9357/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0439efbbee8eae0fff98640697adb00d0b0b9357/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=0439efbbee8eae0fff98640697adb00d0b0b9357", "patch": "@@ -550,17 +550,32 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n         let opt_ty = self.substs.get(p.idx as usize).map(|k| k.unpack());\n         let ty = match opt_ty {\n             Some(UnpackedKind::Type(ty)) => ty,\n-            _ => {\n+            Some(kind) => {\n                 let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n                     span,\n-                    \"Type parameter `{:?}` ({:?}/{}) out of range \\\n+                    \"expected type for `{:?}` ({:?}/{}) but found {:?} \\\n                      when substituting (root type={:?}) substs={:?}\",\n                     p,\n                     source_ty,\n                     p.idx,\n+                    kind,\n                     self.root_ty,\n-                    self.substs);\n+                    self.substs,\n+                );\n+            }\n+            None => {\n+                let span = self.span.unwrap_or(DUMMY_SP);\n+                span_bug!(\n+                    span,\n+                    \"type parameter `{:?}` ({:?}/{}) out of range \\\n+                     when substituting (root type={:?}) substs={:?}\",\n+                    p,\n+                    source_ty,\n+                    p.idx,\n+                    self.root_ty,\n+                    self.substs,\n+                );\n             }\n         };\n \n@@ -570,29 +585,41 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n     fn const_for_param(\n         &self,\n         p: ParamConst,\n-        source_cn: &'tcx ty::Const<'tcx>\n+        source_ct: &'tcx ty::Const<'tcx>\n     ) -> &'tcx ty::Const<'tcx> {\n         // Look up the const in the substitutions. It really should be in there.\n-        let opt_cn = self.substs.get(p.index as usize).map(|k| k.unpack());\n-        let cn = match opt_cn {\n-            Some(UnpackedKind::Const(cn)) => cn,\n-            _ => {\n+        let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());\n+        let ct = match opt_ct {\n+            Some(UnpackedKind::Const(ct)) => ct,\n+            Some(kind) => {\n                 let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n                     span,\n-                    \"Const parameter `{:?}` ({:?}/{}) out of range \\\n-                     when substituting (root type={:?}) substs={:?}\",\n+                    \"expected const for `{:?}` ({:?}/{}) but found {:?} \\\n+                     when substituting substs={:?}\",\n                     p,\n-                    source_cn,\n+                    source_ct,\n+                    p.index,\n+                    kind,\n+                    self.substs,\n+                );\n+            }\n+            None => {\n+                let span = self.span.unwrap_or(DUMMY_SP);\n+                span_bug!(\n+                    span,\n+                    \"const parameter `{:?}` ({:?}/{}) out of range \\\n+                     when substituting substs={:?}\",\n+                    p,\n+                    source_ct,\n                     p.index,\n-                    self.root_ty,\n                     self.substs,\n                 );\n             }\n         };\n \n         // FIXME(const_generics): shift const through binders\n-        cn\n+        ct\n     }\n \n     /// It is sometimes necessary to adjust the De Bruijn indices during substitution. This occurs"}]}