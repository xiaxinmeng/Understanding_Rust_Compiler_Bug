{"sha": "f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MzA2ZmZiZmNiMjI4MGYxODBlNTFjZTY0MjFlMWM2YzI4ZGNjZWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-20T06:14:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-20T06:18:07Z"}, "message": "Use correct spans for format string errors\n\nWhen encountering format string errors in a raw string, or regular\nstring literal with embedded newlines, account for the positional\nchange to use correct spans.\n\n:drive by fix: \ud83d\ude97", "tree": {"sha": "ed1c8c08d11b030da780ef599b66ae79b8d68e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed1c8c08d11b030da780ef599b66ae79b8d68e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "html_url": "https://github.com/rust-lang/rust/commit/f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/comments", "author": null, "committer": null, "parents": [{"sha": "154dee2dccd45f929b0a3d2ce2d45739513f77c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/154dee2dccd45f929b0a3d2ce2d45739513f77c8", "html_url": "https://github.com/rust-lang/rust/commit/154dee2dccd45f929b0a3d2ce2d45739513f77c8"}], "stats": {"total": 144, "additions": 123, "deletions": 21}, "files": [{"sha": "c59c110849577dbfb27ada087fdf0cdd6ad5d8f1", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "patch": "@@ -715,6 +715,9 @@ dependencies = [\n [[package]]\n name = \"fmt_macros\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"syntax 0.0.0\",\n+]\n \n [[package]]\n name = \"fnv\""}, {"sha": "6e6af9c2ff5e797381233c4e612bd00268e311f0", "filename": "src/libfmt_macros/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibfmt_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibfmt_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2FCargo.toml?ref=f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "patch": "@@ -7,3 +7,6 @@ version = \"0.0.0\"\n name = \"fmt_macros\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+\n+[dependencies]\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "54cf3d24173f789632c44b20439f04b791ac8535", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "patch": "@@ -28,6 +28,8 @@ pub use self::Alignment::*;\n pub use self::Flag::*;\n pub use self::Count::*;\n \n+extern crate syntax;\n+\n use std::str;\n use std::string;\n use std::iter;\n@@ -150,27 +152,36 @@ pub struct Parser<'a> {\n     pub errors: Vec<ParseError>,\n     /// Current position of implicit positional argument pointer\n     curarg: usize,\n+    /// The style of the string (raw or not), used to position spans correctly\n+    style: syntax::ast::StrStyle,\n+    /// How many newlines have been seen in the string so far, to adjust the error spans\n+    seen_newlines: usize,\n }\n \n impl<'a> Iterator for Parser<'a> {\n     type Item = Piece<'a>;\n \n     fn next(&mut self) -> Option<Piece<'a>> {\n+        let raw = match self.style {\n+            syntax::ast::StrStyle::Raw(raw) => raw as usize + self.seen_newlines,\n+            _ => 0,\n+        };\n         if let Some(&(pos, c)) = self.cur.peek() {\n             match c {\n                 '{' => {\n+                    let pos = pos + raw + 1;\n                     self.cur.next();\n                     if self.consume('{') {\n-                        Some(String(self.string(pos + 1)))\n+                        Some(String(self.string(pos)))\n                     } else {\n                         let ret = Some(NextArgument(self.argument()));\n                         self.must_consume('}');\n                         ret\n                     }\n                 }\n                 '}' => {\n+                    let pos = pos + raw + 1;\n                     self.cur.next();\n-                    let pos = pos + 1;\n                     if self.consume('}') {\n                         Some(String(self.string(pos)))\n                     } else {\n@@ -184,6 +195,10 @@ impl<'a> Iterator for Parser<'a> {\n                         None\n                     }\n                 }\n+                '\\n' => {\n+                    self.seen_newlines += 1;\n+                    Some(String(self.string(pos)))\n+                }\n                 _ => Some(String(self.string(pos))),\n             }\n         } else {\n@@ -194,12 +209,14 @@ impl<'a> Iterator for Parser<'a> {\n \n impl<'a> Parser<'a> {\n     /// Creates a new parser for the given format string\n-    pub fn new(s: &'a str) -> Parser<'a> {\n+    pub fn new(s: &'a str, style: syntax::ast::StrStyle) -> Parser<'a> {\n         Parser {\n             input: s,\n             cur: s.char_indices().peekable(),\n             errors: vec![],\n             curarg: 0,\n+            style,\n+            seen_newlines: 0,\n         }\n     }\n \n@@ -262,14 +279,19 @@ impl<'a> Parser<'a> {\n     /// found, an error is emitted.\n     fn must_consume(&mut self, c: char) {\n         self.ws();\n+        let raw = match self.style {\n+            syntax::ast::StrStyle::Raw(raw) => raw as usize,\n+            _ => 0,\n+        };\n+        let padding = raw + self.seen_newlines;\n         if let Some(&(pos, maybe)) = self.cur.peek() {\n             if c == maybe {\n                 self.cur.next();\n             } else {\n                 self.err(format!(\"expected `{:?}`, found `{:?}`\", c, maybe),\n                          format!(\"expected `{}`\", c),\n-                         pos + 1,\n-                         pos + 1);\n+                         pos + padding + 1,\n+                         pos + padding + 1);\n             }\n         } else {\n             let msg = format!(\"expected `{:?}` but string was terminated\", c);\n@@ -282,8 +304,8 @@ impl<'a> Parser<'a> {\n                 self.err_with_note(msg,\n                                    format!(\"expected `{:?}`\", c),\n                                    \"if you intended to print `{`, you can escape it using `{{`\",\n-                                   pos,\n-                                   pos);\n+                                   pos + padding,\n+                                   pos + padding);\n             } else {\n                 self.err(msg, format!(\"expected `{:?}`\", c), pos, pos);\n             }\n@@ -540,7 +562,7 @@ mod tests {\n     use super::*;\n \n     fn same(fmt: &'static str, p: &[Piece<'static>]) {\n-        let parser = Parser::new(fmt);\n+        let parser = Parser::new(fmt, syntax::ast::StrStyle::Cooked);\n         assert!(parser.collect::<Vec<Piece<'static>>>() == p);\n     }\n \n@@ -556,7 +578,7 @@ mod tests {\n     }\n \n     fn musterr(s: &str) {\n-        let mut p = Parser::new(s);\n+        let mut p = Parser::new(fmt, syntax::ast::StrStyle::Cooked);\n         p.next();\n         assert!(!p.errors.is_empty());\n     }"}, {"sha": "33d5502eba000901a159bf816c477e2731671249", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "patch": "@@ -15,7 +15,7 @@ use ty::{self, TyCtxt, GenericParamDefKind};\n use util::common::ErrorReported;\n use util::nodemap::FxHashMap;\n \n-use syntax::ast::{MetaItem, NestedMetaItem};\n+use syntax::ast::{self, MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax_pos::Span;\n use syntax_pos::symbol::LocalInternedString;\n@@ -242,7 +242,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n     {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n-        let parser = Parser::new(&self.0);\n+        let parser = Parser::new(&self.0, ast::StrStyle::Cooked);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -298,7 +298,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n             Some((name, value))\n         }).collect::<FxHashMap<String, String>>();\n \n-        let parser = Parser::new(&self.0);\n+        let parser = Parser::new(&self.0, ast::StrStyle::Cooked);\n         parser.map(|p| {\n             match p {\n                 Piece::String(s) => s,"}, {"sha": "7acfb08020fd938d1a36c3631e31c77e811f5175", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "patch": "@@ -763,7 +763,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     };\n \n     let fmt_str = &*fmt.node.0.as_str();\n-    let mut parser = parse::Parser::new(fmt_str);\n+    let mut parser = parse::Parser::new(fmt_str, fmt.node.1);\n     let mut pieces = vec![];\n \n     while let Some(mut piece) = parser.next() {"}, {"sha": "f39110ebc5dccde63cf613e2be403f801bb0b02d", "filename": "src/test/ui/fmt/format-string-error.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs?ref=f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-tab\n+\n fn main() {\n     println!(\"{\");\n     //~^ ERROR invalid format string: expected `'}'` but string was terminated\n@@ -24,4 +26,36 @@ fn main() {\n     //~^ ERROR invalid format string: unmatched `}` found\n     let _ = format!(\"{\\\\}\");\n     //~^ ERROR invalid format string: expected `'}'`, found `'\\\\'`\n+    let _ = format!(\"\\n\\n\\n{\\n\\n\\n\");\n+    //~^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+\t{\"###);\n+    //~^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+\t{\n+\n+\"###);\n+    //~^^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+\t}\n+\n+\"###);\n+    //~^^^ ERROR invalid format string\n+    let _ = format!(r###\"\n+\n+\n+\n+        }\n+\n+\"###);\n+    //~^^^ ERROR invalid format string: unmatched `}` found\n }"}, {"sha": "9c84fd2521891bcbfa31da14157a4e3a8bd9fcd2", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4306ffbfcb2280f180e51ce6421e1c6c28dccec/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=f4306ffbfcb2280f180e51ce6421e1c6c28dccec", "patch": "@@ -1,56 +1,96 @@\n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:12:16\n+  --> $DIR/format-string-error.rs:14:16\n    |\n LL |     println!(\"{\");\n    |                ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:15:15\n+  --> $DIR/format-string-error.rs:17:15\n    |\n LL |     println!(\"}\");\n    |               ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: invalid argument name `_foo`\n-  --> $DIR/format-string-error.rs:17:23\n+  --> $DIR/format-string-error.rs:19:23\n    |\n LL |     let _ = format!(\"{_foo}\", _foo = 6usize);\n    |                       ^^^^ invalid argument name in format string\n    |\n    = note: argument names cannot start with an underscore\n \n error: invalid format string: invalid argument name `_`\n-  --> $DIR/format-string-error.rs:19:23\n+  --> $DIR/format-string-error.rs:21:23\n    |\n LL |     let _ = format!(\"{_}\", _ = 6usize);\n    |                       ^ invalid argument name in format string\n    |\n    = note: argument names cannot start with an underscore\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:21:23\n+  --> $DIR/format-string-error.rs:23:23\n    |\n LL |     let _ = format!(\"{\");\n    |                       ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:23:22\n+  --> $DIR/format-string-error.rs:25:22\n    |\n LL |     let _ = format!(\"}\");\n    |                      ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: expected `'}'`, found `'/'`\n-  --> $DIR/format-string-error.rs:25:23\n+  --> $DIR/format-string-error.rs:27:23\n    |\n LL |     let _ = format!(\"{/}\");\n    |                       ^ expected `}` in format string\n \n-error: aborting due to 7 previous errors\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:29:29\n+   |\n+LL |     let _ = format!(\"/n/n/n{/n/n/n\");\n+   |                             ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:35:3\n+   |\n+LL |     {\"###);\n+   |      ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:42:1\n+   |\n+LL | \n+   | ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error.rs:49:2\n+   |\n+LL |     }\n+   |     ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error.rs:57:9\n+   |\n+LL |         }\n+   |         ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to 12 previous errors\n "}]}