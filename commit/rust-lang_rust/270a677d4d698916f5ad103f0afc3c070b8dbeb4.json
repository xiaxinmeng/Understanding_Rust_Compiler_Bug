{"sha": "270a677d4d698916f5ad103f0afc3c070b8dbeb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MGE2NzdkNGQ2OTg5MTZmNWFkMTAzZjBhZmMzYzA3MGI4ZGJlYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-07T03:28:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-07T03:28:03Z"}, "message": "Auto merge of #23107 - Manishearth:rollup, r=alexcrichton", "tree": {"sha": "62f22a53145acb3ea1fd95d8d4262ab9a342a421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f22a53145acb3ea1fd95d8d4262ab9a342a421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/270a677d4d698916f5ad103f0afc3c070b8dbeb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/270a677d4d698916f5ad103f0afc3c070b8dbeb4", "html_url": "https://github.com/rust-lang/rust/commit/270a677d4d698916f5ad103f0afc3c070b8dbeb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/270a677d4d698916f5ad103f0afc3c070b8dbeb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d716decb5d9944bc0d79cdc51b03e3af69bc59c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d716decb5d9944bc0d79cdc51b03e3af69bc59c", "html_url": "https://github.com/rust-lang/rust/commit/4d716decb5d9944bc0d79cdc51b03e3af69bc59c"}, {"sha": "aed31ee08e9adff815e8a5df2499f2e4c6e7916b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed31ee08e9adff815e8a5df2499f2e4c6e7916b", "html_url": "https://github.com/rust-lang/rust/commit/aed31ee08e9adff815e8a5df2499f2e4c6e7916b"}], "stats": {"total": 1633, "additions": 1233, "deletions": 400}, "files": [{"sha": "c00494be47cb768b367ff736dd00437a0fdb17b1", "filename": "mk/main.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -18,7 +18,7 @@ CFG_RELEASE_NUM=1.0.0\n # An optional number to put after the label, e.g. '.2' -> '-beta.2'\n # NB Make sure it starts with a dot to conform to semver pre-release\n # versions (section 9)\n-CFG_PRERELEASE_VERSION=.2\n+CFG_PRERELEASE_VERSION=\n \n CFG_FILENAME_EXTRA=4e7c5e5c\n \n@@ -30,8 +30,8 @@ CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)\n CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),beta)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-alpha$(CFG_PRERELEASE_VERSION)\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-alpha$(CFG_PRERELEASE_VERSION)\n+CFG_RELEASE=$(CFG_RELEASE_NUM)-beta(CFG_PRERELEASE_VERSION)\n+CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-beta(CFG_PRERELEASE_VERSION)\n CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),nightly)"}, {"sha": "ef38abcab651877dfdd0a6a9c9358d4176cadce6", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -590,7 +590,7 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n \n # The tests select when to use debug configuration on their own;\n # remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n-CTEST_RUSTC_FLAGS := $$(subst --cfg ndebug,,$$(CFG_RUSTC_FLAGS))\n+CTEST_RUSTC_FLAGS := $$(subst -C debug-assertions,,$$(CFG_RUSTC_FLAGS))\n \n # The tests cannot be optimized while the rest of the compiler is optimized, so\n # filter out the optimization (if any) from rustc and then figure out if we need"}, {"sha": "073f16e354d3a4eada298ca9503a4e1c9c66e17a", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -22,10 +22,9 @@\n #![feature(unicode)]\n #![feature(core)]\n #![feature(path)]\n-#![feature(os)]\n #![feature(io)]\n-#![feature(fs)]\n #![feature(net)]\n+#![feature(path_ext)]\n \n #![deny(warnings)]\n "}, {"sha": "04714b50fc027b78215777f4f388b3eec326e9bc", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -20,7 +20,6 @@ use procsrv;\n use util::logv;\n \n use std::env;\n-use std::ffi::OsStr;\n use std::fmt;\n use std::fs::{self, File};\n use std::io::BufReader;\n@@ -1323,7 +1322,7 @@ fn make_exe_name(config: &Config, testfile: &Path) -> PathBuf {\n     let mut f = output_base_name(config, testfile);\n     if !env::consts::EXE_SUFFIX.is_empty() {\n         let mut fname = f.file_name().unwrap().to_os_string();\n-        fname.push_os_str(OsStr::from_str(env::consts::EXE_SUFFIX));\n+        fname.push(env::consts::EXE_SUFFIX);\n         f.set_file_name(&fname);\n     }\n     f\n@@ -1433,7 +1432,7 @@ fn make_out_name(config: &Config, testfile: &Path, extension: &str) -> PathBuf {\n fn aux_output_dir_name(config: &Config, testfile: &Path) -> PathBuf {\n     let f = output_base_name(config, testfile);\n     let mut fname = f.file_name().unwrap().to_os_string();\n-    fname.push_os_str(OsStr::from_str(\"libaux\"));\n+    fname.push(\"libaux\");\n     f.with_file_name(&fname)\n }\n \n@@ -1647,8 +1646,8 @@ fn append_suffix_to_stem(p: &Path, suffix: &str) -> PathBuf {\n         p.to_path_buf()\n     } else {\n         let mut stem = p.file_stem().unwrap().to_os_string();\n-        stem.push_os_str(OsStr::from_str(\"-\"));\n-        stem.push_os_str(OsStr::from_str(suffix));\n+        stem.push(\"-\");\n+        stem.push(suffix);\n         p.with_file_name(&stem)\n     }\n }"}, {"sha": "21217bf54d7693e50a4777601536f2fca935edc0", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Threads and Communication Guide\n \n This content has moved into\n-[the Rust Programming Language book](book/tasks.html).\n+[the Rust Programming Language book](book/concurrency.html)."}, {"sha": "f1b5ecf4ff031b4535a5fc685312a6003455aa91", "filename": "src/doc/trpl/arrays-vectors-and-slices.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -60,6 +60,12 @@ let v = vec![1, 2, 3]; // v: Vec<i32>\n brackets `[]` with `vec!`. Rust allows you to use either in either situation,\n this is just convention.)\n \n+There's an alternate form of `vec!` for repeating an initial value:\n+\n+```\n+let v = vec![0; 10]; // ten zeroes\n+```\n+\n You can get the length of, iterate over, and subscript vectors just like\n arrays. In addition, (mutable) vectors can grow automatically:\n "}, {"sha": "5c9a42a8a71747534e2dfce3e98ca1efe6726272", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -56,6 +56,8 @@\n //! The [`heap`](heap/index.html) module defines the low-level interface to the\n //! default global allocator. It is not compatible with the libc allocator API.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"alloc\"]\n #![unstable(feature = \"alloc\")]\n #![feature(staged_api)]"}, {"sha": "01fb8e3587240ecd6b342c67605e96d869013744", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -19,6 +19,8 @@\n //! arena but can only hold objects of a single type, and `Arena`, which is a\n //! more complex, slower arena which can hold objects of any type.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"arena\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "9c1c2cc5906ebca14ebd09ae361595ba4a9ad73d", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -12,7 +12,8 @@\n //!\n //! See [std::collections](../std/collections) for a detailed discussion of collections in Rust.\n \n-\n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"collections\"]\n #![unstable(feature = \"collections\")]\n #![staged_api]"}, {"sha": "99547b9c60a8974e1c2e5fe316c42e33e813374b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -1086,7 +1086,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     ///\n     /// let s = \"\u4e2d\u534eVi\u1ec7t Nam\";\n     /// let mut i = s.len();\n-    /// while i < 0 {\n+    /// while i > 0 {\n     ///     let CharRange {ch, next} = s.char_range_at_reverse(i);\n     ///     println!(\"{}: {}\", i, ch);\n     ///     i = next;"}, {"sha": "32225b90f6b144b09ed389f71c6ded4a782dcc17", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -1279,14 +1279,14 @@ pub struct Cloned<I> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, D, I> Iterator for Cloned<I> where\n-    T: Clone,\n-    D: Deref<Target=T>,\n-    I: Iterator<Item=D>,\n+impl<I> Iterator for Cloned<I> where\n+    I: Iterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Clone\n {\n-    type Item = T;\n+    type Item = <I::Item as Deref>::Target;\n \n-    fn next(&mut self) -> Option<T> {\n+    fn next(&mut self) -> Option<<Self as Iterator>::Item> {\n         self.it.next().cloned()\n     }\n \n@@ -1296,36 +1296,36 @@ impl<T, D, I> Iterator for Cloned<I> where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, D, I> DoubleEndedIterator for Cloned<I> where\n-    T: Clone,\n-    D: Deref<Target=T>,\n-    I: DoubleEndedIterator<Item=D>,\n+impl<I> DoubleEndedIterator for Cloned<I> where\n+    I: DoubleEndedIterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Clone\n {\n-    fn next_back(&mut self) -> Option<T> {\n+    fn next_back(&mut self) -> Option<<Self as Iterator>::Item> {\n         self.it.next_back().cloned()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, D, I> ExactSizeIterator for Cloned<I> where\n-    T: Clone,\n-    D: Deref<Target=T>,\n-    I: ExactSizeIterator<Item=D>,\n+impl<I> ExactSizeIterator for Cloned<I> where\n+    I: ExactSizeIterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Clone\n {}\n \n #[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-impl<T, D, I> RandomAccessIterator for Cloned<I> where\n-    T: Clone,\n-    D: Deref<Target=T>,\n-    I: RandomAccessIterator<Item=D>\n+impl<I> RandomAccessIterator for Cloned<I> where\n+    I: RandomAccessIterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Clone\n {\n     #[inline]\n     fn indexable(&self) -> usize {\n         self.it.indexable()\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: usize) -> Option<T> {\n+    fn idx(&mut self, index: usize) -> Option<<Self as Iterator>::Item> {\n         self.it.idx(index).cloned()\n     }\n }\n@@ -1400,11 +1400,14 @@ pub struct Chain<A, B> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, A, B> Iterator for Chain<A, B> where A: Iterator<Item=T>, B: Iterator<Item=T> {\n-    type Item = T;\n+impl<A, B> Iterator for Chain<A, B> where\n+    A: Iterator,\n+    B: Iterator<Item = A::Item>\n+{\n+    type Item = A::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option<T> {\n+    fn next(&mut self) -> Option<A::Item> {\n         if self.flag {\n             self.b.next()\n         } else {\n@@ -1434,12 +1437,12 @@ impl<T, A, B> Iterator for Chain<A, B> where A: Iterator<Item=T>, B: Iterator<It\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, A, B> DoubleEndedIterator for Chain<A, B> where\n-    A: DoubleEndedIterator<Item=T>,\n-    B: DoubleEndedIterator<Item=T>,\n+impl<A, B> DoubleEndedIterator for Chain<A, B> where\n+    A: DoubleEndedIterator,\n+    B: DoubleEndedIterator<Item=A::Item>,\n {\n     #[inline]\n-    fn next_back(&mut self) -> Option<T> {\n+    fn next_back(&mut self) -> Option<A::Item> {\n         match self.b.next_back() {\n             Some(x) => Some(x),\n             None => self.a.next_back()\n@@ -1448,9 +1451,9 @@ impl<T, A, B> DoubleEndedIterator for Chain<A, B> where\n }\n \n #[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-impl<T, A, B> RandomAccessIterator for Chain<A, B> where\n-    A: RandomAccessIterator<Item=T>,\n-    B: RandomAccessIterator<Item=T>,\n+impl<A, B> RandomAccessIterator for Chain<A, B> where\n+    A: RandomAccessIterator,\n+    B: RandomAccessIterator<Item = A::Item>,\n {\n     #[inline]\n     fn indexable(&self) -> usize {\n@@ -1459,7 +1462,7 @@ impl<T, A, B> RandomAccessIterator for Chain<A, B> where\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: usize) -> Option<T> {\n+    fn idx(&mut self, index: usize) -> Option<A::Item> {\n         let len = self.a.indexable();\n         if index < len {\n             self.a.idx(index)\n@@ -1479,14 +1482,12 @@ pub struct Zip<A, B> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, U, A, B> Iterator for Zip<A, B> where\n-    A: Iterator<Item = T>,\n-    B: Iterator<Item = U>,\n+impl<A, B> Iterator for Zip<A, B> where A: Iterator, B: Iterator\n {\n-    type Item = (T, U);\n+    type Item = (A::Item, B::Item);\n \n     #[inline]\n-    fn next(&mut self) -> Option<(T, U)> {\n+    fn next(&mut self) -> Option<(A::Item, B::Item)> {\n         match self.a.next() {\n             None => None,\n             Some(x) => match self.b.next() {\n@@ -1515,12 +1516,12 @@ impl<T, U, A, B> Iterator for Zip<A, B> where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, U, A, B> DoubleEndedIterator for Zip<A, B> where\n-    A: DoubleEndedIterator + ExactSizeIterator<Item=T>,\n-    B: DoubleEndedIterator + ExactSizeIterator<Item=U>,\n+impl<A, B> DoubleEndedIterator for Zip<A, B> where\n+    A: DoubleEndedIterator + ExactSizeIterator,\n+    B: DoubleEndedIterator + ExactSizeIterator,\n {\n     #[inline]\n-    fn next_back(&mut self) -> Option<(T, U)> {\n+    fn next_back(&mut self) -> Option<(A::Item, B::Item)> {\n         let a_sz = self.a.len();\n         let b_sz = self.b.len();\n         if a_sz != b_sz {\n@@ -1540,17 +1541,17 @@ impl<T, U, A, B> DoubleEndedIterator for Zip<A, B> where\n }\n \n #[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-impl<T, U, A, B> RandomAccessIterator for Zip<A, B> where\n-    A: RandomAccessIterator<Item=T>,\n-    B: RandomAccessIterator<Item=U>,\n+impl<A, B> RandomAccessIterator for Zip<A, B> where\n+    A: RandomAccessIterator,\n+    B: RandomAccessIterator\n {\n     #[inline]\n     fn indexable(&self) -> usize {\n         cmp::min(self.a.indexable(), self.b.indexable())\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: usize) -> Option<(T, U)> {\n+    fn idx(&mut self, index: usize) -> Option<(A::Item, B::Item)> {\n         match self.a.idx(index) {\n             None => None,\n             Some(x) => match self.b.idx(index) {\n@@ -2058,8 +2059,9 @@ pub struct Scan<I, St, F> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A, B, I: Iterator<Item=A>, St, F> Iterator for Scan<I, St, F> where\n-    F: FnMut(&mut St, A) -> Option<B>,\n+impl<B, I, St, F> Iterator for Scan<I, St, F> where\n+    I: Iterator,\n+    F: FnMut(&mut St, I::Item) -> Option<B>,\n {\n     type Item = B;\n "}, {"sha": "45a5563ceeb170c62a1764fe8033aee9a1e77210", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -35,8 +35,7 @@\n //!   often generated by LLVM. Additionally, this library can make explicit\n //!   calls to these functions. Their signatures are the same as found in C.\n //!   These functions are often provided by the system libc, but can also be\n-//!   provided by `librlibc` which is distributed with the standard rust\n-//!   distribution.\n+//!   provided by the [rlibc crate](https://crates.io/crates/rlibc).\n //!\n //! * `rust_begin_unwind` - This function takes three arguments, a\n //!   `fmt::Arguments`, a `&str`, and a `usize`. These three arguments dictate\n@@ -47,6 +46,8 @@\n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"core\"]\n #![unstable(feature = \"core\")]\n #![staged_api]"}, {"sha": "c2860d435114f64329d48c30daae5224a4c7b4cf", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -100,10 +100,12 @@ macro_rules! assert_eq {\n /// This will invoke the `panic!` macro if the provided expression cannot be\n /// evaluated to `true` at runtime.\n ///\n-/// Unlike `assert!`, `debug_assert!` statements can be disabled by passing\n-/// `--cfg ndebug` to the compiler. This makes `debug_assert!` useful for\n-/// checks that are too expensive to be present in a release build but may be\n-/// helpful during development.\n+/// Unlike `assert!`, `debug_assert!` statements are only enabled in non\n+/// optimized builds by default. An optimized build will omit all\n+/// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n+/// compiler. This makes `debug_assert!` useful for checks that are too\n+/// expensive to be present in a release build but may be helpful during\n+/// development.\n ///\n /// # Example\n ///\n@@ -125,18 +127,20 @@ macro_rules! assert_eq {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert {\n-    ($($arg:tt)*) => (if cfg!(not(ndebug)) { assert!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert!($($arg)*); })\n }\n \n /// Asserts that two expressions are equal to each other, testing equality in\n /// both directions.\n ///\n /// On panic, this macro will print the values of the expressions.\n ///\n-/// Unlike `assert_eq!`, `debug_assert_eq!` statements can be disabled by\n-/// passing `--cfg ndebug` to the compiler. This makes `debug_assert_eq!`\n-/// useful for checks that are too expensive to be present in a release build\n-/// but may be helpful during development.\n+/// Unlike `assert_eq!`, `debug_assert_eq!` statements are only enabled in non\n+/// optimized builds by default. An optimized build will omit all\n+/// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n+/// compiler. This makes `debug_assert_eq!` useful for checks that are too\n+/// expensive to be present in a release build but may be helpful during\n+/// development.\n ///\n /// # Example\n ///\n@@ -147,7 +151,7 @@ macro_rules! debug_assert {\n /// ```\n #[macro_export]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if cfg!(not(ndebug)) { assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n }\n \n /// Short circuiting evaluation on Err"}, {"sha": "1dbbb845d46e0f87fad11e82cc358fe255eb9a2e", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![feature(box_syntax)]\n #![feature(int_uint)]\n #![feature(unboxed_closures)]"}, {"sha": "a5cfe908aa86e88a4220433ff8c2076327af0ce0", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -14,6 +14,8 @@\n //! [def]: https://en.wikipedia.org/wiki/DEFLATE\n //! [mz]: https://code.google.com/p/miniz/\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"flate\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "9b220409ef59789b162b2ce380ade3d05624e39b", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -14,6 +14,8 @@\n //! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n //! generated instead.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"fmt_macros\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "617edb4bea60c2a73a424df5248bbdf114c439cf", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -77,6 +77,9 @@\n //! }\n //! ```\n \n+\n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"getopts\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `getopts` library instead\")]\n@@ -92,8 +95,8 @@\n #![feature(collections)]\n #![feature(int_uint)]\n #![feature(staged_api)]\n-#![feature(str_words)]\n #![feature(core)]\n+#![feature(str_words)]\n #![cfg_attr(test, feature(rustc_private))]\n \n #[cfg(test)] #[macro_use] extern crate log;"}, {"sha": "5f6bfd196f031304caa18a06c52aad0dfe8ac8c8", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -264,6 +264,8 @@\n //!\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"graphviz\"]\n #![unstable(feature = \"rustc_private\")]\n #![feature(staged_api)]"}, {"sha": "11aba40afad73b9a2481533ceef5e4107ab45433", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"libc\"]\n #![crate_type = \"rlib\"]\n #![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\"))]\n@@ -383,7 +385,8 @@ pub mod types {\n                       target_arch = \"mips\",\n                       target_arch = \"mipsel\",\n                       target_arch = \"powerpc\",\n-                      target_arch = \"le32\"))]\n+                      target_arch = \"le32\",\n+                      all(target_arch = \"arm\", not(target_os = \"android\"))))]\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u64;\n@@ -395,7 +398,7 @@ pub mod types {\n                 pub type mode_t = u32;\n                 pub type ssize_t = i32;\n             }\n-            #[cfg(target_arch = \"arm\")]\n+            #[cfg(all(target_arch = \"arm\", target_os = \"android\"))]\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u32;\n@@ -409,7 +412,8 @@ pub mod types {\n             }\n             #[cfg(any(target_arch = \"x86\",\n                       target_arch = \"le32\",\n-                      target_arch = \"powerpc\"))]\n+                      target_arch = \"powerpc\",\n+                      all(target_arch = \"arm\", not(target_os = \"android\"))))]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_short, c_long, time_t};\n                 use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n@@ -455,7 +459,7 @@ pub mod types {\n                     pub __size: [u32; 9]\n                 }\n             }\n-            #[cfg(target_arch = \"arm\")]\n+            #[cfg(all(target_arch = \"arm\", target_os = \"android\"))]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_uchar, c_uint, c_ulong, time_t};\n                 use types::os::arch::c99::{c_longlong, c_ulonglong};\n@@ -4999,9 +5003,36 @@ pub mod funcs {\n             use types::os::arch::c95::{c_char, c_int};\n             use types::os::arch::posix88::mode_t;\n \n+            mod open_shim {\n+                extern {\n+                    #[cfg(any(target_os = \"macos\",\n+                              target_os = \"ios\"))]\n+                    pub fn open(path: *const ::c_char, oflag: ::c_int, ...)\n+                                -> ::c_int;\n+\n+                    #[cfg(not(any(target_os = \"macos\",\n+                                  target_os = \"ios\")))]\n+                    pub fn open(path: *const ::c_char, oflag: ::c_int, mode: ::mode_t)\n+                                -> ::c_int;\n+                }\n+            }\n+\n+            #[cfg(any(target_os = \"macos\",\n+                      target_os = \"ios\"))]\n+            #[inline]\n+            pub unsafe extern fn open(path: *const c_char, oflag: c_int, mode: mode_t) -> c_int {\n+                use types::os::arch::c95::c_uint;\n+                open_shim::open(path, oflag, mode as c_uint)\n+            }\n+\n+            #[cfg(not(any(target_os = \"macos\",\n+                          target_os = \"ios\")))]\n+            #[inline]\n+            pub unsafe extern fn open(path: *const c_char, oflag: c_int, mode: mode_t) -> c_int {\n+                open_shim::open(path, oflag, mode)\n+            }\n+\n             extern {\n-                pub fn open(path: *const c_char, oflag: c_int, mode: mode_t)\n-                            -> c_int;\n                 pub fn creat(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn fcntl(fd: c_int, cmd: c_int, ...) -> c_int;\n             }"}, {"sha": "3b6e1d0469148eaf404aed34b26e1c7b8dc793c7", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -155,6 +155,8 @@\n //! they're turned off (just a load and an integer comparison). This also means that\n //! if logging is disabled, none of the components of the log will be executed.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"log\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `log` library instead\")]"}, {"sha": "f0f861a3831a126efe176495d163f55d486b6cb1", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -157,7 +157,7 @@ macro_rules! info {\n /// ```\n #[macro_export]\n macro_rules! debug {\n-    ($($arg:tt)*) => (if cfg!(not(ndebug)) { log!(::log::DEBUG, $($arg)*) })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { log!(::log::DEBUG, $($arg)*) })\n }\n \n /// A macro to test whether a log level is enabled for the current module.\n@@ -192,7 +192,7 @@ macro_rules! debug {\n macro_rules! log_enabled {\n     ($lvl:expr) => ({\n         let lvl = $lvl;\n-        (lvl != ::log::DEBUG || cfg!(not(ndebug))) &&\n+        (lvl != ::log::DEBUG || cfg!(debug_assertions)) &&\n         lvl <= ::log::log_level() &&\n         ::log::mod_enabled(lvl, module_path!())\n     })"}, {"sha": "6bc56ce9084b34591e24505f2beedabf22c587a1", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -16,6 +16,8 @@\n //! is not recommended to use this library directly, but rather the official\n //! interface through `std::rand`.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rand\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\","}, {"sha": "d71bcdf29243ccad490604262f3700c883672409", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -111,6 +111,8 @@\n //!\n //! First 0x20 tags are reserved by RBML; custom tags start at 0x20.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rbml\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "f424ac0cda2719077d30fd197e2fc1d2c75a85dd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -14,6 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]\n@@ -38,10 +40,10 @@\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(std_misc)]\n-#![feature(os)]\n #![feature(path)]\n-#![feature(fs)]\n #![feature(io)]\n+#![feature(path_ext)]\n+#![feature(str_words)]\n #![cfg_attr(test, feature(test))]\n \n extern crate arena;"}, {"sha": "7dfbccea0dccd160f4c8ecfb6a0470083d6c28c1", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -1692,6 +1692,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n+            // for `PhantomData<T>`, we pass `T`\n+            ty::ty_struct(def_id, substs)\n+                if Some(def_id) == self.tcx().lang_items.phantom_data() =>\n+            {\n+                Some(substs.types.get_slice(TypeSpace).to_vec())\n+            }\n+\n             ty::ty_struct(def_id, substs) => {\n                 Some(ty::struct_fields(self.tcx(), def_id, substs).iter()\n                      .map(|f| f.mt.ty)"}, {"sha": "1b09be050203bd82b894d0e981b43f5417a0f524", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -81,6 +81,7 @@ pub struct Options {\n \n     pub gc: bool,\n     pub optimize: OptLevel,\n+    pub debug_assertions: bool,\n     pub debuginfo: DebugInfoLevel,\n     pub lint_opts: Vec<(String, lint::Level)>,\n     pub describe_lints: bool,\n@@ -238,7 +239,8 @@ pub fn basic_options() -> Options {\n         crate_name: None,\n         alt_std_name: None,\n         libs: Vec::new(),\n-        unstable_features: UnstableFeatures::Disallow\n+        unstable_features: UnstableFeatures::Disallow,\n+        debug_assertions: true,\n     }\n }\n \n@@ -528,6 +530,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          2 = full debug info with variable and type information\"),\n     opt_level: Option<uint> = (None, parse_opt_uint,\n         \"Optimize with possible levels 0-3\"),\n+    debug_assertions: Option<bool> = (None, parse_opt_bool,\n+        \"explicitly enable the cfg(debug_assertions) directive\"),\n }\n \n \n@@ -621,15 +625,19 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     };\n \n     let mk = attr::mk_name_value_item_str;\n-    return vec!(// Target bindings.\n+    let mut ret = vec![ // Target bindings.\n          attr::mk_word_item(fam.clone()),\n          mk(InternedString::new(\"target_os\"), intern(os)),\n          mk(InternedString::new(\"target_family\"), fam),\n          mk(InternedString::new(\"target_arch\"), intern(arch)),\n          mk(InternedString::new(\"target_endian\"), intern(end)),\n          mk(InternedString::new(\"target_pointer_width\"),\n             intern(wordsz))\n-    );\n+    ];\n+    if sess.opts.debug_assertions {\n+        ret.push(attr::mk_word_item(InternedString::new(\"debug_assertions\")));\n+    }\n+    return ret;\n }\n \n pub fn append_configuration(cfg: &mut ast::CrateConfig,\n@@ -923,6 +931,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n         }\n     };\n+    let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == No);\n     let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if cg.debuginfo.is_some() {\n@@ -1064,6 +1073,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         alt_std_name: None,\n         libs: libs,\n         unstable_features: get_unstable_features_setting(),\n+        debug_assertions: debug_assertions,\n     }\n }\n "}, {"sha": "ed44bf8952951ae6363d04bed52eb3c2a9d1f83f", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -11,14 +11,16 @@\n //! A helper class for dealing with static archives\n \n use std::env;\n-use std::fs::{self, TempDir};\n+use std::fs;\n use std::io::prelude::*;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, Stdio};\n use std::str;\n use syntax::diagnostic::Handler as ErrorHandler;\n \n+use tempdir::TempDir;\n+\n pub const METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n \n pub struct ArchiveConfig<'a> {"}, {"sha": "333c97b446ba3d421e21a7061ca631f25f8949ee", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -21,6 +21,8 @@\n //! one that doesn't; the one that doesn't might get decent parallel\n //! build speedups.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_back\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]\n@@ -34,7 +36,6 @@\n #![feature(collections)]\n #![feature(core)]\n #![feature(old_fs)]\n-#![feature(fs)]\n #![feature(hash)]\n #![feature(int_uint)]\n #![feature(io)]\n@@ -44,14 +45,16 @@\n #![feature(path)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(tempdir)]\n+#![feature(rand)]\n+#![feature(path_ext)]\n \n extern crate syntax;\n extern crate serialize;\n #[macro_use] extern crate log;\n \n pub mod abi;\n pub mod archive;\n+pub mod tempdir;\n pub mod arm;\n pub mod fs;\n pub mod mips;"}, {"sha": "2fbbe7d1f7c5ea60e7865617f78a5ecc8898e4da", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::old_io::{Command, IoError, OtherIoError};\n+use std::io;\n+use std::process::Command;\n use target::TargetOptions;\n \n use self::Arch::*;\n@@ -40,16 +41,15 @@ pub fn get_sdk_root(sdk_name: &str) -> String {\n                       .arg(\"--show-sdk-path\")\n                       .arg(\"-sdk\")\n                       .arg(sdk_name)\n-                      .spawn()\n-                      .and_then(|c| c.wait_with_output())\n+                      .output()\n                       .and_then(|output| {\n                           if output.status.success() {\n-                              Ok(String::from_utf8(output.output).unwrap())\n+                              Ok(String::from_utf8(output.stdout).unwrap())\n                           } else {\n-                              Err(IoError {\n-                                  kind: OtherIoError,\n-                                  desc: \"process exit with error\",\n-                                  detail: String::from_utf8(output.error).ok()})\n+                              let error = String::from_utf8(output.stderr);\n+                              Err(io::Error::new(io::ErrorKind::Other,\n+                                                 \"process exit with error\",\n+                                                 error.ok()))\n                           }\n                       });\n "}, {"sha": "4d8619a81216f940c6d14633703836187503fd71", "filename": "src/librustc_back/tempdir.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_back%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftempdir.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,121 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::env;\n+use std::io::{self, Error, ErrorKind};\n+use std::fs;\n+use std::path::{self, PathBuf, AsPath};\n+use std::rand::{thread_rng, Rng};\n+\n+/// A wrapper for a path to temporary directory implementing automatic\n+/// scope-based deletion.\n+pub struct TempDir {\n+    path: Option<PathBuf>,\n+}\n+\n+// How many times should we (re)try finding an unused random name? It should be\n+// enough that an attacker will run out of luck before we run out of patience.\n+const NUM_RETRIES: u32 = 1 << 31;\n+// How many characters should we include in a random file name? It needs to\n+// be enough to dissuade an attacker from trying to preemptively create names\n+// of that length, but not so huge that we unnecessarily drain the random number\n+// generator of entropy.\n+const NUM_RAND_CHARS: uint = 12;\n+\n+impl TempDir {\n+    /// Attempts to make a temporary directory inside of `tmpdir` whose name\n+    /// will have the prefix `prefix`. The directory will be automatically\n+    /// deleted once the returned wrapper is destroyed.\n+    ///\n+    /// If no directory can be created, `Err` is returned.\n+    #[allow(deprecated)] // rand usage\n+    pub fn new_in<P: AsPath + ?Sized>(tmpdir: &P, prefix: &str)\n+                                      -> io::Result<TempDir> {\n+        let storage;\n+        let mut tmpdir = tmpdir.as_path();\n+        if !tmpdir.is_absolute() {\n+            let cur_dir = try!(env::current_dir());\n+            storage = cur_dir.join(tmpdir);\n+            tmpdir = &storage;\n+            // return TempDir::new_in(&cur_dir.join(tmpdir), prefix);\n+        }\n+\n+        let mut rng = thread_rng();\n+        for _ in 0..NUM_RETRIES {\n+            let suffix: String = rng.gen_ascii_chars().take(NUM_RAND_CHARS).collect();\n+            let leaf = if prefix.len() > 0 {\n+                format!(\"{}.{}\", prefix, suffix)\n+            } else {\n+                // If we're given an empty string for a prefix, then creating a\n+                // directory starting with \".\" would lead to it being\n+                // semi-invisible on some systems.\n+                suffix\n+            };\n+            let path = tmpdir.join(&leaf);\n+            match fs::create_dir(&path) {\n+                Ok(_) => return Ok(TempDir { path: Some(path) }),\n+                Err(ref e) if e.kind() == ErrorKind::PathAlreadyExists => {}\n+                Err(e) => return Err(e)\n+            }\n+        }\n+\n+        Err(Error::new(ErrorKind::PathAlreadyExists,\n+                       \"too many temporary directories already exist\",\n+                       None))\n+    }\n+\n+    /// Attempts to make a temporary directory inside of `env::temp_dir()` whose\n+    /// name will have the prefix `prefix`. The directory will be automatically\n+    /// deleted once the returned wrapper is destroyed.\n+    ///\n+    /// If no directory can be created, `Err` is returned.\n+    #[allow(deprecated)]\n+    pub fn new(prefix: &str) -> io::Result<TempDir> {\n+        TempDir::new_in(&env::temp_dir(), prefix)\n+    }\n+\n+    /// Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\n+    /// This discards the wrapper so that the automatic deletion of the\n+    /// temporary directory is prevented.\n+    pub fn into_path(mut self) -> PathBuf {\n+        self.path.take().unwrap()\n+    }\n+\n+    /// Access the wrapped `std::path::Path` to the temporary directory.\n+    pub fn path(&self) -> &path::Path {\n+        self.path.as_ref().unwrap()\n+    }\n+\n+    /// Close and remove the temporary directory\n+    ///\n+    /// Although `TempDir` removes the directory on drop, in the destructor\n+    /// any errors are ignored. To detect errors cleaning up the temporary\n+    /// directory, call `close` instead.\n+    pub fn close(mut self) -> io::Result<()> {\n+        self.cleanup_dir()\n+    }\n+\n+    fn cleanup_dir(&mut self) -> io::Result<()> {\n+        match self.path {\n+            Some(ref p) => fs::remove_dir_all(p),\n+            None => Ok(())\n+        }\n+    }\n+}\n+\n+impl Drop for TempDir {\n+    fn drop(&mut self) {\n+        let _ = self.cleanup_dir();\n+    }\n+}\n+\n+// the tests for this module need to change the path using change_dir,\n+// and this doesn't play nicely with other tests so these unit tests are located\n+// in src/test/run-pass/tempfile.rs"}, {"sha": "c15ddf3ae779fbdfc8377433fde482bb117fa377", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_bitflags\"]\n #![feature(staged_api)]\n #![staged_api]"}, {"sha": "e09457970e12f776513d60245527aab02288f6c5", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_borrowck\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "565782b29e97126041f7d8894437646a42d88698", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -814,7 +814,9 @@ fn write_out_deps(sess: &Session,\n         // Build a list of files used to compile the output and\n         // write Makefile-compatible dependency rules\n         let files: Vec<String> = sess.codemap().files.borrow()\n-                                   .iter().filter(|fmap| fmap.is_real_file())\n+                                   .iter()\n+                                   .filter(|fmap| fmap.is_real_file())\n+                                   .filter(|fmap| !fmap.is_imported())\n                                    .map(|fmap| escape_dep_filename(&fmap.name))\n                                    .collect();\n         let mut file = try!(fs::File::create(&deps_filename));"}, {"sha": "c09b018ab634579a4b295a7c9b0e485edc5cbd5c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -14,6 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_driver\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]\n@@ -29,7 +31,6 @@\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]\n-#![feature(os)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n@@ -39,7 +40,6 @@\n #![feature(exit_status)]\n #![feature(path)]\n #![feature(io)]\n-#![feature(fs)]\n \n extern crate arena;\n extern crate flate;\n@@ -775,6 +775,7 @@ fn parse_crate_attrs(sess: &Session, input: &Input) ->\n ///\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n+#[allow(deprecated)]\n pub fn monitor<F:FnOnce()+Send+'static>(f: F) {\n     const STACK_SIZE: uint = 8 * 1024 * 1024; // 8MB\n "}, {"sha": "9781e9944f6427dee635f089a4c9a76e1f9324e1", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -19,6 +19,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_lint\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "0ff96784e58dc4cfd645a7b28ef1b56ac9b203e0", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![allow(non_upper_case_globals)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n@@ -29,8 +31,8 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(path)]\n+#![cfg_attr(unix, feature(std_misc))]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;"}, {"sha": "c766b20389e73c8f843161c0ef1b436f65504861", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_privacy\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "ccca99f8b4e4a07637cd0a47f636836e05f9cc17", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_resolve\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "3087a8ea45ddc4c9d4ae43ba351c16b0d46b8c9f", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -26,9 +26,10 @@ use middle::ty::{self, Ty};\n use util::common::time;\n use util::ppaux;\n use util::sha2::{Digest, Sha256};\n+use rustc_back::tempdir::TempDir;\n \n-use std::ffi::{AsOsStr, OsString};\n-use std::fs::{self, TempDir, PathExt};\n+use std::ffi::OsString;\n+use std::fs::{self, PathExt};\n use std::io::{self, Read, Write};\n use std::mem;\n use std::path::{Path, PathBuf};\n@@ -882,7 +883,7 @@ fn link_args(cmd: &mut Command,\n             let morestack = lib_path.join(\"libmorestack.a\");\n \n             let mut v = OsString::from_str(\"-Wl,-force_load,\");\n-            v.push_os_str(morestack.as_os_str());\n+            v.push(&morestack);\n             cmd.arg(&v);\n         } else {\n             cmd.args(&[\"-Wl,--whole-archive\", \"-lmorestack\", \"-Wl,--no-whole-archive\"]);\n@@ -1007,7 +1008,7 @@ fn link_args(cmd: &mut Command,\n \n             if sess.opts.cg.rpath {\n                 let mut v = OsString::from_str(\"-Wl,-install_name,@rpath/\");\n-                v.push_os_str(out_filename.file_name().unwrap());\n+                v.push(out_filename.file_name().unwrap());\n                 cmd.arg(&v);\n             }\n         } else {\n@@ -1107,7 +1108,7 @@ fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n                                             &search_path[..],\n                                             &sess.diagnostic().handler);\n             let mut v = OsString::from_str(\"-Wl,-force_load,\");\n-            v.push_os_str(lib.as_os_str());\n+            v.push(&lib);\n             cmd.arg(&v);\n         }\n     }"}, {"sha": "b74f85aa866102d43d6bc1f3f00bf2bfc593d71d", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -14,6 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_trans\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]\n@@ -35,13 +37,12 @@\n #![feature(rustc_private)]\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(unicode)]\n #![feature(io)]\n-#![feature(fs)]\n #![feature(path)]\n-#![feature(os)]\n-#![feature(tempdir)]\n+#![feature(path_ext)]\n+#![feature(fs)]\n+#![feature(hash)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "f49905613d24cbd2a241880971d395022b2dd4a8", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -3089,7 +3089,7 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n     let check_overflow = if let Some(v) = tcx.sess.opts.debugging_opts.force_overflow_checks {\n         v\n     } else {\n-        !attr::contains_name(&krate.config, \"ndebug\")\n+        tcx.sess.opts.debug_assertions\n     };\n \n     // Before we touch LLVM, make sure that multithreading is enabled."}, {"sha": "39b430b7ad51ed1a6ddcb5eaeaa9baea1311e89e", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -173,7 +173,7 @@ pub fn get_const_expr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         &**expr\n     } else {\n         ccx.sess().span_bug(ref_expr.span,\n-                            &format!(\"get_const_val given non-constant item {}\",\n+                            &format!(\"get_const_expr given non-constant item {}\",\n                                      item.repr(ccx.tcx())));\n     }\n }"}, {"sha": "95c39270cc6d9f18c56dd2e98145009c39f74ae3", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -697,6 +697,7 @@ struct FunctionDebugContextData {\n     fn_metadata: DISubprogram,\n     argument_counter: Cell<uint>,\n     source_locations_enabled: Cell<bool>,\n+    source_location_override: Cell<bool>,\n }\n \n enum VariableAccess<'a> {\n@@ -1176,6 +1177,12 @@ pub fn set_source_location(fcx: &FunctionContext,\n             return;\n         }\n         FunctionDebugContext::RegularContext(box ref function_debug_context) => {\n+            if function_debug_context.source_location_override.get() {\n+                // Just ignore any attempts to set a new debug location while\n+                // the override is active.\n+                return;\n+            }\n+\n             let cx = fcx.ccx;\n \n             debug!(\"set_source_location: {}\", cx.sess().codemap().span_to_string(span));\n@@ -1194,6 +1201,35 @@ pub fn set_source_location(fcx: &FunctionContext,\n     }\n }\n \n+/// This function makes sure that all debug locations emitted while executing\n+/// `wrapped_function` are set to the given `debug_loc`.\n+pub fn with_source_location_override<F, R>(fcx: &FunctionContext,\n+                                           debug_loc: DebugLoc,\n+                                           wrapped_function: F) -> R\n+    where F: FnOnce() -> R\n+{\n+    match fcx.debug_context {\n+        FunctionDebugContext::DebugInfoDisabled => {\n+            wrapped_function()\n+        }\n+        FunctionDebugContext::FunctionWithoutDebugInfo => {\n+            set_debug_location(fcx.ccx, UnknownLocation);\n+            wrapped_function()\n+        }\n+        FunctionDebugContext::RegularContext(box ref function_debug_context) => {\n+            if function_debug_context.source_location_override.get() {\n+                wrapped_function()\n+            } else {\n+                debug_loc.apply(fcx);\n+                function_debug_context.source_location_override.set(true);\n+                let result = wrapped_function();\n+                function_debug_context.source_location_override.set(false);\n+                result\n+            }\n+        }\n+    }\n+}\n+\n /// Clears the current debug location.\n ///\n /// Instructions generated hereafter won't be assigned a source location.\n@@ -1414,6 +1450,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         fn_metadata: fn_metadata,\n         argument_counter: Cell::new(1),\n         source_locations_enabled: Cell::new(false),\n+        source_location_override: Cell::new(false),\n     };\n \n "}, {"sha": "96d3e16d253b44707c6f15ba5cb7d536e002b1e1", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -147,15 +147,21 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 ast::ExprPath(..) => {\n                     match bcx.def(expr.id) {\n                         def::DefConst(did) => {\n-                            let expr = consts::get_const_expr(bcx.ccx(), did, expr);\n+                            let const_expr = consts::get_const_expr(bcx.ccx(), did, expr);\n                             // Temporarily get cleanup scopes out of the way,\n                             // as they require sub-expressions to be contained\n                             // inside the current AST scope.\n                             // These should record no cleanups anyways, `const`\n                             // can't have destructors.\n                             let scopes = mem::replace(&mut *bcx.fcx.scopes.borrow_mut(),\n                                                       vec![]);\n-                            bcx = trans_into(bcx, expr, dest);\n+                            // Lock emitted debug locations to the location of\n+                            // the constant reference expression.\n+                            debuginfo::with_source_location_override(bcx.fcx,\n+                                                                     expr.debug_loc(),\n+                                                                     || {\n+                                bcx = trans_into(bcx, const_expr, dest)\n+                            });\n                             let scopes = mem::replace(&mut *bcx.fcx.scopes.borrow_mut(),\n                                                       scopes);\n                             assert!(scopes.is_empty());"}, {"sha": "8185f48cb8c7031ed952bdee0b8ac51be794d0c4", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -118,7 +118,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n-            ast::ItemTrait(_, ref ast_generics, _, _) => {\n+            ast::ItemTrait(_, ref ast_generics, _, ref items) => {\n                 let trait_predicates =\n                     ty::lookup_predicates(ccx.tcx, local_def(item.id));\n                 reject_non_type_param_bounds(\n@@ -127,6 +127,14 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                     &trait_predicates);\n                 self.check_variances(item, ast_generics, &trait_predicates,\n                                      self.tcx().lang_items.phantom_fn());\n+                if ty::trait_has_default_impl(ccx.tcx, local_def(item.id)) {\n+                    if !items.is_empty() {\n+                        ccx.tcx.sess.span_err(\n+                            item.span,\n+                            \"traits with default impls (`e.g. unsafe impl Trait for ..`) must \\\n+                            have no methods or associated items\")\n+                    }\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "bbc64a54013b717b7dc11e8287f9da17180b425c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -62,7 +62,8 @@ independently:\n This API is completely unstable and subject to change.\n \n */\n-\n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_typeck\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]"}, {"sha": "435317c4fb6ffc257ec29c26eba50554fb0203d7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 42, "deletions": 53, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -38,7 +38,6 @@ use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::collections::{HashMap, HashSet};\n use std::default::Default;\n-use std::ffi::OsStr;\n use std::fmt;\n use std::fs::{self, File};\n use std::io::prelude::*;\n@@ -67,12 +66,10 @@ use html::item_type::ItemType;\n use html::layout;\n use html::markdown::Markdown;\n use html::markdown;\n-use html::escape::Escape;\n use stability_summary;\n \n /// A pair of name and its optional document.\n-#[derive(Clone, Eq, Ord, PartialEq, PartialOrd)]\n-pub struct NameDoc(String, Option<String>);\n+pub type NameDoc = (String, Option<String>);\n \n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls\n@@ -98,12 +95,6 @@ pub struct Context {\n     /// This describes the layout of each page, and is not modified after\n     /// creation of the context (contains info like the favicon and added html).\n     pub layout: layout::Layout,\n-    /// This map is a list of what should be displayed on the sidebar of the\n-    /// current page. The key is the section header (traits, modules,\n-    /// functions), and the value is the list of containers belonging to this\n-    /// header. This map will change depending on the surrounding context of the\n-    /// page.\n-    pub sidebar: HashMap<String, Vec<NameDoc>>,\n     /// This flag indicates whether [src] links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n@@ -271,7 +262,6 @@ pub fn run(mut krate: clean::Crate,\n         passes: passes,\n         current: Vec::new(),\n         root_path: String::new(),\n-        sidebar: HashMap::new(),\n         layout: layout::Layout {\n             logo: \"\".to_string(),\n             favicon: \"\".to_string(),\n@@ -770,7 +760,7 @@ impl<'a> SourceCollector<'a> {\n \n         let mut fname = p.file_name().expect(\"source has no filename\")\n                          .to_os_string();\n-        fname.push_os_str(OsStr::from_str(\".html\"));\n+        fname.push(\".html\");\n         cur.push(&fname);\n         let mut w = BufWriter::new(try!(File::create(&cur)));\n \n@@ -1232,7 +1222,16 @@ impl Context {\n                         clean::ModuleItem(m) => m,\n                         _ => unreachable!()\n                     };\n-                    this.sidebar = this.build_sidebar(&m);\n+\n+                    // render sidebar-items.js used throughout this module\n+                    {\n+                        let items = this.build_sidebar_items(&m);\n+                        let js_dst = this.dst.join(\"sidebar-items.js\");\n+                        let mut js_out = BufWriter::new(try!(File::create(&js_dst)));\n+                        try!(write!(&mut js_out, \"initSidebarItems({});\",\n+                                    json::as_json(&items)));\n+                    }\n+\n                     for item in m.items {\n                         f(this,item);\n                     }\n@@ -1252,15 +1251,11 @@ impl Context {\n         }\n     }\n \n-    fn build_sidebar(&self, m: &clean::Module) -> HashMap<String, Vec<NameDoc>> {\n+    fn build_sidebar_items(&self, m: &clean::Module) -> HashMap<String, Vec<NameDoc>> {\n         let mut map = HashMap::new();\n         for item in &m.items {\n             if self.ignore_private_item(item) { continue }\n \n-            // avoid putting foreign items to the sidebar.\n-            if let &clean::ForeignFunctionItem(..) = &item.inner { continue }\n-            if let &clean::ForeignStaticItem(..) = &item.inner { continue }\n-\n             let short = shortty(item).to_static_str();\n             let myname = match item.name {\n                 None => continue,\n@@ -1269,7 +1264,7 @@ impl Context {\n             let short = short.to_string();\n             let v = map.entry(short).get().unwrap_or_else(\n                 |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-            v.push(NameDoc(myname, Some(shorter_line(item.doc_value()))));\n+            v.push((myname, Some(shorter_line(item.doc_value()))));\n         }\n \n         for (_, items) in &mut map {\n@@ -2216,9 +2211,18 @@ impl<'a> fmt::Display for Sidebar<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let cx = self.cx;\n         let it = self.item;\n+        let parentlen = cx.current.len() - if it.is_mod() {1} else {0};\n+\n+        // the sidebar is designed to display sibling functions, modules and\n+        // other miscellaneous informations. since there are lots of sibling\n+        // items (and that causes quadratic growth in large modules),\n+        // we refactor common parts into a shared JavaScript file per module.\n+        // still, we don't move everything into JS because we want to preserve\n+        // as much HTML as possible in order to allow non-JS-enabled browsers\n+        // to navigate the documentation (though slightly inefficiently).\n+\n         try!(write!(fmt, \"<p class='location'>\"));\n-        let len = cx.current.len() - if it.is_mod() {1} else {0};\n-        for (i, name) in cx.current.iter().take(len).enumerate() {\n+        for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n             if i > 0 {\n                 try!(write!(fmt, \"::<wbr>\"));\n             }\n@@ -2228,40 +2232,25 @@ impl<'a> fmt::Display for Sidebar<'a> {\n         }\n         try!(write!(fmt, \"</p>\"));\n \n-        fn block(w: &mut fmt::Formatter, short: &str, longty: &str,\n-                 cur: &clean::Item, cx: &Context) -> fmt::Result {\n-            let items = match cx.sidebar.get(short) {\n-                Some(items) => items,\n-                None => return Ok(())\n-            };\n-            try!(write!(w, \"<div class='block {}'><h2>{}</h2>\", short, longty));\n-            for &NameDoc(ref name, ref doc) in items {\n-                let curty = shortty(cur).to_static_str();\n-                let class = if cur.name.as_ref().unwrap() == name &&\n-                               short == curty { \"current\" } else { \"\" };\n-                try!(write!(w, \"<a class='{ty} {class}' href='{href}{path}' \\\n-                                title='{title}'>{name}</a>\",\n-                       ty = short,\n-                       class = class,\n-                       href = if curty == \"mod\" {\"../\"} else {\"\"},\n-                       path = if short == \"mod\" {\n-                           format!(\"{}/index.html\", name)\n-                       } else {\n-                           format!(\"{}.{}.html\", short, name)\n-                       },\n-                       title = Escape(doc.as_ref().unwrap()),\n-                       name = name));\n-            }\n-            try!(write!(w, \"</div>\"));\n-            Ok(())\n+        // sidebar refers to the enclosing module, not this module\n+        let relpath = if shortty(it) == ItemType::Module { \"../\" } else { \"\" };\n+        try!(write!(fmt,\n+                    \"<script>window.sidebarCurrent = {{\\\n+                        name: '{name}', \\\n+                        ty: '{ty}', \\\n+                        relpath: '{path}'\\\n+                     }};</script>\",\n+                    name = it.name.as_ref().map(|x| &x[..]).unwrap_or(\"\"),\n+                    ty = shortty(it).to_static_str(),\n+                    path = relpath));\n+        if parentlen == 0 {\n+            // there is no sidebar-items.js beyond the crate root path\n+            // FIXME maybe dynamic crate loading can be merged here\n+        } else {\n+            try!(write!(fmt, \"<script async src=\\\"{path}sidebar-items.js\\\"></script>\",\n+                        path = relpath));\n         }\n \n-        try!(block(fmt, \"mod\", \"Modules\", it, cx));\n-        try!(block(fmt, \"struct\", \"Structs\", it, cx));\n-        try!(block(fmt, \"enum\", \"Enums\", it, cx));\n-        try!(block(fmt, \"trait\", \"Traits\", it, cx));\n-        try!(block(fmt, \"fn\", \"Functions\", it, cx));\n-        try!(block(fmt, \"macro\", \"Macros\", it, cx));\n         Ok(())\n     }\n }"}, {"sha": "a9b233dd128d49994112dd364743f8d66acd36aa", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -15,6 +15,27 @@\n     \"use strict\";\n     var resizeTimeout, interval;\n \n+    // This mapping table should match the discriminants of\n+    // `rustdoc::html::item_type::ItemType` type in Rust.\n+    var itemTypes = [\"mod\",\n+                     \"externcrate\",\n+                     \"import\",\n+                     \"struct\",\n+                     \"enum\",\n+                     \"fn\",\n+                     \"type\",\n+                     \"static\",\n+                     \"trait\",\n+                     \"impl\",\n+                     \"tymethod\",\n+                     \"method\",\n+                     \"structfield\",\n+                     \"variant\",\n+                     \"macro\",\n+                     \"primitive\",\n+                     \"associatedtype\",\n+                     \"constant\"];\n+\n     $('.js-only').removeClass('js-only');\n \n     function getQueryStringParams() {\n@@ -552,27 +573,6 @@\n             showResults(results);\n         }\n \n-        // This mapping table should match the discriminants of\n-        // `rustdoc::html::item_type::ItemType` type in Rust.\n-        var itemTypes = [\"mod\",\n-                         \"externcrate\",\n-                         \"import\",\n-                         \"struct\",\n-                         \"enum\",\n-                         \"fn\",\n-                         \"type\",\n-                         \"static\",\n-                         \"trait\",\n-                         \"impl\",\n-                         \"tymethod\",\n-                         \"method\",\n-                         \"structfield\",\n-                         \"variant\",\n-                         \"macro\",\n-                         \"primitive\",\n-                         \"associatedtype\",\n-                         \"constant\"];\n-\n         function itemTypeFromName(typename) {\n             for (var i = 0; i < itemTypes.length; ++i) {\n                 if (itemTypes[i] === typename) return i;\n@@ -708,6 +708,50 @@\n \n     window.initSearch = initSearch;\n \n+    // delayed sidebar rendering.\n+    function initSidebarItems(items) {\n+        var sidebar = $('.sidebar');\n+        var current = window.sidebarCurrent;\n+\n+        function block(shortty, longty) {\n+            var filtered = items[shortty];\n+            if (!filtered) return;\n+\n+            var div = $('<div>').attr('class', 'block ' + shortty);\n+            div.append($('<h2>').text(longty));\n+\n+            for (var i = 0; i < filtered.length; ++i) {\n+                var item = filtered[i];\n+                var name = item[0];\n+                var desc = item[1]; // can be null\n+\n+                var klass = shortty;\n+                if (name === current.name && shortty == current.ty) {\n+                    klass += ' current';\n+                }\n+                var path;\n+                if (shortty === 'mod') {\n+                    path = name + '/index.html';\n+                } else {\n+                    path = shortty + '.' + name + '.html';\n+                }\n+                div.append($('<a>', {'href': current.relpath + path,\n+                                     'title': desc,\n+                                     'class': klass}).text(name));\n+            }\n+            sidebar.append(div);\n+        }\n+\n+        block(\"mod\", \"Modules\");\n+        block(\"struct\", \"Structs\");\n+        block(\"enum\", \"Enums\");\n+        block(\"trait\", \"Traits\");\n+        block(\"fn\", \"Functions\");\n+        block(\"macro\", \"Macros\");\n+    }\n+\n+    window.initSidebarItems = initSidebarItems;\n+\n     window.register_implementors = function(imp) {\n         var list = $('#implementors-list');\n         var libs = Object.getOwnPropertyNames(imp);"}, {"sha": "8fb979875cd760245c2f2668bfdc94e4ad605043", "filename": "src/librustdoc/html/static/playpen.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -15,7 +15,7 @@\n     if (window.playgroundUrl) {\n         $('pre.rust').hover(function() {\n             var a = $('<a>').text('\u21f1').attr('class', 'test-arrow');\n-            var code = $(this).siblings(\".rusttest\").text();\n+            var code = $(this).prev(\".rusttest\").text();\n             a.attr('href', window.playgroundUrl + '?code=' +\n                            encodeURIComponent(code));\n             a.attr('target', '_blank');"}, {"sha": "c203dc0e7199ed51a6cb2954f7fb5354ee49504b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustdoc\"]\n #![unstable(feature = \"rustdoc\")]\n #![staged_api]\n@@ -35,9 +37,9 @@\n #![feature(unicode)]\n #![feature(str_words)]\n #![feature(io)]\n-#![feature(fs)]\n #![feature(path)]\n-#![feature(tempdir)]\n+#![feature(file_path)]\n+#![feature(path_ext)]\n \n extern crate arena;\n extern crate getopts;\n@@ -47,6 +49,7 @@ extern crate rustc_trans;\n extern crate rustc_driver;\n extern crate rustc_resolve;\n extern crate rustc_lint;\n+extern crate rustc_back;\n extern crate serialize;\n extern crate syntax;\n extern crate \"test\" as testing;"}, {"sha": "c785d78dc9303e1247e87298cc9fca6c2adcc899", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -13,7 +13,6 @@ use std::collections::{HashSet, HashMap};\n use std::dynamic_lib::DynamicLibrary;\n use std::env;\n use std::ffi::OsString;\n-use std::fs::TempDir;\n use std::old_io;\n use std::io;\n use std::path::PathBuf;\n@@ -28,6 +27,7 @@ use rustc_lint;\n use rustc::session::{self, config};\n use rustc::session::config::get_unstable_features_setting;\n use rustc::session::search_paths::{SearchPaths, PathKind};\n+use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n use syntax::codemap::CodeMap;\n use syntax::diagnostic;\n@@ -111,6 +111,7 @@ pub fn run(input: &str,\n     0\n }\n \n+#[allow(deprecated)]\n fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n            externs: core::Externs,\n            should_fail: bool, no_run: bool, as_test_harness: bool) {"}, {"sha": "ad7908c6dd57c820bf327d81cd7c06f8d7307921", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -14,6 +14,8 @@\n Core encoding and decoding interfaces.\n */\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"serialize\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"deprecated in favor of rustc-serialize on crates.io\")]"}, {"sha": "ec9f90723be96525237346913150d0a389f39b0b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![unstable(feature = \"std_misc\")]\n+\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use error::{Error, FromError};\n use fmt;\n@@ -59,6 +61,7 @@ use vec::Vec;\n /// # }\n /// ```\n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n     inner: Vec<u8>,\n }\n@@ -110,13 +113,19 @@ pub struct CString {\n /// }\n /// ```\n #[derive(Hash)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CStr {\n+    // FIXME: this should not be represented with a DST slice but rather with\n+    //        just a raw `libc::c_char` along with some form of marker to make\n+    //        this an unsized type. Essentially `sizeof(&CStr)` should be the\n+    //        same as `sizeof(&c_char)` but `CStr` should be an unsized type.\n     inner: [libc::c_char]\n }\n \n /// An error returned from `CString::new` to indicate that a nul byte was found\n /// in the vector provided.\n #[derive(Clone, PartialEq, Debug)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct NulError(usize, Vec<u8>);\n \n /// A conversion trait used by the constructor of `CString` for types that can\n@@ -153,6 +162,7 @@ impl CString {\n     /// This function will return an error if the bytes yielded contain an\n     /// internal 0 byte. The error returned will contain the bytes as well as\n     /// the position of the nul byte.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<T: IntoBytes>(t: T) -> Result<CString, NulError> {\n         let bytes = t.into_bytes();\n         match bytes.iter().position(|x| *x == 0) {\n@@ -216,6 +226,7 @@ impl CString {\n     ///\n     /// This method is equivalent to `from_vec` except that no runtime assertion\n     /// is made that `v` contains no 0 bytes.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {\n         v.push(0);\n         CString { inner: v }\n@@ -225,17 +236,20 @@ impl CString {\n     ///\n     /// The returned slice does **not** contain the trailing nul separator and\n     /// it is guaranteed to not have any interior nul bytes.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.inner[..self.inner.len() - 1]\n     }\n \n     /// Equivalent to the `as_bytes` function except that the returned slice\n     /// includes the trailing nul byte.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Deref for CString {\n     type Target = CStr;\n \n@@ -254,30 +268,36 @@ impl fmt::Debug for CString {\n impl NulError {\n     /// Returns the position of the nul byte in the slice that was provided to\n     /// `CString::from_vec`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn nul_position(&self) -> usize { self.0 }\n \n     /// Consumes this error, returning the underlying vector of bytes which\n     /// generated the error in the first place.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_vec(self) -> Vec<u8> { self.1 }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for NulError {\n     fn description(&self) -> &str { \"nul byte found in data\" }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for NulError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"nul byte found in provided data at position: {}\", self.0)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromError<NulError> for io::Error {\n     fn from_error(_: NulError) -> io::Error {\n         io::Error::new(io::ErrorKind::InvalidInput,\n                        \"data provided contains a nul byte\", None)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromError<NulError> for old_io::IoError {\n     fn from_error(_: NulError) -> old_io::IoError {\n         old_io::IoError {\n@@ -325,6 +345,7 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const libc::c_char) -> &'a CStr {\n         let len = libc::strlen(ptr);\n         mem::transmute(slice::from_raw_parts(ptr, len as usize + 1))\n@@ -335,6 +356,7 @@ impl CStr {\n     /// The returned pointer will be valid for as long as `self` is and points\n     /// to a contiguous region of memory terminated with a 0 byte to represent\n     /// the end of the string.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_ptr(&self) -> *const libc::c_char {\n         self.inner.as_ptr()\n     }\n@@ -351,6 +373,7 @@ impl CStr {\n     /// > **Note**: This method is currently implemented as a 0-cost cast, but\n     /// > it is planned to alter its definition in the future to perform the\n     /// > length calculation whenever this method is called.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n         &bytes[..bytes.len() - 1]\n@@ -364,22 +387,27 @@ impl CStr {\n     /// > **Note**: This method is currently implemented as a 0-cost cast, but\n     /// > it is planned to alter its definition in the future to perform the\n     /// > length calculation whenever this method is called.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n         unsafe { mem::transmute::<&[libc::c_char], &[u8]>(&self.inner) }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for CStr {\n     fn eq(&self, other: &CStr) -> bool {\n         self.to_bytes().eq(other.to_bytes())\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for CStr {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for CStr {\n     fn partial_cmp(&self, other: &CStr) -> Option<Ordering> {\n         self.to_bytes().partial_cmp(&other.to_bytes())\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for CStr {\n     fn cmp(&self, other: &CStr) -> Ordering {\n         self.to_bytes().cmp(&other.to_bytes())"}, {"sha": "f17dc6542491bad149819704d118debd755ac9a7", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -10,24 +10,27 @@\n \n //! Utilities related to FFI bindings.\n \n-#![unstable(feature = \"std_misc\",\n-            reason = \"module just underwent fairly large reorganization and the dust \\\n-                      still needs to settle\")]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-pub use self::c_str::{CString, CStr, NulError, IntoBytes};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use self::c_str::{CString, CStr};\n+pub use self::c_str::{NulError, IntoBytes};\n #[allow(deprecated)]\n pub use self::c_str::c_str_to_bytes;\n #[allow(deprecated)]\n pub use self::c_str::c_str_to_bytes_with_nul;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::OsString;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::OsStr;\n \n mod c_str;\n mod os_str;\n \n // FIXME (#21670): these should be defined in the os_str module\n /// Freely convertible to an `&OsStr` slice.\n+#[unstable(feature = \"std_misc\")]\n pub trait AsOsStr {\n     /// Convert to an `&OsStr` slice.\n     fn as_os_str(&self) -> &OsStr;"}, {"sha": "77df831bbfe3771e21e57fb92ca2f5a191674b0d", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -49,46 +49,61 @@ use super::AsOsStr;\n \n /// Owned, mutable OS strings.\n #[derive(Clone)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n     inner: Buf\n }\n \n /// Slices into OS strings.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsStr {\n     inner: Slice\n }\n \n impl OsString {\n     /// Constructs an `OsString` at no cost by consuming a `String`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_string(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n     }\n \n     /// Constructs an `OsString` by copying from a `&str` slice.\n     ///\n     /// Equivalent to: `OsString::from_string(String::from_str(s))`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_str(s: &str) -> OsString {\n         OsString { inner: Buf::from_str(s) }\n     }\n \n     /// Constructs a new empty `OsString`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n     }\n \n     /// Convert the `OsString` into a `String` if it contains valid Unicode data.\n     ///\n     /// On failure, ownership of the original `OsString` is returned.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_string(self) -> Result<String, OsString> {\n         self.inner.into_string().map_err(|buf| OsString { inner: buf} )\n     }\n \n     /// Extend the string with the given `&OsStr` slice.\n+    #[deprecated(since = \"1.0.0\", reason = \"renamed to `push`\")]\n+    #[unstable(feature = \"os\")]\n     pub fn push_os_str(&mut self, s: &OsStr) {\n         self.inner.push_slice(&s.inner)\n     }\n+\n+    /// Extend the string with the given `&OsStr` slice.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn push<T: AsOsStr + ?Sized>(&mut self, s: &T) {\n+        self.inner.push_slice(&s.as_os_str().inner)\n+    }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Index<ops::RangeFull> for OsString {\n     type Output = OsStr;\n \n@@ -98,6 +113,7 @@ impl ops::Index<ops::RangeFull> for OsString {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for OsString {\n     type Target = OsStr;\n \n@@ -107,32 +123,38 @@ impl ops::Deref for OsString {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for OsString {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for OsString {\n     fn eq(&self, other: &OsString) -> bool {\n         &**self == &**other\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<str> for OsString {\n     fn eq(&self, other: &str) -> bool {\n         &**self == other\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<OsString> for str {\n     fn eq(&self, other: &OsString) -> bool {\n         &**other == self\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for OsString {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for OsString {\n     #[inline]\n     fn partial_cmp(&self, other: &OsString) -> Option<cmp::Ordering> {\n@@ -148,13 +170,15 @@ impl PartialOrd for OsString {\n     fn ge(&self, other: &OsString) -> bool { &**self >= &**other }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd<str> for OsString {\n     #[inline]\n     fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n         (&**self).partial_cmp(other)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for OsString {\n     #[inline]\n     fn cmp(&self, other: &OsString) -> cmp::Ordering {\n@@ -172,25 +196,29 @@ impl Hash for OsString {\n \n impl OsStr {\n     /// Coerce directly from a `&str` slice to a `&OsStr` slice.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_str(s: &str) -> &OsStr {\n         unsafe { mem::transmute(Slice::from_str(s)) }\n     }\n \n     /// Yield a `&str` slice if the `OsStr` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n     }\n \n     /// Convert an `OsStr` to a `Cow<str>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()\n     }\n \n     /// Copy the slice into an owned `OsString`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }\n     }\n@@ -204,26 +232,31 @@ impl OsStr {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for OsStr {\n     fn eq(&self, other: &OsStr) -> bool {\n         self.bytes().eq(other.bytes())\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<str> for OsStr {\n     fn eq(&self, other: &str) -> bool {\n         *self == *OsStr::from_str(other)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<OsStr> for str {\n     fn eq(&self, other: &OsStr) -> bool {\n         *other == *OsStr::from_str(self)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for OsStr {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for OsStr {\n     #[inline]\n     fn partial_cmp(&self, other: &OsStr) -> Option<cmp::Ordering> {\n@@ -239,6 +272,7 @@ impl PartialOrd for OsStr {\n     fn ge(&self, other: &OsStr) -> bool { self.bytes().ge(other.bytes()) }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd<str> for OsStr {\n     #[inline]\n     fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n@@ -249,6 +283,7 @@ impl PartialOrd<str> for OsStr {\n // FIXME (#19470): cannot provide PartialOrd<OsStr> for str until we\n // have more flexible coherence rules.\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for OsStr {\n     #[inline]\n     fn cmp(&self, other: &OsStr) -> cmp::Ordering { self.bytes().cmp(other.bytes()) }\n@@ -262,21 +297,25 @@ impl Hash for OsStr {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for OsStr {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         self.inner.fmt(formatter)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Borrow<OsStr> for OsString {\n     fn borrow(&self) -> &OsStr { &self[..] }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ToOwned for OsStr {\n     type Owned = OsString;\n     fn to_owned(&self) -> OsString { self.to_os_string() }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: AsOsStr + ?Sized> AsOsStr for &'a T {\n     fn as_os_str(&self) -> &OsStr {\n         (*self).as_os_str()\n@@ -307,15 +346,12 @@ impl AsOsStr for String {\n     }\n }\n \n-#[cfg(unix)]\n impl AsOsStr for Path {\n+    #[cfg(unix)]\n     fn as_os_str(&self) -> &OsStr {\n         unsafe { mem::transmute(self.as_vec()) }\n     }\n-}\n-\n-#[cfg(windows)]\n-impl AsOsStr for Path {\n+    #[cfg(windows)]\n     fn as_os_str(&self) -> &OsStr {\n         // currently .as_str() is actually infallible on windows\n         OsStr::from_str(self.as_str().unwrap())"}, {"sha": "80ec9909824bba17d6ac2b0f31c285842c19ecd8", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 91, "deletions": 39, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -15,7 +15,7 @@\n //! operations. Extra platform-specific functionality can be found in the\n //! extension traits of `std::os::$platform`.\n \n-#![unstable(feature = \"fs\")]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::prelude::*;\n \n@@ -25,6 +25,7 @@ use sys::fs2 as fs_imp;\n use sys_common::{AsInnerMut, FromInner, AsInner};\n use vec::Vec;\n \n+#[allow(deprecated)]\n pub use self::tempdir::TempDir;\n \n mod tempdir;\n@@ -52,6 +53,7 @@ mod tempdir;\n /// # Ok(())\n /// # }\n /// ```\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n     inner: fs_imp::File,\n     path: PathBuf,\n@@ -62,6 +64,7 @@ pub struct File {\n /// This structure is returned from the `metadata` function or method and\n /// represents known metadata about a file such as its permissions, size,\n /// modification times, etc.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Metadata(fs_imp::FileAttr);\n \n /// Iterator over the entries in a directory.\n@@ -70,16 +73,22 @@ pub struct Metadata(fs_imp::FileAttr);\n /// will yield instances of `io::Result<DirEntry>`. Through a `DirEntry`\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ReadDir(fs_imp::ReadDir);\n \n /// Entries returned by the `ReadDir` iterator.\n ///\n /// An instance of `DirEntry` represents an entry inside of a directory on the\n /// filesystem. Each entry can be inspected via methods to learn about the full\n /// path or possibly other metadata through per-platform extension traits.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct DirEntry(fs_imp::DirEntry);\n \n /// An iterator that recursively walks over the contents of a directory.\n+#[unstable(feature = \"fs_walk\",\n+           reason = \"the precise semantics and defaults for a recursive walk \\\n+                     may change and this may end up accounting for files such \\\n+                     as symlinks differently\")]\n pub struct WalkDir {\n     cur: Option<ReadDir>,\n     stack: Vec<io::Result<ReadDir>>,\n@@ -92,6 +101,7 @@ pub struct WalkDir {\n /// `File::create` methods are aliases for commonly used options using this\n /// builder.\n #[derive(Clone)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OpenOptions(fs_imp::OpenOptions);\n \n /// Representation of the various permissions on a file.\n@@ -101,6 +111,7 @@ pub struct OpenOptions(fs_imp::OpenOptions);\n /// functionality, such as mode bits, is available through the\n /// `os::unix::PermissionsExt` trait.\n #[derive(Clone, PartialEq, Eq, Debug)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Permissions(fs_imp::FilePermissions);\n \n impl File {\n@@ -112,6 +123,7 @@ impl File {\n     ///\n     /// This function will return an error if `path` does not already exist.\n     /// Other errors may also be returned according to `OpenOptions::open`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsPath + ?Sized>(path: &P) -> io::Result<File> {\n         OpenOptions::new().read(true).open(path)\n     }\n@@ -122,11 +134,15 @@ impl File {\n     /// and will truncate it if it does.\n     ///\n     /// See the `OpenOptions::open` function for more details.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn create<P: AsPath + ?Sized>(path: &P) -> io::Result<File> {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path)\n     }\n \n     /// Returns the original path that was used to open this file.\n+    #[unstable(feature = \"file_path\",\n+               reason = \"this abstraction is imposed by this library instead \\\n+                         of the underlying OS and may be removed\")]\n     pub fn path(&self) -> Option<&Path> {\n         Some(&self.path)\n     }\n@@ -135,6 +151,7 @@ impl File {\n     ///\n     /// This function will attempt to ensure that all in-core data reaches the\n     /// filesystem before returning.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn sync_all(&self) -> io::Result<()> {\n         self.inner.fsync()\n     }\n@@ -148,6 +165,7 @@ impl File {\n     ///\n     /// Note that some platforms may simply implement this in terms of\n     /// `sync_all`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn sync_data(&self) -> io::Result<()> {\n         self.inner.datasync()\n     }\n@@ -159,11 +177,13 @@ impl File {\n     /// be shrunk. If it is greater than the current file's size, then the file\n     /// will be extended to `size` and have all of the intermediate data filled\n     /// in with 0s.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_len(&self, size: u64) -> io::Result<()> {\n         self.inner.truncate(size)\n     }\n \n-    /// Queries information about the underlying file.\n+    /// Queries metadata about the underlying file.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn metadata(&self) -> io::Result<Metadata> {\n         self.inner.file_attr().map(Metadata)\n     }\n@@ -172,33 +192,39 @@ impl File {\n impl AsInner<fs_imp::File> for File {\n     fn as_inner(&self) -> &fs_imp::File { &self.inner }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Seek for File {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         self.inner.seek(pos)\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for &'a File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for &'a File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Seek for &'a File {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         self.inner.seek(pos)\n@@ -209,6 +235,7 @@ impl OpenOptions {\n     /// Creates a blank net set of options ready for configuration.\n     ///\n     /// All options are initially set to `false`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> OpenOptions {\n         OpenOptions(fs_imp::OpenOptions::new())\n     }\n@@ -217,6 +244,7 @@ impl OpenOptions {\n     ///\n     /// This option, when true, will indicate that the file should be\n     /// `read`-able if opened.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn read(&mut self, read: bool) -> &mut OpenOptions {\n         self.0.read(read); self\n     }\n@@ -225,6 +253,7 @@ impl OpenOptions {\n     ///\n     /// This option, when true, will indicate that the file should be\n     /// `write`-able if opened.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write(&mut self, write: bool) -> &mut OpenOptions {\n         self.0.write(write); self\n     }\n@@ -233,6 +262,7 @@ impl OpenOptions {\n     ///\n     /// This option, when true, means that writes will append to a file instead\n     /// of overwriting previous contents.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn append(&mut self, append: bool) -> &mut OpenOptions {\n         self.0.append(append); self\n     }\n@@ -241,6 +271,7 @@ impl OpenOptions {\n     ///\n     /// If a file is successfully opened with this option set it will truncate\n     /// the file to 0 length if it already exists.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, truncate: bool) -> &mut OpenOptions {\n         self.0.truncate(truncate); self\n     }\n@@ -249,6 +280,7 @@ impl OpenOptions {\n     ///\n     /// This option indicates whether a new file will be created if the file\n     /// does not yet already exist.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn create(&mut self, create: bool) -> &mut OpenOptions {\n         self.0.create(create); self\n     }\n@@ -264,60 +296,66 @@ impl OpenOptions {\n     /// * Attempting to open a file with access that the user lacks\n     ///   permissions for\n     /// * Filesystem-level errors (full disk, etc)\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsPath + ?Sized>(&self, path: &P) -> io::Result<File> {\n         let path = path.as_path();\n         let inner = try!(fs_imp::File::open(path, &self.0));\n-\n-        // On *BSD systems, we can open a directory as a file and read from\n-        // it: fd=open(\"/tmp\", O_RDONLY); read(fd, buf, N); due to an old\n-        // tradition before the introduction of opendir(3).  We explicitly\n-        // reject it because there are few use cases.\n-        if cfg!(not(any(target_os = \"linux\", target_os = \"android\"))) &&\n-           try!(inner.file_attr()).is_dir() {\n-            Err(Error::new(ErrorKind::InvalidInput, \"is a directory\", None))\n-        } else {\n-            Ok(File { path: path.to_path_buf(), inner: inner })\n-        }\n+        Ok(File { path: path.to_path_buf(), inner: inner })\n     }\n }\n+\n impl AsInnerMut<fs_imp::OpenOptions> for OpenOptions {\n     fn as_inner_mut(&mut self) -> &mut fs_imp::OpenOptions { &mut self.0 }\n }\n \n impl Metadata {\n     /// Returns whether this metadata is for a directory.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_dir(&self) -> bool { self.0.is_dir() }\n \n     /// Returns whether this metadata is for a regular file.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_file(&self) -> bool { self.0.is_file() }\n \n     /// Returns the size of the file, in bytes, this metadata is for.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> u64 { self.0.size() }\n \n     /// Returns the permissions of the file this metadata is for.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn permissions(&self) -> Permissions {\n         Permissions(self.0.perm())\n     }\n \n     /// Returns the most recent access time for a file.\n     ///\n     /// The return value is in milliseconds since the epoch.\n+    #[unstable(feature = \"fs_time\",\n+               reason = \"the return type of u64 is not quite appropriate for \\\n+                         this method and may change if the standard library \\\n+                         gains a type to represent a moment in time\")]\n     pub fn accessed(&self) -> u64 { self.0.accessed() }\n \n     /// Returns the most recent modification time for a file.\n     ///\n     /// The return value is in milliseconds since the epoch.\n+    #[unstable(feature = \"fs_time\",\n+               reason = \"the return type of u64 is not quite appropriate for \\\n+                         this method and may change if the standard library \\\n+                         gains a type to represent a moment in time\")]\n     pub fn modified(&self) -> u64 { self.0.modified() }\n }\n \n impl Permissions {\n     /// Returns whether these permissions describe a readonly file.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn readonly(&self) -> bool { self.0.readonly() }\n \n     /// Modify the readonly flag for this set of permissions.\n     ///\n     /// This operation does **not** modify the filesystem. To modify the\n     /// filesystem use the `fs::set_permissions` function.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_readonly(&mut self, readonly: bool) {\n         self.0.set_readonly(readonly)\n     }\n@@ -333,6 +371,7 @@ impl AsInner<fs_imp::FilePermissions> for Permissions {\n     fn as_inner(&self) -> &fs_imp::FilePermissions { &self.0 }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n@@ -341,11 +380,13 @@ impl Iterator for ReadDir {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DirEntry {\n     /// Returns the full path to the file that this entry represents.\n     ///\n     /// The full path is created by joining the original path to `read_dir` or\n     /// `walk_dir` with the filename of this entry.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn path(&self) -> PathBuf { self.0.path() }\n }\n \n@@ -368,31 +409,9 @@ impl DirEntry {\n /// This function will return an error if `path` points to a directory, if the\n /// user lacks permissions to remove the file, or if some other filesystem-level\n /// error occurs.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_file<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n-    let path = path.as_path();\n-    let e = match fs_imp::unlink(path) {\n-        Ok(()) => return Ok(()),\n-        Err(e) => e,\n-    };\n-    if !cfg!(windows) { return Err(e) }\n-\n-    // On unix, a readonly file can be successfully removed. On windows,\n-    // however, it cannot. To keep the two platforms in line with\n-    // respect to their behavior, catch this case on windows, attempt to\n-    // change it to read-write, and then remove the file.\n-    if e.kind() != ErrorKind::PermissionDenied { return Err(e) }\n-\n-    let attr = match metadata(path) { Ok(a) => a, Err(..) => return Err(e) };\n-    let mut perms = attr.permissions();\n-    if !perms.readonly() { return Err(e) }\n-    perms.set_readonly(false);\n-\n-    if set_permissions(path, perms).is_err() { return Err(e) }\n-    if fs_imp::unlink(path).is_ok() { return Ok(()) }\n-\n-    // Oops, try to put things back the way we found it\n-    let _ = set_permissions(path, attr.permissions());\n-    Err(e)\n+    fs_imp::unlink(path.as_path())\n }\n \n /// Given a path, query the file system to get information about a file,\n@@ -418,6 +437,7 @@ pub fn remove_file<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n /// This function will return an error if the user lacks the requisite\n /// permissions to perform a `metadata` call on the given `path` or if there\n /// is no entry in the filesystem at the provided path.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn metadata<P: AsPath + ?Sized>(path: &P) -> io::Result<Metadata> {\n     fs_imp::stat(path.as_path()).map(Metadata)\n }\n@@ -438,6 +458,7 @@ pub fn metadata<P: AsPath + ?Sized>(path: &P) -> io::Result<Metadata> {\n /// the process lacks permissions to view the contents, if `from` and `to`\n /// reside on separate filesystems, or if some other intermittent I/O error\n /// occurs.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn rename<P: AsPath + ?Sized, Q: AsPath + ?Sized>(from: &P, to: &Q)\n                                                       -> io::Result<()> {\n     fs_imp::rename(from.as_path(), to.as_path())\n@@ -468,6 +489,7 @@ pub fn rename<P: AsPath + ?Sized, Q: AsPath + ?Sized>(from: &P, to: &Q)\n /// * The `from` file does not exist\n /// * The current process does not have the permission rights to access\n ///   `from` or write `to`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn copy<P: AsPath + ?Sized, Q: AsPath + ?Sized>(from: &P, to: &Q)\n                                                     -> io::Result<u64> {\n     let from = from.as_path();\n@@ -490,6 +512,7 @@ pub fn copy<P: AsPath + ?Sized, Q: AsPath + ?Sized>(from: &P, to: &Q)\n ///\n /// The `dst` path will be a link pointing to the `src` path. Note that systems\n /// often require these two paths to both be located on the same filesystem.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn hard_link<P: AsPath + ?Sized, Q: AsPath + ?Sized>(src: &P, dst: &Q)\n                                                          -> io::Result<()> {\n     fs_imp::link(src.as_path(), dst.as_path())\n@@ -498,6 +521,7 @@ pub fn hard_link<P: AsPath + ?Sized, Q: AsPath + ?Sized>(src: &P, dst: &Q)\n /// Creates a new soft link on the filesystem.\n ///\n /// The `dst` path will be a soft link pointing to the `src` path.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn soft_link<P: AsPath + ?Sized, Q: AsPath + ?Sized>(src: &P, dst: &Q)\n                                                          -> io::Result<()> {\n     fs_imp::symlink(src.as_path(), dst.as_path())\n@@ -510,6 +534,7 @@ pub fn soft_link<P: AsPath + ?Sized, Q: AsPath + ?Sized>(src: &P, dst: &Q)\n /// This function will return an error on failure. Failure conditions include\n /// reading a file that does not exist or reading a file that is not a soft\n /// link.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn read_link<P: AsPath + ?Sized>(path: &P) -> io::Result<PathBuf> {\n     fs_imp::readlink(path.as_path())\n }\n@@ -528,6 +553,7 @@ pub fn read_link<P: AsPath + ?Sized>(path: &P) -> io::Result<PathBuf> {\n ///\n /// This function will return an error if the user lacks permissions to make a\n /// new directory at the provided `path`, or if the directory already exists.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn create_dir<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n     fs_imp::mkdir(path.as_path())\n }\n@@ -541,6 +567,7 @@ pub fn create_dir<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n /// does not already exist and it could not be created otherwise. The specific\n /// error conditions for when a directory is being created (after it is\n /// determined to not exist) are outlined by `fs::create_dir`.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn create_dir_all<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n     let path = path.as_path();\n     if path.is_dir() { return Ok(()) }\n@@ -572,6 +599,7 @@ pub fn create_dir_all<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n ///\n /// This function will return an error if the user lacks permissions to remove\n /// the directory at the provided `path`, or if the directory isn't empty.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n     fs_imp::rmdir(path.as_path())\n }\n@@ -585,6 +613,7 @@ pub fn remove_dir<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n /// # Errors\n ///\n /// See `file::remove_file` and `fs::remove_dir`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir_all<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n     let path = path.as_path();\n     for child in try!(read_dir(path)) {\n@@ -637,6 +666,7 @@ pub fn remove_dir_all<P: AsPath + ?Sized>(path: &P) -> io::Result<()> {\n /// This function will return an error if the provided `path` doesn't exist, if\n /// the process lacks permissions to view the contents or if the `path` points\n /// at a non-directory file\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn read_dir<P: AsPath + ?Sized>(path: &P) -> io::Result<ReadDir> {\n     fs_imp::readdir(path.as_path()).map(ReadDir)\n }\n@@ -649,11 +679,16 @@ pub fn read_dir<P: AsPath + ?Sized>(path: &P) -> io::Result<ReadDir> {\n ///\n /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n /// be encountered after an iterator is initially constructed.\n+#[unstable(feature = \"fs_walk\",\n+           reason = \"the precise semantics and defaults for a recursive walk \\\n+                     may change and this may end up accounting for files such \\\n+                     as symlinks differently\")]\n pub fn walk_dir<P: AsPath + ?Sized>(path: &P) -> io::Result<WalkDir> {\n     let start = try!(read_dir(path));\n     Ok(WalkDir { cur: Some(start), stack: Vec::new() })\n }\n \n+#[unstable(feature = \"fs_walk\")]\n impl Iterator for WalkDir {\n     type Item = io::Result<DirEntry>;\n \n@@ -683,6 +718,9 @@ impl Iterator for WalkDir {\n }\n \n /// Utility methods for paths.\n+#[unstable(feature = \"path_ext\",\n+           reason = \"the precise set of methods exposed on this trait may \\\n+                     change and some methods may be removed\")]\n pub trait PathExt {\n     /// Get information on the file, directory, etc at this path.\n     ///\n@@ -727,6 +765,10 @@ impl PathExt for Path {\n /// The file at the path specified will have its last access time set to\n /// `atime` and its modification time set to `mtime`. The times specified should\n /// be in milliseconds.\n+#[unstable(feature = \"fs_time\",\n+           reason = \"the argument type of u64 is not quite appropriate for \\\n+                     this function and may change if the standard library \\\n+                     gains a type to represent a moment in time\")]\n pub fn set_file_times<P: AsPath + ?Sized>(path: &P, accessed: u64,\n                                           modified: u64) -> io::Result<()> {\n     fs_imp::utimes(path.as_path(), accessed, modified)\n@@ -752,6 +794,10 @@ pub fn set_file_times<P: AsPath + ?Sized>(path: &P, accessed: u64,\n /// This function will return an error if the provided `path` doesn't exist, if\n /// the process lacks permissions to change the attributes of the file, or if\n /// some other I/O error is encountered.\n+#[unstable(feature = \"fs\",\n+           reason = \"a more granual ability to set specific permissions may \\\n+                     be exposed on the Permissions structure itself and this \\\n+                     method may not always exist\")]\n pub fn set_permissions<P: AsPath + ?Sized>(path: &P, perm: Permissions)\n                                            -> io::Result<()> {\n     fs_imp::set_perm(path.as_path(), perm.0)\n@@ -1267,6 +1313,8 @@ mod tests {\n         check!(fs::set_permissions(&input, p));\n         check!(fs::copy(&input, &out));\n         assert!(check!(out.metadata()).permissions().readonly());\n+        check!(fs::set_permissions(&input, attr.permissions()));\n+        check!(fs::set_permissions(&out, attr.permissions()));\n     }\n \n     #[cfg(not(windows))] // FIXME(#10264) operation not permitted?\n@@ -1350,10 +1398,13 @@ mod tests {\n         let attr = check!(fs::metadata(&file));\n         assert!(attr.permissions().readonly());\n \n-        match fs::set_permissions(&tmpdir.join(\"foo\"), p) {\n-            Ok(..) => panic!(\"wanted a panic\"),\n+        match fs::set_permissions(&tmpdir.join(\"foo\"), p.clone()) {\n+            Ok(..) => panic!(\"wanted an error\"),\n             Err(..) => {}\n         }\n+\n+        p.set_readonly(false);\n+        check!(fs::set_permissions(&file, p));\n     }\n \n     #[test]\n@@ -1506,6 +1557,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg(not(windows))]\n     fn unlink_readonly() {\n         let tmpdir = tmpdir();\n         let path = tmpdir.join(\"file\");"}, {"sha": "c1da77a6668f51b513ab79d7428a87aa1bcebd3d", "filename": "src/libstd/fs/tempdir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Ffs%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Ffs%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Ftempdir.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n #![unstable(feature = \"tempdir\", reason = \"needs an RFC before stabilization\")]\n+#![deprecated(since = \"1.0.0\",\n+              reason = \"use the `tempdir` crate from crates.io instead\")]\n+#![allow(deprecated)]\n \n use prelude::v1::*;\n "}, {"sha": "2445f5a7a40403e8c7f15190953b70e48926e77d", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_copy_implementations)]\n-\n use prelude::v1::*;\n use io::prelude::*;\n \n@@ -32,33 +30,40 @@ use slice;\n /// Implementations of the I/O traits for `Cursor<T>` are not currently generic\n /// over `T` itself. Instead, specific implementations are provided for various\n /// in-memory buffer types like `Vec<u8>` and `&[u8]`.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Cursor<T> {\n     inner: T,\n     pos: u64,\n }\n \n impl<T> Cursor<T> {\n     /// Create a new cursor wrapping the provided underlying I/O object.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: T) -> Cursor<T> {\n         Cursor { pos: 0, inner: inner }\n     }\n \n     /// Consume this cursor, returning the underlying value.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> T { self.inner }\n \n     /// Get a reference to the underlying value in this cursor.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &T { &self.inner }\n \n     /// Get a mutable reference to the underlying value in this cursor.\n     ///\n     /// Care should be taken to avoid modifying the internal I/O state of the\n     /// underlying value as it may corrupt this cursor's position.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut T { &mut self.inner }\n \n     /// Returns the current value of this cursor\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn position(&self) -> u64 { self.pos }\n \n     /// Sets the value of this cursor\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_position(&mut self, pos: u64) { self.pos = pos; }\n }\n \n@@ -83,8 +88,11 @@ macro_rules! seek {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> io::Seek for Cursor<&'a [u8]> { seek!(); }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> io::Seek for Cursor<&'a mut [u8]> { seek!(); }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl io::Seek for Cursor<Vec<u8>> { seek!(); }\n \n macro_rules! read {\n@@ -97,8 +105,11 @@ macro_rules! read {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for Cursor<&'a [u8]> { read!(); }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for Cursor<&'a mut [u8]> { read!(); }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Cursor<Vec<u8>> { read!(); }\n \n macro_rules! buffer {\n@@ -111,10 +122,14 @@ macro_rules! buffer {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for Cursor<&'a [u8]> { buffer!(); }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for Cursor<&'a mut [u8]> { buffer!(); }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for Cursor<Vec<u8>> { buffer!(); }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let pos = cmp::min(self.pos, self.inner.len() as u64);\n@@ -125,6 +140,7 @@ impl<'a> Write for Cursor<&'a mut [u8]> {\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Cursor<Vec<u8>> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         // Make sure the internal buffer is as least as big as where we"}, {"sha": "c968415d3efdc5670cdee690fb3cea0c6bf60032", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -22,57 +22,88 @@ use vec::Vec;\n // =============================================================================\n // Forwarding implementations\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, R: Read + ?Sized> Read for &'a mut R {\n-    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { (**self).read(buf) }\n-\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<()> { (**self).read_to_end(buf) }\n-\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        (**self).read(buf)\n+    }\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<()> {\n+        (**self).read_to_end(buf)\n+    }\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<()> {\n         (**self).read_to_string(buf)\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, W: Write + ?Sized> Write for &'a mut W {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n-\n-    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> { (**self).write_all(buf) }\n-\n-    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> { (**self).write_fmt(fmt) }\n-\n     fn flush(&mut self) -> io::Result<()> { (**self).flush() }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        (**self).write_all(buf)\n+    }\n+    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n+        (**self).write_fmt(fmt)\n+    }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, S: Seek + ?Sized> Seek for &'a mut S {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, B: BufRead + ?Sized> BufRead for &'a mut B {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n-\n     fn consume(&mut self, amt: usize) { (**self).consume(amt) }\n-\n     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<()> {\n         (**self).read_until(byte, buf)\n     }\n-\n-    fn read_line(&mut self, buf: &mut String) -> io::Result<()> { (**self).read_line(buf) }\n+    fn read_line(&mut self, buf: &mut String) -> io::Result<()> {\n+        (**self).read_line(buf)\n+    }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R: Read + ?Sized> Read for Box<R> {\n-    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { (**self).read(buf) }\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        (**self).read(buf)\n+    }\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<()> {\n+        (**self).read_to_end(buf)\n+    }\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<()> {\n+        (**self).read_to_string(buf)\n+    }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write + ?Sized> Write for Box<W> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n     fn flush(&mut self) -> io::Result<()> { (**self).flush() }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        (**self).write_all(buf)\n+    }\n+    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n+        (**self).write_fmt(fmt)\n+    }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<S: Seek + ?Sized> Seek for Box<S> {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: BufRead + ?Sized> BufRead for Box<B> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n     fn consume(&mut self, amt: usize) { (**self).consume(amt) }\n+    fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<()> {\n+        (**self).read_until(byte, buf)\n+    }\n+    fn read_line(&mut self, buf: &mut String) -> io::Result<()> {\n+        (**self).read_line(buf)\n+    }\n }\n \n // =============================================================================\n // In-memory buffer implementations\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for &'a [u8] {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let amt = cmp::min(buf.len(), self.len());\n@@ -83,11 +114,13 @@ impl<'a> Read for &'a [u8] {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for &'a [u8] {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(*self) }\n     fn consume(&mut self, amt: usize) { *self = &self[amt..]; }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for &'a mut [u8] {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let amt = cmp::min(data.len(), self.len());\n@@ -108,14 +141,15 @@ impl<'a> Write for &'a mut [u8] {\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Vec<u8> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.push_all(buf);\n         Ok(buf.len())\n     }\n \n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n-        try!(self.write(buf));\n+        self.push_all(buf);\n         Ok(())\n     }\n "}, {"sha": "9137068076b46818d30eb55a5d5cf77d5a0845a9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -237,11 +237,13 @@ pub trait Read {\n \n /// Extension methods for all instances of `Read`, typically imported through\n /// `std::io::prelude::*`.\n+#[unstable(feature = \"io\", reason = \"may merge into the Read trait\")]\n pub trait ReadExt: Read + Sized {\n     /// Create a \"by reference\" adaptor for this instance of `Read`.\n     ///\n     /// The returned adaptor also implements `Read` and will simply borrow this\n     /// current reader.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self { self }\n \n     /// Transform this `Read` instance to an `Iterator` over its bytes.\n@@ -250,6 +252,7 @@ pub trait ReadExt: Read + Sized {\n     /// R::Err>`.  The yielded item is `Ok` if a byte was successfully read and\n     /// `Err` otherwise for I/O errors. EOF is mapped to returning `None` from\n     /// this iterator.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bytes(self) -> Bytes<Self> {\n         Bytes { inner: self }\n     }\n@@ -264,6 +267,9 @@ pub trait ReadExt: Read + Sized {\n     ///\n     /// Currently this adaptor will discard intermediate data read, and should\n     /// be avoided if this is not desired.\n+    #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n+                                         of where errors happen is currently \\\n+                                         unclear and may change\")]\n     fn chars(self) -> Chars<Self> {\n         Chars { inner: self }\n     }\n@@ -273,6 +279,7 @@ pub trait ReadExt: Read + Sized {\n     /// The returned `Read` instance will first read all bytes from this object\n     /// until EOF is encountered. Afterwards the output is equivalent to the\n     /// output of `next`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn chain<R: Read>(self, next: R) -> Chain<Self, R> {\n         Chain { first: self, second: next, done_first: false }\n     }\n@@ -283,6 +290,7 @@ pub trait ReadExt: Read + Sized {\n     /// `limit` bytes, after which it will always return EOF (`Ok(0)`). Any\n     /// read errors will not count towards the number of bytes read and future\n     /// calls to `read` may succeed.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn take(self, limit: u64) -> Take<Self> {\n         Take { inner: self, limit: limit }\n     }\n@@ -293,6 +301,9 @@ pub trait ReadExt: Read + Sized {\n     /// Whenever the returned `Read` instance is read it will write the read\n     /// data to `out`. The current semantics of this implementation imply that\n     /// a `write` error will not report how much data was initially read.\n+    #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n+                                         of where errors happen is currently \\\n+                                         unclear and may change\")]\n     fn tee<W: Write>(self, out: W) -> Tee<Self, W> {\n         Tee { reader: self, writer: out }\n     }\n@@ -415,11 +426,13 @@ pub trait Write {\n \n /// Extension methods for all instances of `Write`, typically imported through\n /// `std::io::prelude::*`.\n+#[unstable(feature = \"io\", reason = \"may merge into the Read trait\")]\n pub trait WriteExt: Write + Sized {\n     /// Create a \"by reference\" adaptor for this instance of `Write`.\n     ///\n     /// The returned adaptor also implements `Write` and will simply borrow this\n     /// current writer.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self { self }\n \n     /// Creates a new writer which will write all data to both this writer and\n@@ -430,11 +443,15 @@ pub trait WriteExt: Write + Sized {\n     /// implementation do not precisely track where errors happen. For example\n     /// an error on the second call to `write` will not report that the first\n     /// call to `write` succeeded.\n+    #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n+                                         of where errors happen is currently \\\n+                                         unclear and may change\")]\n     fn broadcast<W: Write>(self, other: W) -> Broadcast<Self, W> {\n         Broadcast { first: self, second: other }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Write> WriteExt for T {}\n \n /// An object implementing `Seek` internally has some form of cursor which can\n@@ -592,6 +609,8 @@ pub trait BufReadExt: BufRead + Sized {\n     ///\n     /// This function will yield errors whenever `read_until` would have also\n     /// yielded an error.\n+    #[unstable(feature = \"io\", reason = \"may be renamed to not conflict with \\\n+                                         SliceExt::split\")]\n     fn split(self, byte: u8) -> Split<Self> {\n         Split { buf: self, delim: byte }\n     }\n@@ -604,11 +623,13 @@ pub trait BufReadExt: BufRead + Sized {\n     ///\n     /// This function will yield errors whenever `read_string` would have also\n     /// yielded an error.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn lines(self) -> Lines<Self> {\n         Lines { buf: self }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: BufRead> BufReadExt for T {}\n \n /// A `Write` adaptor which will write data to multiple locations.\n@@ -635,12 +656,14 @@ impl<T: Write, U: Write> Write for Broadcast<T, U> {\n /// Adaptor to chain together two instances of `Read`.\n ///\n /// For more information, see `ReadExt::chain`.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n     second: U,\n     done_first: bool,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Read, U: Read> Read for Chain<T, U> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         if !self.done_first {\n@@ -656,11 +679,13 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n /// Reader adaptor which limits the bytes read from an underlying reader.\n ///\n /// For more information, see `ReadExt::take`.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Take<T> {\n     inner: T,\n     limit: u64,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Take<T> {\n     /// Returns the number of bytes that can be read before this instance will\n     /// return EOF.\n@@ -669,9 +694,11 @@ impl<T> Take<T> {\n     ///\n     /// This instance may reach EOF after reading fewer bytes than indicated by\n     /// this method if the underlying `Read` instance reaches EOF.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn limit(&self) -> u64 { self.limit }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Read> Read for Take<T> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         // Don't call into inner reader at all at EOF because it may still block\n@@ -686,6 +713,7 @@ impl<T: Read> Read for Take<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: BufRead> BufRead for Take<T> {\n     fn fill_buf(&mut self) -> Result<&[u8]> {\n         let buf = try!(self.inner.fill_buf());\n@@ -721,10 +749,12 @@ impl<R: Read, W: Write> Read for Tee<R, W> {\n /// A bridge from implementations of `Read` to an `Iterator` of `u8`.\n ///\n /// See `ReadExt::bytes` for more information.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Bytes<R> {\n     inner: R,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R: Read> Iterator for Bytes<R> {\n     type Item = Result<u8>;\n \n@@ -845,10 +875,12 @@ impl<B: BufRead> Iterator for Split<B> {\n /// byte.\n ///\n /// See `BufReadExt::lines` for more information.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Lines<B> {\n     buf: B,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: BufRead> Iterator for Lines<B> {\n     type Item = Result<String>;\n "}, {"sha": "4027f741654b66bbbf57c9644f06e66bb7866b30", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -157,9 +157,6 @@ impl Read for Stdin {\n \n impl<'a> Read for StdinLock<'a> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        // Flush stdout so that weird issues like a print!'d prompt not being\n-        // shown until after the user hits enter.\n-        drop(stdout().flush());\n         self.inner.read(buf)\n     }\n }"}, {"sha": "20426025257c3761a8bba56c4281f5093ac49ccb", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -12,7 +12,7 @@\n \n use prelude::v1::*;\n \n-use io::{self, Read, Write, ErrorKind};\n+use io::{self, Read, Write, ErrorKind, BufRead};\n \n /// Copies the entire contents of a reader into a writer.\n ///\n@@ -27,6 +27,7 @@ use io::{self, Read, Write, ErrorKind};\n /// This function will return an error immediately if any call to `read` or\n /// `write` returns an error. All instances of `ErrorKind::Interrupted` are\n /// handled by this function and the underlying operation is retried.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn copy<R: Read, W: Write>(r: &mut R, w: &mut W) -> io::Result<u64> {\n     let mut buf = [0; super::DEFAULT_BUF_SIZE];\n     let mut written = 0;\n@@ -43,26 +44,37 @@ pub fn copy<R: Read, W: Write>(r: &mut R, w: &mut W) -> io::Result<u64> {\n }\n \n /// A reader which is always at EOF.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Empty { _priv: () }\n \n /// Creates an instance of an empty reader.\n ///\n /// All reads from the returned reader will return `Ok(0)`.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn empty() -> Empty { Empty { _priv: () } }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Empty {\n     fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl BufRead for Empty {\n+    fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(&[]) }\n+    fn consume(&mut self, _n: usize) {}\n+}\n \n /// A reader which infinitely yields one byte.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Repeat { byte: u8 }\n \n /// Creates an instance of a reader that infinitely repeats one byte.\n ///\n /// All reads from this reader will succeed by filling the specified buffer with\n /// the given byte.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn repeat(byte: u8) -> Repeat { Repeat { byte: byte } }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Repeat {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         for slot in buf.iter_mut() {\n@@ -73,14 +85,17 @@ impl Read for Repeat {\n }\n \n /// A writer which will move data into the void.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Sink { _priv: () }\n \n /// Creates an instance of a writer which will successfully consume all data.\n ///\n /// All calls to `write` on the returned instance will return `Ok(buf.len())`\n /// and the contents of the buffer will not be inspected.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn sink() -> Sink { Sink { _priv: () } }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Sink {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }"}, {"sha": "ce14967090e0fb40c8208fc65b9212722873c189", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -94,7 +94,8 @@\n //! to all code by default. [`macros`](macros/index.html) contains\n //! all the standard macros, such as `assert!`, `panic!`, `println!`,\n //! and `format!`, also available to all Rust code.\n-\n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"std\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![staged_api]"}, {"sha": "101aae3eb248b161a70f9744ca1137129194a874", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -293,7 +293,7 @@ impl ToSocketAddrs for str {\n         }\n \n         // split the string by ':' and convert the second part to u16\n-        let mut parts_iter = self.rsplitn(2, ':');\n+        let mut parts_iter = self.rsplitn(1, ':');\n         let port_str = try_opt!(parts_iter.next(), \"invalid socket address\");\n         let host = try_opt!(parts_iter.next(), \"invalid socket address\");\n         let port: u16 = try_opt!(port_str.parse().ok(), \"invalid port value\");\n@@ -590,4 +590,10 @@ mod tests {\n         let a = SocketAddr::new(IpAddr::new_v4(127, 0, 0, 1), 23924);\n         assert!(tsa(\"localhost:23924\").unwrap().contains(&a));\n     }\n+\n+    #[test]\n+    #[cfg(not(windows))]\n+    fn to_socket_addr_str_bad() {\n+        assert!(tsa(\"1200::AB00:1234::2552:7777:1313:34300\").is_err());\n+    }\n }"}, {"sha": "fd723ea13e9629e8f94c9c0bb6933430d201a5e6", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -233,13 +233,13 @@ mod tests {\n         }\n     }\n \n-    // FIXME #11530 this fails on android because tests are run as root\n-    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n     #[test]\n     fn bind_error() {\n-        match TcpListener::bind(\"0.0.0.0:1\") {\n+        match TcpListener::bind(\"1.1.1.1:9999\") {\n             Ok(..) => panic!(),\n-            Err(e) => assert_eq!(e.kind(), ErrorKind::PermissionDenied),\n+            Err(e) =>\n+                // EADDRNOTAVAIL is mapped to ConnectionRefused\n+                assert_eq!(e.kind(), ErrorKind::ConnectionRefused),\n         }\n     }\n "}, {"sha": "a3567290b0e16395a83003ed874f3301bb469e50", "filename": "src/libstd/old_io/net/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fmod.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -10,6 +10,10 @@\n \n //! Networking I/O\n \n+#![deprecated(since = \"1.0.0\",\n+              reason = \"replaced with new I/O primitives in `std::net`\")]\n+#![unstable(feature = \"old_io\")]\n+\n use old_io::{IoError, IoResult, InvalidInput};\n use ops::FnMut;\n use option::Option::None;"}, {"sha": "2ecaf515f081b226a341af1af38b205e20ece099", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -19,6 +19,12 @@\n //! instances as clients.\n \n #![allow(missing_docs)]\n+#![deprecated(since = \"1.0.0\",\n+              reason = \"will be removed to be reintroduced at a later date; \\\n+                        in the meantime consider using the `unix_socket` crate \\\n+                        for unix sockets; there is currently no replacement \\\n+                        for named pipes\")]\n+#![unstable(feature = \"old_io\")]\n \n use prelude::v1::*;\n "}, {"sha": "e02e863516ab1ebdddcea006f24af713076c48ae", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -11,6 +11,9 @@\n //! Bindings for executing child processes\n \n #![allow(non_upper_case_globals)]\n+#![unstable(feature = \"old_io\")]\n+#![deprecated(since = \"1.0.0\",\n+              reason = \"replaced with the std::process module\")]\n \n pub use self::StdioContainer::*;\n pub use self::ProcessExit::*;"}, {"sha": "4faf8af57b4c4392da158935f543aa28436e15ef", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -10,20 +10,28 @@\n \n //! Utility implementations of Reader and Writer\n \n+#![allow(deprecated)]\n+\n use prelude::v1::*;\n use cmp;\n use old_io;\n use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n #[derive(Debug)]\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Take\")]\n+#[unstable(feature = \"old_io\")]\n pub struct LimitReader<R> {\n     limit: uint,\n     inner: R\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Take\")]\n+#[unstable(feature = \"old_io\")]\n impl<R: Reader> LimitReader<R> {\n     /// Creates a new `LimitReader`\n+    #[deprecated(since = \"1.0.0\", reason = \"use std::io's take method instead\")]\n+    #[unstable(feature = \"old_io\")]\n     pub fn new(r: R, limit: uint) -> LimitReader<R> {\n         LimitReader { limit: limit, inner: r }\n     }\n@@ -41,6 +49,8 @@ impl<R: Reader> LimitReader<R> {\n     pub fn limit(&self) -> uint { self.limit }\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io's take method instead\")]\n+#[unstable(feature = \"old_io\")]\n impl<R: Reader> Reader for LimitReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> old_io::IoResult<uint> {\n         if self.limit == 0 {\n@@ -57,6 +67,8 @@ impl<R: Reader> Reader for LimitReader<R> {\n     }\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io's take method instead\")]\n+#[unstable(feature = \"old_io\")]\n impl<R: Buffer> Buffer for LimitReader<R> {\n     fn fill_buf<'a>(&'a mut self) -> old_io::IoResult<&'a [u8]> {\n         let amt = try!(self.inner.fill_buf());\n@@ -79,17 +91,25 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n #[derive(Copy, Debug)]\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::sink() instead\")]\n+#[unstable(feature = \"old_io\")]\n pub struct NullWriter;\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::sink() instead\")]\n+#[unstable(feature = \"old_io\")]\n impl Writer for NullWriter {\n     #[inline]\n     fn write_all(&mut self, _buf: &[u8]) -> old_io::IoResult<()> { Ok(()) }\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n #[derive(Copy, Debug)]\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::repeat(0) instead\")]\n+#[unstable(feature = \"old_io\")]\n pub struct ZeroReader;\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::repeat(0) instead\")]\n+#[unstable(feature = \"old_io\")]\n impl Reader for ZeroReader {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> old_io::IoResult<uint> {\n@@ -98,6 +118,8 @@ impl Reader for ZeroReader {\n     }\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::repeat(0) instead\")]\n+#[unstable(feature = \"old_io\")]\n impl Buffer for ZeroReader {\n     fn fill_buf<'a>(&'a mut self) -> old_io::IoResult<&'a [u8]> {\n         static DATA: [u8; 64] = [0; 64];\n@@ -109,15 +131,21 @@ impl Buffer for ZeroReader {\n \n /// A `Reader` which is always at EOF, like /dev/null.\n #[derive(Copy, Debug)]\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::empty() instead\")]\n+#[unstable(feature = \"old_io\")]\n pub struct NullReader;\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::empty() instead\")]\n+#[unstable(feature = \"old_io\")]\n impl Reader for NullReader {\n     #[inline]\n     fn read(&mut self, _buf: &mut [u8]) -> old_io::IoResult<uint> {\n         Err(old_io::standard_error(old_io::EndOfFile))\n     }\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::empty() instead\")]\n+#[unstable(feature = \"old_io\")]\n impl Buffer for NullReader {\n     fn fill_buf<'a>(&'a mut self) -> old_io::IoResult<&'a [u8]> {\n         Err(old_io::standard_error(old_io::EndOfFile))\n@@ -130,17 +158,23 @@ impl Buffer for NullReader {\n /// The `Writer`s are delegated to in order. If any `Writer` returns an error,\n /// that error is returned immediately and remaining `Writer`s are not called.\n #[derive(Debug)]\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Broadcast instead\")]\n+#[unstable(feature = \"old_io\")]\n pub struct MultiWriter<W> {\n     writers: Vec<W>\n }\n \n impl<W> MultiWriter<W> where W: Writer {\n     /// Creates a new `MultiWriter`\n+    #[deprecated(since = \"1.0.0\", reason = \"use std::io's broadcast method instead\")]\n+    #[unstable(feature = \"old_io\")]\n     pub fn new(writers: Vec<W>) -> MultiWriter<W> {\n         MultiWriter { writers: writers }\n     }\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Broadcast instead\")]\n+#[unstable(feature = \"old_io\")]\n impl<W> Writer for MultiWriter<W> where W: Writer {\n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> old_io::IoResult<()> {\n@@ -162,19 +196,25 @@ impl<W> Writer for MultiWriter<W> where W: Writer {\n /// A `Reader` which chains input from multiple `Reader`s, reading each to\n /// completion before moving onto the next.\n #[derive(Clone, Debug)]\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Chain instead\")]\n+#[unstable(feature = \"old_io\")]\n pub struct ChainedReader<I, R> {\n     readers: I,\n     cur_reader: Option<R>,\n }\n \n impl<R: Reader, I: Iterator<Item=R>> ChainedReader<I, R> {\n     /// Creates a new `ChainedReader`\n+    #[deprecated(since = \"1.0.0\", reason = \"use std::io's chain method instead\")]\n+    #[unstable(feature = \"old_io\")]\n     pub fn new(mut readers: I) -> ChainedReader<I, R> {\n         let r = readers.next();\n         ChainedReader { readers: readers, cur_reader: r }\n     }\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Chain instead\")]\n+#[unstable(feature = \"old_io\")]\n impl<R: Reader, I: Iterator<Item=R>> Reader for ChainedReader<I, R> {\n     fn read(&mut self, buf: &mut [u8]) -> old_io::IoResult<uint> {\n         loop {\n@@ -201,13 +241,19 @@ impl<R: Reader, I: Iterator<Item=R>> Reader for ChainedReader<I, R> {\n /// A `Reader` which forwards input from another `Reader`, passing it along to\n /// a `Writer` as well. Similar to the `tee(1)` command.\n #[derive(Debug)]\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Tee instead\")]\n+#[unstable(feature = \"old_io\")]\n pub struct TeeReader<R, W> {\n     reader: R,\n     writer: W,\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Tee instead\")]\n+#[unstable(feature = \"old_io\")]\n impl<R: Reader, W: Writer> TeeReader<R, W> {\n     /// Creates a new `TeeReader`\n+    #[deprecated(since = \"1.0.0\", reason = \"use std::io's tee method instead\")]\n+    #[unstable(feature = \"old_io\")]\n     pub fn new(r: R, w: W) -> TeeReader<R, W> {\n         TeeReader { reader: r, writer: w }\n     }\n@@ -220,6 +266,8 @@ impl<R: Reader, W: Writer> TeeReader<R, W> {\n     }\n }\n \n+#[deprecated(since = \"1.0.0\", reason = \"use std::io::Tee instead\")]\n+#[unstable(feature = \"old_io\")]\n impl<R: Reader, W: Writer> Reader for TeeReader<R, W> {\n     fn read(&mut self, buf: &mut [u8]) -> old_io::IoResult<uint> {\n         self.reader.read(buf).and_then(|len| {\n@@ -229,6 +277,8 @@ impl<R: Reader, W: Writer> Reader for TeeReader<R, W> {\n }\n \n /// Copies all data from a `Reader` to a `Writer`.\n+#[deprecated(since = \"1.0.0\", reason = \"use std::io's copy function instead\")]\n+#[unstable(feature = \"old_io\")]\n pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> old_io::IoResult<()> {\n     let mut buf = [0; super::DEFAULT_BUF_SIZE];\n     loop {"}, {"sha": "ad8e17fed24c2f3e18640abb81cde279f12cbaea", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -90,7 +90,7 @@\n //! * Repeated separators are ignored: `a/b` and `a//b` both have components `a`\n //!   and `b`.\n //!\n-//! * Paths ending in a separator are treated as if they has a current directory\n+//! * Paths ending in a separator are treated as if they have a current directory\n //!   component at the end (or, in verbatim paths, an empty component).  For\n //!   example, while `a/b` has components `a` and `b`, the paths `a/b/` and\n //!   `a/b/.` both have components `a`, `b`, and `.` (current directory).  The\n@@ -872,10 +872,10 @@ impl PathBuf {\n \n         // `path` is a pure relative path\n         } else if need_sep {\n-            self.inner.push_os_str(OsStr::from_str(MAIN_SEP_STR));\n+            self.inner.push(MAIN_SEP_STR);\n         }\n \n-        self.inner.push_os_str(path.as_os_str());\n+        self.inner.push(path);\n     }\n \n     /// Truncate `self` to `self.parent()`.\n@@ -937,8 +937,8 @@ impl PathBuf {\n \n         let extension = extension.as_os_str();\n         if os_str_as_u8_slice(extension).len() > 0 {\n-            stem.push_os_str(OsStr::from_str(\".\"));\n-            stem.push_os_str(extension.as_os_str());\n+            stem.push(\".\");\n+            stem.push(extension);\n         }\n         self.set_file_name(&stem);\n \n@@ -1193,7 +1193,7 @@ impl Path {\n         iter_after(self.components(), base.as_path().components()).is_some()\n     }\n \n-    /// Determines whether `base` is a suffix of `self`.\n+    /// Determines whether `child` is a suffix of `self`.\n     pub fn ends_with<P: ?Sized>(&self, child: &P) -> bool where P: AsPath {\n         iter_after(self.components().rev(), child.as_path().components().rev()).is_some()\n     }"}, {"sha": "344645dfc1a159904c59a03698103a3b2a5b9a31", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use prelude::v1::*;\n use self::SocketStatus::*;\n use self::InAddr::*;"}, {"sha": "ca7f7c4c0ca4446521eb2072efcffe6a7151c2f0", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -73,42 +73,49 @@ impl AsRawFd for old_io::pipe::PipeStream {\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawFd for old_io::net::pipe::UnixStream {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawFd for old_io::net::pipe::UnixListener {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawFd for old_io::net::pipe::UnixAcceptor {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawFd for old_io::net::tcp::TcpStream {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawFd for old_io::net::tcp::TcpListener {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawFd for old_io::net::tcp::TcpAcceptor {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawFd for old_io::net::udp::UdpSocket {\n     fn as_raw_fd(&self) -> Fd {\n         self.as_inner().fd()"}, {"sha": "62a1799de94c938fe0c3ef9f94ef6632323bff86", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use prelude::v1::*;\n use self::Req::*;\n "}, {"sha": "4fcaf504c3da5d7f447c1a933064ad5fe932c89a", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use prelude::v1::*;\n \n use old_io::net::ip;"}, {"sha": "b30aec084392761fbf54326228a9e037efa7f285", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -58,18 +58,21 @@ impl AsRawHandle for old_io::pipe::PipeStream {\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawHandle for old_io::net::pipe::UnixStream {\n     fn as_raw_handle(&self) -> Handle {\n         self.as_inner().handle()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawHandle for old_io::net::pipe::UnixListener {\n     fn as_raw_handle(&self) -> Handle {\n         self.as_inner().handle()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawHandle for old_io::net::pipe::UnixAcceptor {\n     fn as_raw_handle(&self) -> Handle {\n         self.as_inner().handle()\n@@ -81,24 +84,28 @@ pub trait AsRawSocket {\n     fn as_raw_socket(&self) -> Socket;\n }\n \n+#[allow(deprecated)]\n impl AsRawSocket for old_io::net::tcp::TcpStream {\n     fn as_raw_socket(&self) -> Socket {\n         self.as_inner().fd()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawSocket for old_io::net::tcp::TcpListener {\n     fn as_raw_socket(&self) -> Socket {\n         self.as_inner().socket()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawSocket for old_io::net::tcp::TcpAcceptor {\n     fn as_raw_socket(&self) -> Socket {\n         self.as_inner().socket()\n     }\n }\n \n+#[allow(deprecated)]\n impl AsRawSocket for old_io::net::udp::UdpSocket {\n     fn as_raw_socket(&self) -> Socket {\n         self.as_inner().fd()"}, {"sha": "ca3ed54eb036a4b2e55e11235fe21d63086dfbfb", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use prelude::v1::*;\n \n use collections;"}, {"sha": "8547de145f8c40cddbc83a7180562288affd924e", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n use old_io::net::ip;\n use old_io::IoResult;\n use libc;"}, {"sha": "ba3f495cdaced73c40188a8b3abff820fcb08229", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -14,6 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"syntax\"]\n #![unstable(feature = \"rustc_private\")]\n #![staged_api]\n@@ -37,8 +39,8 @@\n #![feature(std_misc)]\n #![feature(unicode)]\n #![feature(path)]\n-#![feature(fs)]\n #![feature(io)]\n+#![feature(path_ext)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "1dad5d0909263885ca6d3302a7a151ce9205e93a", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -38,6 +38,8 @@\n //! [win]: http://msdn.microsoft.com/en-us/library/windows/desktop/ms682010%28v=vs.85%29.aspx\n //! [ti]: https://en.wikipedia.org/wiki/Terminfo\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"term\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `term` library instead\")]\n@@ -52,7 +54,6 @@\n \n #![feature(box_syntax)]\n #![feature(collections)]\n-#![feature(fs)]\n #![feature(int_uint)]\n #![feature(io)]\n #![feature(old_io)]\n@@ -61,6 +62,7 @@\n #![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(unicode)]\n+#![feature(path_ext)]\n #![cfg_attr(windows, feature(libc))]\n \n #[macro_use] extern crate log;"}, {"sha": "44aaeec6145e5bc31a25ac7eadaf1540d6879ca8", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -23,6 +23,8 @@\n // running tests while providing a base that other test frameworks may\n // build off of.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\")]\n #![staged_api]\n@@ -39,7 +41,6 @@\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(path)]\n-#![feature(fs)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(std_misc)]"}, {"sha": "2095b6921c840a437dd428727942e7d01c0dd507", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -20,6 +20,8 @@\n //! provide for basic string-related manipulations. This crate does not\n //! (yet) aim to provide a full set of Unicode tables.\n \n+// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n+#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"unicode\"]\n #![unstable(feature = \"unicode\")]\n #![feature(staged_api)]"}, {"sha": "731773917e09118452152504f0df79da09bd10e4", "filename": "src/rustbook/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbuild.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -11,10 +11,11 @@\n //! Implementation of the `build` subcommand, used to compile a book.\n \n use std::env;\n-use std::fs::{self, File, TempDir};\n+use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufWriter};\n use std::path::{Path, PathBuf};\n+use rustc_back::tempdir::TempDir;\n \n use subcommand::Subcommand;\n use term::Term;"}, {"sha": "8df622b0b5d0c2e58c5b4a984dc0316293d44bf6", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -12,14 +12,14 @@\n \n #![feature(core)]\n #![feature(exit_status)]\n-#![feature(fs)]\n #![feature(io)]\n #![feature(old_io)]\n #![feature(path)]\n #![feature(rustdoc)]\n-#![feature(tempdir)]\n+#![feature(rustc_private)]\n \n extern crate rustdoc;\n+extern crate rustc_back;\n \n use std::env;\n use std::error::Error;"}, {"sha": null, "filename": "src/test/auxiliary/lint_output_format.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_output_format.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": "ff5ac9de8d9443872de7b03f350ba1f0c3652dc4", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::MarkerTrait;\n+\n+unsafe trait Trait: MarkerTrait {\n+//~^ error: traits with default impls (`e.g. unsafe impl Trait for ..`) must have no methods or associated items\n+    type Output;\n+}\n+\n+unsafe impl Trait for .. {}\n+\n+fn call_method<T: Trait>(x: T) {}\n+\n+fn main() {\n+    // ICE\n+    call_method(());\n+}"}, {"sha": "99373a69697ae33f3197f7f36d8bb42a7b369049", "filename": "src/test/compile-fail/issue-23080.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(optin_builtin_traits)]\n+\n+unsafe trait Trait {\n+//~^ error: traits with default impls (`e.g. unsafe impl Trait for ..`) must have no methods or associated items\n+    fn method(&self) {\n+        println!(\"Hello\");\n+    }\n+}\n+\n+unsafe impl Trait for .. {}\n+\n+fn call_method<T: Trait>(x: T) {\n+    x.method();\n+}\n+\n+fn main() {\n+    // ICE\n+    call_method(());\n+}"}, {"sha": "c912d084daa86f1ad4ddf3b09b7f452d6f9f1f58", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that OIBIT checks `T` when it encounters a `PhantomData<T>` field, instead of checking\n+// the `PhantomData<T>` type itself (which almost always implements a \"default\" trait\n+// (`impl Trait for ..`))\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::{MarkerTrait, PhantomData};\n+\n+unsafe trait Zen: MarkerTrait {}\n+\n+unsafe impl Zen for .. {}\n+\n+unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n+\n+struct Guard<'a, T: 'a> {\n+    _marker: PhantomData<&'a T>,\n+}\n+\n+struct Nested<T>(T);\n+\n+fn is_zen<T: Zen>(_: T) {}\n+\n+fn not_sync<T>(x: Guard<T>) {\n+    is_zen(x)  //~ error: the trait `core::marker::Sync` is not implemented for the type `T`\n+}\n+\n+fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n+    is_zen(x)  //~ error: the trait `core::marker::Sync` is not implemented for the type `T`\n+}\n+\n+fn main() {}"}, {"sha": "a7f6a514b96af53082fcc7d33396c0d7c0b25061", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:privacy-tuple-struct.rs\n-// ignore-fast\n \n extern crate \"privacy-tuple-struct\" as other;\n "}, {"sha": null, "filename": "src/test/compile-fail/send-is-not-static-ensures-scoping.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": "24332e31775088b5901b5fa16aa11f78b42359ff", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// This test makes sure that the compiler doesn't crash when trying to assign\n+// debug locations to const-expressions.\n+\n+use std::sync::MUTEX_INIT;\n+use std::cell::UnsafeCell;\n+\n+const CONSTANT: u64 = 3 + 4;\n+\n+struct Struct {\n+    a: isize,\n+    b: usize,\n+}\n+const STRUCT: Struct = Struct { a: 1, b: 2 };\n+\n+struct TupleStruct(u32);\n+const TUPLE_STRUCT: TupleStruct = TupleStruct(4);\n+\n+enum Enum {\n+    Variant1(char),\n+    Variant2 { a: u8 },\n+    Variant3\n+}\n+\n+const VARIANT1: Enum = Enum::Variant1('v');\n+const VARIANT2: Enum = Enum::Variant2 { a: 2 };\n+const VARIANT3: Enum = Enum::Variant3;\n+\n+const STRING: &'static str = \"String\";\n+\n+const VEC: [u32; 8] = [0; 8];\n+\n+const NESTED: (Struct, TupleStruct) = (STRUCT, TUPLE_STRUCT);\n+\n+const UNSAFE_CELL: UnsafeCell<bool> = UnsafeCell { value: false };\n+\n+fn main() {\n+    let mut _constant = CONSTANT;\n+    let mut _struct = STRUCT;\n+    let mut _tuple_struct = TUPLE_STRUCT;\n+    let mut _variant1 = VARIANT1;\n+    let mut _variant2 = VARIANT2;\n+    let mut _variant3 = VARIANT3;\n+    let mut _string = STRING;\n+    let mut _vec = VEC;\n+    let mut _nested = NESTED;\n+    let mut _extern = MUTEX_INIT;\n+    let mut _unsafe_cell = UNSAFE_CELL;\n+}"}, {"sha": "9e73417e7de7400843f334df0fb081849c12c06e", "filename": "src/test/debuginfo/extern-c-fn.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fdebuginfo%2Fextern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Fdebuginfo%2Fextern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fextern-c-fn.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+// gdb-command:run\n+\n+// gdb-command:print s\n+// gdb-check:$1 = [...]\"abcd\"\n+// gdb-command:print len\n+// gdb-check:$2 = 20\n+// gdb-command:print local0\n+// gdb-check:$3 = 19\n+// gdb-command:print local1\n+// gdb-check:$4 = true\n+// gdb-command:print local2\n+// gdb-check:$5 = 20.5\n+\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+// lldb-command:run\n+\n+// lldb-command:print len\n+// lldb-check:[...]$0 = 20\n+// lldb-command:print local0\n+// lldb-check:[...]$1 = 19\n+// lldb-command:print local1\n+// lldb-check:[...]$2 = true\n+// lldb-command:print local2\n+// lldb-check:[...]$3 = 20.5\n+\n+// lldb-command:continue\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn fn_with_c_abi(s: *const u8, len: i32) -> i32 {\n+    let local0 = len - 1;\n+    let local1 = len > 2;\n+    let local2 = (len as f64) + 0.5;\n+\n+    zzz(); // #break\n+\n+    return 0;\n+}\n+\n+fn main() {\n+    unsafe {\n+        fn_with_c_abi(b\"abcd\\0\".as_ptr(), 20);\n+    }\n+}\n+\n+#[inline(never)]\n+fn zzz() {()}"}, {"sha": "cd13b817c2b8c5fc6d7f2ac64257bff0b3b1db6d", "filename": "src/test/run-fail/overflowing-add.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-add.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n+// compile-flags: -C debug-assertions\n \n // (Work around constant-evaluation)\n fn value() -> u8 { 200 }"}, {"sha": "5d2f53962406c5427793320805a0b068ef75c40e", "filename": "src/test/run-fail/overflowing-mul.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n+// compile-flags: -C debug-assertions\n \n // (Work around constant-evaluation)\n fn value() -> u8 { 200 }"}, {"sha": "b089dccbaa52f0c54b18abcb4ec65377ccd0c383", "filename": "src/test/run-fail/overflowing-sub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n+// compile-flags: -C debug-assertions\n \n // (Work around constant-evaluation)\n fn value() -> u8 { 42 }"}, {"sha": "7129756276864302d28843813c3097f7d26587cf", "filename": "src/test/run-make/debug-assertions/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) debug.rs -C debug-assertions=no\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=0\n+\t$(call RUN,debug) bad\n+\t$(RUSTC) debug.rs -C opt-level=1\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=2\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=3\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -O\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs\n+\t$(call RUN,debug) bad\n+\t$(RUSTC) debug.rs -C debug-assertions=yes -O\n+\t$(call RUN,debug) bad\n+\t$(RUSTC) debug.rs -C debug-assertions=yes -C opt-level=1\n+\t$(call RUN,debug) bad"}, {"sha": "a0ccc75afd05b5c6ea9f0029dc69049abd7d444c", "filename": "src/test/run-make/debug-assertions/debug.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(warnings)]\n+\n+use std::env;\n+use std::thread;\n+\n+fn main() {\n+    let should_fail = env::args().nth(1) == Some(\"bad\".to_string());\n+\n+    assert_eq!(thread::spawn(debug_assert_eq).join().is_err(), should_fail);\n+    assert_eq!(thread::spawn(debug_assert).join().is_err(), should_fail);\n+    assert_eq!(thread::spawn(overflow).join().is_err(), should_fail);\n+}\n+\n+fn debug_assert_eq() {\n+    let mut hit1 = false;\n+    let mut hit2 = false;\n+    debug_assert_eq!({ hit1 = true; 1 }, { hit2 = true; 2 });\n+    assert!(!hit1);\n+    assert!(!hit2);\n+}\n+\n+fn debug_assert() {\n+    let mut hit = false;\n+    debug_assert!({ hit = true; false });\n+    assert!(!hit);\n+}\n+\n+fn overflow() {\n+    fn add(a: u8, b: u8) -> u8 { a + b }\n+\n+    add(200u8, 200u8);\n+}"}, {"sha": null, "filename": "src/test/run-make/mismatching-target-triples/bar.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": null, "filename": "src/test/run-make/mismatching-target-triples/foo.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": null, "filename": "src/test/run-make/pretty-expanded-hygiene/input.pp.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": null, "filename": "src/test/run-make/pretty-expanded-hygiene/input.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": null, "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": "1de7520d2b1d04218cf0f5b2c943991ee2a77364", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast doesn't like extern crate\n \n extern crate libc;\n "}, {"sha": "90142350772b82693c6b3b1da58c63513aa62358", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --cfg ndebug\n+// compile-flags: -C debug-assertions=no\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n #[macro_use]"}, {"sha": "b9e08e47b378db61a0913fbd9a5b974deecf0ab1", "filename": "src/test/run-pass/extern-stress.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4d716decb5d9944bc0d79cdc51b03e3af69bc59c/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d716decb5d9944bc0d79cdc51b03e3af69bc59c/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=4d716decb5d9944bc0d79cdc51b03e3af69bc59c", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This creates a bunch of descheduling tasks that run concurrently\n-// while holding onto C stacks\n-\n-extern crate libc;\n-use std::thread::Thread;\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n-    }\n-}\n-\n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        Thread::yield_now();\n-        count(data - 1) + count(data - 1)\n-    }\n-}\n-\n-fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        rustrt::rust_dbg_call(cb, n)\n-    }\n-}\n-\n-pub fn main() {\n-    (0_usize..100).map(|_| {\n-        Thread::scoped(move|| {\n-            assert_eq!(count(5), 16);\n-        })\n-    }).collect::<Vec<_>>();\n-}"}, {"sha": "80428d787f21c5b88b6fb14617e8ba697b794f65", "filename": "src/test/run-pass/extern-yield.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d716decb5d9944bc0d79cdc51b03e3af69bc59c/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d716decb5d9944bc0d79cdc51b03e3af69bc59c/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=4d716decb5d9944bc0d79cdc51b03e3af69bc59c", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern crate libc;\n-use std::thread::Thread;\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn (libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n-    }\n-}\n-\n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        count(data - 1) + count(data - 1)\n-    }\n-}\n-\n-fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        Thread::yield_now();\n-        rustrt::rust_dbg_call(cb, n)\n-    }\n-}\n-\n-pub fn main() {\n-    (0..10_usize).map(|i| {\n-        Thread::scoped(move|| {\n-            let result = count(5);\n-            println!(\"result = {}\", result);\n-            assert_eq!(result, 16);\n-        })\n-    }).collect::<Vec<_>>();\n-}"}, {"sha": "172ece0c4bfd94ccc8bbfe861bf774eb49887187", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast doesn't like extern crate\n \n extern crate libc;\n use std::ffi::CString;"}, {"sha": "03023f032335fafa8f7c57336ba5573c16bedb2c", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast doesn't like extern crate\n \n extern crate libc;\n "}, {"sha": "5ebc4effb3718775e0be521deda499c5568e69c0", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast doesn't like extern crate\n \n extern crate libc;\n "}, {"sha": "196e9748b107317df9cc0e140d0ccedf3979c042", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast doesn't like extern crate\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "6ce226bbecac294a53f6d980981006f158f2b7f6", "filename": "src/test/run-pass/iter-cloned-type-inference.rs", "status": "renamed", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,19 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate libc;\n+// Test to see that the element type of .cloned() can be inferred\n+// properly. Previously this would fail to deduce the type of `sum`.\n \n-extern {\n-    fn rust_get_test_int() -> libc::intptr_t;\n-}\n+#![feature(core)]\n+\n+use std::iter::AdditiveIterator;\n \n-trait A {\n-    fn foo(&self) {\n-        unsafe {\n-            rust_get_test_int();\n-        }\n-    }\n+fn square_sum(v: &[i64]) -> i64 {\n+    let sum = v.iter().cloned().sum();\n+    sum * sum\n }\n \n-pub fn main() {\n+fn main() {\n+    assert_eq!(36, square_sum(&[1,2,3]));\n }", "previous_filename": "src/test/run-pass/lint-cstack.rs"}, {"sha": "dfc9272827066c517138209ab1851338af90e681", "filename": "src/test/run-pass/logging-enabled-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:--cfg ndebug\n+// compile-flags:-C debug-assertions=no\n // exec-env:RUST_LOG=logging-enabled-debug=debug\n \n #[macro_use]"}, {"sha": "82a155b117301980bb74b123fa524a4cc74c37e7", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-windows\n // exec-env:RUST_LOG=debug\n+// compile-flags:-C debug-assertions=y\n \n #[macro_use]\n extern crate log;"}, {"sha": "15c4e8b04533939a2804f572562ff240ab08e008", "filename": "src/test/run-pass/newtype-struct-with-dtor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast doesn't like extern crate\n \n extern crate libc;\n use libc::c_int;"}, {"sha": null, "filename": "src/test/run-pass/send-is-not-static-par-for.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4"}, {"sha": "b3fff6977a54574ece93ec601327129eba1331de", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270a677d4d698916f5ad103f0afc3c070b8dbeb4/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=270a677d4d698916f5ad103f0afc3c070b8dbeb4", "patch": "@@ -13,7 +13,6 @@ extern crate libc;\n use std::ffi::{self, CString};\n use libc::{c_char, c_int};\n \n-// ignore-fast doesn't like extern crate\n \n extern {\n     fn sprintf(s: *mut c_char, format: *const c_char, ...) -> c_int;"}]}