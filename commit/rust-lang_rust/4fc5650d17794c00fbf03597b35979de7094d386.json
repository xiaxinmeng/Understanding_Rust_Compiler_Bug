{"sha": "4fc5650d17794c00fbf03597b35979de7094d386", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzU2NTBkMTc3OTRjMDBmYmYwMzU5N2IzNTk3OWRlNzA5NGQzODY=", "commit": {"author": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2019-09-25T20:13:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T20:13:19Z"}, "message": "Simplify Unicode-aware trimming", "tree": {"sha": "5015e0d778ed327130e826cc02d83a900a7c8c92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5015e0d778ed327130e826cc02d83a900a7c8c92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc5650d17794c00fbf03597b35979de7094d386", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi8pfCRBK7hj4Ov3rIwAAdHIIAIBqHiDXmaCFGEph3S5dG8+4\neVqZhNSa86fICYeQkwMPsfswb5pYpk+fbE4kEGP0yfEJiNJ6TcuIrqczB9UxRdFD\nmtc6Q/TA+UnuT1Tt1hQoAaLG30QE98MJEyw/WCa4xon7DanfzsyWW1SPuhq0fRNU\n06bWjAaVTIYEyVBwIfOAeFF5tfwOkuip0PA4kkUOR7TGnyiQd2C/uxOgN3wMUL4b\n2MBudQBpYINALPpUEvMq5McTy238iUkqNXLb87bCTMrijlEjWUWwC24dvS5rpCrI\nh/+BI4GRrlNxB1MGLN6B2jKHwP0EVRc7hxBusgoqfTAaa2aO2AJCtsOkL3yVm9Y=\n=1Vi5\n-----END PGP SIGNATURE-----\n", "payload": "tree 5015e0d778ed327130e826cc02d83a900a7c8c92\nparent e9a93be53a6ccec5ba76f17333acf3c198313c61\nauthor AnthonyMikh <anthony.mikh@yandex.ru> 1569442399 +0300\ncommitter GitHub <noreply@github.com> 1569442399 +0300\n\nSimplify Unicode-aware trimming"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc5650d17794c00fbf03597b35979de7094d386", "html_url": "https://github.com/rust-lang/rust/commit/4fc5650d17794c00fbf03597b35979de7094d386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc5650d17794c00fbf03597b35979de7094d386/comments", "author": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a93be53a6ccec5ba76f17333acf3c198313c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a93be53a6ccec5ba76f17333acf3c198313c61", "html_url": "https://github.com/rust-lang/rust/commit/e9a93be53a6ccec5ba76f17333acf3c198313c61"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "151c06ddbbd4c732a4b5626fe245069d1eb39d32", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5650d17794c00fbf03597b35979de7094d386/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5650d17794c00fbf03597b35979de7094d386/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4fc5650d17794c00fbf03597b35979de7094d386", "patch": "@@ -529,18 +529,21 @@ impl EmitterWriter {\n         let left = margin.left(line_len);\n         let right = margin.right(line_len);\n         // On long lines, we strip the source line, accounting for unicode.\n-        let mut taken = 0;\n-        let code: String = source_string.chars().skip(left).take_while(|ch| {\n-            // Make sure that the trimming on the right will fall within the terminal width.\n-            // FIXME: `unicode_width` sometimes disagrees with terminals on how wide a `char` is.\n-            // For now, just accept that sometimes the code line will be longer than desired.\n-            let next = unicode_width::UnicodeWidthChar::width(*ch).unwrap_or(1);\n-            if taken + next > right - left {\n-                return false;\n-            }\n-            taken += next;\n-            true\n-        }).collect();\n+        // Make sure that the trimming on the right will fall within the terminal width.\n+        // FIXME: `unicode_width` sometimes disagrees with terminals on how wide a `char` is.\n+        // For now, just accept that sometimes the code line will be longer than desired.\n+        let code: String = source_string.chars().skip(left)\n+            .map(|ch| {\n+                let width = unicode_width::UnicodeWidthChar::width(*ch).unwrap_or(1);\n+                (width, ch)\n+            })\n+            .scan(0, |len, (width, ch)| {\n+                *len += width;\n+                Some(*len, ch)\n+            })\n+            .take_while(|&(prefix_len, _ch)| prefix_len <= right - left)\n+            .map(|(_prefix_len, ch)| ch)\n+            .collect();\n         buffer.puts(line_offset, code_offset, &code, Style::Quotation);\n         if margin.was_cut_left() {\n             // We have stripped some code/whitespace from the beginning, make it clear."}]}