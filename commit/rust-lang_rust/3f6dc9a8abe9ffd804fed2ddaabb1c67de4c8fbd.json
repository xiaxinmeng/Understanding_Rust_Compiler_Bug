{"sha": "3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNmRjOWE4YWJlOWZmZDgwNGZlZDJkZGFhYmIxYzY3ZGU0YzhmYmQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-27T12:41:50Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-07-28T12:34:36Z"}, "message": "Add #[track_caller] for some function in core::mem.\n\nThese functions can panic for some types. This makes the panic point to\nthe code that calls e.g. mem::uninitialized(), instead of inside the\ndefinition of mem::uninitialized.", "tree": {"sha": "226343744c4d375c6fcb3841a3a893405e57e253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226343744c4d375c6fcb3841a3a893405e57e253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd", "html_url": "https://github.com/rust-lang/rust/commit/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba3228b2a9875d268ff3990903d04e19f6cdb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba3228b2a9875d268ff3990903d04e19f6cdb0c", "html_url": "https://github.com/rust-lang/rust/commit/eba3228b2a9875d268ff3990903d04e19f6cdb0c"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "9c88a6233616175e3e3215ab0a59f7d3d91ebcc2", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd", "patch": "@@ -619,6 +619,7 @@ impl<T> MaybeUninit<T> {\n     #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n+    #[track_caller]\n     pub const unsafe fn assume_init(self) -> T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // This also means that `self` must be a `value` variant.\n@@ -690,6 +691,7 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[rustc_const_unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n+    #[track_caller]\n     pub const unsafe fn assume_init_read(&self) -> T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // Reading from `self.as_ptr()` is safe since `self` should be initialized.\n@@ -937,6 +939,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"80908\")]\n     #[inline(always)]\n+    #[track_caller]\n     pub unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n         // SAFETY:\n         // * The caller guarantees that all elements of the array are initialized"}, {"sha": "aeb5d238162c813d7716f74bac4737998e2026cb", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd", "patch": "@@ -622,6 +622,7 @@ pub const fn needs_drop<T>() -> bool {\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_zeroed\"]\n+#[track_caller]\n pub unsafe fn zeroed<T>() -> T {\n     // SAFETY: the caller must guarantee that an all-zero value is valid for `T`.\n     unsafe {\n@@ -657,6 +658,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n+#[track_caller]\n pub unsafe fn uninitialized<T>() -> T {\n     // SAFETY: the caller must guarantee that an unitialized value is valid for `T`.\n     unsafe {"}, {"sha": "e660730396fa1c97e8e0ca197a9a04f13585ad34", "filename": "src/test/ui/consts/assume-type-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr?ref=3f6dc9a8abe9ffd804fed2ddaabb1c67de4c8fbd", "patch": "@@ -1,17 +1,9 @@\n error: any use of this value will cause an error\n-  --> $SRC_DIR/core/src/mem/maybe_uninit.rs:LL:COL\n-   |\n-LL |               intrinsics::assert_inhabited::<T>();\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |               |\n-   |               aborted execution: attempted to instantiate uninhabited type `!`\n-   |               inside `MaybeUninit::<!>::assume_init` at $SRC_DIR/core/src/mem/maybe_uninit.rs:LL:COL\n-   |               inside `_BAD` at $DIR/assume-type-intrinsics.rs:11:9\n-   | \n-  ::: $DIR/assume-type-intrinsics.rs:10:5\n+  --> $DIR/assume-type-intrinsics.rs:11:9\n    |\n LL | /     const _BAD: () = unsafe {\n LL | |         MaybeUninit::<!>::uninit().assume_init();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n LL | |     };\n    | |______-\n    |"}]}