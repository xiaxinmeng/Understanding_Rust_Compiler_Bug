{"sha": "eeedc144be1f57cda196638d7bf38cf4cd2b9700", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZWRjMTQ0YmUxZjU3Y2RhMTk2NjM4ZDdiZjM4Y2Y0Y2QyYjk3MDA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-09-08T17:12:53Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-09-16T12:08:32Z"}, "message": "fix dynamic drop for unions\n\nMoving out of a union is now treated like moving out of its parent type.\n\nFixes #36246", "tree": {"sha": "2c6ab978b9a728ba63e239f6a460d328f42a9a2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6ab978b9a728ba63e239f6a460d328f42a9a2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeedc144be1f57cda196638d7bf38cf4cd2b9700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeedc144be1f57cda196638d7bf38cf4cd2b9700", "html_url": "https://github.com/rust-lang/rust/commit/eeedc144be1f57cda196638d7bf38cf4cd2b9700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeedc144be1f57cda196638d7bf38cf4cd2b9700/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b25e886028195a4f90c0baa5cc9101ebeceb5a3", "html_url": "https://github.com/rust-lang/rust/commit/7b25e886028195a4f90c0baa5cc9101ebeceb5a3"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "bd38f554dc9b084c0fa4abedd7e53fe4c6f466ef", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/eeedc144be1f57cda196638d7bf38cf4cd2b9700/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeedc144be1f57cda196638d7bf38cf4cd2b9700/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=eeedc144be1f57cda196638d7bf38cf4cd2b9700", "patch": "@@ -12,7 +12,6 @@\n use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n use rustc::mir::repr::*;\n use rustc::util::nodemap::FnvHashMap;\n-use rustc::util::common::ErrorReported;\n use rustc_data_structures::indexed_vec::{IndexVec};\n \n use syntax::codemap::DUMMY_SP;\n@@ -198,6 +197,11 @@ struct MoveDataBuilder<'a, 'tcx: 'a> {\n     data: MoveData<'tcx>,\n }\n \n+pub enum MovePathError {\n+    IllegalMove,\n+    UnionMove { path: MovePathIndex },\n+}\n+\n impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn new(mir: &'a Mir<'tcx>,\n            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -256,23 +260,23 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         move_path\n     }\n \n-    /// This creates a MovePath for a given lvalue, returning an `ErrorReported`\n+    /// This creates a MovePath for a given lvalue, returning an `MovePathError`\n     /// if that lvalue can't be moved from.\n     ///\n     /// NOTE: lvalues behind references *do not* get a move path, which is\n     /// problematic for borrowck.\n     ///\n     /// Maybe we should have seperate \"borrowck\" and \"moveck\" modes.\n     fn move_path_for(&mut self, lval: &Lvalue<'tcx>)\n-                     -> Result<MovePathIndex, ErrorReported>\n+                     -> Result<MovePathIndex, MovePathError>\n     {\n         debug!(\"lookup({:?})\", lval);\n         match *lval {\n             Lvalue::Var(var) => Ok(self.data.rev_lookup.vars[var]),\n             Lvalue::Arg(arg) => Ok(self.data.rev_lookup.args[arg]),\n             Lvalue::Temp(temp) => Ok(self.data.rev_lookup.temps[temp]),\n             // error: can't move out of a static\n-            Lvalue::Static(..) => Err(ErrorReported),\n+            Lvalue::Static(..) => Err(MovePathError::IllegalMove),\n             Lvalue::ReturnPointer => match self.data.rev_lookup.return_ptr {\n                 Some(ptr) => Ok(ptr),\n                 ref mut ptr @ None => {\n@@ -300,21 +304,28 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn move_path_for_projection(&mut self,\n                                 lval: &Lvalue<'tcx>,\n                                 proj: &LvalueProjection<'tcx>)\n-                                -> Result<MovePathIndex, ErrorReported>\n+                                -> Result<MovePathIndex, MovePathError>\n     {\n         let base = try!(self.move_path_for(&proj.base));\n         let lv_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n         match lv_ty.sty {\n             // error: can't move out of borrowed content\n-            ty::TyRef(..) | ty::TyRawPtr(..) => return Err(ErrorReported),\n+            ty::TyRef(..) | ty::TyRawPtr(..) => return Err(MovePathError::IllegalMove),\n             // error: can't move out of struct with destructor\n-            ty::TyStruct(adt, _) | ty::TyEnum(adt, _) if adt.has_dtor() =>\n-                return Err(ErrorReported),\n-\n-            ty::TyArray(..) | ty::TySlice(..) => match proj.elem {\n+            ty::TyAdt(adt, _) if adt.has_dtor() =>\n+                return Err(MovePathError::IllegalMove),\n+            // move out of union - always move the entire union\n+            ty::TyAdt(adt, _) if adt.is_union() =>\n+                return Err(MovePathError::UnionMove { path: base }),\n+            // error: can't move out of a slice\n+            ty::TySlice(..) =>\n+                return Err(MovePathError::IllegalMove),\n+            ty::TyArray(..) => match proj.elem {\n                 // error: can't move out of an array\n-                ProjectionElem::Index(..) => return Err(ErrorReported),\n-                _ => {}\n+                ProjectionElem::Index(..) => return Err(MovePathError::IllegalMove),\n+                _ => {\n+                    // FIXME: still badly broken\n+                }\n             },\n             _ => {}\n         };\n@@ -521,13 +532,16 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             return\n         }\n \n-        let path = self.move_path_for(lval).unwrap_or_else(|_| {\n-            // Moving out of a bad path. Eventually, this should be a MIR\n-            // borrowck error instead of a bug.\n-            span_bug!(self.mir.span,\n-                      \"Broken MIR: moving out of lvalue {:?}: {:?} at {:?}\",\n-                      lval, lv_ty, loc);\n-        });\n+        let path = match self.move_path_for(lval) {\n+            Ok(path) | Err(MovePathError::UnionMove { path }) => path,\n+            Err(MovePathError::IllegalMove) => {\n+                // Moving out of a bad path. Eventually, this should be a MIR\n+                // borrowck error instead of a bug.\n+                span_bug!(self.mir.span,\n+                          \"Broken MIR: moving out of lvalue {:?}: {:?} at {:?}\",\n+                          lval, lv_ty, loc);\n+            }\n+        };\n         let move_out = self.data.moves.push(MoveOut { path: path, source: loc });\n \n         debug!(\"gather_move({:?}, {:?}): adding move {:?} of {:?}\","}, {"sha": "5b5d782bc83a2b16d36a989c6b0611dc6f65bf45", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eeedc144be1f57cda196638d7bf38cf4cd2b9700/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeedc144be1f57cda196638d7bf38cf4cd2b9700/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=eeedc144be1f57cda196638d7bf38cf4cd2b9700", "patch": "@@ -256,12 +256,12 @@ fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n     let ty = lv.ty(mir, tcx).to_ty(tcx);\n     match ty.sty {\n         ty::TyArray(..) | ty::TySlice(..) | ty::TyRef(..) | ty::TyRawPtr(..) => {\n-            debug!(\"lvalue_contents_drop_state_cannot_differ lv: {:?} ty: {:?} refd => false\",\n+            debug!(\"lvalue_contents_drop_state_cannot_differ lv: {:?} ty: {:?} refd => true\",\n                    lv, ty);\n             true\n         }\n-        ty::TyAdt(def, _) if def.has_dtor() => {\n-            debug!(\"lvalue_contents_drop_state_cannot_differ lv: {:?} ty: {:?} Drop => false\",\n+        ty::TyAdt(def, _) if def.has_dtor() || def.is_union() => {\n+            debug!(\"lvalue_contents_drop_state_cannot_differ lv: {:?} ty: {:?} Drop => true\",\n                    lv, ty);\n             true\n         }"}, {"sha": "a2cca206409263021ef770f98dc70f2f362ea5d5", "filename": "src/test/run-pass/dynamic-drop.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eeedc144be1f57cda196638d7bf38cf4cd2b9700/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeedc144be1f57cda196638d7bf38cf4cd2b9700/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs?ref=eeedc144be1f57cda196638d7bf38cf4cd2b9700", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n+#![feature(untagged_unions)]\n \n use std::cell::{Cell, RefCell};\n use std::panic;\n@@ -111,6 +111,20 @@ fn assignment1(a: &Allocator, c0: bool) {\n     _v = _w;\n }\n \n+#[allow(unions_with_drop_fields)]\n+union Boxy<T> {\n+    a: T,\n+    b: T,\n+}\n+\n+fn union1(a: &Allocator) {\n+    unsafe {\n+        let mut u = Boxy { a: a.alloc() };\n+        u.b = a.alloc();\n+        drop(u.a);\n+    }\n+}\n+\n fn run_test<F>(mut f: F)\n     where F: FnMut(&Allocator)\n {\n@@ -136,6 +150,13 @@ fn run_test<F>(mut f: F)\n     }\n }\n \n+fn run_test_nopanic<F>(mut f: F)\n+    where F: FnMut(&Allocator)\n+{\n+    let first_alloc = Allocator::new(usize::MAX);\n+    f(&first_alloc);\n+}\n+\n fn main() {\n     run_test(|a| dynamic_init(a, false));\n     run_test(|a| dynamic_init(a, true));\n@@ -149,4 +170,6 @@ fn main() {\n \n     run_test(|a| assignment1(a, false));\n     run_test(|a| assignment1(a, true));\n+\n+    run_test_nopanic(|a| union1(a));\n }"}]}