{"sha": "1f2cf1e9b7d57562f5c10837caf8df357b64df4c", "node_id": "C_kwDOAAsO6NoAKDFmMmNmMWU5YjdkNTc1NjJmNWMxMDgzN2NhZjhkZjM1N2I2NGRmNGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-01T01:18:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-21T03:50:15Z"}, "message": "Prefer visibility paths where items are not named `_`", "tree": {"sha": "52ad5027f2ef9f81d0856aebc4e34541c27dac26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ad5027f2ef9f81d0856aebc4e34541c27dac26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2cf1e9b7d57562f5c10837caf8df357b64df4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2cf1e9b7d57562f5c10837caf8df357b64df4c", "html_url": "https://github.com/rust-lang/rust/commit/1f2cf1e9b7d57562f5c10837caf8df357b64df4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2cf1e9b7d57562f5c10837caf8df357b64df4c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48dab5c9601d856fdbdd9bda183732edd9545c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/48dab5c9601d856fdbdd9bda183732edd9545c29", "html_url": "https://github.com/rust-lang/rust/commit/48dab5c9601d856fdbdd9bda183732edd9545c29"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "4e5d21049a0d98597bb419df916ad002b851fa29", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f2cf1e9b7d57562f5c10837caf8df357b64df4c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2cf1e9b7d57562f5c10837caf8df357b64df4c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1f2cf1e9b7d57562f5c10837caf8df357b64df4c", "patch": "@@ -17,7 +17,7 @@ use rustc_session::utils::NativeLibKind;\n use rustc_session::{Session, StableCrateId};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{kw, Symbol};\n \n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n@@ -295,6 +295,10 @@ pub fn provide(providers: &mut Providers) {\n             use std::collections::vec_deque::VecDeque;\n \n             let mut visible_parent_map: DefIdMap<DefId> = Default::default();\n+            // This is a secondary visible_parent_map, storing the DefId of parents that re-export\n+            // the child as `_`. Since we prefer parents that don't do this, merge this map at the\n+            // end, only if we're missing any keys from the former.\n+            let mut fallback_map: DefIdMap<DefId> = Default::default();\n \n             // Issue 46112: We want the map to prefer the shortest\n             // paths when reporting the path to an item. Therefore we\n@@ -317,12 +321,17 @@ pub fn provide(providers: &mut Providers) {\n                 bfs_queue.push_back(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n             }\n \n-            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &Export, parent: DefId| {\n-                if !child.vis.is_public() {\n+            let mut add_child = |bfs_queue: &mut VecDeque<_>, export: &Export, parent: DefId| {\n+                if !export.vis.is_public() {\n                     return;\n                 }\n \n-                if let Some(child) = child.res.opt_def_id() {\n+                if let Some(child) = export.res.opt_def_id() {\n+                    if export.ident.name == kw::Underscore {\n+                        fallback_map.insert(child, parent);\n+                        return;\n+                    }\n+\n                     match visible_parent_map.entry(child) {\n                         Entry::Occupied(mut entry) => {\n                             // If `child` is defined in crate `cnum`, ensure\n@@ -345,6 +354,12 @@ pub fn provide(providers: &mut Providers) {\n                 }\n             }\n \n+            // Fill in any missing entries with the (less preferable) path ending in `::_`.\n+            // We still use this path in a diagnostic that suggests importing `::*`.\n+            for (child, parent) in fallback_map {\n+                visible_parent_map.entry(child).or_insert(parent);\n+            }\n+\n             visible_parent_map\n         },\n "}]}