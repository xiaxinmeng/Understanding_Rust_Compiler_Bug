{"sha": "774a3d1523bde3a16f8a92dbaac01d211ba911c3", "node_id": "C_kwDOAAsO6NoAKDc3NGEzZDE1MjNiZGUzYTE2ZjhhOTJkYmFhYzAxZDIxMWJhOTExYzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T02:36:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T02:36:07Z"}, "message": "Auto merge of #111553 - cjgillot:mir-e2e, r=scottmcm\n\nAdd a few MIR pre-codegen tests\n\nr? `@scottmcm`", "tree": {"sha": "768293afbb39c58c3d23ad5481c5240e4cebca0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/768293afbb39c58c3d23ad5481c5240e4cebca0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774a3d1523bde3a16f8a92dbaac01d211ba911c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774a3d1523bde3a16f8a92dbaac01d211ba911c3", "html_url": "https://github.com/rust-lang/rust/commit/774a3d1523bde3a16f8a92dbaac01d211ba911c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774a3d1523bde3a16f8a92dbaac01d211ba911c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f85ab544dfbbce7448993c490ad16c176339b939", "url": "https://api.github.com/repos/rust-lang/rust/commits/f85ab544dfbbce7448993c490ad16c176339b939", "html_url": "https://github.com/rust-lang/rust/commit/f85ab544dfbbce7448993c490ad16c176339b939"}, {"sha": "d796c600ad53392c47dd5db3257612c0cb29d88a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d796c600ad53392c47dd5db3257612c0cb29d88a", "html_url": "https://github.com/rust-lang/rust/commit/d796c600ad53392c47dd5db3257612c0cb29d88a"}], "stats": {"total": 2844, "additions": 1762, "deletions": 1082}, "files": [{"sha": "40ddf82f4cf953828cd30ebcb45b6f7f0fdc9d37", "filename": "tests/mir-opt/pre-codegen/chained_comparison.bitand.PreCodegen.after.mir", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.bitand.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.bitand.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.bitand.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,84 @@\n+// MIR for `bitand` after PreCodegen\n+\n+fn bitand(_1: &Blueprint, _2: &Blueprint) -> bool {\n+    debug a => _1;                       // in scope 0 at $DIR/chained_comparison.rs:+0:15: +0:16\n+    debug b => _2;                       // in scope 0 at $DIR/chained_comparison.rs:+0:30: +0:31\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/chained_comparison.rs:+0:48: +0:52\n+    let mut _3: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+    let mut _4: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+    let mut _5: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+    let mut _6: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:12: +2:21\n+    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:25: +2:34\n+    let mut _8: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+2:11: +2:35\n+    let mut _9: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +2:35\n+    let mut _10: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:12: +3:28\n+    let mut _11: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:32: +3:48\n+    let mut _12: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+3:11: +3:49\n+    let mut _13: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +3:49\n+    let mut _14: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:12: +4:25\n+    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:29: +4:42\n+    let mut _16: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+4:11: +4:43\n+    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +4:43\n+    let mut _18: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:12: +5:21\n+    let mut _19: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:25: +5:34\n+    let mut _20: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+5:11: +5:35\n+\n+    bb0: {\n+        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:43\n+        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:49\n+        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:35\n+        StorageLive(_5);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageLive(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        _3 = ((*_1).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        StorageLive(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _4 = ((*_2).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _5 = Eq(move _3, move _4);       // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageDead(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        StorageDead(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:11: +2:35\n+        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:21\n+        _6 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:21\n+        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:25: +2:34\n+        _7 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:25: +2:34\n+        _8 = Eq(move _6, move _7);       // scope 0 at $DIR/chained_comparison.rs:+2:11: +2:35\n+        StorageDead(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        _9 = BitAnd(move _5, move _8);   // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:35\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:34: +2:35\n+        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:11: +3:49\n+        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:28\n+        _10 = ((*_1).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:28\n+        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:32: +3:48\n+        _11 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:32: +3:48\n+        _12 = Eq(move _10, move _11);    // scope 0 at $DIR/chained_comparison.rs:+3:11: +3:49\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        _13 = BitAnd(move _9, move _12); // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:49\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+3:48: +3:49\n+        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:11: +4:43\n+        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:25\n+        _14 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:25\n+        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:42\n+        _15 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:42\n+        _16 = Eq(move _14, move _15);    // scope 0 at $DIR/chained_comparison.rs:+4:11: +4:43\n+        StorageDead(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        _17 = BitAnd(move _13, move _16); // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:43\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+4:42: +4:43\n+        StorageLive(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:11: +5:35\n+        StorageLive(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:21\n+        _18 = ((*_1).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:21\n+        StorageLive(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:25: +5:34\n+        _19 = ((*_2).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:25: +5:34\n+        _20 = Eq(move _18, move _19);    // scope 0 at $DIR/chained_comparison.rs:+5:11: +5:35\n+        StorageDead(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        StorageDead(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        _0 = BitAnd(move _17, move _20); // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:35\n+        StorageDead(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+5:34: +5:35\n+        return;                          // scope 0 at $DIR/chained_comparison.rs:+6:2: +6:2\n+    }\n+}"}, {"sha": "26ce7fda4ed0198690d7b452aa8ec45eaf21bdea", "filename": "tests/mir-opt/pre-codegen/chained_comparison.naive.PreCodegen.after.mir", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,127 @@\n+// MIR for `naive` after PreCodegen\n+\n+fn naive(_1: &Blueprint, _2: &Blueprint) -> bool {\n+    debug a => _1;                       // in scope 0 at $DIR/chained_comparison.rs:+0:14: +0:15\n+    debug b => _2;                       // in scope 0 at $DIR/chained_comparison.rs:+0:29: +0:30\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/chained_comparison.rs:+0:47: +0:51\n+    let mut _3: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+    let mut _4: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+    let mut _5: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+    let mut _6: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+    let mut _8: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+    let mut _9: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    let mut _10: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+    let mut _11: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+    let mut _12: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+    let mut _13: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    let mut _14: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+    let mut _16: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+    let mut _18: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n+    let mut _19: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:26: +5:35\n+    let mut _20: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n+\n+    bb0: {\n+        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        StorageLive(_5);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageLive(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        _3 = ((*_1).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n+        StorageLive(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _4 = ((*_2).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n+        _5 = Eq(move _3, move _4);       // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n+        StorageDead(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        StorageDead(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:42: +1:43\n+        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    }\n+\n+    bb1: {\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        goto -> bb3;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    }\n+\n+    bb2: {\n+        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+        _6 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+        _7 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+        _8 = Eq(move _6, move _7);       // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+        StorageDead(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        _9 = move _8;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    }\n+\n+    bb3: {\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        goto -> bb5;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    }\n+\n+    bb4: {\n+        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+        _10 = ((*_1).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+        _11 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+        _12 = Eq(move _10, move _11);    // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        _13 = move _12;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        switchInt(move _13) -> [0: bb5, otherwise: bb6]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+    }\n+\n+    bb5: {\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        goto -> bb7;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+    }\n+\n+    bb6: {\n+        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+        _14 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+        _15 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+        _16 = Eq(move _14, move _15);    // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+        StorageDead(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        _17 = move _16;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        switchInt(move _17) -> [0: bb7, otherwise: bb8]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+    }\n+\n+    bb7: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+    }\n+\n+    bb8: {\n+        StorageLive(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n+        StorageLive(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n+        _18 = ((*_1).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n+        StorageLive(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:26: +5:35\n+        _19 = ((*_2).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:26: +5:35\n+        _20 = Eq(move _18, move _19);    // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n+        StorageDead(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        StorageDead(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        _0 = move _20;                   // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+    }\n+\n+    bb9: {\n+        StorageDead(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        return;                          // scope 0 at $DIR/chained_comparison.rs:+6:2: +6:2\n+    }\n+}"}, {"sha": "7560e1e26cea9ef8105a48eb4e32410389d1ec8b", "filename": "tests/mir-opt/pre-codegen/chained_comparison.returning.PreCodegen.after.mir", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.returning.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.returning.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.returning.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,126 @@\n+// MIR for `returning` after PreCodegen\n+\n+fn returning(_1: &Blueprint, _2: &Blueprint) -> bool {\n+    debug a => _1;                       // in scope 0 at $DIR/chained_comparison.rs:+0:18: +0:19\n+    debug b => _2;                       // in scope 0 at $DIR/chained_comparison.rs:+0:33: +0:34\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/chained_comparison.rs:+0:51: +0:55\n+    let mut _3: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:8: +1:24\n+    let mut _4: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:28: +1:44\n+    let mut _5: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+    let mut _6: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+4:8: +4:17\n+    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+4:21: +4:30\n+    let mut _8: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+    let mut _9: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+7:8: +7:24\n+    let mut _10: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+7:28: +7:44\n+    let mut _11: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+    let mut _12: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+10:8: +10:21\n+    let mut _13: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+10:25: +10:38\n+    let mut _14: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+13:8: +13:17\n+    let mut _16: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+13:21: +13:30\n+    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+\n+    bb0: {\n+        StorageLive(_5);                 // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+        StorageLive(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:24\n+        _3 = ((*_1).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:24\n+        StorageLive(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:28: +1:44\n+        _4 = ((*_2).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:28: +1:44\n+        _5 = Ne(move _3, move _4);       // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+        StorageDead(_4);                 // scope 0 at $DIR/chained_comparison.rs:+1:43: +1:44\n+        StorageDead(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:43: +1:44\n+        switchInt(move _5) -> [0: bb1, otherwise: bb10]; // scope 0 at $DIR/chained_comparison.rs:+1:8: +1:44\n+    }\n+\n+    bb1: {\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+3:5: +3:6\n+        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:17\n+        _6 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:17\n+        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+4:21: +4:30\n+        _7 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+4:21: +4:30\n+        _8 = Ne(move _6, move _7);       // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+        StorageDead(_7);                 // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:30\n+        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+4:29: +4:30\n+        switchInt(move _8) -> [0: bb2, otherwise: bb9]; // scope 0 at $DIR/chained_comparison.rs:+4:8: +4:30\n+    }\n+\n+    bb2: {\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+6:5: +6:6\n+        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:24\n+        _9 = ((*_1).2: u32);             // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:24\n+        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+7:28: +7:44\n+        _10 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+7:28: +7:44\n+        _11 = Ne(move _9, move _10);     // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+7:43: +7:44\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+7:43: +7:44\n+        switchInt(move _11) -> [0: bb3, otherwise: bb8]; // scope 0 at $DIR/chained_comparison.rs:+7:8: +7:44\n+    }\n+\n+    bb3: {\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+9:5: +9:6\n+        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:21\n+        _12 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:21\n+        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+10:25: +10:38\n+        _13 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+10:25: +10:38\n+        _14 = Ne(move _12, move _13);    // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+10:37: +10:38\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+10:37: +10:38\n+        switchInt(move _14) -> [0: bb4, otherwise: bb7]; // scope 0 at $DIR/chained_comparison.rs:+10:8: +10:38\n+    }\n+\n+    bb4: {\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+12:5: +12:6\n+        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:17\n+        _15 = ((*_1).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:17\n+        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+13:21: +13:30\n+        _16 = ((*_2).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+13:21: +13:30\n+        _17 = Ne(move _15, move _16);    // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+13:29: +13:30\n+        StorageDead(_15);                // scope 0 at $DIR/chained_comparison.rs:+13:29: +13:30\n+        switchInt(move _17) -> [0: bb5, otherwise: bb6]; // scope 0 at $DIR/chained_comparison.rs:+13:8: +13:30\n+    }\n+\n+    bb5: {\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+15:5: +15:6\n+        _0 = const true;                 // scope 0 at $DIR/chained_comparison.rs:+16:5: +16:9\n+        goto -> bb11;                    // scope 0 at $DIR/chained_comparison.rs:+17:2: +17:2\n+    }\n+\n+    bb6: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+14:16: +14:21\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+15:5: +15:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb7: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+11:16: +11:21\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+12:5: +12:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb8: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+8:16: +8:21\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+9:5: +9:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb9: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+5:16: +5:21\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+6:5: +6:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb10: {\n+        _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+2:16: +2:21\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+3:5: +3:6\n+        goto -> bb11;                    // scope 0 at no-location\n+    }\n+\n+    bb11: {\n+        return;                          // scope 0 at $DIR/chained_comparison.rs:+17:2: +17:2\n+    }\n+}"}, {"sha": "f7879140f812fadfd26d08a715f538649af7994e", "filename": "tests/mir-opt/pre-codegen/chained_comparison.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.rs?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,51 @@\n+// compile-flags: -O -Zmir-opt-level=2 -Cdebuginfo=2\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct Blueprint {\n+    pub fuel_tank_size: u32,\n+    pub payload: u32,\n+    pub wheel_diameter: u32,\n+    pub wheel_width: u32,\n+    pub storage: u32,\n+}\n+\n+pub fn naive(a: &Blueprint, b: &Blueprint) -> bool {\n+    (a.fuel_tank_size == b.fuel_tank_size)\n+        && (a.payload == b.payload)\n+        && (a.wheel_diameter == b.wheel_diameter)\n+        && (a.wheel_width == b.wheel_width)\n+        && (a.storage == b.storage)\n+}\n+\n+pub fn bitand(a: &Blueprint, b: &Blueprint) -> bool {\n+    (a.fuel_tank_size == b.fuel_tank_size)\n+        & (a.payload == b.payload)\n+        & (a.wheel_diameter == b.wheel_diameter)\n+        & (a.wheel_width == b.wheel_width)\n+        & (a.storage == b.storage)\n+}\n+\n+pub fn returning(a: &Blueprint, b: &Blueprint) -> bool {\n+    if a.fuel_tank_size != b.fuel_tank_size {\n+        return false;\n+    }\n+    if a.payload != b.payload {\n+        return false;\n+    }\n+    if a.wheel_diameter != b.wheel_diameter {\n+        return false;\n+    }\n+    if a.wheel_width != b.wheel_width {\n+        return false;\n+    }\n+    if a.storage != b.storage {\n+        return false;\n+    }\n+    true\n+}\n+\n+// EMIT_MIR chained_comparison.naive.PreCodegen.after.mir\n+// EMIT_MIR chained_comparison.bitand.PreCodegen.after.mir\n+// EMIT_MIR chained_comparison.returning.PreCodegen.after.mir"}, {"sha": "55945bbc8fcc092415ad454330522ad6cf70dd53", "filename": "tests/mir-opt/pre-codegen/checked_ops.checked_shl.PreCodegen.after.mir", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,144 @@\n+// MIR for `checked_shl` after PreCodegen\n+\n+fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n+    debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:20: +0:21\n+    debug rhs => _2;                     // in scope 0 at $DIR/checked_ops.rs:+0:28: +0:31\n+    let mut _0: std::option::Option<u32>; // return place in scope 0 at $DIR/checked_ops.rs:+0:41: +0:52\n+    scope 1 (inlined core::num::<impl u32>::checked_shl) { // at $DIR/checked_ops.rs:16:7: 16:23\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _11: u32;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _12: bool;               // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        scope 2 {\n+            debug a => _11;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug b => _10;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        }\n+        scope 3 (inlined core::num::<impl u32>::overflowing_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug self => _1;            // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug rhs => _2;             // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            let mut _9: u32;             // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            let mut _10: bool;           // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            scope 4 (inlined core::num::<impl u32>::wrapping_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _1;        // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug rhs => _2;         // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                let mut _3: u32;         // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                let mut _4: u32;         // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                scope 5 {\n+                    scope 6 (inlined core::num::<impl u32>::unchecked_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                        debug self => _1; // in scope 6 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                        debug rhs => _4; // in scope 6 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                        let mut _8: u32; // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        scope 7 {\n+                            scope 8 (inlined core::num::<impl u32>::unchecked_shl::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                debug x => _4; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                let mut _5: std::result::Result<u32, std::convert::Infallible>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                let mut _7: std::option::Option<u32>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                scope 9 {\n+                                    scope 10 (inlined <u32 as TryInto<u32>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _4; // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                        scope 11 (inlined <u32 as TryFrom<u32>>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                            debug value => _4; // in scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                            scope 21 (inlined <u32 as Into<u32>>::into) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                debug self => _4; // in scope 21 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                scope 22 (inlined <u32 as From<u32>>::from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                    debug t => _4; // in scope 22 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                    scope 12 (inlined Result::<u32, Infallible>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _5; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        let _6: u32; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        scope 13 {\n+                                            debug x => _6; // in scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        }\n+                                    }\n+                                    scope 14 (inlined #[track_caller] Option::<u32>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _7; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        let mut _13: &std::option::Option<u32>; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        scope 15 {\n+                                            debug val => _8; // in scope 15 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        }\n+                                        scope 16 {\n+                                            scope 18 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                                scope 19 {\n+                                                    scope 20 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        scope 17 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                            debug self => _13; // in scope 17 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_10);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageLive(_11);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_3);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _3 = const 31_u32;               // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _4 = BitAnd(_2, move _3);        // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_3);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_8);                 // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _5 = Result::<u32, Infallible>::Ok(_4); // scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _6 = move ((_5 as Ok).0: u32);   // scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _7 = Option::<u32>::Some(move _6); // scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_6);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _8 = move ((_7 as Some).0: u32); // scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_13);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_7);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _9 = unchecked_shl::<u32>(_1, move _8) -> [return: bb1, unwind unreachable]; // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32, u32) -> u32 {unchecked_shl::<u32>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_8);                 // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _10 = Ge(_2, const _);           // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _11 = move _9;                   // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_12);                // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _12 = unlikely(_10) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // + literal: Const { ty: extern \"rust-intrinsic\" fn(bool) -> bool {unlikely}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        switchInt(move _12) -> [0: bb3, otherwise: bb4]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        _0 = Option::<u32>::Some(_11);   // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+    }\n+\n+    bb4: {\n+        _0 = Option::<u32>::None;        // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        StorageDead(_12);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_11);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageDead(_10);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        return;                          // scope 0 at $DIR/checked_ops.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "dee43b0c6f885052a1855f3a3e91d96659af6453", "filename": "tests/mir-opt/pre-codegen/checked_ops.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -O -Zmir-opt-level=2 -Cdebuginfo=2\n+// needs-unwind\n+// ignore-debug\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+#![feature(step_trait)]\n+\n+// EMIT_MIR checked_ops.step_forward.PreCodegen.after.mir\n+pub fn step_forward(x: u32, n: usize) -> u32 {\n+    std::iter::Step::forward(x, n)\n+}\n+\n+// EMIT_MIR checked_ops.checked_shl.PreCodegen.after.mir\n+pub fn checked_shl(x: u32, rhs: u32) -> Option<u32> {\n+    x.checked_shl(rhs)\n+}"}, {"sha": "78f68e8ffe67440f0106d87761481c993a35aea0", "filename": "tests/mir-opt/pre-codegen/checked_ops.step_forward.PreCodegen.after.mir", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,64 @@\n+// MIR for `step_forward` after PreCodegen\n+\n+fn step_forward(_1: u32, _2: usize) -> u32 {\n+    debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:21: +0:22\n+    debug n => _2;                       // in scope 0 at $DIR/checked_ops.rs:+0:29: +0:30\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/checked_ops.rs:+0:42: +0:45\n+    scope 1 (inlined <u32 as Step>::forward) { // at $DIR/checked_ops.rs:11:5: 11:35\n+        debug start => _1;               // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        debug n => _2;                   // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let _3: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let mut _4: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let mut _7: bool;                // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let mut _8: u32;                 // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        scope 2 {\n+        }\n+        scope 3 (inlined Option::<u32>::is_none) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            debug self => _4;            // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _6: bool;            // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+            scope 4 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                debug self => _4;        // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _5: isize;       // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+            }\n+        }\n+        scope 5 (inlined core::num::<impl u32>::wrapping_add) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            debug self => _1;            // in scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug rhs => _8;             // in scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_3);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _3 = <u32 as Step>::forward_checked(_1, _2) -> bb1; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32, usize) -> Option<u32> {<u32 as Step>::forward_checked}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        _4 = &_3;                        // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _5 = discriminant((*_4));        // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _6 = Eq(_5, const 1_isize);      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _7 = Not(move _6);               // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const _, const 1_u32) -> bb3; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = _2 as u32 (IntToInt);       // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _0 = Add(_1, _8);                // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        return;                          // scope 0 at $DIR/checked_ops.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "dce9feddfc570842eaf0c0f50a41804346187c8a", "filename": "tests/mir-opt/pre-codegen/loops.filter_mapped.PreCodegen.after.mir", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.filter_mapped.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.filter_mapped.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.filter_mapped.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,102 @@\n+// MIR for `filter_mapped` after PreCodegen\n+\n+fn filter_mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> Option<U>) -> () {\n+    debug iter => _1;                    // in scope 0 at $DIR/loops.rs:+0:28: +0:32\n+    debug f => _2;                       // in scope 0 at $DIR/loops.rs:+0:59: +0:60\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:87: +0:87\n+    let mut _3: std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32\n+    let mut _4: std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32\n+    let mut _5: std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32\n+    let mut _6: &mut std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32\n+    let mut _9: std::option::Option<U>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:32\n+    let mut _10: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _12: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:32\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/loops.rs:+1:14: +1:32\n+        let _11: U;                      // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _11;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+        }\n+        scope 4 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as Iterator>::next) { // at $DIR/loops.rs:20:14: 20:32\n+            debug self => _6;            // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+            let mut _7: &mut impl Iterator<Item = T>; // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+            let mut _8: &mut impl Fn(T) -> Option<U>; // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+        }\n+    }\n+    scope 3 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as IntoIterator>::into_iter) { // at $DIR/loops.rs:20:14: 20:32\n+        debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_4);                 // scope 0 at $DIR/loops.rs:+1:14: +1:32\n+        StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:14: +1:32\n+        _3 = <impl Iterator<Item = T> as Iterator>::filter_map::<U, impl Fn(T) -> Option<U>>(move _1, move _2) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:32\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:20:19: 20:29\n+                                         // + literal: Const { ty: fn(impl Iterator<Item = T>, impl Fn(T) -> Option<U>) -> FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> {<impl Iterator<Item = T> as Iterator>::filter_map::<U, impl Fn(T) -> Option<U>>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        _4 = move _3;                    // scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+        StorageDead(_3);                 // scope 0 at $DIR/loops.rs:+1:31: +1:32\n+        StorageLive(_5);                 // scope 0 at $DIR/loops.rs:+1:14: +1:32\n+        _5 = move _4;                    // scope 0 at $DIR/loops.rs:+1:14: +1:32\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb2: {\n+        StorageLive(_9);                 // scope 1 at $DIR/loops.rs:+1:14: +1:32\n+        _6 = &mut _5;                    // scope 1 at $DIR/loops.rs:+1:14: +1:32\n+        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+        _7 = &mut ((*_6).0: impl Iterator<Item = T>); // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+        StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+        _8 = &mut ((*_6).1: impl Fn(T) -> Option<U>); // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+        _9 = <impl Iterator<Item = T> as Iterator>::find_map::<U, &mut impl Fn(T) -> Option<U>>(move _7, move _8) -> [return: bb3, unwind: bb9]; // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = T>, &mut impl Fn(T) -> Option<U>) -> Option<U> {<impl Iterator<Item = T> as Iterator>::find_map::<U, &mut impl Fn(T) -> Option<U>>}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n+        _10 = discriminant(_9);          // scope 1 at $DIR/loops.rs:+1:14: +1:32\n+        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb8]; // scope 1 at $DIR/loops.rs:+1:14: +1:32\n+    }\n+\n+    bb4: {\n+        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb5: {\n+        StorageDead(_5);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_4);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n+    }\n+\n+    bb6: {\n+        _11 = move ((_9 as Some).0: U);  // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _12 = opaque::<U>(move _11) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:21:9: 21:15\n+                                         // + literal: Const { ty: fn(U) {opaque::<U>}, val: Value(<ZST>) }\n+    }\n+\n+    bb7: {\n+        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb8: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:32\n+    }\n+\n+    bb9 (cleanup): {\n+        drop(_5) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +4:2\n+    }\n+}"}, {"sha": "a5002cd6afa1324dd6f0b6eb3999b0d9f4d1422d", "filename": "tests/mir-opt/pre-codegen/loops.int_range.PreCodegen.after.mir", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,118 @@\n+// MIR for `int_range` after PreCodegen\n+\n+fn int_range(_1: usize, _2: usize) -> () {\n+    debug start => _1;                   // in scope 0 at $DIR/loops.rs:+0:18: +0:23\n+    debug end => _2;                     // in scope 0 at $DIR/loops.rs:+0:32: +0:35\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:44: +0:44\n+    let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _5: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _9: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _12: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _14: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    scope 1 {\n+        debug iter => _4;                // in scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        let _13: usize;                  // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug i => _13;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+        }\n+        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:8:14: 8:24\n+            debug self => _5;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            scope 5 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                debug self => _5;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _6: &usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _7: &usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _8: bool;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _10: usize;          // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _11: usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                scope 6 {\n+                    debug old => _10;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    scope 7 {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:8:14: 8:24\n+        debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        _3 = std::ops::Range::<usize> { start: _1, end: _2 }; // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        StorageLive(_4);                 // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        _4 = move _3;                    // scope 0 at $DIR/loops.rs:+1:14: +1:24\n+        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb1: {\n+        StorageLive(_9);                 // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        _5 = &mut _4;                    // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _6 = &((*_5).0: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _7 = &((*_5).1: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = <usize as PartialOrd>::lt(move _6, move _7) -> bb2; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b usize) -> bool {<usize as PartialOrd>::lt}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _8) -> [0: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        _9 = Option::<usize>::None;      // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb4: {\n+        _10 = ((*_5).0: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _11 = <usize as Step>::forward_unchecked(_10, const 1_usize) -> bb5; // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> usize {<usize as Step>::forward_unchecked}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        ((*_5).0: usize) = move _11;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _9 = Option::<usize>::Some(_10); // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _12 = discriminant(_9);          // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        switchInt(move _12) -> [0: bb7, 1: bb8, otherwise: bb10]; // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    }\n+\n+    bb7: {\n+        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_4);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n+    }\n+\n+    bb8: {\n+        _13 = ((_9 as Some).0: usize);   // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _14 = opaque::<usize>(_13) -> bb9; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:9:9: 9:15\n+                                         // + literal: Const { ty: fn(usize) {opaque::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb9: {\n+        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb10: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    }\n+}"}, {"sha": "bf1380b30ff2a9b3d9e6394d9a05517f8b81cdf2", "filename": "tests/mir-opt/pre-codegen/loops.mapped.PreCodegen.after.mir", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.mapped.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.mapped.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.mapped.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,91 @@\n+// MIR for `mapped` after PreCodegen\n+\n+fn mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> U) -> () {\n+    debug iter => _1;                    // in scope 0 at $DIR/loops.rs:+0:21: +0:25\n+    debug f => _2;                       // in scope 0 at $DIR/loops.rs:+0:52: +0:53\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:72: +0:72\n+    let mut _3: std::iter::Map<impl Iterator<Item = T>, impl Fn(T) -> U>; // in scope 0 at $DIR/loops.rs:+1:14: +1:25\n+    let mut _4: std::iter::Map<impl Iterator<Item = T>, impl Fn(T) -> U>; // in scope 0 at $DIR/loops.rs:+1:14: +1:25\n+    let mut _5: std::iter::Map<impl Iterator<Item = T>, impl Fn(T) -> U>; // in scope 0 at $DIR/loops.rs:+1:14: +1:25\n+    let mut _6: &mut std::iter::Map<impl Iterator<Item = T>, impl Fn(T) -> U>; // in scope 0 at $DIR/loops.rs:+1:14: +1:25\n+    let mut _7: std::option::Option<U>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:25\n+    let mut _8: isize;                   // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _10: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:25\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/loops.rs:+1:14: +1:25\n+        let _9: U;                       // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _9;               // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+        }\n+    }\n+    scope 3 (inlined <Map<impl Iterator<Item = T>, impl Fn(T) -> U> as IntoIterator>::into_iter) { // at $DIR/loops.rs:14:14: 14:25\n+        debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_4);                 // scope 0 at $DIR/loops.rs:+1:14: +1:25\n+        StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:14: +1:25\n+        _3 = <impl Iterator<Item = T> as Iterator>::map::<U, impl Fn(T) -> U>(move _1, move _2) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:25\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:14:19: 14:22\n+                                         // + literal: Const { ty: fn(impl Iterator<Item = T>, impl Fn(T) -> U) -> Map<impl Iterator<Item = T>, impl Fn(T) -> U> {<impl Iterator<Item = T> as Iterator>::map::<U, impl Fn(T) -> U>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        _4 = move _3;                    // scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+        StorageDead(_3);                 // scope 0 at $DIR/loops.rs:+1:24: +1:25\n+        StorageLive(_5);                 // scope 0 at $DIR/loops.rs:+1:14: +1:25\n+        _5 = move _4;                    // scope 0 at $DIR/loops.rs:+1:14: +1:25\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb2: {\n+        StorageLive(_7);                 // scope 1 at $DIR/loops.rs:+1:14: +1:25\n+        _6 = &mut _5;                    // scope 1 at $DIR/loops.rs:+1:14: +1:25\n+        _7 = <Map<impl Iterator<Item = T>, impl Fn(T) -> U> as Iterator>::next(_6) -> [return: bb3, unwind: bb9]; // scope 1 at $DIR/loops.rs:+1:14: +1:25\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:14:14: 14:25\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut Map<impl Iterator<Item = T>, impl Fn(T) -> U>) -> Option<<Map<impl Iterator<Item = T>, impl Fn(T) -> U> as Iterator>::Item> {<Map<impl Iterator<Item = T>, impl Fn(T) -> U> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        _8 = discriminant(_7);           // scope 1 at $DIR/loops.rs:+1:14: +1:25\n+        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb8]; // scope 1 at $DIR/loops.rs:+1:14: +1:25\n+    }\n+\n+    bb4: {\n+        StorageDead(_7);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb5: {\n+        StorageDead(_5);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_4);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n+    }\n+\n+    bb6: {\n+        _9 = move ((_7 as Some).0: U);   // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _10 = opaque::<U>(move _9) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:15:9: 15:15\n+                                         // + literal: Const { ty: fn(U) {opaque::<U>}, val: Value(<ZST>) }\n+    }\n+\n+    bb7: {\n+        StorageDead(_7);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb8: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:25\n+    }\n+\n+    bb9 (cleanup): {\n+        drop(_5) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +4:2\n+    }\n+}"}, {"sha": "67f549a511c8a53710bba7d4c56e23a49eb20422", "filename": "tests/mir-opt/pre-codegen/loops.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags: -O -Zmir-opt-level=2 -g\n+// needs-unwind\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn int_range(start: usize, end: usize) {\n+    for i in start..end {\n+        opaque(i)\n+    }\n+}\n+\n+pub fn mapped<T, U>(iter: impl Iterator<Item = T>, f: impl Fn(T) -> U) {\n+    for x in iter.map(f) {\n+        opaque(x)\n+    }\n+}\n+\n+pub fn filter_mapped<T, U>(iter: impl Iterator<Item = T>, f: impl Fn(T) -> Option<U>) {\n+    for x in iter.filter_map(f) {\n+        opaque(x)\n+    }\n+}\n+\n+pub fn vec_move(mut v: Vec<impl Sized>) {\n+    for x in v {\n+        opaque(x)\n+    }\n+}\n+\n+#[inline(never)]\n+fn opaque(_: impl Sized) {}\n+\n+// EMIT_MIR loops.int_range.PreCodegen.after.mir\n+// EMIT_MIR loops.mapped.PreCodegen.after.mir\n+// EMIT_MIR loops.filter_mapped.PreCodegen.after.mir\n+// EMIT_MIR loops.vec_move.PreCodegen.after.mir"}, {"sha": "6cd5a66de00fcdee05a4e7f4ad4fb21c769e0cb8", "filename": "tests/mir-opt/pre-codegen/loops.vec_move.PreCodegen.after.mir", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,83 @@\n+// MIR for `vec_move` after PreCodegen\n+\n+fn vec_move(_1: Vec<impl Sized>) -> () {\n+    debug v => _1;                       // in scope 0 at $DIR/loops.rs:+0:17: +0:22\n+    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:41: +0:41\n+    let mut _2: std::vec::IntoIter<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _3: std::vec::IntoIter<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _4: &mut std::vec::IntoIter<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _5: std::option::Option<impl Sized>; // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    let mut _6: isize;                   // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _8: ();                          // in scope 0 at $DIR/loops.rs:+1:14: +1:15\n+    scope 1 {\n+        debug iter => _3;                // in scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        let _7: impl Sized;              // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _7;               // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+        _2 = <Vec<impl Sized> as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:26:14: 26:15\n+                                         // + literal: Const { ty: fn(Vec<impl Sized>) -> <Vec<impl Sized> as IntoIterator>::IntoIter {<Vec<impl Sized> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+        _3 = move _2;                    // scope 0 at $DIR/loops.rs:+1:14: +1:15\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb2: {\n+        StorageLive(_5);                 // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        _4 = &mut _3;                    // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        _5 = <std::vec::IntoIter<impl Sized> as Iterator>::next(_4) -> [return: bb3, unwind: bb9]; // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:26:14: 26:15\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<impl Sized>) -> Option<<std::vec::IntoIter<impl Sized> as Iterator>::Item> {<std::vec::IntoIter<impl Sized> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        _6 = discriminant(_5);           // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+        switchInt(move _6) -> [0: bb4, 1: bb6, otherwise: bb8]; // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+    }\n+\n+    bb4: {\n+        StorageDead(_5);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        drop(_3) -> bb5;                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb5: {\n+        StorageDead(_3);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        StorageDead(_2);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n+    }\n+\n+    bb6: {\n+        _7 = move ((_5 as Some).0: impl Sized); // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _8 = opaque::<impl Sized>(move _7) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/loops.rs:27:9: 27:15\n+                                         // + literal: Const { ty: fn(impl Sized) {opaque::<impl Sized>}, val: Value(<ZST>) }\n+    }\n+\n+    bb7: {\n+        StorageDead(_5);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n+    }\n+\n+    bb8: {\n+        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:15\n+    }\n+\n+    bb9 (cleanup): {\n+        drop(_3) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/loops.rs:+3:5: +3:6\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +4:2\n+    }\n+}"}, {"sha": "aba951acdd08d7d079afa4c0f6edffa26e497fcf", "filename": "tests/mir-opt/pre-codegen/slice_filter.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.rs?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -O -Zmir-opt-level=2 -Cdebuginfo=2\n+// ignore-debug: standard library debug assertions add a panic that breaks this optimization\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn variant_a(input: &[(usize, usize, usize, usize)]) -> usize {\n+    input.iter().filter(|(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n+}\n+\n+pub fn variant_b(input: &[(usize, usize, usize, usize)]) -> usize {\n+    input.iter().filter(|&&(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n+}\n+\n+// EMIT_MIR slice_filter.variant_a-{closure#0}.PreCodegen.after.mir\n+// EMIT_MIR slice_filter.variant_b-{closure#0}.PreCodegen.after.mir"}, {"sha": "91c8f299fdb209ee61c4bd4319badbcb69e31a2b", "filename": "tests/mir-opt/pre-codegen/slice_filter.variant_a-{closure#0}.PreCodegen.after.mir", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_a-%7Bclosure%230%7D.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_a-%7Bclosure%230%7D.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_a-%7Bclosure%230%7D.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,228 @@\n+// MIR for `variant_a::{closure#0}` after PreCodegen\n+\n+fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2: &&(usize, usize, usize, usize)) -> bool {\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n+    let mut _3: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+    let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+    let mut _5: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+    let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+    let mut _7: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+    let _8: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+    let mut _9: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+    let _10: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+    let mut _11: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n+    let _12: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+    let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+    let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+    let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+    let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+    let mut _21: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+    let mut _26: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+    let mut _27: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+    let mut _28: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n+    let _29: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+    let mut _30: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+    let mut _35: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+    let mut _36: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+    let mut _37: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n+    let _38: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+    let mut _39: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+    let mut _44: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+    scope 1 {\n+        debug a => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+        debug b => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+        debug c => _8;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+        debug d => _10;                  // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+        scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:7:40: 7:46\n+            debug self => _11;           // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            debug other => _13;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _14: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _15: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug self => _14;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug other => _15;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _16: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _17: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            }\n+        }\n+        scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:7:60: 7:66\n+            debug self => _28;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            debug other => _30;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _31: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _32: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug self => _31;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug other => _32;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _33: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _34: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            }\n+        }\n+        scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:7:50: 7:56\n+            debug self => _19;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            debug other => _21;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _22: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _23: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug self => _22;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug other => _23;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _24: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _25: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            }\n+        }\n+        scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:7:70: 7:76\n+            debug self => _37;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            debug other => _39;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _40: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _41: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug self => _40;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug other => _41;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _42: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _43: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+        _3 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+        _4 = &((*_3).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+        StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+        _5 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+        _6 = &((*_5).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+        StorageLive(_8);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+        _7 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+        _8 = &((*_7).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+        StorageLive(_10);                // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+        _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+        _10 = &((*_9).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+        StorageLive(_27);                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+        StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+        StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+        _11 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+        StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+        StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+        _12 = _8;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+        _13 = &_12;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+        _14 = deref_copy (*_11);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _15 = deref_copy (*_13);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_16);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _16 = (*_14);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_17);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _17 = (*_15);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _18 = Le(move _16, move _17);    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_17);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+        StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+        StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+        switchInt(move _18) -> [0: bb1, otherwise: bb2]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+    }\n+\n+    bb1: {\n+        StorageDead(_26);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+    }\n+\n+    bb2: {\n+        StorageLive(_26);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+        StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+        _19 = &_10;                      // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+        StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _20 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _21 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _22 = deref_copy (*_19);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _23 = deref_copy (*_21);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _24 = (*_22);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_25);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _25 = (*_23);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _26 = Le(move _24, move _25);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_25);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _27 = move _26;                  // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+        StorageDead(_26);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        switchInt(move _27) -> [0: bb3, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+    }\n+\n+    bb3: {\n+        StorageLive(_36);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+        StorageLive(_35);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+        StorageLive(_28);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+        _28 = &_8;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+        StorageLive(_30);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+        StorageLive(_29);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+        _29 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+        _30 = &_29;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+        _31 = deref_copy (*_28);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _32 = deref_copy (*_30);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_33);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _33 = (*_31);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_34);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _34 = (*_32);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _35 = Le(move _33, move _34);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_34);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_33);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_29);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+        StorageDead(_30);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+        StorageDead(_28);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+        switchInt(move _35) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+    }\n+\n+    bb4: {\n+        _36 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+    }\n+\n+    bb5: {\n+        StorageLive(_44);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+        StorageLive(_37);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+        _37 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+        StorageLive(_39);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageLive(_38);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        _38 = _10;                       // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        _39 = &_38;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        _40 = deref_copy (*_37);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _41 = deref_copy (*_39);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_42);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _42 = (*_40);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _43 = (*_41);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _44 = Le(move _42, move _43);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_42);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageDead(_38);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_39);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_37);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        _36 = move _44;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+    }\n+\n+    bb6: {\n+        StorageDead(_44);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_35);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        _0 = move _36;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+    }\n+\n+    bb7: {\n+        _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+    }\n+\n+    bb8: {\n+        StorageDead(_36);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_27);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_10);                // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_8);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+        return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n+    }\n+}"}, {"sha": "9f5fe95a8b4b0d118222f924e293e4a1c56b42a5", "filename": "tests/mir-opt/pre-codegen/slice_filter.variant_b-{closure#0}.PreCodegen.after.mir", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_b-%7Bclosure%230%7D.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_b-%7Bclosure%230%7D.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_b-%7Bclosure%230%7D.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,92 @@\n+// MIR for `variant_b::{closure#0}` after PreCodegen\n+\n+fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:11:25: 11:41], _2: &&(usize, usize, usize, usize)) -> bool {\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n+    let mut _3: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+    let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+    let mut _5: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+    let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+    let mut _7: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+    let _8: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+    let mut _9: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+    let _10: usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+    let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n+    let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+    let mut _13: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n+    let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n+    let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n+    let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n+    scope 1 {\n+        debug a => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n+        debug b => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n+        debug c => _8;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n+        debug d => _10;                  // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n+    }\n+\n+    bb0: {\n+        _3 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+        _4 = ((*_3).0: usize);           // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+        _5 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+        _6 = ((*_5).1: usize);           // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+        _7 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+        _8 = ((*_7).2: usize);           // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+        _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+        _10 = ((*_9).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+        StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+        StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+        _11 = Le(_4, _8);                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+    }\n+\n+    bb1: {\n+        StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+        StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+        goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+    }\n+\n+    bb2: {\n+        StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+        _12 = Le(_10, _6);               // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+        _13 = move _12;                  // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+        StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+        StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+        switchInt(move _13) -> [0: bb3, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+    }\n+\n+    bb3: {\n+        StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+        StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+        _14 = Le(_8, _4);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+        switchInt(move _14) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+    }\n+\n+    bb4: {\n+        _15 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+    }\n+\n+    bb5: {\n+        StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+        _16 = Le(_6, _10);               // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+        _15 = move _16;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+    }\n+\n+    bb6: {\n+        StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+        StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+        _0 = move _15;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+    }\n+\n+    bb7: {\n+        _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+    }\n+\n+    bb8: {\n+        StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+        StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+        return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n+    }\n+}"}, {"sha": "4dd11c1e529538fa8aa85c792766f556f15cc79f", "filename": "tests/mir-opt/pre-codegen/slice_iter.enumerated_loop.PreCodegen.after.mir", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.enumerated_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.enumerated_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.enumerated_loop.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,213 @@\n+// MIR for `enumerated_loop` after PreCodegen\n+\n+fn enumerated_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n+    debug slice => _1;                   // in scope 0 at $DIR/slice_iter.rs:+0:31: +0:36\n+    debug f => _2;                       // in scope 0 at $DIR/slice_iter.rs:+0:47: +0:48\n+    let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:70: +0:70\n+    let mut _13: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:19: +1:31\n+    let mut _14: std::iter::Enumerate<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:19: +1:43\n+    let mut _15: std::iter::Enumerate<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:19: +1:43\n+    let mut _16: &mut std::iter::Enumerate<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:19: +1:43\n+    let mut _17: std::option::Option<(usize, &T)>; // in scope 0 at $DIR/slice_iter.rs:+1:19: +1:43\n+    let mut _18: isize;                  // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n+    let mut _21: &impl Fn(usize, &T);    // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n+    let mut _22: (usize, &T);            // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:16\n+    let _23: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:19: +1:43\n+    scope 1 {\n+        debug iter => _15;               // in scope 1 at $DIR/slice_iter.rs:+1:19: +1:43\n+        let _19: usize;                  // in scope 1 at $DIR/slice_iter.rs:+1:10: +1:11\n+        let _20: &T;                     // in scope 1 at $DIR/slice_iter.rs:+1:13: +1:14\n+        scope 2 {\n+            debug i => _19;              // in scope 2 at $DIR/slice_iter.rs:+1:10: +1:11\n+            debug x => _20;              // in scope 2 at $DIR/slice_iter.rs:+1:13: +1:14\n+        }\n+    }\n+    scope 3 (inlined core::slice::<impl [T]>::iter) { // at $DIR/slice_iter.rs:42:25: 42:31\n+        debug self => _1;                // in scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        scope 4 (inlined std::slice::Iter::<'_, T>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            debug slice => _1;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _4: *const T;            // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _5: bool;            // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _6: usize;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _8: usize;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _9: *mut T;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _11: std::ptr::NonNull<T>; // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _12: *const T;       // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            scope 5 {\n+                debug ptr => _4;         // in scope 5 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                scope 6 {\n+                    let _7: *const T;    // in scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    scope 7 {\n+                        debug end => _7; // in scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        scope 13 (inlined NonNull::<T>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                            debug ptr => _9; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _10: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            scope 14 {\n+                                scope 15 (inlined NonNull::<T>::new_unchecked::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _9; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    scope 16 (inlined ptr::mut_ptr::<impl *mut T>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                                        debug self => _9; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _24: *mut u8; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        scope 17 {\n+                                            scope 18 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _24; // in scope 18 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                scope 19 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _24; // in scope 19 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    scope 20 {\n+                                                        scope 21 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _24; // in scope 21 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    scope 9 (inlined invalid::<T>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug addr => _8; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        scope 10 {\n+                        }\n+                    }\n+                    scope 11 (inlined ptr::const_ptr::<impl *const T>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug self => _4; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug count => _6; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        scope 12 {\n+                        }\n+                    }\n+                }\n+            }\n+            scope 8 (inlined core::slice::<impl [T]>::as_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug self => _1;        // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _3: *const [T];  // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+            }\n+        }\n+    }\n+    scope 22 (inlined <std::slice::Iter<'_, T> as Iterator>::enumerate) { // at $DIR/slice_iter.rs:42:32: 42:43\n+        debug self => _13;               // in scope 22 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+        scope 23 (inlined Enumerate::<std::slice::Iter<'_, T>>::new) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+            debug iter => _13;           // in scope 23 at $SRC_DIR/core/src/iter/adapters/enumerate.rs:LL:COL\n+        }\n+    }\n+    scope 24 (inlined <Enumerate<std::slice::Iter<'_, T>> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:42:19: 42:43\n+        debug self => _14;               // in scope 24 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_13);                // scope 0 at $DIR/slice_iter.rs:+1:19: +1:31\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_3);                 // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _3 = &raw const (*_1);           // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _4 = move _3 as *const T (PtrToPtr); // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_5);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _5 = const _;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb1: {\n+        StorageLive(_6);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _6 = Len((*_1));                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _7 = Offset(_4, _6);             // scope 12 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageDead(_6);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _8 = Len((*_1));                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _7 = _8 as *const T (Transmute); // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_11);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_9);                 // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _9 = _4 as *mut T (PtrToPtr);    // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _10 = _9 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _11 = NonNull::<T> { pointer: _10 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_9);                 // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _12 = _7;                        // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _13 = std::slice::Iter::<'_, T> { ptr: move _11, end: move _12, _marker: const ZeroSized: PhantomData<&T> }; // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&T>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_11);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _14 = Enumerate::<std::slice::Iter<'_, T>> { iter: move _13, count: const 0_usize }; // scope 23 at $SRC_DIR/core/src/iter/adapters/enumerate.rs:LL:COL\n+        StorageDead(_13);                // scope 0 at $DIR/slice_iter.rs:+1:42: +1:43\n+        StorageLive(_15);                // scope 0 at $DIR/slice_iter.rs:+1:19: +1:43\n+        _15 = move _14;                  // scope 0 at $DIR/slice_iter.rs:+1:19: +1:43\n+        goto -> bb4;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb4: {\n+        StorageLive(_17);                // scope 1 at $DIR/slice_iter.rs:+1:19: +1:43\n+        _16 = &mut _15;                  // scope 1 at $DIR/slice_iter.rs:+1:19: +1:43\n+        _17 = <Enumerate<std::slice::Iter<'_, T>> as Iterator>::next(_16) -> [return: bb5, unwind: bb11]; // scope 1 at $DIR/slice_iter.rs:+1:19: +1:43\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:42:19: 42:43\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::Iter<'_, T>>) -> Option<<Enumerate<std::slice::Iter<'_, T>> as Iterator>::Item> {<Enumerate<std::slice::Iter<'_, T>> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        _18 = discriminant(_17);         // scope 1 at $DIR/slice_iter.rs:+1:19: +1:43\n+        switchInt(move _18) -> [0: bb6, 1: bb8, otherwise: bb10]; // scope 1 at $DIR/slice_iter.rs:+1:19: +1:43\n+    }\n+\n+    bb6: {\n+        StorageDead(_17);                // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_15);                // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n+        drop(_2) -> bb7;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb7: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+4:2: +4:2\n+    }\n+\n+    bb8: {\n+        _19 = (((_17 as Some).0: (usize, &T)).0: usize); // scope 1 at $DIR/slice_iter.rs:+1:10: +1:11\n+        _20 = (((_17 as Some).0: (usize, &T)).1: &T); // scope 1 at $DIR/slice_iter.rs:+1:13: +1:14\n+        StorageLive(_21);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        _21 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        StorageLive(_22);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:16\n+        _22 = (_19, _20);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:16\n+        _23 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _21, move _22) -> [return: bb9, unwind: bb11]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:16\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:43:9: 43:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(usize, &T), (usize, &T)) -> <impl Fn(usize, &T) as FnOnce<(usize, &T)>>::Output {<impl Fn(usize, &T) as Fn<(usize, &T)>>::call}, val: Value(<ZST>) }\n+    }\n+\n+    bb9: {\n+        StorageDead(_22);                // scope 2 at $DIR/slice_iter.rs:+2:15: +2:16\n+        StorageDead(_21);                // scope 2 at $DIR/slice_iter.rs:+2:15: +2:16\n+        StorageDead(_17);                // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb10: {\n+        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:19: +1:43\n+    }\n+\n+    bb11 (cleanup): {\n+        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb12 (cleanup): {\n+        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +4:2\n+    }\n+}"}, {"sha": "ca7a4a64f4574243380b3e0257d2decfa743ad55", "filename": "tests/mir-opt/pre-codegen/slice_iter.range_loop.PreCodegen.after.mir", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -0,0 +1,155 @@\n+// MIR for `range_loop` after PreCodegen\n+\n+fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n+    debug slice => _1;                   // in scope 0 at $DIR/slice_iter.rs:+0:26: +0:31\n+    debug f => _2;                       // in scope 0 at $DIR/slice_iter.rs:+0:42: +0:43\n+    let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:65: +0:65\n+    let mut _3: usize;                   // in scope 0 at $DIR/slice_iter.rs:+1:17: +1:28\n+    let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _10: std::option::Option<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _13: isize;                  // in scope 0 at $DIR/slice_iter.rs:+1:5: +4:6\n+    let mut _15: usize;                  // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n+    let mut _16: bool;                   // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n+    let mut _18: &impl Fn(usize, &T);    // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:10\n+    let mut _19: (usize, &T);            // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:16\n+    let _20: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        let _14: usize;                  // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        scope 2 {\n+            debug i => _14;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+            let _17: &T;                 // in scope 2 at $DIR/slice_iter.rs:+2:13: +2:14\n+            scope 3 {\n+                debug x => _17;          // in scope 3 at $DIR/slice_iter.rs:+2:13: +2:14\n+            }\n+        }\n+        scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/slice_iter.rs:49:14: 49:28\n+            debug self => _6;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            scope 6 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                debug self => _6;        // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _7: &usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _8: &usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _9: bool;        // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _11: usize;          // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _12: usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                scope 7 {\n+                    debug old => _11;    // in scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    scope 8 {\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    scope 4 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:49:14: 49:28\n+        debug self => _4;                // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 0 at $DIR/slice_iter.rs:+1:17: +1:28\n+        _3 = Len((*_1));                 // scope 0 at $DIR/slice_iter.rs:+1:17: +1:28\n+        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _3 }; // scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+        StorageDead(_3);                 // scope 0 at $DIR/slice_iter.rs:+1:27: +1:28\n+        StorageLive(_5);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+        _5 = move _4;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +4:6\n+    }\n+\n+    bb1: {\n+        StorageLive(_10);                // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        _6 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _7 = &((*_6).0: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = &((*_6).1: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _9 = <usize as PartialOrd>::lt(move _7, move _8) -> [return: bb2, unwind: bb13]; // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b usize) -> bool {<usize as PartialOrd>::lt}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        _10 = Option::<usize>::None;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb4: {\n+        _11 = ((*_6).0: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _12 = <usize as Step>::forward_unchecked(_11, const 1_usize) -> [return: bb5, unwind: bb13]; // scope 8 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> usize {<usize as Step>::forward_unchecked}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        ((*_6).0: usize) = move _12;     // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _10 = Option::<usize>::Some(_11); // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _13 = discriminant(_10);         // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        switchInt(move _13) -> [0: bb7, 1: bb9, otherwise: bb12]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+    }\n+\n+    bb7: {\n+        StorageDead(_10);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n+        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+4:5: +4:6\n+        drop(_2) -> bb8;                 // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n+    }\n+\n+    bb8: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+5:2: +5:2\n+    }\n+\n+    bb9: {\n+        _14 = ((_10 as Some).0: usize);  // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        _15 = Len((*_1));                // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+        _16 = Lt(_14, _15);              // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+        assert(move _16, \"index out of bounds: the length is {} but the index is {}\", move _15, _14) -> [success: bb10, unwind: bb13]; // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+    }\n+\n+    bb10: {\n+        _17 = &(*_1)[_14];               // scope 2 at $DIR/slice_iter.rs:+2:17: +2:26\n+        StorageLive(_18);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n+        _18 = &_2;                       // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n+        StorageLive(_19);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        _19 = (_14, _17);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        _20 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _18, move _19) -> [return: bb11, unwind: bb13]; // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:51:9: 51:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(usize, &T), (usize, &T)) -> <impl Fn(usize, &T) as FnOnce<(usize, &T)>>::Output {<impl Fn(usize, &T) as Fn<(usize, &T)>>::call}, val: Value(<ZST>) }\n+    }\n+\n+    bb11: {\n+        StorageDead(_19);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n+        StorageDead(_18);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n+        StorageDead(_10);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n+        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +4:6\n+    }\n+\n+    bb12: {\n+        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+    }\n+\n+    bb13 (cleanup): {\n+        drop(_2) -> [return: bb14, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n+    }\n+\n+    bb14 (cleanup): {\n+        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +5:2\n+    }\n+}"}, {"sha": "a1cd85e753f6381a8eca106f0d2e6fabe947a493", "filename": "tests/mir-opt/pre-codegen/slice_iter.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a3d1523bde3a16f8a92dbaac01d211ba911c3/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.rs?ref=774a3d1523bde3a16f8a92dbaac01d211ba911c3", "patch": "@@ -36,3 +36,18 @@ pub fn reverse_loop<'a, T>(slice: &'a [T], f: impl Fn(&T)) {\n         f(x)\n     }\n }\n+\n+// EMIT_MIR slice_iter.enumerated_loop.PreCodegen.after.mir\n+pub fn enumerated_loop<'a, T>(slice: &'a [T], f: impl Fn(usize, &T)) {\n+    for (i, x) in slice.iter().enumerate() {\n+        f(i, x)\n+    }\n+}\n+\n+// EMIT_MIR slice_iter.range_loop.PreCodegen.after.mir\n+pub fn range_loop<'a, T>(slice: &'a [T], f: impl Fn(usize, &T)) {\n+    for i in 0..slice.len() {\n+        let x = &slice[i];\n+        f(i, x)\n+    }\n+}"}, {"sha": "be32f40f132277752b6ef37db089881dd66fa2c1", "filename": "tests/mir-opt/slice_filter.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.rs?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,20 +0,0 @@\n-fn main() {\n-    let input = vec![];\n-    let _variant_a_result = variant_a(&input);\n-    let _variant_b_result = variant_b(&input);\n-}\n-\n-pub fn variant_a(input: &[(usize, usize, usize, usize)]) -> usize {\n-    input.iter().filter(|(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n-}\n-\n-pub fn variant_b(input: &[(usize, usize, usize, usize)]) -> usize {\n-    input.iter().filter(|&&(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n-}\n-\n-// EMIT_MIR slice_filter.variant_a-{closure#0}.ReferencePropagation.diff\n-// EMIT_MIR slice_filter.variant_a-{closure#0}.CopyProp.diff\n-// EMIT_MIR slice_filter.variant_a-{closure#0}.DestinationPropagation.diff\n-// EMIT_MIR slice_filter.variant_b-{closure#0}.CopyProp.diff\n-// EMIT_MIR slice_filter.variant_b-{closure#0}.ReferencePropagation.diff\n-// EMIT_MIR slice_filter.variant_b-{closure#0}.DestinationPropagation.diff"}, {"sha": "60e5056c7a92609f677aeda7b7a6fac661d753c1", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "removed", "additions": 0, "deletions": 279, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,279 +0,0 @@\n-- // MIR for `variant_a::{closure#0}` before CopyProp\n-+ // MIR for `variant_a::{closure#0}` after CopyProp\n-  \n-  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n-      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n-      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n-      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n-      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _31: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _32: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _37: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _38: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _43: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _44: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _49: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _50: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _31;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _32;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _37;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _38;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _43;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _44;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _49;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _50;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_31);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _31 = _29;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_32);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _32 = _30;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _33 = (*_31);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _34 = (*_32);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_32);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_31);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-      }\n-  \n-      bb1: {\n-          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  \n-      bb2: {\n-          StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_37);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _37 = _35;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_38);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _38 = _36;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _39 = (*_37);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _40 = (*_38);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_38);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_37);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb3: {\n-          StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n-      }\n-  \n-      bb4: {\n-          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-      }\n-  \n-      bb5: {\n-          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_43);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _43 = _41;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_44);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _44 = _42;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _45 = (*_43);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _46 = (*_44);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_44);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_43);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  \n-      bb6: {\n-          _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb7: {\n-          StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_49);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _49 = _47;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_50);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _50 = _48;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _51 = (*_49);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _52 = (*_50);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_50);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_49);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb8: {\n-          StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  }\n-  "}, {"sha": "afdcf57815f387dd20e15a3c3cc05bdfd645ba13", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,165 +0,0 @@\n-- // MIR for `variant_a::{closure#0}` before DestinationPropagation\n-+ // MIR for `variant_a::{closure#0}` after DestinationPropagation\n-  \n-  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n-      let mut _3: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n-      let mut _4: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-      let mut _5: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _6: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _9: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _10: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _11: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _12: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      scope 1 {\n-          debug a => &((*_9).0: usize);    // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-          debug b => &((*_10).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-          debug c => &((*_11).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-          debug d => &((*_12).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => &&((*_9).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &&((*_11).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => &((*_9).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => &((*_11).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _13: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _14: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => &&((*_11).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &&((*_9).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => &((*_11).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => &((*_9).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _15: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _16: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => &&((*_12).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &&((*_10).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => &((*_12).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => &((*_10).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _17: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _18: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => &&((*_10).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &&((*_12).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => &((*_10).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => &((*_12).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _19: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _20: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _10 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _11 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _12 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         StorageLive(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageLive(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _13 = ((*_9).0: usize);          // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _14 = ((*_11).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _4 = Le(move _13, move _14);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-      }\n-  \n-      bb1: {\n-          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  \n-      bb2: {\n--         StorageLive(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _15 = ((*_11).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _16 = ((*_9).0: usize);          // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _7 = Le(move _15, move _16);     // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          switchInt(move _7) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb3: {\n--         StorageDead(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n-      }\n-  \n-      bb4: {\n--         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-      }\n-  \n-      bb5: {\n--         StorageLive(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _17 = ((*_12).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _18 = ((*_10).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _5 = Le(move _17, move _18);     // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _3 = move _5;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n--         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         switchInt(move _5) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  \n-      bb6: {\n--         _6 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-+         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb7: {\n--         StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _19 = ((*_10).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _20 = ((*_12).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _8 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _0 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _6 = move _8;                    // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb8: {\n--         StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _0 = move _6;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  }\n-  "}, {"sha": "2534eeef43297c1278ecb8113c8b5775a8ce6d95", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.ReferencePropagation.diff", "status": "removed", "additions": 0, "deletions": 267, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,267 +0,0 @@\n-- // MIR for `variant_a::{closure#0}` before ReferencePropagation\n-+ // MIR for `variant_a::{closure#0}` after ReferencePropagation\n-  \n-  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n-      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n-      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n-      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n-      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _31: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _32: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _37: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _38: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _43: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _44: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _49: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      let mut _50: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-      scope 1 {\n--         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n--         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n--         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n--         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         debug a => &((*_25).0: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         debug b => &((*_26).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         debug c => &((*_27).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         debug d => &((*_28).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n--             debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--             debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &&((*_25).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &&((*_27).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => &((*_25).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => &((*_27).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n--             debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--             debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &&((*_27).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &&((*_25).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => &((*_27).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => &((*_25).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n--             debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--             debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &&((*_28).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &&((*_26).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => &((*_28).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => &((*_26).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n--             debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--             debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &&((*_26).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &&((*_28).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => &((*_26).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => &((*_28).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n--         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n--         _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n--         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _33 = ((*_25).0: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _34 = ((*_27).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-      }\n-  \n-      bb1: {\n-          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  \n-      bb2: {\n-          StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n--         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n--         _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n--         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _39 = ((*_27).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _40 = ((*_25).0: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb3: {\n-          StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n-      }\n-  \n-      bb4: {\n-          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-      }\n-  \n-      bb5: {\n-          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n--         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n--         _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n--         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _45 = ((*_28).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _46 = ((*_26).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  \n-      bb6: {\n-          _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb7: {\n-          StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n--         StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n--         _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n--         StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _51 = ((*_26).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _52 = ((*_28).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-      }\n-  \n-      bb8: {\n-          StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-      }\n-  }\n-  "}, {"sha": "5e4bdbdfa2e2f9683e0b5206db7181c30c81db94", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.CopyProp.diff", "status": "removed", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,139 +0,0 @@\n-- // MIR for `variant_b::{closure#0}` before CopyProp\n-+ // MIR for `variant_b::{closure#0}` after CopyProp\n-  \n-  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n-      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n-      let mut _9: usize;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:43\n-      let mut _10: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:47: +0:48\n-      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n-      let mut _12: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:53\n-      let mut _13: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:57: +0:58\n-      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n-      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n-      let mut _16: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:63\n-      let mut _17: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:67: +0:68\n-      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n-      let mut _19: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:73\n-      let mut _20: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n-      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n-      }\n-  \n-      bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-          _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n--         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n--         _9 = _3;                         // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n--         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n--         _10 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n--         _8 = Le(move _9, move _10);      // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n--         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n--         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n-+         _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-      }\n-  \n-      bb1: {\n-          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  \n-      bb2: {\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n--         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n--         _16 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n--         StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n--         _17 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n--         _15 = Le(move _16, move _17);    // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n--         StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n--         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n-+         _15 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n-          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb3: {\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n-          return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n-      }\n-  \n-      bb4: {\n-          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-      }\n-  \n-      bb5: {\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n--         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n--         _12 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n--         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n--         _13 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n--         _11 = Le(move _12, move _13);    // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n--         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-+         _11 = Le(_6, _4);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-          _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  \n-      bb6: {\n-          _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb7: {\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n--         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n--         _19 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n--         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         _20 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         _18 = Le(move _19, move _20);    // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n--         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         _18 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n-          _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb8: {\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  }\n-  "}, {"sha": "45af6600cd4e8ed268756a700123dbe015795fea", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.DestinationPropagation.diff", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,109 +0,0 @@\n-- // MIR for `variant_b::{closure#0}` before DestinationPropagation\n-+ // MIR for `variant_b::{closure#0}` after DestinationPropagation\n-  \n-  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n-      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n-      let mut _9: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n-      let mut _10: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n-      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n-      let mut _13: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _14: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _15: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _16: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n-      }\n-  \n-      bb0: {\n-          _13 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          _3 = ((*_13).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          _14 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          _4 = ((*_14).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          _15 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          _5 = ((*_15).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          _16 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-          _6 = ((*_16).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n--         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n-          _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-      }\n-  \n-      bb1: {\n-          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  \n-      bb2: {\n--         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n-          _11 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n-          switchInt(move _11) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb3: {\n--         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n-      }\n-  \n-      bb4: {\n--         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-      }\n-  \n-      bb5: {\n--         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-          _9 = Le(_6, _4);                 // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n--         _7 = move _9;                    // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n--         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n--         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-+         switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  \n-      bb6: {\n--         _10 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-+         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb7: {\n--         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n--         _12 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n--         _10 = move _12;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n-+         _0 = Le(_4, _6);                 // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb8: {\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         _0 = move _10;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  }\n-  "}, {"sha": "d1241c6b0245c6869de2a60361509569cc0406d3", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.ReferencePropagation.diff", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f85ab544dfbbce7448993c490ad16c176339b939/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.ReferencePropagation.diff?ref=f85ab544dfbbce7448993c490ad16c176339b939", "patch": "@@ -1,103 +0,0 @@\n-- // MIR for `variant_b::{closure#0}` before ReferencePropagation\n-+ // MIR for `variant_b::{closure#0}` after ReferencePropagation\n-  \n-  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n-      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n-      let mut _9: usize;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:43\n-      let mut _10: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:47: +0:48\n-      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n-      let mut _12: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:53\n-      let mut _13: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:57: +0:58\n-      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n-      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n-      let mut _16: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:63\n-      let mut _17: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:67: +0:68\n-      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n-      let mut _19: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:73\n-      let mut _20: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n-      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n-      }\n-  \n-      bb0: {\n-          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-          _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n-          _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-      }\n-  \n-      bb1: {\n-          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  \n-      bb2: {\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n-          _15 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n-          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb3: {\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n-      }\n-  \n-      bb4: {\n-          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-      }\n-  \n-      bb5: {\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-          _11 = Le(_6, _4);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-          _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  \n-      bb6: {\n-          _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb7: {\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n-          _18 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n-          _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-      }\n-  \n-      bb8: {\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-      }\n-  }\n-  "}]}