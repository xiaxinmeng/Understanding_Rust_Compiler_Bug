{"sha": "730c6f3e57a4068547d2d08e7a84efea215cd1ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMGM2ZjNlNTdhNDA2ODU0N2QyZDA4ZTdhODRlZmVhMjE1Y2QxZWU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-27T19:28:24Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-22T20:34:38Z"}, "message": "Preserve substitutions when trying to prove trait obligation\n\n`mk_obligation_for_def_id` is only correct if the trait and self type do\nnot have any substitutions. Use a different method,\n`mk_trait_obligation_with_new_self_ty` that is more clear about what is\nhappening.", "tree": {"sha": "5c5e0693ae9980b7c99ce0b772d23ef6d7ef6ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c5e0693ae9980b7c99ce0b772d23ef6d7ef6ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730c6f3e57a4068547d2d08e7a84efea215cd1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730c6f3e57a4068547d2d08e7a84efea215cd1ee", "html_url": "https://github.com/rust-lang/rust/commit/730c6f3e57a4068547d2d08e7a84efea215cd1ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730c6f3e57a4068547d2d08e7a84efea215cd1ee/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "20de0b786ed70d3a2cccae7b9f882d21abc01ade", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/730c6f3e57a4068547d2d08e7a84efea215cd1ee/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730c6f3e57a4068547d2d08e7a84efea215cd1ee/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=730c6f3e57a4068547d2d08e7a84efea215cd1ee", "patch": "@@ -1000,12 +1000,11 @@ trait InferCtxtPrivExt<'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     );\n \n-    fn mk_obligation_for_def_id(\n+    fn mk_trait_obligation_with_new_self_ty(\n         &self,\n-        def_id: DefId,\n-        output_ty: Ty<'tcx>,\n-        cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+        new_self_ty: Ty<'tcx>,\n     ) -> PredicateObligation<'tcx>;\n \n     fn maybe_report_ambiguity(\n@@ -1380,16 +1379,22 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn mk_obligation_for_def_id(\n+    fn mk_trait_obligation_with_new_self_ty(\n         &self,\n-        def_id: DefId,\n-        output_ty: Ty<'tcx>,\n-        cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+        new_self_ty: Ty<'tcx>,\n     ) -> PredicateObligation<'tcx> {\n-        let new_trait_ref =\n-            ty::TraitRef { def_id, substs: self.tcx.mk_substs_trait(output_ty, &[]) };\n-        Obligation::new(cause, param_env, new_trait_ref.without_const().to_predicate(self.tcx))\n+        let trait_ref = trait_ref.map_bound_ref(|tr| ty::TraitRef {\n+            substs: self.tcx.mk_substs_trait(new_self_ty, &tr.substs[1..]),\n+            ..*tr\n+        });\n+\n+        Obligation::new(\n+            ObligationCause::dummy(),\n+            param_env,\n+            trait_ref.without_const().to_predicate(self.tcx),\n+        )\n     }\n \n     fn maybe_report_ambiguity("}, {"sha": "6712ddf0ae544e9cb99649320852662bf040cbd6", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/730c6f3e57a4068547d2d08e7a84efea215cd1ee/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730c6f3e57a4068547d2d08e7a84efea215cd1ee/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=730c6f3e57a4068547d2d08e7a84efea215cd1ee", "patch": "@@ -532,14 +532,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         let msg = format!(\"use parentheses to call the {}\", callable);\n \n-        let obligation = self.mk_obligation_for_def_id(\n-            trait_ref.def_id(),\n-            output_ty.skip_binder(),\n-            obligation.cause.clone(),\n+        let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n             obligation.param_env,\n+            trait_ref,\n+            output_ty.skip_binder(),\n         );\n \n-        match self.evaluate_obligation(&obligation) {\n+        match self.evaluate_obligation(&new_obligation) {\n             Ok(\n                 EvaluationResult::EvaluatedToOk\n                 | EvaluationResult::EvaluatedToOkModuloRegions\n@@ -694,7 +693,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) {\n-        let trait_ref = trait_ref.skip_binder();\n         let span = obligation.cause.span;\n \n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n@@ -705,17 +703,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let mut trait_type = trait_ref.self_ty();\n+            let mut suggested_ty = trait_ref.self_ty();\n \n             for refs_remaining in 0..refs_number {\n-                if let ty::Ref(_, t_type, _) = trait_type.kind {\n-                    trait_type = t_type;\n+                if let ty::Ref(_, inner_ty, _) = suggested_ty.kind {\n+                    suggested_ty = inner_ty;\n \n-                    let new_obligation = self.mk_obligation_for_def_id(\n-                        trait_ref.def_id,\n-                        trait_type,\n-                        ObligationCause::dummy(),\n+                    let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n                         obligation.param_env,\n+                        trait_ref,\n+                        suggested_ty,\n                     );\n \n                     if self.predicate_may_hold(&new_obligation) {\n@@ -782,20 +779,20 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                let trait_type = match mutability {\n+                let suggested_ty = match mutability {\n                     hir::Mutability::Mut => self.tcx.mk_imm_ref(region, t_type),\n                     hir::Mutability::Not => self.tcx.mk_mut_ref(region, t_type),\n                 };\n \n-                let new_obligation = self.mk_obligation_for_def_id(\n-                    trait_ref.skip_binder().def_id,\n-                    trait_type,\n-                    ObligationCause::dummy(),\n+                let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n+                    &trait_ref,\n+                    suggested_ty,\n                 );\n-\n-                if self.evaluate_obligation_no_overflow(&new_obligation).must_apply_modulo_regions()\n-                {\n+                let suggested_ty_would_satisfy_obligation = self\n+                    .evaluate_obligation_no_overflow(&new_obligation)\n+                    .must_apply_modulo_regions();\n+                if suggested_ty_would_satisfy_obligation {\n                     let sp = self\n                         .tcx\n                         .sess\n@@ -812,7 +809,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err.note(&format!(\n                             \"`{}` is implemented for `{:?}`, but not for `{:?}`\",\n                             trait_ref.print_only_trait_path(),\n-                            trait_type,\n+                            suggested_ty,\n                             trait_ref.skip_binder().self_ty(),\n                         ));\n                     }"}]}