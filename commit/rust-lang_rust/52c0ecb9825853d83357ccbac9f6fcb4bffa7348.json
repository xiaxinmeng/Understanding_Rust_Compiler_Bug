{"sha": "52c0ecb9825853d83357ccbac9f6fcb4bffa7348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzBlY2I5ODI1ODUzZDgzMzU3Y2NiYWM5ZjZmY2I0YmZmYTczNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-06T17:44:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-06T17:44:58Z"}, "message": "Merge #8380\n\n8380: infer: remove `record_pat_field_resolutions` field r=jonas-schievink a=jonas-schievink\n\nSame as https://github.com/rust-analyzer/rust-analyzer/pull/8376, this\r\ncan be computed from other data\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "cce18424094010e01c366703f4ed771a3e1dd479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce18424094010e01c366703f4ed771a3e1dd479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c0ecb9825853d83357ccbac9f6fcb4bffa7348", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbJ4aCRBK7hj4Ov3rIwAAdHIIABrK/YCqZcfFfmO2M0bmd11J\niy5UX2Y+Lo/kgwNgkm01P6c4OZKAS3dO8fuIT3AEcwI10yhmkLHrcq6RUrLRPrGo\n3xukhXsSwrxkxByyAYrArego9jQHroi4c2lzTBgEgh8wEmbpR5EaMXV5X+abm6Y9\n6Wz1pN/iBWRaiKt04r+BmelvQs5EB8GGHwm23u6sdXak70DDZdvJkXXeA7sCksF/\nYfRlC8JLNSO7j0SVPv3179x26GlYUBYe+fSDjlZ/KxIj41sDEszS53LdFKnPiFMV\nRGic2s6l4pbarKi14uQ/rr+Xg3EGtG4xV6J95uobwTaqr2+AZZ/zHF34cxqB1lw=\n=6AAZ\n-----END PGP SIGNATURE-----\n", "payload": "tree cce18424094010e01c366703f4ed771a3e1dd479\nparent e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466\nparent 230c763648ad87e07d843a52c134b12d1b7397f4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617731098 +0000\ncommitter GitHub <noreply@github.com> 1617731098 +0000\n\nMerge #8380\n\n8380: infer: remove `record_pat_field_resolutions` field r=jonas-schievink a=jonas-schievink\n\nSame as https://github.com/rust-analyzer/rust-analyzer/pull/8376, this\r\ncan be computed from other data\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c0ecb9825853d83357ccbac9f6fcb4bffa7348", "html_url": "https://github.com/rust-lang/rust/commit/52c0ecb9825853d83357ccbac9f6fcb4bffa7348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c0ecb9825853d83357ccbac9f6fcb4bffa7348/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466", "html_url": "https://github.com/rust-lang/rust/commit/e6a1c9ca60c19bf3b02b302e21d9f9fd9bd8a466"}, {"sha": "230c763648ad87e07d843a52c134b12d1b7397f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/230c763648ad87e07d843a52c134b12d1b7397f4", "html_url": "https://github.com/rust-lang/rust/commit/230c763648ad87e07d843a52c134b12d1b7397f4"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "ce6f3c00806cb992d88b927ecd6250db57017ad6", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52c0ecb9825853d83357ccbac9f6fcb4bffa7348/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c0ecb9825853d83357ccbac9f6fcb4bffa7348/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=52c0ecb9825853d83357ccbac9f6fcb4bffa7348", "patch": "@@ -185,12 +185,16 @@ impl SourceAnalyzer {\n \n     pub(crate) fn resolve_record_pat_field(\n         &self,\n-        _db: &dyn HirDatabase,\n+        db: &dyn HirDatabase,\n         field: &ast::RecordPatField,\n     ) -> Option<Field> {\n-        let pat_id = self.pat_id(&field.pat()?)?;\n-        let struct_field = self.infer.as_ref()?.record_pat_field_resolution(pat_id)?;\n-        Some(struct_field.into())\n+        let field_name = field.field_name()?.as_name();\n+        let record_pat = ast::RecordPat::cast(field.syntax().parent().and_then(|p| p.parent())?)?;\n+        let pat_id = self.pat_id(&record_pat.into())?;\n+        let variant = self.infer.as_ref()?.variant_resolution_for_pat(pat_id)?;\n+        let variant_data = variant.variant_data(db.upcast());\n+        let field = FieldId { parent: variant, local_id: variant_data.field(&field_name)? };\n+        Some(field.into())\n     }\n \n     pub(crate) fn resolve_macro_call("}, {"sha": "efe9198cc924b8a801a9b6b39ce0bc77e67ef6b2", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52c0ecb9825853d83357ccbac9f6fcb4bffa7348/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c0ecb9825853d83357ccbac9f6fcb4bffa7348/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=52c0ecb9825853d83357ccbac9f6fcb4bffa7348", "patch": "@@ -131,8 +131,7 @@ pub struct InferenceResult {\n     method_resolutions: FxHashMap<ExprId, FunctionId>,\n     /// For each field access expr, records the field it resolves to.\n     field_resolutions: FxHashMap<ExprId, FieldId>,\n-    record_pat_field_resolutions: FxHashMap<PatId, FieldId>,\n-    /// For each struct literal, records the variant it resolves to.\n+    /// For each struct literal or pattern, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n     /// For each associated item record what it resolves to\n     assoc_resolutions: FxHashMap<ExprOrPatId, AssocItemId>,\n@@ -151,9 +150,6 @@ impl InferenceResult {\n     pub fn field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n         self.field_resolutions.get(&expr).copied()\n     }\n-    pub fn record_pat_field_resolution(&self, pat: PatId) -> Option<FieldId> {\n-        self.record_pat_field_resolutions.get(&pat).copied()\n-    }\n     pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantId> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }"}, {"sha": "e4813c87c148a172f252ea6dfe23146e0f56c643", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52c0ecb9825853d83357ccbac9f6fcb4bffa7348/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c0ecb9825853d83357ccbac9f6fcb4bffa7348/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=52c0ecb9825853d83357ccbac9f6fcb4bffa7348", "patch": "@@ -7,7 +7,6 @@ use chalk_ir::Mutability;\n use hir_def::{\n     expr::{BindingAnnotation, Expr, Literal, Pat, PatId, RecordFieldPat},\n     path::Path,\n-    FieldId,\n };\n use hir_expand::name::Name;\n \n@@ -80,11 +79,6 @@ impl<'a> InferenceContext<'a> {\n         let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n         for subpat in subpats {\n             let matching_field = var_data.as_ref().and_then(|it| it.field(&subpat.name));\n-            if let Some(local_id) = matching_field {\n-                let field_def = FieldId { parent: def.unwrap(), local_id };\n-                self.result.record_pat_field_resolutions.insert(subpat.pat, field_def);\n-            }\n-\n             let expected_ty = matching_field.map_or(self.err_ty(), |field| {\n                 field_tys[field].clone().substitute(&Interner, &substs)\n             });"}]}