{"sha": "25cbb4385ee58804cb2483af56d1333fbee6e27d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1Y2JiNDM4NWVlNTg4MDRjYjI0ODNhZjU2ZDEzMzNmYmVlNmUyN2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-27T00:11:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-27T22:07:13Z"}, "message": "Move ExpnInfo to Name", "tree": {"sha": "9a74f5e9796a15356f53fc9b66ec2b642e46e395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a74f5e9796a15356f53fc9b66ec2b642e46e395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25cbb4385ee58804cb2483af56d1333fbee6e27d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25cbb4385ee58804cb2483af56d1333fbee6e27d", "html_url": "https://github.com/rust-lang/rust/commit/25cbb4385ee58804cb2483af56d1333fbee6e27d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25cbb4385ee58804cb2483af56d1333fbee6e27d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "html_url": "https://github.com/rust-lang/rust/commit/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "e07cd7b5847e89ad6f812a92287012c1b18b0cf2", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -29,6 +29,8 @@ use std::io::{self, Read};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n+use parse::token::intern;\n+use ast::Name;\n \n // _____________________________________________________________________________\n // Pos, BytePos, CharPos\n@@ -260,9 +262,9 @@ pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n #[derive(Clone, Hash, Debug, PartialEq, Eq)]\n pub enum ExpnFormat {\n     /// e.g. #[derive(...)] <item>\n-    MacroAttribute(String),\n+    MacroAttribute(Name),\n     /// e.g. `format!()`\n-    MacroBang(String),\n+    MacroBang(Name),\n     /// Syntax sugar expansion performed by the compiler (libsyntax::expand).\n     CompilerExpansion(CompilerExpansionFormat),\n }\n@@ -302,13 +304,13 @@ pub struct NameAndSpan {\n }\n \n impl NameAndSpan {\n-    pub fn name(&self) -> &str{\n+    pub fn name(&self) -> Name {\n         match self.format {\n-            ExpnFormat::MacroAttribute(ref s) => &s,\n-            ExpnFormat::MacroBang(ref s) => &s,\n-            ExpnFormat::CompilerExpansion(ce) => ce.name(),\n+            ExpnFormat::MacroAttribute(s) => s,\n+            ExpnFormat::MacroBang(s) => s,\n+            ExpnFormat::CompilerExpansion(ce) => intern(ce.name()),\n         }\n-    } \n+    }\n }\n \n /// Extra information for tracking spans of macro and syntax sugar expansion"}, {"sha": "c48b740d83ae5b3e4830e6e91725c9d755a3b2a0", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -19,7 +19,7 @@ use codemap::Span;\n use ext::base;\n use ext::base::*;\n use feature_gate;\n-use parse::token::InternedString;\n+use parse::token::{intern, InternedString};\n use parse::token;\n use ptr::P;\n \n@@ -211,7 +211,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n         call_site: sp,\n         callee: codemap::NameAndSpan {\n-            format: codemap::MacroBang(\"asm\".to_string()),\n+            format: codemap::MacroBang(intern(\"asm\")),\n             span: None,\n             allow_internal_unstable: false,\n         },"}, {"sha": "3196380ec6c36797805a458da22b4f50fc298501", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -205,7 +205,7 @@ use codemap::Span;\n use diagnostic::SpanHandler;\n use fold::MoveMap;\n use owned_slice::OwnedSlice;\n-use parse::token::InternedString;\n+use parse::token::{intern, InternedString};\n use parse::token::special_idents;\n use ptr::P;\n \n@@ -1436,7 +1436,7 @@ impl<'a> TraitDef<'a> {\n         to_set.expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n             call_site: to_set,\n             callee: codemap::NameAndSpan {\n-                format: codemap::MacroAttribute(format!(\"derive({})\", trait_name)),\n+                format: codemap::MacroAttribute(intern(&format!(\"derive({})\", trait_name))),\n                 span: Some(self.span),\n                 allow_internal_unstable: false,\n             }"}, {"sha": "3459caecb260a21c5c9aa06e7e806f28f989e116", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -543,7 +543,7 @@ fn expand_mac_invoc<T, F, G>(mac: ast::Mac,\n                         fld.cx.bt_push(ExpnInfo {\n                                 call_site: span,\n                                 callee: NameAndSpan {\n-                                    format: MacroBang(extname.to_string()),\n+                                    format: MacroBang(extname),\n                                     span: exp_span,\n                                     allow_internal_unstable: allow_internal_unstable,\n                                 },\n@@ -721,7 +721,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n-                            format: MacroBang(extname.to_string()),\n+                            format: MacroBang(extname),\n                             span: span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n@@ -740,7 +740,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n-                            format: MacroBang(extname.to_string()),\n+                            format: MacroBang(extname),\n                             span: span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n@@ -760,7 +760,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n-                            format: MacroBang(extname.to_string()),\n+                            format: MacroBang(extname),\n                             span: None,\n                             // `macro_rules!` doesn't directly allow\n                             // unstable (this is orthogonal to whether\n@@ -1087,7 +1087,7 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: span,\n                         callee: NameAndSpan {\n-                            format: MacroBang(extname.to_string()),\n+                            format: MacroBang(extname),\n                             span: tt_span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n@@ -1289,16 +1289,16 @@ fn expand_decorators(a: Annotatable,\n                      new_attrs: &mut Vec<ast::Attribute>)\n {\n     for attr in a.attrs() {\n-        let mname = attr.name();\n-        match fld.cx.syntax_env.find(&intern(&mname)) {\n+        let mname = intern(&attr.name());\n+        match fld.cx.syntax_env.find(&mname) {\n             Some(rc) => match *rc {\n                 Decorator(ref dec) => {\n                     attr::mark_used(&attr);\n \n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            format: MacroAttribute(mname.to_string()),\n+                            format: MacroAttribute(mname),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now.\n@@ -1325,7 +1325,7 @@ fn expand_decorators(a: Annotatable,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            format: MacroAttribute(mname.to_string()),\n+                            format: MacroAttribute(mname),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now.\n@@ -1366,16 +1366,16 @@ fn expand_item_multi_modifier(mut it: Annotatable,\n     }\n \n     for attr in &modifiers {\n-        let mname = attr.name();\n+        let mname = intern(&attr.name());\n \n-        match fld.cx.syntax_env.find(&intern(&mname)) {\n+        match fld.cx.syntax_env.find(&mname) {\n             Some(rc) => match *rc {\n                 MultiModifier(ref mac) => {\n                     attr::mark_used(attr);\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            format: MacroAttribute(mname.to_string()),\n+                            format: MacroAttribute(mname),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now\n@@ -1414,16 +1414,16 @@ fn expand_item_modifiers(mut it: P<ast::Item>,\n     }\n \n     for attr in &modifiers {\n-        let mname = attr.name();\n+        let mname = intern(&attr.name());\n \n-        match fld.cx.syntax_env.find(&intern(&mname)) {\n+        match fld.cx.syntax_env.find(&mname) {\n             Some(rc) => match *rc {\n                 Modifier(ref mac) => {\n                     attr::mark_used(attr);\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            format: MacroAttribute(mname.to_string()),\n+                            format: MacroAttribute(mname),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now"}, {"sha": "d6974abd394f9bdaa9788b8c83b4912e26b51a60", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -14,8 +14,7 @@ use codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n use codemap;\n use fold::Folder;\n use fold;\n-use parse::token::InternedString;\n-use parse::token::special_idents;\n+use parse::token::{intern, InternedString, special_idents};\n use parse::{token, ParseSess};\n use ptr::P;\n use util::small_vector::SmallVector;\n@@ -27,7 +26,7 @@ fn ignored_span(sess: &ParseSess, sp: Span) -> Span {\n     let info = ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            format: MacroAttribute(\"std_inject\".to_string()),\n+            format: MacroAttribute(intern(\"std_inject\")),\n             span: None,\n             allow_internal_unstable: true,\n         }"}, {"sha": "c24c1364bd2a12391304dca729c1a1f5a107fe32", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -30,7 +30,7 @@ use ext::expand::ExpansionConfig;\n use fold::{Folder, MoveMap};\n use fold;\n use owned_slice::OwnedSlice;\n-use parse::token::InternedString;\n+use parse::token::{intern, InternedString};\n use parse::{token, ParseSess};\n use print::pprust;\n use {ast, ast_util};\n@@ -265,7 +265,7 @@ fn generate_test_harness(sess: &ParseSess,\n     cx.ext_cx.bt_push(ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            format: MacroAttribute(\"test\".to_string()),\n+            format: MacroAttribute(intern(\"test\")),\n             span: None,\n             allow_internal_unstable: false,\n         }\n@@ -297,7 +297,7 @@ fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n     let info = ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            format: MacroAttribute(\"test\".to_string()),\n+            format: MacroAttribute(intern(\"test\")),\n             span: None,\n             allow_internal_unstable: true,\n         }"}, {"sha": "7ffbbe69c3d6bd503148d7d65a6cf5e2968d4922", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -27,8 +27,7 @@ fn main() {\n     cx.bt_push(syntax::codemap::ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: syntax::codemap::NameAndSpan {\n-            name: \"\".to_string(),\n-            format: syntax::codemap::MacroBang,\n+            format: syntax::codemap::MacroBang(parse::token::intern(\"\")),\n             allow_internal_unstable: false,\n             span: None,\n         }"}, {"sha": "d42a777a019a30bd03d797aa7ae0f6eb981fa89f", "filename": "src/test/run-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -31,8 +31,7 @@ fn main() {\n     cx.bt_push(syntax::codemap::ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: syntax::codemap::NameAndSpan {\n-            name: \"\".to_string(),\n-            format: syntax::codemap::MacroBang,\n+            format: syntax::codemap::MacroBang(parse::token::intern(\"\")),\n             allow_internal_unstable: false,\n             span: None,\n         }"}, {"sha": "ba713bb98f8547a71e8728b08fe14f78ccc9a8e0", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25cbb4385ee58804cb2483af56d1333fbee6e27d/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=25cbb4385ee58804cb2483af56d1333fbee6e27d", "patch": "@@ -16,6 +16,7 @@ extern crate syntax;\n \n use syntax::codemap::DUMMY_SP;\n use syntax::print::pprust::*;\n+use syntax::parse::token::intern;\n \n fn main() {\n     let ps = syntax::parse::ParseSess::new();\n@@ -27,8 +28,7 @@ fn main() {\n     cx.bt_push(syntax::codemap::ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: syntax::codemap::NameAndSpan {\n-            name: \"\".to_string(),\n-            format: syntax::codemap::MacroBang,\n+            format: syntax::codemap::MacroBang(intern(\"\")),\n             allow_internal_unstable: false,\n             span: None,\n         }"}]}