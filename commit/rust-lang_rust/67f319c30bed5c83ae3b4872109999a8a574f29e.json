{"sha": "67f319c30bed5c83ae3b4872109999a8a574f29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZjMxOWMzMGJlZDVjODNhZTNiNDg3MjEwOTk5OWE4YTU3NGYyOWU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-19T10:38:24Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-19T10:41:12Z"}, "message": "take `TyCtxt` by value", "tree": {"sha": "039914574931bb9d4efc7d413065921a00da271e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039914574931bb9d4efc7d413065921a00da271e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67f319c30bed5c83ae3b4872109999a8a574f29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67f319c30bed5c83ae3b4872109999a8a574f29e", "html_url": "https://github.com/rust-lang/rust/commit/67f319c30bed5c83ae3b4872109999a8a574f29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67f319c30bed5c83ae3b4872109999a8a574f29e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a219ad64a6ee025b9a5c83de390280f818cd81c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a219ad64a6ee025b9a5c83de390280f818cd81c6", "html_url": "https://github.com/rust-lang/rust/commit/a219ad64a6ee025b9a5c83de390280f818cd81c6"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "5a575677f9e4a27459934b704ef28cfef7a88dc1", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f319c30bed5c83ae3b4872109999a8a574f29e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f319c30bed5c83ae3b4872109999a8a574f29e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=67f319c30bed5c83ae3b4872109999a8a574f29e", "patch": "@@ -1179,7 +1179,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n     }\n \n-    pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {\n+    pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n         let cname = self.crate_name(LOCAL_CRATE).as_str();\n         self.sess.consider_optimizing(&cname, msg)\n     }"}, {"sha": "82d2e9b987472362af9f1e026fed86ab76dcea2a", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f319c30bed5c83ae3b4872109999a8a574f29e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f319c30bed5c83ae3b4872109999a8a574f29e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=67f319c30bed5c83ae3b4872109999a8a574f29e", "patch": "@@ -851,7 +851,7 @@ fn foo(&self) -> Self::T { String::new() }\n     /// Given a slice of `hir::GenericBound`s, if any of them corresponds to the `trait_ref`\n     /// requirement, provide a strucuted suggestion to constrain it to a given type `ty`.\n     fn constrain_generic_bound_associated_type_structured_suggestion(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::TraitRef<'tcx>,\n         bounds: hir::GenericBounds<'_>,\n@@ -875,7 +875,7 @@ fn foo(&self) -> Self::T { String::new() }\n     /// Given a span corresponding to a bound, provide a structured suggestion to set an\n     /// associated type to a given type `ty`.\n     fn constrain_associated_type_structured_suggestion(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         span: Span,\n         assoc: &ty::AssocItem,"}]}