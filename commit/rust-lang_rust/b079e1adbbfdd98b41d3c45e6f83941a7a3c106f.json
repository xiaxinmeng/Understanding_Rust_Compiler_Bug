{"sha": "b079e1adbbfdd98b41d3c45e6f83941a7a3c106f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNzllMWFkYmJmZGQ5OGI0MWQzYzQ1ZTZmODM5NDFhN2EzYzEwNmY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-05T20:58:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-05T20:59:27Z"}, "message": "rustc: Parse \"inline\". Also write it into metadata.", "tree": {"sha": "1e8fd8f5b2ff012649c7a3d5ecc6ac648ba90829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8fd8f5b2ff012649c7a3d5ecc6ac648ba90829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f", "html_url": "https://github.com/rust-lang/rust/commit/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bb04aba60649b7e126fd35474fab50359eb130", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bb04aba60649b7e126fd35474fab50359eb130", "html_url": "https://github.com/rust-lang/rust/commit/c6bb04aba60649b7e126fd35474fab50359eb130"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "128ebea3f287b99c2a08677b678ef0d18681f0e7", "filename": "src/comp/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f/src%2Fcomp%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f/src%2Fcomp%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcommon.rs?ref=b079e1adbbfdd98b41d3c45e6f83941a7a3c106f", "patch": "@@ -62,6 +62,8 @@ const tag_crate_deps: uint = 0x25u;\n // A single crate dependency\n const tag_crate_dep: uint = 0x26u;\n \n+const tag_items_data_item_inlineness: uint = 0x27u;\n+\n // djb's cdb hashes.\n fn hash_node_id(node_id: &int) -> uint { ret 177573u ^ (node_id as uint); }\n "}, {"sha": "6649cca29a385110056594c02aa2b0b490b0d782", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=b079e1adbbfdd98b41d3c45e6f83941a7a3c106f", "patch": "@@ -166,6 +166,12 @@ fn encode_family(ebml_w: &ebmlivec::writer, c: u8) {\n     ebmlivec::end_tag(ebml_w);\n }\n \n+fn encode_inlineness(ebml_w: &ebmlivec::writer, c: u8) {\n+    ebmlivec::start_tag(ebml_w, tag_items_data_item_inlineness);\n+    ebml_w.writer.write(~[c]);\n+    ebmlivec::end_tag(ebml_w);\n+}\n+\n fn def_to_str(did: &def_id) -> str { ret #fmt(\"%d:%d\", did.crate, did.node); }\n \n fn encode_type_param_kinds(ebml_w: &ebmlivec::writer, tps: &ty_param[]) {\n@@ -256,6 +262,11 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: &ebmlivec::writer,\n         encode_family(ebml_w,\n                     alt fd.decl.purity { pure_fn. { 'p' } impure_fn. { 'f' } }\n                         as u8);\n+        encode_inlineness(ebml_w,\n+                          alt fd.decl.il {\n+                            il_normal. { 'n' }\n+                            il_inline. { 'i' }\n+                          } as u8);\n         encode_type_param_kinds(ebml_w, tps);\n         encode_type(ecx, ebml_w, node_id_to_monotype(ecx.ccx.tcx, item.id));\n         encode_symbol(ecx, ebml_w, item.id);"}, {"sha": "f0b25eb9a53d3a1ff2851ecdffd83d12fd695f4f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b079e1adbbfdd98b41d3c45e6f83941a7a3c106f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=b079e1adbbfdd98b41d3c45e6f83941a7a3c106f", "patch": "@@ -1285,7 +1285,7 @@ fn parse_if_expr(p: &parser) -> @ast::expr {\n \n fn parse_fn_expr(p: &parser, proto: ast::proto) -> @ast::expr {\n     let lo = p.get_last_lo_pos();\n-    let decl = parse_fn_decl(p, ast::impure_fn);\n+    let decl = parse_fn_decl(p, ast::impure_fn, ast::il_normal);\n     let body = parse_block(p);\n     let _fn = {decl: decl, proto: proto, body: body};\n     ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn));\n@@ -1706,7 +1706,8 @@ fn parse_ty_params(p: &parser) -> ast::ty_param[] {\n     ret ty_params;\n }\n \n-fn parse_fn_decl(p: &parser, purity: ast::purity) -> ast::fn_decl {\n+fn parse_fn_decl(p: &parser, purity: ast::purity, il: ast::inlineness)\n+        -> ast::fn_decl {\n     let inputs: ast::spanned[ast::arg[]] =\n         parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA), parse_arg,\n                   p);\n@@ -1730,23 +1731,24 @@ fn parse_fn_decl(p: &parser, purity: ast::purity) -> ast::fn_decl {\n         ret {inputs: inputs.node,\n              output: t,\n              purity: purity,\n-             il: ast::il_normal,\n+             il: il,\n              cf: ast::return,\n              constraints: constrs};\n       }\n       a_bang. {\n         ret {inputs: inputs.node,\n              output: @spanned(p.get_lo_pos(), p.get_hi_pos(), ast::ty_bot),\n              purity: purity,\n-             il: ast::il_normal,\n+             il: il,\n              cf: ast::noreturn,\n              constraints: constrs};\n       }\n     }\n }\n \n-fn parse_fn(p: &parser, proto: ast::proto, purity: ast::purity) -> ast::_fn {\n-    let decl = parse_fn_decl(p, purity);\n+fn parse_fn(p: &parser, proto: ast::proto, purity: ast::purity,\n+            il: ast::inlineness) -> ast::_fn {\n+    let decl = parse_fn_decl(p, purity, il);\n     let body = parse_block(p);\n     ret {decl: decl, proto: proto, body: body};\n }\n@@ -1767,10 +1769,11 @@ fn mk_item(p: &parser, lo: uint, hi: uint, ident: &ast::ident,\n }\n \n fn parse_item_fn_or_iter(p: &parser, purity: ast::purity, proto: ast::proto,\n-                         attrs: &ast::attribute[]) -> @ast::item {\n+                         attrs: &ast::attribute[], il: ast::inlineness)\n+        -> @ast::item {\n     let lo = p.get_last_lo_pos();\n     let t = parse_fn_header(p);\n-    let f = parse_fn(p, proto, purity);\n+    let f = parse_fn(p, proto, purity, il);\n     ret mk_item(p, lo, f.body.span.hi, t.ident, ast::item_fn(f, t.tps),\n                 attrs);\n }\n@@ -1797,7 +1800,7 @@ fn parse_method(p: &parser) -> @ast::method {\n     let lo = p.get_lo_pos();\n     let proto = parse_proto(p);\n     let ident = parse_value_ident(p);\n-    let f = parse_fn(p, proto, ast::impure_fn);\n+    let f = parse_fn(p, proto, ast::impure_fn, ast::il_normal);\n     let meth = {ident: ident, meth: f, id: p.get_id()};\n     ret @spanned(lo, f.body.span.hi, meth);\n }\n@@ -1910,7 +1913,7 @@ fn parse_item_native_fn(p: &parser, attrs: &ast::attribute[]) ->\n    @ast::native_item {\n     let lo = p.get_last_lo_pos();\n     let t = parse_fn_header(p);\n-    let decl = parse_fn_decl(p, ast::impure_fn);\n+    let decl = parse_fn_decl(p, ast::impure_fn, ast::il_normal);\n     let link_name = none;\n     if p.peek() == token::EQ { p.bump(); link_name = some(parse_str(p)); }\n     let hi = p.get_hi_pos();\n@@ -2071,16 +2074,20 @@ fn parse_auth(p: &parser) -> ast::_auth {\n fn parse_item(p: &parser, attrs: &ast::attribute[]) -> option::t[@ast::item] {\n     if eat_word(p, \"const\") {\n         ret some(parse_item_const(p, attrs));\n+    } else if (eat_word(p, \"inline\")) {\n+        expect_word(p, \"fn\");\n+        ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_fn,\n+                                       attrs, ast::il_inline));\n     } else if (is_word(p, \"fn\") && p.look_ahead(1u) != token::LPAREN) {\n         p.bump();\n         ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_fn,\n-                                           attrs));\n+                                       attrs, ast::il_normal));\n     } else if (eat_word(p, \"pred\")) {\n         ret some(parse_item_fn_or_iter(p, ast::pure_fn, ast::proto_fn,\n-                                           attrs));\n+                                       attrs, ast::il_normal));\n     } else if (eat_word(p, \"iter\")) {\n         ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_iter,\n-                                           attrs));\n+                                       attrs, ast::il_normal));\n     } else if (eat_word(p, \"mod\")) {\n         ret some(parse_item_mod(p, attrs));\n     } else if (eat_word(p, \"native\")) {"}]}