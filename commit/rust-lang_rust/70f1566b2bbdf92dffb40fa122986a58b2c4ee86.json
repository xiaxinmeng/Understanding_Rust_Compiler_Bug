{"sha": "70f1566b2bbdf92dffb40fa122986a58b2c4ee86", "node_id": "C_kwDOAAsO6NoAKDcwZjE1NjZiMmJiZGY5MmRmZmI0MGZhMTIyOTg2YTU4YjJjNGVlODY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T03:57:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T03:57:54Z"}, "message": "Rollup merge of #106584 - kpreid:vec-allocator, r=JohnTitor\n\nDocument that `Vec::from_raw_parts[_in]` must be given a pointer from the correct allocator.\n\nCurrently, the documentation of `Vec::from_raw_parts` and `Vec::from_raw_parts_in` says nothing about what allocator the pointer must come from. This PR adds that missing information explicitly.", "tree": {"sha": "267e1c3f0a0762ac6b498a051c7890b0758119db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267e1c3f0a0762ac6b498a051c7890b0758119db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f1566b2bbdf92dffb40fa122986a58b2c4ee86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJju5DCCRBK7hj4Ov3rIwAAttUIADPd9eo7CmovJfcJ8BDCiuLg\nIJatdYZhnC2DngtEt7jrXYQKePAdemX2BZosXn0fEnb1U6oeya+H6deJT0EbEg1s\n1oE0RkRnPgT+tClgThTaAAgazNrnOpr31zvvapiRI1qdU0VIhwHjy0nyDcinKKVl\nEkw8ggQY18d1lww14cMwrrzsJ32LP0t6E8mu+QHvmwtIFXn1kXIWbijBnoxxzRQO\nyFuDqOz/0BmEsYEsGqqWZcNXK5t7eJXLPQj7L8OjvCdxoodUuCRrC9uZNDhaJQtr\noFNTnKWSSYCYRghkRIcer/IF3AbejQOeOTLQhtJtEkv9ccCzNIcGut7JAZIKYKc=\n=xpH7\n-----END PGP SIGNATURE-----\n", "payload": "tree 267e1c3f0a0762ac6b498a051c7890b0758119db\nparent eefc44b7e2e6657c7f0f214a0707aec83442c5c8\nparent 288e89bf76856653b69c8db77003ab190e86272b\nauthor Michael Goulet <michael@errs.io> 1673236674 -0800\ncommitter GitHub <noreply@github.com> 1673236674 -0800\n\nRollup merge of #106584 - kpreid:vec-allocator, r=JohnTitor\n\nDocument that `Vec::from_raw_parts[_in]` must be given a pointer from the correct allocator.\n\nCurrently, the documentation of `Vec::from_raw_parts` and `Vec::from_raw_parts_in` says nothing about what allocator the pointer must come from. This PR adds that missing information explicitly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f1566b2bbdf92dffb40fa122986a58b2c4ee86", "html_url": "https://github.com/rust-lang/rust/commit/70f1566b2bbdf92dffb40fa122986a58b2c4ee86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f1566b2bbdf92dffb40fa122986a58b2c4ee86/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "html_url": "https://github.com/rust-lang/rust/commit/eefc44b7e2e6657c7f0f214a0707aec83442c5c8"}, {"sha": "288e89bf76856653b69c8db77003ab190e86272b", "url": "https://api.github.com/repos/rust-lang/rust/commits/288e89bf76856653b69c8db77003ab190e86272b", "html_url": "https://github.com/rust-lang/rust/commit/288e89bf76856653b69c8db77003ab190e86272b"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "36cfac8ee9e17da0dde403e785c0a09efd324898", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70f1566b2bbdf92dffb40fa122986a58b2c4ee86/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f1566b2bbdf92dffb40fa122986a58b2c4ee86/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=70f1566b2bbdf92dffb40fa122986a58b2c4ee86", "patch": "@@ -490,6 +490,8 @@ impl<T> Vec<T> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n+    /// * `ptr` must have been allocated using the global allocator, such as via\n+    ///   the [`alloc::alloc`] function.\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -526,6 +528,7 @@ impl<T> Vec<T> {\n     /// function.\n     ///\n     /// [`String`]: crate::string::String\n+    /// [`alloc::alloc`]: crate::alloc::alloc\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n     ///\n     /// # Examples\n@@ -681,6 +684,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n+    /// * `ptr` must be [*currently allocated*] via the given allocator `alloc`.\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -714,6 +718,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// [`String`]: crate::string::String\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n+    /// [*currently allocated*]: crate::alloc::Allocator#currently-allocated-memory\n     /// [*fit*]: crate::alloc::Allocator#memory-fitting\n     ///\n     /// # Examples"}]}