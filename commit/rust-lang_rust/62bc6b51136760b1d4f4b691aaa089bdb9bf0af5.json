{"sha": "62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmM2YjUxMTM2NzYwYjFkNGY0YjY5MWFhYTA4OWJkYjliZjBhZjU=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-24T02:03:02Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-28T17:47:28Z"}, "message": "Per-thread scheduling. Closes #682.\n\nTasks are spawned on a random thread. Currently they stay there, but\nwe should add task migration and load balancing in the future. This\nshould drammatically improve our task performance benchmarks.", "tree": {"sha": "bd4787e8bd4eed7b3ca7b3d99ece0fc75ae444fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd4787e8bd4eed7b3ca7b3d99ece0fc75ae444fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "html_url": "https://github.com/rust-lang/rust/commit/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/comments", "author": null, "committer": null, "parents": [{"sha": "b51f5c395cc3458e428159b908ca95b1777e66e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51f5c395cc3458e428159b908ca95b1777e66e2", "html_url": "https://github.com/rust-lang/rust/commit/b51f5c395cc3458e428159b908ca95b1777e66e2"}], "stats": {"total": 424, "additions": 239, "deletions": 185}, "files": [{"sha": "aa0127d8c255bb219a682b48b0442d6c81fc2e50", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -5,34 +5,33 @@\n #include \"rust_internal.h\"\n \n circular_buffer::circular_buffer(rust_kernel *kernel, size_t unit_sz) :\n-    sched(kernel->sched),\n     kernel(kernel),\n     unit_sz(unit_sz),\n     _buffer_sz(initial_size()),\n     _next(0),\n     _unread(0),\n     _buffer((uint8_t *)kernel->malloc(_buffer_sz, \"circular_buffer\")) {\n \n-    A(sched, unit_sz, \"Unit size must be larger than zero.\");\n+    // A(sched, unit_sz, \"Unit size must be larger than zero.\");\n \n-    DLOG(sched, mem, \"new circular_buffer(buffer_sz=%d, unread=%d)\"\n-         \"-> circular_buffer=0x%\" PRIxPTR,\n-         _buffer_sz, _unread, this);\n+    // DLOG(sched, mem, \"new circular_buffer(buffer_sz=%d, unread=%d)\"\n+    //      \"-> circular_buffer=0x%\" PRIxPTR,\n+    //      _buffer_sz, _unread, this);\n \n-    A(sched, _buffer, \"Failed to allocate buffer.\");\n+    // A(sched, _buffer, \"Failed to allocate buffer.\");\n }\n \n circular_buffer::~circular_buffer() {\n-    DLOG(sched, mem, \"~circular_buffer 0x%\" PRIxPTR, this);\n-    I(sched, _buffer);\n-    W(sched, _unread == 0,\n-      \"freeing circular_buffer with %d unread bytes\", _unread);\n+    // DLOG(sched, mem, \"~circular_buffer 0x%\" PRIxPTR, this);\n+    // I(sched, _buffer);\n+    // W(sched, _unread == 0,\n+    //   \"freeing circular_buffer with %d unread bytes\", _unread);\n     kernel->free(_buffer);\n }\n \n size_t\n circular_buffer::initial_size() {\n-    I(sched, unit_sz > 0);\n+    // I(sched, unit_sz > 0);\n     return INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz;\n }\n \n@@ -41,8 +40,8 @@ circular_buffer::initial_size() {\n  */\n void\n circular_buffer::transfer(void *dst) {\n-    I(sched, dst);\n-    I(sched, _unread <= _buffer_sz);\n+    // I(sched, dst);\n+    // I(sched, _unread <= _buffer_sz);\n \n     uint8_t *ptr = (uint8_t *) dst;\n \n@@ -54,13 +53,13 @@ circular_buffer::transfer(void *dst) {\n     } else {\n         head_sz = _buffer_sz - _next;\n     }\n-    I(sched, _next + head_sz <= _buffer_sz);\n+    // I(sched, _next + head_sz <= _buffer_sz);\n     memcpy(ptr, _buffer + _next, head_sz);\n \n     // Then copy any other items from the beginning of the buffer\n-    I(sched, _unread >= head_sz);\n+    // I(sched, _unread >= head_sz);\n     size_t tail_sz = _unread - head_sz;\n-    I(sched, head_sz + tail_sz <= _buffer_sz);\n+    // I(sched, head_sz + tail_sz <= _buffer_sz);\n     memcpy(ptr + head_sz, _buffer, tail_sz);\n }\n \n@@ -70,37 +69,37 @@ circular_buffer::transfer(void *dst) {\n  */\n void\n circular_buffer::enqueue(void *src) {\n-    I(sched, src);\n-    I(sched, _unread <= _buffer_sz);\n-    I(sched, _buffer);\n+    // I(sched, src);\n+    // I(sched, _unread <= _buffer_sz);\n+    // I(sched, _buffer);\n \n     // Grow if necessary.\n     if (_unread == _buffer_sz) {\n         grow();\n     }\n \n-    DLOG(sched, mem, \"circular_buffer enqueue \"\n-         \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n-         _unread, _next, _buffer_sz, unit_sz);\n+    // DLOG(sched, mem, \"circular_buffer enqueue \"\n+    //      \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n+    //      _unread, _next, _buffer_sz, unit_sz);\n \n-    I(sched, _unread < _buffer_sz);\n-    I(sched, _unread + unit_sz <= _buffer_sz);\n+    // I(sched, _unread < _buffer_sz);\n+    // I(sched, _unread + unit_sz <= _buffer_sz);\n \n     // Copy data\n     size_t dst_idx = _next + _unread;\n     I(sched, dst_idx >= _buffer_sz || dst_idx + unit_sz <= _buffer_sz);\n     if (dst_idx >= _buffer_sz) {\n         dst_idx -= _buffer_sz;\n \n-        I(sched, _next >= unit_sz);\n-        I(sched, dst_idx <= _next - unit_sz);\n+        // I(sched, _next >= unit_sz);\n+        // I(sched, dst_idx <= _next - unit_sz);\n     }\n \n-    I(sched, dst_idx + unit_sz <= _buffer_sz);\n+    // I(sched, dst_idx + unit_sz <= _buffer_sz);\n     memcpy(&_buffer[dst_idx], src, unit_sz);\n     _unread += unit_sz;\n \n-    DLOG(sched, mem, \"circular_buffer pushed data at index: %d\", dst_idx);\n+    // DLOG(sched, mem, \"circular_buffer pushed data at index: %d\", dst_idx);\n }\n \n /**\n@@ -110,17 +109,17 @@ circular_buffer::enqueue(void *src) {\n  */\n void\n circular_buffer::dequeue(void *dst) {\n-    I(sched, unit_sz > 0);\n-    I(sched, _unread >= unit_sz);\n-    I(sched, _unread <= _buffer_sz);\n-    I(sched, _buffer);\n+    // I(sched, unit_sz > 0);\n+    // I(sched, _unread >= unit_sz);\n+    // I(sched, _unread <= _buffer_sz);\n+    // I(sched, _buffer);\n \n-    DLOG(sched, mem,\n-             \"circular_buffer dequeue \"\n-             \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n-             _unread, _next, _buffer_sz, unit_sz);\n+    // DLOG(sched, mem,\n+    //          \"circular_buffer dequeue \"\n+    //          \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n+    //          _unread, _next, _buffer_sz, unit_sz);\n \n-    I(sched, _next + unit_sz <= _buffer_sz);\n+    // I(sched, _next + unit_sz <= _buffer_sz);\n     if (dst != NULL) {\n         memcpy(dst, &_buffer[_next], unit_sz);\n     }\n@@ -140,8 +139,9 @@ circular_buffer::dequeue(void *dst) {\n void\n circular_buffer::grow() {\n     size_t new_buffer_sz = _buffer_sz * 2;\n-    I(sched, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n-    DLOG(sched, mem, \"circular_buffer is growing to %d bytes\", new_buffer_sz);\n+    // I(sched, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n+    // DLOG(sched, mem, \"circular_buffer is growing to %d bytes\",\n+    //      new_buffer_sz);\n     void *new_buffer = kernel->malloc(new_buffer_sz,\n                                     \"new circular_buffer (grow)\");\n     transfer(new_buffer);\n@@ -154,9 +154,9 @@ circular_buffer::grow() {\n void\n circular_buffer::shrink() {\n     size_t new_buffer_sz = _buffer_sz / 2;\n-    I(sched, initial_size() <= new_buffer_sz);\n-    DLOG(sched, mem, \"circular_buffer is shrinking to %d bytes\",\n-         new_buffer_sz);\n+    // I(sched, initial_size() <= new_buffer_sz);\n+    // DLOG(sched, mem, \"circular_buffer is shrinking to %d bytes\",\n+    //      new_buffer_sz);\n     void *new_buffer = kernel->malloc(new_buffer_sz,\n                                     \"new circular_buffer (shrink)\");\n     transfer(new_buffer);"}, {"sha": "df1486952ebf3d245303dc6c7d7c12be72493a55", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -140,9 +140,10 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n     update_log_settings(crate_map, getenv(\"RUST_LOG\"));\n     enable_claims(getenv(\"CHECK_CLAIMS\"));\n+    int num_threads = get_num_threads();\n \n     rust_srv *srv = new rust_srv();\n-    rust_kernel *kernel = new rust_kernel(srv);\n+    rust_kernel *kernel = new rust_kernel(srv, num_threads);\n     kernel->start();\n     rust_task *root_task = kernel->create_task(NULL, \"main\");\n     rust_scheduler *sched = root_task->sched;\n@@ -158,11 +159,9 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n \n     root_task->start(main_fn, (uintptr_t)args->args);\n \n-    int num_threads = get_num_threads();\n-\n     DLOG(sched, dom, \"Using %d worker threads.\", num_threads);\n \n-    int ret = kernel->start_task_threads(num_threads);\n+    int ret = kernel->start_task_threads();\n     delete args;\n     delete kernel;\n     delete srv;"}, {"sha": "9253d7d0361016ce8aee1999c2722859c866f958", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -13,17 +13,17 @@ rust_chan::rust_chan(rust_kernel *kernel, maybe_proxy<rust_port> *port,\n     if (port) {\n         associate(port);\n     }\n-    DLOG(kernel->sched, comm, \"new rust_chan(task=0x%\" PRIxPTR\n-        \", port=0x%\" PRIxPTR \") -> chan=0x%\" PRIxPTR,\n-        (uintptr_t) task, (uintptr_t) port, (uintptr_t) this);\n+    // DLOG(task->sched, comm, \"new rust_chan(task=0x%\" PRIxPTR\n+    //     \", port=0x%\" PRIxPTR \") -> chan=0x%\" PRIxPTR,\n+    //     (uintptr_t) task, (uintptr_t) port, (uintptr_t) this);\n }\n \n rust_chan::~rust_chan() {\n-    DLOG(kernel->sched, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n-         (uintptr_t) this);\n+    // DLOG(kernel->sched, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n+    //      (uintptr_t) this);\n \n-    A(kernel->sched, is_associated() == false,\n-      \"Channel must be disassociated before being freed.\");\n+    // A(kernel->sched, is_associated() == false,\n+    //   \"Channel must be disassociated before being freed.\");\n }\n \n /**\n@@ -33,9 +33,9 @@ void rust_chan::associate(maybe_proxy<rust_port> *port) {\n     this->port = port;\n     if (port->is_proxy() == false) {\n         scoped_lock with(port->referent()->lock);\n-        DLOG(kernel->sched, task,\n-            \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n-            this, port);\n+        // DLOG(kernel->sched, task,\n+        //     \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n+        //     this, port);\n         ++this->ref_count;\n         this->task = port->referent()->task;\n         this->task->ref();\n@@ -51,14 +51,14 @@ bool rust_chan::is_associated() {\n  * Unlink this channel from its associated port.\n  */\n void rust_chan::disassociate() {\n-    A(kernel->sched, is_associated(),\n-      \"Channel must be associated with a port.\");\n+    // A(kernel->sched, is_associated(),\n+    //   \"Channel must be associated with a port.\");\n \n     if (port->is_proxy() == false) {\n         scoped_lock with(port->referent()->lock);\n-        DLOG(kernel->sched, task,\n-            \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n-            this, port->referent());\n+        // DLOG(kernel->sched, task,\n+        //     \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n+        //     this, port->referent());\n         --this->ref_count;\n         --this->task->ref_count;\n         this->task = NULL;\n@@ -73,8 +73,8 @@ void rust_chan::disassociate() {\n  * Attempt to send data to the associated port.\n  */\n void rust_chan::send(void *sptr) {\n-    rust_scheduler *sched = kernel->sched;\n-    I(sched, !port->is_proxy());\n+    // rust_scheduler *sched = kernel->sched;\n+    // I(sched, !port->is_proxy());\n \n     rust_port *target_port = port->referent();\n     // TODO: We can probably avoid this lock by using atomic operations in\n@@ -84,21 +84,21 @@ void rust_chan::send(void *sptr) {\n     buffer.enqueue(sptr);\n \n     if (!is_associated()) {\n-        W(sched, is_associated(),\n-          \"rust_chan::transmit with no associated port.\");\n+        // W(sched, is_associated(),\n+        //   \"rust_chan::transmit with no associated port.\");\n         return;\n     }\n \n-    A(sched, !buffer.is_empty(),\n-      \"rust_chan::transmit with nothing to send.\");\n+    // A(sched, !buffer.is_empty(),\n+    //   \"rust_chan::transmit with nothing to send.\");\n \n     if (port->is_proxy()) {\n         data_message::send(buffer.peek(), buffer.unit_sz, \"send data\",\n                            task->get_handle(), port->as_proxy()->handle());\n         buffer.dequeue(NULL);\n     } else {\n         if (target_port->task->blocked_on(target_port)) {\n-            DLOG(sched, comm, \"dequeued in rendezvous_ptr\");\n+            // DLOG(sched, comm, \"dequeued in rendezvous_ptr\");\n             buffer.dequeue(target_port->task->rendezvous_ptr);\n             target_port->task->rendezvous_ptr = 0;\n             target_port->task->wakeup(target_port);\n@@ -120,7 +120,7 @@ rust_chan *rust_chan::clone(maybe_proxy<rust_task> *target) {\n         rust_handle<rust_port> *handle =\n             task->sched->kernel->get_port_handle(port->as_referent());\n         maybe_proxy<rust_port> *proxy = new rust_proxy<rust_port> (handle);\n-        DLOG(kernel->sched, mem, \"new proxy: \" PTR, proxy);\n+        DLOG(task->sched, mem, \"new proxy: \" PTR, proxy);\n         port = proxy;\n         target_task = target->as_proxy()->handle()->referent();\n     }\n@@ -133,8 +133,8 @@ rust_chan *rust_chan::clone(maybe_proxy<rust_task> *target) {\n  * appear to be live, causing modify-after-free errors.\n  */\n void rust_chan::destroy() {\n-    A(kernel->sched, ref_count == 0,\n-      \"Channel's ref count should be zero.\");\n+    // A(kernel->sched, ref_count == 0,\n+    //   \"Channel's ref count should be zero.\");\n \n     if (is_associated()) {\n         if (port->is_proxy()) {"}, {"sha": "1eb826027988c154db2144bf9007b6cebdc7760d", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 40, "deletions": 45, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -7,36 +7,40 @@\n       }                                                    \\\n   } while (0)\n \n-rust_kernel::rust_kernel(rust_srv *srv) :\n+rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     _region(srv, true),\n     _log(srv, NULL),\n-    _srv(srv),\n-    _interrupt_kernel_loop(FALSE)\n+    srv(srv),\n+    _interrupt_kernel_loop(FALSE),\n+    num_threads(num_threads),\n+    rval(0),\n+    live_tasks(0)\n {\n-    sched = create_scheduler(\"main\");\n+    isaac_init(this, &rctx);\n+    create_schedulers();\n }\n \n rust_scheduler *\n-rust_kernel::create_scheduler(const char *name) {\n+rust_kernel::create_scheduler(int id) {\n     _kernel_lock.lock();\n     rust_message_queue *message_queue =\n-        new (this, \"rust_message_queue\") rust_message_queue(_srv, this);\n-    rust_srv *srv = _srv->clone();\n+        new (this, \"rust_message_queue\") rust_message_queue(srv, this);\n+    rust_srv *srv = this->srv->clone();\n     rust_scheduler *sched =\n         new (this, \"rust_scheduler\")\n-        rust_scheduler(this, message_queue, srv, name);\n+        rust_scheduler(this, message_queue, srv, id);\n     rust_handle<rust_scheduler> *handle = internal_get_sched_handle(sched);\n     message_queue->associate(handle);\n     message_queues.append(message_queue);\n-    KLOG(\"created scheduler: \" PTR \", name: %s, index: %d\",\n-         sched, name, sched->list_index);\n+    KLOG(\"created scheduler: \" PTR \", id: %d, index: %d\",\n+         sched, id, sched->list_index);\n     _kernel_lock.signal_all();\n     _kernel_lock.unlock();\n     return sched;\n }\n \n void\n-rust_kernel::destroy_scheduler() {\n+rust_kernel::destroy_scheduler(rust_scheduler *sched) {\n     _kernel_lock.lock();\n     KLOG(\"deleting scheduler: \" PTR \", name: %s, index: %d\",\n         sched, sched->name, sched->list_index);\n@@ -48,6 +52,18 @@ rust_kernel::destroy_scheduler() {\n     _kernel_lock.unlock();\n }\n \n+void rust_kernel::create_schedulers() {\n+    for(int i = 0; i < num_threads; ++i) {\n+        threads.push(create_scheduler(i));\n+    }\n+}\n+\n+void rust_kernel::destroy_schedulers() {\n+    for(int i = 0; i < num_threads; ++i) {\n+        destroy_scheduler(threads[i]);\n+    }\n+}\n+\n rust_handle<rust_scheduler> *\n rust_kernel::internal_get_sched_handle(rust_scheduler *sched) {\n     rust_handle<rust_scheduler> *handle = NULL;\n@@ -59,14 +75,6 @@ rust_kernel::internal_get_sched_handle(rust_scheduler *sched) {\n     return handle;\n }\n \n-rust_handle<rust_scheduler> *\n-rust_kernel::get_sched_handle(rust_scheduler *sched) {\n-    _kernel_lock.lock();\n-    rust_handle<rust_scheduler> *handle = internal_get_sched_handle(sched);\n-    _kernel_lock.unlock();\n-    return handle;\n-}\n-\n rust_handle<rust_task> *\n rust_kernel::get_task_handle(rust_task *task) {\n     _kernel_lock.lock();\n@@ -98,7 +106,9 @@ rust_kernel::get_port_handle(rust_port *port) {\n \n void\n rust_kernel::log_all_scheduler_state() {\n-    sched->log_state();\n+    for(int i = 0; i < num_threads; ++i) {\n+        threads[i]->log_state();\n+    }\n }\n \n /**\n@@ -170,7 +180,7 @@ rust_kernel::terminate_kernel_loop() {\n }\n \n rust_kernel::~rust_kernel() {\n-    destroy_scheduler();\n+    destroy_schedulers();\n \n     terminate_kernel_loop();\n \n@@ -193,7 +203,7 @@ rust_kernel::~rust_kernel() {\n \n     rust_message_queue *queue = NULL;\n     while (message_queues.pop(&queue)) {\n-        K(_srv, queue->is_empty(), \"Kernel message queue should be empty \"\n+        K(srv, queue->is_empty(), \"Kernel message queue should be empty \"\n           \"before killing the kernel.\");\n         delete queue;\n     }\n@@ -240,30 +250,25 @@ rust_kernel::signal_kernel_lock() {\n     _kernel_lock.unlock();\n }\n \n-int rust_kernel::start_task_threads(int num_threads)\n+int rust_kernel::start_task_threads()\n {\n-    rust_task_thread *thread = NULL;\n-\n-    // -1, because this thread will also be a thread.\n-    for(int i = 0; i < num_threads - 1; ++i) {\n-        thread = new rust_task_thread(i + 1, this);\n+    for(int i = 0; i < num_threads; ++i) {\n+        rust_scheduler *thread = threads[i];\n         thread->start();\n-        threads.push(thread);\n     }\n \n-    sched->start_main_loop(0);\n-\n-    while(threads.pop(&thread)) {\n+    for(int i = 0; i < num_threads; ++i) {\n+        rust_scheduler *thread = threads[i];\n         thread->join();\n-        delete thread;\n     }\n \n-    return sched->rval;\n+    return rval;\n }\n \n rust_task *\n rust_kernel::create_task(rust_task *spawner, const char *name) {\n-    return sched->create_task(spawner, name);\n+    // TODO: use a different rand.\n+    return threads[rand(&rctx) % num_threads]->create_task(spawner, name);\n }\n \n #ifdef __WIN32__\n@@ -285,16 +290,6 @@ rust_kernel::win32_require(LPCTSTR fn, BOOL ok) {\n }\n #endif\n \n-rust_task_thread::rust_task_thread(int id, rust_kernel *owner)\n-    : id(id), owner(owner)\n-{\n-}\n-\n-void rust_task_thread::run()\n-{\n-    owner->sched->start_main_loop(id);\n-}\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "8be9bb96e90c26fac37645dc2b7e9d151987a037", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -45,7 +45,10 @@ class rust_task_thread;\n class rust_kernel : public rust_thread {\n     memory_region _region;\n     rust_log _log;\n-    rust_srv *_srv;\n+\n+public:\n+    rust_srv *srv;\n+private:\n \n     /**\n      * Task proxy objects are kernel owned handles to Rust objects.\n@@ -62,20 +65,29 @@ class rust_kernel : public rust_thread {\n \n     lock_and_signal _kernel_lock;\n \n+    const size_t num_threads;\n+\n     void terminate_kernel_loop();\n     void pump_message_queues();\n \n     rust_handle<rust_scheduler> *\n     internal_get_sched_handle(rust_scheduler *sched);\n \n-    array_list<rust_task_thread *> threads;\n+    array_list<rust_scheduler *> threads;\n+\n+    randctx rctx;\n \n-    rust_scheduler *create_scheduler(const char *name);\n-    void destroy_scheduler();\n+    rust_scheduler *create_scheduler(int id);\n+    void destroy_scheduler(rust_scheduler *sched);\n+\n+    void create_schedulers();\n+    void destroy_schedulers();\n \n public:\n-    rust_scheduler *sched;\n-    lock_and_signal scheduler_lock;\n+\n+    int rval;\n+\n+    volatile int live_tasks;\n \n     /**\n      * Message queues are kernel objects and are associated with domains.\n@@ -86,11 +98,10 @@ class rust_kernel : public rust_thread {\n      */\n     indexed_list<rust_message_queue> message_queues;\n \n-    rust_handle<rust_scheduler> *get_sched_handle(rust_scheduler *sched);\n     rust_handle<rust_task> *get_task_handle(rust_task *task);\n     rust_handle<rust_port> *get_port_handle(rust_port *port);\n \n-    rust_kernel(rust_srv *srv);\n+    rust_kernel(rust_srv *srv, size_t num_threads);\n \n     bool is_deadlocked();\n \n@@ -113,10 +124,7 @@ class rust_kernel : public rust_thread {\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n \n-    // FIXME: this should go away\n-    inline rust_scheduler *get_scheduler() const { return sched; }\n-\n-    int start_task_threads(int num_threads);\n+    int start_task_threads();\n \n #ifdef __WIN32__\n     void win32_require(LPCTSTR fn, BOOL ok);\n@@ -125,14 +133,4 @@ class rust_kernel : public rust_thread {\n     rust_task *create_task(rust_task *spawner, const char *name);\n };\n \n-class rust_task_thread : public rust_thread {\n-    int id;\n-    rust_kernel *owner;\n-\n-public:\n-    rust_task_thread(int id, rust_kernel *owner);\n-\n-    virtual void run();\n-};\n-\n #endif /* RUST_KERNEL_H */"}, {"sha": "437be04e272c3e962eb63b2ab1c982cd0679b28d", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -4,21 +4,23 @@\n #include \"globals.h\"\n \n rust_scheduler::rust_scheduler(rust_kernel *kernel,\n-    rust_message_queue *message_queue, rust_srv *srv,\n-    const char *name) :\n+                               rust_message_queue *message_queue,\n+                               rust_srv *srv,\n+                               int id) :\n     interrupt_flag(0),\n     _log(srv, this),\n     log_lvl(log_note),\n     srv(srv),\n-    name(name),\n+    // TODO: calculate a per scheduler name.\n+    name(\"main\"),\n     newborn_tasks(this, \"newborn\"),\n     running_tasks(this, \"running\"),\n     blocked_tasks(this, \"blocked\"),\n     dead_tasks(this, \"dead\"),\n     cache(this),\n-    rval(0),\n     kernel(kernel),\n-    message_queue(message_queue)\n+    message_queue(message_queue),\n+    id(id)\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n     isaac_init(this, &rctx);\n@@ -47,9 +49,9 @@ rust_scheduler::activate(rust_task *task) {\n \n     task->ctx.next = &ctx;\n     DLOG(this, task, \"descheduling...\");\n-    kernel->scheduler_lock.unlock();\n+    lock.unlock();\n     task->ctx.swap(ctx);\n-    kernel->scheduler_lock.lock();\n+    lock.lock();\n     DLOG(this, task, \"task has returned\");\n }\n \n@@ -67,8 +69,8 @@ void\n rust_scheduler::fail() {\n     log(NULL, log_err, \"domain %s @0x%\" PRIxPTR \" root task failed\",\n         name, this);\n-    I(this, rval == 0);\n-    rval = 1;\n+    I(this, kernel->rval == 0);\n+    kernel->rval = 1;\n     exit(1);\n }\n \n@@ -82,7 +84,7 @@ rust_scheduler::number_of_live_tasks() {\n  */\n void\n rust_scheduler::reap_dead_tasks(int id) {\n-    I(this, kernel->scheduler_lock.lock_held_by_current_thread());\n+    I(this, lock.lock_held_by_current_thread());\n     for (size_t i = 0; i < dead_tasks.length(); ) {\n         rust_task *task = dead_tasks[i];\n         // Make sure this task isn't still running somewhere else...\n@@ -93,6 +95,7 @@ rust_scheduler::reap_dead_tasks(int id) {\n                 \"deleting unreferenced dead task %s @0x%\" PRIxPTR,\n                 task->name, task);\n             delete task;\n+            sync::decrement(kernel->live_tasks);\n             continue;\n         }\n         ++i;\n@@ -180,9 +183,9 @@ rust_scheduler::log_state() {\n  * Returns once no more tasks can be scheduled and all task ref_counts\n  * drop to zero.\n  */\n-int\n-rust_scheduler::start_main_loop(int id) {\n-    kernel->scheduler_lock.lock();\n+void\n+rust_scheduler::start_main_loop() {\n+    lock.lock();\n \n     // Make sure someone is watching, to pull us out of infinite loops.\n     //\n@@ -193,11 +196,11 @@ rust_scheduler::start_main_loop(int id) {\n \n     DLOG(this, dom, \"started domain loop %d\", id);\n \n-    while (number_of_live_tasks() > 0) {\n+    while (kernel->live_tasks > 0) {\n         A(this, kernel->is_deadlocked() == false, \"deadlock\");\n \n-        DLOG(this, dom, \"worker %d, number_of_live_tasks = %d\",\n-             id, number_of_live_tasks());\n+        DLOG(this, dom, \"worker %d, number_of_live_tasks = %d, total = %d\",\n+             id, number_of_live_tasks(), kernel->live_tasks);\n \n         drain_incoming_message_queue(true);\n \n@@ -212,11 +215,12 @@ rust_scheduler::start_main_loop(int id) {\n             DLOG(this, task,\n                  \"all tasks are blocked, scheduler id %d yielding ...\",\n                  id);\n-            kernel->scheduler_lock.unlock();\n+            lock.unlock();\n             sync::sleep(100);\n-            kernel->scheduler_lock.lock();\n+            lock.lock();\n             DLOG(this, task,\n                 \"scheduler resuming ...\");\n+            reap_dead_tasks(id);\n             continue;\n         }\n \n@@ -264,19 +268,18 @@ rust_scheduler::start_main_loop(int id) {\n                 \"scheduler yielding ...\",\n                 dead_tasks.length());\n             log_state();\n-            kernel->scheduler_lock.unlock();\n+            lock.unlock();\n             sync::yield();\n-            kernel->scheduler_lock.lock();\n+            lock.lock();\n         } else {\n             drain_incoming_message_queue(true);\n         }\n         reap_dead_tasks(id);\n     }\n \n-    DLOG(this, dom, \"finished main-loop %d (dom.rval = %d)\", id, rval);\n+    DLOG(this, dom, \"finished main-loop %d\", id);\n \n-    kernel->scheduler_lock.unlock();\n-    return rval;\n+    lock.unlock();\n }\n \n rust_crate_cache *\n@@ -296,9 +299,16 @@ rust_scheduler::create_task(rust_task *spawner, const char *name) {\n         task->on_wakeup(spawner->_on_wakeup);\n     }\n     newborn_tasks.append(task);\n+\n+    sync::increment(kernel->live_tasks);\n+\n     return task;\n }\n \n+void rust_scheduler::run() {\n+    this->start_main_loop();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "c53e6157f06bc767683e350322449d58d23d663c", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -27,7 +27,8 @@ rust_crate_cache\n };\n \n struct rust_scheduler : public kernel_owned<rust_scheduler>,\n-                        rc_base<rust_scheduler>\n+                        rc_base<rust_scheduler>,\n+                        rust_thread\n {\n     // Fields known to the compiler:\n     uintptr_t interrupt_flag;\n@@ -46,7 +47,6 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     rust_crate_cache cache;\n \n     randctx rctx;\n-    int rval;\n \n     rust_kernel *kernel;\n     int32_t list_index;\n@@ -57,15 +57,19 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     // Incoming messages from other domains.\n     rust_message_queue *message_queue;\n \n+    const int id;\n+\n+    lock_and_signal lock;\n+\n #ifndef __WIN32__\n     pthread_attr_t attr;\n #endif\n \n     // Only a pointer to 'name' is kept, so it must live as long as this\n     // domain.\n     rust_scheduler(rust_kernel *kernel,\n-             rust_message_queue *message_queue, rust_srv *srv,\n-             const char *name);\n+                   rust_message_queue *message_queue, rust_srv *srv,\n+                   int id);\n     ~rust_scheduler();\n     void activate(rust_task *task);\n     void log(rust_task *task, uint32_t level, char const *fmt, ...);\n@@ -80,11 +84,13 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     void reap_dead_tasks(int id);\n     rust_task *schedule_task(int id);\n \n-    int start_main_loop(int id);\n+    void start_main_loop();\n \n     void log_state();\n \n     rust_task *create_task(rust_task *spawner, const char *name);\n+\n+    virtual void run();\n };\n \n inline rust_log &"}, {"sha": "10ea48f57c24a5c101a2d229784ce544ec164697", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -83,7 +83,8 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     pinned_on(-1),\n     local_region(&sched->srv->local_region),\n     _on_wakeup(NULL),\n-    failed(false)\n+    failed(false),\n+    propagate_failure(true)\n {\n     LOGPTR(sched, \"new task\", (uintptr_t)this);\n     DLOG(sched, task, \"sizeof(task) = %d (0x%x)\", sizeof *this, sizeof *this);\n@@ -207,8 +208,8 @@ rust_task::kill() {\n     // Unblock the task so it can unwind.\n     unblock();\n \n-    // if (this == sched->root_task)\n-    //     sched->fail();\n+    if (NULL == supervisor && propagate_failure)\n+        sched->fail();\n \n     LOG(this, task, \"preparing to unwind task: 0x%\" PRIxPTR, this);\n     // run_on_resume(rust_unwind_glue);\n@@ -229,6 +230,8 @@ rust_task::fail() {\n         supervisor->kill();\n     }\n     // FIXME: implement unwinding again.\n+    if (NULL == supervisor && propagate_failure)\n+        sched->fail();\n     failed = true;\n }\n \n@@ -248,6 +251,7 @@ rust_task::unsupervise()\n              \" disconnecting from supervisor %s @0x%\" PRIxPTR,\n              name, this, supervisor->name, supervisor);\n     supervisor = NULL;\n+    propagate_failure = false;\n }\n \n void\n@@ -397,8 +401,8 @@ rust_task::free(void *p, bool is_gc)\n \n void\n rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n-    I(sched, !kernel->scheduler_lock.lock_held_by_current_thread());\n-    scoped_lock with(kernel->scheduler_lock);\n+    I(sched, !sched->lock.lock_held_by_current_thread());\n+    scoped_lock with(sched->lock);\n     DLOG(sched, task,\n          \"task %s \" PTR \" state change '%s' -> '%s' while in '%s'\",\n          name, (uintptr_t)this, src->name, dst->name, state->name);"}, {"sha": "9b1a3a395821f7c2969d975cf56f94b65f55cf02", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -91,6 +91,7 @@ rust_task : public maybe_proxy<rust_task>,\n \n     // Indicates that the task ended in failure\n     bool failed;\n+    bool propagate_failure;\n \n     lock_and_signal lock;\n "}, {"sha": "3415b6b62aec8ce0c5f7716ebd68a527d6a30b41", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -541,9 +541,9 @@ extern \"C\" CDECL rust_task *\n upcall_new_task(rust_task *spawner, rust_vec *name) {\n     // name is a rust string structure.\n     LOG_UPCALL_ENTRY(spawner);\n-    scoped_lock with(spawner->kernel->scheduler_lock);\n-    rust_scheduler *sched = spawner->sched;\n-    rust_task *task = sched->create_task(spawner, (const char *)name->data);\n+    scoped_lock with(spawner->sched->lock);\n+    rust_task *task =\n+        spawner->kernel->create_task(spawner, (const char *)name->data);\n     return task;\n }\n \n@@ -584,7 +584,7 @@ upcall_ivec_resize_shared(rust_task *task,\n                           rust_ivec *v,\n                           size_t newsz) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n+    scoped_lock with(task->sched->lock);\n     I(task->sched, !v->fill);\n \n     size_t new_alloc = next_power_of_two(newsz);\n@@ -604,7 +604,7 @@ upcall_ivec_spill_shared(rust_task *task,\n                          rust_ivec *v,\n                          size_t newsz) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n+    scoped_lock with(task->sched->lock);\n     size_t new_alloc = next_power_of_two(newsz);\n \n     rust_ivec_heap *heap_part = (rust_ivec_heap *)"}, {"sha": "89e7f2e7bedadd269e128c4346fd5fbc293e1563", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -126,8 +126,9 @@ next_power_of_two(size_t s)\n \n // Initialization helper for ISAAC RNG\n \n+template <typename sched_or_kernel>\n static inline void\n-isaac_init(rust_scheduler *sched, randctx *rctx)\n+isaac_init(sched_or_kernel *sched, randctx *rctx)\n {\n         memset(rctx, 0, sizeof(randctx));\n "}, {"sha": "8298f4028818d6367318fc3e7f7e5f40594b5dfe", "filename": "src/rt/sync/sync.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Fsync%2Fsync.h", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Fsync%2Fsync.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.h?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -1,4 +1,4 @@\n-// -*- c++-mode -*-\n+// -*- c++ -*-\n #ifndef SYNC_H\n #define SYNC_H\n "}, {"sha": "1e7c10944a763ad53343dd4ad3fc84ba9fabe919", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -11,17 +11,16 @@ rust_test_runtime::~rust_test_runtime() {\n \n void\n rust_domain_test::worker::run() {\n-    rust_scheduler *handle = kernel->get_scheduler();\n     for (int i = 0; i < TASKS; i++) {\n-        handle->create_task(NULL, \"child\");\n+        kernel->create_task(NULL, \"child\");\n     }\n-    sync::sleep(rand(&handle->rctx) % 1000);\n+    //sync::sleep(rand(&handle->rctx) % 1000);\n }\n \n bool\n rust_domain_test::run() {\n     rust_srv srv;\n-    rust_kernel kernel(&srv);\n+    rust_kernel kernel(&srv, 1);\n \n     array_list<worker *> workers;\n     for (int i = 0; i < DOMAINS; i++) {\n@@ -47,13 +46,13 @@ void\n rust_task_test::worker::run() {\n     rust_task *root_task = kernel->create_task(NULL, \"main\");\n     root_task->start((uintptr_t)&task_entry, (uintptr_t)NULL);\n-    root_task->sched->start_main_loop(0);\n+    root_task->sched->start_main_loop();\n }\n \n bool\n rust_task_test::run() {\n     rust_srv srv;\n-    rust_kernel kernel(&srv);\n+    rust_kernel kernel(&srv, 1);\n \n     array_list<worker *> workers;\n     for (int i = 0; i < DOMAINS; i++) {\n@@ -62,6 +61,6 @@ rust_task_test::run() {\n         worker->start();\n     }\n \n-    sync::sleep(rand(&kernel.sched->rctx) % 1000);\n+    //sync::sleep(rand(&kernel.sched->rctx) % 1000);\n     return true;\n }"}, {"sha": "313ec8afcf1b3a666a6a3eecbc817de4996680a9", "filename": "src/test/run-pass/lib-task.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Ftest%2Frun-pass%2Flib-task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bc6b51136760b1d4f4b691aaa089bdb9bf0af5/src%2Ftest%2Frun-pass%2Flib-task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-task.rs?ref=62bc6b51136760b1d4f4b691aaa089bdb9bf0af5", "patch": "@@ -0,0 +1,41 @@\n+\n+\n+// xfail-stage0\n+\n+use std;\n+import std::task;\n+\n+fn test_sleep() { task::sleep(1000000u); }\n+\n+fn test_unsupervise() {\n+  fn f() {\n+    task::unsupervise();\n+    fail;\n+  }\n+  spawn f();\n+}\n+\n+fn test_join() {\n+  fn winner() {\n+  }\n+\n+  auto wintask = spawn winner();\n+\n+  assert task::join(wintask) == task::tr_success;\n+\n+  fn failer() {\n+    task::unsupervise();\n+    fail;\n+  }\n+\n+  auto failtask = spawn failer();\n+\n+  assert task::join(failtask) == task::tr_failure;\n+}\n+\n+fn main() {\n+  // FIXME: Why aren't we running this?\n+  //test_sleep();\n+  test_unsupervise();\n+  test_join();\n+}"}]}