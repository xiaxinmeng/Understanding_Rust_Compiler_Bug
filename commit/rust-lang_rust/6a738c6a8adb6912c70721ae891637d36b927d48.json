{"sha": "6a738c6a8adb6912c70721ae891637d36b927d48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzM4YzZhOGFkYjY5MTJjNzA3MjFhZTg5MTYzN2QzNmI5MjdkNDg=", "commit": {"author": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-12T18:15:03Z"}, "committer": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-12T18:15:03Z"}, "message": "run rustfmt on liblog", "tree": {"sha": "ccbab00e68884b018b2c9f40899d87689114cf72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccbab00e68884b018b2c9f40899d87689114cf72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a738c6a8adb6912c70721ae891637d36b927d48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX/n2nAAoJEAkcWPS/w2VxQmwP/3WQ6fRdHuGUTEUJ8wzM9Mhv\nx6u8ec920pP0EDcqmETbzkyUaoWIj/jy174bbZ5BfksGttcIVMNcmAwQMRzacZvz\n83rt98wMfmxlIa40IXFwJE6c/mT1dGLXghMKHRq6JiUImVZFs4hAHeATdMK7+iWS\nZvDZGJtdlGP75AtjEvYcWLSCE78kUtFQXResAIxdNoN6hYxr0p+9TOv3UGZJUjio\n/mfVVAqjPoS4seDD2PIKtXLVRFWxzHRg/ACtG5OInIvyu1/GCvhKEgZqbdfcWD24\nuLLnB77j7z8T8anGEGaKwwo/nhDFFLRHWSBwP8RQS5EwNO0KzZokee4VULPBsV42\nzX63EJQH0zixW7vEqL8riCdistz4NPp6E8ZYqr5jw6v5QuRiBFTdRyP5tuCOIsdp\nSkIP1GAELq9fZviPCWC4QULl9eHgNY2B+RamSAmM+cguvrIhQUI5WmMMePiTVe8m\nDW2FjMqqafOuI/AY07zH+ejRcHvYBVnivV3KbWFeHJOiWzkAcmgWMidbusC3laed\nbBFsg3R2fF54G6cyUF39fkMXNpuPlvqOADt95g7vrfNuN+0wyOv9m12kwisIhG6U\nb2fLKziPB1aqHjWLfwVUN+PXgAh+7wQD5i86oV/XdaTTk4Ng6KXJFUApxJ8qzuS1\nlDyrFDacDnrkwm4qnANM\n=AEVO\n-----END PGP SIGNATURE-----", "payload": "tree ccbab00e68884b018b2c9f40899d87689114cf72\nparent acb50e3481a06089dbd13d860dadc7d8d7cd1649\nauthor Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476296103 +0530\ncommitter Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476296103 +0530\n\nrun rustfmt on liblog\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a738c6a8adb6912c70721ae891637d36b927d48", "html_url": "https://github.com/rust-lang/rust/commit/6a738c6a8adb6912c70721ae891637d36b927d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a738c6a8adb6912c70721ae891637d36b927d48/comments", "author": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acb50e3481a06089dbd13d860dadc7d8d7cd1649", "url": "https://api.github.com/repos/rust-lang/rust/commits/acb50e3481a06089dbd13d860dadc7d8d7cd1649", "html_url": "https://github.com/rust-lang/rust/commit/acb50e3481a06089dbd13d860dadc7d8d7cd1649"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "eb50d6e6135ef2124e10987519d18225fdf566f4", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6a738c6a8adb6912c70721ae891637d36b927d48/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a738c6a8adb6912c70721ae891637d36b927d48/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=6a738c6a8adb6912c70721ae891637d36b927d48", "patch": "@@ -22,12 +22,12 @@ pub const LOG_LEVEL_NAMES: [&'static str; 5] = [\"ERROR\", \"WARN\", \"INFO\", \"DEBUG\"\n /// Parse an individual log level that is either a number or a symbolic log level\n fn parse_log_level(level: &str) -> Option<u32> {\n     level.parse::<u32>()\n-         .ok()\n-         .or_else(|| {\n-             let pos = LOG_LEVEL_NAMES.iter().position(|&name| name.eq_ignore_ascii_case(level));\n-             pos.map(|p| p as u32 + 1)\n-         })\n-         .map(|p| cmp::min(p, ::MAX_LOG_LEVEL))\n+        .ok()\n+        .or_else(|| {\n+            let pos = LOG_LEVEL_NAMES.iter().position(|&name| name.eq_ignore_ascii_case(level));\n+            pos.map(|p| p as u32 + 1)\n+        })\n+        .map(|p| cmp::min(p, ::MAX_LOG_LEVEL))\n }\n \n /// Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=1/foo\")\n@@ -52,32 +52,31 @@ pub fn parse_logging_spec(spec: &str) -> (Vec<LogDirective>, Option<String>) {\n                 continue;\n             }\n             let mut parts = s.split('=');\n-            let (log_level, name) = match (parts.next(),\n-                                           parts.next().map(|s| s.trim()),\n-                                           parts.next()) {\n-                (Some(part0), None, None) => {\n-                    // if the single argument is a log-level string or number,\n-                    // treat that as a global fallback\n-                    match parse_log_level(part0) {\n-                        Some(num) => (num, None),\n-                        None => (::MAX_LOG_LEVEL, Some(part0)),\n+            let (log_level, name) =\n+                match (parts.next(), parts.next().map(|s| s.trim()), parts.next()) {\n+                    (Some(part0), None, None) => {\n+                        // if the single argument is a log-level string or number,\n+                        // treat that as a global fallback\n+                        match parse_log_level(part0) {\n+                            Some(num) => (num, None),\n+                            None => (::MAX_LOG_LEVEL, Some(part0)),\n+                        }\n                     }\n-                }\n-                (Some(part0), Some(\"\"), None) => (::MAX_LOG_LEVEL, Some(part0)),\n-                (Some(part0), Some(part1), None) => {\n-                    match parse_log_level(part1) {\n-                        Some(num) => (num, Some(part0)),\n-                        _ => {\n-                            println!(\"warning: invalid logging spec '{}', ignoring it\", part1);\n-                            continue;\n+                    (Some(part0), Some(\"\"), None) => (::MAX_LOG_LEVEL, Some(part0)),\n+                    (Some(part0), Some(part1), None) => {\n+                        match parse_log_level(part1) {\n+                            Some(num) => (num, Some(part0)),\n+                            _ => {\n+                                println!(\"warning: invalid logging spec '{}', ignoring it\", part1);\n+                                continue;\n+                            }\n                         }\n                     }\n-                }\n-                _ => {\n-                    println!(\"warning: invalid logging spec '{}', ignoring it\", s);\n-                    continue;\n-                }\n-            };\n+                    _ => {\n+                        println!(\"warning: invalid logging spec '{}', ignoring it\", s);\n+                        continue;\n+                    }\n+                };\n             dirs.push(LogDirective {\n                 name: name.map(str::to_owned),\n                 level: log_level,"}]}