{"sha": "6a58d9123952de104b1e02640261b7e90908bb0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNThkOTEyMzk1MmRlMTA0YjFlMDI2NDAyNjFiN2U5MDkwOGJiMGU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-02-23T21:31:23Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-02-23T21:31:23Z"}, "message": "Coalesce trailing comma options", "tree": {"sha": "93b27705f2fbeb897c36003c2ef5abae6c0759c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b27705f2fbeb897c36003c2ef5abae6c0759c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a58d9123952de104b1e02640261b7e90908bb0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a58d9123952de104b1e02640261b7e90908bb0e", "html_url": "https://github.com/rust-lang/rust/commit/6a58d9123952de104b1e02640261b7e90908bb0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a58d9123952de104b1e02640261b7e90908bb0e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad352239acbc5c2824ab97ab8881ea843496d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad352239acbc5c2824ab97ab8881ea843496d0e", "html_url": "https://github.com/rust-lang/rust/commit/7ad352239acbc5c2824ab97ab8881ea843496d0e"}], "stats": {"total": 227, "additions": 14, "deletions": 213}, "files": [{"sha": "57b8ba190f883ca014cfb2695928bfdf97992429", "filename": "src/config.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a58d9123952de104b1e02640261b7e90908bb0e/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a58d9123952de104b1e02640261b7e90908bb0e/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=6a58d9123952de104b1e02640261b7e90908bb0e", "patch": "@@ -104,6 +104,7 @@ configuration_option_enum! { TypeDensity:\n     Wide,\n }\n \n+\n impl Density {\n     pub fn to_list_tactic(self) -> ListTactic {\n         match self {\n@@ -348,6 +349,8 @@ create_config! {\n     control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine,\n         \"Brace style for control flow constructs\";\n     impl_empty_single_line: bool, true, \"Put empty-body implementations on a single line\";\n+    trailing_comma: SeparatorTactic, SeparatorTactic::Vertical,\n+        \"How to handle trailing commas for lists\";\n     fn_empty_single_line: bool, true, \"Put empty-body functions on a single line\";\n     fn_single_line: bool, false, \"Put single-expression functions on a single line\";\n     fn_return_indent: ReturnIndent, ReturnIndent::WithArgs,\n@@ -366,16 +369,10 @@ create_config! {\n     where_layout: ListTactic, ListTactic::Vertical, \"Element layout inside a where clause\";\n     where_pred_indent: BlockIndentStyle, BlockIndentStyle::Visual,\n         \"Indentation style of a where predicate\";\n-    where_trailing_comma: bool, false, \"Put a trailing comma on where clauses\";\n     generics_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indentation of generics\";\n-    struct_trailing_comma: SeparatorTactic, SeparatorTactic::Vertical,\n-        \"If there is a trailing comma on structs\";\n-    struct_lit_trailing_comma: SeparatorTactic, SeparatorTactic::Vertical,\n-        \"If there is a trailing comma on literal structs\";\n     struct_lit_style: StructLitStyle, StructLitStyle::Block, \"Style of struct definition\";\n     struct_lit_multiline_style: MultilineStyle, MultilineStyle::PreferSingle,\n         \"Multiline style on literal structs\";\n-    enum_trailing_comma: bool, true, \"Put a trailing comma on enum declarations\";\n     report_todo: ReportTactic, ReportTactic::Never,\n         \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n     report_fixme: ReportTactic, ReportTactic::Never,\n@@ -396,7 +393,6 @@ create_config! {\n     wrap_match_arms: bool, true, \"Wrap multiline match arms in blocks\";\n     match_block_trailing_comma: bool, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n-    match_wildcard_trailing_comma: bool, true, \"Put a trailing comma after a wildcard arm\";\n     closure_block_indent_threshold: isize, 5, \"How many lines a closure must have before it is \\\n                                                block indented. -1 means never use block indent.\";\n     space_before_type_annotation: bool, false,"}, {"sha": "cbec7d0a8af2caee62816356ebccd180e43eaffc", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a58d9123952de104b1e02640261b7e90908bb0e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a58d9123952de104b1e02640261b7e90908bb0e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6a58d9123952de104b1e02640261b7e90908bb0e", "patch": "@@ -1150,12 +1150,6 @@ fn arm_end_pos(arm: &ast::Arm) -> BytePos {\n }\n \n fn arm_comma(config: &Config, arm: &ast::Arm, body: &ast::Expr) -> &'static str {\n-    if !config.match_wildcard_trailing_comma {\n-        if arm.pats.len() == 1 && arm.pats[0].node == ast::PatKind::Wild && arm.guard.is_none() {\n-            return \"\";\n-        }\n-    }\n-\n     if config.match_block_trailing_comma {\n         \",\"\n     } else if let ast::ExprKind::Block(ref block) = body.node {\n@@ -1759,7 +1753,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n         trailing_separator: if base.is_some() {\n             SeparatorTactic::Never\n         } else {\n-            context.config.struct_lit_trailing_comma\n+            context.config.trailing_comma\n         },\n         shape: nested_shape,\n         ends_with_newline: ends_with_newline,"}, {"sha": "45e2175b801a280144e0b213f1c3c446ea741262", "filename": "src/items.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a58d9123952de104b1e02640261b7e90908bb0e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a58d9123952de104b1e02640261b7e90908bb0e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6a58d9123952de104b1e02640261b7e90908bb0e", "patch": "@@ -434,7 +434,7 @@ impl<'a> FmtVisitor<'a> {\n         let fmt = ListFormatting {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n-            trailing_separator: SeparatorTactic::from_bool(self.config.enum_trailing_comma),\n+            trailing_separator: self.config.trailing_comma,\n             shape: Shape::legacy(budget, self.block_indent),\n             ends_with_newline: true,\n             config: self.config,\n@@ -526,7 +526,6 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n                                                                            offset.block_only()),\n                                                              context.config.where_density,\n                                                              \"{\",\n-                                                             true,\n                                                              None));\n \n         if try_opt!(is_impl_single_line(context, &items, &result, &where_clause_str, &item)) {\n@@ -795,7 +794,6 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n                                                                            offset.block_only()),\n                                                              where_density,\n                                                              \"{\",\n-                                                             has_body,\n                                                              None));\n         // If the where clause cannot fit on the same line,\n         // put the where clause on a new line\n@@ -952,7 +950,7 @@ fn format_struct_struct(context: &RewriteContext,\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: context.config.struct_trailing_comma,\n+        trailing_separator: context.config.trailing_comma,\n         shape: Shape::legacy(budget, item_indent),\n         ends_with_newline: true,\n         config: context.config,\n@@ -1010,7 +1008,6 @@ fn format_tuple_struct(context: &RewriteContext,\n                                           Shape::legacy(where_budget, offset.block_only()),\n                                           Density::Compressed,\n                                           \";\",\n-                                          false,\n                                           None))\n         }\n         None => \"\".to_owned(),\n@@ -1103,7 +1100,6 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n                                                          Shape::legacy(where_budget, indent),\n                                                          context.config.where_density,\n                                                          \"=\",\n-                                                         false,\n                                                          Some(span.hi)));\n     result.push_str(&where_clause_str);\n     result.push_str(\" = \");\n@@ -1645,7 +1641,6 @@ fn rewrite_fn_base(context: &RewriteContext,\n                                                          Shape::legacy(where_budget, indent),\n                                                          where_density,\n                                                          \"{\",\n-                                                         has_body,\n                                                          Some(span.hi)));\n \n     if last_line_width(&result) + where_clause_str.len() > context.config.max_width &&\n@@ -1929,7 +1924,6 @@ fn rewrite_where_clause(context: &RewriteContext,\n                         shape: Shape,\n                         density: Density,\n                         terminator: &str,\n-                        allow_trailing_comma: bool,\n                         span_end: Option<BytePos>)\n                         -> Option<String> {\n     if where_clause.predicates.is_empty() {\n@@ -1969,12 +1963,17 @@ fn rewrite_where_clause(context: &RewriteContext,\n     // FIXME: we don't need to collect here if the where_layout isn't\n     // HorizontalVertical.\n     let tactic = definitive_tactic(&item_vec, context.config.where_layout, budget);\n-    let use_trailing_comma = allow_trailing_comma && context.config.where_trailing_comma;\n+\n+    let mut comma_tactic = context.config.trailing_comma;\n+    // Kind of a hack because we don't usually have trailing commas in where clauses.\n+    if comma_tactic == SeparatorTactic::Vertical {\n+        comma_tactic = SeparatorTactic::Never;\n+    }\n \n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: SeparatorTactic::from_bool(use_trailing_comma),\n+        trailing_separator: comma_tactic,\n         shape: Shape::legacy(budget, offset),\n         ends_with_newline: true,\n         config: context.config,\n@@ -2034,7 +2033,6 @@ fn format_generics(context: &RewriteContext,\n                                                                            offset.block_only()),\n                                                              Density::Tall,\n                                                              terminator,\n-                                                             true,\n                                                              Some(span.hi)));\n         result.push_str(&where_clause_str);\n         if !force_same_line_brace &&"}, {"sha": "a8150020e56df381d137ad522ff27cdac9c60fe1", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a58d9123952de104b1e02640261b7e90908bb0e/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6a58d9123952de104b1e02640261b7e90908bb0e/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=6a58d9123952de104b1e02640261b7e90908bb0e", "patch": "@@ -12,12 +12,9 @@ where_density = \"Tall\"\n where_indent = \"Tabbed\"\n where_layout = \"Vertical\"\n where_pred_indent = \"Visual\"\n-where_trailing_comma = false\n generics_indent = \"Visual\"\n-struct_trailing_comma = \"Vertical\"\n-struct_lit_trailing_comma = \"Vertical\"\n+trailing_comma = \"Vertical\"\n struct_lit_style = \"Block\"\n-enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false"}, {"sha": "4b0347ab5268429057dd089b39f3a6c30e3851a2", "filename": "tests/source/enum-no_trailing_comma.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Fsource%2Fenum-no_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Fsource%2Fenum-no_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum-no_trailing_comma.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -1,41 +0,0 @@\n-// rustfmt-enum_trailing_comma: false\n-\n-enum X {\n-    A,\n-    B,\n-}\n-\n-enum Y {\n-    A,\n-    B\n-}\n-\n-enum TupX {\n-    A(u32),\n-    B(i32, u16),\n-}\n-\n-enum TupY {\n-    A(u32),\n-    B(i32, u16)\n-}\n-\n-enum StructX {\n-    A {\n-        s: u16,\n-    },\n-    B {\n-        u: u32,\n-        i: i32,\n-    },\n-}\n-\n-enum StructY {\n-    A {\n-        s: u16,\n-    },\n-    B {\n-        u: u32,\n-        i: i32,\n-    }\n-}"}, {"sha": "b13e85c2d901182b74bb5a77fbe21906300be6fa", "filename": "tests/source/match-wildcard-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Fsource%2Fmatch-wildcard-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Fsource%2Fmatch-wildcard-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch-wildcard-trailing-comma.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -1,10 +0,0 @@\n-// rustfmt-match_wildcard_trailing_comma: false\n-\n-fn match_wild(x: i32) -> i32 {\n-    match x {\n-        1 => 1,\n-        2 => 2,\n-        3 => 3,\n-        _ => 0,\n-    }\n-}"}, {"sha": "c2c1a3185bcb0b3be36e327ad4dee1fd1e57a5f3", "filename": "tests/source/where-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Fsource%2Fwhere-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Fsource%2Fwhere-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fwhere-trailing-comma.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -1,36 +0,0 @@\n-// rustfmt-where_trailing_comma: true\n-\n-fn f<S, T>(x: T, y: S) -> T where T: P, S: Q\n-{\n-    x\n-}\n-\n-impl Trait for T where T: P\n-{\n-    fn f(x: T) -> T where T: Q + R\n-    {\n-        x\n-    }\n-}\n-\n-struct Pair<S, T> where T: P, S: P + Q {\n-    a: T,\n-    b: S\n-}\n-\n-struct TupPair<S, T> (S, T) where T: P, S: P + Q;\n-\n-enum E<S, T> where S: P, T: P {\n-    A {a: T},\n-}\n-\n-type Double<T> where T: P, T: Q = Pair<T, T>;\n-\n-extern \"C\" {\n-    fn f<S, T>(x: T, y: S) -> T where T: P, S: Q;\n-}\n-\n-trait Q<S, T> where T: P, S: R\n-{\n-    fn f<U, V>(self, x: T, y: S, z: U) -> Self where U: P, V: P;\n-}"}, {"sha": "2e5a5ad23e3ad927d8157640f947e961edea4af4", "filename": "tests/target/enum-no_trailing_comma.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Fenum-no_trailing_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Fenum-no_trailing_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum-no_trailing_comma.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -1,31 +0,0 @@\n-// rustfmt-enum_trailing_comma: false\n-\n-enum X {\n-    A,\n-    B\n-}\n-\n-enum Y {\n-    A,\n-    B\n-}\n-\n-enum TupX {\n-    A(u32),\n-    B(i32, u16)\n-}\n-\n-enum TupY {\n-    A(u32),\n-    B(i32, u16)\n-}\n-\n-enum StructX {\n-    A { s: u16 },\n-    B { u: u32, i: i32 }\n-}\n-\n-enum StructY {\n-    A { s: u16 },\n-    B { u: u32, i: i32 }\n-}"}, {"sha": "e0fbf81e04515c97d7bd5f21f3d9bc12f2fde6cb", "filename": "tests/target/match-wildcard-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Fmatch-wildcard-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Fmatch-wildcard-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-wildcard-trailing-comma.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -1,10 +0,0 @@\n-// rustfmt-match_wildcard_trailing_comma: false\n-\n-fn match_wild(x: i32) -> i32 {\n-    match x {\n-        1 => 1,\n-        2 => 2,\n-        3 => 3,\n-        _ => 0\n-    }\n-}"}, {"sha": "4d4d19cdef816c53dc1eec777069c37204afd821", "filename": "tests/target/where-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Fwhere-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad352239acbc5c2824ab97ab8881ea843496d0e/tests%2Ftarget%2Fwhere-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwhere-trailing-comma.rs?ref=7ad352239acbc5c2824ab97ab8881ea843496d0e", "patch": "@@ -1,56 +0,0 @@\n-// rustfmt-where_trailing_comma: true\n-\n-fn f<S, T>(x: T, y: S) -> T\n-    where T: P,\n-          S: Q,\n-{\n-    x\n-}\n-\n-impl Trait for T\n-    where T: P,\n-{\n-    fn f(x: T) -> T\n-        where T: Q + R,\n-    {\n-        x\n-    }\n-}\n-\n-struct Pair<S, T>\n-    where T: P,\n-          S: P + Q,\n-{\n-    a: T,\n-    b: S,\n-}\n-\n-struct TupPair<S, T>(S, T)\n-    where T: P,\n-          S: P + Q;\n-\n-enum E<S, T>\n-    where S: P,\n-          T: P,\n-{\n-    A { a: T },\n-}\n-\n-type Double<T>\n-    where T: P,\n-          T: Q = Pair<T, T>;\n-\n-extern \"C\" {\n-    fn f<S, T>(x: T, y: S) -> T\n-        where T: P,\n-              S: Q;\n-}\n-\n-trait Q<S, T>\n-    where T: P,\n-          S: R,\n-{\n-    fn f<U, V>(self, x: T, y: S, z: U) -> Self\n-        where U: P,\n-              V: P;\n-}"}]}