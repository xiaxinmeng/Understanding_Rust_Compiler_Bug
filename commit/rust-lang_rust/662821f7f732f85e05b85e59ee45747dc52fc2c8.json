{"sha": "662821f7f732f85e05b85e59ee45747dc52fc2c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MjgyMWY3ZjczMmY4NWUwNWI4NWU1OWVlNDU3NDdkYzUyZmMyYzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T09:11:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T09:11:21Z"}, "message": "raw ptr deref no longer erases the tag", "tree": {"sha": "e54261b10b3bf1db4e523fe00024c1aa2467dfb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e54261b10b3bf1db4e523fe00024c1aa2467dfb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/662821f7f732f85e05b85e59ee45747dc52fc2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/662821f7f732f85e05b85e59ee45747dc52fc2c8", "html_url": "https://github.com/rust-lang/rust/commit/662821f7f732f85e05b85e59ee45747dc52fc2c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/662821f7f732f85e05b85e59ee45747dc52fc2c8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "html_url": "https://github.com/rust-lang/rust/commit/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "41b3c1f7e6603a0cd9d3f8972d9abee0644cbdef", "filename": "src/fn_call.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/662821f7f732f85e05b85e59ee45747dc52fc2c8/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662821f7f732f85e05b85e59ee45747dc52fc2c8/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=662821f7f732f85e05b85e59ee45747dc52fc2c8", "patch": "@@ -131,10 +131,10 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             }\n \n             \"free\" => {\n-                let ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation, no tag\n+                let ptr = self.read_scalar(args[0])?.not_undef()?;\n                 if !ptr.is_null_ptr(self) {\n                     self.memory_mut().deallocate(\n-                        ptr.to_ptr()?.with_default_tag(),\n+                        ptr.to_ptr()?,\n                         None,\n                         MiriMemoryKind::C.into(),\n                     )?;\n@@ -179,7 +179,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 self.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n             \"__rust_dealloc\" => {\n-                let ptr = self.read_scalar(args[0])?.to_ptr()?.erase_tag(); // raw ptr operation, no tag\n+                let ptr = self.read_scalar(args[0])?.to_ptr()?;\n                 let old_size = self.read_scalar(args[1])?.to_usize(self)?;\n                 let align = self.read_scalar(args[2])?.to_usize(self)?;\n                 if old_size == 0 {\n@@ -189,13 +189,13 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                     return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n                 self.memory_mut().deallocate(\n-                    ptr.with_default_tag(),\n+                    ptr,\n                     Some((Size::from_bytes(old_size), Align::from_bytes(align, align).unwrap())),\n                     MiriMemoryKind::Rust.into(),\n                 )?;\n             }\n             \"__rust_realloc\" => {\n-                let ptr = self.read_scalar(args[0])?.to_ptr()?.erase_tag(); // raw ptr operation, no tag\n+                let ptr = self.read_scalar(args[0])?.to_ptr()?;\n                 let old_size = self.read_scalar(args[1])?.to_usize(self)?;\n                 let align = self.read_scalar(args[2])?.to_usize(self)?;\n                 let new_size = self.read_scalar(args[3])?.to_usize(self)?;\n@@ -206,7 +206,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                     return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n                 let new_ptr = self.memory_mut().reallocate(\n-                    ptr.with_default_tag(),\n+                    ptr,\n                     Size::from_bytes(old_size),\n                     Align::from_bytes(align, align).unwrap(),\n                     Size::from_bytes(new_size),\n@@ -238,8 +238,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n \n             \"dlsym\" => {\n                 let _handle = self.read_scalar(args[0])?;\n-                let symbol = self.read_scalar(args[1])?.to_ptr()?.erase_tag();\n-                let symbol_name = self.memory().read_c_str(symbol.with_default_tag())?;\n+                let symbol = self.read_scalar(args[1])?.to_ptr()?;\n+                let symbol_name = self.memory().read_c_str(symbol)?;\n                 let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n                 let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n                 return err!(Unimplemented(format!(\n@@ -292,13 +292,13 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 return err!(MachineError(\"the evaluated program panicked\".to_string())),\n \n             \"memcmp\" => {\n-                let left = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation\n-                let right = self.read_scalar(args[1])?.not_undef()?.erase_tag(); // raw ptr operation\n+                let left = self.read_scalar(args[0])?.not_undef()?;\n+                let right = self.read_scalar(args[1])?.not_undef()?;\n                 let n = Size::from_bytes(self.read_scalar(args[2])?.to_usize(self)?);\n \n                 let result = {\n-                    let left_bytes = self.memory().read_bytes(left.with_default_tag(), n)?;\n-                    let right_bytes = self.memory().read_bytes(right.with_default_tag(), n)?;\n+                    let left_bytes = self.memory().read_bytes(left, n)?;\n+                    let right_bytes = self.memory().read_bytes(right, n)?;\n \n                     use std::cmp::Ordering::*;\n                     match left_bytes.cmp(right_bytes) {\n@@ -315,8 +315,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             }\n \n             \"memrchr\" => {\n-                let ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation\n-                let ptr = ptr.with_default_tag();\n+                let ptr = self.read_scalar(args[0])?.not_undef()?;\n+                let ptr = ptr;\n                 let val = self.read_scalar(args[1])?.to_bytes()? as u8;\n                 let num = self.read_scalar(args[2])?.to_usize(self)?;\n                 if let Some(idx) = self.memory().read_bytes(ptr, Size::from_bytes(num))?\n@@ -330,8 +330,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             }\n \n             \"memchr\" => {\n-                let ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation\n-                let ptr = ptr.with_default_tag();\n+                let ptr = self.read_scalar(args[0])?.not_undef()?;\n+                let ptr = ptr;\n                 let val = self.read_scalar(args[1])?.to_bytes()? as u8;\n                 let num = self.read_scalar(args[2])?.to_usize(self)?;\n                 if let Some(idx) = self.memory().read_bytes(ptr, Size::from_bytes(num))?.iter().position(\n@@ -347,8 +347,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n \n             \"getenv\" => {\n                 let result = {\n-                    let name_ptr = self.read_scalar(args[0])?.to_ptr()?.erase_tag(); // raw ptr operation\n-                    let name = self.memory().read_c_str(name_ptr.with_default_tag())?;\n+                    let name_ptr = self.read_scalar(args[0])?.to_ptr()?;\n+                    let name = self.memory().read_c_str(name_ptr)?;\n                     match self.machine.env_vars.get(name) {\n                         Some(&var) => Scalar::Ptr(var),\n                         None => Scalar::ptr_null(&*self.tcx),\n@@ -360,10 +360,10 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             \"unsetenv\" => {\n                 let mut success = None;\n                 {\n-                    let name_ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation\n+                    let name_ptr = self.read_scalar(args[0])?.not_undef()?;\n                     if !name_ptr.is_null_ptr(self) {\n                         let name = self.memory().read_c_str(name_ptr.to_ptr()?\n-                            .with_default_tag())?.to_owned();\n+                            )?.to_owned();\n                         if !name.is_empty() && !name.contains(&b'=') {\n                             success = Some(self.machine.env_vars.remove(&name));\n                         }\n@@ -382,11 +382,11 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             \"setenv\" => {\n                 let mut new = None;\n                 {\n-                    let name_ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation\n-                    let value_ptr = self.read_scalar(args[1])?.to_ptr()?.erase_tag(); // raw ptr operation\n-                    let value = self.memory().read_c_str(value_ptr.with_default_tag())?;\n+                    let name_ptr = self.read_scalar(args[0])?.not_undef()?;\n+                    let value_ptr = self.read_scalar(args[1])?.to_ptr()?;\n+                    let value = self.memory().read_c_str(value_ptr)?;\n                     if !name_ptr.is_null_ptr(self) {\n-                        let name = self.memory().read_c_str(name_ptr.to_ptr()?.with_default_tag())?;\n+                        let name = self.memory().read_c_str(name_ptr.to_ptr()?)?;\n                         if !name.is_empty() && !name.contains(&b'=') {\n                             new = Some((name.to_owned(), value.to_owned()));\n                         }\n@@ -417,14 +417,14 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n \n             \"write\" => {\n                 let fd = self.read_scalar(args[0])?.to_bytes()?;\n-                let buf = self.read_scalar(args[1])?.not_undef()?.erase_tag();\n+                let buf = self.read_scalar(args[1])?.not_undef()?;\n                 let n = self.read_scalar(args[2])?.to_bytes()? as u64;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n                 let result = if fd == 1 || fd == 2 {\n                     // stdout/stderr\n                     use std::io::{self, Write};\n \n-                    let buf_cont = self.memory().read_bytes(buf.with_default_tag(), Size::from_bytes(n))?;\n+                    let buf_cont = self.memory().read_bytes(buf, Size::from_bytes(n))?;\n                     let res = if fd == 1 {\n                         io::stdout().write(buf_cont)\n                     } else {\n@@ -445,8 +445,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n             }\n \n             \"strlen\" => {\n-                let ptr = self.read_scalar(args[0])?.to_ptr()?.erase_tag();\n-                let n = self.memory().read_c_str(ptr.with_default_tag())?.len();\n+                let ptr = self.read_scalar(args[0])?.to_ptr()?;\n+                let n = self.memory().read_c_str(ptr)?.len();\n                 self.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n             }\n \n@@ -492,7 +492,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n \n             // Hook pthread calls that go to the thread-local storage memory subsystem\n             \"pthread_key_create\" => {\n-                let key_ptr = self.read_scalar(args[0])?.to_ptr()?.erase_tag(); // raw ptr operation\n+                let key_ptr = self.read_scalar(args[0])?.to_ptr()?;\n \n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves...)\n                 let dtor = match self.read_scalar(args[1])?.not_undef()? {\n@@ -515,7 +515,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                     return err!(OutOfTls);\n                 }\n                 self.memory_mut().write_scalar(\n-                    key_ptr.with_default_tag(),\n+                    key_ptr,\n                     key_layout.align,\n                     Scalar::from_uint(key, key_layout.size).into(),\n                     key_layout.size,"}, {"sha": "6d5ac8d88bae293693babc778aae55f0bb77e069", "filename": "src/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/662821f7f732f85e05b85e59ee45747dc52fc2c8/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/662821f7f732f85e05b85e59ee45747dc52fc2c8/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=662821f7f732f85e05b85e59ee45747dc52fc2c8", "patch": "@@ -154,12 +154,12 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 let count = self.read_scalar(args[2])?.to_usize(self)?;\n                 let elem_align = elem_layout.align;\n                 // erase tags: this is a raw ptr operation\n-                let src = self.read_scalar(args[0])?.not_undef()?.erase_tag();\n-                let dest = self.read_scalar(args[1])?.not_undef()?.erase_tag();\n+                let src = self.read_scalar(args[0])?.not_undef()?;\n+                let dest = self.read_scalar(args[1])?.not_undef()?;\n                 self.memory_mut().copy(\n-                    src.with_default_tag(),\n+                    src,\n                     elem_align,\n-                    dest.with_default_tag(),\n+                    dest,\n                     elem_align,\n                     Size::from_bytes(count * elem_size),\n                     intrinsic_name.ends_with(\"_nonoverlapping\"),\n@@ -436,7 +436,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 let ty = substs.type_at(0);\n                 let ty_layout = self.layout_of(ty)?;\n                 let val_byte = self.read_scalar(args[1])?.to_u8()?;\n-                let ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag().with_default_tag();\n+                let ptr = self.read_scalar(args[0])?.not_undef()?;\n                 let count = self.read_scalar(args[2])?.to_usize(self)?;\n                 self.memory().check_align(ptr, ty_layout.align)?;\n                 self.memory_mut().write_repeat(ptr, val_byte, ty_layout.size * count)?;"}]}