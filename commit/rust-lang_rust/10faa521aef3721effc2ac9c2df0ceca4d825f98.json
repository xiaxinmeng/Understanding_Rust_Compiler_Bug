{"sha": "10faa521aef3721effc2ac9c2df0ceca4d825f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZmFhNTIxYWVmMzcyMWVmZmMyYWM5YzJkZjBjZWNhNGQ4MjVmOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-02T09:00:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-02T09:00:41Z"}, "message": "auto merge of #5188 : ben0x539/rust/doc-call-generic-fn, r=catamorphism\n\nI have seen a few people confused on how to explicitly instantiate generic functions, since the syntax differs from C++'s and C#'s, which is probably where most people asking questions about generic functions are coming from. The only use of the `::<T>` syntax in the reference right now is in the section on paths, which is possibly not where someone trying to find out about generic functions is going to start looking. The tutorial doesn't mention it at all, but I think it's all right to make the reference a tiny bit more redundant and avoid stuffing the tutorial with syntax details.\r\n\r\n----\r\n\r\nThe \"Generic functions\" subsection mentions that generic functions are instantiated based on context, so let's also mention right away (with a link to the #paths section) that an explicit form is available.\r\n\r\nThis also adds an example that explicitly instantiates a generic function to the function call expression section.", "tree": {"sha": "805d6757ba94ee93807dde9ae9e8e565588afcbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/805d6757ba94ee93807dde9ae9e8e565588afcbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10faa521aef3721effc2ac9c2df0ceca4d825f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10faa521aef3721effc2ac9c2df0ceca4d825f98", "html_url": "https://github.com/rust-lang/rust/commit/10faa521aef3721effc2ac9c2df0ceca4d825f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10faa521aef3721effc2ac9c2df0ceca4d825f98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0917e131d57b8fb84b462dad13cadbe051f5d011", "url": "https://api.github.com/repos/rust-lang/rust/commits/0917e131d57b8fb84b462dad13cadbe051f5d011", "html_url": "https://github.com/rust-lang/rust/commit/0917e131d57b8fb84b462dad13cadbe051f5d011"}, {"sha": "382143abd871d9b2c73df08ffd2928c44f314ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/382143abd871d9b2c73df08ffd2928c44f314ab3", "html_url": "https://github.com/rust-lang/rust/commit/382143abd871d9b2c73df08ffd2928c44f314ab3"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "2b9ed6d2d514385252b552b1ece938ec59a06a4f", "filename": "doc/rust.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10faa521aef3721effc2ac9c2df0ceca4d825f98/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/10faa521aef3721effc2ac9c2df0ceca4d825f98/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=10faa521aef3721effc2ac9c2df0ceca4d825f98", "patch": "@@ -908,6 +908,11 @@ function defined above on `[1, 2]` will instantiate type parameter `T`\n with `int`, and require the closure parameter to have type\n `fn(int)`.\n \n+The type parameters can also be explicitly supplied in a trailing\n+[path](#paths) component after the function name. This might be necessary\n+if there is not sufficient context to determine the type parameters. For\n+example, `sys::size_of::<u32>() == 4`.\n+\n Since a parameter type is opaque to the generic function, the set of\n operations that can be performed on it is limited. Values of parameter\n type can always be moved, but they can only be copied when the\n@@ -2055,12 +2060,14 @@ an optional reference slot to serve as the function's output, bound to the\n `lval` on the right hand side of the call. If the function eventually returns,\n then the expression completes.\n \n-An example of a call expression:\n+Some examples of call expressions:\n \n ~~~~\n # fn add(x: int, y: int) -> int { 0 }\n+# use core::from_str::FromStr::from_str;\n \n let x: int = add(1, 2);\n+let pi = from_str::<f32>(\"3.14\");\n ~~~~\n \n ### Lambda expressions"}]}