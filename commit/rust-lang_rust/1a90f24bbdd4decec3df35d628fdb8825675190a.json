{"sha": "1a90f24bbdd4decec3df35d628fdb8825675190a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOTBmMjRiYmRkNGRlY2VjM2RmMzVkNjI4ZmRiODgyNTY3NTE5MGE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-18T04:02:17Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-18T04:02:17Z"}, "message": "extra: minor cleanup of Zero and Default syntax extension", "tree": {"sha": "8af78affbe20f10f3ab78627939eaaae4de5c91f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af78affbe20f10f3ab78627939eaaae4de5c91f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a90f24bbdd4decec3df35d628fdb8825675190a", "comment_count": 25, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a90f24bbdd4decec3df35d628fdb8825675190a", "html_url": "https://github.com/rust-lang/rust/commit/1a90f24bbdd4decec3df35d628fdb8825675190a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a90f24bbdd4decec3df35d628fdb8825675190a/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab843fbc3924fc7706f8adf281da7aff3dced31", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab843fbc3924fc7706f8adf281da7aff3dced31", "html_url": "https://github.com/rust-lang/rust/commit/5ab843fbc3924fc7706f8adf281da7aff3dced31"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "d8c78842808d3de9ee5ff53571929d4dfe62cda0", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a90f24bbdd4decec3df35d628fdb8825675190a/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a90f24bbdd4decec3df35d628fdb8825675190a/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=1a90f24bbdd4decec3df35d628fdb8825675190a", "patch": "@@ -47,9 +47,7 @@ fn default_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Exp\n         cx.ident_of(\"Default\"),\n         cx.ident_of(\"default\")\n     ];\n-    let default_call = || {\n-        cx.expr_call_global(span, default_ident.clone(), ~[])\n-    };\n+    let default_call = cx.expr_call_global(span, default_ident.clone(), ~[]);\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n@@ -58,13 +56,13 @@ fn default_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Exp\n                     if count == 0 {\n                         cx.expr_ident(span, substr.type_ident)\n                     } else {\n-                        let exprs = vec::from_fn(count, |_| default_call());\n+                        let exprs = vec::from_elem(count, default_call);\n                         cx.expr_call_ident(span, substr.type_ident, exprs)\n                     }\n                 }\n                 Right(ref fields) => {\n                     let default_fields = do fields.map |ident| {\n-                        cx.field_imm(span, *ident, default_call())\n+                        cx.field_imm(span, *ident, default_call)\n                     };\n                     cx.expr_struct_ident(span, substr.type_ident, default_fields)\n                 }"}, {"sha": "2546cfc2e3999c9c65172f70784c57be662dcacb", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a90f24bbdd4decec3df35d628fdb8825675190a/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a90f24bbdd4decec3df35d628fdb8825675190a/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=1a90f24bbdd4decec3df35d628fdb8825675190a", "patch": "@@ -62,9 +62,7 @@ fn zero_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cx.ident_of(\"Zero\"),\n         cx.ident_of(\"zero\")\n     ];\n-    let zero_call = || {\n-        cx.expr_call_global(span, zero_ident.clone(), ~[])\n-    };\n+    let zero_call = cx.expr_call_global(span, zero_ident.clone(), ~[]);\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n@@ -73,13 +71,13 @@ fn zero_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n                     if count == 0 {\n                         cx.expr_ident(span, substr.type_ident)\n                     } else {\n-                        let exprs = vec::from_fn(count, |_| zero_call());\n+                        let exprs = vec::from_elem(count, zero_call);\n                         cx.expr_call_ident(span, substr.type_ident, exprs)\n                     }\n                 }\n                 Right(ref fields) => {\n                     let zero_fields = do fields.map |ident| {\n-                        cx.field_imm(span, *ident, zero_call())\n+                        cx.field_imm(span, *ident, zero_call)\n                     };\n                     cx.expr_struct_ident(span, substr.type_ident, zero_fields)\n                 }"}]}