{"sha": "cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYWJkZmExMDRhM2MwZTdiYTNmZjJiMzdmOTY3ZWIwZTUwMDBhYWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-06-27T15:56:13Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-02T11:19:04Z"}, "message": "Simplify DOM by removing IDs for code tags", "tree": {"sha": "eaaa7016014bc1b17829a488ceb1438ae7ae3955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaaa7016014bc1b17829a488ceb1438ae7ae3955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae", "html_url": "https://github.com/rust-lang/rust/commit/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc61cca41cb81af3c8167e8ceb596e2077d70310", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc61cca41cb81af3c8167e8ceb596e2077d70310", "html_url": "https://github.com/rust-lang/rust/commit/fc61cca41cb81af3c8167e8ceb596e2077d70310"}], "stats": {"total": 68, "additions": 16, "deletions": 52}, "files": [{"sha": "dd4713d6c60f7960cf76d7498ecafda5d09c4282", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae", "patch": "@@ -2586,8 +2586,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let name = m.name.as_ref().unwrap();\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-        let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-        write!(w, \"<h3 id='{id}' class='method'><code id='{ns_id}'>\", id = id, ns_id = ns_id);\n+        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -2972,20 +2971,14 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n                     ItemType::StructField,\n                     field.name.as_ref().unwrap()\n                 ));\n-                let ns_id = cx.derive_id(format!(\n-                    \"{}.{}\",\n-                    field.name.as_ref().unwrap(),\n-                    ItemType::StructField.name_space()\n-                ));\n                 write!(\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n                            <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <code id=\\\"{ns_id}\\\">{name}: {ty}</code>\\\n+                           <code>{name}: {ty}</code>\\\n                            </span>\",\n                     item_type = ItemType::StructField,\n                     id = id,\n-                    ns_id = ns_id,\n                     name = field.name.as_ref().unwrap(),\n                     ty = ty.print()\n                 );\n@@ -3103,18 +3096,12 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n         for variant in &e.variants {\n             let id =\n                 cx.derive_id(format!(\"{}.{}\", ItemType::Variant, variant.name.as_ref().unwrap()));\n-            let ns_id = cx.derive_id(format!(\n-                \"{}.{}\",\n-                variant.name.as_ref().unwrap(),\n-                ItemType::Variant.name_space()\n-            ));\n             write!(\n                 w,\n                 \"<div id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                       <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                       <code id='{ns_id}'>{name}\",\n+                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                    <code>{name}\",\n                 id = id,\n-                ns_id = ns_id,\n                 name = variant.name.as_ref().unwrap()\n             );\n             if let clean::VariantItem(ref var) = variant.inner {\n@@ -3155,21 +3142,13 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n                             variant.name.as_ref().unwrap(),\n                             field.name.as_ref().unwrap()\n                         ));\n-                        let ns_id = cx.derive_id(format!(\n-                            \"{}.{}.{}.{}\",\n-                            variant.name.as_ref().unwrap(),\n-                            ItemType::Variant.name_space(),\n-                            field.name.as_ref().unwrap(),\n-                            ItemType::StructField.name_space()\n-                        ));\n                         write!(\n                             w,\n                             \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n                                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                   <code id='{ns_id}'>{f}:&nbsp;{t}\\\n+                                   <code>{f}:&nbsp;{t}\\\n                                    </code></span>\",\n                             id = id,\n-                            ns_id = ns_id,\n                             f = field.name.as_ref().unwrap(),\n                             t = ty.print()\n                         );\n@@ -3661,9 +3640,7 @@ fn render_impl(\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                    write!(w, \"<code id='{}'>\", ns_id);\n+                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since(), outer_version);\n@@ -3679,17 +3656,13 @@ fn render_impl(\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssocType, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n                 render_stability_since_raw(w, item.stable_since(), outer_version);\n@@ -3704,9 +3677,7 @@ fn render_impl(\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }"}, {"sha": "69e2bacc21882e3d81fa18f1ca7838ed97ad7d8f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=cdabdfa104a3c0e7ba3ff2b37f967eb0e5000aae", "patch": "@@ -306,14 +306,6 @@ function defocusSearchBar() {\n     function expandSection(id) {\n         var elem = document.getElementById(id);\n         if (elem && isHidden(elem)) {\n-            if (elem.tagName === \"CODE\" && elem.parentNode.tagName === \"H4\") {\n-                // We are in a trait implementation, what we want is the parent.\n-                elem = elem.parentNode;\n-                if (elem.id !== null && elem.id.length > 0) {\n-                    // Change the id to the parent which is \"more clear\" and better for users.\n-                    window.location.hash = elem.id;\n-                }\n-            }\n             var h3 = elem.parentNode.previousElementSibling;\n             if (h3 && h3.tagName !== \"H3\") {\n                 h3 = h3.previousElementSibling; // skip div.docblock\n@@ -2561,6 +2553,13 @@ function defocusSearchBar() {\n \n         onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n         onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+        var pageId = getPageId();\n+\n+        autoCollapse(pageId, getCurrentValue(\"rustdoc-collapse\") === \"true\");\n+\n+        if (pageId !== null) {\n+            expandSection(pageId);\n+        }\n     }());\n \n     function createToggleWrapper(tog) {\n@@ -2696,12 +2695,6 @@ function defocusSearchBar() {\n         hideSidebar();\n     };\n \n-    autoCollapse(pageId, getCurrentValue(\"rustdoc-collapse\") === \"true\");\n-\n-    if (pageId !== null) {\n-        expandSection(pageId);\n-    }\n-\n     if (main) {\n         onEachLazy(main.getElementsByClassName(\"loading-content\"), function(e) {\n             e.remove();"}]}