{"sha": "c08197484546b57ee92f02f7c3c3a5179faadb55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODE5NzQ4NDU0NmI1N2VlOTJmMDJmN2MzYzNhNTE3OWZhYWRiNTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-01T04:50:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-01T04:50:09Z"}, "message": "Rollup merge of #61391 - wesleywiser:doc_comments_interpretcx, r=Centril\n\nDoc comment fixes for `rustc::mir::interpret::InterpretCx`\n\nFixes some stuff I noticed while working in const-prop.", "tree": {"sha": "dafb91da8167184910c5aa64e9fca342a98b752a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dafb91da8167184910c5aa64e9fca342a98b752a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08197484546b57ee92f02f7c3c3a5179faadb55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc8gQBCRBK7hj4Ov3rIwAAdHIIADGAIrohHXnSCXwpDbRz47SV\nu6ivt/3tojhOCWB1DESAM7yRdki/qyZ7iDdOdfDeOp0cRa0H06gikmLbUa9KQEYK\ndwhEe7/0pk4J8FP5fw3Qnxu7gCeV+mNlJGf3W5+5WMLrKyJE1orGC85IEQerK4/5\nLBb1Wex7z6tGsSZ+hiZjl2+pRZw5XIpj64WrREe4Ssg5KC9VId7k3pf+H5yZslT1\ngUHFFneEK3uBiFXDurq6EL9wJEi/BllAt0VKUZuEUewWsSK7pBpTp+MexiH13ZCL\np1rft97kNalhB3t12mGFcIxIkbh/RUwBZHZuMszmqP6FZIMBuhMUqIp94x+5eXI=\n=j5m+\n-----END PGP SIGNATURE-----\n", "payload": "tree dafb91da8167184910c5aa64e9fca342a98b752a\nparent 760a98fb5e1c964efbe5cb36710fff892b547c51\nparent 3b7223deaff5f1f71258de07f5aef18bd9bba702\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559364609 +0200\ncommitter GitHub <noreply@github.com> 1559364609 +0200\n\nRollup merge of #61391 - wesleywiser:doc_comments_interpretcx, r=Centril\n\nDoc comment fixes for `rustc::mir::interpret::InterpretCx`\n\nFixes some stuff I noticed while working in const-prop.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08197484546b57ee92f02f7c3c3a5179faadb55", "html_url": "https://github.com/rust-lang/rust/commit/c08197484546b57ee92f02f7c3c3a5179faadb55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08197484546b57ee92f02f7c3c3a5179faadb55/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760a98fb5e1c964efbe5cb36710fff892b547c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/760a98fb5e1c964efbe5cb36710fff892b547c51", "html_url": "https://github.com/rust-lang/rust/commit/760a98fb5e1c964efbe5cb36710fff892b547c51"}, {"sha": "3b7223deaff5f1f71258de07f5aef18bd9bba702", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7223deaff5f1f71258de07f5aef18bd9bba702", "html_url": "https://github.com/rust-lang/rust/commit/3b7223deaff5f1f71258de07f5aef18bd9bba702"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "628e7b02bdf9cbd4a3515c4d4c6f63cb68bc0cf8", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08197484546b57ee92f02f7c3c3a5179faadb55/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08197484546b57ee92f02f7c3c3a5179faadb55/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=c08197484546b57ee92f02f7c3c3a5179faadb55", "patch": "@@ -243,7 +243,7 @@ pub(super) fn from_known_layout<'tcx>(\n }\n \n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M> {\n-    /// Try reading an immediate in memory; this is interesting particularly for ScalarPair.\n+    /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.\n     /// Returns `None` if the layout does not permit loading this as a value.\n     fn try_read_immediate_from_mplace(\n         &self,\n@@ -444,7 +444,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         Ok(OpTy { op, layout })\n     }\n \n-    /// Every place can be read from, so we can turm them into an operand\n+    /// Every place can be read from, so we can turn them into an operand\n     #[inline(always)]\n     pub fn place_to_op(\n         &self,\n@@ -500,7 +500,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     }\n \n     /// Evaluate the operand, returning a place where you can then find the data.\n-    /// if you already know the layout, you can save two some table lookups\n+    /// If you already know the layout, you can save two table lookups\n     /// by passing it in here.\n     pub fn eval_operand(\n         &self,"}, {"sha": "36e6d44b0c40a8c0326f615756a2dd6f8a0908bb", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c08197484546b57ee92f02f7c3c3a5179faadb55/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08197484546b57ee92f02f7c3c3a5179faadb55/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=c08197484546b57ee92f02f7c3c3a5179faadb55", "patch": "@@ -346,8 +346,8 @@ where\n         Ok(place)\n     }\n \n-    /// Offset a pointer to project to a field. Unlike place_field, this is always\n-    /// possible without allocating, so it can take &self. Also return the field's layout.\n+    /// Offset a pointer to project to a field. Unlike `place_field`, this is always\n+    /// possible without allocating, so it can take `&self`. Also return the field's layout.\n     /// This supports both struct and array fields.\n     #[inline(always)]\n     pub fn mplace_field(\n@@ -722,7 +722,7 @@ where\n     }\n \n     /// Write an immediate to memory.\n-    /// If you use this you are responsible for validating that things git copied at the\n+    /// If you use this you are responsible for validating that things got copied at the\n     /// right type.\n     fn write_immediate_to_mplace_no_validate(\n         &mut self,\n@@ -805,7 +805,7 @@ where\n \n     /// Copies the data from an operand to a place. This does not support transmuting!\n     /// Use `copy_op_transmute` if the layouts could disagree.\n-    /// Also, if you use this you are responsible for validating that things git copied at the\n+    /// Also, if you use this you are responsible for validating that things get copied at the\n     /// right type.\n     fn copy_op_no_validate(\n         &mut self,"}, {"sha": "851d32203db610e1a2bc5571a6e57a141e6b5fd7", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08197484546b57ee92f02f7c3c3a5179faadb55/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08197484546b57ee92f02f7c3c3a5179faadb55/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=c08197484546b57ee92f02f7c3c3a5179faadb55", "patch": "@@ -613,7 +613,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     /// is an indirect operand.\n     /// It will error if the bits at the destination do not match the ones described by the layout.\n     ///\n-    /// `ref_tracking` can be None to avoid recursive checking below references.\n+    /// `ref_tracking` can be `None` to avoid recursive checking below references.\n     /// This also toggles between \"run-time\" (no recursion) and \"compile-time\" (with recursion)\n     /// validation (e.g., pointer values are fine in integers at runtime).\n     pub fn validate_operand("}]}