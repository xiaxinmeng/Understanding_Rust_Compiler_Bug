{"sha": "b2796ecb774883c3b22343ed1992cac390003882", "node_id": "C_kwDOAAsO6NoAKGIyNzk2ZWNiNzc0ODgzYzNiMjIzNDNlZDE5OTJjYWMzOTAwMDM4ODI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T17:47:10Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T17:52:37Z"}, "message": "Add issue reference to fixmes", "tree": {"sha": "6a447ffe92c7df74063a97f6383f6644ab180644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a447ffe92c7df74063a97f6383f6644ab180644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2796ecb774883c3b22343ed1992cac390003882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2796ecb774883c3b22343ed1992cac390003882", "html_url": "https://github.com/rust-lang/rust/commit/b2796ecb774883c3b22343ed1992cac390003882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2796ecb774883c3b22343ed1992cac390003882/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc05ae4892b80a09bb0bfea37fb68974a9feadc", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc05ae4892b80a09bb0bfea37fb68974a9feadc", "html_url": "https://github.com/rust-lang/rust/commit/edc05ae4892b80a09bb0bfea37fb68974a9feadc"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6bf3a866ba46ac37e33a57ae5d42d3b2bd4124ee", "filename": "src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2796ecb774883c3b22343ed1992cac390003882/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2796ecb774883c3b22343ed1992cac390003882/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=b2796ecb774883c3b22343ed1992cac390003882", "patch": "@@ -103,7 +103,7 @@ pub(crate) fn clif_int_or_float_cast(\n                     vec![AbiParam::new(types::I64X2)],\n                     &[from],\n                 )[0];\n-                // FIXME use bitcast instead of store to get from i64x2 to i128\n+                // FIXME(bytecodealliance/wasmtime#6104) use bitcast instead of store to get from i64x2 to i128\n                 let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {\n                     kind: StackSlotKind::ExplicitSlot,\n                     size: 16,"}, {"sha": "f751d8c179db59c3e60e84a053bc05dc584ad659", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2796ecb774883c3b22343ed1992cac390003882/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2796ecb774883c3b22343ed1992cac390003882/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=b2796ecb774883c3b22343ed1992cac390003882", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     vec![AbiParam::new(types::I64X2)],\n                     &args,\n                 )[0];\n-                // FIXME use bitcast instead of store to get from i64x2 to i128\n+                // FIXME(bytecodealliance/wasmtime#6104) use bitcast instead of store to get from i64x2 to i128\n                 let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n                 ret_place.to_ptr().store(fx, ret, MemFlags::trusted());\n                 Some(ret_place.to_cvalue(fx))"}, {"sha": "34c6b76c8d7e6e965c8ac656e34307e4e7ddb450", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2796ecb774883c3b22343ed1992cac390003882/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2796ecb774883c3b22343ed1992cac390003882/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=b2796ecb774883c3b22343ed1992cac390003882", "patch": "@@ -517,7 +517,7 @@ impl<'tcx> CPlace<'tcx> {\n                 | (types::F64, types::I64) => codegen_bitcast(fx, dst_ty, data),\n                 _ if src_ty.is_vector() && dst_ty.is_vector() => codegen_bitcast(fx, dst_ty, data),\n                 _ if src_ty.is_vector() || dst_ty.is_vector() => {\n-                    // FIXME do something more efficient for transmutes between vectors and integers.\n+                    // FIXME(bytecodealliance/wasmtime#6104) do something more efficient for transmutes between vectors and integers.\n                     let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {\n                         kind: StackSlotKind::ExplicitSlot,\n                         // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to"}]}