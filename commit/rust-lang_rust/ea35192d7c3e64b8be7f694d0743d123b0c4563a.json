{"sha": "ea35192d7c3e64b8be7f694d0743d123b0c4563a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMzUxOTJkN2MzZTY0YjhiZTdmNjk0ZDA3NDNkMTIzYjBjNDU2M2E=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-18T14:18:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-29T10:54:39Z"}, "message": "Adjust imports to librustc::mir::interpret", "tree": {"sha": "10956cd7a83c6090c491ae46b7801744675f5831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10956cd7a83c6090c491ae46b7801744675f5831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea35192d7c3e64b8be7f694d0743d123b0c4563a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlnOJn0ACgkQpp+NIls6\n19nNRA//T2JN4eblGm3iZqq2yncemwEZQffb+5i+nej6SbnbJokSUAd153lcx9wV\nlObcaoA2NmfibmG5CY8GAbOksPA6o8DDpKMlfs5Q0y6Fpy0Gq4vuYxtj8H0qXNfx\nSJQIn3ZlRYDkWgw8vC+TTQkVYRnqsKvLUyhJ4dDsypU3enJ7nn67N1HKpIuY9qhO\not1YbuJFYUdskiWctFgvIVvvcBLs361820Btxp9hcBKSgp5MfRvvec4sgKv/dOfq\nALqgim3ZopkzT/OjsybFR7lYA5gOHwOc43EdQIAQ9IGUz8aE/jxJ0DkZ2ognDMQm\n20Q/YPMcq5kqg/mD/1a0dGqul8TFQzZOigumZSKh85eZ42B+/C2KeiBVS3lhxNoX\nGeK7/aWDsKF8sZX6JjS+M19l2Lzx3xHYc8KQT1jPJ4SQXSCE+ntpTFPBiQWUfQPU\nzjeBa83GR7xox3jaBoxX0BT6mb5vc8Kl0G4ahE/k2bCtDOBvXfkuTuVQDNP7FvFk\nhvlvlsligXXLE+vVf121dBMMNnn47/7JZVBdZUWYGDJr96pF5Z+MDu6aQxVg2hU+\n9dsIfabVzt7mwgCv1fPZmL/042CHSHQZ+9iWMooUL6L7xp7XLJfgp4+GNM45ksra\nvAnj6W8G+LrQv4kMeGomgPs84nx1ZbP8wPszaL+ApF/0KE8GK/A=\n=7zAZ\n-----END PGP SIGNATURE-----", "payload": "tree 10956cd7a83c6090c491ae46b7801744675f5831\nparent df5e122edaab52250b0a49ccf30a2f56948b75aa\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505744303 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1506682479 +0200\n\nAdjust imports to librustc::mir::interpret\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea35192d7c3e64b8be7f694d0743d123b0c4563a", "html_url": "https://github.com/rust-lang/rust/commit/ea35192d7c3e64b8be7f694d0743d123b0c4563a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea35192d7c3e64b8be7f694d0743d123b0c4563a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df5e122edaab52250b0a49ccf30a2f56948b75aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/df5e122edaab52250b0a49ccf30a2f56948b75aa", "html_url": "https://github.com/rust-lang/rust/commit/df5e122edaab52250b0a49ccf30a2f56948b75aa"}], "stats": {"total": 311, "additions": 209, "deletions": 102}, "files": [{"sha": "5e775a0f61e0f4fac4be7639aa5c08596922f472", "filename": "src/Cargo.lock", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -174,6 +174,11 @@ dependencies = [\n  \"filetime 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"byteorder\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"cargo\"\n version = \"0.23.0\"\n@@ -888,6 +893,14 @@ name = \"log\"\n version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"log_settings\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"lzma-sys\"\n version = \"0.1.9\"\n@@ -1430,13 +1443,18 @@ name = \"rustc\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n+ \"backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -2489,6 +2507,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5cde24d1b2e2216a726368b2363a273739c91f4e3eb4e0dd12d672d396ad989\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n+\"checksum byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff81738b726f5d099632ceaffe7fb65b90212e8dce59d518729e7e8634032d3d\"\n \"checksum cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7db2f146208d7e0fbee761b09cd65a7f51ccc38705d4e7262dad4d73b12a76b1\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum clap 2.26.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3451e409013178663435d6f15fdb212f14ee4424a3d74f979d081d0a66b6f1f2\"\n@@ -2547,6 +2566,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n \"checksum libz-sys 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44ebbc760fd2d2f4d93de09a0e13d97e057612052e871da9985cedcb451e6bd5\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n+\"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum lzma-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1b93b78f89e8737dac81837fc8f5521ac162abcba902e1a3db949d55346d1da\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n \"checksum magenta 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bf0336886480e671965f794bc9b6fce88503563013d1bfb7a502c81fe3ac527\""}, {"sha": "5dd094b587bdf979e28002394e5f4e52fcce8597", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -23,6 +23,12 @@ rustc_errors = { path = \"../librustc_errors\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+log_settings = \"0.1.1\"\n+lazy_static = \"0.2.8\"\n+regex = \"0.2.2\"\n+backtrace = \"0.3.3\"\n+byteorder = { version = \"1.1\", features = [\"i128\"]}\n+\n \n # Note that these dependencies are a lie, they're just here to get linkage to\n # work."}, {"sha": "754ceee6be14be635afda304733084ab94155ba4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -54,6 +54,7 @@\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(trace_macros)]\n+#![feature(catch_expr)]\n #![feature(test)]\n \n #![cfg_attr(stage0, feature(const_fn))]\n@@ -82,6 +83,13 @@ extern crate jobserver;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n+extern crate log_settings;\n+extern crate byteorder;\n+#[macro_use]\n+extern crate lazy_static;\n+extern crate regex;\n+extern crate backtrace;\n+\n // Note that librustc doesn't actually depend on these crates, see the note in\n // `Cargo.toml` for this crate about why these are here.\n #[allow(unused_extern_crates)]"}, {"sha": "c9f08da92122cab8284f649155802131468d9d8a", "filename": "src/librustc/mir/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fcast.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty};\n+use ty::{self, Ty};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use super::{PrimVal, EvalContext, EvalResult, MemoryPointer, PointerArithmetic, Machine};\n@@ -72,7 +72,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         negative: bool,\n     ) -> EvalResult<'tcx, PrimVal> {\n         trace!(\"cast_from_int: {}, {}, {}\", v, ty, negative);\n-        use rustc::ty::TypeVariants::*;\n+        use ty::TypeVariants::*;\n         match ty.sty {\n             // Casts to bool are not permitted by rustc, no need to handle them here.\n             TyInt(ty) => Ok(PrimVal::Bytes(self.int_to_int(v as i128, ty))),\n@@ -94,7 +94,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     fn cast_from_float(&self, val: f64, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n-        use rustc::ty::TypeVariants::*;\n+        use ty::TypeVariants::*;\n         match ty.sty {\n             // Casting negative floats to unsigned integers yields zero.\n             TyUint(_) if val < 0.0 => self.cast_from_int(0, ty, false),\n@@ -109,7 +109,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     fn cast_from_ptr(&self, ptr: MemoryPointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n-        use rustc::ty::TypeVariants::*;\n+        use ty::TypeVariants::*;\n         match ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc, no need to support it here.\n             TyRawPtr(_) |"}, {"sha": "f288767a644f1c5b5c15c388e9a7d73f3e064b3a", "filename": "src/librustc/mir/interpret/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,6 +1,6 @@\n-use rustc::traits::Reveal;\n-use rustc::ty::{self, TyCtxt, Ty, Instance, layout};\n-use rustc::mir;\n+use traits::Reveal;\n+use ty::{self, TyCtxt, Ty, Instance, layout};\n+use mir;\n \n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n@@ -83,7 +83,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n     let (prim, ty) = eval_body_as_primval(tcx, instance)?;\n     let prim = prim.to_bytes()?;\n     use syntax::ast::{IntTy, UintTy};\n-    use rustc::ty::TypeVariants::*;\n+    use ty::TypeVariants::*;\n     use rustc_const_math::{ConstIsize, ConstUsize};\n     Ok(match ty.sty {\n         TyInt(IntTy::I8) => ConstInt::I8(prim as i128 as i8),"}, {"sha": "e3356ea19fa1d2facf50a19212d5a98ede885a2d", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,8 +1,8 @@\n use std::error::Error;\n use std::{fmt, env};\n \n-use rustc::mir;\n-use rustc::ty::{FnSig, Ty, layout};\n+use mir;\n+use ty::{FnSig, Ty, layout};\n \n use super::{\n     MemoryPointer, Lock, AccessKind"}, {"sha": "879bbf8fb7bd3df1a894a08748afc263ade45270", "filename": "src/librustc/mir/interpret/eval_context.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,15 +1,15 @@\n use std::collections::{HashMap, HashSet};\n use std::fmt::Write;\n \n-use rustc::hir::def_id::DefId;\n-use rustc::hir::map::definitions::DefPathData;\n-use rustc::middle::const_val::ConstVal;\n-use rustc::middle::region;\n-use rustc::mir;\n-use rustc::traits::Reveal;\n-use rustc::ty::layout::{self, Layout, Size, Align, HasDataLayout};\n-use rustc::ty::subst::{Subst, Substs, Kind};\n-use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use hir::def_id::DefId;\n+use hir::map::definitions::DefPathData;\n+use middle::const_val::ConstVal;\n+use middle::region;\n+use mir;\n+use traits::Reveal;\n+use ty::layout::{self, Layout, Size, Align, HasDataLayout};\n+use ty::subst::{Subst, Substs, Kind};\n+use ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::codemap::{self, DUMMY_SP};\n use syntax::ast::Mutability;\n@@ -227,7 +227,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     pub(super) fn const_to_value(&mut self, const_val: &ConstVal<'tcx>) -> EvalResult<'tcx, Value> {\n-        use rustc::middle::const_val::ConstVal::*;\n+        use middle::const_val::ConstVal::*;\n \n         let primval = match *const_val {\n             Integral(const_int) => PrimVal::Bytes(const_int.to_u128_unchecked()),\n@@ -467,7 +467,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n         /// Return the set of locals that have a storage annotation anywhere\n         fn collect_storage_annotations<'tcx>(mir: &'tcx mir::Mir<'tcx>) -> HashSet<mir::Local> {\n-            use rustc::mir::StatementKind::*;\n+            use mir::StatementKind::*;\n \n             let mut set = HashSet::new();\n             for block in mir.basic_blocks() {\n@@ -634,7 +634,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let dest_ty = self.lvalue_ty(lvalue);\n         let dest_layout = self.type_layout(dest_ty)?;\n \n-        use rustc::mir::Rvalue::*;\n+        use mir::Rvalue::*;\n         match *rvalue {\n             Use(ref operand) => {\n                 let value = self.eval_operand(operand)?.value;\n@@ -692,7 +692,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n             Aggregate(ref kind, ref operands) => {\n                 self.inc_step_counter_and_check_limit(operands.len() as u64)?;\n-                use rustc::ty::layout::Layout::*;\n+                use ty::layout::Layout::*;\n                 match *dest_layout {\n                     Univariant { ref variant, .. } => {\n                         self.write_maybe_aligned_mut(!variant.packed, |ecx| {\n@@ -893,7 +893,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n             Cast(kind, ref operand, cast_ty) => {\n                 debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest_ty);\n-                use rustc::mir::CastKind::*;\n+                use mir::CastKind::*;\n                 match kind {\n                     Unsize => {\n                         let src = self.eval_operand(operand)?;\n@@ -1122,7 +1122,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 packed: false,\n             }),\n             ty::TyAdt(adt_def, substs) if adt_def.is_enum() => {\n-                use rustc::ty::layout::Layout::*;\n+                use ty::layout::Layout::*;\n                 match *self.type_layout(ty)? {\n                     RawNullablePointer { nndiscr, .. } => Ok(TyAndPacked {\n                         ty: adt_def.variants[nndiscr as usize].fields[field_index].ty(\n@@ -1161,7 +1161,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n             ty::TyAdt(adt_def, substs) => {\n                 let variant_def = adt_def.struct_variant();\n-                use rustc::ty::layout::Layout::*;\n+                use ty::layout::Layout::*;\n                 match *self.type_layout(ty)? {\n                     UntaggedUnion { ref variants } => Ok(TyAndPacked {\n                         ty: variant_def.fields[field_index].ty(self.tcx, substs),\n@@ -1214,7 +1214,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         // Also see lvalue_field in lvalue.rs, which handles more cases but needs an actual value at the given type\n         let layout = self.type_layout(ty)?;\n \n-        use rustc::ty::layout::Layout::*;\n+        use ty::layout::Layout::*;\n         match *layout {\n             Univariant { ref variant, .. } => Ok(variant.offsets[field_index]),\n             FatPointer { .. } => {\n@@ -1239,7 +1239,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     pub fn get_field_count(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, u64> {\n         let layout = self.type_layout(ty)?;\n \n-        use rustc::ty::layout::Layout::*;\n+        use ty::layout::Layout::*;\n         match *layout {\n             Univariant { ref variant, .. } => Ok(variant.offsets.len() as u64),\n             FatPointer { .. } => Ok(2),\n@@ -1277,7 +1277,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     pub fn eval_operand(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<'tcx, ValTy<'tcx>> {\n-        use rustc::mir::Operand::*;\n+        use mir::Operand::*;\n         match *op {\n             Consume(ref lvalue) => {\n                 Ok(ValTy {\n@@ -1287,7 +1287,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             },\n \n             Constant(ref constant) => {\n-                use rustc::mir::Literal;\n+                use mir::Literal;\n                 let mir::Constant { ref literal, .. } = **constant;\n                 let value = match *literal {\n                     Literal::Value { ref value } => self.const_to_value(&value.val)?,\n@@ -1314,7 +1314,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         adt_ptr: MemoryPointer,\n         adt_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, u128> {\n-        use rustc::ty::layout::Layout::*;\n+        use ty::layout::Layout::*;\n         let adt_layout = self.type_layout(adt_ty)?;\n         //trace!(\"read_discriminant_value {:#?}\", adt_layout);\n \n@@ -1418,7 +1418,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n     pub fn is_packed(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, bool> {\n         let layout = self.type_layout(ty)?;\n-        use rustc::ty::layout::Layout::*;\n+        use ty::layout::Layout::*;\n         Ok(match *layout {\n             Univariant { ref variant, .. } => variant.packed,\n \n@@ -1719,7 +1719,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             ty::TyAdt(def, _) if def.is_box() => PrimValKind::Ptr,\n \n             ty::TyAdt(def, substs) => {\n-                use rustc::ty::layout::Layout::*;\n+                use ty::layout::Layout::*;\n                 match *self.type_layout(ty)? {\n                     CEnum { discr, signed, .. } => {\n                         let size = discr.size().bytes();\n@@ -1731,7 +1731,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     }\n \n                     RawNullablePointer { value, .. } => {\n-                        use rustc::ty::layout::Primitive::*;\n+                        use ty::layout::Primitive::*;\n                         match value {\n                             // TODO(solson): Does signedness matter here? What should the sign be?\n                             Int(int) => PrimValKind::from_uint_size(int.size().bytes()),\n@@ -1867,7 +1867,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 if def.is_box() {\n                     return self.read_ptr(ptr, ty.boxed_ty()).map(Some);\n                 }\n-                use rustc::ty::layout::Layout::*;\n+                use ty::layout::Layout::*;\n                 if let CEnum { discr, signed, .. } = *self.type_layout(ty)? {\n                     let size = discr.size().bytes();\n                     self.memory.read_primval(ptr, size, signed)?\n@@ -2225,7 +2225,7 @@ pub(super) trait IntegerExt {\n \n impl IntegerExt for layout::Integer {\n     fn size(self) -> Size {\n-        use rustc::ty::layout::Integer::*;\n+        use ty::layout::Integer::*;\n         match self {\n             I1 | I8 => Size::from_bits(8),\n             I16 => Size::from_bits(16),\n@@ -2416,19 +2416,19 @@ fn resolve_associated_item<'a, 'tcx>(\n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n     match vtbl {\n-        ::rustc::traits::VtableImpl(impl_data) => {\n+        ::traits::VtableImpl(impl_data) => {\n             let (def_id, substs) =\n-                ::rustc::traits::find_associated_item(tcx, trait_item, rcvr_substs, &impl_data);\n+                ::traits::find_associated_item(tcx, trait_item, rcvr_substs, &impl_data);\n             let substs = tcx.erase_regions(&substs);\n             ty::Instance::new(def_id, substs)\n         }\n-        ::rustc::traits::VtableGenerator(closure_data) => {\n+        ::traits::VtableGenerator(closure_data) => {\n             ty::Instance {\n                 def: ty::InstanceDef::Item(closure_data.closure_def_id),\n                 substs: closure_data.substs.substs\n             }\n         }\n-        ::rustc::traits::VtableClosure(closure_data) => {\n+        ::traits::VtableClosure(closure_data) => {\n             let trait_closure_kind = tcx.lang_items().fn_trait_kind(trait_id).unwrap();\n             resolve_closure(\n                 tcx,\n@@ -2437,20 +2437,20 @@ fn resolve_associated_item<'a, 'tcx>(\n                 trait_closure_kind,\n             )\n         }\n-        ::rustc::traits::VtableFnPointer(ref data) => {\n+        ::traits::VtableFnPointer(ref data) => {\n             ty::Instance {\n                 def: ty::InstanceDef::FnPtrShim(trait_item.def_id, data.fn_ty),\n                 substs: rcvr_substs,\n             }\n         }\n-        ::rustc::traits::VtableObject(ref data) => {\n+        ::traits::VtableObject(ref data) => {\n             let index = tcx.get_vtable_index_of_object_method(data, def_id);\n             ty::Instance {\n                 def: ty::InstanceDef::Virtual(def_id, index),\n                 substs: rcvr_substs,\n             }\n         }\n-        ::rustc::traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items().clone_trait() => {\n+        ::traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items().clone_trait() => {\n             ty::Instance {\n                 def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n                 substs: rcvr_substs\n@@ -2477,7 +2477,7 @@ pub fn apply_param_substs<'a, 'tcx, T>(\n     value: &T,\n ) -> T\n where\n-    T: ::rustc::infer::TransNormalize<'tcx>,\n+    T: ::infer::TransNormalize<'tcx>,\n {\n     debug!(\n         \"apply_param_substs(param_substs={:?}, value={:?})\",\n@@ -2504,7 +2504,7 @@ impl<'a, 'tcx> AssociatedTypeNormalizer<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> ::rustc::ty::fold::TypeFolder<'tcx, 'tcx> for AssociatedTypeNormalizer<'a, 'tcx> {\n+impl<'a, 'tcx> ::ty::fold::TypeFolder<'tcx, 'tcx> for AssociatedTypeNormalizer<'a, 'tcx> {\n     fn tcx<'c>(&'c self) -> TyCtxt<'c, 'tcx, 'tcx> {\n         self.tcx\n     }\n@@ -2528,7 +2528,7 @@ pub fn resolve_drop_in_place<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ty: Ty<'tcx>,\n ) -> ty::Instance<'tcx> {\n-    let def_id = tcx.require_lang_item(::rustc::middle::lang_items::DropInPlaceFnLangItem);\n+    let def_id = tcx.require_lang_item(::middle::lang_items::DropInPlaceFnLangItem);\n     let substs = tcx.intern_substs(&[Kind::from(ty)]);\n     resolve(tcx, def_id, substs)\n }"}, {"sha": "e419061fb873f2bb5bf4814b23eae190ce100d04", "filename": "src/librustc/mir/interpret/lvalue.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Flvalue.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,6 +1,6 @@\n-use rustc::mir;\n-use rustc::ty::layout::{Size, Align};\n-use rustc::ty::{self, Ty};\n+use mir;\n+use ty::layout::{Size, Align};\n+use ty::{self, Ty};\n use rustc_data_structures::indexed_vec::Idx;\n \n use super::{EvalResult, EvalContext, MemoryPointer, PrimVal, Value, Pointer, Machine, PtrAndAlign, ValTy};\n@@ -101,7 +101,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         &mut self,\n         lvalue: &mir::Lvalue<'tcx>,\n     ) -> EvalResult<'tcx, Option<Value>> {\n-        use rustc::mir::Lvalue::*;\n+        use mir::Lvalue::*;\n         match *lvalue {\n             // Might allow this in the future, right now there's no way to do this from Rust code anyway\n             Local(mir::RETURN_POINTER) => err!(ReadFromReturnPointer),\n@@ -126,7 +126,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         &mut self,\n         proj: &mir::LvalueProjection<'tcx>,\n     ) -> EvalResult<'tcx, Option<Value>> {\n-        use rustc::mir::ProjectionElem::*;\n+        use mir::ProjectionElem::*;\n         let base = match self.try_read_lvalue(&proj.base)? {\n             Some(base) => base,\n             None => return Ok(None),\n@@ -181,7 +181,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     }\n \n     pub fn eval_lvalue(&mut self, mir_lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue> {\n-        use rustc::mir::Lvalue::*;\n+        use mir::Lvalue::*;\n         let lvalue = match *mir_lvalue {\n             Local(mir::RETURN_POINTER) => self.frame().return_lvalue,\n             Local(local) => Lvalue::Local {\n@@ -222,7 +222,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         base_ty: Ty<'tcx>,\n         field_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Lvalue> {\n-        use rustc::ty::layout::Layout::*;\n+        use ty::layout::Layout::*;\n \n         let base_layout = self.type_layout(base_ty)?;\n         let field_index = field.index();\n@@ -404,7 +404,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         base_ty: Ty<'tcx>,\n         proj_elem: &mir::ProjectionElem<'tcx, mir::Local, Ty<'tcx>>,\n     ) -> EvalResult<'tcx, Lvalue> {\n-        use rustc::mir::ProjectionElem::*;\n+        use mir::ProjectionElem::*;\n         let (ptr, extra) = match *proj_elem {\n             Field(field, field_ty) => {\n                 return self.lvalue_field(base, field, base_ty, field_ty);\n@@ -416,7 +416,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, base_extra) = base.to_ptr_extra_aligned();\n \n-                use rustc::ty::layout::Layout::*;\n+                use ty::layout::Layout::*;\n                 let extra = match *base_layout {\n                     General { .. } => LvalueExtra::DowncastVariant(variant),\n                     RawNullablePointer { .. } |"}, {"sha": "95d6fc9aeda4b9569bc91f14f1083ca36694c9ab", "filename": "src/librustc/mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -4,7 +4,7 @@\n \n use super::{EvalResult, EvalContext, Lvalue, PrimVal, ValTy};\n \n-use rustc::{mir, ty};\n+use {mir, ty};\n use syntax::codemap::Span;\n use syntax::ast::Mutability;\n "}, {"sha": "065b21727e2fdfe1bd3f4169565d19606f4f1028", "filename": "src/librustc/mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmemory.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -3,10 +3,10 @@ use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n use std::{fmt, iter, ptr, mem, io};\n use std::cell::Cell;\n \n-use rustc::ty::Instance;\n-use rustc::ty::layout::{self, TargetDataLayout, HasDataLayout};\n+use ty::Instance;\n+use ty::layout::{self, TargetDataLayout, HasDataLayout};\n use syntax::ast::Mutability;\n-use rustc::middle::region;\n+use middle::region;\n \n use super::{EvalResult, EvalErrorKind, PrimVal, Pointer, EvalContext, DynamicLifetime, Machine,\n             RangeMap, AbsLvalue};"}, {"sha": "f2a2dc3115f669140a482d8f8ac2e1939baf33bc", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -2,7 +2,7 @@\n \n #[macro_export]\n macro_rules! err {\n-    ($($tt:tt)*) => { Err($crate::interpret::EvalErrorKind::$($tt)*.into()) };\n+    ($($tt:tt)*) => { Err($crate::mir::interpret::EvalErrorKind::$($tt)*.into()) };\n }\n \n mod cast;"}, {"sha": "2981d21929d1a24b9332592d79f36d73cc3b0725", "filename": "src/librustc/mir/interpret/operator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Foperator.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,5 +1,5 @@\n-use rustc::mir;\n-use rustc::ty::Ty;\n+use mir;\n+use ty::Ty;\n use rustc_const_math::ConstFloat;\n use syntax::ast::FloatTy;\n use std::cmp::Ordering;\n@@ -116,7 +116,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         right: PrimVal,\n         right_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, (PrimVal, bool)> {\n-        use rustc::mir::BinOp::*;\n+        use mir::BinOp::*;\n         use super::PrimValKind::*;\n \n         let left_kind = self.ty_to_primval_kind(left_ty)?;\n@@ -229,7 +229,7 @@ pub fn unary_op<'tcx>(\n     val: PrimVal,\n     val_kind: PrimValKind,\n ) -> EvalResult<'tcx, PrimVal> {\n-    use rustc::mir::UnOp::*;\n+    use mir::UnOp::*;\n     use super::PrimValKind::*;\n \n     let bytes = val.to_bytes()?;"}, {"sha": "f6dbec91cce54096206f8ded8af8b815ad4f71cf", "filename": "src/librustc/mir/interpret/step.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fstep.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -2,15 +2,15 @@\n //!\n //! The main entry point is the `step` method.\n \n-use rustc::hir::def_id::DefId;\n-use rustc::hir;\n-use rustc::mir::visit::{Visitor, LvalueContext};\n-use rustc::mir;\n-use rustc::traits::Reveal;\n-use rustc::ty;\n-use rustc::ty::layout::Layout;\n-use rustc::ty::subst::Substs;\n-use rustc::middle::const_val::ConstVal;\n+use hir::def_id::DefId;\n+use hir;\n+use mir::visit::{Visitor, LvalueContext};\n+use mir;\n+use traits::Reveal;\n+use ty;\n+use ty::layout::Layout;\n+use ty::subst::Substs;\n+use middle::const_val::ConstVal;\n \n use super::{EvalResult, EvalContext, StackPopCleanup, PtrAndAlign, GlobalId, Lvalue,\n             MemoryKind, Machine, PrimVal};\n@@ -91,7 +91,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> EvalResult<'tcx> {\n         trace!(\"{:?}\", stmt);\n \n-        use rustc::mir::StatementKind::*;\n+        use mir::StatementKind::*;\n \n         // Some statements (e.g. box) push new stack frames.  We have to record the stack frame number\n         // *before* executing the statement."}, {"sha": "4cb1ad77474c87fc4adcc30008703d8f64dda7ce", "filename": "src/librustc/mir/interpret/terminator/drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fdrop.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,8 +1,8 @@\n-use rustc::mir::BasicBlock;\n-use rustc::ty::{self, Ty};\n+use mir::BasicBlock;\n+use ty::{self, Ty};\n use syntax::codemap::Span;\n \n-use interpret::{EvalResult, EvalContext, Lvalue, LvalueExtra, PrimVal, Value,\n+use mir::interpret::{EvalResult, EvalContext, Lvalue, LvalueExtra, PrimVal, Value,\n                 Machine, ValTy};\n \n impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {"}, {"sha": "6402db7934f2df0e7e5be2150fcdeb43cec32ec4", "filename": "src/librustc/mir/interpret/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fmod.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,6 +1,6 @@\n-use rustc::mir;\n-use rustc::ty::{self, TypeVariants};\n-use rustc::ty::layout::Layout;\n+use mir;\n+use ty::{self, TypeVariants};\n+use ty::layout::Layout;\n use syntax::codemap::Span;\n use syntax::abi::Abi;\n \n@@ -21,7 +21,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         &mut self,\n         terminator: &mir::Terminator<'tcx>,\n     ) -> EvalResult<'tcx> {\n-        use rustc::mir::TerminatorKind::*;\n+        use mir::TerminatorKind::*;\n         match terminator.kind {\n             Return => {\n                 self.dump_local(self.frame().return_lvalue);\n@@ -137,7 +137,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 if expected == cond_val {\n                     self.goto_block(target);\n                 } else {\n-                    use rustc::mir::AssertMessage::*;\n+                    use mir::AssertMessage::*;\n                     return match *msg {\n                         BoundsCheck { ref len, ref index } => {\n                             let span = terminator.source_info.span;"}, {"sha": "a884bd7472e12cfbb308678ac7a3d23f5ed6f99e", "filename": "src/librustc/mir/interpret/traits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ftraits.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,7 +1,7 @@\n-use rustc::traits::{self, Reveal};\n-use rustc::hir::def_id::DefId;\n-use rustc::ty::subst::Substs;\n-use rustc::ty::{self, Ty};\n+use traits::{self, Reveal};\n+use hir::def_id::DefId;\n+use ty::subst::Substs;\n+use ty::{self, Ty};\n use syntax::codemap::DUMMY_SP;\n use syntax::ast::{self, Mutability};\n \n@@ -54,7 +54,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let align = self.type_align(trait_ref.self_ty())?;\n \n         let ptr_size = self.memory.pointer_size();\n-        let methods = ::rustc::traits::get_vtable_methods(self.tcx, trait_ref);\n+        let methods = ::traits::get_vtable_methods(self.tcx, trait_ref);\n         let vtable = self.memory.allocate(\n             ptr_size * (3 + methods.count() as u64),\n             ptr_size,\n@@ -70,7 +70,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let align_ptr = vtable.offset(ptr_size * 2, &self)?;\n         self.memory.write_ptr_sized_unsigned(align_ptr, PrimVal::Bytes(align as u128))?;\n \n-        for (i, method) in ::rustc::traits::get_vtable_methods(self.tcx, trait_ref).enumerate() {\n+        for (i, method) in ::traits::get_vtable_methods(self.tcx, trait_ref).enumerate() {\n             if let Some((def_id, substs)) = method {\n                 let instance = eval_context::resolve(self.tcx, def_id, substs);\n                 let fn_ptr = self.memory.create_fn_alloc(instance);"}, {"sha": "3f1d7a644caf9df8db0e052e76eec1e5b7dd5bc9", "filename": "src/librustc/mir/interpret/validation.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalidation.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,12 +1,12 @@\n-use rustc::hir::{self, Mutability};\n-use rustc::hir::Mutability::*;\n-use rustc::mir::{self, ValidationOp, ValidationOperand};\n-use rustc::ty::{self, Ty, TypeFoldable, TyCtxt};\n-use rustc::ty::subst::{Substs, Subst};\n-use rustc::traits;\n-use rustc::infer::InferCtxt;\n-use rustc::traits::Reveal;\n-use rustc::middle::region;\n+use hir::{self, Mutability};\n+use hir::Mutability::*;\n+use mir::{self, ValidationOp, ValidationOperand};\n+use ty::{self, Ty, TypeFoldable, TyCtxt};\n+use ty::subst::{Substs, Subst};\n+use traits;\n+use infer::InferCtxt;\n+use traits::Reveal;\n+use middle::region;\n use rustc_data_structures::indexed_vec::Idx;\n \n use super::{EvalError, EvalResult, EvalErrorKind, EvalContext, DynamicLifetime, AccessKind, Value,\n@@ -383,9 +383,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         mut query: ValidationQuery<'tcx>,\n         mode: ValidationMode,\n     ) -> EvalResult<'tcx> {\n-        use rustc::ty::TypeVariants::*;\n-        use rustc::ty::RegionKind::*;\n-        use rustc::ty::AdtKind;\n+        use ty::TypeVariants::*;\n+        use ty::RegionKind::*;\n+        use ty::AdtKind;\n \n         // No point releasing shared stuff.\n         if !mode.acquiring() && query.mutbl == MutImmutable {"}, {"sha": "86b72220dc31f52d8b2aec77c36c33542c65cd48", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -1,6 +1,6 @@\n #![allow(unknown_lints)]\n \n-use rustc::ty::layout::HasDataLayout;\n+use ty::layout::HasDataLayout;\n \n use super::{EvalResult, Memory, MemoryPointer, HasMemory, PointerArithmetic, Machine, PtrAndAlign};\n "}, {"sha": "c7a3aa6ea05f7417c60ae623de6c8fc4d0167fd6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -42,6 +42,7 @@ pub mod tcx;\n pub mod visit;\n pub mod transform;\n pub mod traversal;\n+pub mod interpret;\n \n macro_rules! newtype_index {\n     ($name:ident, $debug_name:expr) => ("}, {"sha": "492b3a13a41f5c9ded7f0695d8760bf700b6d1ce", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -791,5 +791,76 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     } else {\n         tcx.extern_const_body(def_id).body\n     };\n-    ConstContext::new(tcx, key.param_env.and(substs), tables).eval(&body.value)\n+\n+    let instance = ty::Instance::new(def_id, substs);\n+    let miri_result = ::rustc::interpret::eval_body_as_primval(tcx, instance);\n+    let old_result = ConstContext::new(tcx, key.param_env.and(substs), tables).eval(&body.value);\n+    match (miri_result, old_result) {\n+        (Err(err), Ok(ok)) => {\n+            warn!(\"miri fails to eval {:?} to {:?} with error {:?}\", key, ok, err);\n+            Ok(ok)\n+        },\n+        (Ok(ok), Err(err)) => {\n+            info!(\"miri can eval {:?} to {:?}, while old ctfe fails with {:?}\", key, ok, err);\n+            Err(err)\n+        },\n+        (Err(_), Err(err)) => Err(err),\n+        (Ok((miri_val, miri_ty)), Ok(ctfe)) => {\n+            use rustc::ty::TypeVariants::*;\n+            use rustc::interpret::PrimVal;\n+            match (miri_val, &miri_ty.sty, ctfe.val) {\n+                (PrimVal::Undef, _, _) => {\n+                    warn!(\"miri produced an undef, while old ctfe produced {:?}\", ctfe);\n+                },\n+                (PrimVal::Ptr(_), _, _) => {\n+                    warn!(\"miri produced a pointer, which isn't implemented yet\");\n+                },\n+                (PrimVal::Bytes(b), &TyInt(int_ty), ConstVal::Integral(ci)) => {\n+                    let c = ConstInt::new_signed_truncating(b as i128,\n+                                                            int_ty,\n+                                                            tcx.sess.target.isize_ty);\n+                    if c != ci {\n+                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", b as i128, ci);\n+                    }\n+                }\n+                (PrimVal::Bytes(b), &TyUint(int_ty), ConstVal::Integral(ci)) => {\n+                    let c = ConstInt::new_unsigned_truncating(b, int_ty, tcx.sess.target.usize_ty);\n+                    if c != ci {\n+                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", b, ci);\n+                    }\n+                }\n+                (PrimVal::Bytes(bits), &TyFloat(ty), ConstVal::Float(cf)) => {\n+                    let f = ConstFloat { bits, ty };\n+                    if f != cf {\n+                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", f, cf);\n+                    }\n+                }\n+                (PrimVal::Bytes(bits), &TyBool, ConstVal::Bool(b)) => {\n+                    if bits == 0 && b {\n+                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", bits == 0, b);\n+                    } else if bits == 1 && !b {\n+                        warn!(\"miri evaluated to {}, but ctfe yielded {}\", bits == 1, b);\n+                    } else {\n+                        warn!(\"miri evaluated to {}, but expected a bool {}\", bits, b);\n+                    }\n+                }\n+                (PrimVal::Bytes(bits), &TyChar, ConstVal::Char(c)) => {\n+                    if let Some(cm) = ::std::char::from_u32(bits as u32) {\n+                        if cm != c {\n+                            warn!(\"miri evaluated to {:?}, but expected {:?}\", cm, c);\n+                        }\n+                    } else {\n+                        warn!(\"miri evaluated to {}, but expected a char {:?}\", bits, c);\n+                    }\n+                }\n+                _ => {\n+                    info!(\"can't check whether miri's {:?} ({}) makes sense when ctfe yields {:?}\",\n+                        miri_val,\n+                        miri_ty,\n+                        ctfe)\n+                }\n+            }\n+            Ok(ctfe)\n+        }\n+    }\n }"}, {"sha": "5b24d748e9697863bc234926f97206ec250c9872", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea35192d7c3e64b8be7f694d0743d123b0c4563a/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=ea35192d7c3e64b8be7f694d0743d123b0c4563a", "patch": "@@ -66,6 +66,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n         \"src/tools/miri\",\n+        \"src/librustc/mir/interpret\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}