{"sha": "a9dd903d79b053eb85302572e53717ad865c813d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZGQ5MDNkNzliMDUzZWI4NTMwMjU3MmU1MzcxN2FkODY1YzgxM2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-20T00:06:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-22T21:42:02Z"}, "message": "libtime: Remove the `tz_zone` field from times.\n\nIt depends on `~str`.", "tree": {"sha": "33bcf32edbae9ae23a27a1cbad378959db53a7a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33bcf32edbae9ae23a27a1cbad378959db53a7a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9dd903d79b053eb85302572e53717ad865c813d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd903d79b053eb85302572e53717ad865c813d", "html_url": "https://github.com/rust-lang/rust/commit/a9dd903d79b053eb85302572e53717ad865c813d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd903d79b053eb85302572e53717ad865c813d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36195eb91f15975fed7555a3aa52807ecd5698a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/36195eb91f15975fed7555a3aa52807ecd5698a1", "html_url": "https://github.com/rust-lang/rust/commit/36195eb91f15975fed7555a3aa52807ecd5698a1"}], "stats": {"total": 78, "additions": 7, "deletions": 71}, "files": [{"sha": "b7dc585fc263d17a79d511e7e4fcdaa9b23cf11f", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd903d79b053eb85302572e53717ad865c813d/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd903d79b053eb85302572e53717ad865c813d/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=a9dd903d79b053eb85302572e53717ad865c813d", "patch": "@@ -237,21 +237,11 @@ pub struct Tm {\n     /// for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.\n     pub tm_gmtoff: i32,\n \n-    /// Abbreviated name for the time zone that was used to compute this broken-down time value.\n-    /// For example, U.S. Pacific Daylight Time is \"PDT\".\n-    pub tm_zone: ~str,\n-\n     /// Nanoseconds after the second \u2013 [0, 10<sup>9</sup> - 1]\n     pub tm_nsec: i32,\n }\n \n pub fn empty_tm() -> Tm {\n-    // 64 is the max size of the timezone buffer allocated on windows\n-    // in rust_localtime. In glibc the max timezone size is supposedly 3.\n-    let mut zone = StrBuf::new();\n-    for _ in range(0, 64) {\n-        zone.push_char(' ')\n-    }\n     Tm {\n         tm_sec: 0_i32,\n         tm_min: 0_i32,\n@@ -263,7 +253,6 @@ pub fn empty_tm() -> Tm {\n         tm_yday: 0_i32,\n         tm_isdst: 0_i32,\n         tm_gmtoff: 0_i32,\n-        tm_zone: zone.into_owned(),\n         tm_nsec: 0_i32,\n     }\n }\n@@ -745,7 +734,6 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, StrBuf> {\n           'Z' => {\n             if match_str(s, pos, \"UTC\") || match_str(s, pos, \"GMT\") {\n                 tm.tm_gmtoff = 0_i32;\n-                tm.tm_zone = \"UTC\".to_owned();\n                 Ok(pos + 3u)\n             } else {\n                 // It's odd, but to maintain compatibility with c's\n@@ -770,7 +758,6 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, StrBuf> {\n                     let (v, pos) = item;\n                     if v == 0_i32 {\n                         tm.tm_gmtoff = 0_i32;\n-                        tm.tm_zone = \"UTC\".to_owned();\n                     }\n \n                     Ok(pos)\n@@ -801,7 +788,6 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, StrBuf> {\n         tm_yday: 0_i32,\n         tm_isdst: 0_i32,\n         tm_gmtoff: 0_i32,\n-        tm_zone: \"\".to_owned(),\n         tm_nsec: 0_i32,\n     };\n     let mut pos = 0u;\n@@ -848,7 +834,6 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, StrBuf> {\n             tm_yday: tm.tm_yday,\n             tm_isdst: tm.tm_isdst,\n             tm_gmtoff: tm.tm_gmtoff,\n-            tm_zone: tm.tm_zone.clone(),\n             tm_nsec: tm.tm_nsec,\n         })\n     } else { result }\n@@ -1050,7 +1035,7 @@ pub fn strftime(format: &str, tm: &Tm) -> StrBuf {\n           'w' => (tm.tm_wday as int).to_str().to_strbuf(),\n           'Y' => (tm.tm_year as int + 1900).to_str().to_strbuf(),\n           'y' => format_strbuf!(\"{:02d}\", (tm.tm_year as int + 1900) % 100),\n-          'Z' => tm.tm_zone.to_strbuf(),\n+          'Z' => \"\".to_strbuf(),    // FIXME(pcwalton): Implement this.\n           'z' => {\n             let sign = if tm.tm_gmtoff > 0_i32 { '+' } else { '-' };\n             let mut m = num::abs(tm.tm_gmtoff) / 60_i32;\n@@ -1176,7 +1161,6 @@ mod tests {\n         assert_eq!(utc.tm_yday, 43_i32);\n         assert_eq!(utc.tm_isdst, 0_i32);\n         assert_eq!(utc.tm_gmtoff, 0_i32);\n-        assert_eq!(utc.tm_zone, \"UTC\".to_owned());\n         assert_eq!(utc.tm_nsec, 54321_i32);\n     }\n \n@@ -1198,12 +1182,6 @@ mod tests {\n         assert_eq!(local.tm_yday, 43_i32);\n         assert_eq!(local.tm_isdst, 0_i32);\n         assert_eq!(local.tm_gmtoff, -28800_i32);\n-\n-        // FIXME (#2350): We should probably standardize on the timezone\n-        // abbreviation.\n-        let zone = &local.tm_zone;\n-        assert!(*zone == \"PST\".to_owned() || *zone == \"Pacific Standard Time\".to_owned());\n-\n         assert_eq!(local.tm_nsec, 54321_i32);\n     }\n \n@@ -1246,7 +1224,6 @@ mod tests {\n             assert!(tm.tm_wday == 0_i32);\n             assert!(tm.tm_isdst == 0_i32);\n             assert!(tm.tm_gmtoff == 0_i32);\n-            assert!(tm.tm_zone == \"\".to_owned());\n             assert!(tm.tm_nsec == 0_i32);\n           }\n           Err(_) => ()\n@@ -1270,7 +1247,6 @@ mod tests {\n             assert!(tm.tm_yday == 0_i32);\n             assert!(tm.tm_isdst == 0_i32);\n             assert!(tm.tm_gmtoff == 0_i32);\n-            assert!(tm.tm_zone == \"\".to_owned());\n             assert!(tm.tm_nsec == 12340000_i32);\n           }\n         }\n@@ -1382,10 +1358,6 @@ mod tests {\n         assert!(test(\"6\", \"%w\"));\n         assert!(test(\"2009\", \"%Y\"));\n         assert!(test(\"09\", \"%y\"));\n-        assert!(strptime(\"UTC\", \"%Z\").unwrap().tm_zone ==\n-            \"UTC\".to_owned());\n-        assert!(strptime(\"PST\", \"%Z\").unwrap().tm_zone ==\n-            \"\".to_owned());\n         assert!(strptime(\"-0000\", \"%z\").unwrap().tm_gmtoff ==\n             0);\n         assert!(strptime(\"-0800\", \"%z\").unwrap().tm_gmtoff ==\n@@ -1457,12 +1429,6 @@ mod tests {\n         assert_eq!(local.strftime(\"%Y\"), \"2009\".to_strbuf());\n         assert_eq!(local.strftime(\"%y\"), \"09\".to_strbuf());\n         assert_eq!(local.strftime(\"%+\"), \"2009-02-13T15:31:30-08:00\".to_strbuf());\n-\n-        // FIXME (#2350): We should probably standardize on the timezone\n-        // abbreviation.\n-        let zone = local.strftime(\"%Z\");\n-        assert!(zone == \"PST\".to_strbuf() || zone == \"Pacific Standard Time\".to_strbuf());\n-\n         assert_eq!(local.strftime(\"%z\"), \"-0800\".to_strbuf());\n         assert_eq!(local.strftime(\"%%\"), \"%\".to_strbuf());\n "}, {"sha": "ed077e69978a9416b2fcd8ff72da3573e33cad00", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd903d79b053eb85302572e53717ad865c813d/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd903d79b053eb85302572e53717ad865c813d/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=a9dd903d79b053eb85302572e53717ad865c813d", "patch": "@@ -127,15 +127,6 @@ rust_list_dir_wfd_fp_buf(void* wfd) {\n }\n #endif\n \n-typedef struct\n-{\n-    size_t fill;    // in bytes; if zero, heapified\n-    size_t alloc;   // in bytes\n-    uint8_t data[0];\n-} rust_vec;\n-\n-typedef rust_vec rust_str;\n-\n typedef struct {\n     int32_t tm_sec;\n     int32_t tm_min;\n@@ -147,7 +138,6 @@ typedef struct {\n     int32_t tm_yday;\n     int32_t tm_isdst;\n     int32_t tm_gmtoff;\n-    rust_str *tm_zone;\n     int32_t tm_nsec;\n } rust_tm;\n \n@@ -164,8 +154,10 @@ void rust_tm_to_tm(rust_tm* in_tm, struct tm* out_tm) {\n     out_tm->tm_isdst = in_tm->tm_isdst;\n }\n \n-void tm_to_rust_tm(struct tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n-                   const char *zone, int32_t nsec) {\n+void tm_to_rust_tm(struct tm* in_tm,\n+                   rust_tm* out_tm,\n+                   int32_t gmtoff,\n+                   int32_t nsec) {\n     out_tm->tm_sec = in_tm->tm_sec;\n     out_tm->tm_min = in_tm->tm_min;\n     out_tm->tm_hour = in_tm->tm_hour;\n@@ -177,13 +169,6 @@ void tm_to_rust_tm(struct tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n     out_tm->tm_isdst = in_tm->tm_isdst;\n     out_tm->tm_gmtoff = gmtoff;\n     out_tm->tm_nsec = nsec;\n-\n-    if (zone != NULL) {\n-        size_t size = strlen(zone);\n-        assert(out_tm->tm_zone->alloc >= size);\n-        memcpy(out_tm->tm_zone->data, zone, size);\n-        out_tm->tm_zone->fill = size;\n-    }\n }\n \n #if defined(__WIN32__)\n@@ -225,7 +210,7 @@ rust_gmtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n     time_t s = sec;\n     GMTIME(&s, &tm);\n \n-    tm_to_rust_tm(&tm, timeptr, 0, \"UTC\", nsec);\n+    tm_to_rust_tm(&tm, timeptr, 0, nsec);\n }\n \n void\n@@ -234,28 +219,13 @@ rust_localtime(int64_t sec, int32_t nsec, rust_tm *timeptr) {\n     time_t s = sec;\n     LOCALTIME(&s, &tm);\n \n-    const char* zone = NULL;\n #if defined(__WIN32__)\n     int32_t gmtoff = -timezone;\n-    wchar_t wbuffer[64] = {0};\n-    char buffer[256] = {0};\n-    // strftime(\"%Z\") can contain non-UTF-8 characters on non-English locale (issue #9418),\n-    // so time zone should be converted from UTF-16 string.\n-    // Since wcsftime depends on setlocale() result,\n-    // instead we convert it using MultiByteToWideChar.\n-    if (strftime(buffer, sizeof(buffer) / sizeof(char), \"%Z\", &tm) > 0) {\n-        // ANSI -> UTF-16\n-        MultiByteToWideChar(CP_ACP, 0, buffer, -1, wbuffer, sizeof(wbuffer) / sizeof(wchar_t));\n-        // UTF-16 -> UTF-8\n-        WideCharToMultiByte(CP_UTF8, 0, wbuffer, -1, buffer, sizeof(buffer), NULL, NULL);\n-        zone = buffer;\n-    }\n #else\n     int32_t gmtoff = tm.tm_gmtoff;\n-    zone = tm.tm_zone;\n #endif\n \n-    tm_to_rust_tm(&tm, timeptr, gmtoff, zone, nsec);\n+    tm_to_rust_tm(&tm, timeptr, gmtoff, nsec);\n }\n \n int64_t"}]}