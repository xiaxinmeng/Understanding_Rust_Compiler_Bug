{"sha": "61643aca49e06317602ded1c90458a531844d54e", "node_id": "C_kwDOAAsO6NoAKDYxNjQzYWNhNDllMDYzMTc2MDJkZWQxYzkwNDU4YTUzMTg0NGQ1NGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-26T11:00:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-01T17:57:08Z"}, "message": "Initial config revamp", "tree": {"sha": "731cf4d6e8bfad3bd049dcaf0f13169ad2c7758f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731cf4d6e8bfad3bd049dcaf0f13169ad2c7758f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61643aca49e06317602ded1c90458a531844d54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61643aca49e06317602ded1c90458a531844d54e", "html_url": "https://github.com/rust-lang/rust/commit/61643aca49e06317602ded1c90458a531844d54e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61643aca49e06317602ded1c90458a531844d54e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c88d9344c5b32988bfbfc090f50aba5de1db062", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c88d9344c5b32988bfbfc090f50aba5de1db062", "html_url": "https://github.com/rust-lang/rust/commit/5c88d9344c5b32988bfbfc090f50aba5de1db062"}], "stats": {"total": 340, "additions": 196, "deletions": 144}, "files": [{"sha": "5ec06a1df8993f8b95babc32b854b3cedba0c026", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 184, "deletions": 128, "changes": 312, "blob_url": "https://github.com/rust-lang/rust/blob/61643aca49e06317602ded1c90458a531844d54e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61643aca49e06317602ded1c90458a531844d54e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=61643aca49e06317602ded1c90458a531844d54e", "patch": "@@ -35,6 +35,16 @@ use crate::{\n     lsp_ext::{self, supports_utf8, WorkspaceSymbolSearchKind, WorkspaceSymbolSearchScope},\n };\n \n+// Conventions for configuration keys to preserve maximal extendability without breakage:\n+//  - Toggles (be it binary true/false or with more options in-between) should always suffix as `_enable`\n+//  - In general be wary of using the namespace of something verbatim, it prevents us from adding subkeys in the future\n+//  - Don't use abbreviations unless really necessary\n+//  - foo_command = overrides the subcommand, foo_overrideCommand allows full overwriting\n+//    - We could in theory only use `command` and have it change behavior depending on whether its a string or array?\n+// - TODO: conventions regarding config keys for commands and their args\n+// - TODO: command, overrideCommand, extraArgs\n+// - TODO: conventions regarding config polarity\n+\n // Defines the server-side configuration of the rust-analyzer. We generate\n // *parts* of VS Code's `package.json` config from this.\n //\n@@ -46,57 +56,51 @@ use crate::{\n config_data! {\n     struct ConfigData {\n         /// Placeholder for missing expressions in assists.\n-        assist_exprFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n+        assist_expressionFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n+\n         /// How imports should be grouped into use statements.\n-        assist_importGranularity |\n-        assist_importMergeBehavior |\n-        assist_importMergeBehaviour: ImportGranularityDef  = \"\\\"crate\\\"\",\n+        imports_granularity: ImportGranularityDef  = \"\\\"crate\\\"\",\n         /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n-        assist_importEnforceGranularity: bool              = \"false\",\n+        imports_enforceGranularity: bool              = \"false\",\n         /// The path structure for newly inserted paths to use.\n-        assist_importPrefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n+        imports_prefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n         /// Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n-        assist_importGroup: bool                           = \"true\",\n+        // TODO: Shouldn't be a bool\n+        imports_group: bool                           = \"true\",\n         /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n-        assist_allowMergingIntoGlobImports: bool           = \"true\",\n-\n-        /// Warm up caches on project load.\n-        cache_warmup: bool = \"true\",\n+        imports_mergeIntoGlob: bool           = \"true\",\n \n-        /// Show function name and docs in parameter hints.\n-        callInfo_full: bool                                = \"true\",\n+        // TODO: needs a better name\n+        /// Show full signature of the callable. Only shows parameters if disabled.\n+        signatureInfo_signature_enable: bool                           = \"true\",\n+        /// Show documentation.\n+        signatureInfo_documentation_enable: bool                       = \"true\",\n \n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n-        /// Activate all available features (`--all-features`).\n-        cargo_allFeatures: bool          = \"false\",\n         /// Unsets `#[cfg(test)]` for the specified crates.\n         cargo_unsetTest: Vec<String>   = \"[\\\"core\\\"]\",\n-        /// List of features to activate.\n-        cargo_features: Vec<String>      = \"[]\",\n+        /// List of features to activate. Set to `\"all\"` to pass `--all-features` to cargo.\n+        cargo_features: CargoFeatures      = \"[]\",\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n-        cargo_runBuildScripts |\n-        cargo_loadOutDirsFromCheck: bool = \"true\",\n+        cargo_buildScripts_enable: bool = \"true\",\n         /// Advanced option, fully override the command rust-analyzer uses to\n         /// run build scripts and build procedural macros. The command should\n         /// include `--message-format=json` or a similar option.\n-        cargo_runBuildScriptsCommand: Option<Vec<String>> = \"null\",\n+        cargo_buildScripts_overrideCommand: Option<Vec<String>> = \"null\",\n         /// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n         /// avoid compiling unnecessary things.\n-        cargo_useRustcWrapperForBuildScripts: bool = \"true\",\n+        cargo_buildScripts_useRustcWrapper: bool = \"true\",\n         /// Do not activate the `default` feature.\n         cargo_noDefaultFeatures: bool    = \"false\",\n-        /// Compilation target (target triple).\n+        /// Compilation target override (target triple).\n         cargo_target: Option<String>     = \"null\",\n         /// Internal config for debugging, disables loading of sysroot crates.\n         cargo_noSysroot: bool            = \"false\",\n \n         /// Run specified `cargo check` command for diagnostics on save.\n         checkOnSave_enable: bool                         = \"true\",\n-        /// Check with all features (`--all-features`).\n-        /// Defaults to `#rust-analyzer.cargo.allFeatures#`.\n-        checkOnSave_allFeatures: Option<bool>            = \"null\",\n         /// Check all targets and tests (`--all-targets`).\n         checkOnSave_allTargets: bool                     = \"true\",\n         /// Cargo command to use for `cargo check`.\n@@ -109,21 +113,19 @@ config_data! {\n         /// Extra arguments for `cargo check`.\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n         /// List of features to activate. Defaults to\n-        /// `#rust-analyzer.cargo.features#`.\n-        checkOnSave_features: Option<Vec<String>>        = \"null\",\n+        /// `#rust-analyzer.cargo.features#`. Set to `\"all\"` to pass `--all-features` to cargo.\n+        checkOnSave_features: Option<CargoFeatures>        = \"null\",\n         /// Advanced option, fully override the command rust-analyzer uses for\n         /// checking. The command should include `--message-format=json` or\n         /// similar option.\n         checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n \n-        /// Whether to add argument snippets when completing functions.\n-        /// Only applies when `#rust-analyzer.completion.addCallParenthesis#` is set.\n-        completion_addCallArgumentSnippets: bool = \"true\",\n-        /// Whether to add parenthesis when completing functions.\n-        completion_addCallParenthesis: bool      = \"true\",\n+        // TODO: needs better name\n+        /// Whether to add parenthesis and argument snippets when completing function.\n+        completion_callable_snippets: CallableCompletionDef  = \"fillArguments\",\n         /// Custom completion snippets.\n         // NOTE: Keep this list in sync with the feature docs of user snippets.\n-        completion_snippets: FxHashMap<String, SnippetDef> = r#\"{\n+        completion_snippets_custom: FxHashMap<String, SnippetDef> = r#\"{\n             \"Arc::new\": {\n                 \"postfix\": \"arc\",\n                 \"body\": \"Arc::new(${receiver})\",\n@@ -169,6 +171,7 @@ config_data! {\n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n         completion_autoimport_enable: bool       = \"true\",\n+        // TODO: Do we have a better name for this? I never really liked it\n         /// Toggles the additional completions that automatically show method calls and field accesses\n         /// with `self` prefixed to them when inside a method.\n         completion_autoself_enable: bool        = \"true\",\n@@ -179,7 +182,7 @@ config_data! {\n         diagnostics_enable: bool                = \"true\",\n         /// Whether to show experimental rust-analyzer diagnostics that might\n         /// have more false positives than usual.\n-        diagnostics_enableExperimental: bool    = \"false\",\n+        diagnostics_experimental_enable: bool    = \"false\",\n         /// List of rust-analyzer diagnostics to disable.\n         diagnostics_disabled: FxHashSet<String> = \"[]\",\n         /// Map of prefixes to be substituted when parsing diagnostic file paths.\n@@ -196,9 +199,6 @@ config_data! {\n         /// and a blue icon in the `Problems Panel`.\n         diagnostics_warningsAsInfo: Vec<String> = \"[]\",\n \n-        /// Expand attribute macros.\n-        experimental_procAttrMacros: bool = \"true\",\n-\n         /// Controls file watching implementation.\n         files_watcher: String = \"\\\"client\\\"\",\n         /// These directories will be ignored by rust-analyzer. They are\n@@ -207,66 +207,66 @@ config_data! {\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n \n         /// Enables highlighting of related references while hovering your mouse above any identifier.\n-        highlightRelated_references: bool = \"true\",\n+        highlightRelated_references_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n-        highlightRelated_exitPoints: bool = \"true\",\n+        highlightRelated_exitPoints_enable: bool = \"true\",\n         /// Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\n-        highlightRelated_breakPoints: bool = \"true\",\n+        highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n-        highlightRelated_yieldPoints: bool = \"true\",\n+        highlightRelated_yieldPoints_enable: bool = \"true\",\n \n         /// Use semantic tokens for strings.\n         ///\n         /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n         /// By disabling semantic tokens for strings, other grammars can be used to highlight\n         /// their contents.\n-        highlighting_strings: bool = \"true\",\n+        semanticHighlighting_strings_enable: bool = \"true\",\n \n         /// Whether to show documentation on hover.\n-        hover_documentation: bool       = \"true\",\n+        hover_documentation_enable: bool       = \"true\",\n         /// Use markdown syntax for links in hover.\n-        hover_linksInHover |\n-        hoverActions_linksInHover: bool = \"true\",\n+        hover_links_enable: bool = \"true\",\n \n         /// Whether to show `Debug` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_debug: bool           = \"true\",\n+        hover_actions_debug_enable: bool           = \"true\",\n+        // TODO: There is not point in having a global option is there?\n         /// Whether to show HoverActions in Rust files.\n-        hoverActions_enable: bool          = \"true\",\n+        hover_actions_enable: bool          = \"true\",\n         /// Whether to show `Go to Type Definition` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_gotoTypeDef: bool     = \"true\",\n+        hover_actions_gotoTypeDef_enable: bool     = \"true\",\n         /// Whether to show `Implementations` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_implementations: bool = \"true\",\n+        hover_actions_implementations_enable: bool = \"true\",\n         /// Whether to show `References` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_references: bool      = \"false\",\n+        hover_actions_references_enable: bool      = \"false\",\n         /// Whether to show `Run` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n-        hoverActions_run: bool             = \"true\",\n+        hover_actions_run_enable: bool             = \"true\",\n \n         /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n         inlayHints_renderColons: bool                      = \"true\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n         inlayHints_maxLength: Option<usize>                = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n-        inlayHints_parameterHints: bool                     = \"true\",\n+        inlayHints_parameterHints_enable: bool                     = \"true\",\n         /// Whether to show inlay type hints for variables.\n-        inlayHints_typeHints: bool                          = \"true\",\n+        inlayHints_typeHints_enable: bool                          = \"true\",\n         /// Whether to show inlay type hints for method chains.\n-        inlayHints_chainingHints: bool                      = \"true\",\n+        inlayHints_chainingHints_enable: bool                      = \"true\",\n+        /// Whether to hide inlay hints for constructors.\n+        inlayHints_typeHints_hideNamedConstructor: bool          = \"false\",\n         /// Whether to show inlay type hints for return types of closures with blocks.\n-        inlayHints_closureReturnTypeHints: bool             = \"false\",\n+        inlayHints_closureReturnTypeHints_enable: bool             = \"false\",\n         /// Whether to show inlay type hints for compiler inserted reborrows.\n-        inlayHints_reborrowHints: bool                      = \"false\",\n+        inlayHints_reborrowHints_enable: bool                      = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n         inlayHints_lifetimeElisionHints_useParameterNames: bool  = \"false\",\n-        /// Whether to hide inlay hints for constructors.\n-        inlayHints_hideNamedConstructorHints: bool          = \"false\",\n \n         /// Join lines inserts else between consecutive ifs.\n         joinLines_joinElseIf: bool = \"true\",\n@@ -279,24 +279,28 @@ config_data! {\n \n         /// Whether to show `Debug` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n-        lens_debug: bool            = \"true\",\n+        lens_debug_enable: bool            = \"true\",\n+        // TODO: Does a global enable make sense even?\n         /// Whether to show CodeLens in Rust files.\n         lens_enable: bool           = \"true\",\n         /// Whether to show `Implementations` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n-        lens_implementations: bool  = \"true\",\n+        lens_implementations_enable: bool  = \"true\",\n         /// Whether to show `Run` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n-        lens_run: bool              = \"true\",\n+        lens_run_enable: bool              = \"true\",\n         /// Whether to show `Method References` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n-        lens_methodReferences: bool = \"false\",\n-        /// Whether to show `References` lens for Struct, Enum, Union and Trait.\n+        lens_references_method_enable: bool = \"false\",\n+        /// Whether to show `References` lens for Struct, Enum, and Union.\n         /// Only applies when `#rust-analyzer.lens.enable#` is set.\n-        lens_references: bool = \"false\",\n+        lens_references_adt_enable: bool = \"false\",\n+        /// Whether to show `References` lens for Trait.\n+        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n+        lens_references_trait_enable: bool = \"false\",\n         /// Whether to show `References` lens for Enum Variants.\n         /// Only applies when `#rust-analyzer.lens.enable#` is set.\n-        lens_enumVariantReferences: bool = \"false\",\n+        lens_references_adt_variant_enable: bool = \"false\",\n         /// Internal config: use custom client-side commands even when the\n         /// client doesn't set the corresponding capability.\n         lens_forceCustomCommands: bool = \"true\",\n@@ -309,13 +313,15 @@ config_data! {\n         linkedProjects: Vec<ManifestOrProjectJson> = \"[]\",\n \n         /// Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.\n-        lruCapacity: Option<usize>                 = \"null\",\n+        lru_capacity: Option<usize>                 = \"null\",\n \n         /// Whether to show `can't find Cargo.toml` error message.\n         notifications_cargoTomlNotFound: bool      = \"true\",\n \n         /// How many worker threads to to handle priming caches. The default `0` means to pick automatically.\n         primeCaches_numThreads: ParallelPrimeCachesNumThreads = \"0\",\n+        /// Warm up caches on project load.\n+        primeCaches_enable: bool = \"true\",\n \n         /// Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n         procMacro_enable: bool                     = \"true\",\n@@ -326,12 +332,14 @@ config_data! {\n         ///\n         /// This config takes a map of crate names with the exported proc-macro names to ignore as values.\n         procMacro_ignored: FxHashMap<Box<str>, Box<[Box<str>]>>          = \"{}\",\n+        /// Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n+        procMacro_attributes_enable: bool = \"true\",\n \n         /// Command to be executed instead of 'cargo' for runnables.\n-        runnables_overrideCargo: Option<String> = \"null\",\n+        runnables_command: Option<String> = \"null\",\n         /// Additional arguments to be passed to cargo for runnables such as\n         /// tests or binaries. For example, it may be `--release`.\n-        runnables_cargoExtraArgs: Vec<String>   = \"[]\",\n+        runnables_extraArgs: Vec<String>   = \"[]\",\n \n         /// Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\n         /// projects, or \"discover\" to try to automatically find it if the `rustc-dev` component\n@@ -341,7 +349,7 @@ config_data! {\n         /// crates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n         ///\n         /// This option does not take effect until rust-analyzer is restarted.\n-        rustcSource: Option<String> = \"null\",\n+        rustc_source: Option<String> = \"null\",\n \n         /// Additional arguments to `rustfmt`.\n         rustfmt_extraArgs: Vec<String>               = \"[]\",\n@@ -351,7 +359,7 @@ config_data! {\n         /// Enables the use of rustfmt's unstable range formatting command for the\n         /// `textDocument/rangeFormatting` request. The rustfmt option is unstable and only\n         /// available on a nightly build.\n-        rustfmt_enableRangeFormatting: bool = \"false\",\n+        rustfmt_rangeFormatting_enable: bool = \"false\",\n \n         /// Workspace symbol search scope.\n         workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n@@ -400,6 +408,11 @@ impl From<ProjectJson> for LinkedProject {\n     }\n }\n \n+pub struct CallInfoConfig {\n+    pub params_only: bool,\n+    pub docs: bool,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LensConfig {\n     // runnables\n@@ -411,7 +424,8 @@ pub struct LensConfig {\n \n     // references\n     pub method_refs: bool,\n-    pub refs: bool, // for Struct, Enum, Union and Trait\n+    pub refs_adt: bool,   // for Struct, Enum, Union and Trait\n+    pub refs_trait: bool, // for Struct, Enum, Union and Trait\n     pub enum_variant_refs: bool,\n }\n \n@@ -421,7 +435,8 @@ impl LensConfig {\n             || self.debug\n             || self.implementations\n             || self.method_refs\n-            || self.refs\n+            || self.refs_adt\n+            || self.refs_trait\n             || self.enum_variant_refs\n     }\n \n@@ -434,7 +449,7 @@ impl LensConfig {\n     }\n \n     pub fn references(&self) -> bool {\n-        self.method_refs || self.refs || self.enum_variant_refs\n+        self.method_refs || self.refs_adt || self.refs_trait || self.enum_variant_refs\n     }\n }\n \n@@ -566,7 +581,7 @@ impl Config {\n                 .collect();\n         self.data = ConfigData::from_json(json, &mut errors);\n         self.snippets.clear();\n-        for (name, def) in self.data.completion_snippets.iter() {\n+        for (name, def) in self.data.completion_snippets_custom.iter() {\n             if def.prefix.is_empty() && def.postfix.is_empty() {\n                 continue;\n             }\n@@ -685,7 +700,7 @@ impl Config {\n     }\n \n     pub fn prefill_caches(&self) -> bool {\n-        self.data.cache_warmup\n+        self.data.primeCaches_enable\n     }\n \n     pub fn location_link(&self) -> bool {\n@@ -795,9 +810,9 @@ impl Config {\n \n     pub fn diagnostics(&self) -> DiagnosticsConfig {\n         DiagnosticsConfig {\n-            disable_experimental: !self.data.diagnostics_enableExperimental,\n+            disable_experimental: !self.data.diagnostics_experimental_enable,\n             disabled: self.data.diagnostics_disabled.clone(),\n-            expr_fill_default: match self.data.assist_exprFillDefault {\n+            expr_fill_default: match self.data.assist_expressionFillDefault {\n                 ExprFillDefaultDef::Todo => ExprFillDefaultMode::Todo,\n                 ExprFillDefaultDef::Default => ExprFillDefaultMode::Default,\n             },\n@@ -813,7 +828,7 @@ impl Config {\n     }\n \n     pub fn lru_capacity(&self) -> Option<usize> {\n-        self.data.lruCapacity\n+        self.data.lru_capacity\n     }\n \n     pub fn proc_macro_srv(&self) -> Option<(AbsPathBuf, Vec<OsString>)> {\n@@ -832,7 +847,7 @@ impl Config {\n     }\n \n     pub fn expand_proc_attr_macros(&self) -> bool {\n-        self.data.experimental_procAttrMacros\n+        self.data.procMacro_attributes_enable\n     }\n \n     pub fn files(&self) -> FilesConfig {\n@@ -857,11 +872,11 @@ impl Config {\n     }\n \n     pub fn run_build_scripts(&self) -> bool {\n-        self.data.cargo_runBuildScripts || self.data.procMacro_enable\n+        self.data.cargo_buildScripts_enable || self.data.procMacro_enable\n     }\n \n     pub fn cargo(&self) -> CargoConfig {\n-        let rustc_source = self.data.rustcSource.as_ref().map(|rustc_src| {\n+        let rustc_source = self.data.rustc_source.as_ref().map(|rustc_src| {\n             if rustc_src == \"discover\" {\n                 RustcSource::Discover\n             } else {\n@@ -871,14 +886,17 @@ impl Config {\n \n         CargoConfig {\n             no_default_features: self.data.cargo_noDefaultFeatures,\n-            all_features: self.data.cargo_allFeatures,\n-            features: self.data.cargo_features.clone(),\n+            all_features: matches!(self.data.cargo_features, CargoFeatures::All),\n+            features: match &self.data.cargo_features {\n+                CargoFeatures::All => vec![],\n+                CargoFeatures::Listed(it) => it.clone(),\n+            },\n             target: self.data.cargo_target.clone(),\n             no_sysroot: self.data.cargo_noSysroot,\n             rustc_source,\n             unset_test_crates: UnsetTestCrates::Only(self.data.cargo_unsetTest.clone()),\n-            wrap_rustc_in_build_scripts: self.data.cargo_useRustcWrapperForBuildScripts,\n-            run_build_script_command: self.data.cargo_runBuildScriptsCommand.clone(),\n+            wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,\n+            run_build_script_command: self.data.cargo_buildScripts_overrideCommand.clone(),\n         }\n     }\n \n@@ -891,7 +909,7 @@ impl Config {\n             }\n             Some(_) | None => RustfmtConfig::Rustfmt {\n                 extra_args: self.data.rustfmt_extraArgs.clone(),\n-                enable_range_formatting: self.data.rustfmt_enableRangeFormatting,\n+                enable_range_formatting: self.data.rustfmt_rangeFormatting_enable,\n             },\n         }\n     }\n@@ -918,15 +936,19 @@ impl Config {\n                     .data\n                     .checkOnSave_noDefaultFeatures\n                     .unwrap_or(self.data.cargo_noDefaultFeatures),\n-                all_features: self\n-                    .data\n-                    .checkOnSave_allFeatures\n-                    .unwrap_or(self.data.cargo_allFeatures),\n-                features: self\n+                all_features: matches!(\n+                    self.data.checkOnSave_features.as_ref().unwrap_or(&self.data.cargo_features),\n+                    CargoFeatures::All\n+                ),\n+                features: match self\n                     .data\n                     .checkOnSave_features\n                     .clone()\n-                    .unwrap_or_else(|| self.data.cargo_features.clone()),\n+                    .unwrap_or_else(|| self.data.cargo_features.clone())\n+                {\n+                    CargoFeatures::All => vec![],\n+                    CargoFeatures::Listed(it) => it,\n+                },\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n             },\n         };\n@@ -935,25 +957,25 @@ impl Config {\n \n     pub fn runnables(&self) -> RunnablesConfig {\n         RunnablesConfig {\n-            override_cargo: self.data.runnables_overrideCargo.clone(),\n-            cargo_extra_args: self.data.runnables_cargoExtraArgs.clone(),\n+            override_cargo: self.data.runnables_command.clone(),\n+            cargo_extra_args: self.data.runnables_extraArgs.clone(),\n         }\n     }\n \n     pub fn inlay_hints(&self) -> InlayHintsConfig {\n         InlayHintsConfig {\n             render_colons: self.data.inlayHints_renderColons,\n-            type_hints: self.data.inlayHints_typeHints,\n-            parameter_hints: self.data.inlayHints_parameterHints,\n-            chaining_hints: self.data.inlayHints_chainingHints,\n-            closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints,\n+            type_hints: self.data.inlayHints_typeHints_enable,\n+            parameter_hints: self.data.inlayHints_parameterHints_enable,\n+            chaining_hints: self.data.inlayHints_chainingHints_enable,\n+            closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints_enable,\n             lifetime_elision_hints: match self.data.inlayHints_lifetimeElisionHints_enable {\n                 LifetimeElisionDef::Always => LifetimeElisionHints::Always,\n                 LifetimeElisionDef::Never => LifetimeElisionHints::Never,\n                 LifetimeElisionDef::SkipTrivial => LifetimeElisionHints::SkipTrivial,\n             },\n-            hide_named_constructor_hints: self.data.inlayHints_hideNamedConstructorHints,\n-            reborrow_hints: self.data.inlayHints_reborrowHints,\n+            hide_named_constructor_hints: self.data.inlayHints_typeHints_hideNamedConstructor,\n+            reborrow_hints: self.data.inlayHints_reborrowHints_enable,\n             param_names_for_lifetime_elision_hints: self\n                 .data\n                 .inlayHints_lifetimeElisionHints_useParameterNames,\n@@ -963,20 +985,20 @@ impl Config {\n \n     fn insert_use_config(&self) -> InsertUseConfig {\n         InsertUseConfig {\n-            granularity: match self.data.assist_importGranularity {\n+            granularity: match self.data.imports_granularity {\n                 ImportGranularityDef::Preserve => ImportGranularity::Preserve,\n                 ImportGranularityDef::Item => ImportGranularity::Item,\n                 ImportGranularityDef::Crate => ImportGranularity::Crate,\n                 ImportGranularityDef::Module => ImportGranularity::Module,\n             },\n-            enforce_granularity: self.data.assist_importEnforceGranularity,\n-            prefix_kind: match self.data.assist_importPrefix {\n+            enforce_granularity: self.data.imports_enforceGranularity,\n+            prefix_kind: match self.data.imports_prefix {\n                 ImportPrefixDef::Plain => PrefixKind::Plain,\n                 ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n                 ImportPrefixDef::BySelf => PrefixKind::BySelf,\n             },\n-            group: self.data.assist_importGroup,\n-            skip_glob_imports: !self.data.assist_allowMergingIntoGlobImports,\n+            group: self.data.imports_group,\n+            skip_glob_imports: !self.data.imports_mergeIntoGlob,\n         }\n     }\n \n@@ -987,8 +1009,14 @@ impl Config {\n                 && completion_item_edit_resolve(&self.caps),\n             enable_self_on_the_fly: self.data.completion_autoself_enable,\n             enable_private_editable: self.data.completion_privateEditable_enable,\n-            add_call_parenthesis: self.data.completion_addCallParenthesis,\n-            add_call_argument_snippets: self.data.completion_addCallArgumentSnippets,\n+            add_call_parenthesis: matches!(\n+                self.data.completion_callable_snippets,\n+                CallableCompletionDef::AddParentheses\n+            ),\n+            add_call_argument_snippets: matches!(\n+                self.data.completion_callable_snippets,\n+                CallableCompletionDef::FillArguments\n+            ),\n             insert_use: self.insert_use_config(),\n             snippet_cap: SnippetCap::new(try_or_def!(\n                 self.caps\n@@ -1021,40 +1049,45 @@ impl Config {\n         }\n     }\n \n-    pub fn call_info_full(&self) -> bool {\n-        self.data.callInfo_full\n+    pub fn call_info(&self) -> CallInfoConfig {\n+        CallInfoConfig {\n+            params_only: self.data.signatureInfo_signature_enable,\n+            docs: self.data.signatureInfo_documentation_enable,\n+        }\n     }\n \n     pub fn lens(&self) -> LensConfig {\n         LensConfig {\n-            run: self.data.lens_enable && self.data.lens_run,\n-            debug: self.data.lens_enable && self.data.lens_debug,\n-            implementations: self.data.lens_enable && self.data.lens_implementations,\n-            method_refs: self.data.lens_enable && self.data.lens_methodReferences,\n-            refs: self.data.lens_enable && self.data.lens_references,\n-            enum_variant_refs: self.data.lens_enable && self.data.lens_enumVariantReferences,\n+            run: self.data.lens_enable && self.data.lens_run_enable,\n+            debug: self.data.lens_enable && self.data.lens_debug_enable,\n+            implementations: self.data.lens_enable && self.data.lens_implementations_enable,\n+            method_refs: self.data.lens_enable && self.data.lens_references_method_enable,\n+            refs_adt: self.data.lens_enable && self.data.lens_references_adt_enable,\n+            refs_trait: self.data.lens_enable && self.data.lens_references_trait_enable,\n+            enum_variant_refs: self.data.lens_enable\n+                && self.data.lens_references_adt_variant_enable,\n         }\n     }\n \n     pub fn hover_actions(&self) -> HoverActionsConfig {\n-        let enable = self.experimental(\"hoverActions\") && self.data.hoverActions_enable;\n+        let enable = self.experimental(\"hoverActions\") && self.data.hover_actions_enable;\n         HoverActionsConfig {\n-            implementations: enable && self.data.hoverActions_implementations,\n-            references: enable && self.data.hoverActions_references,\n-            run: enable && self.data.hoverActions_run,\n-            debug: enable && self.data.hoverActions_debug,\n-            goto_type_def: enable && self.data.hoverActions_gotoTypeDef,\n+            implementations: enable && self.data.hover_actions_implementations_enable,\n+            references: enable && self.data.hover_actions_references_enable,\n+            run: enable && self.data.hover_actions_run_enable,\n+            debug: enable && self.data.hover_actions_debug_enable,\n+            goto_type_def: enable && self.data.hover_actions_gotoTypeDef_enable,\n         }\n     }\n \n     pub fn highlighting_strings(&self) -> bool {\n-        self.data.highlighting_strings\n+        self.data.semanticHighlighting_strings_enable\n     }\n \n     pub fn hover(&self) -> HoverConfig {\n         HoverConfig {\n-            links_in_hover: self.data.hover_linksInHover,\n-            documentation: self.data.hover_documentation.then(|| {\n+            links_in_hover: self.data.hover_links_enable,\n+            documentation: self.data.hover_documentation_enable.then(|| {\n                 let is_markdown = try_or_def!(self\n                     .caps\n                     .text_document\n@@ -1132,10 +1165,10 @@ impl Config {\n \n     pub fn highlight_related(&self) -> HighlightRelatedConfig {\n         HighlightRelatedConfig {\n-            references: self.data.highlightRelated_references,\n-            break_points: self.data.highlightRelated_breakPoints,\n-            exit_points: self.data.highlightRelated_exitPoints,\n-            yield_points: self.data.highlightRelated_yieldPoints,\n+            references: self.data.highlightRelated_references_enable,\n+            break_points: self.data.highlightRelated_breakPoints_enable,\n+            exit_points: self.data.highlightRelated_exitPoints_enable,\n+            yield_points: self.data.highlightRelated_yieldPoints_enable,\n         }\n     }\n \n@@ -1237,6 +1270,23 @@ enum ImportGranularityDef {\n     Module,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum CallableCompletionDef {\n+    FillArguments,\n+    AddParentheses,\n+    #[serde(alias = \"false\")]\n+    None,\n+}\n+\n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+#[serde(untagged)]\n+enum CargoFeatures {\n+    All,\n+    Listed(Vec<String>),\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum LifetimeElisionDef {\n@@ -1317,6 +1367,12 @@ macro_rules! _config_data {\n                 ])\n             }\n         }\n+\n+        // TODO: Uncomment this and sort once everything is done\n+        // #[test]\n+        // fn fields_are_sorted() {\n+        //     [$(stringify!($field)),*].windows(2).for_each(|w| assert!(w[0] <= w[1], \"{} <= {} does not hold\", w[0], w[1]));\n+        // }\n     };\n }\n use _config_data as config_data;"}, {"sha": "ec897ec9d955fc4812281410ca7429a225c16314", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61643aca49e06317602ded1c90458a531844d54e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61643aca49e06317602ded1c90458a531844d54e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=61643aca49e06317602ded1c90458a531844d54e", "patch": "@@ -911,8 +911,8 @@ pub(crate) fn handle_signature_help(\n         Some(it) => it,\n         None => return Ok(None),\n     };\n-    let concise = !snap.config.call_info_full();\n-    let res = to_proto::signature_help(help, concise, snap.config.signature_help_label_offsets());\n+    let config = snap.config.call_info();\n+    let res = to_proto::signature_help(help, config, snap.config.signature_help_label_offsets());\n     Ok(Some(res))\n }\n \n@@ -1215,7 +1215,7 @@ pub(crate) fn handle_code_lens(\n                 .unwrap_or(false),\n             annotate_runnables: lens_config.runnable(),\n             annotate_impls: lens_config.implementations,\n-            annotate_references: lens_config.refs,\n+            annotate_references: lens_config.refs_adt,\n             annotate_method_references: lens_config.method_refs,\n             annotate_enum_variant_references: lens_config.enum_variant_refs,\n         },"}, {"sha": "ffcea078ce7e704ac7d49ca4e099d47c264f7cd5", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/61643aca49e06317602ded1c90458a531844d54e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61643aca49e06317602ded1c90458a531844d54e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=61643aca49e06317602ded1c90458a531844d54e", "patch": "@@ -18,7 +18,7 @@ use vfs::AbsPath;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n-    config::Config,\n+    config::{CallInfoConfig, Config},\n     global_state::GlobalStateSnapshot,\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n     lsp_ext,\n@@ -338,11 +338,11 @@ fn completion_item(\n \n pub(crate) fn signature_help(\n     call_info: SignatureHelp,\n-    concise: bool,\n+    config: CallInfoConfig,\n     label_offsets: bool,\n ) -> lsp_types::SignatureHelp {\n-    let (label, parameters) = match (concise, label_offsets) {\n-        (_, false) => {\n+    let (label, parameters) = match (!config.params_only, label_offsets) {\n+        (concise, false) => {\n             let params = call_info\n                 .parameter_labels()\n                 .map(|label| lsp_types::ParameterInformation {\n@@ -388,16 +388,12 @@ pub(crate) fn signature_help(\n         }\n     };\n \n-    let documentation = if concise {\n-        None\n-    } else {\n-        call_info.doc.map(|doc| {\n-            lsp_types::Documentation::MarkupContent(lsp_types::MarkupContent {\n-                kind: lsp_types::MarkupKind::Markdown,\n-                value: doc,\n-            })\n+    let documentation = call_info.doc.filter(|_| config.docs).map(|doc| {\n+        lsp_types::Documentation::MarkupContent(lsp_types::MarkupContent {\n+            kind: lsp_types::MarkupKind::Markdown,\n+            value: doc,\n         })\n-    };\n+    });\n \n     let active_parameter = call_info.active_parameter.map(|it| it as u32);\n "}]}