{"sha": "2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNmEyNDk1MGE1NTViZGZlY2JkYTdhNTA3MzVkNjQzZjlkMGU3Zjk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-20T18:16:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-20T18:16:28Z"}, "message": "Emit snippets for struct pattern completion if enabled", "tree": {"sha": "ea2374257c5f3886961f84db8f13113737ac9e5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea2374257c5f3886961f84db8f13113737ac9e5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "html_url": "https://github.com/rust-lang/rust/commit/2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6a24950a555bdfecbda7a50735d643f9d0e7f9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b184bfad7a2dc6a9bf6654a7eec6c68a27c49f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/b184bfad7a2dc6a9bf6654a7eec6c68a27c49f70", "html_url": "https://github.com/rust-lang/rust/commit/b184bfad7a2dc6a9bf6654a7eec6c68a27c49f70"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "23a00803c0a8f5a2877c89da42c4050b4e8a6d43", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f6a24950a555bdfecbda7a50735d643f9d0e7f9/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6a24950a555bdfecbda7a50735d643f9d0e7f9/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "patch": "@@ -156,7 +156,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                bn Bar Bar { f }$0\n+                bn Bar Bar { ${1:f} }$0\n             \"#]],\n         );\n     }\n@@ -171,7 +171,7 @@ struct Baz;\n fn outer(<|>) {}\n \"#,\n             expect![[r#\"\n-                bn Foo Foo { bar, baz }: Foo$0\n+                bn Foo Foo { ${1:bar}, ${2:baz} }: Foo$0\n                 bn Bar Bar($1, $2): Bar$0\n             \"#]],\n         )\n@@ -189,7 +189,7 @@ fn outer() {\n }\n \"#,\n             expect![[r#\"\n-                bn Foo Foo { bar, baz }$0\n+                bn Foo Foo { ${1:bar}, ${2:baz} }$0\n                 bn Bar Bar($1, $2)$0\n             \"#]],\n         )\n@@ -209,7 +209,7 @@ fn outer() {\n }\n \"#,\n             expect![[r#\"\n-                bn Foo Foo { bar, baz }$0\n+                bn Foo Foo { ${1:bar}, ${2:baz} }$0\n                 bn Bar Bar($1, $2)$0\n             \"#]],\n         )\n@@ -233,7 +233,7 @@ fn outer() {\n }\n \"#,\n             expect![[r#\"\n-                bn Foo Foo { bar, .. }$0\n+                bn Foo Foo { ${1:bar}, .. }$0\n                 bn Bar Bar($1, ..)$0\n             \"#]],\n         )"}, {"sha": "2327bf363091f4ebbfe26a7eb6a6eb37c680ef66", "filename": "crates/completion/src/render/pattern.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2f6a24950a555bdfecbda7a50735d643f9d0e7f9/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6a24950a555bdfecbda7a50735d643f9d0e7f9/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs?ref=2f6a24950a555bdfecbda7a50735d643f9d0e7f9", "patch": "@@ -3,7 +3,10 @@\n use hir::{db::HirDatabase, HasVisibility, Name, StructKind};\n use itertools::Itertools;\n \n-use crate::{item::CompletionKind, render::RenderContext, CompletionItem, CompletionItemKind};\n+use crate::{\n+    config::SnippetCap, item::CompletionKind, render::RenderContext, CompletionItem,\n+    CompletionItemKind,\n+};\n \n pub(crate) fn render_struct_pat<'a>(\n     ctx: RenderContext<'a>,\n@@ -31,7 +34,9 @@ pub(crate) fn render_struct_pat<'a>(\n         StructKind::Tuple if ctx.snippet_cap().is_some() => {\n             render_tuple_as_pat(&fields, &name, fields_omitted)\n         }\n-        StructKind::Record => render_record_as_pat(ctx.db(), &fields, &name, fields_omitted),\n+        StructKind::Record => {\n+            render_record_as_pat(ctx.db(), ctx.snippet_cap(), &fields, &name, fields_omitted)\n+        }\n         _ => return None,\n     };\n \n@@ -79,7 +84,9 @@ pub(crate) fn render_variant_pat<'a>(\n         StructKind::Tuple if ctx.snippet_cap().is_some() => {\n             render_tuple_as_pat(&fields, &name, fields_omitted)\n         }\n-        StructKind::Record => render_record_as_pat(ctx.db(), &fields, &name, fields_omitted),\n+        StructKind::Record => {\n+            render_record_as_pat(ctx.db(), ctx.snippet_cap(), &fields, &name, fields_omitted)\n+        }\n         _ => return None,\n     };\n \n@@ -106,22 +113,36 @@ pub(crate) fn render_variant_pat<'a>(\n \n fn render_record_as_pat(\n     db: &dyn HirDatabase,\n+    snippet_cap: Option<SnippetCap>,\n     fields: &[hir::Field],\n     name: &str,\n     fields_omitted: bool,\n ) -> String {\n-    format!(\n-        \"{name} {{ {}{} }}\",\n-        fields.into_iter().map(|field| field.name(db)).format(\", \"),\n-        if fields_omitted { \", ..\" } else { \"\" },\n-        name = name\n-    )\n+    let fields = fields.iter();\n+    if snippet_cap.is_some() {\n+        format!(\n+            \"{name} {{ {}{} }}\",\n+            fields\n+                .enumerate()\n+                .map(|(idx, field)| format!(\"${{{}:{}}}\", idx + 1, field.name(db)))\n+                .format(\", \"),\n+            if fields_omitted { \", ..\" } else { \"\" },\n+            name = name\n+        )\n+    } else {\n+        format!(\n+            \"{name} {{ {}{} }}\",\n+            fields.map(|field| field.name(db)).format(\", \"),\n+            if fields_omitted { \", ..\" } else { \"\" },\n+            name = name\n+        )\n+    }\n }\n \n fn render_tuple_as_pat(fields: &[hir::Field], name: &str, fields_omitted: bool) -> String {\n     format!(\n         \"{name}({}{})\",\n-        fields.into_iter().enumerate().map(|(idx, _)| format!(\"${}\", idx + 1)).format(\", \"),\n+        fields.iter().enumerate().map(|(idx, _)| format!(\"${}\", idx + 1)).format(\", \"),\n         if fields_omitted { \", ..\" } else { \"\" },\n         name = name\n     )"}]}