{"sha": "9b2d42587f1b12188c1430bd79c058f4590f0ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMmQ0MjU4N2YxYjEyMTg4YzE0MzBiZDc5YzA1OGY0NTkwZjBkZWQ=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-22T14:45:00Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-28T14:08:51Z"}, "message": "`unwind` is no longer `Option<BasicBlock>`", "tree": {"sha": "de555bf073e95e2dbc3ef7bb673a53e9b92871df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de555bf073e95e2dbc3ef7bb673a53e9b92871df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2d42587f1b12188c1430bd79c058f4590f0ded", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYLD5dRUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLio+QEA/fVWmOspb2Cba+LhwGNr9PRqks9J\nRyrExVSktYXQcZsBALkq4+RjLaYE+mjuf2+pF85ZrmewxlqOmybd8IUELM8M\n=B+P8\n-----END PGP SIGNATURE-----", "payload": "tree de555bf073e95e2dbc3ef7bb673a53e9b92871df\nparent 76f58558421e731f3386d1f597fa6b7fa6ff3111\nauthor hyd-dev <yd-huang@outlook.com> 1621694700 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1622210931 +0800\n\n`unwind` is no longer `Option<BasicBlock>`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2d42587f1b12188c1430bd79c058f4590f0ded", "html_url": "https://github.com/rust-lang/rust/commit/9b2d42587f1b12188c1430bd79c058f4590f0ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2d42587f1b12188c1430bd79c058f4590f0ded/comments", "author": null, "committer": null, "parents": [{"sha": "76f58558421e731f3386d1f597fa6b7fa6ff3111", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f58558421e731f3386d1f597fa6b7fa6ff3111", "html_url": "https://github.com/rust-lang/rust/commit/76f58558421e731f3386d1f597fa6b7fa6ff3111"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "7fc12e477e2840ad305377551579684465aa21df", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d42587f1b12188c1430bd79c058f4590f0ded/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d42587f1b12188c1430bd79c058f4590f0ded/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=9b2d42587f1b12188c1430bd79c058f4590f0ded", "patch": "@@ -1 +1 @@\n-0f8cd43ee8c3614e04b5c624dd8a45758d7023da\n+ce0d64e03ef9875e0935bb60e989542b7ec29579"}, {"sha": "467696e839764d18a54812b7732f28b0ede72006", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=9b2d42587f1b12188c1430bd79c058f4590f0ded", "patch": "@@ -356,7 +356,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         ecx.find_mir_or_eval_fn(instance, abi, args, ret, unwind)\n     }\n@@ -368,7 +368,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        _unwind: Option<mir::BasicBlock>,\n+        _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         ecx.call_dlsym(fn_val, abi, args, ret)\n     }\n@@ -379,7 +379,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         ecx.call_intrinsic(instance, args, ret, unwind)\n     }"}, {"sha": "4c96c99eeeaf2e2fd19945d78b45e727e3aa3a3a", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=9b2d42587f1b12188c1430bd79c058f4590f0ded", "patch": "@@ -120,7 +120,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);"}, {"sha": "c018dd8738108736ca08d7507f97ac6e06712518", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=9b2d42587f1b12188c1430bd79c058f4590f0ded", "patch": "@@ -23,7 +23,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        _unwind: Option<mir::BasicBlock>,\n+        _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n "}, {"sha": "bb8d0bb8db90928265aaeed9ddb0b8fa6e4b6028", "filename": "src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=9b2d42587f1b12188c1430bd79c058f4590f0ded", "patch": "@@ -29,7 +29,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n         trace!(\"eval_fn_call: {:#?}, {:?}\", instance, ret.map(|p| p.0));\n@@ -64,7 +64,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ptr_op: &OpTy<'tcx, Tag>,\n         align_op: &OpTy<'tcx, Tag>,\n         ret: Option<(&PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n         let (dest, ret) = ret.unwrap();"}, {"sha": "b1da7f340fce3daea8dbd418eb588ac0a1126e66", "filename": "src/shims/panic.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d42587f1b12188c1430bd79c058f4590f0ded/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=9b2d42587f1b12188c1430bd79c058f4590f0ded", "patch": "@@ -41,15 +41,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn handle_miri_start_panic(\n         &mut self,\n         args: &[OpTy<'tcx, Tag>],\n-        unwind: Option<mir::BasicBlock>,\n+        unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         trace!(\"miri_start_panic: {:?}\", this.frame().instance);\n-        // Make sure we only start unwinding when this matches our panic strategy.\n-        if this.tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-            throw_ub_format!(\"unwinding despite panic=abort\");\n-        }\n \n         // Get the raw pointer stored in arg[0] (the panic payload).\n         let &[ref payload] = check_arg_count(args)?;\n@@ -59,7 +55,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         thread.panic_payload = Some(payload);\n \n         // Jump to the unwind block to begin unwinding.\n-        this.unwind_to_block(unwind);\n+        this.unwind_to_block(unwind)?;\n         return Ok(());\n     }\n \n@@ -99,7 +95,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             &[data.into()],\n             Some(&ret_place),\n             // Directly return to caller.\n-            StackPopCleanup::Goto { ret: Some(ret), unwind: None },\n+            StackPopCleanup::Goto { ret: Some(ret), unwind: StackPopUnwind::Skip },\n         )?;\n \n         // We ourselves will return `0`, eventually (will be overwritten if we catch a panic).\n@@ -155,7 +151,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 &[catch_unwind.data.into(), payload.into()],\n                 Some(&ret_place),\n                 // Directly return to caller of `try`.\n-                StackPopCleanup::Goto { ret: Some(catch_unwind.ret), unwind: None },\n+                StackPopCleanup::Goto { ret: Some(catch_unwind.ret), unwind: StackPopUnwind::Skip },\n             )?;\n \n             // We pushed a new stack frame, the engine should not do any jumping now!\n@@ -166,7 +162,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Starta a panic in the interpreter with the given message as payload.\n-    fn start_panic(&mut self, msg: &str, unwind: Option<mir::BasicBlock>) -> InterpResult<'tcx> {\n+    fn start_panic(&mut self, msg: &str, unwind: StackPopUnwind) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         // First arg: message.\n@@ -209,12 +205,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Abi::Rust,\n                     &[index.into(), len.into()],\n                     None,\n-                    StackPopCleanup::Goto { ret: None, unwind },\n+                    StackPopCleanup::Goto {\n+                        ret: None,\n+                        unwind: match unwind {\n+                            Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n+                            None => StackPopUnwind::Skip,\n+                        },\n+                    },\n                 )?;\n             }\n             _ => {\n                 // Forward everything else to `panic` lang item.\n-                this.start_panic(msg.description(), unwind)?;\n+                this.start_panic(\n+                    msg.description(),\n+                    match unwind {\n+                        Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n+                        None => StackPopUnwind::Skip,\n+                    },\n+                )?;\n             }\n         }\n         Ok(())"}, {"sha": "a333a4b0ded8f704715d958c0a86ae6b6fd267ea", "filename": "tests/compile-fail/panic/unwind_panic_abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d42587f1b12188c1430bd79c058f4590f0ded/tests%2Fcompile-fail%2Fpanic%2Funwind_panic_abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d42587f1b12188c1430bd79c058f4590f0ded/tests%2Fcompile-fail%2Fpanic%2Funwind_panic_abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Funwind_panic_abort.rs?ref=9b2d42587f1b12188c1430bd79c058f4590f0ded", "patch": "@@ -7,5 +7,5 @@ extern \"Rust\" {\n }\n \n fn main() {\n-    unsafe { miri_start_panic(&mut 0); } //~ ERROR unwinding despite panic=abort\n+    unsafe { miri_start_panic(&mut 0); } //~ ERROR unwinding past a stack frame that does not allow unwinding\n }"}]}