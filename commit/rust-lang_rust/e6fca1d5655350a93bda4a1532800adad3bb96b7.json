{"sha": "e6fca1d5655350a93bda4a1532800adad3bb96b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZmNhMWQ1NjU1MzUwYTkzYmRhNGExNTMyODAwYWRhZDNiYjk2Yjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T22:15:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:38Z"}, "message": "remove the `closure_tys` map from `TypeckTables`\n\nThe information we need is now part of the closure type.", "tree": {"sha": "cf369f8edb8992e0ea980474d246cea0052cc0f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf369f8edb8992e0ea980474d246cea0052cc0f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6fca1d5655350a93bda4a1532800adad3bb96b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6fca1d5655350a93bda4a1532800adad3bb96b7", "html_url": "https://github.com/rust-lang/rust/commit/e6fca1d5655350a93bda4a1532800adad3bb96b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6fca1d5655350a93bda4a1532800adad3bb96b7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "html_url": "https://github.com/rust-lang/rust/commit/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a"}], "stats": {"total": 79, "additions": 34, "deletions": 45}, "files": [{"sha": "05f1184fad3d31682231290fb96f50c156d74be7", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e6fca1d5655350a93bda4a1532800adad3bb96b7", "patch": "@@ -1484,9 +1484,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let Some(tables) = self.in_progress_tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n                 let hir_id = self.tcx.hir.node_to_hir_id(id);\n-                if let Some(&ty) = tables.borrow().closure_tys().get(hir_id) {\n-                    return ty;\n-                }\n+                let closure_ty = tables.borrow().node_id_to_type(hir_id);\n+                let (closure_def_id, closure_substs) = match closure_ty.sty {\n+                    ty::TyClosure(closure_def_id, closure_substs) =>\n+                        (closure_def_id, closure_substs),\n+                    _ =>\n+                        bug!(\"closure with non-closure type: {:?}\", closure_ty),\n+                };\n+                assert_eq!(def_id, closure_def_id);\n+                let closure_sig_ty = closure_substs.closure_sig_ty(def_id, self.tcx);\n+                let closure_sig_ty = self.shallow_resolve(&closure_sig_ty);\n+                return closure_sig_ty.fn_sig(self.tcx);\n             }\n         }\n "}, {"sha": "ccd851799fe3567f57db52a93b2f9cf21211b5c4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e6fca1d5655350a93bda4a1532800adad3bb96b7", "patch": "@@ -356,9 +356,6 @@ pub struct TypeckTables<'tcx> {\n     /// Borrows\n     pub upvar_capture_map: ty::UpvarCaptureMap<'tcx>,\n \n-    /// Records the type of each closure.\n-    closure_tys: ItemLocalMap<ty::PolyFnSig<'tcx>>,\n-\n     /// Records the reasons that we picked the kind of each closure;\n     /// not all closures are present in the map.\n     closure_kind_origins: ItemLocalMap<(Span, ast::Name)>,\n@@ -413,7 +410,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             upvar_capture_map: FxHashMap(),\n             generator_sigs: ItemLocalMap(),\n             generator_interiors: ItemLocalMap(),\n-            closure_tys: ItemLocalMap(),\n             closure_kind_origins: ItemLocalMap(),\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n@@ -609,21 +605,6 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.upvar_capture_map[&upvar_id]\n     }\n \n-    pub fn closure_tys(&self) -> LocalTableInContext<ty::PolyFnSig<'tcx>> {\n-        LocalTableInContext {\n-            local_id_root: self.local_id_root,\n-            data: &self.closure_tys\n-        }\n-    }\n-\n-    pub fn closure_tys_mut(&mut self)\n-                           -> LocalTableInContextMut<ty::PolyFnSig<'tcx>> {\n-        LocalTableInContextMut {\n-            local_id_root: self.local_id_root,\n-            data: &mut self.closure_tys\n-        }\n-    }\n-\n     pub fn closure_kind_origins(&self) -> LocalTableInContext<(Span, ast::Name)> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n@@ -730,7 +711,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n             ref pat_binding_modes,\n             ref pat_adjustments,\n             ref upvar_capture_map,\n-            ref closure_tys,\n             ref closure_kind_origins,\n             ref liberated_fn_sigs,\n             ref fru_field_types,\n@@ -773,7 +753,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for TypeckTables<'gcx> {\n                  hcx.def_path_hash(closure_def_id))\n             });\n \n-            closure_tys.hash_stable(hcx, hasher);\n             closure_kind_origins.hash_stable(hcx, hasher);\n             liberated_fn_sigs.hash_stable(hcx, hasher);\n             fru_field_types.hash_stable(hcx, hasher);"}, {"sha": "e581eac9ccd6c1f0b4fc4c4e1ce18b94965c44f1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e6fca1d5655350a93bda4a1532800adad3bb96b7", "patch": "@@ -297,24 +297,19 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     }\n \n     /// Returns the closure kind for this closure; may return a type\n-    /// variable during inference.\n+    /// variable during inference. To get the closure kind during\n+    /// inference, use `infcx.closure_kind(def_id, substs)`.\n     pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n \n     /// Returns the type representing the closure signature for this\n-    /// closure; may contain type variables during inference.\n+    /// closure; may contain type variables during inference. To get\n+    /// the closure signature during inference, use\n+    /// `infcx.fn_sig(def_id)`.\n     pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_sig_ty\n     }\n-\n-    /// Extracts the signature from the closure.\n-    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> ty::PolyFnSig<'tcx> {\n-        match &self.split(def_id, tcx).closure_sig_ty.sty {\n-            ty::TyFnPtr(sig) => *sig,\n-            t => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", t),\n-        }\n-    }\n }\n \n impl<'tcx> ClosureSubsts<'tcx> {\n@@ -324,6 +319,16 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> ty::ClosureKind {\n         self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n+\n+    /// Extracts the signature from the closure; only usable outside\n+    /// of an inference context, because in that context we know that\n+    /// there are no type variables.\n+    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n+        match self.closure_sig_ty(def_id, tcx).sty {\n+            ty::TyFnPtr(sig) => sig,\n+            ref t => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", t),\n+        }\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {"}, {"sha": "5fd1a0afb3ea0a226d22653f27e07ff1884da00d", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=e6fca1d5655350a93bda4a1532800adad3bb96b7", "patch": "@@ -146,7 +146,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                            sig_fn_ptr_ty,\n                            substs.closure_sig_ty(expr_def_id, self.tcx));\n \n-        self.tables.borrow_mut().closure_tys_mut().insert(expr.hir_id, sig);\n         if let Some(kind) = opt_kind {\n             self.demand_eqtype(expr.span,\n                                kind.to_ty(self.tcx),"}, {"sha": "cf5864e910d2c6bd07e37f3f844b764d259b3e06", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=e6fca1d5655350a93bda4a1532800adad3bb96b7", "patch": "@@ -243,15 +243,6 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n         let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n-        for (&id, closure_ty) in fcx_tables.closure_tys().iter() {\n-            let hir_id = hir::HirId {\n-                owner: common_local_id_root.index,\n-                local_id: id,\n-            };\n-            let closure_ty = self.resolve(closure_ty, &hir_id);\n-            self.tables.closure_tys_mut().insert(hir_id, closure_ty);\n-        }\n-\n         for (&id, &origin) in fcx_tables.closure_kind_origins().iter() {\n             let hir_id = hir::HirId {\n                 owner: common_local_id_root.index,"}, {"sha": "90a3ab75751b05badb1d5cb66a5015671a0d603f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6fca1d5655350a93bda4a1532800adad3bb96b7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e6fca1d5655350a93bda4a1532800adad3bb96b7", "patch": "@@ -1265,7 +1265,14 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         NodeExpr(&hir::Expr { node: hir::ExprClosure(..), hir_id, .. }) => {\n-            tcx.typeck_tables_of(def_id).closure_tys()[hir_id]\n+            let tables = tcx.typeck_tables_of(def_id);\n+            match tables.node_id_to_type(hir_id).sty {\n+                ty::TyClosure(closure_def_id, closure_substs) => {\n+                    assert_eq!(def_id, closure_def_id);\n+                    return closure_substs.closure_sig(closure_def_id, tcx);\n+                }\n+                ref t => bug!(\"closure with non-closure type: {:?}\", t),\n+            }\n         }\n \n         x => {"}]}