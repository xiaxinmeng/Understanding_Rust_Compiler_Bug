{"sha": "5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "node_id": "C_kwDOAAsO6NoAKDVhOWJiYmEyODA5ZTFhN2ZjZjM4MWYxZTA0Y2I4MWU1MDc0ZTFmNTU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T03:18:52Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T03:18:52Z"}, "message": "rustdoc: Add `DocVisitor`\n\n`DocFolder` allows transforming the docs, accomplished by making its\nmethods take and return types by-value. However, several of the rustdoc\n`DocFolder` impls only *visit* the docs; they don't change anything.\nPassing around types by-value is thus unnecessary, confusing, and\npotentially inefficient for those impls.\n\n`DocVisitor` is very similar to `DocFolder`, except that its methods\ntake shared references and return nothing (i.e., the unit type). This\nshould both be more efficient and make the code clearer.\n\nThere is an additional reason to add `DocVisitor`, too. As part of my\ncleanup of `external_traits`, I'm planning to add a `fn cache(&mut self)\n-> &mut Cache` method to `DocFolder` so that `external_traits` can be\nretrieved explicitly from the `Cache`, rather than implicitly via\n`Crate.external_traits` (which is an `Rc<RefCell<...>>`). However, some\nof the `DocFolder` impls that could be turned into `DocVisitor` impls\nonly have a shared reference to the `Cache`, because they are used\nduring rendering. (They have to access the `Cache` via\n`html::render::Context.shared.cache`, which involves an `Rc`.)\n\nSince `DocVisitor` does not mutate any of the types it's visiting, its\nequivalent `cache()` method will only need a shared reference to the\n`Cache`, avoiding the problem described above.", "tree": {"sha": "84454eb924f9b5cf53a0d8ba66f41c3a5cb401f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84454eb924f9b5cf53a0d8ba66f41c3a5cb401f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "html_url": "https://github.com/rust-lang/rust/commit/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "705dec11946f130faca91453886eba2108443339", "url": "https://api.github.com/repos/rust-lang/rust/commits/705dec11946f130faca91453886eba2108443339", "html_url": "https://github.com/rust-lang/rust/commit/705dec11946f130faca91453886eba2108443339"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "9009a9bd41b63653a0cfb5256f42570be3f1becc", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "patch": "@@ -46,22 +46,21 @@ crate trait DocFolder: Sized {\n                 i.items = i.items.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                 ImplItem(i)\n             }\n-            VariantItem(i) => {\n-                match i {\n-                    Variant::Struct(mut j) => {\n-                        let num_fields = j.fields.len();\n-                        j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                        j.fields_stripped |= num_fields != j.fields.len()\n-                            || j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(Variant::Struct(j))\n-                    }\n-                    Variant::Tuple(fields) => {\n-                        let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                        VariantItem(Variant::Tuple(fields))\n-                    }\n-                    Variant::CLike => VariantItem(Variant::CLike),\n+            VariantItem(i) => match i {\n+                Variant::Struct(mut j) => {\n+                    let num_fields = j.fields.len();\n+                    j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                    j.fields_stripped |=\n+                        num_fields != j.fields.len() || j.fields.iter().any(|f| f.is_stripped());\n+                    VariantItem(Variant::Struct(j))\n                 }\n-            }\n+                Variant::Tuple(fields) => {\n+                    let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                    VariantItem(Variant::Tuple(fields))\n+                }\n+                Variant::CLike => VariantItem(Variant::CLike),\n+            },\n+            // FIXME: list all cases explicitly\n             x => x,\n         }\n     }"}, {"sha": "7eeb9d1fcaa55114b3b08c06320aa8345dd0e5fd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "patch": "@@ -121,6 +121,7 @@ mod markdown;\n mod passes;\n mod scrape_examples;\n mod theme;\n+mod visit;\n mod visit_ast;\n mod visit_lib;\n "}, {"sha": "9edf6e11bec90191acabcdc88dc2354b3c422ab0", "filename": "src/librustdoc/visit.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55/src%2Flibrustdoc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55/src%2Flibrustdoc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit.rs?ref=5a9bbba2809e1a7fcf381f1e04cb81e5074e1f55", "patch": "@@ -0,0 +1,51 @@\n+use crate::clean::*;\n+\n+crate trait DocVisitor: Sized {\n+    fn visit_item(&mut self, item: &Item) {\n+        self.visit_item_recur(item)\n+    }\n+\n+    /// don't override!\n+    fn visit_inner_recur(&mut self, kind: &ItemKind) {\n+        match kind {\n+            StrippedItem(..) => unreachable!(),\n+            ModuleItem(i) => {\n+                self.visit_mod(i);\n+                return;\n+            }\n+            StructItem(i) => i.fields.iter().for_each(|x| self.visit_item(x)),\n+            UnionItem(i) => i.fields.iter().for_each(|x| self.visit_item(x)),\n+            EnumItem(i) => i.variants.iter().for_each(|x| self.visit_item(x)),\n+            TraitItem(i) => i.items.iter().for_each(|x| self.visit_item(x)),\n+            ImplItem(i) => i.items.iter().for_each(|x| self.visit_item(x)),\n+            VariantItem(i) => match i {\n+                Variant::Struct(j) => j.fields.iter().for_each(|x| self.visit_item(x)),\n+                Variant::Tuple(fields) => fields.iter().for_each(|x| self.visit_item(x)),\n+                Variant::CLike => {}\n+            },\n+            // FIXME: list all cases explicitly\n+            _ => return,\n+        }\n+    }\n+\n+    /// don't override!\n+    fn visit_item_recur(&mut self, item: &Item) {\n+        match &*item.kind {\n+            StrippedItem(i) => self.visit_inner_recur(i),\n+            _ => self.visit_inner_recur(&item.kind),\n+        }\n+    }\n+\n+    fn visit_mod(&mut self, m: &Module) {\n+        m.items.iter().for_each(|i| self.visit_item(i))\n+    }\n+\n+    fn visit_crate(&mut self, c: &Crate) {\n+        self.visit_item(&c.module);\n+\n+        let external_traits = c.external_traits.borrow();\n+        for v in external_traits.values() {\n+            v.trait_.items.iter().for_each(|i| self.visit_item(i))\n+        }\n+    }\n+}"}]}