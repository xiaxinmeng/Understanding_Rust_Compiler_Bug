{"sha": "1d8489c150df7d0e751f7c438541036df1a9ac5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkODQ4OWMxNTBkZjdkMGU3NTFmN2M0Mzg1NDEwMzZkZjFhOWFjNWU=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-07T21:27:21Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-07T21:31:10Z"}, "message": "perf: Revert accidental inclusion of a part of #69218\n\nThis was accidentally included in #69494 after a rebase and given\nhow much `inflate` and `keccak` stresses the obligation forest seems\nlike a likely culprit to the regression in those benchmarks.\n\n(It is necessary in #69218 as obligation forest needs to accurately\ntrack the root variables or unifications will get lost)", "tree": {"sha": "34f7ade4a5614914f42736c622cd0472119b4aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34f7ade4a5614914f42736c622cd0472119b4aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d8489c150df7d0e751f7c438541036df1a9ac5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8489c150df7d0e751f7c438541036df1a9ac5e", "html_url": "https://github.com/rust-lang/rust/commit/1d8489c150df7d0e751f7c438541036df1a9ac5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d8489c150df7d0e751f7c438541036df1a9ac5e/comments", "author": null, "committer": null, "parents": [{"sha": "97f3eeec8216d7155c24674b9be55e7c672bcae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f3eeec8216d7155c24674b9be55e7c672bcae3", "html_url": "https://github.com/rust-lang/rust/commit/97f3eeec8216d7155c24674b9be55e7c672bcae3"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "bff1fa331298079c78d5862093898e559fad9dc3", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d8489c150df7d0e751f7c438541036df1a9ac5e/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8489c150df7d0e751f7c438541036df1a9ac5e/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=1d8489c150df7d0e751f7c438541036df1a9ac5e", "patch": "@@ -240,15 +240,9 @@ struct FulfillProcessor<'a, 'b, 'tcx> {\n     register_region_obligations: bool,\n }\n \n-fn mk_pending(\n-    infcx: &InferCtxt<'_, 'tcx>,\n-    os: Vec<PredicateObligation<'tcx>>,\n-) -> Vec<PendingPredicateObligation<'tcx>> {\n+fn mk_pending(os: Vec<PredicateObligation<'tcx>>) -> Vec<PendingPredicateObligation<'tcx>> {\n     os.into_iter()\n-        .map(|mut o| {\n-            o.predicate = infcx.resolve_vars_if_possible(&o.predicate);\n-            PendingPredicateObligation { obligation: o, stalled_on: vec![] }\n-        })\n+        .map(|o| PendingPredicateObligation { obligation: o, stalled_on: vec![] })\n         .collect()\n }\n \n@@ -342,7 +336,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                             \"selecting trait `{:?}` at depth {} yielded Ok(Some)\",\n                             data, obligation.recursion_depth\n                         );\n-                        ProcessResult::Changed(mk_pending(infcx, vtable.nested_obligations()))\n+                        ProcessResult::Changed(mk_pending(vtable.nested_obligations()))\n                     }\n                     Ok(None) => {\n                         debug!(\n@@ -436,7 +430,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                             trait_ref_type_vars(self.selcx, data.to_poly_trait_ref(tcx));\n                         ProcessResult::Unchanged\n                     }\n-                    Ok(Some(os)) => ProcessResult::Changed(mk_pending(infcx, os)),\n+                    Ok(Some(os)) => ProcessResult::Changed(mk_pending(os)),\n                     Err(e) => ProcessResult::Error(CodeProjectionError(e)),\n                 }\n             }\n@@ -475,7 +469,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                             vec![TyOrConstInferVar::maybe_from_ty(ty).unwrap()];\n                         ProcessResult::Unchanged\n                     }\n-                    Some(os) => ProcessResult::Changed(mk_pending(infcx, os)),\n+                    Some(os) => ProcessResult::Changed(mk_pending(os)),\n                 }\n             }\n \n@@ -493,7 +487,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         ];\n                         ProcessResult::Unchanged\n                     }\n-                    Some(Ok(ok)) => ProcessResult::Changed(mk_pending(infcx, ok.obligations)),\n+                    Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),\n                     Some(Err(err)) => {\n                         let expected_found = ExpectedFound::new(\n                             subtype.skip_binder().a_is_expected,"}]}