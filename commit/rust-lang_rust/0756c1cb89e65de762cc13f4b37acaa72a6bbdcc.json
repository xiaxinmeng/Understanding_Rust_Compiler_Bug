{"sha": "0756c1cb89e65de762cc13f4b37acaa72a6bbdcc", "node_id": "C_kwDOAAsO6NoAKDA3NTZjMWNiODllNjVkZTc2MmNjMTNmNGIzN2FjYWE3MmE2YmJkY2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-29T13:51:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-29T13:51:16Z"}, "message": "Rollup merge of #110950 - JohnBobbo96:rustc_arena_unsafe_fn, r=Nilstrieb\n\nDeny the `unsafe_op_in_unsafe_fn` lint in `rustc_arena`.\n\nr? ```@Nilstrieb```", "tree": {"sha": "87fd82bf709f19a44f9f5dfee9b4b44a4edbfa8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87fd82bf709f19a44f9f5dfee9b4b44a4edbfa8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0756c1cb89e65de762cc13f4b37acaa72a6bbdcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTSDUCRBK7hj4Ov3rIwAArRMIAAVdLoP2mWjRnXEEKGQGnk+K\n4Pns+AtvW3KUuOlzXuEqhTKSiEQ2ASiU8MmbSplB+nd0rP6wwFsABh1s5Js8ZUe8\neTbS/I4g/aAMz9e2UJq4wPpQcz8pAWMOWvW72cnGEOwb3NIBA4jkvkbbj+IgesCW\n5DuRCgD735NuEpVWlXPCO4ZqNmGaoB8zrGJd1fJMCjlAkvDYtnX1AHqSVs9ReefB\n0pMTJsIziOmpnGYGTgxzupyGLAbBlR4ey9tY/xBaRsSgc1P1f0pe9PAU+IuBisH0\nxw+Qz2gsKPqDDVaNcflj0Zv6ikTiymE/ZMR5yfPTSqh23kkgNP6/wRJf5IpJHVg=\n=K2a0\n-----END PGP SIGNATURE-----\n", "payload": "tree 87fd82bf709f19a44f9f5dfee9b4b44a4edbfa8f\nparent 957a6ad4d9d51781962f53bc448136067df275fb\nparent 47fb8e6c704b9ad7f46bcf09295d05d8f2665e67\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682776276 +0200\ncommitter GitHub <noreply@github.com> 1682776276 +0200\n\nRollup merge of #110950 - JohnBobbo96:rustc_arena_unsafe_fn, r=Nilstrieb\n\nDeny the `unsafe_op_in_unsafe_fn` lint in `rustc_arena`.\n\nr? ```@Nilstrieb```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0756c1cb89e65de762cc13f4b37acaa72a6bbdcc", "html_url": "https://github.com/rust-lang/rust/commit/0756c1cb89e65de762cc13f4b37acaa72a6bbdcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0756c1cb89e65de762cc13f4b37acaa72a6bbdcc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957a6ad4d9d51781962f53bc448136067df275fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/957a6ad4d9d51781962f53bc448136067df275fb", "html_url": "https://github.com/rust-lang/rust/commit/957a6ad4d9d51781962f53bc448136067df275fb"}, {"sha": "47fb8e6c704b9ad7f46bcf09295d05d8f2665e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67", "html_url": "https://github.com/rust-lang/rust/commit/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "6e15f06a76de015dc8c62ac25d5fdf1fd0901654", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0756c1cb89e65de762cc13f4b37acaa72a6bbdcc/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0756c1cb89e65de762cc13f4b37acaa72a6bbdcc/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=0756c1cb89e65de762cc13f4b37acaa72a6bbdcc", "patch": "@@ -20,6 +20,7 @@\n #![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n #![feature(strict_provenance)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n #![allow(clippy::mut_from_ref)] // Arena allocators are one of the places where this pattern is fine.\n@@ -74,19 +75,27 @@ impl<T> ArenaChunk<T> {\n     #[inline]\n     unsafe fn new(capacity: usize) -> ArenaChunk<T> {\n         ArenaChunk {\n-            storage: NonNull::new_unchecked(Box::into_raw(Box::new_uninit_slice(capacity))),\n+            storage: NonNull::from(Box::leak(Box::new_uninit_slice(capacity))),\n             entries: 0,\n         }\n     }\n \n     /// Destroys this arena chunk.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The caller must ensure that `len` elements of this chunk have been initialized.\n     #[inline]\n     unsafe fn destroy(&mut self, len: usize) {\n         // The branch on needs_drop() is an -O1 performance optimization.\n-        // Without the branch, dropping TypedArena<u8> takes linear time.\n+        // Without the branch, dropping TypedArena<T> takes linear time.\n         if mem::needs_drop::<T>() {\n-            let slice = self.storage.as_mut();\n-            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(&mut slice[..len]));\n+            // SAFETY: The caller must ensure that `len` elements of this chunk have\n+            // been initialized.\n+            unsafe {\n+                let slice = self.storage.as_mut();\n+                ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(&mut slice[..len]));\n+            }\n         }\n     }\n \n@@ -255,7 +264,9 @@ impl<T> TypedArena<T> {\n         self.ensure_capacity(len);\n \n         let start_ptr = self.ptr.get();\n-        self.ptr.set(start_ptr.add(len));\n+        // SAFETY: `self.ensure_capacity` makes sure that there is enough space\n+        // for `len` elements.\n+        unsafe { self.ptr.set(start_ptr.add(len)) };\n         start_ptr\n     }\n \n@@ -483,6 +494,10 @@ impl DroplessArena {\n         }\n     }\n \n+    /// # Safety\n+    ///\n+    /// The caller must ensure that `mem` is valid for writes up to\n+    /// `size_of::<T>() * len`.\n     #[inline]\n     unsafe fn write_from_iter<T, I: Iterator<Item = T>>(\n         &self,\n@@ -494,13 +509,18 @@ impl DroplessArena {\n         // Use a manual loop since LLVM manages to optimize it better for\n         // slice iterators\n         loop {\n-            let value = iter.next();\n-            if i >= len || value.is_none() {\n-                // We only return as many items as the iterator gave us, even\n-                // though it was supposed to give us `len`\n-                return slice::from_raw_parts_mut(mem, i);\n+            // SAFETY: The caller must ensure that `mem` is valid for writes up to\n+            // `size_of::<T>() * len`.\n+            unsafe {\n+                match iter.next() {\n+                    Some(value) if i < len => mem.add(i).write(value),\n+                    Some(_) | None => {\n+                        // We only return as many items as the iterator gave us, even\n+                        // though it was supposed to give us `len`\n+                        return slice::from_raw_parts_mut(mem, i);\n+                    }\n+                }\n             }\n-            ptr::write(mem.add(i), value.unwrap());\n             i += 1;\n         }\n     }"}]}