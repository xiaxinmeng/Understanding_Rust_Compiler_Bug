{"sha": "61a7a60d45fd20bee343a37693969a32e63cb905", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTdhNjBkNDVmZDIwYmVlMzQzYTM3NjkzOTY5YTMyZTYzY2I5MDU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-05T01:05:30Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-15T05:23:02Z"}, "message": "Make check_name generic", "tree": {"sha": "513a5331ee22331761ec27c2f8c7d9cf8262df30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513a5331ee22331761ec27c2f8c7d9cf8262df30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a7a60d45fd20bee343a37693969a32e63cb905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a7a60d45fd20bee343a37693969a32e63cb905", "html_url": "https://github.com/rust-lang/rust/commit/61a7a60d45fd20bee343a37693969a32e63cb905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a7a60d45fd20bee343a37693969a32e63cb905/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10855a36b53d33aa2e4f8b98107ee54a0cca5e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/10855a36b53d33aa2e4f8b98107ee54a0cca5e9c", "html_url": "https://github.com/rust-lang/rust/commit/10855a36b53d33aa2e4f8b98107ee54a0cca5e9c"}], "stats": {"total": 75, "additions": 32, "deletions": 43}, "files": [{"sha": "e79ef8bfc6fb43f0a31af6cd8003d4d8140a5318", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=61a7a60d45fd20bee343a37693969a32e63cb905", "patch": "@@ -8,7 +8,7 @@ use crate::ty::TyCtxt;\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use syntax::symbol::Symbol;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n-use syntax_pos::Span;\n+use syntax_pos::{Span, symbols};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_macros::HashStable;\n use errors::DiagnosticId;\n@@ -51,12 +51,12 @@ impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n-        let stab_attrs = vec![\"stable\", \"unstable\", \"rustc_const_unstable\"];\n+        let stab_attrs = [symbols::stable, symbols::unstable, symbols::rustc_const_unstable];\n \n         // Find a stability attribute (i.e., `#[stable (..)]`, `#[unstable (..)]`,\n         // `#[rustc_const_unstable (..)]`).\n         if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| {\n-            attr.check_name(stab_attr)\n+            attr.check_name(**stab_attr)\n         }) {\n             let meta_item = attr.meta();\n             if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta_item {"}, {"sha": "6f5b411946c2d8d3408beb1200a29979178c659a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=61a7a60d45fd20bee343a37693969a32e63cb905", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'tcx> FindAllAttrs<'a, 'tcx> {\n \n     fn is_active_attr(&mut self, attr: &Attribute) -> bool {\n         for attr_name in &self.attr_names {\n-            if attr.check_name(attr_name) && check_config(self.tcx, attr) {\n+            if attr.check_name(*attr_name) && check_config(self.tcx, attr) {\n                 return true;\n             }\n         }"}, {"sha": "2aee21abb58e5ba8dda0dac129141c4d243a1b39", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=61a7a60d45fd20bee343a37693969a32e63cb905", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n \n         let plugin_attributes = cx.sess().plugin_attributes.borrow_mut();\n         for &(ref name, ty) in plugin_attributes.iter() {\n-            if ty == AttributeType::Whitelisted && attr.check_name(&name) {\n+            if ty == AttributeType::Whitelisted && attr.check_name(&**name) {\n                 debug!(\"{:?} (plugin attr) is whitelisted with ty {:?}\", name, ty);\n                 break;\n             }"}, {"sha": "e00f91e39528018e898756e2c7bd97f1899ccad4", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=61a7a60d45fd20bee343a37693969a32e63cb905", "patch": "@@ -81,15 +81,13 @@ impl NestedMetaItem {\n     }\n \n     /// Returns `true` if this list item is a MetaItem with a name of `name`.\n-    pub fn check_name(&self, name: &str) -> bool {\n+    pub fn check_name<T>(&self, name: T) -> bool\n+    where\n+        Path: PartialEq<T>,\n+    {\n         self.meta_item().map_or(false, |meta_item| meta_item.check_name(name))\n     }\n \n-    /// Returns `true` if this list item is a MetaItem with a name of `name`.\n-    pub fn check_name_symbol(&self, name: Symbol) -> bool {\n-        self.meta_item().map_or(false, |meta_item| meta_item.check_name_symbol(name))\n-    }\n-\n     /// For a single-segment meta-item returns its name, otherwise returns `None`.\n     pub fn ident(&self) -> Option<Ident> {\n         self.meta_item().and_then(|meta_item| meta_item.ident())\n@@ -156,19 +154,10 @@ impl Attribute {\n     /// attribute is marked as used.\n     ///\n     /// To check the attribute name without marking it used, use the `path` field directly.\n-    pub fn check_name(&self, name: &str) -> bool {\n-        let matches = self.path == name;\n-        if matches {\n-            mark_used(self);\n-        }\n-        matches\n-    }\n-\n-    /// Returns `true` if the attribute's path matches the argument. If it matches, then the\n-    /// attribute is marked as used.\n-    ///\n-    /// To check the attribute name without marking it used, use the `path` field directly.\n-    pub fn check_name_symbol(&self, name: Symbol) -> bool {\n+    pub fn check_name<T>(&self, name: T) -> bool\n+    where\n+        Path: PartialEq<T>,\n+    {\n         let matches = self.path == name;\n         if matches {\n             mark_used(self);\n@@ -261,11 +250,10 @@ impl MetaItem {\n         }\n     }\n \n-    pub fn check_name(&self, name: &str) -> bool {\n-        self.path == name\n-    }\n-\n-    pub fn check_name_symbol(&self, name: Symbol) -> bool {\n+    pub fn check_name<T>(&self, name: T) -> bool\n+    where\n+        Path: PartialEq<T>,\n+    {\n         self.path == name\n     }\n "}, {"sha": "ba4380416fb2a5fc524ef173b08030fd47cee671", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=61a7a60d45fd20bee343a37693969a32e63cb905", "patch": "@@ -1366,7 +1366,7 @@ impl<'a> Context<'a> {\n                     }\n                 } else if n == \"doc\" {\n                     if let Some(content) = attr.meta_item_list() {\n-                        if content.iter().any(|c| c.check_name_symbol(symbols::include)) {\n+                        if content.iter().any(|c| c.check_name(symbols::include)) {\n                             gate_feature!(self, external_doc, attr.span,\n                                 \"#[doc(include = \\\"...\\\")] is experimental\"\n                             );\n@@ -1667,25 +1667,25 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         // check for gated attributes\n         self.context.check_attribute(attr, false);\n \n-        if attr.check_name_symbol(symbols::doc) {\n+        if attr.check_name(symbols::doc) {\n             if let Some(content) = attr.meta_item_list() {\n-                if content.len() == 1 && content[0].check_name_symbol(symbols::cfg) {\n+                if content.len() == 1 && content[0].check_name(symbols::cfg) {\n                     gate_feature_post!(&self, doc_cfg, attr.span,\n                         \"#[doc(cfg(...))] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name_symbol(symbols::masked)) {\n+                } else if content.iter().any(|c| c.check_name(symbols::masked)) {\n                     gate_feature_post!(&self, doc_masked, attr.span,\n                         \"#[doc(masked)] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name_symbol(symbols::spotlight)) {\n+                } else if content.iter().any(|c| c.check_name(symbols::spotlight)) {\n                     gate_feature_post!(&self, doc_spotlight, attr.span,\n                         \"#[doc(spotlight)] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name_symbol(symbols::alias)) {\n+                } else if content.iter().any(|c| c.check_name(symbols::alias)) {\n                     gate_feature_post!(&self, doc_alias, attr.span,\n                         \"#[doc(alias = \\\"...\\\")] is experimental\"\n                     );\n-                } else if content.iter().any(|c| c.check_name_symbol(symbols::keyword)) {\n+                } else if content.iter().any(|c| c.check_name(symbols::keyword)) {\n                     gate_feature_post!(&self, doc_keyword, attr.span,\n                         \"#[doc(keyword = \\\"...\\\")] is experimental\"\n                     );\n@@ -1748,7 +1748,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::Struct(..) => {\n                 for attr in attr::filter_by_name(&i.attrs[..], \"repr\") {\n                     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-                        if item.check_name_symbol(symbols::simd) {\n+                        if item.check_name(symbols::simd) {\n                             gate_feature_post!(&self, repr_simd, attr.span,\n                                                \"SIMD types are experimental and possibly buggy\");\n                         }\n@@ -1759,7 +1759,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::Enum(..) => {\n                 for attr in attr::filter_by_name(&i.attrs[..], \"repr\") {\n                     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-                        if item.check_name_symbol(symbols::align) {\n+                        if item.check_name(symbols::align) {\n                             gate_feature_post!(&self, repr_align_enum, attr.span,\n                                                \"`#[repr(align(x))]` on enums is experimental\");\n                         }\n@@ -2083,7 +2083,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     // Process the edition umbrella feature-gates first, to ensure\n     // `edition_enabled_features` is completed before it's queried.\n     for attr in krate_attrs {\n-        if !attr.check_name_symbol(symbols::feature) {\n+        if !attr.check_name(symbols::feature) {\n             continue\n         }\n \n@@ -2128,7 +2128,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     }\n \n     for attr in krate_attrs {\n-        if !attr.check_name_symbol(symbols::feature) {\n+        if !attr.check_name(symbols::feature) {\n             continue\n         }\n \n@@ -2258,7 +2258,7 @@ fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate,\n     };\n     if !allow_features {\n         for attr in &krate.attrs {\n-            if attr.check_name_symbol(symbols::feature) {\n+            if attr.check_name(symbols::feature) {\n                 let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\");\n                 span_err!(span_handler, attr.span, E0554,\n                           \"#![feature] may not be used on the {} release channel\","}, {"sha": "f0390ba3d40cb0830a3fb2acc517f91a2fc0df4c", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=61a7a60d45fd20bee343a37693969a32e63cb905", "patch": "@@ -87,7 +87,7 @@ pub fn modify(sess: &ParseSess,\n }\n \n pub fn is_proc_macro_attr(attr: &ast::Attribute) -> bool {\n-    PROC_MACRO_KINDS.iter().any(|kind| attr.check_name(kind))\n+    PROC_MACRO_KINDS.iter().any(|kind| attr.check_name(*kind))\n }\n \n impl<'a> CollectProcMacros<'a> {"}, {"sha": "83cb6f4e86b0ea31ec05c97abfa29b0612b1dbc9", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7a60d45fd20bee343a37693969a32e63cb905/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=61a7a60d45fd20bee343a37693969a32e63cb905", "patch": "@@ -100,7 +100,8 @@ symbols! {\n \n     // Other symbols that can be referred to with syntax_pos::symbols::*\n     Other {\n-        doc, cfg, masked, spotlight, alias, keyword, feature, include, simd, align,\n+        doc, cfg, masked, spotlight, alias, keyword, feature, include, simd, align, stable,\n+        unstable, rustc_const_unstable,\n     }\n }\n "}]}