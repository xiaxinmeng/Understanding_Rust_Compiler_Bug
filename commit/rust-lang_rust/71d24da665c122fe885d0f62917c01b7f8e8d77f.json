{"sha": "71d24da665c122fe885d0f62917c01b7f8e8d77f", "node_id": "C_kwDOAAsO6NoAKDcxZDI0ZGE2NjVjMTIyZmU4ODVkMGY2MjkxN2MwMWI3ZjhlOGQ3N2Y", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-29T14:10:43Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-12-28T11:53:47Z"}, "message": "Split into several messages", "tree": {"sha": "4cf40ea71b42e7e0af31505ec00b27c101878464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf40ea71b42e7e0af31505ec00b27c101878464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d24da665c122fe885d0f62917c01b7f8e8d77f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmOsLksACgkQspeR1Nh4\n40UtCw//UOF/UUScA9I2S570II3rHgKlBpC994HIMnYKA9XmMlzz+uNgLDJpwfzB\ntFODlAkZTNzu/Xfbi79plmb6J+T3tFhumtsk6uxuc8NCr11nzksDtCgPoA2lK3fa\nDwAMZHILYKIy3zzC4eSNxc0O8ey5j+GzsutbbziqcBqqvnwJV8qJ7NjHaGb59mnT\nwzKSMMTIAi161iK0ujIHtWf7y1vAzRjdZMdwCPP/TsiK+SZvY+f55AGfWTxR4mqR\nWBHRn4gNQ5hUSsEq+w/yMNDVCTQYvt/KWyP/itg0Rknri9AygzVOUsS8mkjHmDQ3\n0d/Ad48+XQn6cV8ddI3T42dnoGrlSdxua9yOQfPbrS7X5LowSzGCdmqwz68vFDWz\nDgAqS96Ou1Qb+p6HYtrGEnQ1+oNq0r/I2YXwOPSUhz8YW0sSPRnLKq2aIyU6Mjso\n6FFNyEt0oT+RxyYvaOLxk2O6M3kvRT93qQbijl3IcgLWVj4jBuhcy/4rGMyEt2KG\n/r8P4ChbNxwBcFyjwYT0yQG9egQVh5UKGVsN3rBAyqbsYbh7QHfENr9M8YEGuUXS\nM9JuwQHel4TCgSJ5I7jArJIjN+0ZVwbMYblMb4SDZE7ZOlOVrQDVVSDDhGX+syeP\nof3MVL2xHBshZ1md8TRFLl9DM1g8+QQEmTymlqQhfNaxZiO0C44=\n=/gke\n-----END PGP SIGNATURE-----", "payload": "tree 4cf40ea71b42e7e0af31505ec00b27c101878464\nparent 6c19c08140b7c0c5a9f9f9a434036b460167c87d\nauthor Nikita Tomashevich <quant3234@gmail.com> 1664460643 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1672228427 +0300\n\nSplit into several messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d24da665c122fe885d0f62917c01b7f8e8d77f", "html_url": "https://github.com/rust-lang/rust/commit/71d24da665c122fe885d0f62917c01b7f8e8d77f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d24da665c122fe885d0f62917c01b7f8e8d77f/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c19c08140b7c0c5a9f9f9a434036b460167c87d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c19c08140b7c0c5a9f9f9a434036b460167c87d", "html_url": "https://github.com/rust-lang/rust/commit/6c19c08140b7c0c5a9f9f9a434036b460167c87d"}], "stats": {"total": 297, "additions": 250, "deletions": 47}, "files": [{"sha": "4a43d150968f840c1fb998ebf34c835d03828fab", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/71d24da665c122fe885d0f62917c01b7f8e8d77f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/71d24da665c122fe885d0f62917c01b7f8e8d77f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=71d24da665c122fe885d0f62917c01b7f8e8d77f", "patch": "@@ -184,25 +184,64 @@ infer_explicit_lifetime_required_sugg = add explicit lifetime `{$named}` to {$id\n     *[param_type] type\n }\n \n-infer_actual_impl_expl_expected = {$leading_ellipsis ->\n+infer_actual_impl_expl_expected_signature_two = {$leading_ellipsis ->\n     [true] ...\n     *[false] {\"\"}\n-}{$kind ->\n-    [signature] closure with signature `{$ty_or_sig}` must implement `{$trait_path}`\n-    [passive] `{$trait_path}` would have to be implemented for the type `{$ty_or_sig}`\n-    *[other] `{$ty_or_sig}` must implement `{$trait_path}`\n-}{$lt_kind ->\n-    [two] , for any two lifetimes `'{$lifetime_1}` and `'{$lifetime_2}`...\n-    [any] , for any lifetime `'{$lifetime_1}`...\n-    [some] , for some specific lifetime `'{lifetime_1}`...\n-    *[nothing] {\"\"}\n-}\n+}closure with signature `{$ty_or_sig}` must implement `{$trait_path}`, for any two lifetimes `'{$lifetime_1}` and `'{$lifetime_2}`...\n+infer_actual_impl_expl_expected_signature_any = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}closure with signature `{$ty_or_sig}` must implement `{$trait_path}`, for any lifetime `'{$lifetime_1}`...\n+infer_actual_impl_expl_expected_signature_some = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}closure with signature `{$ty_or_sig}` must implement `{$trait_path}`, for some specific lifetime `'{lifetime_1}`...\n+infer_actual_impl_expl_expected_signature_nothing = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}closure with signature `{$ty_or_sig}` must implement `{$trait_path}`\n+infer_actual_impl_expl_expected_passive_two = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$trait_path}` would have to be implemented for the type `{$ty_or_sig}`, for any two lifetimes `'{$lifetime_1}` and `'{$lifetime_2}`...\n+infer_actual_impl_expl_expected_passive_any = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$trait_path}` would have to be implemented for the type `{$ty_or_sig}`, for any lifetime `'{$lifetime_1}`...\n+infer_actual_impl_expl_expected_passive_some = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$trait_path}` would have to be implemented for the type `{$ty_or_sig}`, for some specific lifetime `'{lifetime_1}`...\n+infer_actual_impl_expl_expected_passive_nothing = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$trait_path}` would have to be implemented for the type `{$ty_or_sig}`\n+infer_actual_impl_expl_expected_other_two = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$ty_or_sig}` must implement `{$trait_path}`, for any two lifetimes `'{$lifetime_1}` and `'{$lifetime_2}`...\n+infer_actual_impl_expl_expected_other_any = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$ty_or_sig}` must implement `{$trait_path}`, for any lifetime `'{$lifetime_1}`...\n+infer_actual_impl_expl_expected_other_some = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$ty_or_sig}` must implement `{$trait_path}`, for some specific lifetime `'{lifetime_1}`...\n+infer_actual_impl_expl_expected_other_nothing = {$leading_ellipsis ->\n+    [true] ...\n+    *[false] {\"\"}\n+}`{$ty_or_sig}` must implement `{$trait_path}`\n \n-infer_actual_impl_expl_but_actually = {$kind_2 ->\n-    [implements_trait] ...but it actually implements `{$trait_path_2}`\n-    [implemented_for_ty] ...but `{$trait_path_2}` is actually implemented for the type `{$ty}`\n-    *[ty_implements] ...but `{$ty}` actually implements `{$trait_path_2}`\n-}{$has_lifetime ->\n+infer_actual_impl_expl_but_actually_implements_trait = ...but it actually implements `{$trait_path_2}`{$has_lifetime ->\n+    [true] , for some specific lifetime `'{$lifetime}`\n+    *[false] {\"\"}\n+}\n+infer_actual_impl_expl_but_actually_implemented_for_ty = ...but `{$trait_path_2}` is actually implemented for the type `{$ty}`{$has_lifetime ->\n+    [true] , for some specific lifetime `'{$lifetime}`\n+    *[false] {\"\"}\n+}\n+infer_actual_impl_expl_but_actually_ty_implements = ...but `{$ty}` actually implements `{$trait_path_2}`{$has_lifetime ->\n     [true] , for some specific lifetime `'{$lifetime}`\n     *[false] {\"\"}\n }"}, {"sha": "69fc3be2bc3a7c4da2be7b67b86cb8cde2021f61", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 160, "deletions": 8, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/71d24da665c122fe885d0f62917c01b7f8e8d77f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d24da665c122fe885d0f62917c01b7f8e8d77f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=71d24da665c122fe885d0f62917c01b7f8e8d77f", "patch": "@@ -544,27 +544,179 @@ pub struct ExplicitLifetimeRequired<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum ActualImplExplNotes {\n-    // Field names have to be different across all variants\n-    #[note(infer::actual_impl_expl_expected)]\n-    Expected {\n+    // Field names have to be different across Expected* and ButActually variants\n+    #[note(infer::actual_impl_expl_expected_signature_two)]\n+    ExpectedSignatureTwo {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+        lifetime_2: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_signature_any)]\n+    ExpectedSignatureAny {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_signature_some)]\n+    ExpectedSignatureSome {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_signature_nothing)]\n+    ExpectedSignatureNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n+    #[note(infer::actual_impl_expl_expected_passive_two)]\n+    ExpectedPassiveTwo {\n         leading_ellipsis: bool,\n-        kind: &'static str,\n         ty_or_sig: String,\n         trait_path: String,\n-        lt_kind: &'static str,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     },\n-    #[note(infer::actual_impl_expl_but_actually)]\n-    ButActually {\n-        kind_2: &'static str,\n+    #[note(infer::actual_impl_expl_expected_passive_any)]\n+    ExpectedPassiveAny {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_passive_some)]\n+    ExpectedPassiveSome {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_passive_nothing)]\n+    ExpectedPassiveNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n+    #[note(infer::actual_impl_expl_expected_other_two)]\n+    ExpectedOtherTwo {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+        lifetime_2: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_other_any)]\n+    ExpectedOtherAny {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_other_some)]\n+    ExpectedOtherSome {\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+    },\n+    #[note(infer::actual_impl_expl_expected_other_nothing)]\n+    ExpectedOtherNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n+    #[note(infer::actual_impl_expl_but_actually_implements_trait)]\n+    ButActuallyImplementsTrait { trait_path_2: String, has_lifetime: bool, lifetime: usize },\n+    #[note(infer::actual_impl_expl_but_actually_implemented_for_ty)]\n+    ButActuallyImplementedForTy {\n+        trait_path_2: String,\n+        has_lifetime: bool,\n+        lifetime: usize,\n+        ty: String,\n+    },\n+    #[note(infer::actual_impl_expl_but_actually_ty_implements)]\n+    ButActuallyTyImplements {\n         trait_path_2: String,\n         has_lifetime: bool,\n         lifetime: usize,\n         ty: String,\n     },\n }\n \n+pub enum ActualImplExpectedKind {\n+    Signature,\n+    Passive,\n+    Other,\n+}\n+\n+pub enum ActualImplExpectedLifetimeKind {\n+    Two,\n+    Any,\n+    Some,\n+    Nothing,\n+}\n+\n+impl ActualImplExplNotes {\n+    pub fn new_expected(\n+        kind: ActualImplExpectedKind,\n+        lt_kind: ActualImplExpectedLifetimeKind,\n+        leading_ellipsis: bool,\n+        ty_or_sig: String,\n+        trait_path: String,\n+        lifetime_1: usize,\n+        lifetime_2: usize,\n+    ) -> Self {\n+        match (kind, lt_kind) {\n+            (ActualImplExpectedKind::Signature, ActualImplExpectedLifetimeKind::Two) => {\n+                Self::ExpectedSignatureTwo {\n+                    leading_ellipsis,\n+                    ty_or_sig,\n+                    trait_path,\n+                    lifetime_1,\n+                    lifetime_2,\n+                }\n+            }\n+            (ActualImplExpectedKind::Signature, ActualImplExpectedLifetimeKind::Any) => {\n+                Self::ExpectedSignatureAny { leading_ellipsis, ty_or_sig, trait_path, lifetime_1 }\n+            }\n+            (ActualImplExpectedKind::Signature, ActualImplExpectedLifetimeKind::Some) => {\n+                Self::ExpectedSignatureSome { leading_ellipsis, ty_or_sig, trait_path, lifetime_1 }\n+            }\n+            (ActualImplExpectedKind::Signature, ActualImplExpectedLifetimeKind::Nothing) => {\n+                Self::ExpectedSignatureNothing { leading_ellipsis, ty_or_sig, trait_path }\n+            }\n+            (ActualImplExpectedKind::Passive, ActualImplExpectedLifetimeKind::Two) => {\n+                Self::ExpectedPassiveTwo {\n+                    leading_ellipsis,\n+                    ty_or_sig,\n+                    trait_path,\n+                    lifetime_1,\n+                    lifetime_2,\n+                }\n+            }\n+            (ActualImplExpectedKind::Passive, ActualImplExpectedLifetimeKind::Any) => {\n+                Self::ExpectedPassiveAny { leading_ellipsis, ty_or_sig, trait_path, lifetime_1 }\n+            }\n+            (ActualImplExpectedKind::Passive, ActualImplExpectedLifetimeKind::Some) => {\n+                Self::ExpectedPassiveSome { leading_ellipsis, ty_or_sig, trait_path, lifetime_1 }\n+            }\n+            (ActualImplExpectedKind::Passive, ActualImplExpectedLifetimeKind::Nothing) => {\n+                Self::ExpectedPassiveNothing { leading_ellipsis, ty_or_sig, trait_path }\n+            }\n+            (ActualImplExpectedKind::Other, ActualImplExpectedLifetimeKind::Two) => {\n+                Self::ExpectedOtherTwo {\n+                    leading_ellipsis,\n+                    ty_or_sig,\n+                    trait_path,\n+                    lifetime_1,\n+                    lifetime_2,\n+                }\n+            }\n+            (ActualImplExpectedKind::Other, ActualImplExpectedLifetimeKind::Any) => {\n+                Self::ExpectedOtherAny { leading_ellipsis, ty_or_sig, trait_path, lifetime_1 }\n+            }\n+            (ActualImplExpectedKind::Other, ActualImplExpectedLifetimeKind::Some) => {\n+                Self::ExpectedOtherSome { leading_ellipsis, ty_or_sig, trait_path, lifetime_1 }\n+            }\n+            (ActualImplExpectedKind::Other, ActualImplExpectedLifetimeKind::Nothing) => {\n+                Self::ExpectedOtherNothing { leading_ellipsis, ty_or_sig, trait_path }\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Diagnostic)]\n #[diag(infer::trait_placeholder_mismatch)]\n pub struct TraitPlaceholderMismatch {"}, {"sha": "d2fd4f6cd7cab55ea529321fd7c36db726d4d16d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/71d24da665c122fe885d0f62917c01b7f8e8d77f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d24da665c122fe885d0f62917c01b7f8e8d77f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=71d24da665c122fe885d0f62917c01b7f8e8d77f", "patch": "@@ -1,4 +1,7 @@\n-use crate::errors::{ActualImplExplNotes, TraitPlaceholderMismatch};\n+use crate::errors::{\n+    ActualImplExpectedKind, ActualImplExpectedLifetimeKind, ActualImplExplNotes,\n+    TraitPlaceholderMismatch,\n+};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::ValuePairs;\n@@ -414,52 +417,54 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                     }\n                 });\n                 (\n-                    \"signature\",\n+                    ActualImplExpectedKind::Signature,\n                     closure_sig.to_string(),\n                     expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n                 )\n             } else {\n                 (\n-                    \"other\",\n+                    ActualImplExpectedKind::Other,\n                     self_ty.to_string(),\n                     expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n                 )\n             }\n         } else if passive_voice {\n             (\n-                \"passive\",\n+                ActualImplExpectedKind::Passive,\n                 expected_trait_ref.map(|tr| tr.self_ty()).to_string(),\n                 expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n             )\n         } else {\n             (\n-                \"other\",\n+                ActualImplExpectedKind::Other,\n                 expected_trait_ref.map(|tr| tr.self_ty()).to_string(),\n                 expected_trait_ref.map(|tr| tr.print_only_trait_path()).to_string(),\n             )\n         };\n \n         let (lt_kind, lifetime_1, lifetime_2) = match (has_sub, has_sup) {\n-            (Some(n1), Some(n2)) => (\"two\", std::cmp::min(n1, n2), std::cmp::max(n1, n2)),\n-            (Some(n), _) | (_, Some(n)) => (\"any\", n, 0),\n+            (Some(n1), Some(n2)) => {\n+                (ActualImplExpectedLifetimeKind::Two, std::cmp::min(n1, n2), std::cmp::max(n1, n2))\n+            }\n+            (Some(n), _) | (_, Some(n)) => (ActualImplExpectedLifetimeKind::Any, n, 0),\n             (None, None) => {\n                 if let Some(n) = expected_has_vid {\n-                    (\"some\", n, 0)\n+                    (ActualImplExpectedLifetimeKind::Some, n, 0)\n                 } else {\n-                    (\"nothing\", 0, 0)\n+                    (ActualImplExpectedLifetimeKind::Nothing, 0, 0)\n                 }\n             }\n         };\n \n-        let note_1 = ActualImplExplNotes::Expected {\n-            leading_ellipsis,\n+        let note_1 = ActualImplExplNotes::new_expected(\n             kind,\n+            lt_kind,\n+            leading_ellipsis,\n             ty_or_sig,\n             trait_path,\n-            lt_kind,\n             lifetime_1,\n             lifetime_2,\n-        };\n+        );\n \n         let mut actual_trait_ref = highlight_trait_ref(actual_trait_ref);\n         actual_trait_ref.highlight.maybe_highlighting_region(vid, actual_has_vid);\n@@ -471,19 +476,26 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n \n         let trait_path_2 = actual_trait_ref.map(|tr| tr.print_only_trait_path()).to_string();\n         let ty = actual_trait_ref.map(|tr| tr.self_ty()).to_string();\n-        let kind_2 = if same_self_type {\n-            \"implements_trait\"\n-        } else if passive_voice {\n-            \"implemented_for_ty\"\n-        } else {\n-            \"ty_implements\"\n-        };\n-\n         let has_lifetime = actual_has_vid.is_some();\n         let lifetime = actual_has_vid.unwrap_or_default();\n \n-        let note_2 =\n-            ActualImplExplNotes::ButActually { kind_2, trait_path_2, ty, has_lifetime, lifetime };\n+        let note_2 = if same_self_type {\n+            ActualImplExplNotes::ButActuallyImplementsTrait { trait_path_2, has_lifetime, lifetime }\n+        } else if passive_voice {\n+            ActualImplExplNotes::ButActuallyImplementedForTy {\n+                trait_path_2,\n+                ty,\n+                has_lifetime,\n+                lifetime,\n+            }\n+        } else {\n+            ActualImplExplNotes::ButActuallyTyImplements {\n+                trait_path_2,\n+                ty,\n+                has_lifetime,\n+                lifetime,\n+            }\n+        };\n \n         vec![note_1, note_2]\n     }"}]}