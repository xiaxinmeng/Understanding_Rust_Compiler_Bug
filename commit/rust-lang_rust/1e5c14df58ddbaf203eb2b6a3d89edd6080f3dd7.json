{"sha": "1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNWMxNGRmNThkZGJhZjIwM2ViMmI2YTNkODllZGQ2MDgwZjNkZDc=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-03T06:54:03Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-06T10:24:24Z"}, "message": "try putting the can_be_expressed_as_pointer_cast at the top and find that we still get an ICE", "tree": {"sha": "9853df9cecd6b48c09d6189bd9cbd0b15d786dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9853df9cecd6b48c09d6189bd9cbd0b15d786dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "html_url": "https://github.com/rust-lang/rust/commit/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ecee9edeca0f234c2074b929f5333bee4e76a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ecee9edeca0f234c2074b929f5333bee4e76a5", "html_url": "https://github.com/rust-lang/rust/commit/b4ecee9edeca0f234c2074b929f5333bee4e76a5"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "7ab3f0d96763ceda2d513d21c2589682cf1883e4", "filename": "src/tools/clippy/clippy_lints/src/transmute.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs?ref=1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "patch": "@@ -330,6 +330,26 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let from_ty = cx.typeck_results().expr_ty(&args[0]);\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n+                if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) {\n+                    span_lint_and_then(\n+                        cx,\n+                        TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+                        e.span,\n+                        &format!(\n+                            \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n+                            from_ty,\n+                            to_ty\n+                        ),\n+                        |diag| {\n+                            if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                let sugg = format!(\"{} as {}\", arg, to_ty);\n+                                diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n+                            }\n+                        }\n+                    );\n+                    return\n+                }\n+\n                 match (&from_ty.kind, &to_ty.kind) {\n                     _ if from_ty == to_ty => span_lint(\n                         cx,\n@@ -626,25 +646,9 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             );\n                         }\n                     },\n-                    _ => {},\n-                }\n-                if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) {\n-                    span_lint_and_then(\n-                        cx,\n-                        TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-                        e.span,\n-                        &format!(\n-                            \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n-                            from_ty,\n-                            to_ty\n-                        ),\n-                        |diag| {\n-                            if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                let sugg = format!(\"{} as {}\", arg, to_ty);\n-                                diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n-                            }\n-                        }\n-                    )\n+                    _ => {\n+                        return;\n+                    },\n                 }\n             }\n         }"}, {"sha": "b3171d2e7dcfd6c37bb83685b2971059d7471112", "filename": "src/tools/clippy/tests/ui/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs?ref=1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "patch": "@@ -1,7 +1,7 @@\n #![allow(dead_code)]\n+#![allow(clippy::transmutes_expressible_as_ptr_casts)]\n \n extern crate core;\n-\n use std::mem::transmute as my_transmute;\n use std::vec::Vec as MyVec;\n "}, {"sha": "009b5fa534cf0fcf46b58c27ea163c5d144ac0e8", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::transmute_ptr_to_ptr)]\n-\n+#![allow(clippy::transmutes_expressible_as_ptr_casts)]\n // Make sure we can modify lifetimes, which is one of the recommended uses\n // of transmute\n "}]}