{"sha": "2396780cdaedf097dd6a8f3927749bcaf5b1238b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOTY3ODBjZGFlZGYwOTdkZDZhOGYzOTI3NzQ5YmNhZjViMTIzOGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-03T07:27:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-03T07:27:44Z"}, "message": "liballoc: revert nested imports style changes.", "tree": {"sha": "297f6254da34163ba06af6a5186b80b2fd9b4fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/297f6254da34163ba06af6a5186b80b2fd9b4fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2396780cdaedf097dd6a8f3927749bcaf5b1238b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2396780cdaedf097dd6a8f3927749bcaf5b1238b", "html_url": "https://github.com/rust-lang/rust/commit/2396780cdaedf097dd6a8f3927749bcaf5b1238b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2396780cdaedf097dd6a8f3927749bcaf5b1238b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285106a40e70cd5b240625749e4eac8fce96fcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/285106a40e70cd5b240625749e4eac8fce96fcf9", "html_url": "https://github.com/rust-lang/rust/commit/285106a40e70cd5b240625749e4eac8fce96fcf9"}], "stats": {"total": 711, "additions": 305, "deletions": 406}, "files": [{"sha": "ec652df3b37a49829a1f2972a7f3b99ef82e0a3d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -2,11 +2,9 @@\n \n #![stable(feature = \"alloc_module\", since = \"1.28.0\")]\n \n-use core::{\n-    intrinsics::{min_align_of_val, size_of_val},\n-    ptr::{NonNull, Unique},\n-    usize,\n-};\n+use core::intrinsics::{min_align_of_val, size_of_val};\n+use core::ptr::{NonNull, Unique};\n+use core::usize;\n \n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]\n@@ -230,10 +228,8 @@ pub fn handle_alloc_error(layout: Layout) -> ! {\n mod tests {\n     extern crate test;\n     use test::Bencher;\n-    use crate::{\n-        boxed::Box,\n-        alloc::{Global, Alloc, Layout, handle_alloc_error},\n-    };\n+    use crate::boxed::Box;\n+    use crate::alloc::{Global, Alloc, Layout, handle_alloc_error};\n \n     #[test]\n     fn allocate_zeroed() {"}, {"sha": "4c17bdc3e9e9d00dfa8d102a21172d20b719abaa", "filename": "src/liballoc/benches/btree/map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,8 +1,7 @@\n-use std::{\n-    iter::Iterator,\n-    vec::Vec,\n-    collections::BTreeMap,\n-};\n+use std::iter::Iterator;\n+use std::vec::Vec;\n+use std::collections::BTreeMap;\n+\n use rand::{Rng, seq::SliceRandom, thread_rng};\n use test::{Bencher, black_box};\n "}, {"sha": "f17fb8212ce193f744b19afe9f64f39a32719844", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,8 +1,7 @@\n use std::{mem, ptr};\n-use rand::{\n-    thread_rng, Rng, SeedableRng,\n-    distributions::{Standard, Alphanumeric},\n-};\n+\n+use rand::{thread_rng, Rng, SeedableRng};\n+use rand::distributions::{Standard, Alphanumeric};\n use rand_xorshift::XorShiftRng;\n use test::{Bencher, black_box};\n "}, {"sha": "270f48e80835ab92e93a1ed2da2d42ed6f0184a6", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -2,16 +2,15 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::{\n-    cmp::Ordering,\n-    hash::{Hash, Hasher},\n-    ops::{Add, AddAssign, Deref},\n-};\n+use core::cmp::Ordering;\n+use core::hash::{Hash, Hasher};\n+use core::ops::{Add, AddAssign, Deref};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::borrow::{Borrow, BorrowMut};\n \n-use crate::{fmt, string::String};\n+use crate::fmt;\n+use crate::string::String;\n \n use Cow::*;\n "}, {"sha": "8e01e12e0b8def3106d164e2faa2f8233eaf0e49", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -56,28 +56,26 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::{\n-    any::Any,\n-    borrow,\n-    cmp::Ordering,\n-    convert::From,\n-    fmt,\n-    future::Future,\n-    hash::{Hash, Hasher},\n-    iter::{Iterator, FromIterator, FusedIterator},\n-    marker::{Unpin, Unsize},\n-    mem,\n-    pin::Pin,\n-    ops::{CoerceUnsized, DispatchFromDyn, Deref, DerefMut, Receiver, Generator, GeneratorState},\n-    ptr::{self, NonNull, Unique},\n-    task::{LocalWaker, Poll},\n+use core::any::Any;\n+use core::borrow;\n+use core::cmp::Ordering;\n+use core::convert::From;\n+use core::fmt;\n+use core::future::Future;\n+use core::hash::{Hash, Hasher};\n+use core::iter::{Iterator, FromIterator, FusedIterator};\n+use core::marker::{Unpin, Unsize};\n+use core::mem;\n+use core::pin::Pin;\n+use core::ops::{\n+    CoerceUnsized, DispatchFromDyn, Deref, DerefMut, Receiver, Generator, GeneratorState\n };\n+use core::ptr::{self, NonNull, Unique};\n+use core::task::{LocalWaker, Poll};\n \n-use crate::{\n-    vec::Vec,\n-    raw_vec::RawVec,\n-    str::from_boxed_utf8_unchecked,\n-};\n+use crate::vec::Vec;\n+use crate::raw_vec::RawVec;\n+use crate::str::from_boxed_utf8_unchecked;\n \n /// A pointer type for heap allocation.\n ///"}, {"sha": "654eabd0703263d7464480e102a636ac4183cc89", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,13 +1,11 @@\n //! Test for `boxed` mod.\n \n-use core::{\n-    any::Any,\n-    ops::Deref,\n-    result::Result::{Err, Ok},\n-    clone::Clone,\n-    f64,\n-    i64,\n-};\n+use core::any::Any;\n+use core::ops::Deref;\n+use core::result::Result::{Err, Ok};\n+use core::clone::Clone;\n+use core::f64;\n+use core::i64;\n \n use std::boxed::Box;\n "}, {"sha": "f97522140a8a1deb8d1b3c0e25889db1dcbee1a9", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -145,18 +145,14 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::{\n-    ops::{Deref, DerefMut},\n-    iter::{FromIterator, FusedIterator},\n-    mem::{swap, size_of, ManuallyDrop},\n-    ptr,\n-    fmt,\n-};\n-\n-use crate::{\n-    slice,\n-    vec::{self, Vec},\n-};\n+use core::ops::{Deref, DerefMut};\n+use core::iter::{FromIterator, FusedIterator};\n+use core::mem::{swap, size_of, ManuallyDrop};\n+use core::ptr;\n+use core::fmt;\n+\n+use crate::slice;\n+use crate::vec::{self, Vec};\n \n use super::SpecExtend;\n "}, {"sha": "aaaa419dcb849027a951483391664bd827be6417", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,21 +1,15 @@\n-use core::{\n-    borrow::Borrow,\n-    cmp::Ordering,\n-    fmt::Debug,\n-    hash::{Hash, Hasher},\n-    iter::{FromIterator, Peekable, FusedIterator},\n-    marker::PhantomData,\n-    ops::{\n-        Bound::{Excluded, Included, Unbounded},\n-        Index, RangeBounds,\n-    },\n-    fmt, intrinsics, mem, ptr,\n-};\n-\n-use super::{\n-    node::{self, Handle, NodeRef, marker, InsertResult::*, ForceResult::*},\n-    search::{self, SearchResult::*},\n-};\n+use core::borrow::Borrow;\n+use core::cmp::Ordering;\n+use core::fmt::Debug;\n+use core::hash::{Hash, Hasher};\n+use core::iter::{FromIterator, Peekable, FusedIterator};\n+use core::marker::PhantomData;\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n+use core::ops::{Index, RangeBounds};\n+use core::{fmt, intrinsics, mem, ptr};\n+\n+use super::node::{self, Handle, NodeRef, marker, InsertResult::*, ForceResult::*};\n+use super::search::{self, SearchResult::*};\n \n use UnderflowResult::*;\n use Entry::*;"}, {"sha": "c4f39430533dca46f547089831eadc67adf18f14", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -31,17 +31,13 @@\n // - A node of length `n` has `n` keys, `n` values, and (in an internal node) `n + 1` edges.\n //   This implies that even an empty internal node has at least one edge.\n \n-use core::{\n-    marker::PhantomData,\n-    mem::{self, MaybeUninit},\n-    ptr::{self, Unique, NonNull},\n-    slice,\n-};\n+use core::marker::PhantomData;\n+use core::mem::{self, MaybeUninit};\n+use core::ptr::{self, Unique, NonNull};\n+use core::slice;\n \n-use crate::{\n-    alloc::{Global, Alloc, Layout},\n-    boxed::Box,\n-};\n+use crate::alloc::{Global, Alloc, Layout};\n+use crate::boxed::Box;\n \n const B: usize = 6;\n pub const MIN_LEN: usize = B - 1;"}, {"sha": "dfb67d2ea575612e9276134f790e61fd8222bfd0", "filename": "src/liballoc/collections/btree/search.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,7 +1,5 @@\n-use core::{\n-    borrow::Borrow,\n-    cmp::Ordering,\n-};\n+use core::borrow::Borrow;\n+use core::cmp::Ordering;\n \n use super::node::{Handle, NodeRef, marker, ForceResult::*};\n "}, {"sha": "78cd21dd4118d4cfd62db5ba4507b29774f87048", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,16 +1,12 @@\n // This is pretty much entirely stolen from TreeSet, since BTreeMap has an identical interface\n // to TreeMap\n \n-use core::{\n-    borrow::Borrow,\n-    cmp::{\n-        Ordering::{self, Less, Greater, Equal},\n-        min, max,\n-    },\n-    fmt::{self, Debug},\n-    iter::{Peekable, FromIterator, FusedIterator},\n-    ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds},\n-};\n+use core::borrow::Borrow;\n+use core::cmp::Ordering::{self, Less, Greater, Equal};\n+use core::cmp::{min, max};\n+use core::fmt::{self, Debug};\n+use core::iter::{Peekable, FromIterator, FusedIterator};\n+use core::ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds};\n \n use crate::collections::btree_map::{self, BTreeMap, Keys};\n use super::Recover;"}, {"sha": "afd8078cdd7537bcdac5bf3af0a316ef854259aa", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -12,15 +12,13 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::{\n-    cmp::Ordering,\n-    fmt,\n-    hash::{Hasher, Hash},\n-    iter::{FromIterator, FusedIterator},\n-    marker::PhantomData,\n-    mem,\n-    ptr::NonNull,\n-};\n+use core::cmp::Ordering;\n+use core::fmt;\n+use core::hash::{Hasher, Hash};\n+use core::iter::{FromIterator, FusedIterator};\n+use core::marker::PhantomData;\n+use core::mem;\n+use core::ptr::NonNull;\n \n use crate::boxed::Box;\n use super::SpecExtend;\n@@ -1215,8 +1213,11 @@ unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n \n #[cfg(test)]\n mod tests {\n-    use std::{thread, vec::Vec};\n+    use std::thread;\n+    use std::vec::Vec;\n+\n     use rand::{thread_rng, RngCore};\n+\n     use super::{LinkedList, Node};\n \n     #[cfg(test)]"}, {"sha": "99fa54acb08367fe32c97cf12fa3374ce893da2f", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -7,25 +7,19 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::{\n-    cmp::{self, Ordering},\n-    fmt,\n-    iter::{repeat_with, FromIterator, FusedIterator},\n-    mem,\n-    ops::{\n-        Bound::{Excluded, Included, Unbounded},\n-        Index, IndexMut, RangeBounds, Try,\n-    },\n-    ptr::{self, NonNull},\n-    slice,\n-    hash::{Hash, Hasher},\n-};\n-\n-use crate::{\n-    collections::CollectionAllocErr,\n-    raw_vec::RawVec,\n-    vec::Vec,\n-};\n+use core::cmp::{self, Ordering};\n+use core::fmt;\n+use core::iter::{repeat_with, FromIterator, FusedIterator};\n+use core::mem;\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n+use core::ops::{Index, IndexMut, RangeBounds, Try};\n+use core::ptr::{self, NonNull};\n+use core::slice;\n+use core::hash::{Hash, Hasher};\n+\n+use crate::collections::CollectionAllocErr;\n+use crate::raw_vec::RawVec;\n+use crate::vec::Vec;\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1"}, {"sha": "9bda7034a621bb24a47c1e7a8896096517aee366", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -509,16 +509,21 @@\n #[unstable(feature = \"fmt_internals\", issue = \"0\")]\n pub use core::fmt::rt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{\n-    Formatter, Result, Write,\n-    Binary, Octal,\n-    Debug, Display,\n-    LowerHex, Pointer, UpperHex,\n-    LowerExp, UpperExp,\n-    Error,\n-    write, ArgumentV1, Arguments,\n-    DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple\n-};\n+pub use core::fmt::{Formatter, Result, Write};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::{Binary, Octal};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::{Debug, Display};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::{LowerHex, Pointer, UpperHex};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::{LowerExp, UpperExp};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::Error;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::{write, ArgumentV1, Arguments};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n pub use core::fmt::{Alignment};\n "}, {"sha": "6767cf89f73ba2ce205cd784050eda5b9be72e5f", "filename": "src/liballoc/prelude.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fprelude.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -12,11 +12,8 @@\n \n #![unstable(feature = \"alloc\", issue = \"27783\")]\n \n-#[unstable(feature = \"alloc\", issue = \"27783\")]\n-pub use crate::{\n-    borrow::ToOwned,\n-    boxed::Box,\n-    slice::SliceConcatExt,\n-    string::{String, ToString},\n-    vec::Vec,\n-};\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::borrow::ToOwned;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::boxed::Box;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::slice::SliceConcatExt;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::string::{String, ToString};\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::vec::Vec;"}, {"sha": "dcecf9bc76d88d6c33d94c362b3a249ca3156118", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,19 +1,15 @@\n #![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"0\")]\n #![doc(hidden)]\n \n-use core::{\n-    cmp,\n-    mem,\n-    ops::Drop,\n-    ptr::{self, NonNull, Unique},\n-    slice,\n-};\n-\n-use crate::{\n-    alloc::{Alloc, Layout, Global, handle_alloc_error},\n-    collections::CollectionAllocErr::{self, *},\n-    boxed::Box,\n-};\n+use core::cmp;\n+use core::mem;\n+use core::ops::Drop;\n+use core::ptr::{self, NonNull, Unique};\n+use core::slice;\n+\n+use crate::alloc::{Alloc, Layout, Global, handle_alloc_error};\n+use crate::collections::CollectionAllocErr::{self, *};\n+use crate::boxed::Box;\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating\n /// a buffer of memory on the heap without having to worry about all the corner cases"}, {"sha": "d78869270d563cb58d7496fffad6ffe9c75d8a36", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -231,29 +231,25 @@ use crate::boxed::Box;\n #[cfg(test)]\n use std::boxed::Box;\n \n-use core::{\n-    any::Any,\n-    borrow,\n-    cell::Cell,\n-    cmp::Ordering,\n-    fmt,\n-    hash::{Hash, Hasher},\n-    intrinsics::abort,\n-    marker::{self, Unpin, Unsize, PhantomData},\n-    mem::{self, align_of_val, forget, size_of_val},\n-    ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn},\n-    pin::Pin,\n-    ptr::{self, NonNull},\n-    slice::from_raw_parts_mut,\n-    convert::From,\n-    usize,\n-};\n-\n-use crate::{\n-    alloc::{Global, Alloc, Layout, box_free, handle_alloc_error},\n-    string::String,\n-    vec::Vec,\n-};\n+use core::any::Any;\n+use core::borrow;\n+use core::cell::Cell;\n+use core::cmp::Ordering;\n+use core::fmt;\n+use core::hash::{Hash, Hasher};\n+use core::intrinsics::abort;\n+use core::marker::{self, Unpin, Unsize, PhantomData};\n+use core::mem::{self, align_of_val, forget, size_of_val};\n+use core::ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn};\n+use core::pin::Pin;\n+use core::ptr::{self, NonNull};\n+use core::slice::from_raw_parts_mut;\n+use core::convert::From;\n+use core::usize;\n+\n+use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n+use crate::string::String;\n+use crate::vec::Vec;\n \n struct RcBox<T: ?Sized> {\n     strong: Cell<usize>,\n@@ -1563,15 +1559,13 @@ impl<T: ?Sized> RcBoxPtr<T> for RcBox<T> {\n #[cfg(test)]\n mod tests {\n     use super::{Rc, Weak};\n-    use std::{\n-        boxed::Box,\n-        cell::RefCell,\n-        option::Option::{self, None, Some},\n-        result::Result::{Err, Ok},\n-        mem::drop,\n-        clone::Clone,\n-        convert::From,\n-    };\n+    use std::boxed::Box;\n+    use std::cell::RefCell;\n+    use std::option::Option::{self, None, Some};\n+    use std::result::Result::{Err, Ok};\n+    use std::mem::drop;\n+    use std::clone::Clone;\n+    use std::convert::From;\n \n     #[test]\n     fn test_clone() {\n@@ -1735,7 +1729,8 @@ mod tests {\n \n     #[test]\n     fn test_into_from_raw_unsized() {\n-        use std::{fmt::Display, string::ToString};\n+        use std::fmt::Display;\n+        use std::string::ToString;\n \n         let rc: Rc<str> = Rc::from(\"foo\");\n \n@@ -1943,7 +1938,8 @@ mod tests {\n \n     #[test]\n     fn test_from_box_trait() {\n-        use std::{fmt::Display, string::ToString};\n+        use std::fmt::Display;\n+        use std::string::ToString;\n \n         let b: Box<dyn Display> = box 123;\n         let r: Rc<dyn Display> = Rc::from(b);"}, {"sha": "479959deeb1a7b017d116f525c546a8f551b4e90", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -87,19 +87,15 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![cfg_attr(test, allow(unused_imports, dead_code))]\n \n-use core::{\n-    borrow::{Borrow, BorrowMut},\n-    cmp::Ordering::{self, Less},\n-    mem::{self, size_of},\n-    ptr,\n-    u8, u16, u32,\n-};\n-\n-use crate::{\n-    borrow::ToOwned,\n-    boxed::Box,\n-    vec::Vec,\n-};\n+use core::borrow::{Borrow, BorrowMut};\n+use core::cmp::Ordering::{self, Less};\n+use core::mem::{self, size_of};\n+use core::ptr;\n+use core::{u8, u16, u32};\n+\n+use crate::borrow::ToOwned;\n+use crate::boxed::Box;\n+use crate::vec::Vec;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{Chunks, Windows};\n@@ -142,8 +138,9 @@ pub use hack::to_vec;\n // `test_permutations` test\n mod hack {\n     use core::mem;\n-    use crate::{boxed::Box, vec::Vec};\n \n+    use crate::boxed::Box;\n+    use crate::vec::Vec;\n     #[cfg(test)]\n     use crate::string::ToString;\n "}, {"sha": "211e75bd91504197757e2f25ee73678a984a66a0", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -28,26 +28,20 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![allow(unused_imports)]\n \n-use core::{\n-    borrow::Borrow,\n-    fmt,\n-    str::{\n-        self as core_str,\n-        pattern::{Pattern, Searcher, ReverseSearcher, DoubleEndedSearcher},\n-    },\n-    mem,\n-    ptr,\n-    iter::FusedIterator,\n-    unicode::conversions,\n-};\n-\n-use crate::{\n-    borrow::ToOwned,\n-    boxed::Box,\n-    slice::{SliceConcatExt, SliceIndex},\n-    string::String,\n-    vec::Vec,\n-};\n+use core::borrow::Borrow;\n+use core::fmt;\n+use core::str as core_str;\n+use core::str::pattern::{Pattern, Searcher, ReverseSearcher, DoubleEndedSearcher};\n+use core::mem;\n+use core::ptr;\n+use core::iter::FusedIterator;\n+use core::unicode::conversions;\n+\n+use crate::borrow::ToOwned;\n+use crate::boxed::Box;\n+use crate::slice::{SliceConcatExt, SliceIndex};\n+use crate::string::String;\n+use crate::vec::Vec;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};"}, {"sha": "73f67e98f364e6b92284aa023c0ea73eb5981647", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -46,30 +46,20 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::{\n-    char::{decode_utf16, REPLACEMENT_CHARACTER},\n-    fmt,\n-    hash,\n-    iter::{FromIterator, FusedIterator},\n-    ops::{\n-        self,\n-        Bound::{Excluded, Included, Unbounded},\n-        Add, AddAssign, Index, IndexMut, RangeBounds,\n-    },\n-    ptr,\n-    str::{\n-        pattern::Pattern,\n-        lossy,\n-    }\n-};\n-\n-use crate::{\n-    borrow::{Cow, ToOwned},\n-    collections::CollectionAllocErr,\n-    boxed::Box,\n-    str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars},\n-    vec::Vec,\n-};\n+use core::char::{decode_utf16, REPLACEMENT_CHARACTER};\n+use core::fmt;\n+use core::hash;\n+use core::iter::{FromIterator, FusedIterator};\n+use core::ops::{self, Add, AddAssign, Index, IndexMut, RangeBounds};\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n+use core::ptr;\n+use core::str::{pattern::Pattern, lossy};\n+\n+use crate::borrow::{Cow, ToOwned};\n+use crate::collections::CollectionAllocErr;\n+use crate::boxed::Box;\n+use crate::str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n+use crate::vec::Vec;\n \n /// A UTF-8 encoded, growable string.\n ///"}, {"sha": "5bdb3616ed232a53ab3075cf1df85a4dceb93482", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -6,34 +6,28 @@\n //!\n //! [arc]: struct.Arc.html\n \n-use core::{\n-    any::Any,\n-    sync::atomic::{\n-        self,\n-        Ordering::{Acquire, Relaxed, Release, SeqCst}\n-    },\n-    borrow,\n-    fmt,\n-    cmp::{self, Ordering},\n-    intrinsics::abort,\n-    mem::{self, align_of_val, size_of_val},\n-    ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn},\n-    pin::Pin,\n-    ptr::{self, NonNull},\n-    marker::{Unpin, Unsize, PhantomData},\n-    hash::{Hash, Hasher},\n-    isize, usize,\n-    convert::From,\n-    slice::from_raw_parts_mut,\n-};\n-\n-use crate::{\n-    alloc::{Global, Alloc, Layout, box_free, handle_alloc_error},\n-    boxed::Box,\n-    rc::is_dangling,\n-    string::String,\n-    vec::Vec,\n-};\n+use core::any::Any;\n+use core::sync::atomic;\n+use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n+use core::borrow;\n+use core::fmt;\n+use core::cmp::{self, Ordering};\n+use core::intrinsics::abort;\n+use core::mem::{self, align_of_val, size_of_val};\n+use core::ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn};\n+use core::pin::Pin;\n+use core::ptr::{self, NonNull};\n+use core::marker::{Unpin, Unsize, PhantomData};\n+use core::hash::{Hash, Hasher};\n+use core::{isize, usize};\n+use core::convert::From;\n+use core::slice::from_raw_parts_mut;\n+\n+use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n+use crate::boxed::Box;\n+use crate::rc::is_dangling;\n+use crate::string::String;\n+use crate::vec::Vec;\n \n /// A soft limit on the amount of references that may be made to an `Arc`.\n ///\n@@ -1654,18 +1648,16 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n \n #[cfg(test)]\n mod tests {\n-    use std::{\n-        boxed::Box,\n-        clone::Clone,\n-        sync::mpsc::channel,\n-        mem::drop,\n-        ops::Drop,\n-        option::Option::{self, None, Some},\n-        sync::atomic::{self, Ordering::{Acquire, SeqCst}},\n-        thread,\n-        sync::Mutex,\n-        convert::From,\n-    };\n+    use std::boxed::Box;\n+    use std::clone::Clone;\n+    use std::sync::mpsc::channel;\n+    use std::mem::drop;\n+    use std::ops::Drop;\n+    use std::option::Option::{self, None, Some};\n+    use std::sync::atomic::{self, Ordering::{Acquire, SeqCst}};\n+    use std::thread;\n+    use std::sync::Mutex;\n+    use std::convert::From;\n \n     use super::{Arc, Weak};\n     use crate::vec::Vec;\n@@ -1774,7 +1766,8 @@ mod tests {\n \n     #[test]\n     fn test_into_from_raw_unsized() {\n-        use std::{fmt::Display, string::ToString};\n+        use std::fmt::Display;\n+        use std::string::ToString;\n \n         let arc: Arc<str> = Arc::from(\"foo\");\n \n@@ -2086,7 +2079,8 @@ mod tests {\n \n     #[test]\n     fn test_from_box_trait() {\n-        use std::{fmt::Display, string::ToString};\n+        use std::fmt::Display;\n+        use std::string::ToString;\n \n         let b: Box<dyn Display> = box 123;\n         let r: Arc<dyn Display> = Arc::from(b);"}, {"sha": "2261dabe2779af4b35d35107db0db391023b879d", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -8,11 +8,9 @@ pub use if_arc::*;\n #[cfg(all(target_has_atomic = \"ptr\", target_has_atomic = \"cas\"))]\n mod if_arc {\n     use super::*;\n-    use core::{\n-        marker::PhantomData,\n-        mem,\n-        ptr::{self, NonNull},\n-    };\n+    use core::marker::PhantomData;\n+    use core::mem;\n+    use core::ptr::{self, NonNull};\n     use crate::sync::Arc;\n \n     /// A way of waking up a specific task."}, {"sha": "2759b1b1cac2769696f43075f2ab6e756318cab1", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,9 +1,7 @@\n-use std::{\n-    any::Any,\n-    sync::{Arc, Weak},\n-    cell::RefCell,\n-    cmp::PartialEq,\n-};\n+use std::any::Any;\n+use std::sync::{Arc, Weak};\n+use std::cell::RefCell;\n+use std::cmp::PartialEq;\n \n #[test]\n fn uninhabited() {"}, {"sha": "94ae43237d19c3309d732cecfc756f747888e6ea", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,9 +1,8 @@\n-use std::{\n-    cmp,\n-    collections::{BinaryHeap, binary_heap::{Drain, PeekMut}},\n-    panic::{self, AssertUnwindSafe},\n-    sync::atomic::{AtomicUsize, Ordering},\n-};\n+use std::cmp;\n+use std::collections::BinaryHeap;\n+use std::collections::binary_heap::{Drain, PeekMut};\n+use std::panic::{self, AssertUnwindSafe};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n use rand::{thread_rng, seq::SliceRandom};\n "}, {"sha": "aaf504073285dd187e1b9488306cdb5c059af7dd", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,9 +1,8 @@\n-use std::{\n-    collections::{BTreeMap, btree_map::Entry::{Occupied, Vacant}},\n-    ops::Bound::{self, Excluded, Included, Unbounded},\n-    rc::Rc,\n-    iter::FromIterator,\n-};\n+use std::collections::BTreeMap;\n+use std::collections::btree_map::Entry::{Occupied, Vacant};\n+use std::ops::Bound::{self, Excluded, Included, Unbounded};\n+use std::rc::Rc;\n+use std::iter::FromIterator;\n \n use super::DeterministicRng;\n "}, {"sha": "4f5168f1ce5723659d7a60857b3b621e30862145", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,7 +1,6 @@\n-use std::{\n-    collections::BTreeSet,\n-    iter::FromIterator\n-};\n+use std::collections::BTreeSet;\n+use std::iter::FromIterator;\n+\n use super::DeterministicRng;\n \n #[test]"}, {"sha": "a76fd87a1a92da5bd3b5a523bf49b86c742245d1", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -13,10 +13,8 @@\n extern crate core;\n extern crate rand;\n \n-use std::{\n-    hash::{Hash, Hasher},\n-    collections::hash_map::DefaultHasher,\n-};\n+use std::hash::{Hash, Hasher};\n+use std::collections::hash_map::DefaultHasher;\n \n mod arc;\n mod binary_heap;"}, {"sha": "18f82e804100823bec0e4e9c92dc55e7e444efd4", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,9 +1,7 @@\n-use std::{\n-    any::Any,\n-    rc::{Rc, Weak},\n-    cell::RefCell,\n-    cmp::PartialEq,\n-};\n+use std::any::Any;\n+use std::rc::{Rc, Weak};\n+use std::cell::RefCell;\n+use std::cmp::PartialEq;\n \n #[test]\n fn uninhabited() {"}, {"sha": "334466dfb25f5017ac52ce427a3510afffd3304e", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,18 +1,14 @@\n-use std::{\n-    cell::Cell,\n-    cmp::Ordering::{self, Equal, Greater, Less},\n-    mem,\n-    panic,\n-    rc::Rc,\n-    sync::atomic::{Ordering::Relaxed, AtomicUsize},\n-    thread,\n-};\n-\n-use rand::{\n-    Rng, RngCore, thread_rng,\n-    seq::SliceRandom,\n-    distributions::Standard,\n-};\n+use std::cell::Cell;\n+use std::cmp::Ordering::{self, Equal, Greater, Less};\n+use std::mem;\n+use std::panic;\n+use std::rc::Rc;\n+use std::sync::atomic::{Ordering::Relaxed, AtomicUsize};\n+use std::thread;\n+\n+use rand::{Rng, RngCore, thread_rng};\n+use rand::seq::SliceRandom;\n+use rand::distributions::Standard;\n \n fn square(n: usize) -> usize {\n     n * n"}, {"sha": "1bc1bd8d78c57eaf5ead7f6c6879d38572fb30d4", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,8 +1,6 @@\n-use std::{\n-    borrow::Cow,\n-    cmp::Ordering::{Equal, Greater, Less},\n-    str::from_utf8,\n-};\n+use std::borrow::Cow;\n+use std::cmp::Ordering::{Equal, Greater, Less};\n+use std::str::from_utf8;\n \n #[test]\n fn test_le() {\n@@ -1601,10 +1599,8 @@ fn test_repeat() {\n }\n \n mod pattern {\n-    use std::str::pattern::{\n-        Pattern, Searcher, ReverseSearcher,\n-        SearchStep::{self, Match, Reject, Done},\n-    };\n+    use std::str::pattern::{Pattern, Searcher, ReverseSearcher};\n+    use std::str::pattern::SearchStep::{self, Match, Reject, Done};\n \n     macro_rules! make_test {\n         ($name:ident, $p:expr, $h:expr, [$($e:expr,)*]) => {"}, {"sha": "e5ce51a36ee2286bc33aa1da49ca8fa05d981127", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,9 +1,7 @@\n-use std::{\n-    borrow::Cow,\n-    collections::CollectionAllocErr::*,\n-    mem::size_of,\n-    usize, isize,\n-};\n+use std::borrow::Cow;\n+use std::collections::CollectionAllocErr::*;\n+use std::mem::size_of;\n+use std::{usize, isize};\n \n pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n     fn into_cow(self) -> Cow<'a, B>;"}, {"sha": "89f2e0a046d91ae0a05e294784162b6c49384a53", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,10 +1,8 @@\n-use std::{\n-    borrow::Cow,\n-    mem::size_of,\n-    usize, isize,\n-    vec::{Drain, IntoIter},\n-    collections::CollectionAllocErr::*,\n-};\n+use std::borrow::Cow;\n+use std::mem::size_of;\n+use std::{usize, isize};\n+use std::vec::{Drain, IntoIter};\n+use std::collections::CollectionAllocErr::*;\n \n struct DropCounter<'a> {\n     count: &'a mut u32,"}, {"sha": "aa49bdb009086e9e7738dbfa977aec5e271ce21d", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -1,12 +1,8 @@\n-use std::{\n-    fmt::Debug,\n-    collections::{\n-        VecDeque, vec_deque::Drain,\n-        CollectionAllocErr::*,\n-    },\n-    mem::size_of,\n-    usize, isize,\n-};\n+use std::fmt::Debug;\n+use std::collections::{VecDeque, vec_deque::Drain};\n+use std::collections::CollectionAllocErr::*;\n+use std::mem::size_of;\n+use std::{usize, isize};\n \n use crate::hash;\n "}, {"sha": "57e10498b92dbf09061dddc7aea904e29a82694d", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396780cdaedf097dd6a8f3927749bcaf5b1238b/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=2396780cdaedf097dd6a8f3927749bcaf5b1238b", "patch": "@@ -56,29 +56,22 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::{\n-    cmp::{self, Ordering},\n-    fmt,\n-    hash::{self, Hash},\n-    intrinsics::{arith_offset, assume},\n-    iter::{FromIterator, FusedIterator, TrustedLen},\n-    marker::PhantomData,\n-    mem,\n-    ops::{\n-        self,\n-        Bound::{Excluded, Included, Unbounded},\n-        Index, IndexMut, RangeBounds,\n-    },\n-    ptr::{self, NonNull},\n-    slice::{self, SliceIndex},\n-};\n-\n-use crate::{\n-    borrow::{ToOwned, Cow},\n-    collections::CollectionAllocErr,\n-    boxed::Box,\n-    raw_vec::RawVec,\n-};\n+use core::cmp::{self, Ordering};\n+use core::fmt;\n+use core::hash::{self, Hash};\n+use core::intrinsics::{arith_offset, assume};\n+use core::iter::{FromIterator, FusedIterator, TrustedLen};\n+use core::marker::PhantomData;\n+use core::mem;\n+use core::ops::{self, Index, IndexMut, RangeBounds};\n+use core::ops::Bound::{Excluded, Included, Unbounded};\n+use core::ptr::{self, NonNull};\n+use core::slice::{self, SliceIndex};\n+\n+use crate::borrow::{ToOwned, Cow};\n+use crate::collections::CollectionAllocErr;\n+use crate::boxed::Box;\n+use crate::raw_vec::RawVec;\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///"}]}