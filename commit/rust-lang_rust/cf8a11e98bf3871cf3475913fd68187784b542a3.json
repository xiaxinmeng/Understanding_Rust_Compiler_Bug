{"sha": "cf8a11e98bf3871cf3475913fd68187784b542a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOGExMWU5OGJmMzg3MWNmMzQ3NTkxM2ZkNjgxODc3ODRiNTQyYTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:42:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:42:34Z"}, "message": "rollup merge of #20594: nikomatsakis/orphan-ordered\n\nConflicts:\n\tsrc/libsyntax/feature_gate.rs", "tree": {"sha": "656a2f3aacc54d4e645695a3f22df1e8d1249d13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/656a2f3aacc54d4e645695a3f22df1e8d1249d13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf8a11e98bf3871cf3475913fd68187784b542a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a11e98bf3871cf3475913fd68187784b542a3", "html_url": "https://github.com/rust-lang/rust/commit/cf8a11e98bf3871cf3475913fd68187784b542a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a11e98bf3871cf3475913fd68187784b542a3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ad232022eeb0f0399ce433de677133d9df3ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ad232022eeb0f0399ce433de677133d9df3ade", "html_url": "https://github.com/rust-lang/rust/commit/f3ad232022eeb0f0399ce433de677133d9df3ade"}, {"sha": "6e68fd09edc7ed37fd76f703247b5410cd338bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e68fd09edc7ed37fd76f703247b5410cd338bfe", "html_url": "https://github.com/rust-lang/rust/commit/6e68fd09edc7ed37fd76f703247b5410cd338bfe"}], "stats": {"total": 133, "additions": 80, "deletions": 53}, "files": [{"sha": "756a98512f1257e449cddd8f2a5feb19ac62813e", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -53,12 +53,14 @@ use option::Option;\n use self::Cow::*;\n \n /// A trait for borrowing data.\n+#[old_orphan_check]\n pub trait BorrowFrom<Sized? Owned> for Sized? {\n     /// Immutably borrow from an owned value.\n     fn borrow_from(owned: &Owned) -> &Self;\n }\n \n /// A trait for mutably borrowing data.\n+#[old_orphan_check]\n pub trait BorrowFromMut<Sized? Owned> for Sized? : BorrowFrom<Owned> {\n     /// Mutably borrow from an owned value.\n     fn borrow_from_mut(owned: &mut Owned) -> &mut Self;\n@@ -91,6 +93,7 @@ impl<'a, T, Sized? B> BorrowFrom<Cow<'a, T, B>> for B where B: ToOwned<T> {\n }\n \n /// Trait for moving into a `Cow`\n+#[old_orphan_check]\n pub trait IntoCow<'a, T, Sized? B> {\n     /// Moves `self` into `Cow`\n     fn into_cow(self) -> Cow<'a, T, B>;\n@@ -103,6 +106,7 @@ impl<'a, T, Sized? B> IntoCow<'a, T, B> for Cow<'a, T, B> where B: ToOwned<T> {\n }\n \n /// A generalization of Clone to borrowed data.\n+#[old_orphan_check]\n pub trait ToOwned<Owned> for Sized?: BorrowFrom<Owned> {\n     /// Create owned data from borrowed data, usually by copying.\n     fn to_owned(&self) -> Owned;"}, {"sha": "90ff174c2bdbdd54c3918b6cfbef611b45c14b8c", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -69,6 +69,7 @@ use option::Option::{self, Some, None};\n /// only if `a != b`.\n #[lang=\"eq\"]\n #[stable]\n+#[old_orphan_check]\n pub trait PartialEq<Sized? Rhs = Self> for Sized? {\n     /// This method tests for `self` and `other` values to be equal, and is used by `==`.\n     #[stable]"}, {"sha": "425e34cd9f0424b437b8eab9972519829e3a36b3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -666,6 +666,9 @@ impl LintPass for UnusedAttributes {\n             \"must_use\",\n             \"stable\",\n             \"unstable\",\n+\n+            // FIXME: #19470 this shouldn't be needed forever\n+            \"old_orphan_check\",\n         ];\n \n         static CRATE_ATTRS: &'static [&'static str] = &["}, {"sha": "42b6e54420b409ed9e014e793f8e7e93e597a2a5", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -14,7 +14,7 @@ use super::SelectionContext;\n use super::{Obligation, ObligationCause};\n use super::util;\n \n-use middle::subst::Subst;\n+use middle::subst::{Subst};\n use middle::ty::{self, Ty};\n use middle::infer::InferCtxt;\n use std::collections::HashSet;\n@@ -53,20 +53,20 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n }\n \n #[allow(missing_copy_implementations)]\n-pub enum OrphanCheckErr {\n+pub enum OrphanCheckErr<'tcx> {\n     NoLocalInputType,\n-    UncoveredTypeParameter(ty::ParamTy),\n+    UncoveredTy(Ty<'tcx>),\n }\n \n /// Checks the coherence orphan rules. `impl_def_id` should be the\n /// def-id of a trait impl. To pass, either the trait must be local, or else\n /// two conditions must be satisfied:\n ///\n-/// 1. At least one of the input types must involve a local type.\n-/// 2. All type parameters must be covered by a local type.\n-pub fn orphan_check(tcx: &ty::ctxt,\n-                    impl_def_id: ast::DefId)\n-                    -> Result<(), OrphanCheckErr>\n+/// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n+/// 2. Some local type must appear in `Self`.\n+pub fn orphan_check<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                          impl_def_id: ast::DefId)\n+                          -> Result<(), OrphanCheckErr<'tcx>>\n {\n     debug!(\"impl_is_local({})\", impl_def_id.repr(tcx));\n \n@@ -82,31 +82,21 @@ pub fn orphan_check(tcx: &ty::ctxt,\n         return Ok(());\n     }\n \n-    // Check condition 1: at least one type must be local.\n-    if !trait_ref.input_types().iter().any(|&t| ty_reaches_local(tcx, t)) {\n-        return Err(OrphanCheckErr::NoLocalInputType);\n+    // Otherwise, check that (1) all type parameters are covered.\n+    let covered_params = type_parameters_covered_by_ty(tcx, trait_ref.self_ty());\n+    let all_params = type_parameters_reachable_from_ty(trait_ref.self_ty());\n+    for &param in all_params.difference(&covered_params) {\n+        return Err(OrphanCheckErr::UncoveredTy(param));\n     }\n \n-    // Check condition 2: type parameters must be \"covered\" by a local type.\n-    let covered_params: HashSet<_> =\n-        trait_ref.input_types().iter()\n-                               .flat_map(|&t| type_parameters_covered_by_ty(tcx, t).into_iter())\n-                               .collect();\n-    let all_params: HashSet<_> =\n-        trait_ref.input_types().iter()\n-                               .flat_map(|&t| type_parameters_reachable_from_ty(t).into_iter())\n-                               .collect();\n-    for &param in all_params.difference(&covered_params) {\n-        return Err(OrphanCheckErr::UncoveredTypeParameter(param));\n+    // And (2) some local type appears.\n+    if !trait_ref.self_ty().walk().any(|t| ty_is_local_constructor(tcx, t)) {\n+        return Err(OrphanCheckErr::NoLocalInputType);\n     }\n \n     return Ok(());\n }\n \n-fn ty_reaches_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.walk().any(|t| ty_is_local_constructor(tcx, t))\n-}\n-\n fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     debug!(\"ty_is_local_constructor({})\", ty.repr(tcx));\n \n@@ -153,8 +143,8 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n fn type_parameters_covered_by_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                 ty: Ty<'tcx>)\n-                                 -> HashSet<ty::ParamTy>\n+                                       ty: Ty<'tcx>)\n+                                       -> HashSet<Ty<'tcx>>\n {\n     if ty_is_local_constructor(tcx, ty) {\n         type_parameters_reachable_from_ty(ty)\n@@ -164,14 +154,14 @@ fn type_parameters_covered_by_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n }\n \n /// All type parameters reachable from `ty`\n-fn type_parameters_reachable_from_ty<'tcx>(ty: Ty<'tcx>) -> HashSet<ty::ParamTy> {\n+fn type_parameters_reachable_from_ty<'tcx>(ty: Ty<'tcx>) -> HashSet<Ty<'tcx>> {\n     ty.walk()\n-        .filter_map(|t| {\n+        .filter(|&t| {\n             match t.sty {\n-                ty::ty_param(ref param_ty) => Some(param_ty.clone()),\n-                _ => None,\n+                // FIXME(#20590) straighten story about projection types\n+                ty::ty_projection(..) | ty::ty_param(..) => true,\n+                _ => false,\n             }\n         })\n         .collect()\n }\n-"}, {"sha": "b1dc033b567bbf659f58053bb30d68b553c33efe", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -22,7 +22,7 @@ use super::TupleArgumentsFlag;\n use super::write_call;\n \n use middle::infer;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::parse::token;"}, {"sha": "77d71e740d681f8c626bc173e1139b8e87cca468", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -72,20 +72,30 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n             ast::ItemImpl(_, _, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\", item.repr(self.tcx));\n+                let trait_def_id = ty::impl_trait_ref(self.tcx, def_id).unwrap().def_id;\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => { }\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n-                        span_err!(self.tcx.sess, item.span, E0117,\n-                                  \"cannot provide an extension implementation \\\n-                                   where both trait and type are not defined in this crate\");\n+                        if !ty::has_attr(self.tcx, trait_def_id, \"old_orphan_check\") {\n+                            let self_ty = ty::lookup_item_type(self.tcx, def_id).ty;\n+                            span_err!(\n+                                self.tcx.sess, item.span, E0117,\n+                                \"the type `{}` does not reference any \\\n+                                 types defined in this crate; \\\n+                                 only traits defined in the current crate can be \\\n+                                 implemented for arbitrary types\",\n+                                self_ty.user_string(self.tcx));\n+                        }\n                     }\n-                    Err(traits::OrphanCheckErr::UncoveredTypeParameter(param_ty)) => {\n-                        if !self.tcx.sess.features.borrow().old_orphan_check {\n+                    Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n+                        if !ty::has_attr(self.tcx, trait_def_id, \"old_orphan_check\") {\n                             self.tcx.sess.span_err(\n                                 item.span,\n-                                format!(\"type parameter `{}` must also appear as a type parameter \\\n-                                         of some type defined within this crate\",\n-                                        param_ty.user_string(self.tcx)).as_slice());\n+                                format!(\n+                                    \"type parameter `{}` is not constrained by any local type; \\\n+                                     only traits defined in the current crate can be implemented \\\n+                                     for a type parameter\",\n+                                    param_ty.user_string(self.tcx)).as_slice());\n                             self.tcx.sess.span_note(\n                                 item.span,\n                                 format!(\"for a limited time, you can add \\"}, {"sha": "4dc4e69aa558884ec77137b6c96204035a002ade", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -305,6 +305,26 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                        many unsafe patterns and may be \\\n                                        removed in the future\");\n                 }\n+\n+                if attr::contains_name(i.attrs[],\n+                                       \"old_orphan_check\") {\n+                    self.gate_feature(\n+                        \"old_orphan_check\",\n+                        i.span,\n+                        \"the new orphan check rules will eventually be strictly enforced\");\n+                }\n+\n+                for item in items.iter() {\n+                    match *item {\n+                        ast::MethodImplItem(_) => {}\n+                        ast::TypeImplItem(ref typedef) => {\n+                            self.gate_feature(\"associated_types\",\n+                                              typedef.span,\n+                                              \"associated types are \\\n+                                               experimental\")\n+                        }\n+                    }\n+                }\n             }\n \n             _ => {}"}, {"sha": "d88b8751ea7b02c495329b51a5a569a2924572ae", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -14,6 +14,6 @@ extern crate \"coherence-lib\" as lib;\n use lib::Remote;\n \n impl<T> Remote for int { }\n-//~^ ERROR cannot provide an extension implementation\n+//~^ ERROR E0117\n \n fn main() { }"}, {"sha": "b4917d0c29f37bc22d71881785b0774fafd99f53", "filename": "src/test/compile-fail/coherence-bigint-int.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for int { }\n+impl Remote1<BigInt> for int { } //~ ERROR E0117\n \n fn main() { }", "previous_filename": "src/test/run-pass/coherence-bigint-int.rs"}, {"sha": "b8e48436a4143d7bfbffcec87986c1de57de216d", "filename": "src/test/compile-fail/coherence-bigint-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -16,6 +16,6 @@ use lib::Remote1;\n pub struct BigInt;\n \n impl<T> Remote1<BigInt> for T { }\n-//~^ ERROR type parameter `T` must also appear\n+//~^ ERROR type parameter `T` is not constrained\n \n fn main() { }"}, {"sha": "de4e656110f2947d9532c7d905ddf2ed7db1f896", "filename": "src/test/compile-fail/coherence-bigint-vecint.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for Vec<int> { }\n+impl Remote1<BigInt> for Vec<int> { } //~ ERROR E0117\n \n fn main() { }", "previous_filename": "src/test/run-pass/coherence-bigint-vecint.rs"}, {"sha": "8bdd5c58f31990d355fcacc950cad2b875045e87", "filename": "src/test/compile-fail/coherence-cross-crate-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-cross-crate-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-cross-crate-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cross-crate-conflict.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -16,7 +16,7 @@ extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n impl<A> Foo for A {\n-    //~^ ERROR E0117\n+    //~^ ERROR type parameter `A` is not constrained\n     //~^^ ERROR E0119\n }\n "}, {"sha": "917438722de4e9c01767325dc030e10bae7fee0d", "filename": "src/test/compile-fail/coherence-lone-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -13,6 +13,6 @@\n extern crate \"coherence-lib\" as lib;\n use lib::Remote;\n \n-impl<T> Remote for T { } //~ ERROR E0117\n+impl<T> Remote for T { } //~ ERROR type parameter `T` is not constrained\n \n fn main() { }"}, {"sha": "30a382c143dab7cbe7b1242585c6da8cdb5943bc", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -18,7 +18,7 @@ struct TheType;\n \n impl TheTrait<uint> for int { } //~ ERROR E0117\n \n-impl TheTrait<TheType> for int { }\n+impl TheTrait<TheType> for int { } //~ ERROR E0117\n \n impl TheTrait<int> for TheType { }\n "}, {"sha": "9354e66af0d81f5c4fc5dd95e1f169bf106505f9", "filename": "src/test/compile-fail/coherence-overlapping-pairs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -16,6 +16,6 @@ use lib::Remote;\n struct Foo;\n \n impl<T> Remote for lib::Pair<T,Foo> { }\n-//~^ ERROR type parameter `T` must also appear\n+//~^ ERROR type parameter `T` is not constrained\n \n fn main() { }"}, {"sha": "92a07b35852920b8dbec7e6284adcd5bf60476c8", "filename": "src/test/compile-fail/coherence-pair-covered-uncovered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -16,6 +16,6 @@ use lib::{Remote, Pair};\n struct Local<T>(T);\n \n impl<T,U> Remote for Pair<T,Local<U>> { }\n-//~^ ERROR type parameter `T` must also appear\n+//~^ ERROR type parameter `T` is not constrained\n \n fn main() { }"}, {"sha": "238700254b8fd020096fd6121143f1acd5e8a0d0", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -10,7 +10,7 @@\n \n impl Drop for int {\n     //~^ ERROR the Drop trait may only be implemented on structures\n-    //~^^ ERROR cannot provide an extension implementation\n+    //~^^ ERROR E0117\n     fn drop(&mut self) {\n         println!(\"kaboom\");\n     }"}, {"sha": "6dc2ff4588b6788a27b7cdfdbdc4e74c6b449689", "filename": "src/test/run-pass/coherence-iterator-vec-any-elem.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a11e98bf3871cf3475913fd68187784b542a3/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs?ref=cf8a11e98bf3871cf3475913fd68187784b542a3", "patch": "@@ -16,6 +16,5 @@ use lib::Remote1;\n struct Foo<T>(T);\n \n impl<T,U> Remote1<U> for Foo<T> { }\n-//~^ ERROR type parameter `U` must also appear\n \n fn main() { }", "previous_filename": "src/test/compile-fail/coherence-iterator-vec-any-elem.rs"}]}