{"sha": "adba132411824fdf45b8ada54ccdb7c4822b0355", "node_id": "C_kwDOAAsO6NoAKGFkYmExMzI0MTE4MjRmZGY0NWI4YWRhNTRjY2RiN2M0ODIyYjAzNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-27T21:02:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-27T21:02:15Z"}, "message": "Auto merge of #8170 - rust-lang:numbered-fields, r=xFrednet\n\nnew lint: `init-numbered-fields`\n\nThis fixes #7985.\n\nr? `@xFrednet`\n\n---\n\nchangelog: new lint: [`init_numbered_fields`]", "tree": {"sha": "5a7e023a36c141e4be1f5450f07c7eab0c180f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7e023a36c141e4be1f5450f07c7eab0c180f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adba132411824fdf45b8ada54ccdb7c4822b0355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adba132411824fdf45b8ada54ccdb7c4822b0355", "html_url": "https://github.com/rust-lang/rust/commit/adba132411824fdf45b8ada54ccdb7c4822b0355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adba132411824fdf45b8ada54ccdb7c4822b0355/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44719b5834b7215e4c119538b7d54f67d44b1068", "url": "https://api.github.com/repos/rust-lang/rust/commits/44719b5834b7215e4c119538b7d54f67d44b1068", "html_url": "https://github.com/rust-lang/rust/commit/44719b5834b7215e4c119538b7d54f67d44b1068"}, {"sha": "3ebd2bc2e4fac8f56e1399872ea449594a280daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebd2bc2e4fac8f56e1399872ea449594a280daa", "html_url": "https://github.com/rust-lang/rust/commit/3ebd2bc2e4fac8f56e1399872ea449594a280daa"}], "stats": {"total": 205, "additions": 198, "deletions": 7}, "files": [{"sha": "27bac4718b6c3b0c6705c7fcfb0578fd77dd372e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -3026,6 +3026,7 @@ Released 2018-09-13\n [`infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#infinite_iter\n [`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n [`inherent_to_string_shadow_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\n+[`init_numbered_fields`]: https://rust-lang.github.io/rust-clippy/master/index.html#init_numbered_fields\n [`inline_always`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_always\n [`inline_asm_x86_att_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_att_syntax\n [`inline_asm_x86_intel_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_intel_syntax"}, {"sha": "5fe6725b581dc341f4c5e89cfb603c3b64ff528c", "filename": "clippy_lints/src/init_numbered_fields.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Finit_numbered_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Finit_numbered_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finit_numbered_fields.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -0,0 +1,80 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use std::borrow::Cow;\n+use std::cmp::Reverse;\n+use std::collections::BinaryHeap;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for tuple structs initialized with field syntax.\n+    /// It will however not lint if a base initializer is present.\n+    /// The lint will also ignore code in macros.\n+    ///\n+    /// ### Why is this bad?\n+    /// This may be confusing to the uninitiated and adds no\n+    /// benefit as opposed to tuple initializers\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct TupleStruct(u8, u16);\n+    ///\n+    /// let _ = TupleStruct {\n+    ///     0: 1,\n+    ///     1: 23,\n+    /// };\n+    ///\n+    /// // should be written as\n+    /// let base = TupleStruct(1, 23);\n+    ///\n+    /// // This is OK however\n+    /// let _ = TupleStruct { 0: 42, ..base };\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub INIT_NUMBERED_FIELDS,\n+    style,\n+    \"numbered fields in tuple struct initializer\"\n+}\n+\n+declare_lint_pass!(NumberedFields => [INIT_NUMBERED_FIELDS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NumberedFields {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let ExprKind::Struct(path, fields, None) = e.kind {\n+            if !fields.is_empty()\n+                && !in_macro(e.span)\n+                && fields\n+                    .iter()\n+                    .all(|f| f.ident.as_str().as_bytes().iter().all(u8::is_ascii_digit))\n+            {\n+                let expr_spans = fields\n+                    .iter()\n+                    .map(|f| (Reverse(f.ident.as_str().parse::<usize>().unwrap()), f.expr.span))\n+                    .collect::<BinaryHeap<_>>();\n+                let mut appl = Applicability::MachineApplicable;\n+                let snippet = format!(\n+                    \"{}({})\",\n+                    snippet_with_applicability(cx, path.span(), \"..\", &mut appl),\n+                    expr_spans\n+                        .into_iter_sorted()\n+                        .map(|(_, span)| snippet_with_applicability(cx, span, \"..\", &mut appl))\n+                        .intersperse(Cow::Borrowed(\", \"))\n+                        .collect::<String>()\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    INIT_NUMBERED_FIELDS,\n+                    e.span,\n+                    \"used a field initializer for a tuple struct\",\n+                    \"try this instead\",\n+                    snippet,\n+                    appl,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "944411087e9511dd9dab1e90f3f90a5031b30b11", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -81,6 +81,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+    LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),"}, {"sha": "002122793f3b6b4c2a26965be3bbbd1239f2d1cb", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -178,6 +178,7 @@ store.register_lints(&[\n     inherent_impl::MULTIPLE_INHERENT_IMPL,\n     inherent_to_string::INHERENT_TO_STRING,\n     inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n+    init_numbered_fields::INIT_NUMBERED_FIELDS,\n     inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n     int_plus_one::INT_PLUS_ONE,\n     integer_division::INTEGER_DIVISION,"}, {"sha": "1a0b869d40adb5f2fb8e4c9ef89ea812533f0569", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -29,6 +29,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n+    LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),\n     LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n     LintId::of(len_zero::LEN_ZERO),"}, {"sha": "d4687a1e2879749d7253fcf0d2bc90ece839f7ad", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -1,13 +1,15 @@\n // error-pattern:cargo-clippy\n \n+#![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n+#![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_intersperse)]\n+#![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n-#![feature(control_flow_enum)]\n-#![feature(let_else)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]\n@@ -242,6 +244,7 @@ mod indexing_slicing;\n mod infinite_iter;\n mod inherent_impl;\n mod inherent_to_string;\n+mod init_numbered_fields;\n mod inline_fn_without_body;\n mod int_plus_one;\n mod integer_division;\n@@ -854,6 +857,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n     store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n+    store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "bbc14fc535dac1c2ba2650899b33d66ef217d183", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n use clippy_utils::source::snippet;\n use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n@@ -8,7 +9,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::hygiene::ExpnKind;\n use rustc_span::{edition::Edition, sym, Span};\n \n declare_clippy_lint! {\n@@ -214,7 +214,3 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n     }\n }\n-\n-fn in_macro(span: Span) -> bool {\n-    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n-}"}, {"sha": "a04db7d570e4af0736255a0481a4d95001af1bf3", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -142,6 +142,13 @@ macro_rules! extract_msrv_attr {\n     };\n }\n \n+/// Returns `true` if the span comes from a macro expansion, no matter if from a\n+/// macro by example or from a procedural macro\n+#[must_use]\n+pub fn in_macro(span: Span) -> bool {\n+    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n+}\n+\n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n #[must_use]"}, {"sha": "1da97e9687988aa856051a79a1a7b868b6b0d7b6", "filename": "tests/ui/numbered_fields.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/tests%2Fui%2Fnumbered_fields.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/tests%2Fui%2Fnumbered_fields.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.fixed?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -0,0 +1,33 @@\n+//run-rustfix\n+#![warn(clippy::init_numbered_fields)]\n+\n+#[derive(Default)]\n+struct TupleStruct(u32, u32, u8);\n+\n+// This shouldn't lint because it's in a macro\n+macro_rules! tuple_struct_init {\n+    () => {\n+        TupleStruct { 0: 0, 1: 1, 2: 2 }\n+    };\n+}\n+\n+fn main() {\n+    let tuple_struct = TupleStruct::default();\n+\n+    // This should lint\n+    let _ = TupleStruct(1u32, 42, 23u8);\n+\n+    // This should also lint and order the fields correctly\n+    let _ = TupleStruct(1u32, 3u32, 2u8);\n+\n+    // Ok because of default initializer\n+    let _ = TupleStruct { 0: 42, ..tuple_struct };\n+\n+    let _ = TupleStruct {\n+        1: 23,\n+        ..TupleStruct::default()\n+    };\n+\n+    // Ok because it's in macro\n+    let _ = tuple_struct_init!();\n+}"}, {"sha": "08ec405a5606e2ae8772754dbcf35697ad5b4cdb", "filename": "tests/ui/numbered_fields.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/tests%2Fui%2Fnumbered_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/tests%2Fui%2Fnumbered_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.rs?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -0,0 +1,41 @@\n+//run-rustfix\n+#![warn(clippy::init_numbered_fields)]\n+\n+#[derive(Default)]\n+struct TupleStruct(u32, u32, u8);\n+\n+// This shouldn't lint because it's in a macro\n+macro_rules! tuple_struct_init {\n+    () => {\n+        TupleStruct { 0: 0, 1: 1, 2: 2 }\n+    };\n+}\n+\n+fn main() {\n+    let tuple_struct = TupleStruct::default();\n+\n+    // This should lint\n+    let _ = TupleStruct {\n+        0: 1u32,\n+        1: 42,\n+        2: 23u8,\n+    };\n+\n+    // This should also lint and order the fields correctly\n+    let _ = TupleStruct {\n+        0: 1u32,\n+        2: 2u8,\n+        1: 3u32,\n+    };\n+\n+    // Ok because of default initializer\n+    let _ = TupleStruct { 0: 42, ..tuple_struct };\n+\n+    let _ = TupleStruct {\n+        1: 23,\n+        ..TupleStruct::default()\n+    };\n+\n+    // Ok because it's in macro\n+    let _ = tuple_struct_init!();\n+}"}, {"sha": "01691c8b141e8a3ad7ac998739f5eb08b4f0a7c4", "filename": "tests/ui/numbered_fields.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/adba132411824fdf45b8ada54ccdb7c4822b0355/tests%2Fui%2Fnumbered_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adba132411824fdf45b8ada54ccdb7c4822b0355/tests%2Fui%2Fnumbered_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbered_fields.stderr?ref=adba132411824fdf45b8ada54ccdb7c4822b0355", "patch": "@@ -0,0 +1,26 @@\n+error: used a field initializer for a tuple struct\n+  --> $DIR/numbered_fields.rs:18:13\n+   |\n+LL |       let _ = TupleStruct {\n+   |  _____________^\n+LL | |         0: 1u32,\n+LL | |         1: 42,\n+LL | |         2: 23u8,\n+LL | |     };\n+   | |_____^ help: try this instead: `TupleStruct(1u32, 42, 23u8)`\n+   |\n+   = note: `-D clippy::init-numbered-fields` implied by `-D warnings`\n+\n+error: used a field initializer for a tuple struct\n+  --> $DIR/numbered_fields.rs:25:13\n+   |\n+LL |       let _ = TupleStruct {\n+   |  _____________^\n+LL | |         0: 1u32,\n+LL | |         2: 2u8,\n+LL | |         1: 3u32,\n+LL | |     };\n+   | |_____^ help: try this instead: `TupleStruct(1u32, 3u32, 2u8)`\n+\n+error: aborting due to 2 previous errors\n+"}]}