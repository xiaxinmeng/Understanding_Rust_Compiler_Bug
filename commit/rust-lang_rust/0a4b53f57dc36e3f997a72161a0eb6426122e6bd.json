{"sha": "0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNGI1M2Y1N2RjMzZlM2Y5OTdhNzIxNjFhMGViNjQyNjEyMmU2YmQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-07-09T13:21:58Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-07-09T13:23:27Z"}, "message": "Use #[track_caller] in const panic diagnostics.\n\nIt was already used for the message. This also uses it for the spans\nused for the error and backtrace.", "tree": {"sha": "e59acc2732d2b2d90f46dd5eb52d6f5242ebf7cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59acc2732d2b2d90f46dd5eb52d6f5242ebf7cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "html_url": "https://github.com/rust-lang/rust/commit/0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/95fb1315217976ff4c268bb03c9b4132f0dfa9fd", "html_url": "https://github.com/rust-lang/rust/commit/95fb1315217976ff4c268bb03c9b4132f0dfa9fd"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "648a7abfdc7b12c36d3e483fa8ab1d2e6d935848", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "patch": "@@ -398,7 +398,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn cur_span(&self) -> Span {\n-        self.stack().last().map_or(self.tcx.span, |f| f.current_span())\n+        self.stack()\n+            .iter()\n+            .rev()\n+            .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))\n+            .map_or(self.tcx.span, |f| f.current_span())\n     }\n \n     #[inline(always)]\n@@ -927,7 +931,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     #[must_use]\n     pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n-        for frame in self.stack().iter().rev() {\n+        for frame in self\n+            .stack()\n+            .iter()\n+            .rev()\n+            .skip_while(|frame| frame.instance.def.requires_caller_location(*self.tcx))\n+        {\n             let lint_root = frame.current_source_info().and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),"}, {"sha": "7c2532673c835796354054a8daf9c6ea6cea4d5a", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs?ref=0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "patch": "@@ -0,0 +1,23 @@\n+#![feature(const_panic)]\n+#![allow(non_fmt_panics)]\n+#![crate_type = \"lib\"]\n+\n+#[track_caller]\n+const fn a() -> u32 {\n+    panic!(\"hey\")\n+}\n+\n+#[track_caller]\n+const fn b() -> u32 {\n+    a()\n+}\n+\n+const fn c() -> u32 {\n+    b()\n+    //~^ ERROR evaluation of constant value failed\n+    //~| NOTE the evaluated program panicked\n+    //~| NOTE inside\n+}\n+\n+const X: u32 = c();\n+//~^ NOTE inside"}, {"sha": "9a458db6ea24d48291aa0c090a9b2d2abee275c0", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr?ref=0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_track_caller.rs:16:5\n+   |\n+LL |     b()\n+   |     ^^^\n+   |     |\n+   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:16:5\n+   |     inside `c` at $DIR/const_panic_track_caller.rs:16:5\n+...\n+LL | const X: u32 = c();\n+   |                --- inside `X` at $DIR/const_panic_track_caller.rs:22:16\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "729ae535ceff69a67b83477e2c0cf441ada945e2", "filename": "src/test/ui/consts/const-unwrap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.rs?ref=0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "patch": "@@ -4,9 +4,8 @@\n \n const FOO: i32 = Some(42i32).unwrap();\n \n-// This causes an error, but it is attributed to the `panic` *inside* `Option::unwrap` (maybe due\n-// to `track_caller`?). A note points to the originating `const`.\n-const BAR: i32 = Option::<i32>::None.unwrap(); //~ NOTE\n+const BAR: i32 = Option::<i32>::None.unwrap();\n+//~^ERROR: evaluation of constant value failed\n \n fn main() {\n     println!(\"{}\", FOO);"}, {"sha": "d2cbe4550f4bbd73d87de07cfb47297b6d80001c", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a4b53f57dc36e3f997a72161a0eb6426122e6bd/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=0a4b53f57dc36e3f997a72161a0eb6426122e6bd", "patch": "@@ -1,18 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:9:38\n-   |                     inside `Option::<i32>::unwrap` at $SRC_DIR/core/src/panic.rs:LL:COL\n-   | \n-  ::: $DIR/const-unwrap.rs:9:18\n+  --> $DIR/const-unwrap.rs:7:18\n    |\n LL | const BAR: i32 = Option::<i32>::None.unwrap();\n-   |                  ---------------------------- inside `BAR` at $DIR/const-unwrap.rs:9:18\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:7:38\n \n error: aborting due to previous error\n "}]}