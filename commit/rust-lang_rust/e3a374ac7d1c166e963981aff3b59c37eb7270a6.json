{"sha": "e3a374ac7d1c166e963981aff3b59c37eb7270a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYTM3NGFjN2QxYzE2NmU5NjM5ODFhZmYzYjU5YzM3ZWI3MjcwYTY=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-02-27T18:02:54Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-03-05T20:43:44Z"}, "message": "Fix alexcrichton's comments", "tree": {"sha": "b999613b3c01caabb969da9efa7aa6e8d7db1a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b999613b3c01caabb969da9efa7aa6e8d7db1a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a374ac7d1c166e963981aff3b59c37eb7270a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a374ac7d1c166e963981aff3b59c37eb7270a6", "html_url": "https://github.com/rust-lang/rust/commit/e3a374ac7d1c166e963981aff3b59c37eb7270a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a374ac7d1c166e963981aff3b59c37eb7270a6/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50876d1ca47ab34473b70c7364b1bfb835f5c25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/50876d1ca47ab34473b70c7364b1bfb835f5c25a", "html_url": "https://github.com/rust-lang/rust/commit/50876d1ca47ab34473b70c7364b1bfb835f5c25a"}], "stats": {"total": 172, "additions": 77, "deletions": 95}, "files": [{"sha": "97cb8ed45b91fdb728219b84ac61cc95e2b6a7a0", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 77, "deletions": 95, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/e3a374ac7d1c166e963981aff3b59c37eb7270a6/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a374ac7d1c166e963981aff3b59c37eb7270a6/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=e3a374ac7d1c166e963981aff3b59c37eb7270a6", "patch": "@@ -10,7 +10,7 @@\n \n //! Check license of third-party deps by inspecting src/vendor\n \n-use std::collections::HashSet;\n+use std::collections::{BTreeSet, HashSet};\n use std::fs::File;\n use std::io::Read;\n use std::path::Path;\n@@ -49,90 +49,72 @@ static EXCEPTIONS: &'static [&'static str] = &[\n ];\n \n /// Which crates to check against the whitelist?\n-static WHITELIST_CRATES: &'static [Crate] =\n-    &[Crate(\"rustc\", \"0.0.0\"), Crate(\"rustc_trans\", \"0.0.0\")];\n+static WHITELIST_CRATES: &'static [Crate] = &[Crate(\"rustc\"), Crate(\"rustc_trans\")];\n \n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n static WHITELIST: &'static [Crate] = &[\n-//    Crate(\"ar\", \"0.3.1\"),\n-//    Crate(\"arena\", \"0.0.0\"),\n-//    Crate(\"backtrace\", \"0.3.5\"),\n-//    Crate(\"backtrace-sys\", \"0.1.16\"),\n-//    Crate(\"bitflags\", \"1.0.1\"),\n-//    Crate(\"build_helper\", \"0.1.0\"),\n-//    Crate(\"byteorder\", \"1.2.1\"),\n-//    Crate(\"cc\", \"1.0.4\"),\n-//    Crate(\"cfg-if\", \"0.1.2\"),\n-//    Crate(\"cmake\", \"0.1.29\"),\n-//    Crate(\"filetime\", \"0.1.15\"),\n-//    Crate(\"flate2\", \"1.0.1\"),\n-//    Crate(\"fmt_macros\", \"0.0.0\"),\n-//    Crate(\"fuchsia-zircon\", \"0.3.3\"),\n-//    Crate(\"fuchsia-zircon-sys\", \"0.3.3\"),\n-//    Crate(\"graphviz\", \"0.0.0\"),\n-//    Crate(\"jobserver\", \"0.1.9\"),\n-//    Crate(\"kernel32-sys\", \"0.2.2\"),\n-//    Crate(\"lazy_static\", \"0.2.11\"),\n-//    Crate(\"libc\", \"0.2.36\"),\n-//    Crate(\"log\", \"0.4.1\"),\n-//    Crate(\"log_settings\", \"0.1.1\"),\n-//    Crate(\"miniz-sys\", \"0.1.10\"),\n-//    Crate(\"num_cpus\", \"1.8.0\"),\n-//    Crate(\"owning_ref\", \"0.3.3\"),\n-//    Crate(\"parking_lot\", \"0.5.3\"),\n-//    Crate(\"parking_lot_core\", \"0.2.9\"),\n-//    Crate(\"rand\", \"0.3.20\"),\n-//    Crate(\"redox_syscall\", \"0.1.37\"),\n-//    Crate(\"rustc\", \"0.0.0\"),\n-//    Crate(\"rustc-demangle\", \"0.1.5\"),\n-//    Crate(\"rustc_allocator\", \"0.0.0\"),\n-//    Crate(\"rustc_apfloat\", \"0.0.0\"),\n-//    Crate(\"rustc_back\", \"0.0.0\"),\n-//    Crate(\"rustc_binaryen\", \"0.0.0\"),\n-//    Crate(\"rustc_const_eval\", \"0.0.0\"),\n-//    Crate(\"rustc_const_math\", \"0.0.0\"),\n-//    Crate(\"rustc_cratesio_shim\", \"0.0.0\"),\n-//    Crate(\"rustc_data_structures\", \"0.0.0\"),\n-//    Crate(\"rustc_errors\", \"0.0.0\"),\n-//    Crate(\"rustc_incremental\", \"0.0.0\"),\n-//    Crate(\"rustc_llvm\", \"0.0.0\"),\n-//    Crate(\"rustc_mir\", \"0.0.0\"),\n-//    Crate(\"rustc_platform_intrinsics\", \"0.0.0\"),\n-//    Crate(\"rustc_trans\", \"0.0.0\"),\n-//    Crate(\"rustc_trans_utils\", \"0.0.0\"),\n-//    Crate(\"serialize\", \"0.0.0\"),\n-//    Crate(\"smallvec\", \"0.6.0\"),\n-//    Crate(\"stable_deref_trait\", \"1.0.0\"),\n-//    Crate(\"syntax\", \"0.0.0\"),\n-//    Crate(\"syntax_pos\", \"0.0.0\"),\n-//    Crate(\"tempdir\", \"0.3.5\"),\n-//    Crate(\"unicode-width\", \"0.1.4\"),\n-//    Crate(\"winapi\", \"0.2.8\"),\n-//    Crate(\"winapi\", \"0.3.4\"),\n-//    Crate(\"winapi-build\", \"0.1.1\"),\n-//    Crate(\"winapi-i686-pc-windows-gnu\", \"0.4.0\"),\n-//    Crate(\"winapi-x86_64-pc-windows-gnu\", \"0.4.0\"),\n+//    Crate(\"ar \"),\n+//    Crate(\"arena \"),\n+//    Crate(\"backtrace \"),\n+//    Crate(\"backtrace-sys \"),\n+//    Crate(\"bitflags \"),\n+//    Crate(\"build_helper \"),\n+//    Crate(\"byteorder \"),\n+//    Crate(\"cc \"),\n+//    Crate(\"cfg-if \"),\n+//    Crate(\"cmake \"),\n+//    Crate(\"filetime \"),\n+//    Crate(\"flate2 \"),\n+//    Crate(\"fmt_macros \"),\n+//    Crate(\"fuchsia-zircon \"),\n+//    Crate(\"fuchsia-zircon-sys \"),\n+//    Crate(\"graphviz \"),\n+//    Crate(\"jobserver \"),\n+//    Crate(\"kernel32-sys \"),\n+//    Crate(\"lazy_static \"),\n+//    Crate(\"libc \"),\n+//    Crate(\"log \"),\n+//    Crate(\"log_settings \"),\n+//    Crate(\"miniz-sys \"),\n+//    Crate(\"num_cpus \"),\n+//    Crate(\"owning_ref \"),\n+//    Crate(\"parking_lot \"),\n+//    Crate(\"parking_lot_core \"),\n+//    Crate(\"rand \"),\n+//    Crate(\"redox_syscall \"),\n+//    Crate(\"rustc \"),\n+//    Crate(\"rustc-demangle \"),\n+//    Crate(\"rustc_allocator \"),\n+//    Crate(\"rustc_apfloat \"),\n+//    Crate(\"rustc_back \"),\n+//    Crate(\"rustc_binaryen \"),\n+//    Crate(\"rustc_const_eval \"),\n+//    Crate(\"rustc_const_math \"),\n+//    Crate(\"rustc_cratesio_shim \"),\n+//    Crate(\"rustc_data_structures \"),\n+//    Crate(\"rustc_errors \"),\n+//    Crate(\"rustc_incremental \"),\n+//    Crate(\"rustc_llvm \"),\n+//    Crate(\"rustc_mir \"),\n+//    Crate(\"rustc_platform_intrinsics \"),\n+//    Crate(\"rustc_trans \"),\n+//    Crate(\"rustc_trans_utils \"),\n+//    Crate(\"serialize \"),\n+//    Crate(\"smallvec \"),\n+//    Crate(\"stable_deref_trait \"),\n+//    Crate(\"syntax \"),\n+//    Crate(\"syntax_pos \"),\n+//    Crate(\"tempdir \"),\n+//    Crate(\"unicode-width \"),\n+//    Crate(\"winapi \"),\n+//    Crate(\"winapi-build\"),\n ];\n \n // Some types for Serde to deserialize the output of `cargo metadata` to...\n \n #[derive(Deserialize)]\n struct Output {\n     resolve: Resolve,\n-\n-    // Not used, but needed to not confuse serde :P\n-    #[allow(dead_code)] packages: Vec<Package>,\n-}\n-\n-// Not used, but needed to not confuse serde :P\n-#[allow(dead_code)]\n-#[derive(Deserialize)]\n-struct Package {\n-    name: String,\n-    version: String,\n-    id: String,\n-    source: Option<String>,\n-    manifest_path: String,\n }\n \n #[derive(Deserialize)]\n@@ -148,19 +130,18 @@ struct ResolveNode {\n \n /// A unique identifier for a crate\n #[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq, Debug, Hash)]\n-struct Crate<'a>(&'a str, &'a str); // (name, version)\n+struct Crate<'a>(&'a str); // (name,)\n \n impl<'a> Crate<'a> {\n     pub fn from_str(s: &'a str) -> Self {\n         let mut parts = s.split(\" \");\n         let name = parts.next().unwrap();\n-        let version = parts.next().unwrap();\n \n-        Crate(name, version)\n+        Crate(name)\n     }\n \n     pub fn id_str(&self) -> String {\n-        format!(\"{} {}\", self.0, self.1)\n+        format!(\"{} \", self.0)\n     }\n }\n \n@@ -204,20 +185,17 @@ pub fn check_whitelist(path: &Path, cargo: &Path, bad: &mut bool) {\n     let whitelist: HashSet<_> = WHITELIST.iter().cloned().collect();\n \n     // Check dependencies\n-    let mut unapproved = Vec::new();\n+    let mut visited = BTreeSet::new();\n+    let mut unapproved = BTreeSet::new();\n     for &krate in WHITELIST_CRATES.iter() {\n-        let mut bad = check_crate_whitelist(&whitelist, &resolve, krate);\n+        let mut bad = check_crate_whitelist(&whitelist, &resolve, &mut visited, krate);\n         unapproved.append(&mut bad);\n     }\n \n-    // For ease of reading\n-    unapproved.sort_unstable();\n-    unapproved.dedup();\n-\n     if unapproved.len() > 0 {\n         println!(\"Dependencies not on the whitelist:\");\n         for dep in unapproved {\n-            println!(\"* {} {}\", dep.0, dep.1); // name version\n+            println!(\"* {}\", dep.id_str());\n         }\n         *bad = true;\n     }\n@@ -282,17 +260,25 @@ fn get_deps(path: &Path, cargo: &Path) -> Resolve {\n \n /// Checks the dependencies of the given crate from the given cargo metadata to see if they are on\n /// the whitelist. Returns a list of illegal dependencies.\n-fn check_crate_whitelist<'a>(\n+fn check_crate_whitelist<'a, 'b>(\n     whitelist: &'a HashSet<Crate>,\n     resolve: &'a Resolve,\n+    visited: &'b mut BTreeSet<Crate<'a>>,\n     krate: Crate<'a>,\n-) -> Vec<Crate<'a>> {\n+) -> BTreeSet<Crate<'a>> {\n     // Will contain bad deps\n-    let mut unapproved = Vec::new();\n+    let mut unapproved = BTreeSet::new();\n+\n+    // Check if we have already visited this crate\n+    if visited.contains(&krate) {\n+        return unapproved;\n+    }\n+\n+    visited.insert(krate);\n \n     // If this dependency is not on the WHITELIST, add to bad set\n     if !whitelist.contains(&krate) {\n-        unapproved.push(krate);\n+        unapproved.insert(krate);\n     }\n \n     // Do a DFS in the crate graph (it's a DAG, so we know we have no cycles!)\n@@ -304,14 +290,10 @@ fn check_crate_whitelist<'a>(\n \n     for dep in to_check.dependencies.iter() {\n         let krate = Crate::from_str(dep);\n-        let mut bad = check_crate_whitelist(whitelist, resolve, krate);\n+        let mut bad = check_crate_whitelist(whitelist, resolve, visited, krate);\n \n         unapproved.append(&mut bad);\n     }\n \n-    // Remove duplicates\n-    unapproved.sort_unstable();\n-    unapproved.dedup();\n-\n     unapproved\n }"}]}