{"sha": "ec7f80036d7191529ba4b1d2af29fed1c5ff5d48", "node_id": "C_kwDOAAsO6NoAKGVjN2Y4MDAzNmQ3MTkxNTI5YmE0YjFkMmFmMjlmZWQxYzVmZjVkNDg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-09T17:03:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T12:47:52Z"}, "message": "Directly encode Constness in metadata.", "tree": {"sha": "02afbdf50f83f46d780bf56a49643ae4c7b19462", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02afbdf50f83f46d780bf56a49643ae4c7b19462"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48", "html_url": "https://github.com/rust-lang/rust/commit/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81bac88e9344e80594207f0bfc38c57b287f6bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/81bac88e9344e80594207f0bfc38c57b287f6bc6", "html_url": "https://github.com/rust-lang/rust/commit/81bac88e9344e80594207f0bfc38c57b287f6bc6"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "41bd63d68a5fbdb10b8e33ca9dccdeacd1d699de", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ec7f80036d7191529ba4b1d2af29fed1c5ff5d48", "patch": "@@ -1048,7 +1048,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n+        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n         record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -1078,7 +1078,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n+        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1157,7 +1157,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n-        record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n+        self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data)));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n@@ -1208,7 +1208,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     }\n                 };\n                 record!(self.tables.asyncness[def_id] <- m_sig.header.asyncness);\n-                record!(self.tables.impl_constness[def_id] <- hir::Constness::NotConst);\n+                self.tables.impl_constness.set(def_id.index, hir::Constness::NotConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     container,\n                     has_self: trait_item.fn_has_self_parameter,\n@@ -1273,7 +1273,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 } else {\n                     hir::Constness::NotConst\n                 };\n-                record!(self.tables.impl_constness[def_id] <- constness);\n+                self.tables.impl_constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     container,\n                     has_self: impl_item.fn_has_self_parameter,\n@@ -1396,7 +1396,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n                 record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n-                record!(self.tables.impl_constness[def_id] <- sig.header.constness);\n+                self.tables.impl_constness.set(def_id.index, sig.header.constness);\n                 EntryKind::Fn\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n@@ -1420,7 +1420,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n-                record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n+                self.tables.impl_constness.set(def_id.index, hir::Constness::Const);\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -1451,7 +1451,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 record!(self.tables.impl_defaultness[def_id] <- defaultness);\n-                record!(self.tables.impl_constness[def_id] <- constness);\n+                self.tables.impl_constness.set(def_id.index, constness);\n \n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {\n@@ -1893,7 +1893,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 } else {\n                     hir::Constness::NotConst\n                 };\n-                record!(self.tables.impl_constness[def_id] <- constness);\n+                self.tables.impl_constness.set(def_id.index, constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignFn);\n             }\n             hir::ForeignItemKind::Static(..) => {"}, {"sha": "4dd000eaefeba1d9f3f21906cb16820b9939fccd", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ec7f80036d7191529ba4b1d2af29fed1c5ff5d48", "patch": "@@ -311,7 +311,7 @@ define_tables! {\n     thir_abstract_const: Table<DefIndex, Lazy!(&'tcx [thir::abstract_const::Node<'tcx>])>,\n     impl_parent: Table<DefIndex, Lazy!(DefId)>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n-    impl_constness: Table<DefIndex, Lazy!(hir::Constness)>,\n+    impl_constness: Table<DefIndex, hir::Constness>,\n     impl_defaultness: Table<DefIndex, Lazy!(hir::Defaultness)>,\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n     coerce_unsized_info: Table<DefIndex, Lazy!(ty::adjustment::CoerceUnsizedInfo)>,"}, {"sha": "6bb07a34e0f37701fde1f1d44edd7906ef9ef5ba", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7f80036d7191529ba4b1d2af29fed1c5ff5d48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=ec7f80036d7191529ba4b1d2af29fed1c5ff5d48", "patch": "@@ -113,6 +113,13 @@ fixed_size_enum! {\n     }\n }\n \n+fixed_size_enum! {\n+    hir::Constness {\n+        ( NotConst )\n+        ( Const    )\n+    }\n+}\n+\n // NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n // generic `Lazy<T>` impl, but in the general case we might not need / want to\n // fit every `usize` in `u32`."}]}