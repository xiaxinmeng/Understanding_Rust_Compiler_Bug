{"sha": "a1c884682c9c056990327aa86b2d966771b1e492", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzg4NDY4MmM5YzA1Njk5MDMyN2FhODZiMmQ5NjY3NzFiMWU0OTI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2021-06-07T15:08:13Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2021-06-07T16:09:12Z"}, "message": "ignore ui-fulldeps/session-derive-errors.rs on beta and stable\n\nThe session-derive-errors test ensures the internal SessionDiagnostic\nderive macro outputs the right error messages when misused.\n\nThe macro relies on the proc_macro2 crate though, which changes its span\nbehavior depending on whether the channel is nightly or not. This caused\ntest failures when bumping the channel from nightly to beta/stable.\n\nSince SessionDiagnostic is internal-only we don't care about its\ndiagnostics quality outside of nightly, as the compiler itself is\ndeveloped on nightly. Thus the easiest solution is to ignore that test\non the beta and stable channels.\n\nThis also implements `// only-{channel}` and `// ignore-{channel}` in\ncompiletest to properly support the change.", "tree": {"sha": "6baeb4bc454b360a6c18ccf95e44495138b9bf39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6baeb4bc454b360a6c18ccf95e44495138b9bf39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c884682c9c056990327aa86b2d966771b1e492", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAmC+RNkACgkQPgar6Auq\n8Zz/qA//eCdoCuBI100y8OALMvieoK39/s2jCRg4nJ4u4/2oOBl1fwCmd2IxWh2o\nSODV+3i0VeS71xVGSN7r8HSQo/6kp8KupPovU8dHQua0HLtU8unhdikI4vHokZ5T\nSdcZ98Ol2rVyO8bqtS6ineoEFZyn+EERLjDfpFBWUI0P3FpjEnBHyNBKkkGb23e9\ntquLo4woIJiidKWEH6An74ybNksUzig/IVSAWsMIdDqibU8bWRNt/kTOnFKs1md4\nsEgCYo81GhNJDr15Hwf/6iJDIXcmasXzrYswDiHxRpi43EmXCyrUUZDqA26qd+BD\n8Tc+H8URTqptUGcC7n9IfEYL5i3a8x9pi2PPwTQFptvcJ7YLcu6u63w5HiD1UYEg\nmvbxT2yj8qcTfuCML1hwDFycJ6mO9vfogHDRqU65nLgTyISCnWZY0Vk7p88LLpMy\nJeXEqK+cAACoxomT0eDy/X/VKCaZLY7KvwfgVrdGtwVcznIG5nFpiTGVuBW0yhXH\n7rMAibkDu/cAeulAI7Fc/Ome3ETw2SjXnPWPgopWpqKi0s9a3fy5lF0ZVK0s+Xj7\nGqjS7Ut1BB9xGeEgq9hIqK76VBlx2g4rZ01zS7fi9ymw+pfb5bPs0kizoTU9DQaM\n/x4xyiqLxL3zdqvX3pI8Ni6BzK8cRYFd3W/1jVeVLeBgw4yU728=\n=etNH\n-----END PGP SIGNATURE-----", "payload": "tree 6baeb4bc454b360a6c18ccf95e44495138b9bf39\nparent 022720bfccd46400e69def42f4647fe4059ad951\nauthor Pietro Albini <pietro@pietroalbini.org> 1623078493 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1623082152 +0200\n\nignore ui-fulldeps/session-derive-errors.rs on beta and stable\n\nThe session-derive-errors test ensures the internal SessionDiagnostic\nderive macro outputs the right error messages when misused.\n\nThe macro relies on the proc_macro2 crate though, which changes its span\nbehavior depending on whether the channel is nightly or not. This caused\ntest failures when bumping the channel from nightly to beta/stable.\n\nSince SessionDiagnostic is internal-only we don't care about its\ndiagnostics quality outside of nightly, as the compiler itself is\ndeveloped on nightly. Thus the easiest solution is to ignore that test\non the beta and stable channels.\n\nThis also implements `// only-{channel}` and `// ignore-{channel}` in\ncompiletest to properly support the change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c884682c9c056990327aa86b2d966771b1e492", "html_url": "https://github.com/rust-lang/rust/commit/a1c884682c9c056990327aa86b2d966771b1e492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c884682c9c056990327aa86b2d966771b1e492/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022720bfccd46400e69def42f4647fe4059ad951", "url": "https://api.github.com/repos/rust-lang/rust/commits/022720bfccd46400e69def42f4647fe4059ad951", "html_url": "https://github.com/rust-lang/rust/commit/022720bfccd46400e69def42f4647fe4059ad951"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "38d2fe8f5ac09385bb0877ee96954e7776e58d19", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1c884682c9c056990327aa86b2d966771b1e492/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c884682c9c056990327aa86b2d966771b1e492/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=a1c884682c9c056990327aa86b2d966771b1e492", "patch": "@@ -1517,6 +1517,8 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.env(\"BOOTSTRAP_CARGO\", &builder.initial_cargo);\n \n+        cmd.arg(\"--channel\").arg(&builder.config.channel);\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!("}, {"sha": "140aaad3b3839af41abdf4d722a7007b80ec124e", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=a1c884682c9c056990327aa86b2d966771b1e492", "patch": "@@ -1,6 +1,12 @@\n // check-fail\n // Tests error conditions for specifying diagnostics using #[derive(SessionDiagnostic)]\n \n+// The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n+// changing the output of this test. Since SessionDiagnostic is strictly internal to the compiler\n+// the test is just ignored on stable and beta:\n+// ignore-beta\n+// ignore-stable\n+\n #![feature(rustc_private)]\n #![crate_type = \"lib\"]\n "}, {"sha": "2f1debe25b74fddb5563fe44345a4c267fbaa159", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=a1c884682c9c056990327aa86b2d966771b1e492", "patch": "@@ -1,5 +1,5 @@\n error: `#[derive(SessionDiagnostic)]` can only be used on structs\n-  --> $DIR/session-derive-errors.rs:28:1\n+  --> $DIR/session-derive-errors.rs:34:1\n    |\n LL | / #[error = \"E0123\"]\n LL | |\n@@ -10,51 +10,51 @@ LL | | }\n    | |_^\n \n error: `#[label = ...]` is not a valid SessionDiagnostic struct attribute\n-  --> $DIR/session-derive-errors.rs:37:1\n+  --> $DIR/session-derive-errors.rs:43:1\n    |\n LL | #[label = \"This is in the wrong place\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion = ...]` is not a valid SessionDiagnostic field attribute\n-  --> $DIR/session-derive-errors.rs:44:5\n+  --> $DIR/session-derive-errors.rs:50:5\n    |\n LL |     #[suggestion = \"this is the wrong kind of attribute\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `error` specified multiple times\n-  --> $DIR/session-derive-errors.rs:52:11\n+  --> $DIR/session-derive-errors.rs:58:11\n    |\n LL | #[error = \"E0456\"]\n    |           ^^^^^^^\n \n error: `lint` specified when `error` was already specified\n-  --> $DIR/session-derive-errors.rs:58:10\n+  --> $DIR/session-derive-errors.rs:64:10\n    |\n LL | #[lint = \"some_useful_lint\"]\n    |          ^^^^^^^^^^^^^^^^^^\n \n error: `code` not specified\n-  --> $DIR/session-derive-errors.rs:67:1\n+  --> $DIR/session-derive-errors.rs:73:1\n    |\n LL | struct ErrorCodeNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the [code = \"...\"] attribute to set this diagnostic's error code \n \n error: the `#[message = \"...\"]` attribute can only be applied to fields of type Span\n-  --> $DIR/session-derive-errors.rs:95:5\n+  --> $DIR/session-derive-errors.rs:101:5\n    |\n LL |     #[message = \"this message is applied to a String field\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/session-derive-errors.rs:102:1\n+  --> $DIR/session-derive-errors.rs:108:1\n    |\n LL | #[message = \"This error has a field, and references {name}\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/session-derive-errors.rs:110:1\n+  --> $DIR/session-derive-errors.rs:116:1\n    |\n LL | #[error = \"E0123\"]\n    |               - because of this opening brace\n@@ -65,7 +65,7 @@ LL | #[message = \"This is missing a closing brace: {name\"]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/session-derive-errors.rs:119:1\n+  --> $DIR/session-derive-errors.rs:125:1\n    |\n LL | #[message = \"This is missing an opening brace: name}\"]\n    | ^ unmatched `}` in format string\n@@ -74,33 +74,33 @@ LL | #[message = \"This is missing an opening brace: name}\"]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: The `#[label = ...]` attribute can only be applied to fields of type Span\n-  --> $DIR/session-derive-errors.rs:138:5\n+  --> $DIR/session-derive-errors.rs:144:5\n    |\n LL |     #[label = \"See here\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: `nonsense` is not a valid key for `#[suggestion(...)]`\n-  --> $DIR/session-derive-errors.rs:163:18\n+  --> $DIR/session-derive-errors.rs:169:18\n    |\n LL |     #[suggestion(nonsense = \"This is nonsense\")]\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `msg` is not a valid key for `#[suggestion(...)]`\n-  --> $DIR/session-derive-errors.rs:171:18\n+  --> $DIR/session-derive-errors.rs:177:18\n    |\n LL |     #[suggestion(msg = \"This is a suggestion\")]\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing suggestion message\n-  --> $DIR/session-derive-errors.rs:179:7\n+  --> $DIR/session-derive-errors.rs:185:7\n    |\n LL |     #[suggestion(code = \"This is suggested code\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: provide a suggestion message using #[suggestion(message = \"...\")]\n \n error: wrong field type for suggestion\n-  --> $DIR/session-derive-errors.rs:194:5\n+  --> $DIR/session-derive-errors.rs:200:5\n    |\n LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n LL | |\n@@ -110,23 +110,23 @@ LL | |     suggestion: Applicability,\n    = help: #[suggestion(...)] should be applied to fields of type Span or (Span, Applicability)\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Span\n-  --> $DIR/session-derive-errors.rs:209:5\n+  --> $DIR/session-derive-errors.rs:215:5\n    |\n LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/session-derive-errors.rs:217:5\n+  --> $DIR/session-derive-errors.rs:223:5\n    |\n LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n error: invalid annotation list `#[label(...)]`\n-  --> $DIR/session-derive-errors.rs:225:7\n+  --> $DIR/session-derive-errors.rs:231:7\n    |\n LL |     #[label(\"wrong kind of annotation for label\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a5b526be86f3db133ea17f64ea0ee51c7962d516", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=a1c884682c9c056990327aa86b2d966771b1e492", "patch": "@@ -346,6 +346,9 @@ pub struct Config {\n     /// whether to run `tidy` when a rustdoc test fails\n     pub has_tidy: bool,\n \n+    /// The current Rust channel\n+    pub channel: String,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,"}, {"sha": "703c5804e22290d743126a1d4e1ef5dd666ae18b", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a1c884682c9c056990327aa86b2d966771b1e492", "patch": "@@ -876,6 +876,7 @@ impl Config {\n             name == util::get_arch(&self.target) ||             // architecture\n             name == util::get_pointer_width(&self.target) ||    // pointer width\n             name == self.stage_id.split('-').next().unwrap() || // stage\n+            name == self.channel ||                             // channel\n             (self.target != self.host && name == \"cross-compile\") ||\n             (name == \"endian-big\" && util::is_big_endian(&self.target)) ||\n             (self.remote_test_client.is_some() && name == \"remote\") ||"}, {"sha": "2c607b6a50ef7d6aa7992936b3a631c41542f24d", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=a1c884682c9c056990327aa86b2d966771b1e492", "patch": "@@ -55,6 +55,7 @@ fn config() -> Config {\n         \"--llvm-components=\",\n         \"--android-cross-path=\",\n         \"--target=x86_64-unknown-linux-gnu\",\n+        \"--channel=nightly\",\n     ];\n     let args = args.iter().map(ToString::to_string).collect();\n     crate::parse_config(args)\n@@ -234,6 +235,20 @@ fn asm_support() {\n     assert!(!parse_rs(&config, \"// needs-asm-support\").ignore);\n }\n \n+#[test]\n+fn channel() {\n+    let mut config = config();\n+    config.channel = \"beta\".into();\n+\n+    assert!(parse_rs(&config, \"// ignore-beta\").ignore);\n+    assert!(parse_rs(&config, \"// only-nightly\").ignore);\n+    assert!(parse_rs(&config, \"// only-stable\").ignore);\n+\n+    assert!(!parse_rs(&config, \"// only-beta\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-nightly\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-stable\").ignore);\n+}\n+\n #[test]\n fn test_extract_version_range() {\n     use super::{extract_llvm_version, extract_version_range};"}, {"sha": "c854663706a503efb898ca8c590b5a96c0c638c7", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c884682c9c056990327aa86b2d966771b1e492/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=a1c884682c9c056990327aa86b2d966771b1e492", "patch": "@@ -144,7 +144,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"enable this to generate a Rustfix coverage file, which is saved in \\\n                 `./<build_base>/rustfix_missing_coverage.txt`\",\n         )\n-        .optflag(\"h\", \"help\", \"show this message\");\n+        .optflag(\"h\", \"help\", \"show this message\")\n+        .reqopt(\"\", \"channel\", \"current Rust channel\", \"CHANNEL\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n     if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n@@ -278,6 +279,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n         rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n         has_tidy,\n+        channel: matches.opt_str(\"channel\").unwrap(),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),"}]}