{"sha": "37ab718350453a328b1a925825d8d9bbea9fe9e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YWI3MTgzNTA0NTNhMzI4YjFhOTI1ODI1ZDhkOWJiZWE5ZmU5ZTY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T19:57:44Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:07:24Z"}, "message": "Make opaque type map key be of type OpaqueTypeKey", "tree": {"sha": "3aed3f0d68f369d5fca92c8f3b6194428abccf3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aed3f0d68f369d5fca92c8f3b6194428abccf3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ab718350453a328b1a925825d8d9bbea9fe9e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+mJ4ACgkQgTGiTgx5\n768qWBAAqDQuRd4wEd+vBbKz6wYu26PrwW/Egh5YUCNjKvNyLwAKkb6ivm+ryC2O\nvojTb06DoDWL/xDxVjZ5MVQDSFyy17iL22ml40pJEjhvK0SnvB0fYKgKwm4ULMVX\nLuOt2V0YhlDDDO3pES71lsH6Y8NUcEsv1fKewfyderyy5BsP/HB85J3MvIA6C91T\ntGJOB2GX4ZTmA3h7OEnBmsXlVNEj5sRGkCol3y2hcukItKPGXp4grTzwJyAFPyPS\nJipe3ZNJAP0pAvHHx6908cjII6C1ePRsMBd3slQhlikmEfNU9Vo1/VWTEXfay27d\n5Cnye1KoZtS1kAsu5z1vdPYL1d2SPu2M5kQPwKO8ZdRlK4c8TpZ9z6MkWOtr28HP\nverU98pIaxJQM3RAqaQctC41TwYzzV75E8ugHqV7dklWjg2F9EMISahjPnTKmfbK\neUMiLR7+re8FUZVQHA6KQRY5/LUScuodzqYcDR/78RufmwtcWyuhvmVcUFXhzL2c\nfl8vZkMzwyJF6u5paVqUX8GVUtJOscc5fgw8GacAuDX1LWfiTJEUrnFh/p64usA2\nYXKWm/QO4zgE10rBdBVZ06YKww9NTII6coGvUKG4UEDVk8h7lXxSqSgPHOf9JZ9E\nXD2JppiVF3xLXuMSTG8zGGDhsQn81Gtd82fMxmU2UquzfyqqwCY=\n=Gsdp\n-----END PGP SIGNATURE-----", "payload": "tree 3aed3f0d68f369d5fca92c8f3b6194428abccf3d\nparent 7294f49d524772cceb96ee35ee85feec2a052076\nauthor Santiago Pastorino <spastorino@gmail.com> 1623095864 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103644 -0300\n\nMake opaque type map key be of type OpaqueTypeKey\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ab718350453a328b1a925825d8d9bbea9fe9e6", "html_url": "https://github.com/rust-lang/rust/commit/37ab718350453a328b1a925825d8d9bbea9fe9e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ab718350453a328b1a925825d8d9bbea9fe9e6/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7294f49d524772cceb96ee35ee85feec2a052076", "url": "https://api.github.com/repos/rust-lang/rust/commits/7294f49d524772cceb96ee35ee85feec2a052076", "html_url": "https://github.com/rust-lang/rust/commit/7294f49d524772cceb96ee35ee85feec2a052076"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "3476c94b797dd03a9a9ab327cf436e91a0143024", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=37ab718350453a328b1a925825d8d9bbea9fe9e6", "patch": "@@ -1282,7 +1282,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             .eq(output_ty, revealed_ty)?,\n                     );\n \n-                    for &(opaque_def_id, opaque_decl) in &opaque_type_map {\n+                    for &(opaque_type_key, opaque_decl) in &opaque_type_map {\n+                        let opaque_def_id = opaque_type_key.def_id;\n                         let resolved_ty = infcx.resolve_vars_if_possible(opaque_decl.concrete_ty);\n                         let concrete_is_opaque = if let ty::Opaque(def_id, _) = resolved_ty.kind() {\n                             *def_id == opaque_def_id\n@@ -1377,7 +1378,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // prove that `T: Iterator` where `T` is the type we\n         // instantiated it with).\n         if let Some(opaque_type_map) = opaque_type_map {\n-            for (opaque_def_id, opaque_decl) in opaque_type_map {\n+            for (opaque_type_key, opaque_decl) in opaque_type_map {\n+                let opaque_def_id = opaque_type_key.def_id;\n                 self.fully_perform_op(\n                     locations,\n                     ConstraintCategory::OpaqueType,"}, {"sha": "6137521c4c13eb6ebace11d8a790233b3a33f80e", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=37ab718350453a328b1a925825d8d9bbea9fe9e6", "patch": "@@ -17,7 +17,7 @@ use rustc_span::Span;\n \n use std::ops::ControlFlow;\n \n-pub type OpaqueTypeMap<'tcx> = VecMap<DefId, OpaqueTypeDecl<'tcx>>;\n+pub type OpaqueTypeMap<'tcx> = VecMap<OpaqueTypeKey<'tcx>, OpaqueTypeDecl<'tcx>>;\n \n /// Information about the opaque types whose values we\n /// are inferring in this function (these are the `impl Trait` that\n@@ -370,7 +370,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         debug!(\"constrain_opaque_types()\");\n \n-        for &(def_id, opaque_defn) in opaque_types {\n+        for &(opaque_type_key, opaque_defn) in opaque_types {\n+            let OpaqueTypeKey { def_id, substs: _ } = opaque_type_key;\n             self.constrain_opaque_type(\n                 def_id,\n                 &opaque_defn,\n@@ -1041,7 +1042,12 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n \n         // Use the same type variable if the exact same opaque type appears more\n         // than once in the return type (e.g., if it's passed to a type alias).\n-        if let Some(opaque_defn) = self.opaque_types.get(&def_id) {\n+        if let Some(opaque_defn) = self\n+            .opaque_types\n+            .iter()\n+            .find(|(opaque_type_key, _)| opaque_type_key.def_id == def_id)\n+            .map(|(_, opaque_defn)| opaque_defn)\n+        {\n             debug!(\"instantiate_opaque_types: returning concrete ty {:?}\", opaque_defn.concrete_ty);\n             return opaque_defn.concrete_ty;\n         }\n@@ -1079,7 +1085,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         let definition_span = self.value_span;\n \n         self.opaque_types.insert(\n-            def_id,\n+            OpaqueTypeKey { def_id, substs },\n             OpaqueTypeDecl {\n                 opaque_type: ty,\n                 substs,"}, {"sha": "e32561900de1166159efb1aa9f19b5fa96bba2bc", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=37ab718350453a328b1a925825d8d9bbea9fe9e6", "patch": "@@ -716,7 +716,8 @@ fn check_opaque_meets_bounds<'tcx>(\n             infcx.instantiate_opaque_types(def_id, hir_id, param_env, opaque_ty, span),\n         );\n \n-        for (def_id, opaque_defn) in opaque_type_map {\n+        for (opaque_type_key, opaque_defn) in opaque_type_map {\n+            let def_id = opaque_type_key.def_id;\n             match infcx\n                 .at(&misc_cause, param_env)\n                 .eq(opaque_defn.concrete_ty, tcx.type_of(def_id).subst(tcx, opaque_defn.substs))"}, {"sha": "2e9bef15f900a715fe515a9bb3e8d7db23325d84", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=37ab718350453a328b1a925825d8d9bbea9fe9e6", "patch": "@@ -4,12 +4,12 @@ use super::MaybeInProgressTables;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n+use rustc_hir::def_id::{DefIdMap, LocalDefId};\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt};\n use rustc_span::{self, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::opaque_types::OpaqueTypeDecl;\n@@ -59,7 +59,7 @@ pub struct Inherited<'a, 'tcx> {\n     // associated fresh inference variable. Writeback resolves these\n     // variables to get the concrete type, which can be used to\n     // 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n-    pub(super) opaque_types: RefCell<VecMap<DefId, OpaqueTypeDecl<'tcx>>>,\n+    pub(super) opaque_types: RefCell<VecMap<OpaqueTypeKey<'tcx>, OpaqueTypeDecl<'tcx>>>,\n \n     /// A map from inference variables created from opaque\n     /// type instantiations (`ty::Infer`) to the actual opaque"}, {"sha": "07c33d007cccd68faf4564b04cfb35e8ded65f6f", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ab718350453a328b1a925825d8d9bbea9fe9e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=37ab718350453a328b1a925825d8d9bbea9fe9e6", "patch": "@@ -475,7 +475,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     }\n \n     fn visit_opaque_types(&mut self, span: Span) {\n-        for &(def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n+        for &(opaque_type_key, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n+            let OpaqueTypeKey { def_id, substs: _ } = opaque_type_key;\n             let hir_id = self.tcx().hir().local_def_id_to_hir_id(def_id.expect_local());\n             let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);\n "}]}