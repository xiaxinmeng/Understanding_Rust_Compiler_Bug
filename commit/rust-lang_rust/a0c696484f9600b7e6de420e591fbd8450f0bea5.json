{"sha": "a0c696484f9600b7e6de420e591fbd8450f0bea5", "node_id": "C_kwDOAAsO6NoAKGEwYzY5NjQ4NGY5NjAwYjdlNmRlNDIwZTU5MWZiZDg0NTBmMGJlYTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-20T16:58:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-20T16:58:18Z"}, "message": "Rollup merge of #99488 - luqmana:debuginfo-revisions, r=tmiasko\n\ncompiletest: Allow using revisions with debuginfo tests.\n\nA small wart that came up in https://github.com/rust-lang/rust/pull/95685#issuecomment-1089184951.", "tree": {"sha": "02a7c06a7a6cbef384e5084e760bd46026824264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a7c06a7a6cbef384e5084e760bd46026824264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c696484f9600b7e6de420e591fbd8450f0bea5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2DQrCRBK7hj4Ov3rIwAA7vsIADEFlEQKudxI+CBt15dF1fDV\ni8xmtS7zGXqgDMxG7wCmgHZv1cs0X9P9U1e1RA1MUibVTo0hCufm9xjztiqcLKq0\n+TuFWDWrQse4n8BEQCGsXxFglwBuW1YFVntagWFGKmRLgktHQQt7oKBBsq0/uXhu\nnDIEjzDLENd2+HXfAq/OSLkraiHSCGMCn4uTSeAh90CtyuKiqYTWleemUGFOa8+o\n/p2iLQ71GW+jRaURGXgZI0LWyR/RgT9Uwdq9KnlGuUMbxxuhCtnpXaj3w2Z6l8Zg\nRE3SOuKkmNY9Nynu+TQEoTxKvWsBiwKAVTvCAcRm3lMDnlOSsbSrfStyBIJlliE=\n=8oqG\n-----END PGP SIGNATURE-----\n", "payload": "tree 02a7c06a7a6cbef384e5084e760bd46026824264\nparent 9e197b75f0e5ad17dc1bb1431853bd4df7cff408\nparent 5d7cd652942e5ce4ca7c673a6e44618bae655598\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658336298 +0200\ncommitter GitHub <noreply@github.com> 1658336298 +0200\n\nRollup merge of #99488 - luqmana:debuginfo-revisions, r=tmiasko\n\ncompiletest: Allow using revisions with debuginfo tests.\n\nA small wart that came up in https://github.com/rust-lang/rust/pull/95685#issuecomment-1089184951.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c696484f9600b7e6de420e591fbd8450f0bea5", "html_url": "https://github.com/rust-lang/rust/commit/a0c696484f9600b7e6de420e591fbd8450f0bea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c696484f9600b7e6de420e591fbd8450f0bea5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "html_url": "https://github.com/rust-lang/rust/commit/9e197b75f0e5ad17dc1bb1431853bd4df7cff408"}, {"sha": "5d7cd652942e5ce4ca7c673a6e44618bae655598", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7cd652942e5ce4ca7c673a6e44618bae655598", "html_url": "https://github.com/rust-lang/rust/commit/5d7cd652942e5ce4ca7c673a6e44618bae655598"}], "stats": {"total": 165, "additions": 60, "deletions": 105}, "files": [{"sha": "1adf278ad32de1a97b6e04db54680cd2f06612ea", "filename": "src/test/debuginfo/basic-types-globals-lto.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs?ref=9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "patch": "@@ -1,81 +0,0 @@\n-// Caveat - gdb doesn't know about UTF-32 character encoding and will print a\n-// rust char as only its numerical value.\n-\n-// min-lldb-version: 310\n-// min-gdb-version: 8.0\n-\n-// no-prefer-dynamic\n-// compile-flags:-g -C lto\n-// gdb-command:run\n-// gdbg-command:print 'basic_types_globals::B'\n-// gdbr-command:print B\n-// gdb-check:$1 = false\n-// gdbg-command:print 'basic_types_globals::I'\n-// gdbr-command:print I\n-// gdb-check:$2 = -1\n-// gdbg-command:print 'basic_types_globals::C'\n-// gdbr-command:print/d C\n-// gdbg-check:$3 = 97\n-// gdbr-check:$3 = 97\n-// gdbg-command:print/d 'basic_types_globals::I8'\n-// gdbr-command:print I8\n-// gdb-check:$4 = 68\n-// gdbg-command:print 'basic_types_globals::I16'\n-// gdbr-command:print I16\n-// gdb-check:$5 = -16\n-// gdbg-command:print 'basic_types_globals::I32'\n-// gdbr-command:print I32\n-// gdb-check:$6 = -32\n-// gdbg-command:print 'basic_types_globals::I64'\n-// gdbr-command:print I64\n-// gdb-check:$7 = -64\n-// gdbg-command:print 'basic_types_globals::U'\n-// gdbr-command:print U\n-// gdb-check:$8 = 1\n-// gdbg-command:print/d 'basic_types_globals::U8'\n-// gdbr-command:print U8\n-// gdb-check:$9 = 100\n-// gdbg-command:print 'basic_types_globals::U16'\n-// gdbr-command:print U16\n-// gdb-check:$10 = 16\n-// gdbg-command:print 'basic_types_globals::U32'\n-// gdbr-command:print U32\n-// gdb-check:$11 = 32\n-// gdbg-command:print 'basic_types_globals::U64'\n-// gdbr-command:print U64\n-// gdb-check:$12 = 64\n-// gdbg-command:print 'basic_types_globals::F32'\n-// gdbr-command:print F32\n-// gdb-check:$13 = 2.5\n-// gdbg-command:print 'basic_types_globals::F64'\n-// gdbr-command:print F64\n-// gdb-check:$14 = 3.5\n-// gdb-command:continue\n-\n-#![allow(unused_variables)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-// N.B. These are `mut` only so they don't constant fold away.\n-static mut B: bool = false;\n-static mut I: isize = -1;\n-static mut C: char = 'a';\n-static mut I8: i8 = 68;\n-static mut I16: i16 = -16;\n-static mut I32: i32 = -32;\n-static mut I64: i64 = -64;\n-static mut U: usize = 1;\n-static mut U8: u8 = 100;\n-static mut U16: u16 = 16;\n-static mut U32: u32 = 32;\n-static mut U64: u64 = 64;\n-static mut F32: f32 = 2.5;\n-static mut F64: f64 = 3.5;\n-\n-fn main() {\n-    _zzz(); // #break\n-\n-    let a = unsafe { (B, I, C, I8, I16, I32, I64, U, U8, U16, U32, U64, F32, F64) };\n-}\n-\n-fn _zzz() {()}"}, {"sha": "8a3df8ba2d18eb6f5887d3f3f65905b483fd3362", "filename": "src/test/debuginfo/basic-types-globals.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs?ref=a0c696484f9600b7e6de420e591fbd8450f0bea5", "patch": "@@ -4,7 +4,13 @@\n // min-lldb-version: 310\n // min-gdb-version: 8.0\n \n+// revisions: lto no-lto\n+\n // compile-flags:-g\n+\n+// [lto] compile-flags:-C lto\n+// [lto] no-prefer-dynamic\n+\n // gdb-command:run\n // gdbg-command:print 'basic_types_globals::B'\n // gdbr-command:print B"}, {"sha": "02f4d29a2f05f9c43cbee47df46460dc05c46204", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a0c696484f9600b7e6de420e591fbd8450f0bea5", "patch": "@@ -535,6 +535,29 @@ impl TestProps {\n     }\n }\n \n+pub fn line_directive<'line>(\n+    comment: &str,\n+    ln: &'line str,\n+) -> Option<(Option<&'line str>, &'line str)> {\n+    if ln.starts_with(comment) {\n+        let ln = ln[comment.len()..].trim_start();\n+        if ln.starts_with('[') {\n+            // A comment like `//[foo]` is specific to revision `foo`\n+            if let Some(close_brace) = ln.find(']') {\n+                let lncfg = &ln[1..close_brace];\n+\n+                Some((Some(lncfg), ln[(close_brace + 1)..].trim_start()))\n+            } else {\n+                panic!(\"malformed condition directive: expected `{}[foo]`, found `{}`\", comment, ln)\n+            }\n+        } else {\n+            Some((None, ln))\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>, &str)) {\n     if testfile.is_dir() {\n         return;\n@@ -557,17 +580,8 @@ fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>\n         let ln = ln.trim();\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n             return;\n-        } else if ln.starts_with(comment) && ln[comment.len()..].trim_start().starts_with('[') {\n-            // A comment like `//[foo]` is specific to revision `foo`\n-            if let Some(close_brace) = ln.find(']') {\n-                let open_brace = ln.find('[').unwrap();\n-                let lncfg = &ln[open_brace + 1..close_brace];\n-                it(Some(lncfg), ln[(close_brace + 1)..].trim_start());\n-            } else {\n-                panic!(\"malformed condition directive: expected `{}[foo]`, found `{}`\", comment, ln)\n-            }\n-        } else if ln.starts_with(comment) {\n-            it(None, ln[comment.len()..].trim_start());\n+        } else if let Some((lncfg, ln)) = line_directive(comment, ln) {\n+            it(lncfg, ln);\n         }\n     }\n }"}, {"sha": "26730fcec4cec4099c8eb85353144329dae80e72", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a0c696484f9600b7e6de420e591fbd8450f0bea5", "patch": "@@ -648,8 +648,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_cdb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n@@ -695,7 +693,12 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };\n@@ -756,8 +759,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_gdb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n@@ -783,7 +784,12 @@ impl<'test> TestCx<'test> {\n         };\n \n         let DebuggerCommands { commands, check_lines, breakpoint_lines } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };\n@@ -1005,8 +1011,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_lldb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         if self.config.lldb_python_dir.is_none() {\n             self.fatal(\"Can't run LLDB test because LLDB's python path is not set.\");\n         }\n@@ -1059,7 +1063,12 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };"}, {"sha": "379ff0bab408a3120bda8803b9c016a3e216377b", "filename": "src/tools/compiletest/src/runtest/debugger.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c696484f9600b7e6de420e591fbd8450f0bea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs?ref=a0c696484f9600b7e6de420e591fbd8450f0bea5", "patch": "@@ -1,4 +1,5 @@\n use crate::common::Config;\n+use crate::header::line_directive;\n use crate::runtest::ProcRes;\n \n use std::fs::File;\n@@ -16,6 +17,7 @@ impl DebuggerCommands {\n         file: &Path,\n         config: &Config,\n         debugger_prefixes: &[&str],\n+        rev: Option<&str>,\n     ) -> Result<Self, String> {\n         let directives = debugger_prefixes\n             .iter()\n@@ -25,13 +27,19 @@ impl DebuggerCommands {\n         let mut breakpoint_lines = vec![];\n         let mut commands = vec![];\n         let mut check_lines = vec![];\n-        let mut counter = 1;\n+        let mut counter = 0;\n         let reader = BufReader::new(File::open(file).unwrap());\n         for line in reader.lines() {\n+            counter += 1;\n             match line {\n                 Ok(line) => {\n-                    let line =\n-                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n+                    let (lnrev, line) = line_directive(\"//\", &line).unwrap_or((None, &line));\n+\n+                    // Skip any revision specific directive that doesn't match the current\n+                    // revision being tested\n+                    if lnrev.is_some() && lnrev != rev {\n+                        continue;\n+                    }\n \n                     if line.contains(\"#break\") {\n                         breakpoint_lines.push(counter);\n@@ -49,7 +57,6 @@ impl DebuggerCommands {\n                 }\n                 Err(e) => return Err(format!(\"Error while parsing debugger commands: {}\", e)),\n             }\n-            counter += 1;\n         }\n \n         Ok(Self { commands, check_lines, breakpoint_lines })"}]}