{"sha": "a8c47440b4ac59239f11838cfc7426b2adef3685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YzQ3NDQwYjRhYzU5MjM5ZjExODM4Y2ZjNzQyNmIyYWRlZjM2ODU=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-10T15:19:30Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-22T23:24:56Z"}, "message": "Use article_and_description for missing docs", "tree": {"sha": "884700823099aacfb74ba98150f577795cbd0339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884700823099aacfb74ba98150f577795cbd0339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8c47440b4ac59239f11838cfc7426b2adef3685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c47440b4ac59239f11838cfc7426b2adef3685", "html_url": "https://github.com/rust-lang/rust/commit/a8c47440b4ac59239f11838cfc7426b2adef3685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8c47440b4ac59239f11838cfc7426b2adef3685/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7c6dec244539970b593824334876f8b6ed0b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7c6dec244539970b593824334876f8b6ed0b18", "html_url": "https://github.com/rust-lang/rust/commit/3e7c6dec244539970b593824334876f8b6ed0b18"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "f2c0ab1222cb6ca807687bb58dc11ca907135bad", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a8c47440b4ac59239f11838cfc7426b2adef3685/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c47440b4ac59239f11838cfc7426b2adef3685/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=a8c47440b4ac59239f11838cfc7426b2adef3685", "patch": "@@ -2,7 +2,7 @@\n // *rustc*'s\n // [`missing_doc`].\n //\n-// [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n+// [`missing_doc`]: https://github.com/rust-lang/rust/blob/cf9cf7c923eb01146971429044f216a3ca905e06/compiler/rustc_lint/src/builtin.rs#L415\n //\n \n use crate::utils::span_lint;\n@@ -70,7 +70,14 @@ impl MissingDoc {\n         }\n     }\n \n-    fn check_missing_docs_attrs(&self, cx: &LateContext<'_>, attrs: &[ast::Attribute], sp: Span, desc: &'static str) {\n+    fn check_missing_docs_attrs(\n+        &self,\n+        cx: &LateContext<'_>,\n+        attrs: &[ast::Attribute],\n+        sp: Span,\n+        article: &'static str,\n+        desc: &'static str,\n+    ) {\n         // If we're building a test harness, then warning about\n         // documentation is probably not really relevant right now.\n         if cx.sess().opts.test {\n@@ -94,7 +101,7 @@ impl MissingDoc {\n                 cx,\n                 MISSING_DOCS_IN_PRIVATE_ITEMS,\n                 sp,\n-                &format!(\"missing documentation for {}\", desc),\n+                &format!(\"missing documentation for {} {}\", article, desc),\n             );\n         }\n     }\n@@ -120,13 +127,11 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, &krate.item.attrs, krate.item.span, \"crate\");\n+        self.check_missing_docs_attrs(cx, &krate.item.attrs, krate.item.span, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {\n-        let desc = match it.kind {\n-            hir::ItemKind::Const(..) => \"a constant\",\n-            hir::ItemKind::Enum(..) => \"an enum\",\n+        match it.kind {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n@@ -136,34 +141,35 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n                         return;\n                     }\n                 }\n-                \"a function\"\n             },\n-            hir::ItemKind::Mod(..) => \"a module\",\n-            hir::ItemKind::Static(..) => \"a static\",\n-            hir::ItemKind::Struct(..) => \"a struct\",\n-            hir::ItemKind::Trait(..) => \"a trait\",\n-            hir::ItemKind::TraitAlias(..) => \"a trait alias\",\n-            hir::ItemKind::TyAlias(..) => \"a type alias\",\n-            hir::ItemKind::Union(..) => \"a union\",\n-            hir::ItemKind::OpaqueTy(..) => \"an existential type\",\n+            hir::ItemKind::Const(..)\n+            | hir::ItemKind::Enum(..)\n+            | hir::ItemKind::Mod(..)\n+            | hir::ItemKind::Static(..)\n+            | hir::ItemKind::Struct(..)\n+            | hir::ItemKind::Trait(..)\n+            | hir::ItemKind::TraitAlias(..)\n+            | hir::ItemKind::TyAlias(..)\n+            | hir::ItemKind::Union(..)\n+            | hir::ItemKind::OpaqueTy(..) => {},\n             hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::ForeignMod(..)\n             | hir::ItemKind::GlobalAsm(..)\n             | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => return,\n         };\n \n-        self.check_missing_docs_attrs(cx, &it.attrs, it.span, desc);\n+        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n+        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+\n+        self.check_missing_docs_attrs(cx, &it.attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n-        let desc = match trait_item.kind {\n-            hir::TraitItemKind::Const(..) => \"an associated constant\",\n-            hir::TraitItemKind::Fn(..) => \"a trait method\",\n-            hir::TraitItemKind::Type(..) => \"an associated type\",\n-        };\n+        let def_id = cx.tcx.hir().local_def_id(trait_item.hir_id);\n+        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, desc);\n+        self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, article, desc);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n@@ -178,21 +184,17 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             },\n         }\n \n-        let desc = match impl_item.kind {\n-            hir::ImplItemKind::Const(..) => \"an associated constant\",\n-            hir::ImplItemKind::Fn(..) => \"a method\",\n-            hir::ImplItemKind::TyAlias(_) => \"an associated type\",\n-        };\n-        self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n+        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, article, desc);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::StructField<'_>) {\n         if !sf.is_positional() {\n-            self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a struct field\");\n+            self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a\", \"struct field\");\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, &v.attrs, v.span, \"a variant\");\n+        self.check_missing_docs_attrs(cx, &v.attrs, v.span, \"a\", \"variant\");\n     }\n }"}, {"sha": "d56c5cc4c3ae25b84514b8742bbfc76844cdc90e", "filename": "tests/ui/missing-doc-crate-missing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8c47440b4ac59239f11838cfc7426b2adef3685/tests%2Fui%2Fmissing-doc-crate-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c47440b4ac59239f11838cfc7426b2adef3685/tests%2Fui%2Fmissing-doc-crate-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc-crate-missing.stderr?ref=a8c47440b4ac59239f11838cfc7426b2adef3685", "patch": "@@ -1,4 +1,4 @@\n-error: missing documentation for crate\n+error: missing documentation for the crate\n   --> $DIR/missing-doc-crate-missing.rs:1:1\n    |\n LL | / #![warn(clippy::missing_docs_in_private_items)]"}, {"sha": "7e10404ca005e9fa259b08dc69e114ed4e7c2c3a", "filename": "tests/ui/missing-doc-impl.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8c47440b4ac59239f11838cfc7426b2adef3685/tests%2Fui%2Fmissing-doc-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c47440b4ac59239f11838cfc7426b2adef3685/tests%2Fui%2Fmissing-doc-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc-impl.stderr?ref=a8c47440b4ac59239f11838cfc7426b2adef3685", "patch": "@@ -51,13 +51,13 @@ LL | |     fn foo_with_impl(&self) {}\n LL | | }\n    | |_^\n \n-error: missing documentation for a trait method\n+error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:39:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n-error: missing documentation for a trait method\n+error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:40:5\n    |\n LL |     fn foo_with_impl(&self) {}\n@@ -75,25 +75,25 @@ error: missing documentation for an associated type\n LL |     type AssociatedTypeDef = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a method\n+error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:62:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^^^^\n \n-error: missing documentation for a method\n+error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:63:5\n    |\n LL |     fn bar() {}\n    |     ^^^^^^^^^^^\n \n-error: missing documentation for a method\n+error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:67:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^^^^\n \n-error: missing documentation for a method\n+error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:70:5\n    |\n LL |     fn foo2() {}"}]}