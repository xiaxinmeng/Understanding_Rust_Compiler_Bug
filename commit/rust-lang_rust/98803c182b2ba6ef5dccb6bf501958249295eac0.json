{"sha": "98803c182b2ba6ef5dccb6bf501958249295eac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODAzYzE4MmIyYmE2ZWY1ZGNjYjZiZjUwMTk1ODI0OTI5NWVhYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-21T07:53:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-21T07:53:12Z"}, "message": "Auto merge of #70211 - Centril:rollup-fusltgc, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #67888 (Prefetch some queries used by the metadata encoder)\n - #69934 (Update the mir inline costs)\n - #69965 (Refactorings to get rid of rustc_codegen_utils)\n - #70054 (Build dist-android with --enable-profiler)\n - #70089 (rustc_infer: remove InferCtxt::closure_sig as the FnSig is always shallowly known.)\n - #70092 (hir: replace \"items\" terminology with \"nodes\" where appropriate.)\n - #70138 (do not 'return' in 'throw_' macros)\n - #70151 (Update stdarch submodule)\n\nFailed merges:\n\n - #70074 (Expand: nix all fatal errors)\n\nr? @ghost", "tree": {"sha": "c56e31bc43fec5596aba586cf691e22e557d7189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56e31bc43fec5596aba586cf691e22e557d7189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "html_url": "https://github.com/rust-lang/rust/commit/98803c182b2ba6ef5dccb6bf501958249295eac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f13820478907b09d50baf74f3ff2b78499ecd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f13820478907b09d50baf74f3ff2b78499ecd6c", "html_url": "https://github.com/rust-lang/rust/commit/5f13820478907b09d50baf74f3ff2b78499ecd6c"}, {"sha": "744bcc630ef27857ae5b20620b98d2bdef62cf3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/744bcc630ef27857ae5b20620b98d2bdef62cf3b", "html_url": "https://github.com/rust-lang/rust/commit/744bcc630ef27857ae5b20620b98d2bdef62cf3b"}], "stats": {"total": 1680, "additions": 876, "deletions": 804}, "files": [{"sha": "04044c79bdaf93198a8083cb6e902dfb33612282", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -3567,7 +3567,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_codegen_ssa\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3598,37 +3597,21 @@ dependencies = [\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_fs_util\",\n  \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_index\",\n+ \"rustc_metadata\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_symbol_mangling\",\n  \"rustc_target\",\n  \"serialize\",\n  \"tempfile\",\n ]\n \n-[[package]]\n-name = \"rustc_codegen_utils\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"log\",\n- \"punycode\",\n- \"rustc\",\n- \"rustc-demangle\",\n- \"rustc_ast\",\n- \"rustc_data_structures\",\n- \"rustc_hir\",\n- \"rustc_metadata\",\n- \"rustc_session\",\n- \"rustc_span\",\n- \"rustc_target\",\n-]\n-\n [[package]]\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n@@ -3665,7 +3648,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_codegen_ssa\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n@@ -3814,7 +3796,6 @@ dependencies = [\n  \"rustc_builtin_macros\",\n  \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n@@ -3832,6 +3813,7 @@ dependencies = [\n  \"rustc_resolve\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_symbol_mangling\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n  \"rustc_traits\",\n@@ -4071,7 +4053,6 @@ dependencies = [\n  \"rustc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_parse\",\n@@ -4112,6 +4093,23 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"rustc_symbol_mangling\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"punycode\",\n+ \"rustc\",\n+ \"rustc-demangle\",\n+ \"rustc_ast\",\n+ \"rustc_data_structures\",\n+ \"rustc_hir\",\n+ \"rustc_metadata\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+]\n+\n [[package]]\n name = \"rustc_target\"\n version = \"0.0.0\""}, {"sha": "64f31750dd7b6b4890a52b47fa0aa901a499f097", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -23,6 +23,7 @@ ENV TARGETS=$TARGETS,x86_64-linux-android\n \n ENV RUST_CONFIGURE_ARGS \\\n       --enable-extended \\\n+      --enable-profiler \\\n       --arm-linux-androideabi-ndk=/android/ndk/arm-14 \\\n       --armv7-linux-androideabi-ndk=/android/ndk/arm-14 \\\n       --thumbv7neon-linux-androideabi-ndk=/android/ndk/arm-14 \\"}, {"sha": "c990b289335046add121c2242ed4d4ea39a0a6d2", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -41,7 +41,6 @@ fn main() {\n         cfg.flag(\"-fno-builtin\");\n         cfg.flag(\"-fvisibility=hidden\");\n         cfg.flag(\"-fomit-frame-pointer\");\n-        cfg.flag(\"-ffreestanding\");\n         cfg.define(\"VISIBILITY_HIDDEN\", None);\n         if !target.contains(\"windows\") {\n             cfg.define(\"COMPILER_RT_HAS_UNAME\", Some(\"1\"));"}, {"sha": "bbac5dfd2b8d0bd6d439bd43b94ad556d3c8c0f7", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -165,8 +165,8 @@ macro_rules! arena_types {\n             // HIR query types\n             [few] indexed_hir: rustc::hir::map::IndexedHir<$tcx>,\n             [few] hir_definitions: rustc::hir::map::definitions::Definitions,\n-            [] hir_owner: rustc::hir::HirOwner<$tcx>,\n-            [] hir_owner_items: rustc::hir::HirOwnerItems<$tcx>,\n+            [] hir_owner: rustc::hir::Owner<$tcx>,\n+            [] hir_owner_nodes: rustc::hir::OwnerNodes<$tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "40192d072eb0fb9984d959cb750707f8b7e52d22", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -659,7 +659,7 @@ impl DepGraph {\n                         // bug that must be fixed before removing this.\n                         match dep_dep_node.kind {\n                             DepKind::hir_owner\n-                            | DepKind::hir_owner_items\n+                            | DepKind::hir_owner_nodes\n                             | DepKind::CrateMetadata => {\n                                 if let Some(def_id) = dep_dep_node.extract_def_id(tcx) {\n                                     if def_id_corresponds_to_hir_dep_node(tcx, def_id) {"}, {"sha": "c3bc9490d294e3b1bd2d79b1af6de8aac27af319", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1,7 +1,7 @@\n use crate::arena::Arena;\n use crate::hir::map::definitions::{self, DefPathHash};\n use crate::hir::map::{Entry, HirOwnerData, Map};\n-use crate::hir::{HirItem, HirOwner, HirOwnerItems};\n+use crate::hir::{Owner, OwnerNodes, ParentedNode};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -203,30 +203,30 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         let data = &mut self.map[id.owner];\n \n         if data.with_bodies.is_none() {\n-            data.with_bodies = Some(arena.alloc(HirOwnerItems {\n+            data.with_bodies = Some(arena.alloc(OwnerNodes {\n                 hash,\n-                items: IndexVec::new(),\n+                nodes: IndexVec::new(),\n                 bodies: FxHashMap::default(),\n             }));\n         }\n \n-        let items = data.with_bodies.as_mut().unwrap();\n+        let nodes = data.with_bodies.as_mut().unwrap();\n \n         if i == 0 {\n             // Overwrite the dummy hash with the real HIR owner hash.\n-            items.hash = hash;\n+            nodes.hash = hash;\n \n             // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n             //assert!(data.signature.is_none());\n \n             data.signature =\n-                Some(self.arena.alloc(HirOwner { parent: entry.parent, node: entry.node }));\n+                Some(self.arena.alloc(Owner { parent: entry.parent, node: entry.node }));\n         } else {\n             assert_eq!(entry.parent.owner, id.owner);\n             insert_vec_map(\n-                &mut items.items,\n+                &mut nodes.nodes,\n                 id.local_id,\n-                HirItem { parent: entry.parent.local_id, node: entry.node },\n+                ParentedNode { parent: entry.parent.local_id, node: entry.node },\n             );\n         }\n     }"}, {"sha": "13257e7bf47701bd6d6013f5d1129e0cd4ced85c", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -3,7 +3,7 @@ pub use self::definitions::{\n     DefKey, DefPath, DefPathData, DefPathHash, Definitions, DisambiguatedDefPathData,\n };\n \n-use crate::hir::{HirOwner, HirOwnerItems};\n+use crate::hir::{Owner, OwnerNodes};\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_ast::ast::{self, Name, NodeId};\n@@ -130,8 +130,8 @@ fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n }\n \n pub(super) struct HirOwnerData<'hir> {\n-    pub(super) signature: Option<&'hir HirOwner<'hir>>,\n-    pub(super) with_bodies: Option<&'hir mut HirOwnerItems<'hir>>,\n+    pub(super) signature: Option<&'hir Owner<'hir>>,\n+    pub(super) with_bodies: Option<&'hir mut OwnerNodes<'hir>>,\n }\n \n pub struct IndexedHir<'hir> {\n@@ -345,9 +345,12 @@ impl<'hir> Map<'hir> {\n             let owner = self.tcx.hir_owner(id.owner);\n             Entry { parent: owner.parent, node: owner.node }\n         } else {\n-            let owner = self.tcx.hir_owner_items(id.owner);\n-            let item = owner.items[id.local_id].as_ref().unwrap();\n-            Entry { parent: HirId { owner: id.owner, local_id: item.parent }, node: item.node }\n+            let owner = self.tcx.hir_owner_nodes(id.owner);\n+            let node = owner.nodes[id.local_id].as_ref().unwrap();\n+            // FIXME(eddyb) use a single generic type insted of having both\n+            // `Entry` and `ParentedNode`, which are effectively the same.\n+            // Alternatively, rewrite code using `Entry` to use `ParentedNode`.\n+            Entry { parent: HirId { owner: id.owner, local_id: node.parent }, node: node.node }\n         }\n     }\n \n@@ -373,7 +376,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.tcx.hir_owner_items(id.hir_id.owner).bodies.get(&id.hir_id.local_id).unwrap()\n+        self.tcx.hir_owner_nodes(id.hir_id.owner).bodies.get(&id.hir_id.local_id).unwrap()\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {"}, {"sha": "d9dfd2961ff17508e73e4947caaee7b9b7fcbd38", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -18,14 +18,14 @@ use rustc_hir::ItemLocalId;\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n \n-pub struct HirOwner<'tcx> {\n+pub struct Owner<'tcx> {\n     parent: HirId,\n     node: Node<'tcx>,\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirOwner<'tcx> {\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Owner<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let HirOwner { parent, node } = self;\n+        let Owner { parent, node } = self;\n         hcx.while_hashing_hir_bodies(false, |hcx| {\n             parent.hash_stable(hcx, hasher);\n             node.hash_stable(hcx, hasher);\n@@ -34,22 +34,22 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirOwner<'tcx> {\n }\n \n #[derive(Clone)]\n-pub struct HirItem<'tcx> {\n+pub struct ParentedNode<'tcx> {\n     parent: ItemLocalId,\n     node: Node<'tcx>,\n }\n \n-pub struct HirOwnerItems<'tcx> {\n+pub struct OwnerNodes<'tcx> {\n     hash: Fingerprint,\n-    items: IndexVec<ItemLocalId, Option<HirItem<'tcx>>>,\n+    nodes: IndexVec<ItemLocalId, Option<ParentedNode<'tcx>>>,\n     bodies: FxHashMap<ItemLocalId, &'tcx Body<'tcx>>,\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirOwnerItems<'tcx> {\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for OwnerNodes<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        // We ignore the `items` and `bodies` fields since these refer to information included in\n+        // We ignore the `nodes` and `bodies` fields since these refer to information included in\n         // `hash` which is hashed in the collector and used for the crate hash.\n-        let HirOwnerItems { hash, items: _, bodies: _ } = *self;\n+        let OwnerNodes { hash, nodes: _, bodies: _ } = *self;\n         hash.hash_stable(hcx, hasher);\n     }\n }\n@@ -79,8 +79,8 @@ pub fn provide(providers: &mut Providers<'_>) {\n         &tcx.untracked_crate.modules[&module]\n     };\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature.unwrap();\n-    providers.hir_owner_items = |tcx, id| {\n-        tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|items| &**items).unwrap()\n+    providers.hir_owner_nodes = |tcx, id| {\n+        tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes).unwrap()\n     };\n     map::provide(providers);\n }"}, {"sha": "dfe5adb1bbff0ec7183631e5e4b0e207977de9cf", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -46,9 +46,10 @@ macro_rules! err_exhaust {\n     };\n }\n \n+// In the `throw_*` macros, avoid `return` to make them work with `try {}`.\n #[macro_export]\n macro_rules! throw_unsup {\n-    ($($tt:tt)*) => { return Err(err_unsup!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_unsup!($($tt)*))? };\n }\n \n #[macro_export]\n@@ -58,12 +59,12 @@ macro_rules! throw_unsup_format {\n \n #[macro_export]\n macro_rules! throw_inval {\n-    ($($tt:tt)*) => { return Err(err_inval!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_inval!($($tt)*))? };\n }\n \n #[macro_export]\n macro_rules! throw_ub {\n-    ($($tt:tt)*) => { return Err(err_ub!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_ub!($($tt)*))? };\n }\n \n #[macro_export]\n@@ -73,13 +74,13 @@ macro_rules! throw_ub_format {\n \n #[macro_export]\n macro_rules! throw_exhaust {\n-    ($($tt:tt)*) => { return Err(err_exhaust!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err::<!, _>(err_exhaust!($($tt)*))? };\n }\n \n #[macro_export]\n macro_rules! throw_machine_stop {\n     ($($tt:tt)*) => {\n-        return Err($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)).into())\n+        Err::<!, _>($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)))?\n     };\n }\n "}, {"sha": "00e40faa95c304fef90503e99be88ec9a4c0586e", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -64,27 +64,28 @@ rustc_queries! {\n         }\n \n         // The items in a module.\n+        //\n         // This can be conveniently accessed by `tcx.hir().visit_item_likes_in_module`.\n         // Avoid calling this query directly.\n         query hir_module_items(key: LocalDefId) -> &'tcx hir::ModuleItems {\n             eval_always\n             desc { |tcx| \"HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n-        // An HIR item with a `LocalDefId` that can own other HIR items which do\n-        // not themselves have a `LocalDefId`.\n+        // Gives access to the HIR node for the HIR owner `key`.\n+        //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner(key: LocalDefId) -> &'tcx HirOwner<'tcx> {\n+        query hir_owner(key: LocalDefId) -> &'tcx crate::hir::Owner<'tcx> {\n             eval_always\n             desc { |tcx| \"HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n-        // The HIR items which do not themselves have a `LocalDefId` and are\n-        // owned by another HIR item with a `LocalDefId`.\n+        // Gives access to the HIR nodes and bodies inside the HIR owner `key`.\n+        //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner_items(key: LocalDefId) -> &'tcx HirOwnerItems<'tcx> {\n+        query hir_owner_nodes(key: LocalDefId) -> &'tcx crate::hir::OwnerNodes<'tcx> {\n             eval_always\n             desc { |tcx| \"HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }"}, {"sha": "9b67d4235102d7d7df72e61e74662199c286181d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1323,7 +1323,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn encode_metadata(self) -> EncodedMetadata {\n-        let _prof_timer = self.prof.generic_activity(\"generate_crate_metadata\");\n+        let _prof_timer = self.prof.verbose_generic_activity(\"generate_crate_metadata\");\n         self.cstore.encode_metadata(self)\n     }\n "}, {"sha": "eeacd6a6d83f6dda727570cfee51254c66e6a03e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -3148,6 +3148,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n+    super::util::bug::provide(providers);\n     *providers = ty::query::Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         all_local_trait_impls: trait_def::all_local_trait_impls,"}, {"sha": "8fbb9f0891a00e393cbee6c0d7304af77b094be6", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -681,9 +681,9 @@ pub trait PrettyPrinter<'tcx>:\n \n                 if self.tcx().sess.verbose() {\n                     p!(write(\n-                        \" closure_kind_ty={:?} closure_sig_ty={:?}\",\n+                        \" closure_kind_ty={:?} closure_sig_as_fn_ptr_ty={:?}\",\n                         substs.as_closure().kind_ty(did, self.tcx()),\n-                        substs.as_closure().sig_ty(did, self.tcx())\n+                        substs.as_closure().sig_as_fn_ptr_ty(did, self.tcx())\n                     ));\n                 }\n "}, {"sha": "11bedc82eb7d74ff4b41528ad0704079eb99daec", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1,7 +1,6 @@\n use crate::dep_graph::{self, DepConstructor, DepNode, DepNodeParams};\n use crate::hir::exports::Export;\n use crate::hir::map;\n-use crate::hir::{HirOwner, HirOwnerItems};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;"}, {"sha": "00310ef9b3127445763df4a832bff718cc6a7c69", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -371,7 +371,7 @@ pub struct ClosureSubsts<'tcx> {\n /// parent slice and not canonical substs themselves.\n struct SplitClosureSubsts<'tcx> {\n     closure_kind_ty: Ty<'tcx>,\n-    closure_sig_ty: Ty<'tcx>,\n+    closure_sig_as_fn_ptr_ty: Ty<'tcx>,\n     upvar_kinds: &'tcx [GenericArg<'tcx>],\n }\n \n@@ -384,7 +384,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         let parent_len = generics.parent_count;\n         SplitClosureSubsts {\n             closure_kind_ty: self.substs.type_at(parent_len),\n-            closure_sig_ty: self.substs.type_at(parent_len + 1),\n+            closure_sig_as_fn_ptr_ty: self.substs.type_at(parent_len + 1),\n             upvar_kinds: &self.substs[parent_len + 2..],\n         }\n     }\n@@ -412,12 +412,10 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n \n-    /// Returns the type representing the closure signature for this\n-    /// closure; may contain type variables during inference. To get\n-    /// the closure signature during inference, use\n-    /// `infcx.fn_sig(def_id)`.\n-    pub fn sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).closure_sig_ty\n+    /// Returns the `fn` pointer type representing the closure signature for this\n+    /// closure.\n+    pub fn sig_as_fn_ptr_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).closure_sig_as_fn_ptr_ty\n     }\n \n     /// Returns the closure kind for this closure; only usable outside\n@@ -429,16 +427,12 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n \n-    /// Extracts the signature from the closure; only usable outside\n-    /// of an inference context, because in that context we know that\n-    /// there are no type variables.\n-    ///\n-    /// If you have an inference context, use `infcx.closure_sig()`.\n+    /// Extracts the signature from the closure.\n     pub fn sig(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.sig_ty(def_id, tcx);\n+        let ty = self.sig_as_fn_ptr_ty(def_id, tcx);\n         match ty.kind {\n             ty::FnPtr(sig) => sig,\n-            _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty.kind),\n+            _ => bug!(\"closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}\", ty.kind),\n         }\n     }\n }\n@@ -2200,9 +2194,9 @@ impl<'tcx> TyS<'tcx> {\n                 // ignore errors (#54954)\n                 ty::Binder::dummy(FnSig::fake())\n             }\n-            Closure(..) => {\n-                bug!(\"to get the signature of a closure, use `closure_sig()` not `fn_sig()`\",)\n-            }\n+            Closure(..) => bug!(\n+                \"to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`\",\n+            ),\n             _ => bug!(\"Ty::fn_sig() called on non-fn type: {:?}\", self),\n         }\n     }"}, {"sha": "54cd8a29f947416cb4baccd920f05f0977bcb1d5", "filename": "src/librustc/util/bug.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1,6 +1,6 @@\n // These functions are used by macro expansion for bug! and span_bug!\n \n-use crate::ty::tls;\n+use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n \n@@ -39,3 +39,17 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n     });\n     unreachable!();\n }\n+\n+/// A query to trigger a `delay_span_bug`. Clearly, if one has a `tcx` one can already trigger a\n+/// `delay_span_bug`, so what is the point of this? It exists to help us test `delay_span_bug`'s\n+/// interactions with the query system and incremental.\n+pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: rustc_hir::def_id::DefId) {\n+    tcx.sess.delay_span_bug(\n+        tcx.def_span(key),\n+        \"delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\",\n+    );\n+}\n+\n+pub fn provide(providers: &mut crate::ty::query::Providers<'_>) {\n+    *providers = crate::ty::query::Providers { trigger_delay_span_bug, ..*providers };\n+}"}, {"sha": "16ed0854abe6eabd1d529b7f5b901ff99f62cffd", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -20,7 +20,6 @@ rustc = { path = \"../librustc\" }\n rustc-demangle = \"0.1\"\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "e36c80e15a5e0778312c86f1127bd7c0b0504890", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -27,7 +27,6 @@ use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_errors::{FatalError, Handler};\n use rustc_serialize::json;\n use rustc_session::config::{self, OptLevel, OutputFilenames, PrintRequest};"}, {"sha": "299f4d2c6699897b48b90ecc0a5105b1f4577525", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,7 +25,7 @@ rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_attr = { path = \"../librustc_attr\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_symbol_mangling = { path = \"../librustc_symbol_mangling\" }\n rustc_data_structures = { path = \"../librustc_data_structures\"}\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n@@ -34,3 +34,4 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "672b6e4aa4600c1e18ee055cd7ebb65456398573", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -6,6 +6,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_session::config::{\n     self, CFGuard, DebugInfo, OutputFilenames, OutputType, PrintRequest, Sanitizer,\n };\n+use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n@@ -36,8 +37,6 @@ use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::str;\n \n-pub use rustc_codegen_utils::link::*;\n-\n pub fn remove(sess: &Session, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n         sess.err(&format!(\"failed to remove {}: {}\", path.display(), e));"}, {"sha": "8a2503ce16730679fd3e37bdcb19d3fb5ab8d9aa", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -8,7 +8,6 @@ use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n use rustc::ty::{SymbolName, TyCtxt};\n use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n-use rustc_codegen_utils::symbol_names;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n@@ -423,17 +422,21 @@ pub fn symbol_name_for_instance_in_crate<'tcx>(\n     // This is something instantiated in an upstream crate, so we have to use\n     // the slower (because uncached) version of computing the symbol name.\n     match symbol {\n-        ExportedSymbol::NonGeneric(def_id) => symbol_names::symbol_name_for_instance_in_crate(\n-            tcx,\n-            Instance::mono(tcx, def_id),\n-            instantiating_crate,\n-        ),\n-        ExportedSymbol::Generic(def_id, substs) => symbol_names::symbol_name_for_instance_in_crate(\n-            tcx,\n-            Instance::new(def_id, substs),\n-            instantiating_crate,\n-        ),\n-        ExportedSymbol::DropGlue(ty) => symbol_names::symbol_name_for_instance_in_crate(\n+        ExportedSymbol::NonGeneric(def_id) => {\n+            rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n+                tcx,\n+                Instance::mono(tcx, def_id),\n+                instantiating_crate,\n+            )\n+        }\n+        ExportedSymbol::Generic(def_id, substs) => {\n+            rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n+                tcx,\n+                Instance::new(def_id, substs),\n+                instantiating_crate,\n+            )\n+        }\n+        ExportedSymbol::DropGlue(ty) => rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n             tcx,\n             Instance::resolve_drop_in_place(tcx, ty),\n             instantiating_crate,"}, {"sha": "834702a30099c9d427793c1e88a2a05d0d0d7c3b", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -36,7 +36,6 @@ use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc_attr as attr;\n-use rustc_codegen_utils::{check_for_rustc_errors_attr, symbol_names_test};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n@@ -47,6 +46,7 @@ use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, EntryFnType, Lto};\n use rustc_session::Session;\n use rustc_span::Span;\n+use rustc_symbol_mangling::test as symbol_names_test;\n \n use std::cmp;\n use std::ops::{Deref, DerefMut};\n@@ -514,8 +514,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> OngoingCodegen<B> {\n-    check_for_rustc_errors_attr(tcx);\n-\n     // Skip crate items and just output metadata in -Z no-codegen mode.\n     if tcx.sess.opts.debugging_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n         let ongoing_codegen = start_async_codegen(backend, tcx, metadata, 1);"}, {"sha": "4e861f45ff7a50f476e76e45a842cd3cda9da95d", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -2,15 +2,22 @@ use super::write::WriteBackendMethods;\n use super::CodegenObject;\n use crate::ModuleCodegen;\n \n-use rustc::middle::cstore::EncodedMetadata;\n+use rustc::dep_graph::DepGraph;\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n-use rustc::ty::Ty;\n-use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n+use rustc::ty::{Ty, TyCtxt};\n+use rustc::util::common::ErrorReported;\n use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_session::{config, Session};\n+use rustc_session::{\n+    config::{self, OutputFilenames, PrintRequest},\n+    Session,\n+};\n use rustc_span::symbol::Symbol;\n \n+pub use rustc_data_structures::sync::MetadataRef;\n+\n+use std::any::Any;\n use std::sync::Arc;\n \n pub trait BackendTypes {\n@@ -37,6 +44,50 @@ impl<'tcx, T> Backend<'tcx> for T where\n {\n }\n \n+pub trait CodegenBackend {\n+    fn init(&self, _sess: &Session) {}\n+    fn print(&self, _req: PrintRequest, _sess: &Session) {}\n+    fn target_features(&self, _sess: &Session) -> Vec<Symbol> {\n+        vec![]\n+    }\n+    fn print_passes(&self) {}\n+    fn print_version(&self) {}\n+\n+    fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n+    fn provide(&self, _providers: &mut Providers<'_>);\n+    fn provide_extern(&self, _providers: &mut Providers<'_>);\n+    fn codegen_crate<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        metadata: EncodedMetadata,\n+        need_metadata_module: bool,\n+    ) -> Box<dyn Any>;\n+\n+    /// This is called on the returned `Box<dyn Any>` from `codegen_backend`\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics when the passed `Box<dyn Any>` was not returned by `codegen_backend`.\n+    fn join_codegen(\n+        &self,\n+        ongoing_codegen: Box<dyn Any>,\n+        sess: &Session,\n+        dep_graph: &DepGraph,\n+    ) -> Result<Box<dyn Any>, ErrorReported>;\n+\n+    /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics when the passed `Box<dyn Any>` was not returned by `join_codegen`.\n+    fn link(\n+        &self,\n+        sess: &Session,\n+        codegen_results: Box<dyn Any>,\n+        outputs: &OutputFilenames,\n+    ) -> Result<(), ErrorReported>;\n+}\n+\n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send + Sync {\n     fn new_metadata(&self, sess: TyCtxt<'_>, mod_name: &str) -> Self::Module;\n     fn write_compressed_metadata<'tcx>("}, {"sha": "1bc9f297ea1b122aa2db508be6e393b46232afd4", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -29,7 +29,7 @@ mod write;\n \n pub use self::abi::AbiBuilderMethods;\n pub use self::asm::{AsmBuilderMethods, AsmMethods};\n-pub use self::backend::{Backend, BackendTypes, ExtraBackendMethods};\n+pub use self::backend::{Backend, BackendTypes, CodegenBackend, ExtraBackendMethods};\n pub use self::builder::{BuilderMethods, OverflowOp};\n pub use self::consts::ConstMethods;\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};"}, {"sha": "561692e70669aaa0ad54c3f4a9a7da62adf7f1a9", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5f13820478907b09d50baf74f3ff2b78499ecd6c/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13820478907b09d50baf74f3ff2b78499ecd6c/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=5f13820478907b09d50baf74f3ff2b78499ecd6c", "patch": "@@ -1,64 +0,0 @@\n-//! The Rust compiler.\n-//!\n-//! # Note\n-//!\n-//! This API is completely unstable and subject to change.\n-\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-\n-use std::any::Any;\n-\n-use rustc::dep_graph::DepGraph;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::ty::query::Providers;\n-use rustc::ty::TyCtxt;\n-use rustc::util::common::ErrorReported;\n-use rustc_session::config::{OutputFilenames, PrintRequest};\n-use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n-\n-pub use rustc_data_structures::sync::MetadataRef;\n-\n-pub trait CodegenBackend {\n-    fn init(&self, _sess: &Session) {}\n-    fn print(&self, _req: PrintRequest, _sess: &Session) {}\n-    fn target_features(&self, _sess: &Session) -> Vec<Symbol> {\n-        vec![]\n-    }\n-    fn print_passes(&self) {}\n-    fn print_version(&self) {}\n-\n-    fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n-    fn provide(&self, _providers: &mut Providers<'_>);\n-    fn provide_extern(&self, _providers: &mut Providers<'_>);\n-    fn codegen_crate<'tcx>(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        metadata: EncodedMetadata,\n-        need_metadata_module: bool,\n-    ) -> Box<dyn Any>;\n-\n-    /// This is called on the returned `Box<dyn Any>` from `codegen_backend`\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics when the passed `Box<dyn Any>` was not returned by `codegen_backend`.\n-    fn join_codegen(\n-        &self,\n-        ongoing_codegen: Box<dyn Any>,\n-        sess: &Session,\n-        dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported>;\n-\n-    /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics when the passed `Box<dyn Any>` was not returned by `join_codegen`.\n-    fn link(\n-        &self,\n-        sess: &Session,\n-        codegen_results: Box<dyn Any>,\n-        outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported>;\n-}"}, {"sha": "38906bbaef8104f07fcf152e030ec1bc690ad9b8", "filename": "src/librustc_codegen_utils/lib.rs", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5f13820478907b09d50baf74f3ff2b78499ecd6c/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13820478907b09d50baf74f3ff2b78499ecd6c/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=5f13820478907b09d50baf74f3ff2b78499ecd6c", "patch": "@@ -1,66 +0,0 @@\n-//! # Note\n-//!\n-//! This API is completely unstable and subject to change.\n-\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(never_type)]\n-#![feature(nll)]\n-#![feature(in_band_lifetimes)]\n-#![recursion_limit = \"256\"]\n-\n-#[macro_use]\n-extern crate rustc;\n-\n-use rustc::ty::query::Providers;\n-use rustc::ty::TyCtxt;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_span::symbol::sym;\n-\n-pub mod codegen_backend;\n-pub mod link;\n-pub mod symbol_names;\n-pub mod symbol_names_test;\n-\n-pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: DefId) {\n-    tcx.sess.delay_span_bug(\n-        tcx.def_span(key),\n-        \"delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\",\n-    );\n-}\n-\n-/// check for the #[rustc_error] annotation, which forces an\n-/// error in codegen. This is used to write compile-fail tests\n-/// that actually test that compilation succeeds without\n-/// reporting an error.\n-pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n-    if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-        let attrs = &*tcx.get_attrs(def_id);\n-        for attr in attrs {\n-            if attr.check_name(sym::rustc_error) {\n-                match attr.meta_item_list() {\n-                    // check if there is a #[rustc_error(delayed)]\n-                    Some(list) => {\n-                        if list.iter().any(|list_item| {\n-                            list_item.ident().map(|i| i.name)\n-                                == Some(sym::delay_span_bug_from_inside_query)\n-                        }) {\n-                            tcx.ensure().trigger_delay_span_bug(def_id);\n-                        }\n-                    }\n-                    // bare #[rustc_error]\n-                    None => {\n-                        tcx.sess.span_fatal(\n-                            tcx.def_span(def_id),\n-                            \"fatal error triggered by #[rustc_error]\",\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-pub fn provide(providers: &mut Providers<'_>) {\n-    crate::symbol_names::provide(providers);\n-    *providers = Providers { trigger_delay_span_bug, ..*providers };\n-}"}, {"sha": "aec10ee5ef53776a8066b07e192f8004cde0686e", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -27,13 +27,12 @@ rustc_parse = { path = \"../librustc_parse\" }\n rustc_plugin_impl = { path = \"../librustc_plugin_impl\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n-rustc_session = { path = \"../librustc_session\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }"}, {"sha": "9097a72f36f49c4931971b6a2ac87de96a6a3738", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -21,8 +21,8 @@ pub extern crate rustc_plugin_impl as plugin;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n-use rustc_codegen_ssa::CodegenResults;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_ast::ast;\n+use rustc_codegen_ssa::{traits::CodegenBackend, CodegenResults};\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::{\n@@ -43,6 +43,8 @@ use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest};\n use rustc_session::lint::{Lint, LintId};\n use rustc_session::{config, DiagnosticOutput, Session};\n use rustc_session::{early_error, early_warn};\n+use rustc_span::source_map::{FileLoader, FileName};\n+use rustc_span::symbol::sym;\n \n use std::borrow::Cow;\n use std::cmp::max;\n@@ -58,11 +60,6 @@ use std::process::{self, Command, Stdio};\n use std::str;\n use std::time::Instant;\n \n-use rustc_ast::ast;\n-use rustc_span::source_map::FileLoader;\n-use rustc_span::symbol::sym;\n-use rustc_span::FileName;\n-\n mod args;\n pub mod pretty;\n \n@@ -693,16 +690,15 @@ impl RustcDefaultCalls {\n                     let t_outputs = rustc_interface::util::build_output_filenames(\n                         input, odir, ofile, attrs, sess,\n                     );\n-                    let id = rustc_codegen_utils::link::find_crate_name(Some(sess), attrs, input);\n+                    let id = rustc_session::output::find_crate_name(Some(sess), attrs, input);\n                     if *req == PrintRequest::CrateName {\n                         println!(\"{}\", id);\n                         continue;\n                     }\n                     let crate_types = collect_crate_types(sess, attrs);\n                     for &style in &crate_types {\n-                        let fname = rustc_codegen_utils::link::filename_for_input(\n-                            sess, style, &id, &t_outputs,\n-                        );\n+                        let fname =\n+                            rustc_session::output::filename_for_input(sess, style, &id, &t_outputs);\n                         println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n                     }\n                 }"}, {"sha": "a7a272654f7f9bef526a86456229e4ae0b56eddf", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -53,9 +53,9 @@ const BASE_FN: &[&str] = &[\n \n /// DepNodes for Hir, which is pretty much everything\n const BASE_HIR: &[&str] = &[\n-    // hir_owner and hir_owner_items should be computed for all nodes\n+    // hir_owner and hir_owner_nodes should be computed for all nodes\n     label_strs::hir_owner,\n-    label_strs::hir_owner_items,\n+    label_strs::hir_owner_nodes,\n ];\n \n /// `impl` implementation of struct/trait"}, {"sha": "8bd1514a9fb0a89429efb9cc70c6e69635177312", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1506,16 +1506,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         closure_kind_ty.to_opt_closure_kind()\n     }\n \n-    /// Obtains the signature of a closure. For closures, unlike\n-    /// `tcx.fn_sig(def_id)`, this method will work during the\n-    /// type-checking of the enclosing function and return the closure\n-    /// signature in its partially inferred state.\n-    pub fn closure_sig(&self, def_id: DefId, substs: SubstsRef<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n-        let closure_sig_ty = self.shallow_resolve(closure_sig_ty);\n-        closure_sig_ty.fn_sig(self.tcx)\n-    }\n-\n     /// Clears the selection, evaluation, and projection caches. This is useful when\n     /// repeatedly attempting to select an `Obligation` while changing only\n     /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing."}, {"sha": "2e055ff183f2c26eba1ff1ba8561f0ceda59dab1", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -28,7 +28,7 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_traits = { path = \"../librustc_traits\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_symbol_mangling = { path = \"../librustc_symbol_mangling\" }\n rustc_codegen_llvm = { path = \"../librustc_codegen_llvm\", optional = true }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_infer = { path = \"../librustc_infer\" }"}, {"sha": "65a7a48d440bde2a758b951f66de818fcaa0d764", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -5,7 +5,7 @@ use rustc::ty;\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast::{self, MetaItemKind};\n use rustc_ast::token;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::OnDrop;"}, {"sha": "b7a5f2f4531e59f5129ffdbf8683e9665b066584", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -14,8 +14,7 @@ use rustc::util::common::ErrorReported;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self, ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_codegen_utils::link::filename_for_metadata;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::sync::{par_iter, Lrc, Once, ParallelIterator, WorkerLocal};\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::PResult;\n@@ -29,9 +28,11 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::{Resolver, ResolverArenas};\n-use rustc_session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::config::{PpMode, PpSourceMode};\n+use rustc_session::config::{\n+    self, CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode,\n+};\n use rustc_session::lint;\n+use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n@@ -477,12 +478,7 @@ fn generated_output_paths(\n             // by appending `.rlib`, `.exe`, etc., so we can skip this transformation.\n             OutputType::Exe if !exact_name => {\n                 for crate_type in sess.crate_types.borrow().iter() {\n-                    let p = ::rustc_codegen_utils::link::filename_for_input(\n-                        sess,\n-                        *crate_type,\n-                        crate_name,\n-                        outputs,\n-                    );\n+                    let p = filename_for_input(sess, *crate_type, crate_name, outputs);\n                     out_filenames.push(p);\n                 }\n             }\n@@ -682,7 +678,7 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_ty::provide(providers);\n     rustc_metadata::provide(providers);\n     rustc_lint::provide(providers);\n-    rustc_codegen_utils::provide(providers);\n+    rustc_symbol_mangling::provide(providers);\n     rustc_codegen_ssa::provide(providers);\n }\n "}, {"sha": "3ca92216003d16976b78d44a5537aca33d109b16", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -4,17 +4,18 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::ty::steal::Steal;\n-use rustc::ty::{GlobalCtxt, ResolverOutputs};\n+use rustc::ty::{GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_ast::{self, ast};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::Crate;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_session::config::{OutputFilenames, OutputType};\n-use rustc_session::Session;\n+use rustc_session::{output::find_crate_name, Session};\n+use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::mem;\n@@ -157,11 +158,7 @@ impl<'tcx> Queries<'tcx> {\n                 None => {\n                     let parse_result = self.parse()?;\n                     let krate = parse_result.peek();\n-                    rustc_codegen_utils::link::find_crate_name(\n-                        Some(self.session()),\n-                        &krate.attrs,\n-                        &self.compiler.input,\n-                    )\n+                    find_crate_name(Some(self.session()), &krate.attrs, &self.compiler.input)\n                 }\n             })\n         })\n@@ -277,11 +274,58 @@ impl<'tcx> Queries<'tcx> {\n                 // Don't do code generation if there were any errors\n                 self.session().compile_status()?;\n \n+                // Hook for compile-fail tests.\n+                Self::check_for_rustc_errors_attr(tcx);\n+\n                 Ok(passes::start_codegen(&***self.codegen_backend(), tcx, &*outputs.peek()))\n             })\n         })\n     }\n \n+    /// Check for the `#[rustc_error]` annotation, which forces an error in codegen. This is used\n+    /// to write compile-fail tests that actually test that compilation succeeds without reporting\n+    /// an error.\n+    fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n+        let def_id = match tcx.entry_fn(LOCAL_CRATE) {\n+            Some((def_id, _)) => def_id,\n+            _ => return,\n+        };\n+\n+        let attrs = &*tcx.get_attrs(def_id);\n+        let attrs = attrs.iter().filter(|attr| attr.check_name(sym::rustc_error));\n+        for attr in attrs {\n+            match attr.meta_item_list() {\n+                // Check if there is a `#[rustc_error(delay_span_bug_from_inside_query)]`.\n+                Some(list)\n+                    if list.iter().any(|list_item| {\n+                        matches!(\n+                            list_item.ident().map(|i| i.name),\n+                            Some(sym::delay_span_bug_from_inside_query)\n+                        )\n+                    }) =>\n+                {\n+                    tcx.ensure().trigger_delay_span_bug(def_id);\n+                }\n+\n+                // Bare `#[rustc_error]`.\n+                None => {\n+                    tcx.sess.span_fatal(\n+                        tcx.def_span(def_id),\n+                        \"fatal error triggered by #[rustc_error]\",\n+                    );\n+                }\n+\n+                // Some other attribute.\n+                Some(_) => {\n+                    tcx.sess.span_warn(\n+                        tcx.def_span(def_id),\n+                        \"unexpected annotation used with `#[rustc_error(...)]!\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn linker(&'tcx self) -> Result<Linker> {\n         let dep_graph = self.dep_graph()?;\n         let prepare_outputs = self.prepare_outputs()?;"}, {"sha": "c6f2d1b82fcf484da7c4cc4293d01106edd03d11", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n use rustc_ast::ptr::P;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::{self, ast};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n@@ -20,7 +20,7 @@ use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n-use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};\n+use rustc_session::{config, early_error, filesearch, output, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap};\n use rustc_span::symbol::{sym, Symbol};\n@@ -505,15 +505,15 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n     if base.is_empty() {\n         base.extend(attr_types);\n         if base.is_empty() {\n-            base.push(::rustc_codegen_utils::link::default_output_for_target(session));\n+            base.push(output::default_output_for_target(session));\n         } else {\n             base.sort();\n             base.dedup();\n         }\n     }\n \n     base.retain(|crate_type| {\n-        let res = !::rustc_codegen_utils::link::invalid_output_for_target(session, *crate_type);\n+        let res = !output::invalid_output_for_target(session, *crate_type);\n \n         if !res {\n             session.warn(&format!("}, {"sha": "1f551583b0c863fbf0cc20159c734040c912fda6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -16,6 +16,7 @@ use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n use rustc_session::config;\n+use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::edition::Edition;\n@@ -852,11 +853,7 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 let name = match orig_name {\n                     Some(orig_name) => {\n-                        crate::validate_crate_name(\n-                            Some(self.sess),\n-                            &orig_name.as_str(),\n-                            Some(item.span),\n-                        );\n+                        validate_crate_name(Some(self.sess), &orig_name.as_str(), Some(item.span));\n                         orig_name\n                     }\n                     None => item.ident.name,"}, {"sha": "2993aed2f8ab438062f6158d59c5acf63d1831de", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -29,37 +29,3 @@ mod rmeta;\n pub mod creader;\n pub mod dynamic_lib;\n pub mod locator;\n-\n-pub fn validate_crate_name(\n-    sess: Option<&rustc_session::Session>,\n-    s: &str,\n-    sp: Option<rustc_span::Span>,\n-) {\n-    let mut err_count = 0;\n-    {\n-        let mut say = |s: &str| {\n-            match (sp, sess) {\n-                (_, None) => bug!(\"{}\", s),\n-                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-                (None, Some(sess)) => sess.err(s),\n-            }\n-            err_count += 1;\n-        };\n-        if s.is_empty() {\n-            say(\"crate name must not be empty\");\n-        }\n-        for c in s.chars() {\n-            if c.is_alphanumeric() {\n-                continue;\n-            }\n-            if c == '_' {\n-                continue;\n-            }\n-            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n-        }\n-    }\n-\n-    if err_count > 0 {\n-        sess.unwrap().abort_if_errors();\n-    }\n-}"}, {"sha": "1b15646ff9b527d1c984fa47c02b531927f92561", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -140,7 +140,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }\n     item_attrs => { cdata.get_item_attrs(def_id.index, tcx.sess) }\n-    // FIXME(#38501) We've skipped a `read` on the `hir_owner_items` of\n+    // FIXME(#38501) We've skipped a `read` on the `hir_owner_nodes` of\n     // a `fn` when encoding, so the dep-tracking wouldn't work.\n     // This is only used by rustdoc anyway, which shouldn't have\n     // incremental recompilation ever enabled."}, {"sha": "5963047fc760d7fd678849926a0873f4ade3bb68", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 133, "deletions": 31, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -18,12 +18,13 @@ use rustc_ast::attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{join, Lrc};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n+use rustc_hir::def_id::DefIdSet;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::vec::Idx;\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n@@ -467,12 +468,6 @@ impl<'tcx> EncodeContext<'tcx> {\n         let impls = self.encode_impls();\n         let impl_bytes = self.position() - i;\n \n-        // Encode exported symbols info.\n-        i = self.position();\n-        let exported_symbols = self.tcx.exported_symbols(LOCAL_CRATE);\n-        let exported_symbols = self.encode_exported_symbols(&exported_symbols);\n-        let exported_symbols_bytes = self.position() - i;\n-\n         let tcx = self.tcx;\n \n         // Encode the items.\n@@ -513,6 +508,13 @@ impl<'tcx> EncodeContext<'tcx> {\n         let proc_macro_data = self.encode_proc_macros();\n         let proc_macro_data_bytes = self.position() - i;\n \n+        // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode\n+        // this last to give the prefetching as much time as possible to complete.\n+        i = self.position();\n+        let exported_symbols = self.tcx.exported_symbols(LOCAL_CRATE);\n+        let exported_symbols = self.encode_exported_symbols(&exported_symbols);\n+        let exported_symbols_bytes = self.position() - i;\n+\n         let attrs = tcx.hir().krate_attrs();\n         let has_default_lib_allocator = attr::contains_name(&attrs, sym::default_lib_allocator);\n \n@@ -888,6 +890,8 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+\n+        // This should be kept in sync with `PrefetchVisitor.visit_trait_item`.\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -959,6 +963,9 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+\n+        // The following part should be kept in sync with `PrefetchVisitor.visit_impl_item`.\n+\n         let mir = match ast_item.kind {\n             hir::ImplItemKind::Const(..) => true,\n             hir::ImplItemKind::Fn(ref sig, _) => {\n@@ -1250,6 +1257,8 @@ impl EncodeContext<'tcx> {\n             _ => {}\n         }\n \n+        // The following part should be kept in sync with `PrefetchVisitor.visit_item`.\n+\n         let mir = match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n             hir::ItemKind::Fn(ref sig, ..) => {\n@@ -1697,6 +1706,70 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n     }\n }\n \n+/// Used to prefetch queries which will be needed later by metadata encoding.\n+/// Only a subset of the queries are actually prefetched to keep this code smaller.\n+struct PrefetchVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    mir_keys: &'tcx DefIdSet,\n+}\n+\n+impl<'tcx> PrefetchVisitor<'tcx> {\n+    fn prefetch_mir(&self, def_id: DefId) {\n+        if self.mir_keys.contains(&def_id) {\n+            self.tcx.optimized_mir(def_id);\n+            self.tcx.promoted_mir(def_id);\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n+    fn visit_item(&self, item: &hir::Item<'_>) {\n+        // This should be kept in sync with `encode_info_for_item`.\n+        let tcx = self.tcx;\n+        match item.kind {\n+            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => {\n+                self.prefetch_mir(tcx.hir().local_def_id(item.hir_id))\n+            }\n+            hir::ItemKind::Fn(ref sig, ..) => {\n+                let def_id = tcx.hir().local_def_id(item.hir_id);\n+                let generics = tcx.generics_of(def_id);\n+                let needs_inline = generics.requires_monomorphization(tcx)\n+                    || tcx.codegen_fn_attrs(def_id).requests_inline();\n+                if needs_inline || sig.header.constness == hir::Constness::Const {\n+                    self.prefetch_mir(def_id)\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+\n+    fn visit_trait_item(&self, trait_item: &'v hir::TraitItem<'v>) {\n+        // This should be kept in sync with `encode_info_for_trait_item`.\n+        self.prefetch_mir(self.tcx.hir().local_def_id(trait_item.hir_id));\n+    }\n+\n+    fn visit_impl_item(&self, impl_item: &'v hir::ImplItem<'v>) {\n+        // This should be kept in sync with `encode_info_for_impl_item`.\n+        let tcx = self.tcx;\n+        match impl_item.kind {\n+            hir::ImplItemKind::Const(..) => {\n+                self.prefetch_mir(tcx.hir().local_def_id(impl_item.hir_id))\n+            }\n+            hir::ImplItemKind::Fn(ref sig, _) => {\n+                let def_id = tcx.hir().local_def_id(impl_item.hir_id);\n+                let generics = tcx.generics_of(def_id);\n+                let needs_inline = generics.requires_monomorphization(tcx)\n+                    || tcx.codegen_fn_attrs(def_id).requests_inline();\n+                let is_const_fn = sig.header.constness == hir::Constness::Const;\n+                if needs_inline || is_const_fn {\n+                    self.prefetch_mir(def_id)\n+                }\n+            }\n+            hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(..) => (),\n+        }\n+    }\n+}\n+\n // NOTE(eddyb) The following comment was preserved for posterity, even\n // though it's no longer relevant as EBML (which uses nested & tagged\n // \"documents\") was replaced with a scheme that can't go out of bounds.\n@@ -1721,35 +1794,64 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // generated regardless of trailing bytes that end up in it.\n \n pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n+    // Since encoding metadata is not in a query, and nothing is cached,\n+    // there's no need to do dep-graph tracking for any of it.\n+    tcx.dep_graph.assert_ignored();\n+\n+    join(\n+        || encode_metadata_impl(tcx),\n+        || {\n+            if tcx.sess.threads() == 1 {\n+                return;\n+            }\n+            // Prefetch some queries used by metadata encoding.\n+            // This is not necessary for correctness, but is only done for performance reasons.\n+            // It can be removed if it turns out to cause trouble or be detrimental to performance.\n+            join(\n+                || {\n+                    if !tcx.sess.opts.output_types.should_codegen() {\n+                        // We won't emit MIR, so don't prefetch it.\n+                        return;\n+                    }\n+                    tcx.hir().krate().par_visit_all_item_likes(&PrefetchVisitor {\n+                        tcx,\n+                        mir_keys: tcx.mir_keys(LOCAL_CRATE),\n+                    });\n+                },\n+                || tcx.exported_symbols(LOCAL_CRATE),\n+            );\n+        },\n+    )\n+    .0\n+}\n+\n+fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let mut encoder = opaque::Encoder::new(vec![]);\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n     // Will be filled with the root position after encoding everything.\n     encoder.emit_raw_bytes(&[0, 0, 0, 0]);\n \n-    // Since encoding metadata is not in a query, and nothing is cached,\n-    // there's no need to do dep-graph tracking for any of it.\n-    let (root, mut result) = tcx.dep_graph.with_ignore(move || {\n-        let mut ecx = EncodeContext {\n-            opaque: encoder,\n-            tcx,\n-            per_def: Default::default(),\n-            lazy_state: LazyState::NoNode,\n-            type_shorthands: Default::default(),\n-            predicate_shorthands: Default::default(),\n-            source_file_cache: tcx.sess.source_map().files()[0].clone(),\n-            interpret_allocs: Default::default(),\n-            interpret_allocs_inverse: Default::default(),\n-        };\n-\n-        // Encode the rustc version string in a predictable location.\n-        rustc_version().encode(&mut ecx).unwrap();\n-\n-        // Encode all the entries and extra information in the crate,\n-        // culminating in the `CrateRoot` which points to all of it.\n-        let root = ecx.encode_crate_root();\n-        (root, ecx.opaque.into_inner())\n-    });\n+    let mut ecx = EncodeContext {\n+        opaque: encoder,\n+        tcx,\n+        per_def: Default::default(),\n+        lazy_state: LazyState::NoNode,\n+        type_shorthands: Default::default(),\n+        predicate_shorthands: Default::default(),\n+        source_file_cache: tcx.sess.source_map().files()[0].clone(),\n+        interpret_allocs: Default::default(),\n+        interpret_allocs_inverse: Default::default(),\n+    };\n+\n+    // Encode the rustc version string in a predictable location.\n+    rustc_version().encode(&mut ecx).unwrap();\n+\n+    // Encode all the entries and extra information in the crate,\n+    // culminating in the `CrateRoot` which points to all of it.\n+    let root = ecx.encode_crate_root();\n+\n+    let mut result = ecx.opaque.into_inner();\n \n     // Encode the root position.\n     let header = METADATA_HEADER.len();"}, {"sha": "448c1610c13684f7e4aa142175209dc57a9fe6b9", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -196,14 +196,15 @@ crate struct CrateRoot<'tcx> {\n     source_map: Lazy<[rustc_span::SourceFile]>,\n     def_path_table: Lazy<map::definitions::DefPathTable>,\n     impls: Lazy<[TraitImpls]>,\n-    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n     interpret_alloc_index: Lazy<[u32]>,\n \n     per_def: LazyPerDefTables<'tcx>,\n \n     /// The DefIndex's of any proc macros declared by this crate.\n     proc_macro_data: Option<Lazy<[DefIndex]>>,\n \n+    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n+\n     compiler_builtins: bool,\n     needs_allocator: bool,\n     needs_panic_runtime: bool,"}, {"sha": "c545b6df70c11b29c7aad8fd28b4062b6929e5d2", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1684,7 +1684,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 // case it ends up being assigned into the return place.\n                                 annotated_closure = self.annotate_fn_sig(\n                                     *def_id,\n-                                    self.infcx.closure_sig(*def_id, *substs),\n+                                    substs.as_closure().sig(*def_id, self.infcx.tcx),\n                                 );\n                                 debug!(\n                                     \"annotate_argument_and_return_for_borrow: \\"}, {"sha": "521861624cb7a8f80ec755eca8cb900ed98f5ef3", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -2085,9 +2085,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n                         let sig = match op.ty(*body, tcx).kind {\n-                            ty::Closure(def_id, substs) => {\n-                                substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx)\n-                            }\n+                            ty::Closure(def_id, substs) => substs.as_closure().sig(def_id, tcx),\n                             _ => bug!(),\n                         };\n                         let ty_fn_ptr_from = tcx.coerce_closure_fn_ty(sig, *unsafety);"}, {"sha": "c39694f24f75ac9e1dbb3341e01fd4f7fea56f41", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -580,7 +580,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         match defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let closure_sig = substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx);\n+                let closure_sig = substs.as_closure().sig(def_id, tcx);\n                 let inputs_and_output = closure_sig.inputs_and_output();\n                 let closure_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 ty::Binder::fuse(closure_ty, inputs_and_output, |closure_ty, inputs_and_output| {"}, {"sha": "88cb74ebf8c98bca2b1874dd578d8bd0ca7000d3", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -171,7 +171,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Called to evaluate `Abort` MIR terminator.\n     fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, !> {\n-        throw_unsup_format!(\"aborting execution is not supported\");\n+        throw_unsup_format!(\"aborting execution is not supported\")\n     }\n \n     /// Called for all binary operations where the LHS has pointer type."}, {"sha": "8d7cafc34b3566ff2270006b292d743d89b4f3cf", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -192,19 +192,19 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n         _unwind: Option<BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"));\n+        throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"))\n     }\n \n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _msg: &rustc::mir::AssertMessage<'tcx>,\n         _unwind: Option<rustc::mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        bug!(\"panics terminators are not evaluated in ConstProp\");\n+        bug!(\"panics terminators are not evaluated in ConstProp\")\n     }\n \n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {\n-        throw_unsup!(ConstPropUnsupported(\"ptr-to-int casts aren't supported in ConstProp\"));\n+        throw_unsup!(ConstPropUnsupported(\"ptr-to-int casts aren't supported in ConstProp\"))\n     }\n \n     fn binary_ptr_op(\n@@ -217,7 +217,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         throw_unsup!(ConstPropUnsupported(\n             \"pointer arithmetic or comparisons aren't supported \\\n             in ConstProp\"\n-        ));\n+        ))\n     }\n \n     #[inline(always)]\n@@ -240,7 +240,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"can't const prop `box` keyword\"));\n+        throw_unsup!(ConstPropUnsupported(\"can't const prop `box` keyword\"))\n     }\n \n     fn access_local("}, {"sha": "52c7225a850fbb839b83076e27ec2b348515289d", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -22,6 +22,8 @@ const HINT_THRESHOLD: usize = 100;\n \n const INSTR_COST: usize = 5;\n const CALL_PENALTY: usize = 25;\n+const LANDINGPAD_PENALTY: usize = 50;\n+const RESUME_PENALTY: usize = 45;\n \n const UNKNOWN_SIZE_COST: usize = 10;\n \n@@ -325,6 +327,7 @@ impl Inliner<'tcx> {\n                     if ty.needs_drop(tcx, param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {\n+                            cost += LANDINGPAD_PENALTY;\n                             work_list.push(unwind);\n                         }\n                     } else {\n@@ -340,7 +343,7 @@ impl Inliner<'tcx> {\n                     threshold = 0;\n                 }\n \n-                TerminatorKind::Call { func: Operand::Constant(ref f), .. } => {\n+                TerminatorKind::Call { func: Operand::Constant(ref f), cleanup, .. } => {\n                     if let ty::FnDef(def_id, _) = f.literal.ty.kind {\n                         // Don't give intrinsics the extra penalty for calls\n                         let f = tcx.fn_sig(def_id);\n@@ -349,9 +352,21 @@ impl Inliner<'tcx> {\n                         } else {\n                             cost += CALL_PENALTY;\n                         }\n+                    } else {\n+                        cost += CALL_PENALTY;\n+                    }\n+                    if cleanup.is_some() {\n+                        cost += LANDINGPAD_PENALTY;\n+                    }\n+                }\n+                TerminatorKind::Assert { cleanup, .. } => {\n+                    cost += CALL_PENALTY;\n+\n+                    if cleanup.is_some() {\n+                        cost += LANDINGPAD_PENALTY;\n                     }\n                 }\n-                TerminatorKind::Assert { .. } => cost += CALL_PENALTY,\n+                TerminatorKind::Resume => cost += RESUME_PENALTY,\n                 _ => cost += INSTR_COST,\n             }\n "}, {"sha": "de851d97727276e17c39b042ac7c06c0ae8262e7", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -13,12 +13,11 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n rustc_ast = { path = \"../librustc_ast\" }\n-rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rls-data = \"0.19\"\n rls-span = \"0.5\""}, {"sha": "bb717981a3be73afa4238a4027983c5040bd660d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -16,12 +16,12 @@ use rustc_ast::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n use rustc_ast::util::comments::strip_doc_comment_decoration;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast_pretty::pprust::{self, param_to_string, ty_to_string};\n-use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_session::config::{CrateType, Input, OutputType};\n+use rustc_session::output::{filename_for_metadata, out_filename};\n use rustc_span::source_map::Spanned;\n use rustc_span::*;\n "}, {"sha": "cc4d525d62887c3a4dbf810978740a6da69a444a", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -21,3 +21,5 @@ pub mod search_paths;\n \n mod session;\n pub use session::*;\n+\n+pub mod output;"}, {"sha": "ba3d08cfc7c14064ee2057a07fd9f8187fa42b41", "filename": "src/librustc_session/output.rs", "status": "renamed", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_session%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_session%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foutput.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1,6 +1,7 @@\n+//! Related to out filenames of compilation (e.g. save analysis, binaries).\n+use crate::config::{self, Input, OutputFilenames, OutputType};\n+use crate::Session;\n use rustc_ast::{ast, attr};\n-use rustc_session::config::{self, Input, OutputFilenames, OutputType};\n-use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use std::path::{Path, PathBuf};\n@@ -24,9 +25,9 @@ pub fn out_filename(\n     out_filename\n }\n \n-// Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n-// check this already -- however, the Linux linker will happily overwrite a\n-// read-only file.  We should be consistent.\n+/// Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n+/// check this already -- however, the Linux linker will happily overwrite a\n+/// read-only file.  We should be consistent.\n pub fn check_file_is_writeable(file: &Path, sess: &Session) {\n     if !is_writeable(file) {\n         sess.fatal(&format!(\n@@ -46,7 +47,7 @@ fn is_writeable(p: &Path) -> bool {\n \n pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n-        rustc_metadata::validate_crate_name(sess, &s, span);\n+        validate_crate_name(sess, &s, span);\n         s\n     };\n \n@@ -96,6 +97,36 @@ pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input:\n     \"rust_out\".to_string()\n }\n \n+pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n+    let mut err_count = 0;\n+    {\n+        let mut say = |s: &str| {\n+            match (sp, sess) {\n+                (_, None) => panic!(\"{}\", s),\n+                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+                (None, Some(sess)) => sess.err(s),\n+            }\n+            err_count += 1;\n+        };\n+        if s.is_empty() {\n+            say(\"crate name must not be empty\");\n+        }\n+        for c in s.chars() {\n+            if c.is_alphanumeric() {\n+                continue;\n+            }\n+            if c == '_' {\n+                continue;\n+            }\n+            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n+        }\n+    }\n+\n+    if err_count > 0 {\n+        sess.unwrap().abort_if_errors();\n+    }\n+}\n+\n pub fn filename_for_metadata(\n     sess: &Session,\n     crate_name: &str,", "previous_filename": "src/librustc_codegen_utils/link.rs"}, {"sha": "1e4fc8f7e6842fbfe0166b04d949e280fe7aa428", "filename": "src/librustc_symbol_mangling/Cargo.toml", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2FCargo.toml?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1,13 +1,13 @@\n [package]\n authors = [\"The Rust Project Developers\"]\n-name = \"rustc_codegen_utils\"\n+name = \"rustc_symbol_mangling\"\n version = \"0.0.0\"\n edition = \"2018\"\n \n [lib]\n-name = \"rustc_codegen_utils\"\n+name = \"rustc_symbol_mangling\"\n path = \"lib.rs\"\n-test = false\n+doctest = false\n \n [dependencies]\n log = \"0.4\"", "previous_filename": "src/librustc_codegen_utils/Cargo.toml"}, {"sha": "0dedda9bb6b73e67c0017ab9f063dd494124dd3f", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "previous_filename": "src/librustc_codegen_utils/symbol_names/legacy.rs"}, {"sha": "26cb3410500274b2c2f3a7c7251ecb407d0a872a", "filename": "src/librustc_symbol_mangling/lib.rs", "status": "renamed", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flib.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -87,6 +87,15 @@\n //! virtually impossible. Thus, symbol hash generation exclusively relies on\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(never_type)]\n+#![feature(nll)]\n+#![feature(in_band_lifetimes)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate rustc;\n+\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::ty::query::Providers;\n@@ -103,6 +112,8 @@ use log::debug;\n mod legacy;\n mod v0;\n \n+pub mod test;\n+\n /// This function computes the symbol name for the given `instance` and the\n /// given instantiating crate. That is, if you know that instance X is\n /// instantiated in crate Y, this is the symbol name this instance would have.", "previous_filename": "src/librustc_codegen_utils/symbol_names.rs"}, {"sha": "8f2f2628e7b7f2bce7658f7f3e72379fd43992be", "filename": "src/librustc_symbol_mangling/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Ftest.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "previous_filename": "src/librustc_codegen_utils/symbol_names_test.rs"}, {"sha": "ce6d0d9dc5ba8962782f90079cf2da8161e0bb53", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "previous_filename": "src/librustc_codegen_utils/symbol_names/v0.rs"}, {"sha": "30603fde7ed8d85c91df0feb2394867e7608f4d1", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -724,7 +724,7 @@ where\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.as_closure().sig_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_closure().sig_as_fn_ptr_ty(def_id, self.tcx).visit_with(self);\n             }\n \n             ty::Generator(def_id, ref substs, _) => {"}, {"sha": "553dbdca58b25448d949b5a8b5893082061e2e5b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let self_ty = trait_ref.self_ty();\n         let (def_id, output_ty, callable) = match self_ty.kind {\n             ty::Closure(def_id, substs) => {\n-                (def_id, self.closure_sig(def_id, substs).output(), \"closure\")\n+                (def_id, substs.as_closure().sig(def_id, self.tcx).output(), \"closure\")\n             }\n             ty::FnDef(def_id, _) => (def_id, self_ty.fn_sig(self.tcx).output(), \"function\"),\n             _ => return,"}, {"sha": "6b14f6959bfb91d881ecb13a2ea6b77f3162e020", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1311,9 +1311,7 @@ fn confirm_closure_candidate<'cx, 'tcx>(\n     vtable: VtableClosureData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n-    let infcx = selcx.infcx();\n-    let closure_sig_ty = vtable.substs.as_closure().sig_ty(vtable.closure_def_id, tcx);\n-    let closure_sig = infcx.shallow_resolve(closure_sig_ty).fn_sig(tcx);\n+    let closure_sig = vtable.substs.as_closure().sig(vtable.closure_def_id, tcx);\n     let Normalized { value: closure_sig, obligations } = normalize_with_depth(\n         selcx,\n         obligation.param_env,"}, {"sha": "660d4d14bc7286549477d228d34ba3c8807ec539", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -3349,9 +3349,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\",\n             obligation, closure_def_id, substs,\n         );\n-        let closure_type = self.infcx.closure_sig(closure_def_id, substs);\n+        let closure_sig = substs.as_closure().sig(closure_def_id, self.tcx());\n \n-        debug!(\"closure_trait_ref_unnormalized: closure_type = {:?}\", closure_type);\n+        debug!(\"closure_trait_ref_unnormalized: closure_sig = {:?}\", closure_sig);\n \n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an unboxed closure type and hence is\n@@ -3362,7 +3362,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.tcx(),\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().self_ty(), // (1)\n-            closure_type,\n+            closure_sig,\n             util::TupleArgumentsFlag::No,\n         )\n         .map_bound(|(trait_ref, _)| trait_ref)"}, {"sha": "056fe912d9e348cb7e37184e92a34baed56fd50f", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -105,12 +105,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n                 if self.closure_kind(def_id, substs).is_none() {\n-                    let closure_ty = self.closure_sig(def_id, substs);\n-                    let fn_sig = self\n+                    let closure_sig = substs.as_closure().sig(def_id, self.tcx);\n+                    let closure_sig = self\n                         .replace_bound_vars_with_fresh_vars(\n                             call_expr.span,\n                             infer::FnCall,\n-                            &closure_ty,\n+                            &closure_sig,\n                         )\n                         .0;\n                     let adjustments = autoderef.adjust_steps(self, Needs::None);\n@@ -121,12 +121,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             callee_expr,\n                             adjusted_ty,\n                             adjustments,\n-                            fn_sig,\n+                            fn_sig: closure_sig,\n                             closure_def_id: def_id,\n                             closure_substs: substs,\n                         },\n                     );\n-                    return Some(CallStep::DeferredClosure(fn_sig));\n+                    return Some(CallStep::DeferredClosure(closure_sig));\n                 }\n             }\n "}, {"sha": "d8f5a83c50b2db7ed8dfdd19a3224735a457cba7", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -116,12 +116,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 interior,\n                 generator_substs.witness(expr_def_id, self.tcx),\n             );\n-            return self.tcx.mk_generator(expr_def_id, substs, movability);\n-        }\n \n-        let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n+            // HACK(eddyb) this forces the types equated above into `substs` but\n+            // it should rely on `GeneratorSubsts` providing a constructor, instead.\n+            let substs = self.resolve_vars_if_possible(&substs);\n \n-        debug!(\"check_closure: expr.hir_id={:?} closure_type={:?}\", expr.hir_id, closure_type);\n+            return self.tcx.mk_generator(expr_def_id, substs, movability);\n+        }\n \n         // Tuple up the arguments and insert the resulting function type into\n         // the `closures` table.\n@@ -144,7 +145,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.demand_eqtype(\n             expr.span,\n             sig_fn_ptr_ty,\n-            substs.as_closure().sig_ty(expr_def_id, self.tcx),\n+            substs.as_closure().sig_as_fn_ptr_ty(expr_def_id, self.tcx),\n         );\n \n         if let Some(kind) = opt_kind {\n@@ -155,6 +156,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n         }\n \n+        // HACK(eddyb) this forces the types equated above into `substs` but\n+        // it should rely on `ClosureSubsts` providing a constructor, instead.\n+        let substs = self.resolve_vars_if_possible(&substs);\n+\n+        let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n+\n+        debug!(\"check_closure: expr.hir_id={:?} closure_type={:?}\", expr.hir_id, closure_type);\n+\n         closure_type\n     }\n "}, {"sha": "70c1f5faca515b10c2193c572ea1db8ad1478a0a", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -750,9 +750,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 //     `fn(arg0,arg1,...) -> _`\n                 // or\n                 //     `unsafe fn(arg0,arg1,...) -> _`\n-                let sig = self.closure_sig(def_id_a, substs_a);\n+                let closure_sig = substs_a.as_closure().sig(def_id_a, self.tcx);\n                 let unsafety = fn_ty.unsafety();\n-                let pointer_ty = self.tcx.coerce_closure_fn_ty(sig, unsafety);\n+                let pointer_ty = self.tcx.coerce_closure_fn_ty(closure_sig, unsafety);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\", a, b, pointer_ty);\n                 self.unify_and(\n                     pointer_ty,"}, {"sha": "94bbd3701d81e6158b901f823ae0c46a8a945b57", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -4837,18 +4837,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let hir = self.tcx.hir();\n         let (def_id, sig) = match found.kind {\n             ty::FnDef(def_id, _) => (def_id, found.fn_sig(self.tcx)),\n-            ty::Closure(def_id, substs) => {\n-                // We don't use `closure_sig` to account for malformed closures like\n-                // `|_: [_; continue]| {}` and instead we don't suggest anything.\n-                let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n-                (\n-                    def_id,\n-                    match closure_sig_ty.kind {\n-                        ty::FnPtr(sig) => sig,\n-                        _ => return false,\n-                    },\n-                )\n-            }\n+            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig(def_id, self.tcx)),\n             _ => return false,\n         };\n "}, {"sha": "9fbff0399429d5385d9f4be73685e8c892baaeb4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1527,16 +1527,13 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             // argument. In any case they are embedded within the\n             // closure type as part of the `ClosureSubsts`.\n             //\n-            // To get\n-            // the signature of a closure, you should use the\n-            // `closure_sig` method on the `ClosureSubsts`:\n+            // To get the signature of a closure, you should use the\n+            // `sig` method on the `ClosureSubsts`:\n             //\n-            //    closure_substs.sig(def_id, tcx)\n-            //\n-            // or, inside of an inference context, you can use\n-            //\n-            //    infcx.closure_sig(def_id, closure_substs)\n-            bug!(\"to get the signature of a closure, use `closure_sig()` not `fn_sig()`\");\n+            //    substs.as_closure().sig(def_id, tcx)\n+            bug!(\n+                \"to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`\",\n+            );\n         }\n \n         x => {"}, {"sha": "abe96ca3b87fcca6aa1dfcefd40d8c8d92d2e673", "filename": "src/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdarch?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1 +1 @@\n-Subproject commit dea57529b3695605909e7d327bb6551d7a10c788\n+Subproject commit abe96ca3b87fcca6aa1dfcefd40d8c8d92d2e673"}, {"sha": "3706ab4a0207593aefa95313bf0ca47799094dcb", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,7 +25,7 @@ pub fn change_callee_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_function() {\n     callee2(1, 2)\n@@ -40,7 +40,7 @@ pub fn change_argument_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_function() {\n     callee1(1, 3)\n@@ -57,8 +57,8 @@ mod change_callee_indirectly_function {\n \n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n \n \n     pub fn change_callee_indirectly_function() {\n@@ -81,7 +81,7 @@ pub fn change_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_method() {\n     let s = Struct;\n@@ -98,7 +98,7 @@ pub fn change_argument_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method() {\n     let s = Struct;\n@@ -115,7 +115,7 @@ pub fn change_ufcs_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n@@ -132,7 +132,7 @@ pub fn change_argument_method_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n@@ -149,9 +149,9 @@ pub fn change_to_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-// One might think this would be expanded in the hir_owner_items/Mir, but it actually\n+// One might think this would be expanded in the hir_owner_nodes/Mir, but it actually\n // results in slightly different hir_owner/Mir.\n pub fn change_to_ufcs() {\n     let s = Struct;\n@@ -171,7 +171,7 @@ pub mod change_ufcs_callee_indirectly {\n     #[cfg(not(cfail1))]\n     use super::Struct2 as Struct;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n \n "}, {"sha": "b1e9ed678c4c55ec7d12e5982fac401be4e86ac4", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -21,7 +21,7 @@ pub fn change_closure_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_closure_body() {\n     let _ = || 3u32;\n@@ -37,7 +37,7 @@ pub fn add_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_parameter() {\n     let x = 0u32;\n@@ -53,7 +53,7 @@ pub fn change_parameter_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n     let _ = |(x,): (u32,)| x;\n@@ -68,7 +68,7 @@ pub fn add_move() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_move() {\n     let _ = move || 1;\n@@ -84,7 +84,7 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner_items, typeck_tables_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner_nodes, typeck_tables_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n@@ -101,7 +101,7 @@ pub fn change_parameter_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_type() {\n     let closure = |x: u16| (x as u64) + 1;"}, {"sha": "6e0db6a49aae2054db9aa0e27cec564c90491764", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -19,7 +19,7 @@\n const CONST_VISIBILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub const CONST_VISIBILITY: u8 = 0;\n \n@@ -29,7 +29,7 @@ pub const CONST_VISIBILITY: u8 = 0;\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n@@ -39,13 +39,13 @@ const CONST_CHANGE_TYPE_1: u32 = 0;\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n \n // Change value between simple literals\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_1: i16 = {\n     #[cfg(cfail1)]\n@@ -57,7 +57,7 @@ const CONST_CHANGE_VALUE_1: i16 = {\n \n \n // Change value between expressions\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_2: i16 = {\n     #[cfg(cfail1)]\n@@ -67,7 +67,7 @@ const CONST_CHANGE_VALUE_2: i16 = {\n     { 1 + 2 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_3: i16 = {\n     #[cfg(cfail1)]\n@@ -77,7 +77,7 @@ const CONST_CHANGE_VALUE_3: i16 = {\n     { 2 * 3 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_4: i16 = {\n     #[cfg(cfail1)]\n@@ -99,11 +99,11 @@ mod const_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "99c50f7e173568950164da76c0ee0d1703b3cd85", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -34,7 +34,7 @@ pub fn change_field_value_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n@@ -57,7 +57,7 @@ pub fn change_field_order_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n // FIXME(michaelwoerister):Interesting. I would have thought that that changes the MIR. And it\n // would if it were not all constants\n@@ -96,7 +96,7 @@ pub fn change_constructor_path_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n@@ -119,7 +119,7 @@ pub fn change_constructor_variant_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n@@ -139,7 +139,7 @@ pub mod change_constructor_path_indirectly_struct_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -161,7 +161,7 @@ pub mod change_constructor_variant_indirectly_struct_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Struct2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant {\n@@ -180,7 +180,7 @@ pub fn change_field_value_tuple_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n@@ -197,7 +197,7 @@ pub fn change_constructor_path_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n+    except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_like() {\n@@ -215,7 +215,7 @@ pub fn change_constructor_variant_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n+    except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_tuple_like() {\n@@ -232,7 +232,7 @@ pub mod change_constructor_path_indirectly_tuple_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -251,7 +251,7 @@ pub mod change_constructor_variant_indirectly_tuple_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Tuple2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n@@ -278,7 +278,7 @@ pub fn change_constructor_path_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n@@ -293,7 +293,7 @@ pub fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_c_like() {\n     let _ = Clike::C;\n@@ -309,7 +309,7 @@ pub mod change_constructor_path_indirectly_c_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -328,7 +328,7 @@ pub mod change_constructor_variant_indirectly_c_like {\n     #[cfg(not(cfail1))]\n     use super::Clike::B as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Clike {\n         Variant"}, {"sha": "624870cc9ec8f4d4c70059dfb6fd383ea53243d8", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -26,7 +26,7 @@\n enum EnumVisibility { A }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub enum EnumVisibility {\n     A\n@@ -42,7 +42,7 @@ enum EnumChangeNameCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n     Variant1,\n@@ -59,7 +59,7 @@ enum EnumChangeNameTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n@@ -76,7 +76,7 @@ enum EnumChangeNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n@@ -93,7 +93,7 @@ enum EnumChangeValueCStyleVariant0 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant0 {\n     Variant1,\n@@ -109,7 +109,7 @@ enum EnumChangeValueCStyleVariant1 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n@@ -125,7 +125,7 @@ enum EnumAddCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddCStyleVariant {\n     Variant1,\n@@ -142,7 +142,7 @@ enum EnumRemoveCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n@@ -157,7 +157,7 @@ enum EnumAddTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n@@ -174,7 +174,7 @@ enum EnumRemoveTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n@@ -189,7 +189,7 @@ enum EnumAddStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddStructStyleVariant {\n     Variant1,\n@@ -206,7 +206,7 @@ enum EnumRemoveStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n@@ -221,7 +221,7 @@ enum EnumChangeFieldTypeTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeTupleStyleVariant {\n     Variant1(u32,\n@@ -238,7 +238,7 @@ enum EnumChangeFieldTypeStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeStructStyleVariant {\n     Variant1,\n@@ -257,7 +257,7 @@ enum EnumChangeFieldNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, c: u32 },\n@@ -272,7 +272,7 @@ enum EnumChangeOrderTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeOrderTupleStyleVariant {\n     Variant1(\n@@ -289,7 +289,7 @@ enum EnumChangeFieldOrderStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { b: f32, a: u32 },\n@@ -304,7 +304,7 @@ enum EnumAddFieldTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32, u32),\n@@ -319,7 +319,7 @@ enum EnumAddFieldStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32, c: u32 },\n@@ -335,7 +335,7 @@ enum EnumAddMustUse {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[must_use]\n enum EnumAddMustUse {\n@@ -353,7 +353,7 @@ enum EnumAddReprC {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[repr(C)]\n enum EnumAddReprC {\n@@ -531,7 +531,7 @@ enum EnumSwapUsageTypeParameters<A, B> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageTypeParameters<A, B> {\n     Variant1 {\n@@ -552,7 +552,7 @@ enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n     Variant1 {\n@@ -577,7 +577,7 @@ mod change_field_type_indirectly_tuple_style {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum TupleStyle {\n         Variant1(\n@@ -595,7 +595,7 @@ mod change_field_type_indirectly_struct_style {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum StructStyle {\n         Variant1 {\n@@ -618,7 +618,7 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T: Trait> {\n         Variant1(T)\n@@ -634,7 +634,7 @@ mod change_trait_bound_indirectly_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T> where T: Trait {\n         Variant1(T)"}, {"sha": "4ea58705017ee5c79fc72dfad2a228216b6a518e", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -7,7 +7,7 @@\n #![crate_type=\"rlib\"]\n \n // Case 1: The function body is not exported to metadata. If the body changes,\n-//         the hash of the hir_owner_items node should change, but not the hash of\n+//         the hash of the hir_owner_nodes node should change, but not the hash of\n //         either the hir_owner or the Metadata node.\n \n #[cfg(cfail1)]\n@@ -16,7 +16,7 @@ pub fn body_not_exported_to_metadata() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n     2\n@@ -35,7 +35,7 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n@@ -55,7 +55,7 @@ pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {"}, {"sha": "d3d5a69c171f9550d82bad05e735f3efb83c47bc", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_iteration_variable_name() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_name() {\n     let mut _x = 0;\n@@ -71,7 +71,7 @@ pub fn change_iteration_variable_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n@@ -94,7 +94,7 @@ pub fn change_iterable() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, promoted_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -139,7 +139,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -162,7 +162,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -187,7 +187,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -212,7 +212,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -262,7 +262,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "a6b936fcbcf895665e2003fd315b38ffcc7fb7d2", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -22,7 +22,7 @@ pub fn add_parameter() {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_parameter(p: i32) {}\n@@ -33,7 +33,7 @@ pub fn add_parameter(p: i32) {}\n pub fn add_return_type() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_return_type() -> () {}\n \n@@ -45,7 +45,7 @@ pub fn type_of_parameter(p: i32) {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter(p: i64) {}\n@@ -58,7 +58,7 @@ pub fn type_of_parameter_ref(p: &i32) {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter_ref(p: &mut i32) {}\n@@ -71,7 +71,7 @@ pub fn order_of_parameters(p1: i32, p2: i64) {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn order_of_parameters(p2: i64, p1: i32) {}\n@@ -84,7 +84,7 @@ pub fn make_unsafe() {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub unsafe fn make_unsafe() {}\n@@ -95,7 +95,7 @@ pub unsafe fn make_unsafe() {}\n pub fn make_extern() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, typeck_tables_of, fn_sig\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub extern \"C\" fn make_extern() {}\n \n@@ -107,7 +107,7 @@ pub fn type_parameter() {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, generics_of, type_of, predicates_of\"\n+    except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_parameter<T>() {}\n@@ -118,7 +118,7 @@ pub fn type_parameter<T>() {}\n pub fn lifetime_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, generics_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, generics_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_parameter<'a>() {}\n \n@@ -128,7 +128,7 @@ pub fn lifetime_parameter<'a>() {}\n pub fn trait_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn trait_bound<T: Eq>() {}\n \n@@ -138,7 +138,7 @@ pub fn trait_bound<T: Eq>() {}\n pub fn builtin_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn builtin_bound<T: Send>() {}\n \n@@ -150,7 +150,7 @@ pub fn lifetime_bound<'a, T>() {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, generics_of, type_of, predicates_of\"\n+    except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_bound<'a, T: 'a>() {}\n@@ -161,7 +161,7 @@ pub fn lifetime_bound<'a, T: 'a>() {}\n pub fn second_trait_bound<T: Eq>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_trait_bound<T: Eq + Clone>() {}\n \n@@ -171,7 +171,7 @@ pub fn second_trait_bound<T: Eq + Clone>() {}\n pub fn second_builtin_bound<T: Send>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_builtin_bound<T: Send + Sized>() {}\n \n@@ -183,7 +183,7 @@ pub fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_items, generics_of, type_of, predicates_of\"\n+    except = \"hir_owner, hir_owner_nodes, generics_of, type_of, predicates_of\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n@@ -194,7 +194,7 @@ pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n pub fn inline() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[inline]\n pub fn inline() {}\n@@ -206,7 +206,7 @@ pub fn inline() {}\n pub fn inline_never() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[inline(never)]\n pub fn inline_never() {}\n@@ -217,7 +217,7 @@ pub fn inline_never() {}\n pub fn no_mangle() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[no_mangle]\n pub fn no_mangle() {}\n@@ -228,7 +228,7 @@ pub fn no_mangle() {}\n pub fn linkage() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[linkage = \"weak_odr\"]\n pub fn linkage() {}\n@@ -241,7 +241,7 @@ pub fn return_impl_trait() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, typeck_tables_of, fn_sig\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn return_impl_trait() -> impl Clone {\n     0\n@@ -274,7 +274,7 @@ pub mod change_return_type_indirectly {\n \n     #[rustc_clean(\n         cfg = \"cfail2\",\n-        except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+        except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n     )]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_return_type() -> ReturnType {\n@@ -292,7 +292,7 @@ pub mod change_parameter_type_indirectly {\n \n     #[rustc_clean(\n         cfg = \"cfail2\",\n-        except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+        except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n     )]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_parameter_type(p: ParameterType) {}\n@@ -309,7 +309,7 @@ pub mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound<T: Trait>(p: T) {}\n }\n@@ -322,7 +322,7 @@ pub mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_nodes, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound_where<T>(p: T)\n     where"}, {"sha": "29b3f1f5b1d832f64e588a87873987f810a40e81", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,7 +25,7 @@ pub fn change_condition(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition(x: bool) -> u32 {\n     if !x {\n@@ -46,7 +46,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n@@ -69,7 +69,7 @@ pub fn change_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n@@ -94,7 +94,7 @@ pub fn add_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n@@ -120,7 +120,7 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_) = x {\n@@ -143,7 +143,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -166,7 +166,7 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -191,7 +191,7 @@ pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;"}, {"sha": "7a8cbc3566ee93961d6ae279039b26fa02b2a7c2", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -22,8 +22,8 @@ fn change_simple_index(slice: &[u32]) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[4]\n }\n@@ -39,8 +39,8 @@ fn change_lower_bound(slice: &[u32]) -> &[u32] {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[2..5]\n }\n@@ -56,8 +56,8 @@ fn change_upper_bound(slice: &[u32]) -> &[u32] {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -73,8 +73,8 @@ fn add_lower_bound(slice: &[u32]) -> &[u32] {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..4]\n }\n@@ -90,8 +90,8 @@ fn add_upper_bound(slice: &[u32]) -> &[u32] {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -107,8 +107,8 @@ fn change_mutability(slice: &mut [u32]) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n     (&slice[3..5])[0]\n }\n@@ -124,8 +124,8 @@ fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n     &slice[3..=7]\n }"}, {"sha": "a9c8457f7f260a0651904f0bf698c7af5caa3bc3", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -23,7 +23,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -44,7 +44,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner_items,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+        except=\"hir_owner_nodes,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n@@ -68,7 +68,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner_items,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+        except=\"hir_owner_nodes,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n@@ -85,10 +85,10 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"associated_item,hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"associated_item,hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     fn method_privacy() { }\n }\n@@ -100,7 +100,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of,promoted_mir\")]\n@@ -120,7 +120,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfmutness(&mut self) { }\n@@ -135,7 +135,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -160,7 +160,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n@@ -178,7 +178,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n@@ -197,7 +197,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_return_type(&self) -> u8 { 0 }\n }\n@@ -214,7 +214,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn make_method_inline(&self) -> u8 { 0 }\n@@ -232,7 +232,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n@@ -251,7 +251,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n@@ -269,7 +269,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub extern fn make_method_extern(&self) { }\n }\n@@ -286,7 +286,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub extern \"system\" fn change_method_calling_convention(&self) { }\n }\n@@ -312,7 +312,7 @@ impl Foo {\n     // if we lower generics before the body, then the `HirId` for\n     // things in the body will be affected. So if you start to see\n     // `typeck_tables_of` appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n }\n@@ -340,7 +340,7 @@ impl Foo {\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of\",\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n@@ -360,7 +360,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of\"\n+        except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,type_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n@@ -387,7 +387,7 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `typeck_tables_of`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,generics_of,predicates_of,\\\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of,predicates_of,\\\n                                         type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n@@ -414,7 +414,7 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `typeck_tables_of`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_type_param_of_method<T: Clone>(&self) { }\n }\n@@ -431,7 +431,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[no_mangle]\n     pub fn add_no_mangle_to_method(&self) { }\n@@ -448,7 +448,7 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,generics_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,generics_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T> Bar<T> {\n     #[rustc_clean(\n@@ -468,7 +468,7 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n     #[rustc_clean(cfg=\"cfail2\", except=\"fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n@@ -485,7 +485,7 @@ impl<T> Bar<T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T: 'static> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -502,7 +502,7 @@ impl<T> Bar<T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T: Clone> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]"}, {"sha": "fb3c6378f74ab3d248e10cccaeee6bc7bffbd064", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -33,7 +33,7 @@ pub fn change_template(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n@@ -69,7 +69,7 @@ pub fn change_output(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n@@ -105,7 +105,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n@@ -140,7 +140,7 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n@@ -175,7 +175,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n@@ -210,7 +210,7 @@ pub fn change_options(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {"}, {"sha": "924ed451e59f8928331d71f0e3f54ecd91478f85", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -22,7 +22,7 @@ pub fn change_name() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n@@ -38,7 +38,7 @@ pub fn add_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n@@ -54,7 +54,7 @@ pub fn change_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_type() {\n     let _x: u8 = 2;\n@@ -70,7 +70,7 @@ pub fn change_mutability_of_reference_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n@@ -86,7 +86,7 @@ pub fn change_mutability_of_slot() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n@@ -102,7 +102,7 @@ pub fn change_simple_binding_to_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n@@ -118,7 +118,7 @@ pub fn change_name_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n@@ -134,7 +134,7 @@ pub fn add_ref_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n@@ -150,7 +150,7 @@ pub fn add_amp_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n@@ -166,7 +166,7 @@ pub fn change_mutability_of_binding_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n@@ -182,7 +182,7 @@ pub fn add_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -198,7 +198,7 @@ pub fn change_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "65db89eb976cf916671ccc6e84c37b0f90997d4b", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -47,7 +47,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -93,7 +93,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -118,7 +118,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -143,7 +143,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -168,7 +168,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -193,7 +193,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "033723a4c77963b9c8840c580657160e574eb57b", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -26,7 +26,7 @@ pub fn add_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n@@ -51,7 +51,7 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n@@ -75,7 +75,7 @@ pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -99,7 +99,7 @@ pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -123,7 +123,7 @@ pub fn add_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n@@ -147,7 +147,7 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n@@ -170,7 +170,7 @@ pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -193,7 +193,7 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -216,7 +216,7 @@ pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -238,7 +238,7 @@ pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -260,7 +260,7 @@ pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n@@ -283,7 +283,7 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n@@ -307,7 +307,7 @@ pub fn add_alternative_to_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {"}, {"sha": "9de2aaa1bfd117e31759128bb33c75a9359a452c", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -18,7 +18,7 @@\n \n \n // Indexing expression\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n     #[cfg(cfail1)]\n@@ -33,7 +33,7 @@ pub fn indexing(slice: &[u8]) -> u8 {\n \n \n // Arithmetic overflow plus\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -48,7 +48,7 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n \n \n // Arithmetic overflow minus\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -63,7 +63,7 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n \n \n // Arithmetic overflow mult\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -78,7 +78,7 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n \n \n // Arithmetic overflow negation\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -93,7 +93,7 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n \n \n // Division by zero\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -107,7 +107,7 @@ pub fn division_by_zero(val: i32) -> i32 {\n }\n \n // Division by zero\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -122,7 +122,7 @@ pub fn mod_by_zero(val: i32) -> i32 {\n \n \n // shift left\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]\n@@ -137,7 +137,7 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n \n \n // shift right\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]"}, {"sha": "caf4e12cc4b76c0bab169e71152237e4c1196855", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -21,7 +21,7 @@\n static STATIC_VISIBILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub static STATIC_VISIBILITY: u8 = 0;\n \n@@ -31,7 +31,7 @@ pub static STATIC_VISIBILITY: u8 = 0;\n static STATIC_MUTABILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static mut STATIC_MUTABILITY: u8 = 0;\n \n@@ -41,7 +41,7 @@ static mut STATIC_MUTABILITY: u8 = 0;\n static STATIC_LINKAGE: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[linkage=\"weak_odr\"]\n static STATIC_LINKAGE: u8 = 0;\n@@ -52,7 +52,7 @@ static STATIC_LINKAGE: u8 = 0;\n static STATIC_NO_MANGLE: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[no_mangle]\n static STATIC_NO_MANGLE: u8 = 0;\n@@ -63,7 +63,7 @@ static STATIC_NO_MANGLE: u8 = 0;\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[thread_local]\n static STATIC_THREAD_LOCAL: u8 = 0;\n@@ -74,7 +74,7 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n@@ -84,13 +84,13 @@ static STATIC_CHANGE_TYPE_1: u64 = 0;\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n \n // Change value between simple literals\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_1: i16 = {\n     #[cfg(cfail1)]\n@@ -102,7 +102,7 @@ static STATIC_CHANGE_VALUE_1: i16 = {\n \n \n // Change value between expressions\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_2: i16 = {\n     #[cfg(cfail1)]\n@@ -112,7 +112,7 @@ static STATIC_CHANGE_VALUE_2: i16 = {\n     { 1 + 2 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_3: i16 = {\n     #[cfg(cfail1)]\n@@ -122,7 +122,7 @@ static STATIC_CHANGE_VALUE_3: i16 = {\n     { 2 * 3 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_4: i16 = {\n     #[cfg(cfail1)]\n@@ -144,11 +144,11 @@ mod static_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "006b712923b991214895ced870100496d6541793", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -31,7 +31,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -54,7 +54,7 @@ pub fn change_field_order_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -82,7 +82,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -117,7 +117,7 @@ pub fn change_field_label_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -152,7 +152,7 @@ pub fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n@@ -173,7 +173,7 @@ pub mod change_constructor_path_indirectly_regular_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {\n@@ -196,7 +196,7 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n@@ -213,7 +213,7 @@ pub fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n@@ -230,7 +230,7 @@ pub mod change_constructor_path_indirectly_tuple_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {"}, {"sha": "a42bd9261f95dfb19ea0db85c7f9ef81e0b32a96", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,12 +25,12 @@ pub struct LayoutPacked;\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -42,12 +42,12 @@ struct LayoutC;\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -62,12 +62,12 @@ struct TupleStructFieldType(i32);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -85,12 +85,12 @@ struct TupleStructAddField(i32);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -107,12 +107,12 @@ struct TupleStructFieldVisibility(char);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -126,12 +126,12 @@ struct RecordStructFieldType { x: f32 }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -149,12 +149,12 @@ struct RecordStructFieldName { x: f32 }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -168,12 +168,12 @@ struct RecordStructAddField { x: f32 }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -189,12 +189,12 @@ struct RecordStructFieldVisibility { x: f32 }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -210,12 +210,12 @@ struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -229,12 +229,12 @@ struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -248,12 +248,12 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -270,12 +270,12 @@ struct AddTypeParameter<T1>(T1, T1);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -294,12 +294,12 @@ struct AddTypeParameterBound<T>(T);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -313,12 +313,12 @@ struct AddTypeParameterBoundWhereClause<T>(T);\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -333,12 +333,12 @@ struct AddTypeParameterBoundWhereClause<T>(\n // addresses taken into account by the hashing algorithm).\n // Note: there is no #[cfg(...)], so this is ALWAYS compiled\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -352,12 +352,12 @@ struct Visibility;\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -374,12 +374,12 @@ mod tuple_struct_change_field_type_indirectly {\n     use super::ReferencedType2 as FieldType;\n \n     #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -397,12 +397,12 @@ mod record_struct_change_field_type_indirectly {\n     use super::ReferencedType2 as FieldType;\n \n     #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -425,12 +425,12 @@ mod change_trait_bound_indirectly {\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -445,12 +445,12 @@ mod change_trait_bound_indirectly_in_where_clause {\n     use super::ReferencedTrait2 as Trait;\n \n     #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]"}, {"sha": "aa39ea88e0ec0f702d68cc2fcd20cf585cfc0370", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -140,8 +140,8 @@ trait TraitChangeMethodParameterName {\n \n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     fn with_default(y: i32) {}\n }\n \n@@ -260,8 +260,8 @@ trait TraitChangeModeSelfOwnToMut: Sized {\n trait TraitChangeModeSelfOwnToMut: Sized {\n     #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     fn method(mut self) {}\n }\n "}, {"sha": "ddec6ff8eecddf94582b00f6a98d9004ea93516d", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -64,8 +64,8 @@ impl ChangeMethodBodyTrait for Foo {\n impl ChangeMethodBodyTrait for Foo {\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     fn method_name() {\n         ()\n     }\n@@ -91,8 +91,8 @@ impl ChangeMethodBodyTraitInlined for Foo {\n impl ChangeMethodBodyTraitInlined for Foo {\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n     #[inline]\n     fn method_name() {\n         panic!()"}, {"sha": "495445670c006c7d05cb79d6145c73a6a8fd66e9", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -24,7 +24,7 @@\n type ChangePrimitiveType = i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangePrimitiveType = i64;\n \n@@ -35,7 +35,7 @@ type ChangePrimitiveType = i64;\n type ChangeMutability = &'static i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeMutability = &'static mut i32;\n \n@@ -46,7 +46,7 @@ type ChangeMutability = &'static mut i32;\n type ChangeLifetime<'a> = (&'static i32, &'a i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeLifetime<'a> = (&'a i32, &'a i32);\n \n@@ -60,7 +60,7 @@ struct Struct2;\n type ChangeTypeStruct = Struct1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeStruct = Struct2;\n \n@@ -71,7 +71,7 @@ type ChangeTypeStruct = Struct2;\n type ChangeTypeTuple = (u32, u64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeTuple = (u32, i64);\n \n@@ -91,7 +91,7 @@ enum Enum2 {\n type ChangeTypeEnum = Enum1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeEnum = Enum2;\n \n@@ -102,7 +102,7 @@ type ChangeTypeEnum = Enum2;\n type AddTupleField = (i32, i64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTupleField = (i32, i64, i16);\n \n@@ -113,7 +113,7 @@ type AddTupleField = (i32, i64, i16);\n type ChangeNestedTupleField = (i32, (i64, i16));\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeNestedTupleField = (i32, (i64, i8));\n \n@@ -124,7 +124,7 @@ type ChangeNestedTupleField = (i32, (i64, i8));\n type AddTypeParam<T1> = (T1, T1);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTypeParam<T1, T2> = (T1, T2);\n \n@@ -135,7 +135,7 @@ type AddTypeParam<T1, T2> = (T1, T2);\n type AddTypeParamBound<T1> = (T1, u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTypeParamBound<T1: Clone> = (T1, u32);\n \n@@ -146,7 +146,7 @@ type AddTypeParamBound<T1: Clone> = (T1, u32);\n type AddTypeParamBoundWhereClause<T1> where T1: Clone = (T1, u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n \n@@ -157,7 +157,7 @@ type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n type AddLifetimeParam<'a> = (&'a u32, &'a u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n \n@@ -168,7 +168,7 @@ type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n type AddLifetimeParamBound<'a, 'b> = (&'a u32, &'b u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBound<'a, 'b: 'a> = (&'a u32, &'b u32);\n \n@@ -181,7 +181,7 @@ where 'b: 'a\n     = (&'a u32, &'b u32, &'c u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBoundWhereClause<'a, 'b, 'c>\n where 'b: 'a,\n@@ -200,7 +200,7 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T: Trait> = (T, u32);\n }\n@@ -214,7 +214,7 @@ mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T> where T : Trait = (T, u32);\n }"}, {"sha": "c8b53c27b02c8fc39bda6567d7777b102e8476a4", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -21,7 +21,7 @@ pub fn const_negation() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_negation() -> i32 {\n     -1\n@@ -36,7 +36,7 @@ pub fn const_bitwise_not() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_bitwise_not() -> i32 {\n     !99\n@@ -51,7 +51,7 @@ pub fn var_negation(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n@@ -66,7 +66,7 @@ pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n@@ -81,7 +81,7 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n@@ -96,7 +96,7 @@ pub fn first_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_const_add() -> i32 {\n     2 + 3\n@@ -111,7 +111,7 @@ pub fn second_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_const_add() -> i32 {\n     1 + 3\n@@ -126,7 +126,7 @@ pub fn first_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 2\n@@ -141,7 +141,7 @@ pub fn second_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n@@ -156,7 +156,7 @@ pub fn plus_to_minus(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 - a\n@@ -171,7 +171,7 @@ pub fn plus_to_mult(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 * a\n@@ -186,7 +186,7 @@ pub fn plus_to_div(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 / a\n@@ -201,7 +201,7 @@ pub fn plus_to_mod(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 % a\n@@ -216,7 +216,7 @@ pub fn and_to_or(a: bool, b: bool) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a || b\n@@ -231,7 +231,7 @@ pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 | a\n@@ -246,7 +246,7 @@ pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 ^ a\n@@ -261,7 +261,7 @@ pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n     a << 1\n@@ -276,7 +276,7 @@ pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n     a >> 1\n@@ -291,7 +291,7 @@ pub fn eq_to_uneq(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a != 1\n@@ -306,7 +306,7 @@ pub fn eq_to_lt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_lt(a: i32) -> bool {\n     a < 1\n@@ -321,7 +321,7 @@ pub fn eq_to_gt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_gt(a: i32) -> bool {\n     a > 1\n@@ -336,7 +336,7 @@ pub fn eq_to_le(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_le(a: i32) -> bool {\n     a <= 1\n@@ -351,7 +351,7 @@ pub fn eq_to_ge(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_ge(a: i32) -> bool {\n     a >= 1\n@@ -368,7 +368,7 @@ pub fn type_cast(a: u8) -> u64 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as u32;\n@@ -385,7 +385,7 @@ pub fn value_cast(a: u32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn value_cast(a: u32) -> i32 {\n     2 as i32\n@@ -403,7 +403,7 @@ pub fn place() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn place() -> i32 {\n     let mut x = 10;\n@@ -423,7 +423,7 @@ pub fn rvalue() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n@@ -440,7 +440,7 @@ pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[j]"}, {"sha": "36e0fcdbe74d137f8163c715efd8d01a5c4b83cb", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -93,7 +93,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -166,7 +166,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "83f09bd7be6140d71dc7937f42a2f79cbebb9246", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -93,7 +93,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -166,7 +166,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "847bce7ef90b0312506dcc640b129b2b0232f83f", "filename": "src/test/incremental/ich_method_call_trait_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -27,14 +27,14 @@ mod mod3 {\n     use Trait2;\n \n     #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n     #[rustc_dirty(label=\"typeck_tables_of\", cfg=\"rpass2\")]\n     fn bar() {\n         ().method();\n     }\n \n     #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"typeck_tables_of\", cfg=\"rpass2\")]\n     fn baz() {\n         22; // no method call, traits in scope don't matter"}, {"sha": "aabdaa664112f15e245a7759667354aec674b3ec", "filename": "src/test/incremental/ich_nested_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -8,7 +8,7 @@\n #![feature(rustc_attrs)]\n \n #[rustc_clean(label = \"hir_owner\", cfg = \"cfail2\")]\n-#[rustc_dirty(label = \"hir_owner_items\", cfg = \"cfail2\")]\n+#[rustc_dirty(label = \"hir_owner_nodes\", cfg = \"cfail2\")]\n pub fn foo() {\n     #[cfg(cfail1)]\n     pub fn baz() {} // order is different...\n@@ -17,7 +17,7 @@ pub fn foo() {\n     // the parent node, which is the statement holding this item. Changing the position of\n     // `bar` in `foo` will update that reference and make `hir_owner(bar)` dirty.\n     #[rustc_dirty(label = \"hir_owner\", cfg = \"cfail2\")]\n-    #[rustc_clean(label = \"hir_owner_items\", cfg = \"cfail2\")]\n+    #[rustc_clean(label = \"hir_owner_nodes\", cfg = \"cfail2\")]\n     pub fn bar() {} // but that doesn't matter.\n \n     #[cfg(cfail2)]"}, {"sha": "19df2972f89420216d1b10dce41b31a675efeaf7", "filename": "src/test/incremental/ich_resolve_results.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_resolve_results.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -29,17 +29,17 @@ mod mod3 {\n     use mod2::Foo;\n \n     #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"rpass3\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass3\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass3\")]\n     fn in_expr() {\n         Foo(0);\n     }\n \n     #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"rpass3\")]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass3\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass3\")]\n     fn in_type() {\n         test::<Foo>();\n     }"}, {"sha": "f18d2fdaf0a010f704bf5b5328d7783972e9680c", "filename": "src/test/incremental/source_loc_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -8,25 +8,25 @@\n #![feature(rustc_attrs)]\n \n #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n fn line_same() {\n     let _ = line!();\n }\n \n #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n fn col_same() {\n     let _ = column!();\n }\n \n #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n fn file_same() {\n     let _ = file!();\n }\n \n #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n fn line_different() {\n     #[cfg(rpass1)]\n     {\n@@ -39,7 +39,7 @@ fn line_different() {\n }\n \n #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n fn col_different() {\n     #[cfg(rpass1)]\n     {"}, {"sha": "aff2be830fff8572ab9833ae615928b244afdcdc", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -13,5 +13,5 @@ pub fn main() {}\n \n #[cfg(rpass2)]\n #[rustc_dirty(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n pub fn main() {}"}, {"sha": "cc35f3bdf299b8bf9dd065f7a63dae456a456225", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -18,7 +18,7 @@ pub mod x {\n     }\n \n     #[cfg(cfail2)]\n-    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"optimized_mir\", cfg=\"cfail2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");"}, {"sha": "0e6c39e0affca0041d9aebf603afd727b0092b4b", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98803c182b2ba6ef5dccb6bf501958249295eac0/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=98803c182b2ba6ef5dccb6bf501958249295eac0", "patch": "@@ -1,36 +1,38 @@\n #![feature(rustc_private)]\n \n extern crate rustc;\n-extern crate rustc_codegen_utils;\n+extern crate rustc_codegen_ssa;\n #[macro_use]\n extern crate rustc_data_structures;\n-extern crate rustc_hir;\n-extern crate rustc_target;\n extern crate rustc_driver;\n+extern crate rustc_hir;\n extern crate rustc_session;\n extern crate rustc_span;\n+extern crate rustc_symbol_mangling;\n+extern crate rustc_target;\n \n-use std::any::Any;\n-use std::sync::Arc;\n-use std::path::Path;\n-use rustc::ty::TyCtxt;\n-use rustc::ty::query::Providers;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n use rustc::dep_graph::DepGraph;\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_data_structures::sync::MetadataRef;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_session::Session;\n+use rustc_data_structures::sync::MetadataRef;\n use rustc_session::config::OutputFilenames;\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::Target;\n+use std::any::Any;\n+use std::path::Path;\n+use std::sync::Arc;\n \n pub struct NoLlvmMetadataLoader;\n \n impl MetadataLoader for NoLlvmMetadataLoader {\n     fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        let buf = std::fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n+        let buf =\n+            std::fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n         let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n         Ok(rustc_erase_owner!(buf.map_owner_box()))\n     }\n@@ -48,7 +50,7 @@ impl CodegenBackend for TheBackend {\n     }\n \n     fn provide(&self, providers: &mut Providers) {\n-        rustc_codegen_utils::symbol_names::provide(providers);\n+        rustc_symbol_mangling::provide(providers);\n \n         providers.target_features_whitelist = |tcx, _cnum| {\n             tcx.arena.alloc(Default::default()) // Just a dummy\n@@ -78,7 +80,8 @@ impl CodegenBackend for TheBackend {\n         _sess: &Session,\n         _dep_graph: &DepGraph,\n     ) -> Result<Box<dyn Any>, ErrorReported> {\n-        let crate_name = ongoing_codegen.downcast::<Symbol>()\n+        let crate_name = ongoing_codegen\n+            .downcast::<Symbol>()\n             .expect(\"in join_codegen: ongoing_codegen is not a Symbol\");\n         Ok(crate_name)\n     }\n@@ -89,17 +92,15 @@ impl CodegenBackend for TheBackend {\n         codegen_results: Box<dyn Any>,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n+        use rustc_session::{config::CrateType, output::out_filename};\n         use std::io::Write;\n-        use rustc_session::config::CrateType;\n-        use rustc_codegen_utils::link::out_filename;\n-        let crate_name = codegen_results.downcast::<Symbol>()\n-            .expect(\"in link: codegen_results is not a Symbol\");\n+        let crate_name =\n+            codegen_results.downcast::<Symbol>().expect(\"in link: codegen_results is not a Symbol\");\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));\n             }\n-            let output_name =\n-                out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n+            let output_name = out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n             let mut out_file = ::std::fs::File::create(output_name).unwrap();\n             write!(out_file, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n         }"}]}