{"sha": "94f12615735b833750b35eed7805d8a5a9898c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjEyNjE1NzM1YjgzMzc1MGIzNWVlZDc4MDVkOGE1YTk4OThjMWY=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-22T03:43:36Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-29T00:40:48Z"}, "message": "libcore: Use Zeroable trait to try to limit what types may be used with NonZero.", "tree": {"sha": "3a390577cde1b47720e5e7e5e3148963d55f73e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a390577cde1b47720e5e7e5e3148963d55f73e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f12615735b833750b35eed7805d8a5a9898c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f12615735b833750b35eed7805d8a5a9898c1f", "html_url": "https://github.com/rust-lang/rust/commit/94f12615735b833750b35eed7805d8a5a9898c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f12615735b833750b35eed7805d8a5a9898c1f/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27617a10f6647e98a90adbfce4f881c32c82a4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27617a10f6647e98a90adbfce4f881c32c82a4dc", "html_url": "https://github.com/rust-lang/rust/commit/27617a10f6647e98a90adbfce4f881c32c82a4dc"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "131627329462e24a83a30098812a1b02dc9d25f7", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/94f12615735b833750b35eed7805d8a5a9898c1f/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f12615735b833750b35eed7805d8a5a9898c1f/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=94f12615735b833750b35eed7805d8a5a9898c1f", "patch": "@@ -12,14 +12,30 @@\n \n use ops::Deref;\n \n+/// Unsafe trait to indicate what types are usable with the NonZero struct\n+pub unsafe trait Zeroable {}\n+\n+unsafe impl<T> Zeroable for *const T {}\n+unsafe impl<T> Zeroable for *mut T {}\n+unsafe impl Zeroable for int {}\n+unsafe impl Zeroable for uint {}\n+unsafe impl Zeroable for i8 {}\n+unsafe impl Zeroable for u8 {}\n+unsafe impl Zeroable for i16 {}\n+unsafe impl Zeroable for u16 {}\n+unsafe impl Zeroable for i32 {}\n+unsafe impl Zeroable for u32 {}\n+unsafe impl Zeroable for i64 {}\n+unsafe impl Zeroable for u64 {}\n+\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[lang=\"non_zero\"]\n #[deriving(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Show)]\n #[experimental]\n-pub struct NonZero<T>(T);\n+pub struct NonZero<T: Zeroable>(T);\n \n-impl<T> NonZero<T> {\n+impl<T: Zeroable> NonZero<T> {\n     /// Create an instance of NonZero with the provided value.\n     /// You must indeed ensure that the value is actually \"non-zero\".\n     #[inline(always)]\n@@ -28,10 +44,48 @@ impl<T> NonZero<T> {\n     }\n }\n \n-impl<T> Deref<T> for NonZero<T> {\n+impl<T: Zeroable> Deref<T> for NonZero<T> {\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n         let NonZero(ref inner) = *self;\n         inner\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::NonZero;\n+\n+    #[test]\n+    fn test_create_nonzero_instance() {\n+        let _a = unsafe {\n+            NonZero::new(21)\n+        };\n+    }\n+\n+    #[test]\n+    fn test_size_nonzero_in_option() {\n+        use mem::size_of;\n+        use option::Option;\n+\n+        assert_eq!(size_of::<NonZero<u32>>(), size_of::<Option<NonZero<u32>>>());\n+    }\n+\n+    #[test]\n+    fn test_match_on_nonzero_option() {\n+        use option::Some;\n+\n+        let a = Some(unsafe {\n+            NonZero::new(42)\n+        });\n+        match a {\n+            Some(val) => assert_eq!(*val, 42),\n+            None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+        }\n+\n+        match unsafe { NonZero::new(43) } {\n+            Some(val) => assert_eq!(*val, 43),\n+            None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+        }\n+    }\n+}"}]}