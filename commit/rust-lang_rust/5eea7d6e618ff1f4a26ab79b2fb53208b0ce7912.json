{"sha": "5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZWE3ZDZlNjE4ZmYxZjRhMjZhYjc5YjJmYjUzMjA4YjBjZTc5MTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-23T23:22:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-23T23:22:23Z"}, "message": "don't infer region paramaterization for ids in a bound context", "tree": {"sha": "d874ec6840d9978b95662877ddc8cbdc61ad8008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d874ec6840d9978b95662877ddc8cbdc61ad8008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912", "html_url": "https://github.com/rust-lang/rust/commit/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89222646f446e608f151c08f6623c695d7b8c673", "url": "https://api.github.com/repos/rust-lang/rust/commits/89222646f446e608f151c08f6623c695d7b8c673", "html_url": "https://github.com/rust-lang/rust/commit/89222646f446e608f151c08f6623c695d7b8c673"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "e9364e1762d630e223e6786337cb54490a1d9fd3", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912", "patch": "@@ -518,6 +518,21 @@ impl determine_rp_ctxt {\n         }\n     }\n \n+    // For named types like Foo, if there is no explicit region\n+    // parameter, then we will add the anonymous region, so there is\n+    // a dependency if the anonymous region implies rp.\n+    //\n+    // If the region is explicitly specified, then we follows the\n+    // normal rules.\n+    fn opt_region_is_relevant(opt_r: option<@ast::region>) -> bool {\n+        debug!(\"opt_region_is_relevant: %? (anon_implies_rp=%b)\",\n+               opt_r, self.anon_implies_rp);\n+        match opt_r {\n+          none => self.anon_implies_rp,\n+          some(r) => self.region_is_relevant(r)\n+        }\n+    }\n+\n     fn with(item_id: ast::node_id,\n             anon_implies_rp: bool,\n             f: fn()) {\n@@ -613,19 +628,23 @@ fn determine_rp_in_ty(ty: @ast::ty,\n     // then check whether it is region-parameterized and consider\n     // that as a direct dependency.\n     match ty.node {\n-      ast::ty_path(_, id) => {\n+      ast::ty_path(path, id) => {\n         match cx.def_map.get(id) {\n           ast::def_ty(did) | ast::def_class(did, _) => {\n             if did.crate == ast::local_crate {\n-                cx.add_dep(did.node);\n+                if cx.opt_region_is_relevant(path.rp) {\n+                    cx.add_dep(did.node);\n+                }\n             } else {\n                 let cstore = cx.sess.cstore;\n                 match csearch::get_region_param(cstore, did) {\n                   none => {}\n                   some(variance) => {\n                     debug!(\"reference to external, rp'd type %s\",\n                            pprust::ty_to_str(ty, cx.sess.intr()));\n-                    cx.add_rp(cx.item_id, cx.add_variance(variance))\n+                    if cx.opt_region_is_relevant(path.rp) {\n+                        cx.add_rp(cx.item_id, cx.add_variance(variance))\n+                    }\n                   }\n                 }\n             }"}, {"sha": "bc2b074693833d5e2b22a8ccfd10cee1f49791f4", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=5eea7d6e618ff1f4a26ab79b2fb53208b0ce7912", "patch": "@@ -0,0 +1,21 @@\n+struct direct {\n+    f: &int;\n+}\n+\n+struct indirect1 {\n+    g: fn@(direct);\n+}\n+\n+struct indirect2 {\n+    g: fn@(direct/&);\n+}\n+\n+struct indirect3 {\n+    g: fn@(direct/&self);\n+}\n+\n+fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types\n+fn take_indirect1(p: indirect1) -> indirect1 { p }\n+fn take_indirect2(p: indirect2) -> indirect2 { p }\n+fn take_indirect3(p: indirect3) -> indirect3 { p } //~ ERROR mismatched types\n+fn main() {}"}]}