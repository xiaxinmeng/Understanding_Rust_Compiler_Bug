{"sha": "9f6f8620e188d5026f1b23d7714b4e41e2d92e30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmY4NjIwZTE4OGQ1MDI2ZjFiMjNkNzcxNGI0ZTQxZTJkOTJlMzA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-04-19T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-08-24T11:31:11Z"}, "message": "Improve liveness analysis for generators\n\nLiveness analysis for generators assumes that execution always continues\nnormally after a yield point, not accounting for the fact that generator\ncould be dropped before completion.\n\nIf generators captures any variables by reference, those variables could\nbe used within a generator, or when the generator completes, but also\nafter each yield point in the case the generator is dropped.\n\nAccount for the case when generator is dropped after yielding, but\nbefore running to the completion. This effectively considers all\nvariables captured by reference to be used after a yield point.", "tree": {"sha": "08e3e27d6d2d33a2fdf10ce16f86df44d33c0a25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e3e27d6d2d33a2fdf10ce16f86df44d33c0a25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6f8620e188d5026f1b23d7714b4e41e2d92e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6f8620e188d5026f1b23d7714b4e41e2d92e30", "html_url": "https://github.com/rust-lang/rust/commit/9f6f8620e188d5026f1b23d7714b4e41e2d92e30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6f8620e188d5026f1b23d7714b4e41e2d92e30/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f66e825f73d2bd7f8a763b723983850f891985b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66e825f73d2bd7f8a763b723983850f891985b0", "html_url": "https://github.com/rust-lang/rust/commit/f66e825f73d2bd7f8a763b723983850f891985b0"}], "stats": {"total": 130, "additions": 107, "deletions": 23}, "files": [{"sha": "edc0ff62bd5ec56a2fb52406106f539021b7d212", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f6f8620e188d5026f1b23d7714b4e41e2d92e30/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6f8620e188d5026f1b23d7714b4e41e2d92e30/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=9f6f8620e188d5026f1b23d7714b4e41e2d92e30", "patch": "@@ -435,7 +435,10 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             }\n \n             // live nodes required for interesting control flow:\n-            hir::ExprKind::If(..) | hir::ExprKind::Match(..) | hir::ExprKind::Loop(..) => {\n+            hir::ExprKind::If(..)\n+            | hir::ExprKind::Match(..)\n+            | hir::ExprKind::Loop(..)\n+            | hir::ExprKind::Yield(..) => {\n                 self.add_live_node_for_node(expr.hir_id, ExprNode(expr.span, expr.hir_id));\n                 intravisit::walk_expr(self, expr);\n             }\n@@ -469,7 +472,6 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Box(..)\n-            | hir::ExprKind::Yield(..)\n             | hir::ExprKind::Type(..)\n             | hir::ExprKind::Err\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n@@ -866,6 +868,13 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             // at the label ident\n             hir::ExprKind::Loop(ref blk, ..) => self.propagate_through_loop(expr, &blk, succ),\n \n+            hir::ExprKind::Yield(ref e, ..) => {\n+                let yield_ln = self.live_node(expr.hir_id, expr.span);\n+                self.init_from_succ(yield_ln, succ);\n+                self.merge_from_succ(yield_ln, self.exit_ln);\n+                self.propagate_through_expr(e, yield_ln)\n+            }\n+\n             hir::ExprKind::If(ref cond, ref then, ref else_opt) => {\n                 //\n                 //     (cond)\n@@ -1025,7 +1034,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             | hir::ExprKind::Type(ref e, _)\n             | hir::ExprKind::DropTemps(ref e)\n             | hir::ExprKind::Unary(_, ref e)\n-            | hir::ExprKind::Yield(ref e, _)\n             | hir::ExprKind::Repeat(ref e, _) => self.propagate_through_expr(&e, succ),\n \n             hir::ExprKind::InlineAsm(ref asm) => {"}, {"sha": "d446d57d3964726aac90d4d741011f2b4896d40d", "filename": "src/test/ui/liveness/liveness-upvars.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f6f8620e188d5026f1b23d7714b4e41e2d92e30/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6f8620e188d5026f1b23d7714b4e41e2d92e30/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.rs?ref=9f6f8620e188d5026f1b23d7714b4e41e2d92e30", "patch": "@@ -1,5 +1,6 @@\n // edition:2018\n // check-pass\n+#![feature(generators)]\n #![warn(unused)]\n #![allow(unreachable_code)]\n \n@@ -105,4 +106,39 @@ pub fn h<T: Copy + Default + std::fmt::Debug>() {\n     };\n }\n \n+async fn yield_now() {\n+    todo!();\n+}\n+\n+pub fn async_generator() {\n+    let mut state: u32 = 0;\n+\n+    let _ = async {\n+        state = 1;\n+        yield_now().await;\n+        state = 2;\n+        yield_now().await;\n+        state = 3;\n+    };\n+\n+    let _ = async move {\n+        state = 4;  //~  WARN value assigned to `state` is never read\n+                    //~| WARN unused variable: `state`\n+        yield_now().await;\n+        state = 5;  //~ WARN value assigned to `state` is never read\n+    };\n+}\n+\n+pub fn generator() {\n+    let mut s: u32 = 0;\n+    let _ = |_| {\n+        s = 0;\n+        yield ();\n+        s = 1; //~ WARN value assigned to `s` is never read\n+        yield (s = 2);\n+        s = yield (); //~ WARN value assigned to `s` is never read\n+        s = 3;\n+    };\n+}\n+\n fn main() {}"}, {"sha": "d1723302513652fafe204bef5fe72fb3f4588832", "filename": "src/test/ui/liveness/liveness-upvars.stderr", "status": "modified", "additions": 60, "deletions": 20, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9f6f8620e188d5026f1b23d7714b4e41e2d92e30/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6f8620e188d5026f1b23d7714b4e41e2d92e30/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-upvars.stderr?ref=9f6f8620e188d5026f1b23d7714b4e41e2d92e30", "patch": "@@ -1,150 +1,190 @@\n warning: value assigned to `last` is never read\n-  --> $DIR/liveness-upvars.rs:9:9\n+  --> $DIR/liveness-upvars.rs:10:9\n    |\n LL |         last = Some(s);\n    |         ^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/liveness-upvars.rs:3:9\n+  --> $DIR/liveness-upvars.rs:4:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `last`\n-  --> $DIR/liveness-upvars.rs:9:9\n+  --> $DIR/liveness-upvars.rs:10:9\n    |\n LL |         last = Some(s);\n    |         ^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/liveness-upvars.rs:3:9\n+  --> $DIR/liveness-upvars.rs:4:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n    = help: did you mean to capture by reference instead?\n \n warning: unused variable: `sum`\n-  --> $DIR/liveness-upvars.rs:21:9\n+  --> $DIR/liveness-upvars.rs:22:9\n    |\n LL |         sum += x;\n    |         ^^^\n    |\n    = help: did you mean to capture by reference instead?\n \n warning: value captured by `c` is never read\n-  --> $DIR/liveness-upvars.rs:31:9\n+  --> $DIR/liveness-upvars.rs:32:9\n    |\n LL |         c = 1;\n    |         ^\n    |\n    = help: did you mean to capture by reference instead?\n \n warning: value captured by `c` is never read\n-  --> $DIR/liveness-upvars.rs:35:9\n+  --> $DIR/liveness-upvars.rs:36:9\n    |\n LL |         c = 1;\n    |         ^\n    |\n    = help: did you mean to capture by reference instead?\n \n warning: unused variable: `c`\n-  --> $DIR/liveness-upvars.rs:41:9\n+  --> $DIR/liveness-upvars.rs:42:9\n    |\n LL |         c += 1;\n    |         ^\n    |\n    = help: did you mean to capture by reference instead?\n \n warning: value assigned to `c` is never read\n-  --> $DIR/liveness-upvars.rs:44:9\n+  --> $DIR/liveness-upvars.rs:45:9\n    |\n LL |         c += 1;\n    |         ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `c`\n-  --> $DIR/liveness-upvars.rs:44:9\n+  --> $DIR/liveness-upvars.rs:45:9\n    |\n LL |         c += 1;\n    |         ^\n    |\n    = help: did you mean to capture by reference instead?\n \n warning: value assigned to `c` is never read\n-  --> $DIR/liveness-upvars.rs:57:9\n+  --> $DIR/liveness-upvars.rs:58:9\n    |\n LL |         c += 1;\n    |         ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `c` is never read\n-  --> $DIR/liveness-upvars.rs:63:9\n+  --> $DIR/liveness-upvars.rs:64:9\n    |\n LL |         c += 1;\n    |         ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `d` is never read\n-  --> $DIR/liveness-upvars.rs:72:13\n+  --> $DIR/liveness-upvars.rs:73:13\n    |\n LL |             d = Some(\"d1\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `e` is never read\n-  --> $DIR/liveness-upvars.rs:76:13\n+  --> $DIR/liveness-upvars.rs:77:13\n    |\n LL |             e = Some(\"e1\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `e` is never read\n-  --> $DIR/liveness-upvars.rs:78:13\n+  --> $DIR/liveness-upvars.rs:79:13\n    |\n LL |             e = Some(\"e2\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `e`\n-  --> $DIR/liveness-upvars.rs:76:13\n+  --> $DIR/liveness-upvars.rs:77:13\n    |\n LL |             e = Some(\"e1\");\n    |             ^\n    |\n    = help: did you mean to capture by reference instead?\n \n warning: value assigned to `v` is never read\n-  --> $DIR/liveness-upvars.rs:86:13\n+  --> $DIR/liveness-upvars.rs:87:13\n    |\n LL |             v = T::default();\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `z` is never read\n-  --> $DIR/liveness-upvars.rs:98:17\n+  --> $DIR/liveness-upvars.rs:99:17\n    |\n LL |                 z = T::default();\n    |                 ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `z`\n-  --> $DIR/liveness-upvars.rs:98:17\n+  --> $DIR/liveness-upvars.rs:99:17\n    |\n LL |                 z = T::default();\n    |                 ^\n    |\n    = help: did you mean to capture by reference instead?\n \n-warning: 17 warnings emitted\n+warning: value assigned to `state` is never read\n+  --> $DIR/liveness-upvars.rs:125:9\n+   |\n+LL |         state = 4;\n+   |         ^^^^^\n+   |\n+   = help: maybe it is overwritten before being read?\n+\n+warning: value assigned to `state` is never read\n+  --> $DIR/liveness-upvars.rs:128:9\n+   |\n+LL |         state = 5;\n+   |         ^^^^^\n+   |\n+   = help: maybe it is overwritten before being read?\n+\n+warning: unused variable: `state`\n+  --> $DIR/liveness-upvars.rs:125:9\n+   |\n+LL |         state = 4;\n+   |         ^^^^^\n+   |\n+   = help: did you mean to capture by reference instead?\n+\n+warning: value assigned to `s` is never read\n+  --> $DIR/liveness-upvars.rs:137:9\n+   |\n+LL |         s = 1;\n+   |         ^\n+   |\n+   = help: maybe it is overwritten before being read?\n+\n+warning: value assigned to `s` is never read\n+  --> $DIR/liveness-upvars.rs:139:9\n+   |\n+LL |         s = yield ();\n+   |         ^\n+   |\n+   = help: maybe it is overwritten before being read?\n+\n+warning: 22 warnings emitted\n "}]}