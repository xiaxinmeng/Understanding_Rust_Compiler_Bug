{"sha": "8bc75c4c28eff4664979905a7b75b890b3f84437", "node_id": "C_kwDOAAsO6NoAKDhiYzc1YzRjMjhlZmY0NjY0OTc5OTA1YTdiNzViODkwYjNmODQ0Mzc", "commit": {"author": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-21T20:25:56Z"}, "committer": {"name": "Jonas Marcello", "email": "jonas.marcello@esbme.com", "date": "2023-02-27T17:08:20Z"}, "message": "return Iterator instead of Vec for combined lifetime and argument parameters", "tree": {"sha": "49de47d858d4c484e29dab86c79ccc21c2766ef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49de47d858d4c484e29dab86c79ccc21c2766ef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc75c4c28eff4664979905a7b75b890b3f84437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc75c4c28eff4664979905a7b75b890b3f84437", "html_url": "https://github.com/rust-lang/rust/commit/8bc75c4c28eff4664979905a7b75b890b3f84437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc75c4c28eff4664979905a7b75b890b3f84437/comments", "author": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anergictcell", "id": 875703, "node_id": "MDQ6VXNlcjg3NTcwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/875703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anergictcell", "html_url": "https://github.com/anergictcell", "followers_url": "https://api.github.com/users/anergictcell/followers", "following_url": "https://api.github.com/users/anergictcell/following{/other_user}", "gists_url": "https://api.github.com/users/anergictcell/gists{/gist_id}", "starred_url": "https://api.github.com/users/anergictcell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anergictcell/subscriptions", "organizations_url": "https://api.github.com/users/anergictcell/orgs", "repos_url": "https://api.github.com/users/anergictcell/repos", "events_url": "https://api.github.com/users/anergictcell/events{/privacy}", "received_events_url": "https://api.github.com/users/anergictcell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/9942cc425ba31cf47ebf9498ed3cd58f064b2b89", "html_url": "https://github.com/rust-lang/rust/commit/9942cc425ba31cf47ebf9498ed3cd58f064b2b89"}], "stats": {"total": 55, "additions": 23, "deletions": 32}, "files": [{"sha": "883838293eda36bea1281f56b3a6b65d1f1b5c38", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8bc75c4c28eff4664979905a7b75b890b3f84437/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc75c4c28eff4664979905a7b75b890b3f84437/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8bc75c4c28eff4664979905a7b75b890b3f84437", "patch": "@@ -42,7 +42,7 @@ use hir_def::{\n     adt::VariantData,\n     body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, ExprOrPatId, LabelId, Pat, PatId},\n-    generics::{TypeOrConstParamData, TypeParamProvenance, LifetimeParamData},\n+    generics::{LifetimeParamData, TypeOrConstParamData, TypeParamProvenance},\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::{Layout, LayoutError, ReprOptions},\n@@ -1177,13 +1177,16 @@ impl Adt {\n             Adt::Union(u) => u.id.resolver(db.upcast()),\n             Adt::Enum(e) => e.id.resolver(db.upcast()),\n         };\n-        resolver.generic_params().and_then(|gp| {\n-            (&gp.lifetimes)\n-            .iter()\n-            // there should only be a single lifetime\n-            // but `Arena` requires to use an iterator\n-            .nth(0)\n-        }).map(|arena| arena.1.clone())\n+        resolver\n+            .generic_params()\n+            .and_then(|gp| {\n+                (&gp.lifetimes)\n+                    .iter()\n+                    // there should only be a single lifetime\n+                    // but `Arena` requires to use an iterator\n+                    .nth(0)\n+            })\n+            .map(|arena| arena.1.clone())\n     }\n \n     pub fn as_enum(&self) -> Option<Enum> {\n@@ -3355,23 +3358,15 @@ impl Type {\n             .map(move |ty| self.derived(ty))\n     }\n \n-    /// Combines lifetime indicators and type arguments into a single `Vec<SmolStr>`\n-    pub fn lifetime_and_type_arguments<'a>(&'a self, db: &'a dyn HirDatabase) -> Vec<SmolStr> {\n-        let mut names = if let Some(lt) = self\n-            .as_adt()\n-            .and_then(|a| {\n-                a.lifetime(db)\n-                .and_then(|lt| Some((&lt.name).to_smol_str().clone()))\n-            }) {\n-                vec![lt]\n-            } else {\n-                vec![]\n-            };\n-\n-        for ty in self.type_arguments() {\n-            names.push(SmolStr::new(ty.display(db).to_string()))\n-        }\n-        names\n+    /// Combines lifetime indicators and type arguments into a single `Iterator`\n+    pub fn lifetime_and_type_arguments<'a>(\n+        &'a self,\n+        db: &'a dyn HirDatabase,\n+    ) -> impl Iterator<Item = SmolStr> + 'a {\n+        self.as_adt()\n+            .and_then(|a| a.lifetime(db).and_then(|lt| Some((&lt.name).to_smol_str())))\n+            .into_iter()\n+            .chain(self.type_arguments().map(|ty| SmolStr::new(ty.display(db).to_string())))\n     }\n \n     pub fn iterate_method_candidates_with_traits<T>("}, {"sha": "b0477e9678543c67703a40b7ca78b13cb8edc3b9", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bc75c4c28eff4664979905a7b75b890b3f84437/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc75c4c28eff4664979905a7b75b890b3f84437/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=8bc75c4c28eff4664979905a7b75b890b3f84437", "patch": "@@ -370,7 +370,7 @@ pub(crate) fn runnable_impl(\n     let nav = def.try_to_nav(sema.db)?;\n     let ty = def.self_ty(sema.db);\n     let adt_name = ty.as_adt()?.name(sema.db);\n-    let mut ty_args = ty.lifetime_and_type_arguments(sema.db).into_iter().peekable();\n+    let mut ty_args = ty.lifetime_and_type_arguments(sema.db).peekable();\n     let params = if ty_args.peek().is_some() {\n         format!(\"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty)))\n     } else {\n@@ -436,14 +436,10 @@ fn module_def_doctest(db: &RootDatabase, def: Definition) -> Option<Runnable> {\n                 let ty = imp.self_ty(db);\n                 if let Some(adt) = ty.as_adt() {\n                     let name = adt.name(db);\n-                    let mut ty_args = ty.lifetime_and_type_arguments(db).into_iter().peekable();\n+                    let mut ty_args = ty.lifetime_and_type_arguments(db).peekable();\n                     format_to!(path, \"{}\", name);\n                     if ty_args.peek().is_some() {\n-                        format_to!(\n-                            path,\n-                            \"<{}>\",\n-                            ty_args.format_with(\",\", |ty, cb| cb(&ty))\n-                        );\n+                        format_to!(path, \"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty)));\n                     }\n                     format_to!(path, \"::{}\", def_name);\n                     path.retain(|c| c != ' ');"}]}