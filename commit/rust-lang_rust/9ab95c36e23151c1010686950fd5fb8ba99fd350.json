{"sha": "9ab95c36e23151c1010686950fd5fb8ba99fd350", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjk1YzM2ZTIzMTUxYzEwMTA2ODY5NTBmZDVmYjhiYTk5ZmQzNTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-26T23:53:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-26T23:53:13Z"}, "message": "Rollup merge of #76917 - GuillaumeGomez:map-missing-code-examples, r=Dylan-DPC\n\nAdd missing code examples on HashMap types\n\nr? @Dylan-DPC", "tree": {"sha": "da07bd38427c1e9ff860d89b6a010ebf659485b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da07bd38427c1e9ff860d89b6a010ebf659485b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab95c36e23151c1010686950fd5fb8ba99fd350", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfb9RqCRBK7hj4Ov3rIwAAdHIIAH6dw/f9o0csTn351xdBpBN2\nMmeB3dXN5ywio1+N8wzGAHrNMSFhBUTHzcg3aEGrW7OlRPyz4WRegZ37iFVsOKJK\na2/8dsTk2bQsp/rsujAq4phBAcK9CMnJ895Ab4tYZp+QWZTjdyFHsQbZmBvET58F\ny1/BFnZqNOQN706s3t0R+lsvml9WHXW2bdQLIpzaG1ZdZQ/phyk0k+RZ9y8kMxvo\nk3whbLHR7bqz+o7Wni7duG5MqjPNro0myYiTLLQ05C7LErE4tcHUQ1OB0fuPEKBV\nQtzj5cohKZjhKm/5fmXNhbBieK9vJOfmFEiwfcOPybCzl3hcLyJ0Xf52bMC+ynY=\n=dhA/\n-----END PGP SIGNATURE-----\n", "payload": "tree da07bd38427c1e9ff860d89b6a010ebf659485b8\nparent 623fb90b5a1f324e0ec44085116bf858cef19a00\nparent be3d8e5d6cc6833963c00404ec48a7f8f4a0c606\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601164393 +0200\ncommitter GitHub <noreply@github.com> 1601164393 +0200\n\nRollup merge of #76917 - GuillaumeGomez:map-missing-code-examples, r=Dylan-DPC\n\nAdd missing code examples on HashMap types\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab95c36e23151c1010686950fd5fb8ba99fd350", "html_url": "https://github.com/rust-lang/rust/commit/9ab95c36e23151c1010686950fd5fb8ba99fd350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab95c36e23151c1010686950fd5fb8ba99fd350/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "623fb90b5a1f324e0ec44085116bf858cef19a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/623fb90b5a1f324e0ec44085116bf858cef19a00", "html_url": "https://github.com/rust-lang/rust/commit/623fb90b5a1f324e0ec44085116bf858cef19a00"}, {"sha": "be3d8e5d6cc6833963c00404ec48a7f8f4a0c606", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606", "html_url": "https://github.com/rust-lang/rust/commit/be3d8e5d6cc6833963c00404ec48a7f8f4a0c606"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "1bb835e1eada1db802ac8244fd4c1378a27abecf", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 106, "deletions": 1, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/9ab95c36e23151c1010686950fd5fb8ba99fd350/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab95c36e23151c1010686950fd5fb8ba99fd350/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=9ab95c36e23151c1010686950fd5fb8ba99fd350", "patch": "@@ -1102,6 +1102,16 @@ where\n /// documentation for more.\n ///\n /// [`iter`]: HashMap::iter\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     base: base::Iter<'a, K, V>,\n@@ -1129,6 +1139,16 @@ impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n /// documentation for more.\n ///\n /// [`iter_mut`]: HashMap::iter_mut\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.iter_mut();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     base: base::IterMut<'a, K, V>,\n@@ -1148,6 +1168,16 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.into_iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     base: base::IntoIter<K, V>,\n@@ -1167,6 +1197,16 @@ impl<K, V> IntoIter<K, V> {\n /// documentation for more.\n ///\n /// [`keys`]: HashMap::keys\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.keys();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1194,6 +1234,16 @@ impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n /// documentation for more.\n ///\n /// [`values`]: HashMap::values\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_values = map.values();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1221,6 +1271,16 @@ impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n /// documentation for more.\n ///\n /// [`drain`]: HashMap::drain\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.drain();\n+/// ```\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     base: base::Drain<'a, K, V>,\n@@ -1239,6 +1299,18 @@ impl<'a, K, V> Drain<'a, K, V> {\n /// This `struct` is created by the [`drain_filter`] method on [`HashMap`].\n ///\n /// [`drain_filter`]: HashMap::drain_filter\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(hash_drain_filter)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.drain_filter(|_k, v| *v % 2 == 0);\n+/// ```\n #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n pub struct DrainFilter<'a, K, V, F>\n where\n@@ -1253,6 +1325,16 @@ where\n /// documentation for more.\n ///\n /// [`values_mut`]: HashMap::values_mut\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_values = map.values_mut();\n+/// ```\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n@@ -1264,6 +1346,18 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: HashMap::into_keys\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(map_into_keys_values)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.into_keys();\n+/// ```\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n@@ -1275,6 +1369,18 @@ pub struct IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: HashMap::into_values\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(map_into_keys_values)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.into_values();\n+/// ```\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n@@ -1285,7 +1391,6 @@ pub struct IntoValues<K, V> {\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n ///\n /// [`HashMap::raw_entry_mut`]: HashMap::raw_entry_mut\n-\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a mut HashMap<K, V, S>,"}]}