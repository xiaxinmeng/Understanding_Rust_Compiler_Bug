{"sha": "a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "node_id": "C_kwDOAAsO6NoAKGExMmQzMWQ1YTY4MWQ3MGYyNzdiNGZiZjZjYWZlMjJiYWU4NzZlYTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T00:02:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T00:02:43Z"}, "message": "Auto merge of #102963 - ilammy:xray-basic, r=estebank\n\nAdd `-Z instrument-xray` flag\n\nImplement MCP https://github.com/rust-lang/compiler-team/issues/561, adding `-Z instrument-xray` flag which enables XRay instrumentation in LLVM.", "tree": {"sha": "e91ce326e25a67155c2ebeb582a25656ebde3810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e91ce326e25a67155c2ebeb582a25656ebde3810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "html_url": "https://github.com/rust-lang/rust/commit/a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8996ea93b6e554148c4286e62b613f12a3ee505c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8996ea93b6e554148c4286e62b613f12a3ee505c", "html_url": "https://github.com/rust-lang/rust/commit/8996ea93b6e554148c4286e62b613f12a3ee505c"}, {"sha": "54b26f49e6d30aefcbf206ee5cfcf6122503553c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b26f49e6d30aefcbf206ee5cfcf6122503553c", "html_url": "https://github.com/rust-lang/rust/commit/54b26f49e6d30aefcbf206ee5cfcf6122503553c"}], "stats": {"total": 321, "additions": 312, "deletions": 9}, "files": [{"sha": "7a4ec494c8e7fab862d7a8ab77a1916c3b41f7a6", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -118,7 +118,8 @@ pub fn frame_pointer_type_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attr\n \n /// Tell LLVM what instrument function to insert.\n #[inline]\n-fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n+fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> SmallVec<[&'ll Attribute; 4]> {\n+    let mut attrs = SmallVec::new();\n     if cx.sess().opts.unstable_opts.instrument_mcount {\n         // Similar to `clang -pg` behavior. Handled by the\n         // `post-inline-ee-instrument` LLVM pass.\n@@ -127,14 +128,41 @@ fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribu\n         // See test/CodeGen/mcount.c in clang.\n         let mcount_name = cx.sess().target.mcount.as_ref();\n \n-        Some(llvm::CreateAttrStringValue(\n+        attrs.push(llvm::CreateAttrStringValue(\n             cx.llcx,\n             \"instrument-function-entry-inlined\",\n             &mcount_name,\n-        ))\n-    } else {\n-        None\n+        ));\n+    }\n+    if let Some(options) = &cx.sess().opts.unstable_opts.instrument_xray {\n+        // XRay instrumentation is similar to __cyg_profile_func_{enter,exit}.\n+        // Function prologue and epilogue are instrumented with NOP sleds,\n+        // a runtime library later replaces them with detours into tracing code.\n+        if options.always {\n+            attrs.push(llvm::CreateAttrStringValue(cx.llcx, \"function-instrument\", \"xray-always\"));\n+        }\n+        if options.never {\n+            attrs.push(llvm::CreateAttrStringValue(cx.llcx, \"function-instrument\", \"xray-never\"));\n+        }\n+        if options.ignore_loops {\n+            attrs.push(llvm::CreateAttrString(cx.llcx, \"xray-ignore-loops\"));\n+        }\n+        // LLVM will not choose the default for us, but rather requires specific\n+        // threshold in absence of \"xray-always\". Use the same default as Clang.\n+        let threshold = options.instruction_threshold.unwrap_or(200);\n+        attrs.push(llvm::CreateAttrStringValue(\n+            cx.llcx,\n+            \"xray-instruction-threshold\",\n+            &threshold.to_string(),\n+        ));\n+        if options.skip_entry {\n+            attrs.push(llvm::CreateAttrString(cx.llcx, \"xray-skip-entry\"));\n+        }\n+        if options.skip_exit {\n+            attrs.push(llvm::CreateAttrString(cx.llcx, \"xray-skip-exit\"));\n+        }\n     }\n+    attrs\n }\n \n fn nojumptables_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {"}, {"sha": "fe553edab4276ffacd618b99ffd877bad142a588", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -25,6 +25,8 @@ session_profile_sample_use_file_does_not_exist = file `{$path}` passed to `-C pr\n \n session_target_requires_unwind_tables = target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`\n \n+session_instrumentation_not_supported = {$us} instrumentation is not supported for this target\n+\n session_sanitizer_not_supported = {$us} sanitizer is not supported for this target\n \n session_sanitizers_not_supported = {$us} sanitizers are not supported for this target"}, {"sha": "0d3499ca9a0488c217b2ce77ea3d07b1b993e2e0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n use rustc_session::config::Input;\n+use rustc_session::config::InstrumentXRay;\n use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n@@ -755,6 +756,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(inline_mir_threshold, Some(123));\n     tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(instrument_mcount, true);\n+    tracked!(instrument_xray, Some(InstrumentXRay::default()));\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });"}, {"sha": "7d2fdf94baa367a4aadf412f6866f001dd186b22", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -174,6 +174,25 @@ pub enum InstrumentCoverage {\n     Off,\n }\n \n+/// Settings for `-Z instrument-xray` flag.\n+#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, Hash)]\n+pub struct InstrumentXRay {\n+    /// `-Z instrument-xray=always`, force instrumentation\n+    pub always: bool,\n+    /// `-Z instrument-xray=never`, disable instrumentation\n+    pub never: bool,\n+    /// `-Z instrument-xray=ignore-loops`, ignore presence of loops,\n+    /// instrument functions based only on instruction count\n+    pub ignore_loops: bool,\n+    /// `-Z instrument-xray=instruction-threshold=N`, explicitly set instruction threshold\n+    /// for instrumentation, or `None` to use compiler's default\n+    pub instruction_threshold: Option<usize>,\n+    /// `-Z instrument-xray=skip-entry`, do not instrument function entry\n+    pub skip_entry: bool,\n+    /// `-Z instrument-xray=skip-exit`, do not instrument function exit\n+    pub skip_exit: bool,\n+}\n+\n #[derive(Clone, PartialEq, Hash, Debug)]\n pub enum LinkerPluginLto {\n     LinkerPlugin(PathBuf),\n@@ -2805,9 +2824,9 @@ impl PpMode {\n pub(crate) mod dep_tracking {\n     use super::{\n         BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n-        InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OomStrategy, OptLevel,\n-        OutputType, OutputTypes, Passes, SourceFileHashAlgorithm, SplitDwarfKind,\n-        SwitchWithOptPath, SymbolManglingVersion, TraitSolver, TrimmedDefPaths,\n+        InstrumentCoverage, InstrumentXRay, LdImpl, LinkerPluginLto, LocationDetail, LtoCli,\n+        OomStrategy, OptLevel, OutputType, OutputTypes, Passes, SourceFileHashAlgorithm,\n+        SplitDwarfKind, SwitchWithOptPath, SymbolManglingVersion, TraitSolver, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2876,6 +2895,7 @@ pub(crate) mod dep_tracking {\n         CodeModel,\n         TlsModel,\n         InstrumentCoverage,\n+        InstrumentXRay,\n         CrateType,\n         MergeFunctions,\n         PanicStrategy,"}, {"sha": "c851145440b863a55e957ba804af5d79722c0fa4", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -71,6 +71,12 @@ pub struct ProfileSampleUseFileDoesNotExist<'a> {\n #[diag(session_target_requires_unwind_tables)]\n pub struct TargetRequiresUnwindTables;\n \n+#[derive(Diagnostic)]\n+#[diag(session_instrumentation_not_supported)]\n+pub struct InstrumentationNotSupported {\n+    pub us: String,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(session_sanitizer_not_supported)]\n pub struct SanitizerNotSupported {"}, {"sha": "b9723d35e58912f61544768f4cb11626c3f7bdea", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -380,6 +380,7 @@ mod desc {\n     pub const parse_dump_mono_stats: &str = \"`markdown` (default) or `json`\";\n     pub const parse_instrument_coverage: &str =\n         \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n+    pub const parse_instrument_xray: &str = \"either a boolean (`yes`, `no`, `on`, `off`, etc), or a comma separated list of settings: `always` or `never` (mutually exclusive), `ignore-loops`, `instruction-threshold=N`, `skip-entry`, `skip-exit`\";\n     pub const parse_unpretty: &str = \"`string` or `string=string`\";\n     pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n     pub const parse_trait_solver: &str =\n@@ -869,6 +870,68 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_instrument_xray(\n+        slot: &mut Option<InstrumentXRay>,\n+        v: Option<&str>,\n+    ) -> bool {\n+        if v.is_some() {\n+            let mut bool_arg = None;\n+            if parse_opt_bool(&mut bool_arg, v) {\n+                *slot = if bool_arg.unwrap() { Some(InstrumentXRay::default()) } else { None };\n+                return true;\n+            }\n+        }\n+\n+        let mut options = slot.get_or_insert_default();\n+        let mut seen_always = false;\n+        let mut seen_never = false;\n+        let mut seen_ignore_loops = false;\n+        let mut seen_instruction_threshold = false;\n+        let mut seen_skip_entry = false;\n+        let mut seen_skip_exit = false;\n+        for option in v.into_iter().map(|v| v.split(',')).flatten() {\n+            match option {\n+                \"always\" if !seen_always && !seen_never => {\n+                    options.always = true;\n+                    options.never = false;\n+                    seen_always = true;\n+                }\n+                \"never\" if !seen_never && !seen_always => {\n+                    options.never = true;\n+                    options.always = false;\n+                    seen_never = true;\n+                }\n+                \"ignore-loops\" if !seen_ignore_loops => {\n+                    options.ignore_loops = true;\n+                    seen_ignore_loops = true;\n+                }\n+                option\n+                    if option.starts_with(\"instruction-threshold\")\n+                        && !seen_instruction_threshold =>\n+                {\n+                    let Some((\"instruction-threshold\", n)) = option.split_once('=') else {\n+                        return false;\n+                    };\n+                    match n.parse() {\n+                        Ok(n) => options.instruction_threshold = Some(n),\n+                        Err(_) => return false,\n+                    }\n+                    seen_instruction_threshold = true;\n+                }\n+                \"skip-entry\" if !seen_skip_entry => {\n+                    options.skip_entry = true;\n+                    seen_skip_entry = true;\n+                }\n+                \"skip-exit\" if !seen_skip_exit => {\n+                    options.skip_exit = true;\n+                    seen_skip_exit = true;\n+                }\n+                _ => return false,\n+            }\n+        }\n+        true\n+    }\n+\n     pub(crate) fn parse_treat_err_as_bug(slot: &mut Option<NonZeroUsize>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => {\n@@ -1397,6 +1460,16 @@ options! {\n         `=off` (default)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n+    instrument_xray: Option<InstrumentXRay> = (None, parse_instrument_xray, [TRACKED],\n+        \"insert function instrument code for XRay-based tracing (default: no)\n+         Optional extra settings:\n+         `=always`\n+         `=never`\n+         `=ignore-loops`\n+         `=instruction-threshold=N`\n+         `=skip-entry`\n+         `=skip-exit`\n+         Multiple options can be combined with commas.\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n         \"keep hygiene data after analysis (default: no)\"),\n     layout_seed: Option<u64> = (None, parse_opt_number, [TRACKED],"}, {"sha": "fe6ac80fde6eb99e7cda05e7b248d1143d41fe2d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -1589,6 +1589,10 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     {\n         sess.emit_err(errors::SplitDebugInfoUnstablePlatform { debuginfo: sess.split_debuginfo() });\n     }\n+\n+    if sess.opts.unstable_opts.instrument_xray.is_some() && !sess.target.options.supports_xray {\n+        sess.emit_err(errors::InstrumentationNotSupported { us: \"XRay\".to_string() });\n+    }\n }\n \n /// Holds data on the current incremental compilation session, if there is one."}, {"sha": "daa946ccd519cc1a3bf9eb9cd430092558b1c1c7", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> Target {\n                 | SanitizerSet::MEMTAG\n                 | SanitizerSet::SHADOWCALLSTACK\n                 | SanitizerSet::ADDRESS,\n+            supports_xray: true,\n             ..super::android_base::opts()\n         },\n     }"}, {"sha": "36d54f1d7cc5c681a0fba9a0077f9509064556de", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n                 | SanitizerSet::MEMTAG\n                 | SanitizerSet::THREAD\n                 | SanitizerSet::HWADDRESS,\n+            supports_xray: true,\n             ..super::linux_gnu_base::opts()\n         },\n     }"}, {"sha": "9c299fed6be16c573a0039b9fc355aa12765968c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -3,6 +3,7 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-musl\".into(),"}, {"sha": "bc1920e34249a25ee97a242cb9b2d51079738e57", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -1718,6 +1718,9 @@ pub struct TargetOptions {\n     /// The ABI of entry function.\n     /// Default value is `Conv::C`, i.e. C call convention\n     pub entry_abi: Conv,\n+\n+    /// Whether the target supports XRay instrumentation.\n+    pub supports_xray: bool,\n }\n \n /// Add arguments for the given flavor and also for its \"twin\" flavors\n@@ -1937,6 +1940,7 @@ impl Default for TargetOptions {\n             supports_stack_protector: true,\n             entry_name: \"main\".into(),\n             entry_abi: Conv::C,\n+            supports_xray: false,\n         }\n     }\n }\n@@ -2592,6 +2596,7 @@ impl Target {\n         key!(supports_stack_protector, bool);\n         key!(entry_name);\n         key!(entry_abi, Conv)?;\n+        key!(supports_xray, bool);\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2845,6 +2850,7 @@ impl ToJson for Target {\n         target_option_val!(supports_stack_protector);\n         target_option_val!(entry_name);\n         target_option_val!(entry_abi);\n+        target_option_val!(supports_xray);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".into(), Abi::name(abi).to_json());"}, {"sha": "a3bdb5f5465b07a93f9fc2823e9473a67b437894", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-linux-android\".into(),"}, {"sha": "b41e5842aad1303f81b995a9f6aa2e86b1094964", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-freebsd\".into(),"}, {"sha": "9af1049b870269b161b8804841df6e938f3adde1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -12,6 +12,7 @@ pub fn target() -> Target {\n         | SanitizerSet::LEAK\n         | SanitizerSet::MEMORY\n         | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".into(),"}, {"sha": "bf4cf7d7becadb9891d3581e710df3f4147eb371", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -12,6 +12,7 @@ pub fn target() -> Target {\n         | SanitizerSet::LEAK\n         | SanitizerSet::MEMORY\n         | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".into(),"}, {"sha": "74c434935ba88078747ac851dc336cc0b2434493", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         | SanitizerSet::LEAK\n         | SanitizerSet::MEMORY\n         | SanitizerSet::THREAD;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-netbsd\".into(),"}, {"sha": "8e4d42a0acaf35660cd5259d3059d56ccf86f47f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -6,6 +6,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n     base.stack_probes = StackProbeType::X86;\n+    base.supports_xray = true;\n \n     Target {\n         llvm_target: \"x86_64-unknown-openbsd\".into(),"}, {"sha": "7fb33cd68b4a383c0e792f6d04fb2861a7c5a06b", "filename": "src/doc/unstable-book/src/compiler-flags/instrument-xray.md", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-xray.md", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-xray.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-xray.md?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,39 @@\n+# `instrument-xray`\n+\n+The tracking issue for this feature is: [#102921](https://github.com/rust-lang/rust/issues/102921).\n+\n+------------------------\n+\n+Enable generation of NOP sleds for XRay function tracing instrumentation.\n+For more information on XRay,\n+read [LLVM documentation](https://llvm.org/docs/XRay.html),\n+and/or the [XRay whitepaper](http://research.google.com/pubs/pub45287.html).\n+\n+Set the `-Z instrument-xray` compiler flag in order to enable XRay instrumentation.\n+\n+  - `-Z instrument-xray` \u2013 use the default settings\n+  - `-Z instrument-xray=skip-exit` \u2013 configure a custom setting\n+  - `-Z instrument-xray=ignore-loops,instruction-threshold=300` \u2013\n+    multiple settings separated by commas\n+\n+Supported options:\n+\n+  - `always` \u2013 force instrumentation of all functions\n+  - `never` \u2013 do no instrument any functions\n+  - `ignore-loops` \u2013 ignore presence of loops,\n+    instrument functions based only on instruction count\n+  - `instruction-threshold=10` \u2013 set a different instruction threshold for instrumentation\n+  - `skip-entry` \u2013 do no instrument function entry\n+  - `skip-exit` \u2013 do no instrument function exit\n+\n+The default settings are:\n+\n+  - instrument both entry & exit from functions\n+  - instrument functions with at least 200 instructions,\n+    or containing a non-trivial loop\n+\n+Note that `-Z instrument-xray` only enables generation of NOP sleds\n+which on their own don't do anything useful.\n+In order to actually trace the functions,\n+you will need to link a separate runtime library of your choice,\n+such as Clang's [XRay Runtime Library](https://www.llvm.org/docs/XRay.html#xray-runtime-library)."}, {"sha": "e11ebca6ea9af9bd116680857546d395b6b36bed", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -941,6 +941,7 @@ pub fn make_test_description<R: Read>(\n     let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_memtag = util::MEMTAG_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_shadow_call_stack = util::SHADOWCALLSTACK_SUPPORTED_TARGETS.contains(&&*config.target);\n+    let has_xray = util::XRAY_SUPPORTED_TARGETS.contains(&&*config.target);\n \n     // For tests using the `needs-rust-lld` directive (e.g. for `-Zgcc-ld=lld`), we need to find\n     // whether `rust-lld` is present in the compiler under test.\n@@ -1019,6 +1020,7 @@ pub fn make_test_description<R: Read>(\n                 && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\")\n         );\n         reason!(!config.can_unwind() && config.parse_name_directive(ln, \"needs-unwind\"));\n+        reason!(!has_xray && config.parse_name_directive(ln, \"needs-xray\"));\n         reason!(\n             config.target == \"wasm32-unknown-unknown\"\n                 && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS)"}, {"sha": "67f49bb6397c2f21779177f54dfd81fd47658b8e", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -78,6 +78,19 @@ pub const MEMTAG_SUPPORTED_TARGETS: &[&str] =\n \n pub const SHADOWCALLSTACK_SUPPORTED_TARGETS: &[&str] = &[\"aarch64-linux-android\"];\n \n+pub const XRAY_SUPPORTED_TARGETS: &[&str] = &[\n+    \"aarch64-linux-android\",\n+    \"aarch64-unknown-linux-gnu\",\n+    \"aarch64-unknown-linux-musl\",\n+    \"x86_64-linux-android\",\n+    \"x86_64-unknown-freebsd\",\n+    \"x86_64-unknown-linux-gnu\",\n+    \"x86_64-unknown-linux-musl\",\n+    \"x86_64-unknown-netbsd\",\n+    \"x86_64-unknown-none-linuxkernel\",\n+    \"x86_64-unknown-openbsd\",\n+];\n+\n pub fn make_new_path(path: &str) -> String {\n     assert!(cfg!(windows));\n     // Windows just uses PATH as the library search path, so we have to"}, {"sha": "ef3abb9514f24748b8b2af5fceec1de351a6c009", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -9,7 +9,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 939;\n+const ROOT_ENTRY_LIMIT: usize = 940;\n const ISSUES_ENTRY_LIMIT: usize = 2001;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}, {"sha": "d3e49d53174428dad08d97fec891080c3ae409c7", "filename": "tests/codegen/instrument-xray/basic.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fcodegen%2Finstrument-xray%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fcodegen%2Finstrument-xray%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Finstrument-xray%2Fbasic.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,9 @@\n+// Checks that `-Z instrument-xray` produces expected instrumentation.\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray=always\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: attributes #{{.*}} \"function-instrument\"=\"xray-always\"\n+pub fn function() {}"}, {"sha": "f7e500b65f62d9e7ffefc4825570f0df3617a7be", "filename": "tests/codegen/instrument-xray/options-combine.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fcodegen%2Finstrument-xray%2Foptions-combine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fcodegen%2Finstrument-xray%2Foptions-combine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Finstrument-xray%2Foptions-combine.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,12 @@\n+// Checks that `-Z instrument-xray` options can be specified multiple times.\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray=skip-exit\n+// compile-flags: -Z instrument-xray=instruction-threshold=123\n+// compile-flags: -Z instrument-xray=instruction-threshold=456\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK:      attributes #{{.*}} \"xray-instruction-threshold\"=\"456\" \"xray-skip-exit\"\n+// CHECK-NOT:  attributes #{{.*}} \"xray-instruction-threshold\"=\"123\"\n+pub fn function() {}"}, {"sha": "00f81837902dd5d381bf94d82d9d784881a3e814", "filename": "tests/codegen/instrument-xray/options-override.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fcodegen%2Finstrument-xray%2Foptions-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fcodegen%2Finstrument-xray%2Foptions-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Finstrument-xray%2Foptions-override.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,11 @@\n+// Checks that the last `-Z instrument-xray` option wins.\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray=always\n+// compile-flags: -Z instrument-xray=never\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK:      attributes #{{.*}} \"function-instrument\"=\"xray-never\"\n+// CHECK-NOT:  attributes #{{.*}} \"function-instrument\"=\"xray-always\"\n+pub fn function() {}"}, {"sha": "6c1684201a202f48c4988329be4c806d5400a69e", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -70,6 +70,15 @@\n         `=except-unused-functions`\n         `=off` (default)\n     -Z                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -Z                         instrument-xray=val -- insert function instrument code for XRay-based tracing (default: no)\n+         Optional extra settings:\n+         `=always`\n+         `=never`\n+         `=ignore-loops`\n+         `=instruction-threshold=N`\n+         `=skip-entry`\n+         `=skip-exit`\n+         Multiple options can be combined with commas.\n     -Z                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n     -Z                             layout-seed=val -- seed layout randomization\n     -Z                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)"}, {"sha": "4dd43439eb7c2db6ee0b2a34930a5c826a0a0ce1", "filename": "tests/ui/instrument-xray/flags-always-never-1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-always-never-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-always-never-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-always-never-1.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,7 @@\n+// Checks that `-Z instrument-xray` does not allow `always` and `never` simultaneously.\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray=always,never\n+// error-pattern: incorrect value `always,never` for unstable option `instrument-xray`\n+\n+fn main() {}"}, {"sha": "e211c6f602546cee8d1ca8785b76dc2e540b8e84", "filename": "tests/ui/instrument-xray/flags-always-never-1.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-always-never-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-always-never-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-always-never-1.stderr?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,2 @@\n+error: incorrect value `always,never` for unstable option `instrument-xray` - either a boolean (`yes`, `no`, `on`, `off`, etc), or a comma separated list of settings: `always` or `never` (mutually exclusive), `ignore-loops`, `instruction-threshold=N`, `skip-entry`, `skip-exit` was expected\n+"}, {"sha": "7310aa0a0d288a987f83dc3acc51058a88163eb4", "filename": "tests/ui/instrument-xray/flags-always-never-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-always-never-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-always-never-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-always-never-2.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,9 @@\n+// Checks that `-Z instrument-xray` allows `always` and `never` sequentially.\n+// (The last specified setting wins, like `-Z instrument-xray=no` as well.)\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray=always\n+// compile-flags: -Z instrument-xray=never\n+// check-pass\n+\n+fn main() {}"}, {"sha": "b97f0dd8a072ca9dd50d0723e5658bd0a5468aac", "filename": "tests/ui/instrument-xray/flags-basic.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-basic.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,9 @@\n+// Verifies basic `-Z instrument-xray` flags.\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray\n+// compile-flags: -Z instrument-xray=skip-exit\n+// compile-flags: -Z instrument-xray=ignore-loops,instruction-threshold=300\n+// check-pass\n+\n+fn main() {}"}, {"sha": "407f3e2aa5da8f45916a05d2362ea9b11d8c331c", "filename": "tests/ui/instrument-xray/flags-dupe-always.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-dupe-always.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,7 @@\n+// Checks that `-Z instrument-xray` does not allow duplicates.\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray=always,always\n+// error-pattern: incorrect value `always,always` for unstable option `instrument-xray`\n+\n+fn main() {}"}, {"sha": "d1ac113fa43846ffb27e8a44db6b4ffe133bc10d", "filename": "tests/ui/instrument-xray/flags-dupe-always.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-always.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-always.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-dupe-always.stderr?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,2 @@\n+error: incorrect value `always,always` for unstable option `instrument-xray` - either a boolean (`yes`, `no`, `on`, `off`, etc), or a comma separated list of settings: `always` or `never` (mutually exclusive), `ignore-loops`, `instruction-threshold=N`, `skip-entry`, `skip-exit` was expected\n+"}, {"sha": "75b210a6547ec3d23c18ac3d18c47b606b01428b", "filename": "tests/ui/instrument-xray/flags-dupe-ignore-loops.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-ignore-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-ignore-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-dupe-ignore-loops.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,7 @@\n+// Checks that `-Z instrument-xray` does not allow duplicates.\n+//\n+// needs-xray\n+// compile-flags: -Z instrument-xray=ignore-loops,ignore-loops\n+// error-pattern: incorrect value `ignore-loops,ignore-loops` for unstable option `instrument-xray`\n+\n+fn main() {}"}, {"sha": "52f6b33075bc12131bf9395886ab49d3126e6751", "filename": "tests/ui/instrument-xray/flags-dupe-ignore-loops.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-ignore-loops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Fflags-dupe-ignore-loops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Fflags-dupe-ignore-loops.stderr?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,2 @@\n+error: incorrect value `ignore-loops,ignore-loops` for unstable option `instrument-xray` - either a boolean (`yes`, `no`, `on`, `off`, etc), or a comma separated list of settings: `always` or `never` (mutually exclusive), `ignore-loops`, `instruction-threshold=N`, `skip-entry`, `skip-exit` was expected\n+"}, {"sha": "e6bdd23e8fc3a1315755725498e05daeac77e19a", "filename": "tests/ui/instrument-xray/target-not-supported.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Ftarget-not-supported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Ftarget-not-supported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Ftarget-not-supported.rs?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,9 @@\n+// Verifies that `-Z instrument-xray` cannot be used with unsupported targets,\n+//\n+// needs-llvm-components: x86\n+// compile-flags: -Z instrument-xray --target x86_64-apple-darwin\n+// error-pattern: error: XRay instrumentation is not supported for this target\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "6e3b0c8a380b8e0e1d4db3e407104d99c03d6913", "filename": "tests/ui/instrument-xray/target-not-supported.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Ftarget-not-supported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a12d31d5a681d70f277b4fbf6cafe22bae876ea7/tests%2Fui%2Finstrument-xray%2Ftarget-not-supported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finstrument-xray%2Ftarget-not-supported.stderr?ref=a12d31d5a681d70f277b4fbf6cafe22bae876ea7", "patch": "@@ -0,0 +1,4 @@\n+error: XRay instrumentation is not supported for this target\n+\n+error: aborting due to previous error\n+"}]}