{"sha": "4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "node_id": "C_kwDOAAsO6NoAKDRiZjliOWIwMDMxZjY0NzU1YmZhMTAyYTNjZjkzNjNhYWRlYTk4YzU", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-10-24T15:36:32Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-10-24T15:42:31Z"}, "message": "refactor: remove repetitive string interpolation and doc changes", "tree": {"sha": "4b08b208aaff132e5a20a10a6c2d920b3c17ef34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b08b208aaff132e5a20a10a6c2d920b3c17ef34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "html_url": "https://github.com/rust-lang/rust/commit/4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4bdb8e516e9f927f37a324185905fb9be387f57", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bdb8e516e9f927f37a324185905fb9be387f57", "html_url": "https://github.com/rust-lang/rust/commit/c4bdb8e516e9f927f37a324185905fb9be387f57"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "ad88a04ce87b49ada356eea7cd25b705f705517f", "filename": "crates/ide-assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "patch": "@@ -161,27 +161,21 @@ fn generate_enum_projection_method(\n \n             let field_type_syntax = field_type.syntax();\n \n-            let method = if ctx.config.assist_emit_must_use\n-            {\n-                format!(\n-                    \"    #[must_use]\n-    {vis}fn {fn_name}({self_param}) -> {return_prefix}{field_type_syntax}{return_suffix} {{\n-        if let Self::{variant_name}{pattern_suffix} = self {{\n-            {happy_case}({bound_name})\n-        }} else {{\n-            {sad_case}\n-        }}\n-    }}\")\n+            let must_use = if ctx.config.assist_emit_must_use {\n+                \"#[must_use]\\n\"\n             } else {\n-                format!(\n-                    \"    {vis}fn {fn_name}({self_param}) -> {return_prefix}{field_type_syntax}{return_suffix} {{\n+                \"\"\n+            };\n+\n+            let method = format!(\n+                \"    {must_use}{vis}fn {fn_name}({self_param}) -> {return_prefix}{field_type_syntax}{return_suffix} {{\n         if let Self::{variant_name}{pattern_suffix} = self {{\n             {happy_case}({bound_name})\n         }} else {{\n             {sad_case}\n         }}\n-    }}\")\n-            };\n+    }}\"\n+            );\n \n             add_method_to_adt(builder, &parent_enum, impl_def, &method);\n         },"}, {"sha": "9bd0e22d8fc4f8efd67aa5e3ae7a4a03197a068c", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "patch": "@@ -56,7 +56,7 @@ mod patch_old_style;\n // parsing the old name.\n config_data! {\n     struct ConfigData {\n-        /// Whether to insert must_use derive macro while generating `as_` methods\n+        /// Whether to insert #[must_use] when generating `as_` methods\n         /// for enum variants.\n         assist_emitMustUse: bool               = \"false\",\n         /// Placeholder expression to use for missing expressions in assists."}, {"sha": "152b7c5d815be2f1740012e83c529815f699cfc5", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "patch": "@@ -1,7 +1,7 @@\n [[rust-analyzer.assist.emitMustUse]]rust-analyzer.assist.emitMustUse (default: `false`)::\n +\n --\n-Whether to insert must_use derive macro while generating `as_` methods\n+Whether to insert #[must_use] when generating `as_` methods\n for enum variants.\n --\n [[rust-analyzer.assist.expressionFillDefault]]rust-analyzer.assist.expressionFillDefault (default: `\"todo\"`)::"}, {"sha": "a25e4313844f37737dd8eed307b1865af9bdb697", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/4bf9b9b0031f64755bfa102a3cf9363aadea98c5/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=4bf9b9b0031f64755bfa102a3cf9363aadea98c5", "patch": "@@ -398,7 +398,7 @@\n                 },\n                 \"$generated-start\": {},\n                 \"rust-analyzer.assist.emitMustUse\": {\n-                    \"markdownDescription\": \"Whether to insert must_use derive macro while generating `as_` methods\\nfor enum variants.\",\n+                    \"markdownDescription\": \"Whether to insert #[must_use] when generating `as_` methods\\nfor enum variants.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },"}]}