{"sha": "66cf8ea1afb099c4a18bf9a1526f499aeb4479b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Y2Y4ZWExYWZiMDk5YzRhMThiZjlhMTUyNmY0OTlhZWI0NDc5YjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-09-08T16:27:06Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-09-14T11:56:33Z"}, "message": "Replace cnum_map with tcx.stable_crate_id_to_crate_num() in OnDiskCache.", "tree": {"sha": "f4b4fdb620d4e7a7b6bb68c57b77606a622e9e84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4b4fdb620d4e7a7b6bb68c57b77606a622e9e84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66cf8ea1afb099c4a18bf9a1526f499aeb4479b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66cf8ea1afb099c4a18bf9a1526f499aeb4479b6", "html_url": "https://github.com/rust-lang/rust/commit/66cf8ea1afb099c4a18bf9a1526f499aeb4479b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66cf8ea1afb099c4a18bf9a1526f499aeb4479b6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "919497cc30c076560830a391b558899f3c3e67f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/919497cc30c076560830a391b558899f3c3e67f3", "html_url": "https://github.com/rust-lang/rust/commit/919497cc30c076560830a391b558899f3c3e67f3"}], "stats": {"total": 39, "additions": 7, "deletions": 32}, "files": [{"sha": "d8cff0bd1880f898cd0d25da893d5b475c5bcd5c", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/66cf8ea1afb099c4a18bf9a1526f499aeb4479b6/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cf8ea1afb099c4a18bf9a1526f499aeb4479b6/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=66cf8ea1afb099c4a18bf9a1526f499aeb4479b6", "patch": "@@ -1,7 +1,7 @@\n use crate::QueryCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, OnceCell, RwLock};\n+use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, RwLock};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathHash;\n@@ -50,8 +50,6 @@ pub struct OnDiskCache<'sess> {\n     // session.\n     current_side_effects: Lock<FxHashMap<DepNodeIndex, QuerySideEffects>>,\n \n-    cnum_map: OnceCell<UnhashMap<StableCrateId, CrateNum>>,\n-\n     source_map: &'sess SourceMap,\n     file_index_to_stable_id: FxHashMap<SourceFileIndex, EncodedSourceFileId>,\n \n@@ -139,8 +137,8 @@ struct EncodedSourceFileId {\n }\n \n impl EncodedSourceFileId {\n-    fn translate(&self, cnum_map: &UnhashMap<StableCrateId, CrateNum>) -> StableSourceFileId {\n-        let cnum = cnum_map[&self.stable_crate_id];\n+    fn translate(&self, tcx: TyCtxt<'_>) -> StableSourceFileId {\n+        let cnum = tcx.stable_crate_id_to_crate_num(self.stable_crate_id);\n         StableSourceFileId { file_name_hash: self.file_name_hash, cnum }\n     }\n \n@@ -180,7 +178,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n             serialized_data: RwLock::new(Some(data)),\n             file_index_to_stable_id: footer.file_index_to_stable_id,\n             file_index_to_file: Default::default(),\n-            cnum_map: OnceCell::new(),\n             source_map: sess.source_map(),\n             current_side_effects: Default::default(),\n             query_result_index: footer.query_result_index.into_iter().collect(),\n@@ -198,7 +195,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n             serialized_data: RwLock::new(None),\n             file_index_to_stable_id: Default::default(),\n             file_index_to_file: Default::default(),\n-            cnum_map: OnceCell::new(),\n             source_map,\n             current_side_effects: Default::default(),\n             query_result_index: Default::default(),\n@@ -466,14 +462,11 @@ impl<'sess> OnDiskCache<'sess> {\n     where\n         T: Decodable<CacheDecoder<'a, 'tcx>>,\n     {\n-        let cnum_map = self.cnum_map.get_or_init(|| Self::compute_cnum_map(tcx));\n-\n         let serialized_data = self.serialized_data.read();\n         let mut decoder = CacheDecoder {\n             tcx,\n             opaque: opaque::Decoder::new(serialized_data.as_deref().unwrap_or(&[]), pos.to_usize()),\n             source_map: self.source_map,\n-            cnum_map,\n             file_index_to_file: &self.file_index_to_file,\n             file_index_to_stable_id: &self.file_index_to_stable_id,\n             alloc_decoding_session: self.alloc_decoding_state.new_decoding_session(),\n@@ -484,23 +477,6 @@ impl<'sess> OnDiskCache<'sess> {\n         };\n         f(&mut decoder)\n     }\n-\n-    // This function builds mapping from previous-session-`CrateNum` to\n-    // current-session-`CrateNum`. There might be `CrateNum`s from the previous\n-    // `Session` that don't occur in the current one. For these, the mapping\n-    // maps to None.\n-    fn compute_cnum_map(tcx: TyCtxt<'_>) -> UnhashMap<StableCrateId, CrateNum> {\n-        tcx.dep_graph.with_ignore(|| {\n-            tcx.crates(())\n-                .iter()\n-                .chain(std::iter::once(&LOCAL_CRATE))\n-                .map(|&cnum| {\n-                    let hash = tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n-                    (hash, cnum)\n-                })\n-                .collect()\n-        })\n-    }\n }\n \n //- DECODING -------------------------------------------------------------------\n@@ -512,7 +488,6 @@ pub struct CacheDecoder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     opaque: opaque::Decoder<'a>,\n     source_map: &'a SourceMap,\n-    cnum_map: &'a UnhashMap<StableCrateId, CrateNum>,\n     file_index_to_file: &'a Lock<FxHashMap<SourceFileIndex, Lrc<SourceFile>>>,\n     file_index_to_stable_id: &'a FxHashMap<SourceFileIndex, EncodedSourceFileId>,\n     alloc_decoding_session: AllocDecodingSession<'a>,\n@@ -525,18 +500,18 @@ pub struct CacheDecoder<'a, 'tcx> {\n impl<'a, 'tcx> CacheDecoder<'a, 'tcx> {\n     fn file_index_to_file(&self, index: SourceFileIndex) -> Lrc<SourceFile> {\n         let CacheDecoder {\n+            tcx,\n             ref file_index_to_file,\n             ref file_index_to_stable_id,\n             ref source_map,\n-            ref cnum_map,\n             ..\n         } = *self;\n \n         file_index_to_file\n             .borrow_mut()\n             .entry(index)\n             .or_insert_with(|| {\n-                let stable_id = file_index_to_stable_id[&index].translate(cnum_map);\n+                let stable_id = file_index_to_stable_id[&index].translate(tcx);\n                 source_map\n                     .source_file_by_stable_id(stable_id)\n                     .expect(\"failed to lookup `SourceFile` in new context\")\n@@ -678,7 +653,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for ExpnId {\n             return Ok(expn_id);\n         }\n \n-        let krate = decoder.cnum_map[&hash.stable_crate_id()];\n+        let krate = decoder.tcx.stable_crate_id_to_crate_num(hash.stable_crate_id());\n \n         let expn_id = if krate == LOCAL_CRATE {\n             // We look up the position of the associated `ExpnData` and decode it.\n@@ -751,7 +726,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for CrateNum {\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n         let stable_id = StableCrateId::decode(d)?;\n-        let cnum = d.cnum_map[&stable_id];\n+        let cnum = d.tcx.stable_crate_id_to_crate_num(stable_id);\n         Ok(cnum)\n     }\n }"}]}