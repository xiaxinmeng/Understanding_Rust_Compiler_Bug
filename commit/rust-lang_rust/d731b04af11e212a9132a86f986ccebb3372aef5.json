{"sha": "d731b04af11e212a9132a86f986ccebb3372aef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzFiMDRhZjExZTIxMmE5MTMyYTg2Zjk4NmNjZWJiMzM3MmFlZjU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-16T13:03:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-16T13:03:20Z"}, "message": "Don't use queries::try_get() in assoc_ty projection", "tree": {"sha": "8bab4fd0d173d80a91c2fbf5ecb31b68be649cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bab4fd0d173d80a91c2fbf5ecb31b68be649cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d731b04af11e212a9132a86f986ccebb3372aef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d731b04af11e212a9132a86f986ccebb3372aef5", "html_url": "https://github.com/rust-lang/rust/commit/d731b04af11e212a9132a86f986ccebb3372aef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d731b04af11e212a9132a86f986ccebb3372aef5/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742ebc17ff4d033f6b5c6348ddb1c94d730c56b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/742ebc17ff4d033f6b5c6348ddb1c94d730c56b8", "html_url": "https://github.com/rust-lang/rust/commit/742ebc17ff4d033f6b5c6348ddb1c94d730c56b8"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "0b12531f60abf70dd367aebbd5435cd5953b37ab", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d731b04af11e212a9132a86f986ccebb3372aef5/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d731b04af11e212a9132a86f986ccebb3372aef5/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=d731b04af11e212a9132a86f986ccebb3372aef5", "patch": "@@ -29,7 +29,6 @@ use infer::type_variable::TypeVariableOrigin;\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::DUMMY_SP;\n use ty::subst::Subst;\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n@@ -1324,32 +1323,24 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n \n     // This function may be called while we are still building the\n     // specialization graph that is queried below (via TraidDef::ancestors()),\n-    // so, in order to avoid infinite recursion, we detect this case by\n-    // seeing if a query of the specialization graph fails with a cycle error.\n-    // If we are in cycle, and thus still building the graph, we perform a\n-    // reduced version of the associated item lookup that does not need the\n-    // specialization graph.\n-    let specialization_graph_complete =\n-        ty::queries::specialization_graph_of::try_get(tcx,\n-                                                      DUMMY_SP,\n-                                                      trait_def_id).is_ok();\n-    if !specialization_graph_complete {\n-        let impl_node = specialization_graph::Node::Impl(impl_def_id);\n-        for item in impl_node.items(tcx) {\n-            if item.kind == ty::AssociatedKind::Type && item.name == assoc_ty_name {\n-                return Some(specialization_graph::NodeItem {\n-                    node: specialization_graph::Node::Impl(impl_def_id),\n-                    item: item,\n-                });\n-            }\n+    // so, in order to avoid unnecessary infinite recursion, we manually look\n+    // for the associated item at the given impl.\n+    // If there is no such item in that impl, this function will fail with a\n+    // cycle error if the specialization graph is currently being built.\n+    let impl_node = specialization_graph::Node::Impl(impl_def_id);\n+    for item in impl_node.items(tcx) {\n+        if item.kind == ty::AssociatedKind::Type && item.name == assoc_ty_name {\n+            return Some(specialization_graph::NodeItem {\n+                node: specialization_graph::Node::Impl(impl_def_id),\n+                item: item,\n+            });\n         }\n-        None\n-    } else {\n-        trait_def\n-            .ancestors(tcx, impl_def_id)\n-            .defs(tcx, assoc_ty_name, ty::AssociatedKind::Type)\n-            .next()\n     }\n+\n+    trait_def\n+        .ancestors(tcx, impl_def_id)\n+        .defs(tcx, assoc_ty_name, ty::AssociatedKind::Type)\n+        .next()\n }\n \n // # Cache"}]}