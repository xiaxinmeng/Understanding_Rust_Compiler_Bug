{"sha": "ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlODIzYWEyM2YxYzRmYTU1ZTcxZGQ5NzJkMGIxMGM2OTE0OGIwYjQ=", "commit": {"author": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@outlook.com", "date": "2021-05-31T19:45:01Z"}, "committer": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@outlook.com", "date": "2021-06-21T16:54:05Z"}, "message": "Move features into potential_cfg_options", "tree": {"sha": "9c39a29bdee4f45dcbd497c25350cbfbb0c5e9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c39a29bdee4f45dcbd497c25350cbfbb0c5e9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "html_url": "https://github.com/rust-lang/rust/commit/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/comments", "author": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284483b347d15bee3a7bf293d33e5f19a9740102", "url": "https://api.github.com/repos/rust-lang/rust/commits/284483b347d15bee3a7bf293d33e5f19a9740102", "html_url": "https://github.com/rust-lang/rust/commit/284483b347d15bee3a7bf293d33e5f19a9740102"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "7d5d12e630025d0b1f3956e8015d48313eafd823", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "patch": "@@ -128,10 +128,10 @@ impl ChangeFixture {\n                     file_id,\n                     meta.edition,\n                     Some(crate_name.clone().into()),\n+                    meta.cfg.clone(),\n                     meta.cfg,\n                     meta.env,\n                     Default::default(),\n-                    Default::default(),\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -158,10 +158,10 @@ impl ChangeFixture {\n                 crate_root,\n                 Edition::Edition2018,\n                 Some(CrateName::new(\"test\").unwrap().into()),\n+                default_cfg.clone(),\n                 default_cfg,\n                 Env::default(),\n                 Default::default(),\n-                Default::default(),\n             );\n         } else {\n             for (from, to) in crate_deps {\n@@ -188,6 +188,7 @@ impl ChangeFixture {\n                 Edition::Edition2021,\n                 Some(CrateDisplayName::from_canonical_name(\"core\".to_string())),\n                 CfgOptions::default(),\n+                CfgOptions::default(),\n                 Env::default(),\n                 Vec::new(),\n             );"}, {"sha": "0c51a59a0f065c068274fb2b4a6be3efe6fbd8ee", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "patch": "@@ -189,10 +189,10 @@ pub struct CrateData {\n     /// `Dependency` matters), this name should only be used for UI.\n     pub display_name: Option<CrateDisplayName>,\n     pub cfg_options: CfgOptions,\n+    pub potential_cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub proc_macro: Vec<ProcMacro>,\n-    pub features: FxHashMap<String, Vec<String>>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -220,19 +220,19 @@ impl CrateGraph {\n         edition: Edition,\n         display_name: Option<CrateDisplayName>,\n         cfg_options: CfgOptions,\n+        potential_cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<ProcMacro>,\n-        features: FxHashMap<String, Vec<String>>,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n             display_name,\n             cfg_options,\n+            potential_cfg_options,\n             env,\n             proc_macro,\n             dependencies: Vec::new(),\n-            features,\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n@@ -507,27 +507,27 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -542,18 +542,18 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate2\").unwrap(), crate2).is_err());\n@@ -567,27 +567,27 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -601,18 +601,18 @@ mod tests {\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n+            CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)"}, {"sha": "30cc34403c93279b2a08584d7fb30fa2de0f703b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "patch": "@@ -234,8 +234,8 @@ impl Crate {\n         db.crate_graph()[self.id].cfg_options.clone()\n     }\n \n-    pub fn features(&self, db: &dyn HirDatabase) -> Vec<String> {\n-        db.crate_graph()[self.id].features.iter().map(|(feat, _)| feat.clone()).collect()\n+    pub fn potential_cfg(&self, db: &dyn HirDatabase) -> CfgOptions {\n+        db.crate_graph()[self.id].potential_cfg_options.clone()\n     }\n }\n "}, {"sha": "aac084012869ad66775120db637fe3b7c7c9dbbf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "patch": "@@ -217,10 +217,10 @@ impl Analysis {\n             file_id,\n             Edition::Edition2018,\n             None,\n+            cfg_options.clone(),\n             cfg_options,\n             Env::default(),\n             Default::default(),\n-            Default::default(),\n         );\n         change.change_file(file_id, Some(Arc::new(text)));\n         change.set_crate_graph(crate_graph);"}, {"sha": "847e6529a1bf272fcd386c10a6914aada06d8535", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "patch": "@@ -26,28 +26,14 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n     .find(|t| matches!(t.kind(), SyntaxKind::IDENT));\n \n     match previous.as_ref().map(|p| p.text()) {\n-        Some(\"feature\") => {\n-            ctx.krate.map(|krate| {\n-                krate.features(ctx.db).iter().for_each(|f| {\n-                    let mut item = CompletionItem::new(\n-                        CompletionKind::Attribute,\n-                        ctx.source_range(),\n-                        f.clone(),\n-                    );\n-                    item.insert_text(format!(r#\"\"{}\"\"#, f));\n-\n-                    acc.add(item.build())\n-                })\n-            });\n-        }\n         Some(\"target_arch\") => KNOWN_ARCH.iter().for_each(add_completion),\n         Some(\"target_env\") => KNOWN_ENV.iter().for_each(add_completion),\n         Some(\"target_os\") => KNOWN_OS.iter().for_each(add_completion),\n         Some(\"target_vendor\") => KNOWN_VENDOR.iter().for_each(add_completion),\n         Some(\"target_endian\") => [\"little\", \"big\"].iter().for_each(add_completion),\n         Some(name) => {\n             ctx.krate.map(|krate| {\n-                krate.cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {\n+                krate.potential_cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {\n                     let mut item = CompletionItem::new(\n                         CompletionKind::Attribute,\n                         ctx.source_range(),\n@@ -61,7 +47,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n         }\n         None => {\n             ctx.krate.map(|krate| {\n-                krate.cfg(ctx.db).get_cfg_keys().iter().for_each(|s| {\n+                krate.potential_cfg(ctx.db).get_cfg_keys().iter().for_each(|s| {\n                     let item = CompletionItem::new(\n                         CompletionKind::Attribute,\n                         ctx.source_range(),"}, {"sha": "e67ba2bd92849e40ae290f90062b45368c2bb637", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae823aa23f1c4fa55e71dd972d0b10c69148b0b4/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=ae823aa23f1c4fa55e71dd972d0b10c69148b0b4", "patch": "@@ -384,10 +384,10 @@ fn project_json_to_crate_graph(\n                     file_id,\n                     krate.edition,\n                     krate.display_name.clone(),\n+                    cfg_options.clone(),\n                     cfg_options,\n                     env,\n                     proc_macro.unwrap_or_default(),\n-                    Default::default(),\n                 ),\n             )\n         })\n@@ -581,9 +581,9 @@ fn detached_files_to_crate_graph(\n             Edition::Edition2018,\n             display_name,\n             cfg_options.clone(),\n+            cfg_options.clone(),\n             Env::default(),\n             Vec::new(),\n-            Default::default(),\n         );\n \n         for (name, krate) in public_deps.iter() {\n@@ -721,14 +721,21 @@ fn add_target_crate_root(\n         .unwrap_or_default();\n \n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());\n+    let mut potential_cfg_options = cfg_options.clone();\n+    potential_cfg_options.extend(\n+        pkg.features\n+            .iter()\n+            .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n+    );\n+\n     let crate_id = crate_graph.add_crate_root(\n         file_id,\n         edition,\n         Some(display_name),\n         cfg_options,\n+        potential_cfg_options,\n         env,\n         proc_macro,\n-        pkg.features.clone(),\n     );\n \n     crate_id\n@@ -756,9 +763,9 @@ fn sysroot_to_crate_graph(\n                 Edition::Edition2018,\n                 Some(display_name),\n                 cfg_options.clone(),\n+                cfg_options.clone(),\n                 env,\n                 proc_macro,\n-                Default::default(),\n             );\n             Some((krate, crate_id))\n         })"}]}