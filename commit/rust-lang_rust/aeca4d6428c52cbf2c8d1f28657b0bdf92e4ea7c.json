{"sha": "aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlY2E0ZDY0MjhjNTJjYmYyYzhkMWYyODY1N2IwYmRmOTJlNGVhN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T10:42:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T10:42:41Z"}, "message": "Auto merge of #71900 - GuillaumeGomez:clean-up-rustdoc, r=ollie27,kinnison\n\nClean up rustdoc source code\n\nFixes #70498.\n\nr? @kinnison\n\ncc @rust-lang/rustdoc", "tree": {"sha": "6b1d7c34dfcacaf6702bd8d043c566f0f536c065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1d7c34dfcacaf6702bd8d043c566f0f536c065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "html_url": "https://github.com/rust-lang/rust/commit/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb272d5d21c94f9a460d68d76817227a5913fbf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb272d5d21c94f9a460d68d76817227a5913fbf7", "html_url": "https://github.com/rust-lang/rust/commit/cb272d5d21c94f9a460d68d76817227a5913fbf7"}, {"sha": "c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28", "html_url": "https://github.com/rust-lang/rust/commit/c8fb0d7ef38957cd2b8f6e5b9b7ea47eaa6cca28"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "9a11e8fce28b7c5004eff2a5caf9c642eb491c20", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "patch": "@@ -12,6 +12,7 @@\n use std::fs;\n use std::io;\n use std::path::Path;\n+use std::string::ToString;\n use std::sync::mpsc::{channel, Receiver, Sender};\n use std::sync::Arc;\n \n@@ -25,7 +26,9 @@ macro_rules! try_err {\n }\n \n pub trait PathError {\n-    fn new<P: AsRef<Path>>(e: io::Error, path: P) -> Self;\n+    fn new<S, P: AsRef<Path>>(e: S, path: P) -> Self\n+    where\n+        S: ToString + Sized;\n }\n \n pub struct ErrorStorage {"}, {"sha": "cd49da88d965241ea38f392245586c25c7feb66e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "patch": "@@ -31,7 +31,6 @@ use std::cmp::Ordering;\n use std::collections::{BTreeMap, VecDeque};\n use std::default::Default;\n use std::error;\n-\n use std::ffi::OsStr;\n use std::fmt::{self, Formatter, Write};\n use std::fs::{self, File};\n@@ -40,6 +39,7 @@ use std::io::{self, BufReader};\n use std::path::{Component, Path, PathBuf};\n use std::rc::Rc;\n use std::str;\n+use std::string::ToString;\n use std::sync::Arc;\n \n use rustc_ast_pretty::pprust;\n@@ -92,7 +92,7 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n #[derive(Debug)]\n pub struct Error {\n     pub file: PathBuf,\n-    pub error: io::Error,\n+    pub error: String,\n }\n \n impl error::Error for Error {}\n@@ -109,8 +109,11 @@ impl std::fmt::Display for Error {\n }\n \n impl PathError for Error {\n-    fn new<P: AsRef<Path>>(e: io::Error, path: P) -> Error {\n-        Error { file: path.as_ref().to_path_buf(), error: e }\n+    fn new<S, P: AsRef<Path>>(e: S, path: P) -> Error\n+    where\n+        S: ToString + Sized,\n+    {\n+        Error { file: path.as_ref().to_path_buf(), error: e.to_string() }\n     }\n }\n \n@@ -562,7 +565,7 @@ pub fn run(\n \n     // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n     Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n-    write_shared(&cx, &krate, index, &md_opts, diag)?;\n+    write_shared(&cx, &krate, index, &md_opts)?;\n     Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n \n     // And finally render the whole crate's documentation\n@@ -582,7 +585,6 @@ fn write_shared(\n     krate: &clean::Crate,\n     search_index: String,\n     options: &RenderOptions,\n-    diag: &rustc_errors::Handler,\n ) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized\n@@ -928,7 +930,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n             md_opts.output = cx.dst.clone();\n             md_opts.external_html = (*cx.shared).layout.external_html.clone();\n \n-            crate::markdown::render(index_page, md_opts, diag, cx.shared.edition);\n+            crate::markdown::render(&index_page, md_opts, cx.shared.edition)\n+                .map_err(|e| Error::new(e, &index_page))?;\n         } else {\n             let dst = cx.dst.join(\"index.html\");\n             let page = layout::Page {"}, {"sha": "82d6cda986a9ace3c7a9f6f3a5a8c42b46985656", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "patch": "@@ -450,14 +450,29 @@ fn main_args(args: &[String]) -> i32 {\n     rustc_interface::interface::default_thread_pool(options.edition, move || main_options(options))\n }\n \n+fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> i32 {\n+    match res {\n+        Ok(()) => 0,\n+        Err(err) => {\n+            if !err.is_empty() {\n+                diag.struct_err(&err).emit();\n+            }\n+            1\n+        }\n+    }\n+}\n+\n fn main_options(options: config::Options) -> i32 {\n     let diag = core::new_handler(options.error_format, None, &options.debugging_options);\n \n     match (options.should_test, options.markdown_input()) {\n-        (true, true) => return markdown::test(options, &diag),\n-        (true, false) => return test::run(options),\n+        (true, true) => return wrap_return(&diag, markdown::test(options)),\n+        (true, false) => return wrap_return(&diag, test::run(options)),\n         (false, true) => {\n-            return markdown::render(options.input, options.render_options, &diag, options.edition);\n+            return wrap_return(\n+                &diag,\n+                markdown::render(&options.input, options.render_options, options.edition),\n+            );\n         }\n         (false, false) => {}\n     }"}, {"sha": "e0753bcd70f29365c064b5d4a3da68bb53b5d637", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "patch": "@@ -1,13 +1,12 @@\n-use std::fs::{create_dir_all, File};\n+use std::fs::{create_dir_all, read_to_string, File};\n use std::io::prelude::*;\n-use std::path::PathBuf;\n+use std::path::Path;\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n \n use crate::config::{Options, RenderOptions};\n-use crate::externalfiles::{load_string, LoadStringError};\n use crate::html::escape::Escape;\n use crate::html::markdown;\n use crate::html::markdown::{find_testable_code, ErrorCodes, IdMap, Markdown, MarkdownWithToc};\n@@ -34,17 +33,16 @@ fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n \n /// Render `input` (e.g., \"foo.md\") into an HTML file in `output`\n /// (e.g., output = \"bar\" => \"bar/foo.html\").\n-pub fn render(\n-    input: PathBuf,\n+pub fn render<P: AsRef<Path>>(\n+    input: P,\n     options: RenderOptions,\n-    diag: &rustc_errors::Handler,\n     edition: Edition,\n-) -> i32 {\n+) -> Result<(), String> {\n     if let Err(e) = create_dir_all(&options.output) {\n-        diag.struct_err(&format!(\"{}: {}\", options.output.display(), e)).emit();\n-        return 4;\n+        return Err(format!(\"{}: {}\", options.output.display(), e));\n     }\n \n+    let input = input.as_ref();\n     let mut output = options.output;\n     output.push(input.file_name().unwrap());\n     output.set_extension(\"html\");\n@@ -55,26 +53,15 @@ pub fn render(\n         css.push_str(&s)\n     }\n \n-    let input_str = match load_string(&input, diag) {\n-        Ok(s) => s,\n-        Err(LoadStringError::ReadFail) => return 1,\n-        Err(LoadStringError::BadUtf8) => return 2,\n-    };\n+    let input_str = read_to_string(input).map_err(|err| format!(\"{}: {}\", input.display(), err))?;\n     let playground_url = options.markdown_playground_url.or(options.playground_url);\n     let playground = playground_url.map(|url| markdown::Playground { crate_name: None, url });\n \n-    let mut out = match File::create(&output) {\n-        Err(e) => {\n-            diag.struct_err(&format!(\"{}: {}\", output.display(), e)).emit();\n-            return 4;\n-        }\n-        Ok(f) => f,\n-    };\n+    let mut out = File::create(&output).map_err(|e| format!(\"{}: {}\", output.display(), e))?;\n \n     let (metadata, text) = extract_leading_metadata(&input_str);\n     if metadata.is_empty() {\n-        diag.struct_err(\"invalid markdown file: no initial lines starting with `# ` or `%`\").emit();\n-        return 5;\n+        return Err(\"invalid markdown file: no initial lines starting with `# ` or `%`\".to_owned());\n     }\n     let title = metadata[0];\n \n@@ -122,22 +109,15 @@ pub fn render(\n     );\n \n     match err {\n-        Err(e) => {\n-            diag.struct_err(&format!(\"cannot write to `{}`: {}\", output.display(), e)).emit();\n-            6\n-        }\n-        Ok(_) => 0,\n+        Err(e) => Err(format!(\"cannot write to `{}`: {}\", output.display(), e)),\n+        Ok(_) => Ok(()),\n     }\n }\n \n /// Runs any tests/code examples in the markdown file `input`.\n-pub fn test(mut options: Options, diag: &rustc_errors::Handler) -> i32 {\n-    let input_str = match load_string(&options.input, diag) {\n-        Ok(s) => s,\n-        Err(LoadStringError::ReadFail) => return 1,\n-        Err(LoadStringError::BadUtf8) => return 2,\n-    };\n-\n+pub fn test(mut options: Options) -> Result<(), String> {\n+    let input_str = read_to_string(&options.input)\n+        .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     opts.display_warnings = options.display_warnings;\n@@ -161,5 +141,5 @@ pub fn test(mut options: Options, diag: &rustc_errors::Handler) -> i32 {\n         collector.tests,\n         Some(testing::Options::new().display_output(options.display_warnings)),\n     );\n-    0\n+    Ok(())\n }"}, {"sha": "284e6d421ee2f7723abb8fa7c8d24871b87d1e6a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "patch": "@@ -43,7 +43,7 @@ pub struct TestOptions {\n     pub attrs: Vec<String>,\n }\n \n-pub fn run(options: Options) -> i32 {\n+pub fn run(options: Options) -> Result<(), String> {\n     let input = config::Input::File(options.input.clone());\n \n     let invalid_codeblock_attribute_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTE.name;\n@@ -151,7 +151,7 @@ pub fn run(options: Options) -> i32 {\n     });\n     let tests = match tests {\n         Ok(tests) => tests,\n-        Err(ErrorReported) => return 1,\n+        Err(ErrorReported) => return Err(String::new()),\n     };\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n@@ -162,7 +162,7 @@ pub fn run(options: Options) -> i32 {\n         Some(testing::Options::new().display_output(display_warnings)),\n     );\n \n-    0\n+    Ok(())\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade."}]}