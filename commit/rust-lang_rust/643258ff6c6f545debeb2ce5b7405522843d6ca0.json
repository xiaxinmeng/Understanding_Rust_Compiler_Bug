{"sha": "643258ff6c6f545debeb2ce5b7405522843d6ca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MzI1OGZmNmM2ZjU0NWRlYmViMmNlNWI3NDA1NTIyODQzZDZjYTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-14T00:04:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-14T00:04:33Z"}, "message": "Tweak suggestion for `this` -> `self`", "tree": {"sha": "ad708d69d0951df2127631da1132df4742a3c215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad708d69d0951df2127631da1132df4742a3c215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643258ff6c6f545debeb2ce5b7405522843d6ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643258ff6c6f545debeb2ce5b7405522843d6ca0", "html_url": "https://github.com/rust-lang/rust/commit/643258ff6c6f545debeb2ce5b7405522843d6ca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643258ff6c6f545debeb2ce5b7405522843d6ca0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "html_url": "https://github.com/rust-lang/rust/commit/3df25ae186e89c885d9a71cd37fbd7a37e39fc85"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "ce154bb09f450821f715cf67c4cc90520926a4f1", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/643258ff6c6f545debeb2ce5b7405522843d6ca0/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643258ff6c6f545debeb2ce5b7405522843d6ca0/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=643258ff6c6f545debeb2ce5b7405522843d6ca0", "patch": "@@ -7,6 +7,7 @@ use crate::{PathResult, PathSource, Segment};\n \n use rustc_ast::ast::{self, Expr, ExprKind, Item, ItemKind, NodeId, Path, Ty, TyKind};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n+use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -175,15 +176,38 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         let mut err = self.r.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n         // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n-        if [\"this\", \"my\"].contains(&&*item_str.as_str())\n-            && self.self_value_is_available(path[0].ident.span, span)\n-        {\n+        if [\"this\", \"my\"].contains(&&*item_str.as_str()) && self.self_type_is_available(span) {\n             err.span_suggestion_short(\n                 span,\n                 \"you might have meant to use `self` here instead\",\n                 \"self\".to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n+            if !self.self_value_is_available(path[0].ident.span, span) {\n+                if let Some((FnKind::Fn(_, _, sig, ..), fn_span)) =\n+                    &self.diagnostic_metadata.current_function\n+                {\n+                    if let Some(param) = sig.decl.inputs.get(0) {\n+                        err.span_suggestion_verbose(\n+                            param.span.shrink_to_lo(),\n+                            \"you are also missing a `self` receiver argument\",\n+                            \"&self, \".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        err.span_suggestion_verbose(\n+                            self.r\n+                                .session\n+                                .source_map()\n+                                .span_through_char(*fn_span, '(')\n+                                .shrink_to_hi(),\n+                            \"you are also missing a `self` receiver argument\",\n+                            \"&self\".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n         }\n \n         // Emit special messages for unresolved `Self` and `self`."}, {"sha": "ee134835c37ed14eae101b077ee613c0dc68ee13", "filename": "src/test/ui/issues/issue-5099.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/643258ff6c6f545debeb2ce5b7405522843d6ca0/src%2Ftest%2Fui%2Fissues%2Fissue-5099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643258ff6c6f545debeb2ce5b7405522843d6ca0/src%2Ftest%2Fui%2Fissues%2Fissue-5099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5099.rs?ref=643258ff6c6f545debeb2ce5b7405522843d6ca0", "patch": "@@ -1,3 +1,10 @@\n-trait B < A > { fn a() -> A { this.a } } //~ ERROR cannot find value `this` in this scope\n+trait B <A> {\n+    fn a() -> A {\n+        this.a //~ ERROR cannot find value `this` in this scope\n+    }\n+    fn b(x: i32) {\n+        this.b(x); //~ ERROR cannot find value `this` in this scope\n+    }\n+}\n \n fn main() {}"}, {"sha": "56b02c45a08d7f690c341568f9915bc736b98253", "filename": "src/test/ui/issues/issue-5099.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/643258ff6c6f545debeb2ce5b7405522843d6ca0/src%2Ftest%2Fui%2Fissues%2Fissue-5099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643258ff6c6f545debeb2ce5b7405522843d6ca0/src%2Ftest%2Fui%2Fissues%2Fissue-5099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5099.stderr?ref=643258ff6c6f545debeb2ce5b7405522843d6ca0", "patch": "@@ -1,9 +1,33 @@\n error[E0425]: cannot find value `this` in this scope\n-  --> $DIR/issue-5099.rs:1:31\n+  --> $DIR/issue-5099.rs:3:9\n    |\n-LL | trait B < A > { fn a() -> A { this.a } }\n-   |                               ^^^^ not found in this scope\n+LL |         this.a\n+   |         ^^^^ not found in this scope\n+   |\n+help: you might have meant to use `self` here instead\n+   |\n+LL |         self.a\n+   |         ^^^^\n+help: you are also missing a `self` receiver argument\n+   |\n+LL |     fn a(&self) -> A {\n+   |          ^^^^^\n+\n+error[E0425]: cannot find value `this` in this scope\n+  --> $DIR/issue-5099.rs:6:9\n+   |\n+LL |         this.b(x);\n+   |         ^^^^ not found in this scope\n+   |\n+help: you might have meant to use `self` here instead\n+   |\n+LL |         self.b(x);\n+   |         ^^^^\n+help: you are also missing a `self` receiver argument\n+   |\n+LL |     fn b(&self, x: i32) {\n+   |          ^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}