{"sha": "419df5f4a06bc4dff05152413c783758b46ff6b9", "node_id": "C_kwDOAAsO6NoAKDQxOWRmNWY0YTA2YmM0ZGZmMDUxNTI0MTNjNzgzNzU4YjQ2ZmY2Yjk", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-10-13T17:30:33Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-12-14T00:49:20Z"}, "message": "error parsing lifetime following by Sized and message + between them\ndetect the pattern at the general site parse_impl_ty()\nthis will fix #102598", "tree": {"sha": "6702180aa34d745221df4e64f327dee79afa8c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6702180aa34d745221df4e64f327dee79afa8c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419df5f4a06bc4dff05152413c783758b46ff6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419df5f4a06bc4dff05152413c783758b46ff6b9", "html_url": "https://github.com/rust-lang/rust/commit/419df5f4a06bc4dff05152413c783758b46ff6b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419df5f4a06bc4dff05152413c783758b46ff6b9/comments", "author": null, "committer": null, "parents": [{"sha": "37d7de337903a558dbeb1e82c844fe915ab8ff25", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d7de337903a558dbeb1e82c844fe915ab8ff25", "html_url": "https://github.com/rust-lang/rust/commit/37d7de337903a558dbeb1e82c844fe915ab8ff25"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "063421d62fee3e03aed438e5ff3a8c57fa868158", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/419df5f4a06bc4dff05152413c783758b46ff6b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df5f4a06bc4dff05152413c783758b46ff6b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=419df5f4a06bc4dff05152413c783758b46ff6b9", "patch": "@@ -2449,7 +2449,6 @@ impl<'a> Parser<'a> {\n             };\n             let (pat, ty) = if is_name_required || this.is_named_param() {\n                 debug!(\"parse_param_general parse_pat (is_name_required:{})\", is_name_required);\n-\n                 let (pat, colon) = this.parse_fn_param_pat_colon()?;\n                 if !colon {\n                     let mut err = this.unexpected::<()>().unwrap_err();"}, {"sha": "fc26278909c2d0a41386a0cb85402576de8883ee", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/419df5f4a06bc4dff05152413c783758b46ff6b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df5f4a06bc4dff05152413c783758b46ff6b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=419df5f4a06bc4dff05152413c783758b46ff6b9", "patch": "@@ -613,6 +613,25 @@ impl<'a> Parser<'a> {\n     /// Parses an `impl B0 + ... + Bn` type.\n     fn parse_impl_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n         // Always parse bounds greedily for better error recovery.\n+        if self.token.is_lifetime() {\n+            self.look_ahead(1, |t| {\n+                if let token::Ident(symname, _) = t.kind {\n+                    // parse pattern with \"'a Sized\" we're supposed to give suggestion like\n+                    // \"'a + Sized\"\n+                    self.struct_span_err(\n+                        self.token.span,\n+                        &format!(\"expected `+` between lifetime and {}\", symname),\n+                    )\n+                    .span_suggestion_verbose(\n+                        self.token.span.shrink_to_hi(),\n+                        \"add `+`\",\n+                        \" +\",\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .emit();\n+                }\n+            })\n+        }\n         let bounds = self.parse_generic_bounds(None)?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds))"}, {"sha": "93808f18b99715ff16799543587731035d65fb96", "filename": "src/test/ui/type/issue-102598.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/419df5f4a06bc4dff05152413c783758b46ff6b9/src%2Ftest%2Fui%2Ftype%2Fissue-102598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419df5f4a06bc4dff05152413c783758b46ff6b9/src%2Ftest%2Fui%2Ftype%2Fissue-102598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-102598.rs?ref=419df5f4a06bc4dff05152413c783758b46ff6b9", "patch": "@@ -0,0 +1,8 @@\n+fn foo<'a>(_: impl 'a Sized) {}\n+//~^ ERROR: expected `+` between lifetime and Sized\n+//~| ERROR: expected one of `:`, `@`, or `|`, found `)`\n+//~| ERROR: expected one of `)`, `+`, or `,`, found `Sized`\n+//~| ERROR: at least one trait must be specified\n+\n+fn main(){\n+}"}, {"sha": "a232395cedb1d2b51ed543eb051aedf44c3feaa4", "filename": "src/test/ui/type/issue-102598.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/419df5f4a06bc4dff05152413c783758b46ff6b9/src%2Ftest%2Fui%2Ftype%2Fissue-102598.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/419df5f4a06bc4dff05152413c783758b46ff6b9/src%2Ftest%2Fui%2Ftype%2Fissue-102598.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-102598.stderr?ref=419df5f4a06bc4dff05152413c783758b46ff6b9", "patch": "@@ -0,0 +1,43 @@\n+error: expected `+` between lifetime and Sized\n+  --> $DIR/issue-102598.rs:1:20\n+   |\n+LL | fn foo<'a>(_: impl 'a Sized) {}\n+   |                    ^^\n+   |\n+help: add `+`\n+   |\n+LL | fn foo<'a>(_: impl 'a + Sized) {}\n+   |                       +\n+\n+error: expected one of `:`, `@`, or `|`, found `)`\n+  --> $DIR/issue-102598.rs:1:28\n+   |\n+LL | fn foo<'a>(_: impl 'a Sized) {}\n+   |                            ^ expected one of `:`, `@`, or `|`\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a parameter name, give it a type\n+   |\n+LL | fn foo<'a>(_: impl 'a Sized: TypeName) {}\n+   |                            ++++++++++\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn foo<'a>(_: impl 'a _: Sized) {}\n+   |                       ++\n+\n+error: expected one of `)`, `+`, or `,`, found `Sized`\n+  --> $DIR/issue-102598.rs:1:23\n+   |\n+LL | fn foo<'a>(_: impl 'a Sized) {}\n+   |                      -^^^^^ expected one of `)`, `+`, or `,`\n+   |                      |\n+   |                      help: missing `,`\n+\n+error: at least one trait must be specified\n+  --> $DIR/issue-102598.rs:1:15\n+   |\n+LL | fn foo<'a>(_: impl 'a Sized) {}\n+   |               ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}