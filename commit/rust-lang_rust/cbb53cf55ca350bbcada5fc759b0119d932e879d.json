{"sha": "cbb53cf55ca350bbcada5fc759b0119d932e879d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYjUzY2Y1NWNhMzUwYmJjYWRhNWZjNzU5YjAxMTlkOTMyZTg3OWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-27T10:38:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-27T10:38:00Z"}, "message": "More general ctor for ifs", "tree": {"sha": "8e553c230d6dafcebfdd5ae69af99e0eddc4e156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e553c230d6dafcebfdd5ae69af99e0eddc4e156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbb53cf55ca350bbcada5fc759b0119d932e879d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb53cf55ca350bbcada5fc759b0119d932e879d", "html_url": "https://github.com/rust-lang/rust/commit/cbb53cf55ca350bbcada5fc759b0119d932e879d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbb53cf55ca350bbcada5fc759b0119d932e879d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d953df319b3057e446b05eac0dcc88a4a5bb4b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/d953df319b3057e446b05eac0dcc88a4a5bb4b60", "html_url": "https://github.com/rust-lang/rust/commit/d953df319b3057e446b05eac0dcc88a4a5bb4b60"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "ea6c56f8cffe8df89401efed72cb9505f10283dd", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbb53cf55ca350bbcada5fc759b0119d932e879d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb53cf55ca350bbcada5fc759b0119d932e879d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=cbb53cf55ca350bbcada5fc759b0119d932e879d", "patch": "@@ -104,7 +104,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n                     let then_branch =\n                         make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n                     let cond = invert_boolean_expression(cond_expr);\n-                    let e = make::expr_if(cond, then_branch);\n+                    let e = make::expr_if(make::condition(cond, None), then_branch);\n                     if_indent_level.increase_indent(e)\n                 };\n                 replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)"}, {"sha": "6aee392037735d97b5c9d6ef31c2a2cc625b4a9e", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cbb53cf55ca350bbcada5fc759b0119d932e879d/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb53cf55ca350bbcada5fc759b0119d932e879d/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=cbb53cf55ca350bbcada5fc759b0119d932e879d", "patch": "@@ -108,7 +108,7 @@ pub fn expr_return() -> ast::Expr {\n pub fn expr_match(expr: ast::Expr, match_arm_list: ast::MatchArmList) -> ast::Expr {\n     expr_from_text(&format!(\"match {} {}\", expr, match_arm_list))\n }\n-pub fn expr_if(condition: ast::Expr, then_branch: ast::BlockExpr) -> ast::Expr {\n+pub fn expr_if(condition: ast::Condition, then_branch: ast::BlockExpr) -> ast::Expr {\n     expr_from_text(&format!(\"if {} {}\", condition, then_branch))\n }\n pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n@@ -123,6 +123,15 @@ pub fn try_expr_from_text(text: &str) -> Option<ast::Expr> {\n     try_ast_from_text(&format!(\"const C: () = {};\", text))\n }\n \n+pub fn condition(expr: ast::Expr, pattern: Option<ast::Pat>) -> ast::Condition {\n+    match pattern {\n+        None => ast_from_text(&format!(\"const _: () = while {} {{}};\", expr)),\n+        Some(pattern) => {\n+            ast_from_text(&format!(\"const _: () = while {} = {} {{}};\", pattern, expr))\n+        }\n+    }\n+}\n+\n pub fn bind_pat(name: ast::Name) -> ast::BindPat {\n     return from_text(name.text());\n "}]}