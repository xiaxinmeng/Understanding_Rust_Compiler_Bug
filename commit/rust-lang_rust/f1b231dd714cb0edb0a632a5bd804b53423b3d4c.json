{"sha": "f1b231dd714cb0edb0a632a5bd804b53423b3d4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYjIzMWRkNzE0Y2IwZWRiMGE2MzJhNWJkODA0YjUzNDIzYjNkNGM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-12T22:40:54Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-12T22:45:50Z"}, "message": "Remove unused method", "tree": {"sha": "62537ad7140744a98a744036e593de6bbf6c737f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62537ad7140744a98a744036e593de6bbf6c737f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1b231dd714cb0edb0a632a5bd804b53423b3d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b231dd714cb0edb0a632a5bd804b53423b3d4c", "html_url": "https://github.com/rust-lang/rust/commit/f1b231dd714cb0edb0a632a5bd804b53423b3d4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1b231dd714cb0edb0a632a5bd804b53423b3d4c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b731a5cac22f37d3709c889e4de342ca851e3ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b731a5cac22f37d3709c889e4de342ca851e3ff", "html_url": "https://github.com/rust-lang/rust/commit/8b731a5cac22f37d3709c889e4de342ca851e3ff"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "b0cff1406c5cce5276da494ea7bc5f315a95f010", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1b231dd714cb0edb0a632a5bd804b53423b3d4c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b231dd714cb0edb0a632a5bd804b53423b3d4c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f1b231dd714cb0edb0a632a5bd804b53423b3d4c", "patch": "@@ -26,16 +26,6 @@\n #![feature(slice_extras)]\n #![feature(staged_api)]\n \n-#![macro_use]\n-\n-macro_rules! resolve_err {\n-    ($this:expr, $span:expr, $code:ident, $($rest:tt)*) => {\n-        if $this.emit_errors {\n-            span_err!($this.session, $span, $code, $($rest)*);\n-        }\n-    }\n-}\n-\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n@@ -109,11 +99,18 @@ use std::usize;\n use resolve_imports::{Target, ImportDirective, ImportResolution};\n use resolve_imports::Shadowable;\n \n-\n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n pub mod diagnostics;\n \n+macro_rules! resolve_err {\n+    ($this:expr, $span:expr, $code:ident, $($rest:tt)*) => {\n+        if $this.emit_errors {\n+            span_err!($this.session, $span, $code, $($rest)*);\n+        }\n+    }\n+}\n+\n mod check_unused;\n mod record_exports;\n mod build_reduced_graph;\n@@ -2253,10 +2250,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             for (&key, &binding) in &map_i {\n                 if !map_0.contains_key(&key) {\n                     resolve_err!(self, binding.span, E0410,\n-                                 \"variable `{}` from pattern {}{} is \\\n-                                  not bound in pattern {}1\",\n+                                 \"variable `{}` from pattern #{} is \\\n+                                  not bound in pattern #1\",\n                                  key,\n-                                 \"#\", i + 1, \"#\");\n+                                 i + 1);\n                 }\n             }\n         }\n@@ -2371,7 +2368,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             path.segments[0].identifier.name == self_type_name;\n                         if is_invalid_self_type_name {\n                             resolve_err!(self, ty.span, E0411,\n-                                         \"{}\",\n                                          \"use of `Self` outside of an impl or trait\");\n                         } else {\n                             resolve_err!(self, ty.span, E0412,\n@@ -3093,12 +3089,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         rs\n     }\n \n-    fn resolve_error(&self, span: Span, s: &str) {\n-        if self.emit_errors {\n-            self.session.span_err(span, s);\n-        }\n-    }\n-\n     fn find_fallback_in_self_type(&mut self, name: Name) -> FallbackSuggestion {\n         fn extract_path_and_node_id(t: &Ty, allow: FallbackChecks)\n                                                     -> Option<(Path, NodeId, FallbackChecks)> {"}]}