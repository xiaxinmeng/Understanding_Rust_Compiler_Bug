{"sha": "9839f9c7ff0c550e1234e9784612e981ea0123d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MzlmOWM3ZmYwYzU1MGUxMjM0ZTk3ODQ2MTJlOTgxZWEwMTIzZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-19T01:57:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-19T01:57:14Z"}, "message": "Auto merge of #86456 - JohnTitor:rollup-jjzupny, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #86136 (Stabilize span_open() and span_close().)\n - #86359 (Use as_secs_f64 in JunitFormatter)\n - #86370 (Fix rustdoc stabilized versions layout)\n - #86397 (Alter std::cell::Cell::get_mut documentation)\n - #86407 (Use `map_or` instead of open-coding it)\n - #86425 (Update rustversion to 1.0.5)\n - #86440 (Update library tracking issue for libs-api rename.)\n - #86444 (Fix ICE with `#[repr(simd)]` on enum)\n - #86453 (stdlib: Fix typo in internal RefCell docs )\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "152ce3741a55dc15962e8439cd3fb5fc29cb745e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152ce3741a55dc15962e8439cd3fb5fc29cb745e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9839f9c7ff0c550e1234e9784612e981ea0123d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9839f9c7ff0c550e1234e9784612e981ea0123d5", "html_url": "https://github.com/rust-lang/rust/commit/9839f9c7ff0c550e1234e9784612e981ea0123d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9839f9c7ff0c550e1234e9784612e981ea0123d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec57c60c50de4f601a5dbe80e663388058e6e527", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec57c60c50de4f601a5dbe80e663388058e6e527", "html_url": "https://github.com/rust-lang/rust/commit/ec57c60c50de4f601a5dbe80e663388058e6e527"}, {"sha": "ad79aba2bcc0e834e846ad7dc0b08a46fdf48592", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad79aba2bcc0e834e846ad7dc0b08a46fdf48592", "html_url": "https://github.com/rust-lang/rust/commit/ad79aba2bcc0e834e846ad7dc0b08a46fdf48592"}], "stats": {"total": 98, "additions": 79, "deletions": 19}, "files": [{"sha": "e879594b87a100603670ffe688c8cf00dd4cc5df", "filename": ".github/ISSUE_TEMPLATE/library_tracking_issue.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -2,7 +2,7 @@\n name: Library Tracking Issue\n about: A tracking issue for an unstable library feature.\n title: Tracking Issue for XXX\n-labels: C-tracking-issue, T-libs\n+labels: C-tracking-issue, T-libs-api\n ---\n <!--\n Thank you for creating a tracking issue!\n@@ -60,7 +60,7 @@ unresolved questions left, the feature might be ready for stabilization.\n If this feature didn't go through the RFC process, a final commenting period\n (FCP) is always needed before stabilization. This works as follows:\n \n-A library team member can kick off the stabilization process, at which point\n+A library API team member can kick off the stabilization process, at which point\n the rfcbot will ask all the team members to verify they agree with\n stabilization. Once enough members agree and there are no concerns, the final\n commenting period begins: this issue will be marked as such and will be listed"}, {"sha": "bc8b79342b270e39271778bd38d45933b1de861a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -4609,9 +4609,9 @@ dependencies = [\n \n [[package]]\n name = \"rustversion\"\n-version = \"1.0.4\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cb5d2a036dc6d2d8fd16fde3498b04306e29bd193bf306a57427019b823d5acd\"\n+checksum = \"61b3909d758bb75c79f23d4736fac9433868679d3ad2ea7a61e3c25cfda9a088\"\n \n [[package]]\n name = \"ryu\""}, {"sha": "6b1ec1b0646aec1354d6ade066bd2539fae58b32", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -672,6 +672,15 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n             // SIMD vector types.\n             ty::Adt(def, substs) if def.repr.simd() => {\n+                if !def.is_struct() {\n+                    // Should have yielded E0517 by now.\n+                    tcx.sess.delay_span_bug(\n+                        DUMMY_SP,\n+                        \"#[repr(simd)] was applied to an ADT that is not a struct\",\n+                    );\n+                    return Err(LayoutError::Unknown(ty));\n+                }\n+\n                 // Supported SIMD vectors are homogeneous ADTs with at least one field:\n                 //\n                 // * #[repr(simd)] struct S(T, T, T, T);"}, {"sha": "b56c247127ce4734e465c7f191fc193d5163aa9f", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -1205,12 +1205,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         let mut eval_to_int = |op| {\n                             // This can be `None` if the lhs wasn't const propagated and we just\n                             // triggered the assert on the value of the rhs.\n-                            match self.eval_operand(op, source_info) {\n-                                Some(op) => DbgVal::Val(\n-                                    self.ecx.read_immediate(&op).unwrap().to_const_int(),\n-                                ),\n-                                None => DbgVal::Underscore,\n-                            }\n+                            self.eval_operand(op, source_info).map_or(DbgVal::Underscore, |op| {\n+                                DbgVal::Val(self.ecx.read_immediate(&op).unwrap().to_const_int())\n+                            })\n                         };\n                         let msg = match msg {\n                             AssertKind::DivisionByZero(op) => {"}, {"sha": "6af010e796d67bb45564cd2db6eb38228235e240", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -488,6 +488,13 @@ impl<T: ?Sized> Cell<T> {\n     /// This call borrows `Cell` mutably (at compile-time) which guarantees\n     /// that we possess the only reference.\n     ///\n+    /// However be cautious: this method expects `self` to be mutable, which is\n+    /// generally not the case when using a `Cell`. If you require interior\n+    /// mutability by reference, consider using `RefCell` which provides\n+    /// run-time checked mutable borrows through its [`borrow_mut`] method.\n+    ///\n+    /// [`borrow_mut`]: RefCell::borrow_mut()\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -578,7 +585,7 @@ pub struct RefCell<T: ?Sized> {\n     // Stores the location of the earliest currently active borrow.\n     // This gets updated whenver we go from having zero borrows\n     // to having a single borrow. When a borrow occurs, this gets included\n-    // in the generated `BorroeError/`BorrowMutError`\n+    // in the generated `BorrowError/`BorrowMutError`\n     #[cfg(feature = \"debug_refcell\")]\n     borrowed_at: Cell<Option<&'static crate::panic::Location<'static>>>,\n     value: UnsafeCell<T>,"}, {"sha": "53f172717f0a55fe41a39af8684de3afc7192118", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -708,7 +708,7 @@ impl Group {\n     /// pub fn span_open(&self) -> Span {\n     ///                 ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    #[stable(feature = \"proc_macro_group_span\", since = \"1.55.0\")]\n     pub fn span_open(&self) -> Span {\n         Span(self.0.span_open())\n     }\n@@ -719,7 +719,7 @@ impl Group {\n     /// pub fn span_close(&self) -> Span {\n     ///                        ^\n     /// ```\n-    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    #[stable(feature = \"proc_macro_group_span\", since = \"1.55.0\")]\n     pub fn span_close(&self) -> Span {\n         Span(self.0.span_close())\n     }"}, {"sha": "c4b0e1e5c23392f00a4eaada6a288fb53a03df11", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -79,7 +79,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n                         test_name,\n-                        duration.as_secs()\n+                        duration.as_secs_f64()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"assert\\\"/>\")?;\n                     self.write_message(\"</testcase>\")?;\n@@ -91,7 +91,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n                         test_name,\n-                        duration.as_secs()\n+                        duration.as_secs_f64()\n                     ))?;\n                     self.write_message(&*format!(\"<failure message=\\\"{}\\\" type=\\\"assert\\\"/>\", m))?;\n                     self.write_message(\"</testcase>\")?;\n@@ -103,7 +103,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n                         test_name,\n-                        duration.as_secs()\n+                        duration.as_secs_f64()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"timeout\\\"/>\")?;\n                     self.write_message(\"</testcase>\")?;\n@@ -123,7 +123,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                          name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n                         class_name,\n                         test_name,\n-                        duration.as_secs()\n+                        duration.as_secs_f64()\n                     ))?;\n                 }\n             }"}, {"sha": "48cbd94ccabfbebebc14ac67144b1bf1b5ba012c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -981,7 +981,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 }\n                 w.write_str(\")\");\n             }\n-            w.write_str(\"</code></div>\");\n+            w.write_str(\"</code>\");\n+            render_stability_since(w, variant, it, cx.tcx());\n+            w.write_str(\"</div>\");\n             document(w, cx, variant, Some(it));\n             document_non_exhaustive(w, variant);\n \n@@ -1023,7 +1025,6 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 w.write_str(\"</div></div>\");\n                 toggle_close(w);\n             }\n-            render_stability_since(w, variant, it, cx.tcx());\n         }\n     }\n     let def_id = it.def_id.expect_real();"}, {"sha": "89f5d59224164040d037d9c828a86b1c2684dea4", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -653,6 +653,12 @@ a {\n \tbackground: transparent;\n }\n \n+.small-section-header {\n+\tdisplay: flex;\n+\tjustify-content: space-between;\n+\tposition: relative;\n+}\n+\n .small-section-header:hover > .anchor {\n \tdisplay: initial;\n }"}, {"sha": "280b771d0153925fe3f0cc394af6c72a7eec8468", "filename": "src/test/ui/repr/issue-83505-repr-simd.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.rs?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for the ICE described in #83505.\n+\n+#![crate_type=\"lib\"]\n+\n+#[repr(simd)]\n+//~^ ERROR: attribute should be applied to a struct [E0517]\n+//~| ERROR: unsupported representation for zero-variant enum [E0084]\n+enum Es {}\n+static CLs: Es;\n+//~^ ERROR: free static item without body"}, {"sha": "f1390a652016b2e1b4a8048c1ee612f6949215cb", "filename": "src/test/ui/repr/issue-83505-repr-simd.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9839f9c7ff0c550e1234e9784612e981ea0123d5/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.stderr?ref=9839f9c7ff0c550e1234e9784612e981ea0123d5", "patch": "@@ -0,0 +1,30 @@\n+error: free static item without body\n+  --> $DIR/issue-83505-repr-simd.rs:9:1\n+   |\n+LL | static CLs: Es;\n+   | ^^^^^^^^^^^^^^-\n+   |               |\n+   |               help: provide a definition for the static: `= <expr>;`\n+\n+error[E0517]: attribute should be applied to a struct\n+  --> $DIR/issue-83505-repr-simd.rs:5:8\n+   |\n+LL | #[repr(simd)]\n+   |        ^^^^\n+...\n+LL | enum Es {}\n+   | ---------- not a struct\n+\n+error[E0084]: unsupported representation for zero-variant enum\n+  --> $DIR/issue-83505-repr-simd.rs:5:1\n+   |\n+LL | #[repr(simd)]\n+   | ^^^^^^^^^^^^^\n+...\n+LL | enum Es {}\n+   | ---------- zero-variant enum\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0084, E0517.\n+For more information about an error, try `rustc --explain E0084`."}]}