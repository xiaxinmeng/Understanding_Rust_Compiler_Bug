{"sha": "8bd4bffe50b77782b9cd147e2b92ddc50af10435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZDRiZmZlNTBiNzc3ODJiOWNkMTQ3ZTJiOTJkZGM1MGFmMTA0MzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-25T14:41:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T23:47:04Z"}, "message": "stop invoking `DebruijnIndex::new` directly\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "38fd6c198a26e0084ec7a2454e9e60b95d344b09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38fd6c198a26e0084ec7a2454e9e60b95d344b09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd4bffe50b77782b9cd147e2b92ddc50af10435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd4bffe50b77782b9cd147e2b92ddc50af10435", "html_url": "https://github.com/rust-lang/rust/commit/8bd4bffe50b77782b9cd147e2b92ddc50af10435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd4bffe50b77782b9cd147e2b92ddc50af10435/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5018de0ed3f5f7e56832a22f3e488c5198b11db", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5018de0ed3f5f7e56832a22f3e488c5198b11db", "html_url": "https://github.com/rust-lang/rust/commit/b5018de0ed3f5f7e56832a22f3e488c5198b11db"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "cd73da9adc8adcb7a5fa2dc8f397eaa8366d6f7f", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -417,7 +417,8 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         {\n             for (a_br, a_r) in a_map {\n                 if *a_r == r {\n-                    return infcx.tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), *a_br));\n+                    return infcx.tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n+                                                               *a_br));\n                 }\n             }\n             span_bug!("}, {"sha": "76a8db53a08369792a74d0e8a383cde6f6264e84", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -98,7 +98,7 @@ impl Region {\n     }\n \n     fn late(hir_map: &Map, def: &hir::LifetimeDef) -> (hir::LifetimeName, Region) {\n-        let depth = ty::DebruijnIndex::new(1);\n+        let depth = ty::DebruijnIndex::INNERMOST;\n         let def_id = hir_map.local_def_id(def.lifetime.id);\n         let origin = LifetimeDefOrigin::from_is_in_band(def.in_band);\n         (def.lifetime.name, Region::LateBound(depth, def_id, origin))\n@@ -107,7 +107,7 @@ impl Region {\n     fn late_anon(index: &Cell<u32>) -> Region {\n         let i = index.get();\n         index.set(i + 1);\n-        let depth = ty::DebruijnIndex::new(1);\n+        let depth = ty::DebruijnIndex::INNERMOST;\n         Region::LateBoundAnon(depth, i)\n     }\n "}, {"sha": "8e2c611d8416db1691c8aa14e5346d653d370b7e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -1024,7 +1024,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy, PartialOrd, Ord)]\n pub struct DebruijnIndex {\n     /// We maintain the invariant that this is never 0. So 1 indicates\n-    /// the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n+    /// the innermost binder.\n     pub depth: u32,\n }\n \n@@ -1261,11 +1261,6 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n impl DebruijnIndex {\n     pub const INNERMOST: DebruijnIndex = DebruijnIndex { depth: 1 };\n \n-    pub fn new(depth: u32) -> DebruijnIndex {\n-        assert!(depth > 0);\n-        DebruijnIndex { depth: depth }\n-    }\n-\n     /// Returns the resulting index when this value is moved into\n     /// `amount` number of new binders. So e.g. if you had\n     ///"}, {"sha": "9ef3308efe6d98fda0643e986d21af1db7d42be0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -555,7 +555,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                           -> Option<ty::Binder<Ty<'tcx>>>\n     {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n-        let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n+        let env_region = ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrEnv);\n         let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self);\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {"}, {"sha": "4e7df0cac128b8215249f82d1d1234abb68936b8", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -526,7 +526,7 @@ impl PrintContext {\n                     ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID), name)\n                 }\n             };\n-            tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), br))\n+            tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST, br))\n         }).0;\n         start_or_continue(f, \"\", \"> \")?;\n "}, {"sha": "ab99d1f0f30229d7ba1d181f73c7cfed0115f9d8", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -425,7 +425,7 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             let tcx = cx.tcx;\n             let sig = substs.poly_sig(def_id, cx.tcx);\n \n-            let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n+            let env_region = ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrEnv);\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n             sig.map_bound(|sig| {"}, {"sha": "b22817a066c43b2a51e77bf555c976c559a13574", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -183,6 +183,9 @@ fn test_env_with_pool<F>(\n     });\n }\n \n+const D1: ty::DebruijnIndex = ty::DebruijnIndex::INNERMOST;\n+const D2: ty::DebruijnIndex = D1.shifted_in(1);\n+\n impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.infcx.tcx\n@@ -332,7 +335,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_rptr_late_bound(&self, id: u32) -> Ty<'tcx> {\n-        let r = self.re_late_bound_with_debruijn(id, ty::DebruijnIndex::new(1));\n+        let r = self.re_late_bound_with_debruijn(id, D1);\n         self.infcx.tcx.mk_imm_ref(r, self.tcx().types.isize)\n     }\n \n@@ -489,7 +492,7 @@ fn subst_ty_renumber_bound() {\n \n         // t_expected = fn(&'a isize)\n         let t_expected = {\n-            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n             env.t_fn(&[t_ptr_bound2], env.t_nil())\n         };\n \n@@ -526,7 +529,7 @@ fn subst_ty_renumber_some_bounds() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n             env.t_pair(t_rptr_bound1, env.t_fn(&[t_rptr_bound2], env.t_nil()))\n         };\n \n@@ -554,10 +557,10 @@ fn escaping() {\n         let t_rptr_free1 = env.t_rptr_free(1);\n         assert!(!t_rptr_free1.has_escaping_regions());\n \n-        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1));\n+        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, D1);\n         assert!(t_rptr_bound1.has_escaping_regions());\n \n-        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n         assert!(t_rptr_bound2.has_escaping_regions());\n \n         // t_fn = fn(A)\n@@ -573,7 +576,7 @@ fn escaping() {\n #[test]\n fn subst_region_renumber_region() {\n     test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n-        let re_bound1 = env.re_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1));\n+        let re_bound1 = env.re_late_bound_with_debruijn(1, D1);\n \n         // type t_source<'a> = fn(&'a isize)\n         let t_source = {\n@@ -588,7 +591,7 @@ fn subst_region_renumber_region() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n             env.t_fn(&[t_rptr_bound2], env.t_nil())\n         };\n "}, {"sha": "d894061c6ea157867b7cf3a45149ec4631646539", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd4bffe50b77782b9cd147e2b92ddc50af10435/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=8bd4bffe50b77782b9cd147e2b92ddc50af10435", "patch": "@@ -119,7 +119,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"pref_align_of\" | \"min_align_of\" => (1, Vec::new(), tcx.types.usize),\n             \"size_of_val\" |  \"min_align_of_val\" => {\n                 (1, vec![\n-                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1),\n+                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n                                                                   ty::BrAnon(0))),\n                                     param(0))\n                  ], tcx.types.usize)\n@@ -298,7 +298,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"unlikely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n \n             \"discriminant_value\" => (1, vec![\n-                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1),\n+                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n                                                                   ty::BrAnon(0))),\n                                    param(0))], tcx.types.u64),\n "}]}