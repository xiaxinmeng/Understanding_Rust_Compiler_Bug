{"sha": "f16660943322d3fc3c4747eca6e757a3f7d60e50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNjY2MDk0MzMyMmQzZmMzYzQ3NDdlY2E2ZTc1N2EzZjdkNjBlNTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-10T00:27:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-10T00:27:17Z"}, "message": "Rollup merge of #66216 - wesleywiser:const_prop_codegen_improvements, r=oli-obk\n\n[mir-opt] Handle return place in ConstProp and improve SimplifyLocals pass\n\nTemporarily rebased on top of #66074. The top 2 commits are new.\n\nr? @oli-obk", "tree": {"sha": "1736cc23b208dcbc1a48f1910311978ec720f0a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1736cc23b208dcbc1a48f1910311978ec720f0a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16660943322d3fc3c4747eca6e757a3f7d60e50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdx1llCRBK7hj4Ov3rIwAAdHIIADd3yCSXQogmUOlbV/bD1Og5\njSiBQO6tG5YUBBLKxc6k/n3F1CS9Ck4x6mzmVveEYWxpxgGzbJe9UJQXjhKwwzlN\npUhXSxbXguizgL+WzBcI0nmrN8qkhd6zXlOfoC+nYBeGbJyW/OOu0vjO4gFay+/G\nlMKjr7MAto3m9mVdFfbfhi3pYUijtuQru8OGiu/A6lSS+d2aMiER1WhuaHSh90VX\nMTdvTcWUWGb88gneL/2tB4rEvGvGLYmV6kADOwM8qyh9Mb2H4bjeFXD8camjGVVs\na+Fbzy0eLLwUIchI6S+/eOKrB8+Jy84wp+LlgRHzP+aqPLL9EoEieumm/T1dOJ4=\n=1izp\n-----END PGP SIGNATURE-----\n", "payload": "tree 1736cc23b208dcbc1a48f1910311978ec720f0a4\nparent f135e3312f5a99fd28184546f6111100828e1720\nparent 4505ff4badd0ffe137772401c39dfa760ff9d4a6\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573345637 +0900\ncommitter GitHub <noreply@github.com> 1573345637 +0900\n\nRollup merge of #66216 - wesleywiser:const_prop_codegen_improvements, r=oli-obk\n\n[mir-opt] Handle return place in ConstProp and improve SimplifyLocals pass\n\nTemporarily rebased on top of #66074. The top 2 commits are new.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16660943322d3fc3c4747eca6e757a3f7d60e50", "html_url": "https://github.com/rust-lang/rust/commit/f16660943322d3fc3c4747eca6e757a3f7d60e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16660943322d3fc3c4747eca6e757a3f7d60e50/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f135e3312f5a99fd28184546f6111100828e1720", "url": "https://api.github.com/repos/rust-lang/rust/commits/f135e3312f5a99fd28184546f6111100828e1720", "html_url": "https://github.com/rust-lang/rust/commit/f135e3312f5a99fd28184546f6111100828e1720"}, {"sha": "4505ff4badd0ffe137772401c39dfa760ff9d4a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4505ff4badd0ffe137772401c39dfa760ff9d4a6", "html_url": "https://github.com/rust-lang/rust/commit/4505ff4badd0ffe137772401c39dfa760ff9d4a6"}], "stats": {"total": 116, "additions": 101, "deletions": 15}, "files": [{"sha": "a0d04bd593212ff828d3ee3462f863b45a4fe2f2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f16660943322d3fc3c4747eca6e757a3f7d60e50", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue, Local, UnOp,\n     StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo,\n-    BinOp, SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock,\n+    BinOp, SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock, RETURN_PLACE,\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n@@ -25,6 +25,7 @@ use rustc::ty::layout::{\n     LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n+use crate::rustc::ty::subst::Subst;\n use crate::interpret::{\n     self, InterpCx, ScalarMaybeUndef, Immediate, OpTy,\n     StackPopCleanup, LocalValue, LocalState, AllocId, Frame,\n@@ -269,6 +270,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     param_env: ParamEnv<'tcx>,\n     source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+    ret: Option<OpTy<'tcx, ()>>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -308,11 +310,21 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let mut ecx = InterpCx::new(tcx.at(span), param_env, ConstPropMachine, ());\n         let can_const_prop = CanConstProp::check(body);\n \n+        let substs = &InternalSubsts::identity_for_item(tcx, def_id);\n+\n+        let ret =\n+            ecx\n+                .layout_of(body.return_ty().subst(tcx, substs))\n+                .ok()\n+                // Don't bother allocating memory for ZST types which have no values.\n+                .filter(|ret_layout| !ret_layout.is_zst())\n+                .map(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack));\n+\n         ecx.push_stack_frame(\n-            Instance::new(def_id, &InternalSubsts::identity_for_item(tcx, def_id)),\n+            Instance::new(def_id, substs),\n             span,\n             dummy_body,\n-            None,\n+            ret.map(Into::into),\n             StackPopCleanup::None {\n                 cleanup: false,\n             },\n@@ -327,6 +339,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             source_scope_local_data,\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n+            ret: ret.map(Into::into),\n         }\n     }\n \n@@ -335,6 +348,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n+        if local == RETURN_PLACE {\n+            // Try to read the return place as an immediate so that if it is representable as a\n+            // scalar, we can handle it as such, but otherwise, just return the value as is.\n+            return match self.ret.map(|ret| self.ecx.try_read_immediate(ret)) {\n+                Some(Ok(Ok(imm))) => Some(imm.into()),\n+                _ => self.ret,\n+            };\n+        }\n+\n         self.ecx.access_local(self.ecx.frame(), local, None).ok()\n     }\n \n@@ -643,7 +665,8 @@ impl CanConstProp {\n             //        lint for x != y\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n-            *val = body.local_kind(local) == LocalKind::Temp;\n+            let local_kind = body.local_kind(local);\n+            *val = local_kind == LocalKind::Temp || local_kind == LocalKind::ReturnPointer;\n \n             if !*val {\n                 trace!(\"local {:?} can't be propagated because it's not a temporary\", local);\n@@ -731,7 +754,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             }\n                         } else {\n                             trace!(\"can't propagate into {:?}\", local);\n-                            self.remove_const(local);\n+                            if local != RETURN_PLACE {\n+                                self.remove_const(local);\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "f6b09f20bab679976b7af399128144c01a3c6670", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=f16660943322d3fc3c4747eca6e757a3f7d60e50", "patch": "@@ -359,13 +359,20 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n         // Ignore stores of constants because `ConstProp` and `CopyProp` can remove uses of many\n         // of these locals. However, if the local is still needed, then it will be referenced in\n         // another place and we'll mark it as being used there.\n-        if ctx == PlaceContext::MutatingUse(MutatingUseContext::Store) {\n-            let stmt =\n-                &self.body.basic_blocks()[location.block].statements[location.statement_index];\n-            if let StatementKind::Assign(box (p, Rvalue::Use(Operand::Constant(c)))) = &stmt.kind {\n-                if p.as_local().is_some() {\n-                    trace!(\"skipping store of const value {:?} to {:?}\", c, local);\n-                    return;\n+        if ctx == PlaceContext::MutatingUse(MutatingUseContext::Store) ||\n+           ctx == PlaceContext::MutatingUse(MutatingUseContext::Projection) {\n+            let block = &self.body.basic_blocks()[location.block];\n+            if location.statement_index != block.statements.len() {\n+                let stmt =\n+                    &block.statements[location.statement_index];\n+\n+                if let StatementKind::Assign(\n+                    box (p, Rvalue::Use(Operand::Constant(c)))\n+                ) = &stmt.kind {\n+                    if !p.is_indirect() {\n+                        trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n+                        return;\n+                    }\n                 }\n             }\n         }\n@@ -392,7 +399,7 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n                     self.map[*l].is_some()\n                 }\n                 StatementKind::Assign(box (place, _)) => {\n-                    if let Some(local) = place.as_local() {\n+                    if let PlaceBase::Local(local) = place.base {\n                         self.map[local].is_some()\n                     } else {\n                         true"}, {"sha": "7ae1798c7a2e783a1a10fe58d57024159bfd1831", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=f16660943322d3fc3c4747eca6e757a3f7d60e50", "patch": "@@ -152,7 +152,7 @@ pub fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n@@ -213,7 +213,7 @@ pub fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);"}, {"sha": "cc9951b554dcec24f9a37e0da8e4417a2f221de2", "filename": "src/test/mir-opt/const_prop/return_place.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16660943322d3fc3c4747eca6e757a3f7d60e50/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=f16660943322d3fc3c4747eca6e757a3f7d60e50", "patch": "@@ -0,0 +1,54 @@\n+// compile-flags: -C overflow-checks=on\n+\n+fn add() -> u32 {\n+    2 + 2\n+}\n+\n+fn main() {\n+    add();\n+}\n+\n+// END RUST SOURCE\n+// START rustc.add.ConstProp.before.mir\n+// fn add() -> u32 {\n+//     let mut _0: u32;\n+//     let mut _1: (u32, bool);\n+//     bb0: {\n+//         _1 = CheckedAdd(const 2u32, const 2u32);\n+//         assert(!move (_1.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     }\n+//     bb1: {\n+//         _0 = move (_1.0: u32);\n+//         return;\n+//     }\n+//     bb2 (cleanup): {\n+//         resume;\n+//     }\n+// }\n+// END rustc.add.ConstProp.before.mir\n+// START rustc.add.ConstProp.after.mir\n+// fn add() -> u32 {\n+//     let mut _0: u32;\n+//     let mut _1: (u32, bool);\n+//     bb0: {\n+//         _1 = (const 4u32, const false);\n+//         assert(!const false, \"attempt to add with overflow\") -> bb1;\n+//     }\n+//     bb1: {\n+//         _0 = const 4u32;\n+//         return;\n+//     }\n+//     bb2 (cleanup): {\n+//         resume;\n+//     }\n+// }\n+// END rustc.add.ConstProp.after.mir\n+// START rustc.add.PreCodegen.before.mir\n+// fn add() -> u32 {\n+//     let mut _0: u32;\n+//     bb0: {\n+//         _0 = const 4u32;\n+//         return;\n+//     }\n+// }\n+// END rustc.add.PreCodegen.before.mir"}]}