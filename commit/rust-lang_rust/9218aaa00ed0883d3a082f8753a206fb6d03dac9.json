{"sha": "9218aaa00ed0883d3a082f8753a206fb6d03dac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMThhYWEwMGVkMDg4M2QzYTA4MmY4NzUzYTIwNmZiNmQwM2RhYzk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T23:05:25Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-07T15:23:55Z"}, "message": "std: add result.map_move, result.map_err_move", "tree": {"sha": "46b69977d1b4688f9ff42130d00cf5cb2ea88781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b69977d1b4688f9ff42130d00cf5cb2ea88781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9218aaa00ed0883d3a082f8753a206fb6d03dac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9218aaa00ed0883d3a082f8753a206fb6d03dac9", "html_url": "https://github.com/rust-lang/rust/commit/9218aaa00ed0883d3a082f8753a206fb6d03dac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9218aaa00ed0883d3a082f8753a206fb6d03dac9/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c08237456c3d6b4c9553ebe2f13eba5b97a4e09", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c08237456c3d6b4c9553ebe2f13eba5b97a4e09", "html_url": "https://github.com/rust-lang/rust/commit/5c08237456c3d6b4c9553ebe2f13eba5b97a4e09"}], "stats": {"total": 86, "additions": 66, "deletions": 20}, "files": [{"sha": "890f5e40e970d384477431807c87c98e3c058b4c", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=9218aaa00ed0883d3a082f8753a206fb6d03dac9", "patch": "@@ -2028,7 +2028,7 @@ mod bigint_tests {\n     #[test]\n     fn test_from_str_radix() {\n         fn check(s: &str, ans: Option<int>) {\n-            let ans = ans.map(|&n| IntConvertible::from_int::<BigInt>(n));\n+            let ans = ans.map_move(|n| IntConvertible::from_int::<BigInt>(n));\n             assert_eq!(FromStrRadix::from_str_radix(s, 10), ans);\n         }\n         check(\"10\", Some(10));"}, {"sha": "3f4db29ef7e74295c6ba76a1f1b4d8e6f659abcf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9218aaa00ed0883d3a082f8753a206fb6d03dac9", "patch": "@@ -4443,15 +4443,15 @@ pub fn count_traits_and_supertraits(tcx: ctxt,\n }\n \n pub fn get_tydesc_ty(tcx: ctxt) -> Result<t, ~str> {\n-    do tcx.lang_items.require(TyDescStructLangItem).map |tydesc_lang_item| {\n-        tcx.intrinsic_defs.find_copy(tydesc_lang_item)\n+    do tcx.lang_items.require(TyDescStructLangItem).map_move |tydesc_lang_item| {\n+        tcx.intrinsic_defs.find_copy(&tydesc_lang_item)\n             .expect(\"Failed to resolve TyDesc\")\n     }\n }\n \n pub fn get_opaque_ty(tcx: ctxt) -> Result<t, ~str> {\n-    do tcx.lang_items.require(OpaqueStructLangItem).map |opaque_lang_item| {\n-        tcx.intrinsic_defs.find_copy(opaque_lang_item)\n+    do tcx.lang_items.require(OpaqueStructLangItem).map_move |opaque_lang_item| {\n+        tcx.intrinsic_defs.find_copy(&opaque_lang_item)\n             .expect(\"Failed to resolve Opaque\")\n     }\n }"}, {"sha": "700d96727eae2f9a0f3700e0a9f4c91b09c379df", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=9218aaa00ed0883d3a082f8753a206fb6d03dac9", "patch": "@@ -131,9 +131,7 @@ fn lookup_vtables_for_param(vcx: &VtableContext,\n     // ty is the value supplied for the type parameter A...\n     let mut param_result = ~[];\n \n-    do ty::each_bound_trait_and_supertraits(\n-        tcx, type_param_bounds.trait_bounds) |trait_ref|\n-    {\n+    do ty::each_bound_trait_and_supertraits(tcx, type_param_bounds.trait_bounds) |trait_ref| {\n         // ...and here trait_ref is each bound that was declared on A,\n         // expressed in terms of the type parameters.\n "}, {"sha": "a73809d202c44c7eb64a47be72c228bc159f7e47", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=9218aaa00ed0883d3a082f8753a206fb6d03dac9", "patch": "@@ -110,24 +110,24 @@ fn test_tls_multitask() {\n     set(my_key, @~\"parent data\");\n     do task::spawn {\n         // TLS shouldn't carry over.\n-        assert!(get(my_key, |k| k.map(|&k| *k)).is_none());\n+        assert!(get(my_key, |k| k.map_move(|k| *k)).is_none());\n         set(my_key, @~\"child data\");\n-        assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) ==\n+        assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) ==\n                 ~\"child data\");\n         // should be cleaned up for us\n     }\n     // Must work multiple times\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"parent data\");\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"parent data\");\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"parent data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"parent data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"parent data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"parent data\");\n }\n \n #[test]\n fn test_tls_overwrite() {\n     static my_key: Key<@~str> = &Key;\n     set(my_key, @~\"first data\");\n     set(my_key, @~\"next data\"); // Shouldn't leak.\n-    assert!(*(get(my_key, |k| k.map(|&k| *k)).unwrap()) == ~\"next data\");\n+    assert!(*(get(my_key, |k| k.map_move(|k| *k)).unwrap()) == ~\"next data\");\n }\n \n #[test]"}, {"sha": "e62ae3885eb93ad630ca12c557061a2fc583e7af", "filename": "src/libstd/result.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=9218aaa00ed0883d3a082f8753a206fb6d03dac9", "patch": "@@ -149,6 +149,40 @@ impl<T, E: ToStr> Result<T, E> {\n         }\n     }\n \n+    /// Call a method based on a previous result\n+    ///\n+    /// If `self` is `Ok` then the value is extracted and passed to `op`\n+    /// whereupon `op`s result is wrapped in `Ok` and returned. if `self` is\n+    /// `Err` then it is immediately returned.  This function can be used to\n+    /// compose the results of two functions.\n+    ///\n+    /// Example:\n+    ///\n+    ///     let res = do read_file(file).map_move |buf| {\n+    ///         parse_bytes(buf)\n+    ///     }\n+    #[inline]\n+    pub fn map_move<U>(self, op: &fn(T) -> U) -> Result<U,E> {\n+        match self {\n+          Ok(t) => Ok(op(t)),\n+          Err(e) => Err(e)\n+        }\n+    }\n+\n+    /// Call a method based on a previous result\n+    ///\n+    /// If `self` is `Err` then the value is extracted and passed to `op`\n+    /// whereupon `op`s result is wrapped in an `Err` and returned. if `self` is\n+    /// `Ok` then it is immediately returned.  This function can be used to pass\n+    /// through a successful result while handling an error.\n+    #[inline]\n+    pub fn map_err_move<F>(self, op: &fn(E) -> F) -> Result<T,F> {\n+        match self {\n+          Ok(t) => Ok(t),\n+          Err(e) => Err(op(e))\n+        }\n+    }\n+\n     /// Call a method based on a previous result\n     ///\n     /// If `self` is `Ok` then the value is extracted and passed to `op`\n@@ -312,7 +346,9 @@ pub fn iter_vec2<S, T, U: ToStr>(ss: &[S], ts: &[T],\n #[cfg(test)]\n mod tests {\n     use super::*;\n+\n     use either;\n+    use str::OwnedStr;\n \n     pub fn op1() -> Result<int, ~str> { Ok(666) }\n \n@@ -359,14 +395,26 @@ mod tests {\n \n     #[test]\n     pub fn test_impl_map() {\n-        assert_eq!(Ok::<~str, ~str>(~\"a\").map(|_x| ~\"b\"), Ok(~\"b\"));\n-        assert_eq!(Err::<~str, ~str>(~\"a\").map(|_x| ~\"b\"), Err(~\"a\"));\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map(|x| (~\"b\").append(*x)), Ok(~\"ba\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map(|x| (~\"b\").append(*x)), Err(~\"a\"));\n     }\n \n     #[test]\n     pub fn test_impl_map_err() {\n-        assert_eq!(Ok::<~str, ~str>(~\"a\").map_err(|_x| ~\"b\"), Ok(~\"a\"));\n-        assert_eq!(Err::<~str, ~str>(~\"a\").map_err(|_x| ~\"b\"), Err(~\"b\"));\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map_err(|x| (~\"b\").append(*x)), Ok(~\"a\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map_err(|x| (~\"b\").append(*x)), Err(~\"ba\"));\n+    }\n+\n+    #[test]\n+    pub fn test_impl_map_move() {\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map_move(|x| x + ~\"b\"), Ok(~\"ab\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map_move(|x| x + ~\"b\"), Err(~\"a\"));\n+    }\n+\n+    #[test]\n+    pub fn test_impl_map_err_move() {\n+        assert_eq!(Ok::<~str, ~str>(~\"a\").map_err_move(|x| x + ~\"b\"), Ok(~\"a\"));\n+        assert_eq!(Err::<~str, ~str>(~\"a\").map_err_move(|x| x + ~\"b\"), Err(~\"ab\"));\n     }\n \n     #[test]"}, {"sha": "e732ef67b5b1861670a862ded8cf05039182d3eb", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9218aaa00ed0883d3a082f8753a206fb6d03dac9/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=9218aaa00ed0883d3a082f8753a206fb6d03dac9", "patch": "@@ -465,10 +465,10 @@ mod test {\n         do run_in_newsched_task() {\n             static key: local_data::Key<@~str> = &local_data::Key;\n             local_data::set(key, @~\"data\");\n-            assert!(*local_data::get(key, |k| k.map(|&k| *k)).unwrap() == ~\"data\");\n+            assert!(*local_data::get(key, |k| k.map_move(|k| *k)).unwrap() == ~\"data\");\n             static key2: local_data::Key<@~str> = &local_data::Key;\n             local_data::set(key2, @~\"data\");\n-            assert!(*local_data::get(key2, |k| k.map(|&k| *k)).unwrap() == ~\"data\");\n+            assert!(*local_data::get(key2, |k| k.map_move(|k| *k)).unwrap() == ~\"data\");\n         }\n     }\n "}]}