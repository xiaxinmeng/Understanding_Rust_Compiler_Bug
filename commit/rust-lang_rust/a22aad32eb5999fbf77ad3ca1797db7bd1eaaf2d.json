{"sha": "a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d", "node_id": "C_kwDOAAsO6NoAKGEyMmFhZDMyZWI1OTk5ZmJmNzdhZDNjYTE3OTdkYjdiZDFlYWFmMmQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-20T18:52:56Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-06-07T21:29:06Z"}, "message": "Instrument important fns in AST lowering", "tree": {"sha": "cadaa7dc1ebc2406472f41e055735363f856b9db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cadaa7dc1ebc2406472f41e055735363f856b9db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKfwyIACgkQgTGiTgx5\n768fdA/+JDwOUMP0F+Shuh3aViJx60YXIGjr2MlybfZ2XbPehCsCHnXU5wPnARUJ\n7MsafgU1mObk8UPHCXJ7iwuvp0qDpGDRqregdS10wMpG3cB5WmLjDLU3mBLm9VbN\nAA1gidGGj7OFtYo5nCnB8mRvUP5y4HWIjy6QWQDh+OT860pzCS4cytFKPu8+nskk\n7iwAuC9DCuIsTohQfx5BtC97lBoeqbHnrOLSd6+58DsQWddipHywGerrgM27lxn4\nCvizV1s1sXMRdIVhNym165UabWBSPluGV+MU/l8QDROEjw8jNZ0tRmh72DWY0/B3\ncigXxSITwacdI4eeNvnLf82TvuSVNN4SF0pvI42DFI3ansOsxx3Hdkp5zZgoUr1N\nLGUZF/kTE3lSWg+xf9/c6nHXwhfc+AAEmed+j7FkWJDBgR7so8M1JsOpAQ93lE4u\nGim6oDP93hs2MJPYFD89D75M0ArHSxXFYPKiZzYYjf1X/P8lMff2tidfbyBlwYNy\nKcFKvzUlZlylj2IVWH+feNJwQWeHJv5oiKz8qfXieZjlnFNR57Tg9KrWIxhVECkJ\n+Xa5H1oAMsPvUx9aktI+Kn39utI6Lcdax/1vApzOm+dTzHAoxPvmHD2hNzW8hYqy\nCrOg0USYQLG77FmdjLoD2ChWARSfgzYWtcpmvxGQb01GjcWGOEc=\n=la0o\n-----END PGP SIGNATURE-----", "payload": "tree cadaa7dc1ebc2406472f41e055735363f856b9db\nparent 7fe2c4b00dfbc33643e1af4b293eb057306a8339\nauthor Santiago Pastorino <spastorino@gmail.com> 1653072776 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654637346 -0300\n\nInstrument important fns in AST lowering\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d", "html_url": "https://github.com/rust-lang/rust/commit/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe2c4b00dfbc33643e1af4b293eb057306a8339", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe2c4b00dfbc33643e1af4b293eb057306a8339", "html_url": "https://github.com/rust-lang/rust/commit/7fe2c4b00dfbc33643e1af4b293eb057306a8339"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "d5ed9aa380f458e2ff6e9a8ea92f9093275b8b50", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d", "patch": "@@ -19,7 +19,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n-use tracing::debug;\n \n use std::iter;\n \n@@ -117,6 +116,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         self.owners[def_id]\n     }\n \n+    #[instrument(level = \"debug\", skip(self, c))]\n     fn lower_crate(&mut self, c: &Crate) {\n         debug_assert_eq!(self.resolver.local_def_id(CRATE_NODE_ID), CRATE_DEF_ID);\n \n@@ -127,6 +127,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         })\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_item(&mut self, item: &Item) {\n         self.with_lctx(item.id, |lctx| hir::OwnerNode::Item(lctx.lower_item(item)))\n     }\n@@ -485,6 +486,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         (ty, self.lower_const_body(span, body))\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_use_tree(\n         &mut self,\n         tree: &UseTree,\n@@ -494,8 +496,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         ident: &mut Ident,\n         attrs: Option<&'hir [Attribute]>,\n     ) -> hir::ItemKind<'hir> {\n-        debug!(\"lower_use_tree(tree={:?})\", tree);\n-\n         let path = &tree.prefix;\n         let segments = prefix.segments.iter().chain(path.segments.iter()).cloned().collect();\n \n@@ -1298,6 +1298,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Return the pair of the lowered `generics` as `hir::Generics` and the evaluation of `f` with\n     /// the carried impl trait definitions and bounds.\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn lower_generics<T>(\n         &mut self,\n         generics: &Generics,"}, {"sha": "a8a115fe38f29c5d75b46024c34d260e80c83cf4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d", "patch": "@@ -37,6 +37,9 @@\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n@@ -63,7 +66,6 @@ use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n-use tracing::{debug, trace};\n \n macro_rules! arena_vec {\n     ($this:expr; $($x:expr),*) => (\n@@ -439,7 +441,7 @@ pub fn lower_crate<'a, 'hir>(\n     arena.alloc(krate)\n }\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum ParamMode {\n     /// Any path in a type context.\n     Explicit,\n@@ -455,6 +457,7 @@ enum ParenthesizedGenericArgs {\n }\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn with_hir_id_owner(\n         &mut self,\n         owner: NodeId,\n@@ -599,12 +602,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.lower_node_id(node_id)\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_res(&mut self, res: Res<NodeId>) -> Res {\n         let res: Result<Res, ()> = res.apply_id(|id| {\n             let owner = self.current_hir_id_owner;\n             let local_id = self.node_id_to_local_id.get(&id).copied().ok_or(())?;\n             Ok(hir::HirId { owner, local_id })\n         });\n+        trace!(?res);\n+\n         // We may fail to find a HirId when the Res points to a Local from an enclosing HIR owner.\n         // This can happen when trying to lower the return type `x` in erroneous code like\n         //   async fn foo(x: u8) -> x {}\n@@ -851,6 +857,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// ```\n     ///\n     /// returns a `hir::TypeBinding` representing `Item`.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n@@ -1011,6 +1018,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         err.emit();\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n@@ -1081,6 +1089,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> &'hir hir::Ty<'hir> {\n         self.arena.alloc(self.lower_ty_direct(t, itctx))\n     }\n@@ -1737,6 +1746,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n@@ -1862,6 +1872,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.arena.alloc_from_iter(self.lower_generic_params_mut(params))\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_generic_param(&mut self, param: &GenericParam) -> hir::GenericParam<'hir> {\n         let (name, kind) = match param.kind {\n             GenericParamKind::Lifetime => {"}, {"sha": "ac63a075ac65fe22d466dba3359a8634cec4aa2f", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=a22aad32eb5999fbf77ad3ca1797db7bd1eaaf2d", "patch": "@@ -15,6 +15,7 @@ use smallvec::smallvec;\n use tracing::debug;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    #[instrument(level = \"trace\", skip(self))]\n     pub(crate) fn lower_qpath(\n         &mut self,\n         id: NodeId,\n@@ -23,7 +24,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n-        debug!(\"lower_qpath(id: {:?}, qself: {:?}, p: {:?})\", id, qself, p);\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n "}]}