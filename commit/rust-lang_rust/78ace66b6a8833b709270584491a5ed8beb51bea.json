{"sha": "78ace66b6a8833b709270584491a5ed8beb51bea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YWNlNjZiNmE4ODMzYjcwOTI3MDU4NDQ5MWE1ZWQ4YmViNTFiZWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-29T02:03:55Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T16:21:33Z"}, "message": "rustc_metadata: remove extension traits from astencode.", "tree": {"sha": "c3df690ccc1612ddb69788c449d0d38e80c74109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3df690ccc1612ddb69788c449d0d38e80c74109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78ace66b6a8833b709270584491a5ed8beb51bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78ace66b6a8833b709270584491a5ed8beb51bea", "html_url": "https://github.com/rust-lang/rust/commit/78ace66b6a8833b709270584491a5ed8beb51bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78ace66b6a8833b709270584491a5ed8beb51bea/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9", "html_url": "https://github.com/rust-lang/rust/commit/87db6b9e65d3ee67f2c3ff8312fa7fbbe89ac8e9"}], "stats": {"total": 185, "additions": 7, "deletions": 178}, "files": [{"sha": "ece4e8b1097450f873b8e2ab46a4f67d251f4ba1", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 7, "deletions": 178, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/78ace66b6a8833b709270584491a5ed8beb51bea/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ace66b6a8833b709270584491a5ed8beb51bea/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=78ace66b6a8833b709270584491a5ed8beb51bea", "patch": "@@ -44,12 +44,10 @@ use syntax_pos;\n use std::cell::Cell;\n use std::io::SeekFrom;\n use std::io::prelude::*;\n-use std::fmt::Debug;\n \n use rbml::reader;\n use rbml::writer::Encoder;\n use rbml;\n-use rustc_serialize as serialize;\n use rustc_serialize::{Decodable, Decoder, DecoderHelpers};\n use rustc_serialize::{Encodable, EncoderHelpers};\n \n@@ -234,40 +232,6 @@ impl tr for syntax_pos::Span {\n     }\n }\n \n-trait def_id_encoder_helpers {\n-    fn emit_def_id(&mut self, did: DefId);\n-}\n-\n-impl<S:serialize::Encoder> def_id_encoder_helpers for S\n-    where <S as serialize::Encoder>::Error: Debug\n-{\n-    fn emit_def_id(&mut self, did: DefId) {\n-        did.encode(self).unwrap()\n-    }\n-}\n-\n-trait def_id_decoder_helpers {\n-    fn read_def_id(&mut self, dcx: &DecodeContext) -> DefId;\n-    fn read_def_id_nodcx(&mut self,\n-                         cdata: &cstore::CrateMetadata) -> DefId;\n-}\n-\n-impl<D:serialize::Decoder> def_id_decoder_helpers for D\n-    where <D as serialize::Decoder>::Error: Debug\n-{\n-    fn read_def_id(&mut self, dcx: &DecodeContext) -> DefId {\n-        let did: DefId = Decodable::decode(self).unwrap();\n-        did.tr(dcx)\n-    }\n-\n-    fn read_def_id_nodcx(&mut self,\n-                         cdata: &cstore::CrateMetadata)\n-                         -> DefId {\n-        let did: DefId = Decodable::decode(self).unwrap();\n-        decoder::translate_def_id(cdata, did)\n-    }\n-}\n-\n // ______________________________________________________________________\n // Encoding and decoding the AST itself\n //\n@@ -430,23 +394,12 @@ fn encode_freevar_entry(rbml_w: &mut Encoder, fv: &hir::Freevar) {\n     (*fv).encode(rbml_w).unwrap();\n }\n \n-trait rbml_decoder_helper {\n-    fn read_freevar_entry(&mut self, dcx: &DecodeContext)\n-                          -> hir::Freevar;\n-    fn read_capture_mode(&mut self) -> hir::CaptureClause;\n-}\n-\n-impl<'a> rbml_decoder_helper for reader::Decoder<'a> {\n+impl<'a> reader::Decoder<'a> {\n     fn read_freevar_entry(&mut self, dcx: &DecodeContext)\n                           -> hir::Freevar {\n         let fv: hir::Freevar = Decodable::decode(self).unwrap();\n         fv.tr(dcx)\n     }\n-\n-    fn read_capture_mode(&mut self) -> hir::CaptureClause {\n-        let cm: hir::CaptureClause = Decodable::decode(self).unwrap();\n-        cm\n-    }\n }\n \n impl tr for hir::Freevar {\n@@ -461,11 +414,6 @@ impl tr for hir::Freevar {\n // ______________________________________________________________________\n // Encoding and decoding of MethodCallee\n \n-trait read_method_callee_helper<'tcx> {\n-    fn read_method_callee<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                              -> (u32, ty::MethodCallee<'tcx>);\n-}\n-\n fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n                                   rbml_w: &mut Encoder,\n                                   autoderef: u32,\n@@ -477,7 +425,7 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n             autoderef.encode(rbml_w)\n         });\n         rbml_w.emit_struct_field(\"def_id\", 1, |rbml_w| {\n-            Ok(rbml_w.emit_def_id(method.def_id))\n+            method.def_id.encode(rbml_w)\n         });\n         rbml_w.emit_struct_field(\"ty\", 2, |rbml_w| {\n             Ok(rbml_w.emit_ty(ecx, method.ty))\n@@ -488,7 +436,7 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n     }).unwrap();\n }\n \n-impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n+impl<'a, 'tcx> reader::Decoder<'a> {\n     fn read_method_callee<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n                               -> (u32, ty::MethodCallee<'tcx>) {\n \n@@ -497,7 +445,7 @@ impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n                                                    Decodable::decode).unwrap();\n             Ok((autoderef, ty::MethodCallee {\n                 def_id: this.read_struct_field(\"def_id\", 1, |this| {\n-                    Ok(this.read_def_id(dcx))\n+                    DefId::decode(this).map(|d| d.tr(dcx))\n                 }).unwrap(),\n                 ty: this.read_struct_field(\"ty\", 2, |this| {\n                     Ok(this.read_ty(dcx))\n@@ -517,21 +465,7 @@ pub fn encode_cast_kind(ebml_w: &mut Encoder, kind: cast::CastKind) {\n // ______________________________________________________________________\n // Encoding and decoding the side tables\n \n-trait rbml_writer_helpers<'tcx> {\n-    fn emit_region(&mut self, ecx: &e::EncodeContext, r: &'tcx ty::Region);\n-    fn emit_ty<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, ty: Ty<'tcx>);\n-    fn emit_substs<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n-                       substs: &Substs<'tcx>);\n-    fn emit_upvar_capture(&mut self, ecx: &e::EncodeContext, capture: &ty::UpvarCapture);\n-    fn emit_auto_adjustment<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n-                                adj: &adjustment::AutoAdjustment<'tcx>);\n-    fn emit_autoref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n-                        autoref: &adjustment::AutoRef<'tcx>);\n-    fn emit_auto_deref_ref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n-                               auto_deref_ref: &adjustment::AutoDerefRef<'tcx>);\n-}\n-\n-impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n+impl<'a, 'tcx> Encoder<'a> {\n     fn emit_region(&mut self, ecx: &e::EncodeContext, r: &'tcx ty::Region) {\n         self.emit_opaque(|this| Ok(tyencode::enc_region(&mut this.cursor,\n                                                         &ecx.ty_str_ctxt(),\n@@ -661,12 +595,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n     }\n }\n \n-trait write_tag_and_id {\n-    fn tag<F>(&mut self, tag_id: c::astencode_tag, f: F) where F: FnOnce(&mut Self);\n-    fn id(&mut self, id: ast::NodeId);\n-}\n-\n-impl<'a> write_tag_and_id for Encoder<'a> {\n+impl<'a> Encoder<'a> {\n     fn tag<F>(&mut self,\n               tag_id: c::astencode_tag,\n               f: F) where\n@@ -808,87 +737,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n }\n \n-trait doc_decoder_helpers: Sized {\n-    fn as_int(&self) -> isize;\n-    fn opt_child(&self, tag: c::astencode_tag) -> Option<Self>;\n-}\n-\n-impl<'a> doc_decoder_helpers for rbml::Doc<'a> {\n-    fn as_int(&self) -> isize { reader::doc_as_u64(*self) as isize }\n-    fn opt_child(&self, tag: c::astencode_tag) -> Option<rbml::Doc<'a>> {\n-        reader::maybe_get_doc(*self, tag as usize)\n-    }\n-}\n-\n-trait rbml_decoder_decoder_helpers<'tcx> {\n-    fn read_ty_encoded<'a, F, R>(&mut self, dcx: &DecodeContext<'a, 'tcx>, f: F) -> R\n-        where F: for<'x> FnOnce(&mut tydecode::TyDecoder<'x, 'tcx>) -> R;\n-\n-    fn read_region<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>) -> &'tcx ty::Region;\n-    fn read_ty<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>) -> Ty<'tcx>;\n-    fn read_tys<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>) -> Vec<Ty<'tcx>>;\n-    fn read_trait_ref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                          -> ty::TraitRef<'tcx>;\n-    fn read_poly_trait_ref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                               -> ty::PolyTraitRef<'tcx>;\n-    fn read_predicate<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                          -> ty::Predicate<'tcx>;\n-    fn read_substs<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                       -> &'tcx Substs<'tcx>;\n-    fn read_upvar_capture<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                              -> ty::UpvarCapture<'tcx>;\n-    fn read_auto_adjustment<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                                -> adjustment::AutoAdjustment<'tcx>;\n-    fn read_cast_kind<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                          -> cast::CastKind;\n-    fn read_auto_deref_ref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                               -> adjustment::AutoDerefRef<'tcx>;\n-    fn read_autoref<'a>(&mut self, dcx: &DecodeContext<'a, 'tcx>)\n-                        -> adjustment::AutoRef<'tcx>;\n-\n-    // Versions of the type reading functions that don't need the full\n-    // DecodeContext.\n-    fn read_ty_nodcx<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                         cdata: &cstore::CrateMetadata) -> Ty<'tcx>;\n-    fn read_tys_nodcx<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          cdata: &cstore::CrateMetadata) -> Vec<Ty<'tcx>>;\n-    fn read_substs_nodcx<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             cdata: &cstore::CrateMetadata)\n-                             -> &'tcx Substs<'tcx>;\n-}\n-\n-impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n-    fn read_ty_nodcx<'b>(&mut self, tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-                         cdata: &cstore::CrateMetadata)\n-                         -> Ty<'tcx> {\n-        self.read_opaque(|_, doc| {\n-            Ok(\n-                tydecode::TyDecoder::with_doc(tcx, cdata.cnum, doc,\n-                                              &mut |id| decoder::translate_def_id(cdata, id))\n-                    .parse_ty())\n-        }).unwrap()\n-    }\n-\n-    fn read_tys_nodcx<'b>(&mut self, tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-                          cdata: &cstore::CrateMetadata) -> Vec<Ty<'tcx>> {\n-        self.read_to_vec(|this| Ok(this.read_ty_nodcx(tcx, cdata)) )\n-            .unwrap()\n-            .into_iter()\n-            .collect()\n-    }\n-\n-    fn read_substs_nodcx<'b>(&mut self, tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-                             cdata: &cstore::CrateMetadata)\n-                             -> &'tcx Substs<'tcx>\n-    {\n-        self.read_opaque(|_, doc| {\n-            Ok(\n-                tydecode::TyDecoder::with_doc(tcx, cdata.cnum, doc,\n-                                              &mut |id| decoder::translate_def_id(cdata, id))\n-                    .parse_substs())\n-        }).unwrap()\n-    }\n-\n+impl<'a, 'tcx> reader::Decoder<'a> {\n     fn read_ty_encoded<'b, F, R>(&mut self, dcx: &DecodeContext<'b, 'tcx>, op: F) -> R\n         where F: for<'x> FnOnce(&mut tydecode::TyDecoder<'x,'tcx>) -> R\n     {\n@@ -919,26 +768,6 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         return self.read_ty_encoded(dcx, |decoder| decoder.parse_ty());\n     }\n \n-    fn read_tys<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>) -> Vec<Ty<'tcx>> {\n-        self.read_to_vec(|this| Ok(this.read_ty(dcx))).unwrap().into_iter().collect()\n-    }\n-\n-    fn read_trait_ref<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n-                          -> ty::TraitRef<'tcx> {\n-        self.read_ty_encoded(dcx, |decoder| decoder.parse_trait_ref())\n-    }\n-\n-    fn read_poly_trait_ref<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n-                               -> ty::PolyTraitRef<'tcx> {\n-        ty::Binder(self.read_ty_encoded(dcx, |decoder| decoder.parse_trait_ref()))\n-    }\n-\n-    fn read_predicate<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n-                          -> ty::Predicate<'tcx>\n-    {\n-        self.read_ty_encoded(dcx, |decoder| decoder.parse_predicate())\n-    }\n-\n     fn read_substs<'b>(&mut self, dcx: &DecodeContext<'b, 'tcx>)\n                        -> &'tcx Substs<'tcx> {\n         self.read_opaque(|_, doc| {"}]}