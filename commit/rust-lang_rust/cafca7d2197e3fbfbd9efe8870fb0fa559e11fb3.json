{"sha": "cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "node_id": "C_kwDOAAsO6NoAKGNhZmNhN2QyMTk3ZTNmYmZiZDllZmU4ODcwZmIwZmE1NTllMTFmYjM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-17T03:37:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-17T03:37:17Z"}, "message": "Rollup merge of #101921 - est31:bootstrap_cfg_rustdoc, r=joshtriplett\n\nPass --cfg=bootstrap for rustdoc for proc_macro crates\n\nThis PR does three things:\n\n* First, it passes --cfg=bootstrap on stage 0 for rustdoc invocations on proc_macro crates. This mirrors what we do already for rustc invocations of those, and is needed because cargo doesn't respect RUSTFLAGS or RUSTDOCFLAGS when confronted with a proc macro.\n* Second, it marks the bootstrap config variable as expected. This is needed both on later stages where it's not set, but also on stage 0, where it is set.\n* Third, it adjusts the comment in the rustc wrapper to better reflect the reason why we set the bootstrap variable as\n  expected: due to recent changes, setting it as expected\n  is also required even if the cfg variable is passed: ebf4cc361e0d0f11a25b42372bd629953365d17e .", "tree": {"sha": "ae066dd3db948279ed91842ed459e5d20f17f0c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae066dd3db948279ed91842ed459e5d20f17f0c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJUDtCRBK7hj4Ov3rIwAAHs8IAACrJoDfmuPxJXMP3hwYInKc\nm9IaVd2uiP8iUiWPMTduk5EiCHqVsLjBBq/jpWz1S9dTaZ3Fpe2bFxe5mqR210Q7\n7fCrtSWf2bgM/x05qd4FOmUa+B8YZme55AROPmuaZl1CauZ5V+u5l8XzVYQV4all\ne/rqyjz5jRnZxtnoW8MiUEo/hZ+svGFNiEGZegJ7V/LuB8VrV25bujxZONSv/SJ8\nzzV/ASUdRXY6qJY82kcENOGHXO8UK1uaRDUa559UPd2iuZaeqqBuj3hp9i19pBKW\nCzPYXbXocUOT13gPsMMqEvgTCnfhtO1Yre3nQWa8Krw3ngkX0516atkYKMTG25U=\n=9QDN\n-----END PGP SIGNATURE-----\n", "payload": "tree ae066dd3db948279ed91842ed459e5d20f17f0c5\nparent bba939ee94bc91a3134634e435652caded217164\nparent 706f0f018b2e186aa9c464e0e8d7e20b0dfd324a\nauthor Michael Howell <michael@notriddle.com> 1663385837 -0700\ncommitter GitHub <noreply@github.com> 1663385837 -0700\n\nRollup merge of #101921 - est31:bootstrap_cfg_rustdoc, r=joshtriplett\n\nPass --cfg=bootstrap for rustdoc for proc_macro crates\n\nThis PR does three things:\n\n* First, it passes --cfg=bootstrap on stage 0 for rustdoc invocations on proc_macro crates. This mirrors what we do already for rustc invocations of those, and is needed because cargo doesn't respect RUSTFLAGS or RUSTDOCFLAGS when confronted with a proc macro.\n* Second, it marks the bootstrap config variable as expected. This is needed both on later stages where it's not set, but also on stage 0, where it is set.\n* Third, it adjusts the comment in the rustc wrapper to better reflect the reason why we set the bootstrap variable as\n  expected: due to recent changes, setting it as expected\n  is also required even if the cfg variable is passed: ebf4cc361e0d0f11a25b42372bd629953365d17e .\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "html_url": "https://github.com/rust-lang/rust/commit/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba939ee94bc91a3134634e435652caded217164", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba939ee94bc91a3134634e435652caded217164", "html_url": "https://github.com/rust-lang/rust/commit/bba939ee94bc91a3134634e435652caded217164"}, {"sha": "706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "url": "https://api.github.com/repos/rust-lang/rust/commits/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a", "html_url": "https://github.com/rust-lang/rust/commit/706f0f018b2e186aa9c464e0e8d7e20b0dfd324a"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "e96f8b0d3125fe172d453801ac6aea0e7db52d4a", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "patch": "@@ -139,10 +139,8 @@ fn main() {\n         // Cargo doesn't pass RUSTFLAGS to proc_macros:\n         // https://github.com/rust-lang/cargo/issues/4423\n         // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n-        // We also declare that the flag is expected, which is mainly needed for\n-        // later stages so that they don't warn about #[cfg(bootstrap)],\n-        // but enabling it for stage 0 too lets any warnings, if they occur,\n-        // occur more early on, e.g. about #[cfg(bootstrap = \"foo\")].\n+        // We also declare that the flag is expected, which we need to do to not\n+        // get warnings about it being unexpected.\n         if stage == \"0\" {\n             cmd.arg(\"--cfg=bootstrap\");\n         }"}, {"sha": "e69cab956c5078eed10822aefc6cf5b0489c718d", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=cafca7d2197e3fbfbd9efe8870fb0fa559e11fb3", "patch": "@@ -11,6 +11,7 @@ include!(\"../dylib_util.rs\");\n \n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n+    let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n     let libdir = env::var_os(\"RUSTDOC_LIBDIR\").expect(\"RUSTDOC_LIBDIR was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n@@ -62,6 +63,16 @@ fn main() {\n             cmd.arg(\"-Clink-arg=-Wl,--threads=1\");\n         }\n     }\n+    // Cargo doesn't pass RUSTDOCFLAGS to proc_macros:\n+    // https://github.com/rust-lang/cargo/issues/4423\n+    // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n+    // We also declare that the flag is expected, which we need to do to not\n+    // get warnings about it being unexpected.\n+    if stage == \"0\" {\n+        cmd.arg(\"--cfg=bootstrap\");\n+    }\n+    cmd.arg(\"-Zunstable-options\");\n+    cmd.arg(\"--check-cfg=values(bootstrap)\");\n \n     if verbose > 1 {\n         eprintln!("}]}