{"sha": "7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "node_id": "C_kwDOAAsO6NoAKDdhYjBhYWE4MmEyNGIyZDU0YjIzMzg3MjJjZjYzYzJjYjFjYWEzNDY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-19T18:01:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-19T18:01:19Z"}, "message": "Add option to skip trivial cases", "tree": {"sha": "10fe82bd5f8870860e16421967662d1cd8549aba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10fe82bd5f8870860e16421967662d1cd8549aba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "html_url": "https://github.com/rust-lang/rust/commit/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45756c823fdf12ff8eca8c4350b93c833633d4db", "url": "https://api.github.com/repos/rust-lang/rust/commits/45756c823fdf12ff8eca8c4350b93c833633d4db", "html_url": "https://github.com/rust-lang/rust/commit/45756c823fdf12ff8eca8c4350b93c833633d4db"}], "stats": {"total": 227, "additions": 178, "deletions": 49}, "files": [{"sha": "2a82f5431592945e31218be44e48f36964fc3228", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 108, "deletions": 36, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "patch": "@@ -4,7 +4,7 @@ use ide_db::{\n     base_db::FileRange, famous_defs::FamousDefs, syntax_helpers::node_ext::walk_ty, RootDatabase,\n };\n use itertools::Itertools;\n-use rustc_hash::FxHashSet;\n+use rustc_hash::FxHashMap;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, AstNode, HasArgList, HasGenericParams, HasName, UnaryOp},\n@@ -20,13 +20,19 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub closure_return_type_hints: bool,\n-    // FIXME: ternary option here, on off non-noisy\n-    pub lifetime_elision_hints: bool,\n+    pub lifetime_elision_hints: LifetimeElisionHints,\n     pub param_names_for_lifetime_elision_hints: bool,\n     pub hide_named_constructor_hints: bool,\n     pub max_length: Option<usize>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum LifetimeElisionHints {\n+    Always,\n+    SkipTrivial,\n+    Never,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     TypeHint,\n@@ -58,6 +64,7 @@ pub struct InlayHint {\n // Optionally, one can enable additional hints for\n //\n // * return types of closure expressions with blocks\n+// * elided lifetimes\n //\n // **Note:** VS Code does not have native support for inlay hints https://github.com/microsoft/vscode/issues/16221[yet] and the hints are implemented using decorations.\n // This approach has limitations, the caret movement and bracket highlighting near the edges of the hint may be weird:\n@@ -132,24 +139,24 @@ fn lifetime_hints(\n     config: &InlayHintsConfig,\n     func: ast::Fn,\n ) -> Option<()> {\n-    if !config.lifetime_elision_hints {\n+    if config.lifetime_elision_hints == LifetimeElisionHints::Never {\n         return None;\n     }\n     let param_list = func.param_list()?;\n     let generic_param_list = func.generic_param_list();\n     let ret_type = func.ret_type();\n     let self_param = param_list.self_param().filter(|it| it.amp_token().is_some());\n \n-    let used_names: FxHashSet<SmolStr> = generic_param_list\n+    let mut used_names: FxHashMap<SmolStr, usize> = generic_param_list\n         .iter()\n-        .filter(|_| !config.param_names_for_lifetime_elision_hints)\n+        .filter(|_| config.param_names_for_lifetime_elision_hints)\n         .flat_map(|gpl| gpl.lifetime_params())\n         .filter_map(|param| param.lifetime())\n-        .map(|lt| SmolStr::from(lt.text().as_str()))\n+        .filter_map(|lt| Some((SmolStr::from(lt.text().as_str().get(1..)?), 0)))\n         .collect();\n \n     let mut allocated_lifetimes = vec![];\n-    let mut gen_name = {\n+    let mut gen_idx_name = {\n         let mut gen = (0u8..).map(|idx| match idx {\n             idx if idx < 10 => SmolStr::from_iter(['\\'', (idx + 48) as char]),\n             idx => format!(\"'{idx}\").into(),\n@@ -158,19 +165,27 @@ fn lifetime_hints(\n     };\n \n     let mut potential_lt_refs: Vec<_> = vec![];\n-    param_list.params().filter_map(|it| Some((it.pat(), it.ty()?))).for_each(|(pat, ty)| {\n-        // FIXME: check path types\n-        walk_ty(&ty, &mut |ty| match ty {\n-            ast::Type::RefType(r) => potential_lt_refs.push((\n-                pat.as_ref().and_then(|it| match it {\n-                    ast::Pat::IdentPat(p) => p.name(),\n-                    _ => None,\n-                }),\n-                r,\n-            )),\n-            _ => (),\n+    param_list\n+        .params()\n+        .filter_map(|it| {\n+            Some((\n+                config.param_names_for_lifetime_elision_hints.then(|| it.pat()).flatten(),\n+                it.ty()?,\n+            ))\n         })\n-    });\n+        .for_each(|(pat, ty)| {\n+            // FIXME: check path types\n+            walk_ty(&ty, &mut |ty| match ty {\n+                ast::Type::RefType(r) => potential_lt_refs.push((\n+                    pat.as_ref().and_then(|it| match it {\n+                        ast::Pat::IdentPat(p) => p.name(),\n+                        _ => None,\n+                    }),\n+                    r,\n+                )),\n+                _ => (),\n+            })\n+        });\n \n     enum LifetimeKind {\n         Elided,\n@@ -195,25 +210,28 @@ fn lifetime_hints(\n     if let Some(self_param) = &self_param {\n         if is_elided(self_param.lifetime()) {\n             allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {\n+                // self can't be used as a lifetime, so no need to check for collisions\n                 \"'self\".into()\n             } else {\n-                gen_name()\n+                gen_idx_name()\n             });\n         }\n     }\n     potential_lt_refs.iter().for_each(|(name, it)| {\n         if is_elided(it.lifetime()) {\n-            allocated_lifetimes.push(\n-                name.as_ref()\n-                    .filter(|it| {\n-                        config.param_names_for_lifetime_elision_hints\n-                            && !used_names.contains(it.text().as_str())\n-                    })\n-                    .map_or_else(\n-                        || gen_name(),\n-                        |it| SmolStr::from_iter([\"\\'\", it.text().as_str()]),\n-                    ),\n-            );\n+            let name = match name {\n+                Some(it) => {\n+                    if let Some(c) = used_names.get_mut(it.text().as_str()) {\n+                        *c += 1;\n+                        SmolStr::from(format!(\"'{text}{c}\", text = it.text().as_str()))\n+                    } else {\n+                        used_names.insert(it.text().as_str().into(), 0);\n+                        SmolStr::from_iter([\"\\'\", it.text().as_str()])\n+                    }\n+                }\n+                _ => gen_idx_name(),\n+            };\n+            allocated_lifetimes.push(name);\n         }\n     });\n \n@@ -236,8 +254,21 @@ fn lifetime_hints(\n         }\n     };\n \n-    // apply hints\n+    if allocated_lifetimes.is_empty() && output.is_none() {\n+        return None;\n+    }\n \n+    let skip_due_trivial_single = config.lifetime_elision_hints\n+        == LifetimeElisionHints::SkipTrivial\n+        && (allocated_lifetimes.len() == 1)\n+        && generic_param_list.as_ref().map_or(true, |it| it.lifetime_params().next().is_none());\n+\n+    if skip_due_trivial_single {\n+        cov_mark::hit!(lifetime_hints_single);\n+        return None;\n+    }\n+\n+    // apply hints\n     // apply output if required\n     match (&output, ret_type) {\n         (Some(output_lt), Some(r)) => {\n@@ -800,14 +831,14 @@ mod tests {\n     use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n \n-    use crate::{fixture, inlay_hints::InlayHintsConfig};\n+    use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n     const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         render_colons: false,\n         type_hints: false,\n         parameter_hints: false,\n         chaining_hints: false,\n-        lifetime_elision_hints: false,\n+        lifetime_elision_hints: LifetimeElisionHints::Never,\n         hide_named_constructor_hints: false,\n         closure_return_type_hints: false,\n         param_names_for_lifetime_elision_hints: false,\n@@ -818,7 +849,7 @@ mod tests {\n         parameter_hints: true,\n         chaining_hints: true,\n         closure_return_type_hints: true,\n-        lifetime_elision_hints: true,\n+        lifetime_elision_hints: LifetimeElisionHints::Always,\n         ..DISABLED_CONFIG\n     };\n \n@@ -2037,6 +2068,47 @@ impl () {\n     // ^^^<'0, '1>\n         // ^'0       ^'1     ^'0\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_lifetimes_named() {\n+        check_with_config(\n+            InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },\n+            r#\"\n+fn nested_in<'named>(named: &        &X<      &()>) {}\n+//          ^'named1, 'named2, 'named3, $\n+                          //^'named1 ^'named2 ^'named3\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_lifetimes_skingle_skip() {\n+        cov_mark::check!(lifetime_hints_single);\n+        check_with_config(\n+            InlayHintsConfig {\n+                lifetime_elision_hints: LifetimeElisionHints::SkipTrivial,\n+                ..TEST_CONFIG\n+            },\n+            r#\"\n+fn single(a: &()) -> &() {}\n+\n+fn double(a: &(), b: &()) {}\n+// ^^^^^^<'0, '1>\n+          // ^'0     ^'1\n+fn partial<'a>(a: &'a (), b: &()) {}\n+        //^'0, $             ^'0\n+fn partial2<'a>(a: &'a ()) -> &() {}\n+                            //^'a\n+\n+impl () {\n+    fn foo(&self) -> &() {}\n+    fn foo(&self, a: &()) -> &() {}\n+    // ^^^<'0, '1>\n+        // ^'0       ^'1     ^'0\n+}\n \"#,\n         );\n     }"}, {"sha": "ff20d98f1f960e523cc52e7b33ed902190c45562", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "patch": "@@ -81,7 +81,7 @@ pub use crate::{\n     folding_ranges::{Fold, FoldKind},\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n-    inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n+    inlay_hints::{InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints},\n     join_lines::JoinLinesConfig,\n     markup::Markup,\n     moniker::{MonikerKind, MonikerResult, PackageInformation},"}, {"sha": "3c81bfa3a92def85648eff16b42f7bf0d7e705ca", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "patch": "@@ -12,11 +12,14 @@ use ide_db::{\n use rustc_hash::FxHashSet;\n use syntax::{AstNode, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n-use crate::moniker::{crate_for_file, def_to_moniker, MonikerResult};\n use crate::{\n     hover::hover_for_definition, Analysis, Fold, HoverConfig, HoverDocFormat, HoverResult,\n     InlayHint, InlayHintsConfig, TryToNav,\n };\n+use crate::{\n+    moniker::{crate_for_file, def_to_moniker, MonikerResult},\n+    LifetimeElisionHints,\n+};\n \n /// A static representation of fully analyzed source code.\n ///\n@@ -110,7 +113,7 @@ impl StaticIndex<'_> {\n                     parameter_hints: true,\n                     chaining_hints: true,\n                     closure_return_type_hints: true,\n-                    lifetime_elision_hints: false,\n+                    lifetime_elision_hints: LifetimeElisionHints::Never,\n                     hide_named_constructor_hints: false,\n                     param_names_for_lifetime_elision_hints: false,\n                     max_length: Some(25),"}, {"sha": "b6f1da17eb142c3ef1b9be4c42c308db1fb973cd", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "patch": "@@ -12,7 +12,8 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, ExprFillDefaultMode, HighlightRelatedConfig,\n-    HoverConfig, HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n+    HoverConfig, HoverDocFormat, InlayHintsConfig, JoinLinesConfig, LifetimeElisionHints, Snippet,\n+    SnippetScope,\n };\n use ide_db::{\n     imports::insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -248,19 +249,19 @@ config_data! {\n         inlayHints_maxLength: Option<usize>                = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n-        inlayHints_parameterHints: bool                    = \"true\",\n+        inlayHints_parameterHints: bool                     = \"true\",\n         /// Whether to show inlay type hints for variables.\n-        inlayHints_typeHints: bool                         = \"true\",\n+        inlayHints_typeHints: bool                          = \"true\",\n         /// Whether to show inlay type hints for method chains.\n-        inlayHints_chainingHints: bool                     = \"true\",\n+        inlayHints_chainingHints: bool                      = \"true\",\n         /// Whether to show inlay type hints for return types of closures with blocks.\n-        inlayHints_closureReturnTypeHints: bool            = \"false\",\n+        inlayHints_closureReturnTypeHints: bool             = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n-        inlayHints_lifetimeElisionHints: bool              = \"false\",\n+        inlayHints_lifetimeElisionHints: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to show prefer using parameter names as the name for elided lifetime hints.\n-        inlayHints_paramNamesForLifetimeElisionHints: bool = \"false\",\n+        inlayHints_paramNamesForLifetimeElisionHints: bool  = \"false\",\n         /// Whether to hide inlay hints for constructors.\n-        inlayHints_hideNamedConstructorHints: bool         = \"false\",\n+        inlayHints_hideNamedConstructorHints: bool          = \"false\",\n \n         /// Join lines inserts else between consecutive ifs.\n         joinLines_joinElseIf: bool = \"true\",\n@@ -859,7 +860,11 @@ impl Config {\n             parameter_hints: self.data.inlayHints_parameterHints,\n             chaining_hints: self.data.inlayHints_chainingHints,\n             closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints,\n-            lifetime_elision_hints: self.data.inlayHints_lifetimeElisionHints,\n+            lifetime_elision_hints: match self.data.inlayHints_lifetimeElisionHints {\n+                LifetimeElisionDef::Always => LifetimeElisionHints::Always,\n+                LifetimeElisionDef::Never => LifetimeElisionHints::Never,\n+                LifetimeElisionDef::SkipTrivial => LifetimeElisionHints::SkipTrivial,\n+            },\n             hide_named_constructor_hints: self.data.inlayHints_hideNamedConstructorHints,\n             param_names_for_lifetime_elision_hints: self\n                 .data\n@@ -1133,6 +1138,16 @@ enum ImportGranularityDef {\n     Module,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum LifetimeElisionDef {\n+    #[serde(alias = \"true\")]\n+    Always,\n+    #[serde(alias = \"false\")]\n+    Never,\n+    SkipTrivial,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum ImportPrefixDef {\n@@ -1385,7 +1400,16 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"minimum\": 0,\n             \"maximum\": 255\n         },\n-        _ => panic!(\"{}: {}\", ty, default),\n+        \"LifetimeElisionDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"always\", \"never\", \"skip_trivial\"],\n+            \"enumDescriptions\": [\n+                \"Always show lifetime elision hints.\",\n+                \"Never show lifetime elision hints.\",\n+                \"Always show lifetime elision hints but skip them for trivial single input to output mapping.\"\n+            ],\n+        },\n+        _ => panic!(\"missing entry for {}: {}\", ty, default),\n     }\n \n     map.into()"}, {"sha": "56410310679d449531a1f2f1665f0bcd422ff143", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "patch": "@@ -378,6 +378,16 @@ Whether to show inlay type hints for method chains.\n --\n Whether to show inlay type hints for return types of closures with blocks.\n --\n+[[rust-analyzer.inlayHints.lifetimeElisionHints]]rust-analyzer.inlayHints.lifetimeElisionHints (default: `\"never\"`)::\n++\n+--\n+Whether to show inlay type hints for elided lifetimes in function signatures.\n+--\n+[[rust-analyzer.inlayHints.paramNamesForLifetimeElisionHints]]rust-analyzer.inlayHints.paramNamesForLifetimeElisionHints (default: `false`)::\n++\n+--\n+Whether to show prefer using parameter names as the name for elided lifetime hints.\n+--\n [[rust-analyzer.inlayHints.hideNamedConstructorHints]]rust-analyzer.inlayHints.hideNamedConstructorHints (default: `false`)::\n +\n --"}, {"sha": "06c6bcab9e34ba5a020ff126754ca1425ae0c25d", "filename": "editors/code/package.json", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "patch": "@@ -800,6 +800,26 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.lifetimeElisionHints\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n+                    \"default\": \"never\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"always\",\n+                        \"never\",\n+                        \"skip_trivial\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show lifetime elision hints.\",\n+                        \"Never show lifetime elision hints.\",\n+                        \"Always show lifetime elision hints but skip them for trivial single input to output mapping.\"\n+                    ]\n+                },\n+                \"rust-analyzer.inlayHints.paramNamesForLifetimeElisionHints\": {\n+                    \"markdownDescription\": \"Whether to show prefer using parameter names as the name for elided lifetime hints.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.hideNamedConstructorHints\": {\n                     \"markdownDescription\": \"Whether to hide inlay hints for constructors.\",\n                     \"default\": false,"}]}