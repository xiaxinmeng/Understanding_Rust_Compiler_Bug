{"sha": "f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Yjc1MzVmZDdjYzRkZjNjMTM3YzVjZTA1YmNkOTgxN2U4ZTAwNmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T07:11:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T19:52:11Z"}, "message": "rustbuild: Fixup calling rustdoc in various stages\n\nThe stage0 rustdoc comes from the snapshot, and we need a shim like with `rustc`\nto pass `--cfg` for now.", "tree": {"sha": "ef2be61e27138c1c0ada43a14790ae5c2e140720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2be61e27138c1c0ada43a14790ae5c2e140720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "html_url": "https://github.com/rust-lang/rust/commit/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0788cd23ea6e3f1b05240d591870899b9d38f5f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0788cd23ea6e3f1b05240d591870899b9d38f5f4", "html_url": "https://github.com/rust-lang/rust/commit/0788cd23ea6e3f1b05240d591870899b9d38f5f4"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "0d334219b4fe924db73224b89768444f8a4a17ba", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "patch": "@@ -15,6 +15,10 @@ path = \"main.rs\"\n name = \"rustc\"\n path = \"rustc.rs\"\n \n+[[bin]]\n+name = \"rustdoc\"\n+path = \"rustdoc.rs\"\n+\n [dependencies]\n build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.10\""}, {"sha": "c4d6e66b878555898386f386339a14d88513dbcb", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "patch": "@@ -325,4 +325,3 @@ pub fn tool(build: &Build, stage: u32, host: &str, tool: &str) {\n          .arg(build.src.join(format!(\"src/tools/{}/Cargo.toml\", tool)));\n     build.run(&mut cargo);\n }\n-"}, {"sha": "917860962c9e62683c3f7a565182da42c835aed9", "filename": "src/bootstrap/build/doc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::path::Path;\n use std::fs::{self, File};\n use std::io::prelude::*;\n+use std::path::Path;\n+use std::process::Command;\n \n use build::{Build, Compiler, Mode};\n use build::util::{up_to_date, cp_r};\n@@ -69,7 +70,7 @@ pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n         }\n \n         let html = out.join(filename).with_extension(\"html\");\n-        let rustdoc = build.tool(&compiler, \"rustdoc\");\n+        let rustdoc = build.rustdoc(&compiler);\n         if up_to_date(&path, &html) &&\n            up_to_date(&footer, &html) &&\n            up_to_date(&favicon, &html) &&\n@@ -79,7 +80,7 @@ pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n             continue\n         }\n \n-        let mut cmd = build.tool_cmd(&compiler, \"rustdoc\");\n+        let mut cmd = Command::new(&rustdoc);\n         cmd.arg(\"--html-after-content\").arg(&footer)\n            .arg(\"--html-before-content\").arg(&version_info)\n            .arg(\"--html-in-header\").arg(&favicon)\n@@ -108,10 +109,9 @@ pub fn std(build: &Build, stage: u32, host: &str, out: &Path) {\n     let compiler = Compiler::new(stage, host);\n     let out_dir = build.stage_out(stage, host, Mode::Libstd)\n                        .join(host).join(\"doc\");\n-    let rustdoc = build.tool(&compiler, \"rustdoc\");\n-    if !up_to_date(&rustdoc, &out_dir.join(\"std/index.html\")) {\n-        t!(fs::remove_dir_all(&out_dir));\n-    }\n+    let rustdoc = build.rustdoc(&compiler);\n+\n+    build.clear_if_dirty(&out_dir, &rustdoc);\n \n     let mut cargo = build.cargo(stage, &compiler, Mode::Libstd, Some(host),\n                                 \"doc\");\n@@ -127,7 +127,7 @@ pub fn rustc(build: &Build, stage: u32, host: &str, out: &Path) {\n     let compiler = Compiler::new(stage, host);\n     let out_dir = build.stage_out(stage, host, Mode::Librustc)\n                        .join(host).join(\"doc\");\n-    let rustdoc = build.tool(&compiler, \"rustdoc\");\n+    let rustdoc = build.rustdoc(&compiler);\n     if !up_to_date(&rustdoc, &out_dir.join(\"rustc/index.html\")) {\n         t!(fs::remove_dir_all(&out_dir));\n     }"}, {"sha": "825cca6563cef0b332c896b88390c744c688bb02", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "patch": "@@ -275,7 +275,8 @@ impl Build {\n              .env(\"RUSTC_SYSROOT\", self.sysroot(stage, host))\n              .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir())\n              .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n-             .env(\"RUSTDOC\", self.tool(compiler, \"rustdoc\"));\n+             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n+             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler));\n \n         if let Some(target) = target {\n              cargo.env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n@@ -317,13 +318,26 @@ impl Build {\n         }\n     }\n \n-    /// Get the specified tool next to the specified compiler\n+    /// Get the specified tool built by the specified compiler\n     fn tool(&self, compiler: &Compiler, tool: &str) -> PathBuf {\n         self.stage_out(compiler.stage, compiler.host, Mode::Tool)\n             .join(self.cargo_dir())\n             .join(exe(tool, compiler.host))\n     }\n \n+    /// Get the `rustdoc` executable next to the specified compiler\n+    fn rustdoc(&self, compiler: &Compiler) -> PathBuf {\n+        let root = if compiler.is_snapshot(self) {\n+            let mut rustdoc = self.rustc.clone();\n+            rustdoc.pop();\n+            rustdoc\n+        } else {\n+            let (stage, host) = (compiler.stage, compiler.host);\n+            self.cargo_out(stage - 1, host, Mode::Librustc, host)\n+        };\n+        root.join(exe(\"rustdoc\", compiler.host))\n+    }\n+\n     /// Get a `Command` which is ready to run `tool` in `stage` built for\n     /// `host`.\n     #[allow(dead_code)] // this will be used soon"}, {"sha": "d403d76bb1400469a289b3e8bcba592c4238f9b0", "filename": "src/bootstrap/rustc.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frustc.rs?ref=f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "patch": "@@ -8,6 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Shim which is passed to Cargo as \"rustc\" when running the bootstrap.\n+//!\n+//! This shim will take care of some various tasks that our build process\n+//! requires that Cargo can't quite do through normal configuration:\n+//!\n+//! 1. When compiling build scripts and build dependencies, we need a guaranteed\n+//!    full standard library available. The only compiler which actually has\n+//!    this is the snapshot, so we detect this situation and always compile with\n+//!    the snapshot compiler.\n+//! 2. We pass a bunch of `--cfg` and other flags based on what we're compiling\n+//!    (and this slightly differs based on a whether we're using a snapshot or\n+//!    not), so we do that all here.\n+//!\n+//! This may one day be replaced by RUSTFLAGS, but the dynamic nature of\n+//! switching compilers for the bootstrap and for build scripts will probably\n+//! never get replaced.\n+\n extern crate bootstrap;\n \n use std::env;"}, {"sha": "8c618196113baf7cc255e098f4c257ff191aaf77", "filename": "src/bootstrap/rustdoc.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c/src%2Fbootstrap%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frustdoc.rs?ref=f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Shim which is passed to Cargo as \"rustdoc\" when running the bootstrap.\n+//!\n+//! See comments in `src/bootstrap/rustc.rs` for more information.\n+\n+use std::env;\n+use std::process::Command;\n+\n+fn main() {\n+    let args = env::args_os().skip(1).collect::<Vec<_>>();\n+    let rustdoc = env::var_os(\"RUSTDOC_REAL\").unwrap();\n+\n+    let mut cmd = Command::new(rustdoc);\n+    cmd.args(&args)\n+       .arg(\"--cfg\").arg(format!(\"stage{}\", env::var(\"RUSTC_STAGE\").unwrap()))\n+       .arg(\"--cfg\").arg(\"dox\");\n+    std::process::exit(match cmd.status() {\n+        Ok(s) => s.code().unwrap_or(1),\n+        Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),\n+    })\n+}\n+"}]}