{"sha": "9b95d511316ae7124046de61d19335fdfaa021cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTVkNTExMzE2YWU3MTI0MDQ2ZGU2MWQxOTMzNWZkZmFhMDIxY2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-28T23:24:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-28T23:26:55Z"}, "message": "core: Remove old template files", "tree": {"sha": "9f071bd66ea256bca7bddc1f01a2ef679c862814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f071bd66ea256bca7bddc1f01a2ef679c862814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b95d511316ae7124046de61d19335fdfaa021cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b95d511316ae7124046de61d19335fdfaa021cc", "html_url": "https://github.com/rust-lang/rust/commit/9b95d511316ae7124046de61d19335fdfaa021cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b95d511316ae7124046de61d19335fdfaa021cc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f72df7041602dd286c1c00b2b745d21bf10e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f72df7041602dd286c1c00b2b745d21bf10e9b", "html_url": "https://github.com/rust-lang/rust/commit/16f72df7041602dd286c1c00b2b745d21bf10e9b"}], "stats": {"total": 894, "additions": 306, "deletions": 588}, "files": [{"sha": "4c5a56cc6ffe6b0d14142a73e3cf91c67ff9aeb4", "filename": "src/libcore/core.rc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -46,52 +46,52 @@ Implicitly, all crates behave as if they included the following prologue:\n \n /// Operations and constants for `int`\n #[path = \"int-template.rs\"]\n-#[merge = \"int-template/intb.rs\"]\n+#[merge = \"int-template/int.rs\"]\n pub mod int;\n \n /// Operations and constants for `i8`\n #[path = \"int-template.rs\"]\n-#[merge = \"int-template/i8b.rs\"]\n+#[merge = \"int-template/i8.rs\"]\n pub mod i8;\n \n /// Operations and constants for `i16`\n #[path = \"int-template.rs\"]\n-#[merge = \"int-template/i16b.rs\"]\n+#[merge = \"int-template/i16.rs\"]\n pub mod i16;\n \n /// Operations and constants for `i32`\n #[path = \"int-template.rs\"]\n-#[merge = \"int-template/i32b.rs\"]\n+#[merge = \"int-template/i32.rs\"]\n pub mod i32;\n \n /// Operations and constants for `i64`\n #[path = \"int-template.rs\"]\n-#[merge = \"int-template/i64b.rs\"]\n+#[merge = \"int-template/i64.rs\"]\n pub mod i64;\n \n /// Operations and constants for `uint`\n #[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/uintb.rs\"]\n+#[merge = \"uint-template/uint.rs\"]\n pub mod uint;\n \n /// Operations and constants for `u8`\n #[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u8b.rs\"]\n+#[merge = \"uint-template/u8.rs\"]\n pub mod u8;\n \n /// Operations and constants for `u16`\n #[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u16b.rs\"]\n+#[merge = \"uint-template/u16.rs\"]\n pub mod u16;\n \n /// Operations and constants for `u32`\n #[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u32b.rs\"]\n+#[merge = \"uint-template/u32.rs\"]\n pub mod u32;\n \n /// Operations and constants for `u64`\n #[path = \"uint-template.rs\"]\n-#[merge = \"uint-template/u64b.rs\"]\n+#[merge = \"uint-template/u64.rs\"]\n pub mod u64;\n \n \n@@ -121,7 +121,7 @@ pub mod iter;\n pub mod logging;\n pub mod option;\n #[path=\"iter-trait.rs\"]\n-#[merge = \"iter-trait/optionb.rs\"]\n+#[merge = \"iter-trait/option.rs\"]\n pub mod option_iter;\n pub mod result;\n pub mod to_str;\n@@ -134,11 +134,11 @@ pub mod clone;\n \n pub mod dvec;\n #[path=\"iter-trait.rs\"]\n-#[merge = \"iter-trait/dvecb.rs\"]\n+#[merge = \"iter-trait/dvec.rs\"]\n pub mod dvec_iter;\n pub mod dlist;\n #[path=\"iter-trait.rs\"]\n-#[merge = \"iter-trait/dlistb.rs\"]\n+#[merge = \"iter-trait/dlist.rs\"]\n pub mod dlist_iter;\n pub mod send_map;\n "}, {"sha": "b24eb86e4ae169f9bd47d205c9afb71d64a28387", "filename": "src/libcore/int-template/i16.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi16.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,2 +1,4 @@\n-pub type T = i16;\n-pub const bits: uint = u16::bits;\n\\ No newline at end of file\n+mod inst {\n+    pub type T = i16;\n+    pub const bits: uint = u16::bits;\n+}\n\\ No newline at end of file"}, {"sha": "b24eb86e4ae169f9bd47d205c9afb71d64a28387", "filename": "src/libcore/int-template/i16b.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi16b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi16b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi16b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,4 +0,0 @@\n-mod inst {\n-    pub type T = i16;\n-    pub const bits: uint = u16::bits;\n-}\n\\ No newline at end of file"}, {"sha": "5bfb8a6d01cca54566c891a326bb6df316953dd4", "filename": "src/libcore/int-template/i32.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi32.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,2 +1,4 @@\n-pub type T = i32;\n-pub const bits: uint = u32::bits;\n+mod inst {\n+    pub type T = i32;\n+    pub const bits: uint = u32::bits;\n+}"}, {"sha": "5bfb8a6d01cca54566c891a326bb6df316953dd4", "filename": "src/libcore/int-template/i32b.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi32b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi32b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi32b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,4 +0,0 @@\n-mod inst {\n-    pub type T = i32;\n-    pub const bits: uint = u32::bits;\n-}"}, {"sha": "86552b2ccedc62719d5eb112dd69d22043f83c7f", "filename": "src/libcore/int-template/i64.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi64.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,2 +1,4 @@\n-pub type T = i64;\n-pub const bits: uint = u64::bits;\n\\ No newline at end of file\n+mod inst {\n+    pub type T = i64;\n+    pub const bits: uint = u64::bits;\n+}\n\\ No newline at end of file"}, {"sha": "86552b2ccedc62719d5eb112dd69d22043f83c7f", "filename": "src/libcore/int-template/i64b.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi64b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi64b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi64b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,4 +0,0 @@\n-mod inst {\n-    pub type T = i64;\n-    pub const bits: uint = u64::bits;\n-}\n\\ No newline at end of file"}, {"sha": "2cf7ed2983fba36ff558c8bcb35e16ca31725e53", "filename": "src/libcore/int-template/i8.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi8.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,2 +1,4 @@\n-pub type T = i8;\n-pub const bits: uint = u8::bits;\n\\ No newline at end of file\n+mod inst {\n+    pub type T = i8;\n+    pub const bits: uint = u8::bits;\n+}\n\\ No newline at end of file"}, {"sha": "2cf7ed2983fba36ff558c8bcb35e16ca31725e53", "filename": "src/libcore/int-template/i8b.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi8b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fi8b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi8b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,4 +0,0 @@\n-mod inst {\n-    pub type T = i8;\n-    pub const bits: uint = u8::bits;\n-}\n\\ No newline at end of file"}, {"sha": "c1f2ca944dd636505d7ecacca07fe5e4ba99c38f", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,38 +1,45 @@\n-pub type T = int;\n-pub const bits: uint = uint::bits;\n+pub use inst::pow;\n \n-/// Returns `base` raised to the power of `exponent`\n-pub fn pow(base: int, exponent: uint) -> int {\n-    if exponent == 0u { return 1; } //Not mathemtically true if ~[base == 0]\n-    if base     == 0  { return 0; }\n-    let mut my_pow  = exponent;\n-    let mut acc     = 1;\n-    let mut multiplier = base;\n-    while(my_pow > 0u) {\n-      if my_pow % 2u == 1u {\n-         acc *= multiplier;\n-      }\n-      my_pow     /= 2u;\n-      multiplier *= multiplier;\n+mod inst {\n+    pub type T = int;\n+    pub const bits: uint = uint::bits;\n+\n+    /// Returns `base` raised to the power of `exponent`\n+    pub fn pow(base: int, exponent: uint) -> int {\n+        if exponent == 0u {\n+            //Not mathemtically true if ~[base == 0]\n+            return 1;\n+        }\n+        if base     == 0  { return 0; }\n+        let mut my_pow  = exponent;\n+        let mut acc     = 1;\n+        let mut multiplier = base;\n+        while(my_pow > 0u) {\n+            if my_pow % 2u == 1u {\n+                acc *= multiplier;\n+            }\n+            my_pow     /= 2u;\n+            multiplier *= multiplier;\n+        }\n+        return acc;\n     }\n-    return acc;\n-}\n \n-#[test]\n-fn test_pow() {\n-    assert (pow(0, 0u) == 1);\n-    assert (pow(0, 1u) == 0);\n-    assert (pow(0, 2u) == 0);\n-    assert (pow(-1, 0u) == 1);\n-    assert (pow(1, 0u) == 1);\n-    assert (pow(-3, 2u) == 9);\n-    assert (pow(-3, 3u) == -27);\n-    assert (pow(4, 9u) == 262144);\n-}\n+    #[test]\n+    fn test_pow() {\n+        assert (pow(0, 0u) == 1);\n+        assert (pow(0, 1u) == 0);\n+        assert (pow(0, 2u) == 0);\n+        assert (pow(-1, 0u) == 1);\n+        assert (pow(1, 0u) == 1);\n+        assert (pow(-3, 2u) == 9);\n+        assert (pow(-3, 3u) == -27);\n+        assert (pow(4, 9u) == 262144);\n+    }\n \n-#[test]\n-fn test_overflows() {\n-   assert (max_value > 0);\n-   assert (min_value <= 0);\n-   assert (min_value + max_value + 1 == 0);\n-}\n+    #[test]\n+    fn test_overflows() {\n+        assert (max_value > 0);\n+        assert (min_value <= 0);\n+        assert (min_value + max_value + 1 == 0);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "c1f2ca944dd636505d7ecacca07fe5e4ba99c38f", "filename": "src/libcore/int-template/intb.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fintb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fint-template%2Fintb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fintb.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,45 +0,0 @@\n-pub use inst::pow;\n-\n-mod inst {\n-    pub type T = int;\n-    pub const bits: uint = uint::bits;\n-\n-    /// Returns `base` raised to the power of `exponent`\n-    pub fn pow(base: int, exponent: uint) -> int {\n-        if exponent == 0u {\n-            //Not mathemtically true if ~[base == 0]\n-            return 1;\n-        }\n-        if base     == 0  { return 0; }\n-        let mut my_pow  = exponent;\n-        let mut acc     = 1;\n-        let mut multiplier = base;\n-        while(my_pow > 0u) {\n-            if my_pow % 2u == 1u {\n-                acc *= multiplier;\n-            }\n-            my_pow     /= 2u;\n-            multiplier *= multiplier;\n-        }\n-        return acc;\n-    }\n-\n-    #[test]\n-    fn test_pow() {\n-        assert (pow(0, 0u) == 1);\n-        assert (pow(0, 1u) == 0);\n-        assert (pow(0, 2u) == 0);\n-        assert (pow(-1, 0u) == 1);\n-        assert (pow(1, 0u) == 1);\n-        assert (pow(-3, 2u) == 9);\n-        assert (pow(-3, 3u) == -27);\n-        assert (pow(4, 9u) == 262144);\n-    }\n-\n-    #[test]\n-    fn test_overflows() {\n-        assert (max_value > 0);\n-        assert (min_value <= 0);\n-        assert (min_value + max_value + 1 == 0);\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "2d782b1262b9228fc80175012fd0aeed84e76deb", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,34 +1,38 @@\n-#[allow(non_camel_case_types)]\n-pub type IMPL_T<A> = dlist::DList<A>;\n+mod inst {\n+    #[allow(non_camel_case_types)]\n+    pub type IMPL_T<A> = dlist::DList<A>;\n \n-/**\n- * Iterates through the current contents.\n- *\n- * Attempts to access this dlist during iteration are allowed (to allow for\n- * e.g. breadth-first search with in-place enqueues), but removing the current\n- * node is forbidden.\n- */\n-pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n-    let mut link = self.peek_n();\n-    while option::is_some(&link) {\n-        let nobe = option::get(link);\n-        assert nobe.linked;\n-        if !f(&nobe.data) { break; }\n-        // Check (weakly) that the user didn't do a remove.\n-        if self.size == 0 {\n-            fail ~\"The dlist became empty during iteration??\"\n+    /**\n+    * Iterates through the current contents.\n+    *\n+    * Attempts to access this dlist during iteration are allowed (to\n+    * allow for e.g. breadth-first search with in-place enqueues), but\n+    * removing the current node is forbidden.\n+    */\n+    pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n+        let mut link = self.peek_n();\n+        while option::is_some(&link) {\n+            let nobe = option::get(link);\n+            assert nobe.linked;\n+            if !f(&nobe.data) { break; }\n+            // Check (weakly) that the user didn't do a remove.\n+            if self.size == 0 {\n+                fail ~\"The dlist became empty during iteration??\"\n+            }\n+            if !nobe.linked ||\n+                (!((nobe.prev.is_some()\n+                    || box::ptr_eq(*self.hd.expect(~\"headless dlist?\"),\n+                                   *nobe))\n+                   && (nobe.next.is_some()\n+                    || box::ptr_eq(*self.tl.expect(~\"tailless dlist?\"),\n+                                   *nobe)))) {\n+                fail ~\"Removing a dlist node during iteration is forbidden!\"\n+            }\n+            link = nobe.next_link();\n         }\n-        if !nobe.linked ||\n-           (!((nobe.prev.is_some()\n-               || box::ptr_eq(*self.hd.expect(~\"headless dlist?\"), *nobe)) &&\n-              (nobe.next.is_some()\n-               || box::ptr_eq(*self.tl.expect(~\"tailless dlist?\"), *nobe)))) {\n-            fail ~\"Removing a dlist node during iteration is forbidden!\"\n-        }\n-        link = nobe.next_link();\n     }\n-}\n \n-pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n-    Some(self.len())\n-}\n+    pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n+        Some(self.len())\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "2d782b1262b9228fc80175012fd0aeed84e76deb", "filename": "src/libcore/iter-trait/dlistb.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fiter-trait%2Fdlistb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fiter-trait%2Fdlistb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlistb.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,38 +0,0 @@\n-mod inst {\n-    #[allow(non_camel_case_types)]\n-    pub type IMPL_T<A> = dlist::DList<A>;\n-\n-    /**\n-    * Iterates through the current contents.\n-    *\n-    * Attempts to access this dlist during iteration are allowed (to\n-    * allow for e.g. breadth-first search with in-place enqueues), but\n-    * removing the current node is forbidden.\n-    */\n-    pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n-        let mut link = self.peek_n();\n-        while option::is_some(&link) {\n-            let nobe = option::get(link);\n-            assert nobe.linked;\n-            if !f(&nobe.data) { break; }\n-            // Check (weakly) that the user didn't do a remove.\n-            if self.size == 0 {\n-                fail ~\"The dlist became empty during iteration??\"\n-            }\n-            if !nobe.linked ||\n-                (!((nobe.prev.is_some()\n-                    || box::ptr_eq(*self.hd.expect(~\"headless dlist?\"),\n-                                   *nobe))\n-                   && (nobe.next.is_some()\n-                    || box::ptr_eq(*self.tl.expect(~\"tailless dlist?\"),\n-                                   *nobe)))) {\n-                fail ~\"Removing a dlist node during iteration is forbidden!\"\n-            }\n-            link = nobe.next_link();\n-        }\n-    }\n-\n-    pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n-        Some(self.len())\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "b30c1372a2e2b0de3116c2477ae9ab198cb5a36a", "filename": "src/libcore/iter-trait/dvec.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdvec.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,20 +1,22 @@\n-#[allow(non_camel_case_types)]\n-pub type IMPL_T<A> = dvec::DVec<A>;\n+mod inst {\n+    #[allow(non_camel_case_types)]\n+    pub type IMPL_T<A> = dvec::DVec<A>;\n \n-/**\n- * Iterates through the current contents.\n- *\n- * Attempts to access this dvec during iteration will fail.\n- */\n-pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n-    unsafe {\n-        do self.swap |v| {\n-            v.each(f);\n-            move v\n+    /**\n+    * Iterates through the current contents.\n+    *\n+    * Attempts to access this dvec during iteration will fail.\n+    */\n+    pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n+        unsafe {\n+            do self.swap |v| {\n+                v.each(f);\n+                move v\n+            }\n         }\n     }\n-}\n \n-pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n-    Some(self.len())\n-}\n+    pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n+        Some(self.len())\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "b30c1372a2e2b0de3116c2477ae9ab198cb5a36a", "filename": "src/libcore/iter-trait/dvecb.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fiter-trait%2Fdvecb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fiter-trait%2Fdvecb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdvecb.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,22 +0,0 @@\n-mod inst {\n-    #[allow(non_camel_case_types)]\n-    pub type IMPL_T<A> = dvec::DVec<A>;\n-\n-    /**\n-    * Iterates through the current contents.\n-    *\n-    * Attempts to access this dvec during iteration will fail.\n-    */\n-    pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n-        unsafe {\n-            do self.swap |v| {\n-                v.each(f);\n-                move v\n-            }\n-        }\n-    }\n-\n-    pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n-        Some(self.len())\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "680893eb95b3ab0976cbd43a99267221fab635c2", "filename": "src/libcore/iter-trait/option.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fiter-trait%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fiter-trait%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Foption.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,16 +1,18 @@\n-#[allow(non_camel_case_types)]\n-pub type IMPL_T<A> = Option<A>;\n+mod inst {\n+    #[allow(non_camel_case_types)]\n+    pub type IMPL_T<A> = Option<A>;\n \n-pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n-    match *self {\n-      None => (),\n-      Some(ref a) => { f(a); }\n+    pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n+        match *self {\n+            None => (),\n+            Some(ref a) => { f(a); }\n+        }\n     }\n-}\n \n-pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n-    match *self {\n-      None => Some(0),\n-      Some(_) => Some(1)\n+    pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n+        match *self {\n+            None => Some(0),\n+            Some(_) => Some(1)\n+        }\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "680893eb95b3ab0976cbd43a99267221fab635c2", "filename": "src/libcore/iter-trait/optionb.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fiter-trait%2Foptionb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fiter-trait%2Foptionb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Foptionb.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,18 +0,0 @@\n-mod inst {\n-    #[allow(non_camel_case_types)]\n-    pub type IMPL_T<A> = Option<A>;\n-\n-    pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n-        match *self {\n-            None => (),\n-            Some(ref a) => { f(a); }\n-        }\n-    }\n-\n-    pub pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n-        match *self {\n-            None => Some(0),\n-            Some(_) => Some(1)\n-        }\n-    }\n-}\n\\ No newline at end of file"}, {"sha": "aafd46f845b0a513274c4620b117d8d8f27899f5", "filename": "src/libcore/uint-template/u16.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu16.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,2 +1,4 @@\n-pub type T = u16;\n-pub const bits: uint = 16;\n+mod inst {\n+    pub type T = u16;\n+    pub const bits: uint = 16;\n+}"}, {"sha": "aafd46f845b0a513274c4620b117d8d8f27899f5", "filename": "src/libcore/uint-template/u16b.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu16b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu16b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu16b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,4 +0,0 @@\n-mod inst {\n-    pub type T = u16;\n-    pub const bits: uint = 16;\n-}"}, {"sha": "8e784bdf22592c5122b99d338e7edffa6772fdf5", "filename": "src/libcore/uint-template/u32.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu32.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,2 +1,4 @@\n-pub type T = u32;\n-pub const bits: uint = 32;\n\\ No newline at end of file\n+mod inst {\n+    pub type T = u32;\n+    pub const bits: uint = 32;\n+}\n\\ No newline at end of file"}, {"sha": "8e784bdf22592c5122b99d338e7edffa6772fdf5", "filename": "src/libcore/uint-template/u32b.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu32b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu32b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu32b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,4 +0,0 @@\n-mod inst {\n-    pub type T = u32;\n-    pub const bits: uint = 32;\n-}\n\\ No newline at end of file"}, {"sha": "43a8169f08b45e347e74d2babf3a9bf231b47669", "filename": "src/libcore/uint-template/u64.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu64.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,2 +1,4 @@\n-pub type T = u64;\n-pub const bits: uint = 64;\n\\ No newline at end of file\n+mod inst {\n+    pub type T = u64;\n+    pub const bits: uint = 64;\n+}\n\\ No newline at end of file"}, {"sha": "43a8169f08b45e347e74d2babf3a9bf231b47669", "filename": "src/libcore/uint-template/u64b.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu64b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu64b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu64b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,4 +0,0 @@\n-mod inst {\n-    pub type T = u64;\n-    pub const bits: uint = 64;\n-}\n\\ No newline at end of file"}, {"sha": "a3e750861e57347c18013dc2fe1162ac9191cf4a", "filename": "src/libcore/uint-template/u8.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu8.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,7 +1,11 @@\n-pub type T = u8;\n-pub const bits: uint = 8;\n+pub use inst::is_ascii;\n \n-// Type-specific functions here. These must be reexported by the\n-// parent module so that they appear in core::u8 and not core::u8::u8;\n+mod inst {\n+    pub type T = u8;\n+    pub const bits: uint = 8;\n \n-pub pure fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }\n+    // Type-specific functions here. These must be reexported by the\n+    // parent module so that they appear in core::u8 and not core::u8::u8;\n+\n+    pub pure fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }\n+}"}, {"sha": "a3e750861e57347c18013dc2fe1162ac9191cf4a", "filename": "src/libcore/uint-template/u8b.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu8b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fu8b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu8b.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,11 +0,0 @@\n-pub use inst::is_ascii;\n-\n-mod inst {\n-    pub type T = u8;\n-    pub const bits: uint = 8;\n-\n-    // Type-specific functions here. These must be reexported by the\n-    // parent module so that they appear in core::u8 and not core::u8::u8;\n-\n-    pub pure fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }\n-}"}, {"sha": "68054d47e1f988da7add538761a4420742e20a99", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 149, "deletions": 142, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b95d511316ae7124046de61d19335fdfaa021cc/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=9b95d511316ae7124046de61d19335fdfaa021cc", "patch": "@@ -1,153 +1,160 @@\n-pub type T = uint;\n+pub use inst::{\n+    div_ceil, div_round, div_floor, iterate,\n+    next_power_of_two\n+};\n \n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n-pub const bits: uint = 32;\n+mod inst {\n+    pub type T = uint;\n \n-#[cfg(target_arch = \"x86_64\")]\n-pub const bits: uint = 64;\n+    #[cfg(target_arch = \"x86\")]\n+    #[cfg(target_arch = \"arm\")]\n+    pub const bits: uint = 32;\n \n-/**\n- * Divide two numbers, return the result, rounded up.\n- *\n- * # Arguments\n- *\n- * * x - an integer\n- * * y - an integer distinct from 0u\n- *\n- * # Return value\n- *\n- * The smallest integer `q` such that `x/y <= q`.\n- */\n-pub pure fn div_ceil(x: uint, y: uint) -> uint {\n-    let div = x / y;\n-    if x % y == 0u { div }\n-    else { div + 1u }\n-}\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub const bits: uint = 64;\n \n-/**\n- * Divide two numbers, return the result, rounded to the closest integer.\n- *\n- * # Arguments\n- *\n- * * x - an integer\n- * * y - an integer distinct from 0u\n- *\n- * # Return value\n- *\n- * The integer `q` closest to `x/y`.\n- */\n-pub pure fn div_round(x: uint, y: uint) -> uint {\n-    let div = x / y;\n-    if x % y * 2u  < y { div }\n-    else { div + 1u }\n-}\n+    /**\n+    * Divide two numbers, return the result, rounded up.\n+    *\n+    * # Arguments\n+    *\n+    * * x - an integer\n+    * * y - an integer distinct from 0u\n+    *\n+    * # Return value\n+    *\n+    * The smallest integer `q` such that `x/y <= q`.\n+    */\n+    pub pure fn div_ceil(x: uint, y: uint) -> uint {\n+        let div = x / y;\n+        if x % y == 0u { div }\n+        else { div + 1u }\n+    }\n+\n+    /**\n+    * Divide two numbers, return the result, rounded to the closest integer.\n+    *\n+    * # Arguments\n+    *\n+    * * x - an integer\n+    * * y - an integer distinct from 0u\n+    *\n+    * # Return value\n+    *\n+    * The integer `q` closest to `x/y`.\n+    */\n+    pub pure fn div_round(x: uint, y: uint) -> uint {\n+        let div = x / y;\n+        if x % y * 2u  < y { div }\n+        else { div + 1u }\n+    }\n \n-/**\n- * Divide two numbers, return the result, rounded down.\n- *\n- * Note: This is the same function as `div`.\n- *\n- * # Arguments\n- *\n- * * x - an integer\n- * * y - an integer distinct from 0u\n- *\n- * # Return value\n- *\n- * The smallest integer `q` such that `x/y <= q`. This\n- * is either `x/y` or `x/y + 1`.\n- */\n-pub pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n+    /**\n+    * Divide two numbers, return the result, rounded down.\n+    *\n+    * Note: This is the same function as `div`.\n+    *\n+    * # Arguments\n+    *\n+    * * x - an integer\n+    * * y - an integer distinct from 0u\n+    *\n+    * # Return value\n+    *\n+    * The smallest integer `q` such that `x/y <= q`. This\n+    * is either `x/y` or `x/y + 1`.\n+    */\n+    pub pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n-/**\n- * Iterate over the range [`lo`..`hi`), or stop when requested\n- *\n- * # Arguments\n- *\n- * * lo - The integer at which to start the loop (included)\n- * * hi - The integer at which to stop the loop (excluded)\n- * * it - A block to execute with each consecutive integer of the range.\n- *        Return `true` to continue, `false` to stop.\n- *\n- * # Return value\n- *\n- * `true` If execution proceeded correctly, `false` if it was interrupted,\n- * that is if `it` returned `false` at any point.\n- */\n-pub pure fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n-    let mut i = lo;\n-    while i < hi {\n-        if (!it(i)) { return false; }\n-        i += 1u;\n+    /**\n+    * Iterate over the range [`lo`..`hi`), or stop when requested\n+    *\n+    * # Arguments\n+    *\n+    * * lo - The integer at which to start the loop (included)\n+    * * hi - The integer at which to stop the loop (excluded)\n+    * * it - A block to execute with each consecutive integer of the range.\n+    *        Return `true` to continue, `false` to stop.\n+    *\n+    * # Return value\n+    *\n+    * `true` If execution proceeded correctly, `false` if it was interrupted,\n+    * that is if `it` returned `false` at any point.\n+    */\n+    pub pure fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n+        let mut i = lo;\n+        while i < hi {\n+            if (!it(i)) { return false; }\n+            i += 1u;\n+        }\n+        return true;\n     }\n-    return true;\n-}\n \n-/// Returns the smallest power of 2 greater than or equal to `n`\n-#[inline(always)]\n-pub fn next_power_of_two(n: uint) -> uint {\n-    let halfbits: uint = sys::size_of::<uint>() * 4u;\n-    let mut tmp: uint = n - 1u;\n-    let mut shift: uint = 1u;\n-    while shift <= halfbits { tmp |= tmp >> shift; shift <<= 1u; }\n-    return tmp + 1u;\n-}\n+    /// Returns the smallest power of 2 greater than or equal to `n`\n+    #[inline(always)]\n+    pub fn next_power_of_two(n: uint) -> uint {\n+        let halfbits: uint = sys::size_of::<uint>() * 4u;\n+        let mut tmp: uint = n - 1u;\n+        let mut shift: uint = 1u;\n+        while shift <= halfbits { tmp |= tmp >> shift; shift <<= 1u; }\n+        return tmp + 1u;\n+    }\n \n-#[test]\n-fn test_next_power_of_two() {\n-    assert (uint::next_power_of_two(0u) == 0u);\n-    assert (uint::next_power_of_two(1u) == 1u);\n-    assert (uint::next_power_of_two(2u) == 2u);\n-    assert (uint::next_power_of_two(3u) == 4u);\n-    assert (uint::next_power_of_two(4u) == 4u);\n-    assert (uint::next_power_of_two(5u) == 8u);\n-    assert (uint::next_power_of_two(6u) == 8u);\n-    assert (uint::next_power_of_two(7u) == 8u);\n-    assert (uint::next_power_of_two(8u) == 8u);\n-    assert (uint::next_power_of_two(9u) == 16u);\n-    assert (uint::next_power_of_two(10u) == 16u);\n-    assert (uint::next_power_of_two(11u) == 16u);\n-    assert (uint::next_power_of_two(12u) == 16u);\n-    assert (uint::next_power_of_two(13u) == 16u);\n-    assert (uint::next_power_of_two(14u) == 16u);\n-    assert (uint::next_power_of_two(15u) == 16u);\n-    assert (uint::next_power_of_two(16u) == 16u);\n-    assert (uint::next_power_of_two(17u) == 32u);\n-    assert (uint::next_power_of_two(18u) == 32u);\n-    assert (uint::next_power_of_two(19u) == 32u);\n-    assert (uint::next_power_of_two(20u) == 32u);\n-    assert (uint::next_power_of_two(21u) == 32u);\n-    assert (uint::next_power_of_two(22u) == 32u);\n-    assert (uint::next_power_of_two(23u) == 32u);\n-    assert (uint::next_power_of_two(24u) == 32u);\n-    assert (uint::next_power_of_two(25u) == 32u);\n-    assert (uint::next_power_of_two(26u) == 32u);\n-    assert (uint::next_power_of_two(27u) == 32u);\n-    assert (uint::next_power_of_two(28u) == 32u);\n-    assert (uint::next_power_of_two(29u) == 32u);\n-    assert (uint::next_power_of_two(30u) == 32u);\n-    assert (uint::next_power_of_two(31u) == 32u);\n-    assert (uint::next_power_of_two(32u) == 32u);\n-    assert (uint::next_power_of_two(33u) == 64u);\n-    assert (uint::next_power_of_two(34u) == 64u);\n-    assert (uint::next_power_of_two(35u) == 64u);\n-    assert (uint::next_power_of_two(36u) == 64u);\n-    assert (uint::next_power_of_two(37u) == 64u);\n-    assert (uint::next_power_of_two(38u) == 64u);\n-    assert (uint::next_power_of_two(39u) == 64u);\n-}\n+    #[test]\n+    fn test_next_power_of_two() {\n+        assert (uint::next_power_of_two(0u) == 0u);\n+        assert (uint::next_power_of_two(1u) == 1u);\n+        assert (uint::next_power_of_two(2u) == 2u);\n+        assert (uint::next_power_of_two(3u) == 4u);\n+        assert (uint::next_power_of_two(4u) == 4u);\n+        assert (uint::next_power_of_two(5u) == 8u);\n+        assert (uint::next_power_of_two(6u) == 8u);\n+        assert (uint::next_power_of_two(7u) == 8u);\n+        assert (uint::next_power_of_two(8u) == 8u);\n+        assert (uint::next_power_of_two(9u) == 16u);\n+        assert (uint::next_power_of_two(10u) == 16u);\n+        assert (uint::next_power_of_two(11u) == 16u);\n+        assert (uint::next_power_of_two(12u) == 16u);\n+        assert (uint::next_power_of_two(13u) == 16u);\n+        assert (uint::next_power_of_two(14u) == 16u);\n+        assert (uint::next_power_of_two(15u) == 16u);\n+        assert (uint::next_power_of_two(16u) == 16u);\n+        assert (uint::next_power_of_two(17u) == 32u);\n+        assert (uint::next_power_of_two(18u) == 32u);\n+        assert (uint::next_power_of_two(19u) == 32u);\n+        assert (uint::next_power_of_two(20u) == 32u);\n+        assert (uint::next_power_of_two(21u) == 32u);\n+        assert (uint::next_power_of_two(22u) == 32u);\n+        assert (uint::next_power_of_two(23u) == 32u);\n+        assert (uint::next_power_of_two(24u) == 32u);\n+        assert (uint::next_power_of_two(25u) == 32u);\n+        assert (uint::next_power_of_two(26u) == 32u);\n+        assert (uint::next_power_of_two(27u) == 32u);\n+        assert (uint::next_power_of_two(28u) == 32u);\n+        assert (uint::next_power_of_two(29u) == 32u);\n+        assert (uint::next_power_of_two(30u) == 32u);\n+        assert (uint::next_power_of_two(31u) == 32u);\n+        assert (uint::next_power_of_two(32u) == 32u);\n+        assert (uint::next_power_of_two(33u) == 64u);\n+        assert (uint::next_power_of_two(34u) == 64u);\n+        assert (uint::next_power_of_two(35u) == 64u);\n+        assert (uint::next_power_of_two(36u) == 64u);\n+        assert (uint::next_power_of_two(37u) == 64u);\n+        assert (uint::next_power_of_two(38u) == 64u);\n+        assert (uint::next_power_of_two(39u) == 64u);\n+    }\n \n-#[test]\n-fn test_overflows() {\n-    assert (uint::max_value > 0u);\n-    assert (uint::min_value <= 0u);\n-    assert (uint::min_value + uint::max_value + 1u == 0u);\n-}\n+    #[test]\n+    fn test_overflows() {\n+        assert (uint::max_value > 0u);\n+        assert (uint::min_value <= 0u);\n+        assert (uint::min_value + uint::max_value + 1u == 0u);\n+    }\n \n-#[test]\n-fn test_div() {\n-    assert(uint::div_floor(3u, 4u) == 0u);\n-    assert(uint::div_ceil(3u, 4u)  == 1u);\n-    assert(uint::div_round(3u, 4u) == 1u);\n-}\n+    #[test]\n+    fn test_div() {\n+        assert(uint::div_floor(3u, 4u) == 0u);\n+        assert(uint::div_ceil(3u, 4u)  == 1u);\n+        assert(uint::div_round(3u, 4u) == 1u);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "68054d47e1f988da7add538761a4420742e20a99", "filename": "src/libcore/uint-template/uintb.rs", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fuintb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f72df7041602dd286c1c00b2b745d21bf10e9b/src%2Flibcore%2Fuint-template%2Fuintb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuintb.rs?ref=16f72df7041602dd286c1c00b2b745d21bf10e9b", "patch": "@@ -1,160 +0,0 @@\n-pub use inst::{\n-    div_ceil, div_round, div_floor, iterate,\n-    next_power_of_two\n-};\n-\n-mod inst {\n-    pub type T = uint;\n-\n-    #[cfg(target_arch = \"x86\")]\n-    #[cfg(target_arch = \"arm\")]\n-    pub const bits: uint = 32;\n-\n-    #[cfg(target_arch = \"x86_64\")]\n-    pub const bits: uint = 64;\n-\n-    /**\n-    * Divide two numbers, return the result, rounded up.\n-    *\n-    * # Arguments\n-    *\n-    * * x - an integer\n-    * * y - an integer distinct from 0u\n-    *\n-    * # Return value\n-    *\n-    * The smallest integer `q` such that `x/y <= q`.\n-    */\n-    pub pure fn div_ceil(x: uint, y: uint) -> uint {\n-        let div = x / y;\n-        if x % y == 0u { div }\n-        else { div + 1u }\n-    }\n-\n-    /**\n-    * Divide two numbers, return the result, rounded to the closest integer.\n-    *\n-    * # Arguments\n-    *\n-    * * x - an integer\n-    * * y - an integer distinct from 0u\n-    *\n-    * # Return value\n-    *\n-    * The integer `q` closest to `x/y`.\n-    */\n-    pub pure fn div_round(x: uint, y: uint) -> uint {\n-        let div = x / y;\n-        if x % y * 2u  < y { div }\n-        else { div + 1u }\n-    }\n-\n-    /**\n-    * Divide two numbers, return the result, rounded down.\n-    *\n-    * Note: This is the same function as `div`.\n-    *\n-    * # Arguments\n-    *\n-    * * x - an integer\n-    * * y - an integer distinct from 0u\n-    *\n-    * # Return value\n-    *\n-    * The smallest integer `q` such that `x/y <= q`. This\n-    * is either `x/y` or `x/y + 1`.\n-    */\n-    pub pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n-\n-    /**\n-    * Iterate over the range [`lo`..`hi`), or stop when requested\n-    *\n-    * # Arguments\n-    *\n-    * * lo - The integer at which to start the loop (included)\n-    * * hi - The integer at which to stop the loop (excluded)\n-    * * it - A block to execute with each consecutive integer of the range.\n-    *        Return `true` to continue, `false` to stop.\n-    *\n-    * # Return value\n-    *\n-    * `true` If execution proceeded correctly, `false` if it was interrupted,\n-    * that is if `it` returned `false` at any point.\n-    */\n-    pub pure fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n-        let mut i = lo;\n-        while i < hi {\n-            if (!it(i)) { return false; }\n-            i += 1u;\n-        }\n-        return true;\n-    }\n-\n-    /// Returns the smallest power of 2 greater than or equal to `n`\n-    #[inline(always)]\n-    pub fn next_power_of_two(n: uint) -> uint {\n-        let halfbits: uint = sys::size_of::<uint>() * 4u;\n-        let mut tmp: uint = n - 1u;\n-        let mut shift: uint = 1u;\n-        while shift <= halfbits { tmp |= tmp >> shift; shift <<= 1u; }\n-        return tmp + 1u;\n-    }\n-\n-    #[test]\n-    fn test_next_power_of_two() {\n-        assert (uint::next_power_of_two(0u) == 0u);\n-        assert (uint::next_power_of_two(1u) == 1u);\n-        assert (uint::next_power_of_two(2u) == 2u);\n-        assert (uint::next_power_of_two(3u) == 4u);\n-        assert (uint::next_power_of_two(4u) == 4u);\n-        assert (uint::next_power_of_two(5u) == 8u);\n-        assert (uint::next_power_of_two(6u) == 8u);\n-        assert (uint::next_power_of_two(7u) == 8u);\n-        assert (uint::next_power_of_two(8u) == 8u);\n-        assert (uint::next_power_of_two(9u) == 16u);\n-        assert (uint::next_power_of_two(10u) == 16u);\n-        assert (uint::next_power_of_two(11u) == 16u);\n-        assert (uint::next_power_of_two(12u) == 16u);\n-        assert (uint::next_power_of_two(13u) == 16u);\n-        assert (uint::next_power_of_two(14u) == 16u);\n-        assert (uint::next_power_of_two(15u) == 16u);\n-        assert (uint::next_power_of_two(16u) == 16u);\n-        assert (uint::next_power_of_two(17u) == 32u);\n-        assert (uint::next_power_of_two(18u) == 32u);\n-        assert (uint::next_power_of_two(19u) == 32u);\n-        assert (uint::next_power_of_two(20u) == 32u);\n-        assert (uint::next_power_of_two(21u) == 32u);\n-        assert (uint::next_power_of_two(22u) == 32u);\n-        assert (uint::next_power_of_two(23u) == 32u);\n-        assert (uint::next_power_of_two(24u) == 32u);\n-        assert (uint::next_power_of_two(25u) == 32u);\n-        assert (uint::next_power_of_two(26u) == 32u);\n-        assert (uint::next_power_of_two(27u) == 32u);\n-        assert (uint::next_power_of_two(28u) == 32u);\n-        assert (uint::next_power_of_two(29u) == 32u);\n-        assert (uint::next_power_of_two(30u) == 32u);\n-        assert (uint::next_power_of_two(31u) == 32u);\n-        assert (uint::next_power_of_two(32u) == 32u);\n-        assert (uint::next_power_of_two(33u) == 64u);\n-        assert (uint::next_power_of_two(34u) == 64u);\n-        assert (uint::next_power_of_two(35u) == 64u);\n-        assert (uint::next_power_of_two(36u) == 64u);\n-        assert (uint::next_power_of_two(37u) == 64u);\n-        assert (uint::next_power_of_two(38u) == 64u);\n-        assert (uint::next_power_of_two(39u) == 64u);\n-    }\n-\n-    #[test]\n-    fn test_overflows() {\n-        assert (uint::max_value > 0u);\n-        assert (uint::min_value <= 0u);\n-        assert (uint::min_value + uint::max_value + 1u == 0u);\n-    }\n-\n-    #[test]\n-    fn test_div() {\n-        assert(uint::div_floor(3u, 4u) == 0u);\n-        assert(uint::div_ceil(3u, 4u)  == 1u);\n-        assert(uint::div_round(3u, 4u) == 1u);\n-    }\n-}\n\\ No newline at end of file"}]}