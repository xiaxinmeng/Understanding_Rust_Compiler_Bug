{"sha": "6c799dac1ef70719301ed7e351e22094b0b85dcf", "node_id": "C_kwDOAAsO6NoAKDZjNzk5ZGFjMWVmNzA3MTkzMDFlZDdlMzUxZTIyMDk0YjBiODVkY2Y", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-17T15:46:20Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-17T15:46:20Z"}, "message": "Fix some clippy lints", "tree": {"sha": "566d93f097b8c962ef3e3937c12896c0eeab9546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/566d93f097b8c962ef3e3937c12896c0eeab9546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c799dac1ef70719301ed7e351e22094b0b85dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c799dac1ef70719301ed7e351e22094b0b85dcf", "html_url": "https://github.com/rust-lang/rust/commit/6c799dac1ef70719301ed7e351e22094b0b85dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c799dac1ef70719301ed7e351e22094b0b85dcf/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad7c0439cb1d54af7212915c6004be4a49c2f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7c0439cb1d54af7212915c6004be4a49c2f30", "html_url": "https://github.com/rust-lang/rust/commit/8ad7c0439cb1d54af7212915c6004be4a49c2f30"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "3261f5652592e0821c3e6d724761eba24cb81233", "filename": "crates/ide_assists/src/handlers/convert_comment_block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -96,8 +96,7 @@ fn line_to_block(acc: &mut Assists, comment: ast::Comment) -> Option<()> {\n             let block_prefix =\n                 CommentKind { shape: CommentShape::Block, ..comment.kind() }.prefix();\n \n-            let output =\n-                format!(\"{}\\n{}\\n{}*/\", block_prefix, block_comment_body, indentation.to_string());\n+            let output = format!(\"{}\\n{}\\n{}*/\", block_prefix, block_comment_body, indentation);\n \n             edit.replace(target, output)\n         },"}, {"sha": "7f27b507bab2939cdeb07a1089c4d4171314ac64", "filename": "crates/ide_assists/src/handlers/convert_into_to_from.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -91,10 +91,7 @@ pub(crate) fn convert_into_to_from(acc: &mut Assists, ctx: &AssistContext) -> Op\n             builder.replace(src_type.syntax().text_range(), dest_type.to_string());\n             builder.replace(ast_trait.syntax().text_range(), format!(\"From<{}>\", src_type));\n             builder.replace(into_fn_return.syntax().text_range(), \"-> Self\");\n-            builder.replace(\n-                into_fn_params.syntax().text_range(),\n-                format!(\"(val: {})\", src_type.to_string()),\n-            );\n+            builder.replace(into_fn_params.syntax().text_range(), format!(\"(val: {})\", src_type));\n             builder.replace(into_fn_name.syntax().text_range(), \"from\");\n \n             for s in selfs {"}, {"sha": "c21badb1e17cf8ef74ac7e6011dd49c0a4a0febd", "filename": "crates/ide_assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -174,7 +174,7 @@ fn edit_tuple_assignment(\n \n     // with sub_pattern: keep original tuple and add subpattern: `tup @ (_0, _1)`\n     if in_sub_pattern {\n-        let text = format!(\" @ {}\", tuple_pat.to_string());\n+        let text = format!(\" @ {}\", tuple_pat);\n         match ctx.config.snippet_cap {\n             Some(cap) => {\n                 let snip = add_cursor(&text);"}, {"sha": "4bbfdae1d214f686a8f239767e82f31ad02197c3", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -298,7 +298,7 @@ impl Module {\n                 if let Some(name_ref) = ast::NameRef::cast(desc) {\n                     return Some((\n                         name_ref.syntax().text_range(),\n-                        format!(\"{}::{}\", self.name, name_ref.to_string()),\n+                        format!(\"{}::{}\", self.name, name_ref),\n                     ));\n                 }\n             }"}, {"sha": "1481eadb51975fb620180dcd41fca1726f59b06d", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -59,9 +59,8 @@ pub(crate) fn generate_documentation_template(\n         \"Generate a documentation template\",\n         text_range,\n         |builder| {\n-            let mut doc_lines = Vec::new();\n             // Introduction / short function description before the sections\n-            doc_lines.push(introduction_builder(&ast_func, ctx));\n+            let mut doc_lines = vec![introduction_builder(&ast_func, ctx)];\n             // Then come the sections\n             if let Some(mut lines) = examples_builder(&ast_func, ctx) {\n                 doc_lines.push(\"\".into());\n@@ -303,7 +302,7 @@ fn arguments_from_params(param_list: &ast::ParamList) -> String {\n         // instance `TuplePat`) could be managed later.\n         Some(ast::Pat::IdentPat(ident_pat)) => match ident_pat.name() {\n             Some(name) => match is_a_ref_mut_param(&param) {\n-                true => format!(\"&mut {}\", name.to_string()),\n+                true => format!(\"&mut {}\", name),\n                 false => name.to_string(),\n             },\n             None => \"_\".to_string(),"}, {"sha": "ae29068bd702a1d1ece31460afa035d630cba641", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -121,7 +121,7 @@ impl QualifyCandidate<'_> {\n             }\n             QualifyCandidate::UnqualifiedName(generics) => {\n                 let generics = generics.as_ref().map_or_else(String::new, ToString::to_string);\n-                replacer(format!(\"{}{}\", import.to_string(), generics));\n+                replacer(format!(\"{}{}\", import, generics));\n             }\n             QualifyCandidate::TraitAssocItem(qualifier, segment) => {\n                 replacer(format!(\"<{} as {}>::{}\", qualifier, import, segment));"}, {"sha": "8a443ab08935f1ce044b4255c2cc2962072d82d5", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -431,7 +431,7 @@ fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str\n     buf.push_str(\"\\n\\n\");\n     adt.attrs()\n         .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n-        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n+        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr).as_str()));\n     buf.push_str(\"impl\");\n     if let Some(generic_params) = &generic_params {\n         let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));"}, {"sha": "8c806e7925b15b0eebe1275ade8a76220ede2960", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c799dac1ef70719301ed7e351e22094b0b85dcf/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=6c799dac1ef70719301ed7e351e22094b0b85dcf", "patch": "@@ -147,7 +147,7 @@ impl Fixture {\n                 if line.starts_with(\"// \")\n                     && line.contains(':')\n                     && !line.contains(\"::\")\n-                    && !line.contains(\".\")\n+                    && !line.contains('.')\n                     && line.chars().all(|it| !it.is_uppercase())\n                 {\n                     panic!(\"looks like invalid metadata line: {:?}\", line);"}]}