{"sha": "30bf7e43db2667470875ea4477a95aa297896851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYmY3ZTQzZGIyNjY3NDcwODc1ZWE0NDc3YTk1YWEyOTc4OTY4NTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-12T12:41:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-12T12:41:02Z"}, "message": "Disallow regressing crate docs", "tree": {"sha": "5e62cbb2356383b36a36ae717a99f628580da60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e62cbb2356383b36a36ae717a99f628580da60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30bf7e43db2667470875ea4477a95aa297896851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30bf7e43db2667470875ea4477a95aa297896851", "html_url": "https://github.com/rust-lang/rust/commit/30bf7e43db2667470875ea4477a95aa297896851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30bf7e43db2667470875ea4477a95aa297896851/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d09e5a3d9e57c631860ef195fad29f002569ae4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09e5a3d9e57c631860ef195fad29f002569ae4d", "html_url": "https://github.com/rust-lang/rust/commit/d09e5a3d9e57c631860ef195fad29f002569ae4d"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "51d953f6e896a7c34f2172ac4cfd731692a629e2", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bf7e43db2667470875ea4477a95aa297896851/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bf7e43db2667470875ea4477a95aa297896851/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=30bf7e43db2667470875ea4477a95aa297896851", "patch": "@@ -1,11 +1,12 @@\n //! ra_cfg defines conditional compiling options, `cfg` attibute parser and evaluator\n+\n+mod cfg_expr;\n+\n use std::iter::IntoIterator;\n \n use ra_syntax::SmolStr;\n use rustc_hash::FxHashSet;\n \n-mod cfg_expr;\n-\n pub use cfg_expr::{parse_cfg, CfgExpr};\n \n /// Configuration options used for conditional compilition on items with `cfg` attributes."}, {"sha": "a30ed4cbb863ea052a2a39392a215f12e823774e", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30bf7e43db2667470875ea4477a95aa297896851/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bf7e43db2667470875ea4477a95aa297896851/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=30bf7e43db2667470875ea4477a95aa297896851", "patch": "@@ -1,13 +1,14 @@\n //! This crate provides some utilities for indenting rust code.\n-//!\n+\n+use std::iter::successors;\n+\n use itertools::Itertools;\n use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n     SmolStr, SyntaxKind,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, T,\n };\n-use std::iter::successors;\n \n pub fn reindent(text: &str, indent: &str) -> String {\n     let indent = format!(\"\\n{}\", indent);"}, {"sha": "14121986017db8589e472098f5ca7eeaaf56b98e", "filename": "xtask/tests/tidy-tests/docs.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/30bf7e43db2667470875ea4477a95aa297896851/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bf7e43db2667470875ea4477a95aa297896851/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs?ref=30bf7e43db2667470875ea4477a95aa297896851", "patch": "@@ -1,10 +1,6 @@\n-use std::fs;\n-use std::io::prelude::*;\n-use std::io::BufReader;\n-use std::path::Path;\n+use std::{collections::HashMap, fs, io::prelude::*, io::BufReader, path::Path};\n \n use walkdir::{DirEntry, WalkDir};\n-\n use xtask::project_root;\n \n fn is_exclude_dir(p: &Path) -> bool {\n@@ -37,6 +33,7 @@ fn no_docs_comments() {\n     let crates = project_root().join(\"crates\");\n     let iter = WalkDir::new(crates);\n     let mut missing_docs = Vec::new();\n+    let mut contains_fixme = Vec::new();\n     for f in iter.into_iter().filter_entry(|e| !is_hidden(e)) {\n         let f = f.unwrap();\n         if f.file_type().is_dir() {\n@@ -54,7 +51,12 @@ fn no_docs_comments() {\n         let mut reader = BufReader::new(fs::File::open(f.path()).unwrap());\n         let mut line = String::new();\n         reader.read_line(&mut line).unwrap();\n-        if !line.starts_with(\"//!\") {\n+\n+        if line.starts_with(\"//!\") {\n+            if line.contains(\"FIXME\") {\n+                contains_fixme.push(f.path().to_path_buf())\n+            }\n+        } else {\n             missing_docs.push(f.path().display().to_string());\n         }\n     }\n@@ -65,4 +67,39 @@ fn no_docs_comments() {\n             missing_docs.join(\"\\n\")\n         )\n     }\n+\n+    let whitelist = [\n+        \"ra_batch\",\n+        \"ra_cli\",\n+        \"ra_db\",\n+        \"ra_hir\",\n+        \"ra_hir_expand\",\n+        \"ra_hir_def\",\n+        \"ra_ide_api\",\n+        \"ra_lsp_server\",\n+        \"ra_mbe\",\n+        \"ra_parser\",\n+        \"ra_prof\",\n+        \"ra_project_model\",\n+        \"ra_syntax\",\n+        \"ra_text_edit\",\n+        \"ra_tt\",\n+    ];\n+\n+    let mut has_fixmes = whitelist.iter().map(|it| (*it, false)).collect::<HashMap<&str, bool>>();\n+    'outer: for path in contains_fixme {\n+        for krate in whitelist.iter() {\n+            if path.components().any(|it| it.as_os_str() == *krate) {\n+                has_fixmes.insert(krate, true);\n+                continue 'outer;\n+            }\n+        }\n+        panic!(\"FIXME doc in a fully-documented crate: {}\", path.display())\n+    }\n+\n+    for (krate, has_fixme) in has_fixmes.iter() {\n+        if !has_fixme {\n+            panic!(\"crate {} is fully documented, remove it from the white list\", krate)\n+        }\n+    }\n }"}]}