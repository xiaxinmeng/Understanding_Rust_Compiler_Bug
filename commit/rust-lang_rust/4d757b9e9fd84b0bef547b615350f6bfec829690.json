{"sha": "4d757b9e9fd84b0bef547b615350f6bfec829690", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNzU3YjllOWZkODRiMGJlZjU0N2I2MTUzNTBmNmJmZWM4Mjk2OTA=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-21T11:22:16Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-21T11:23:52Z"}, "message": "Remove keyword multitable generator script\n\nThe script was used for generating a easy to read Rust keywords table in\ntexinfo format.", "tree": {"sha": "480cea61a1267b9a39645548467e7072f0b645a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/480cea61a1267b9a39645548467e7072f0b645a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d757b9e9fd84b0bef547b615350f6bfec829690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d757b9e9fd84b0bef547b615350f6bfec829690", "html_url": "https://github.com/rust-lang/rust/commit/4d757b9e9fd84b0bef547b615350f6bfec829690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d757b9e9fd84b0bef547b615350f6bfec829690/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "635e8200e14b085bedd4f1a53f66baf803d346b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/635e8200e14b085bedd4f1a53f66baf803d346b9", "html_url": "https://github.com/rust-lang/rust/commit/635e8200e14b085bedd4f1a53f66baf803d346b9"}], "stats": {"total": 103, "additions": 0, "deletions": 103}, "files": [{"sha": "ea7417e83f8da8b487c778d1b7f97a5375dfbaf0", "filename": "src/etc/gen-keywords-table.py", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/635e8200e14b085bedd4f1a53f66baf803d346b9/src%2Fetc%2Fgen-keywords-table.py", "raw_url": "https://github.com/rust-lang/rust/raw/635e8200e14b085bedd4f1a53f66baf803d346b9/src%2Fetc%2Fgen-keywords-table.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgen-keywords-table.py?ref=635e8200e14b085bedd4f1a53f66baf803d346b9", "patch": "@@ -1,103 +0,0 @@\n-#!/usr/bin/env python\n-\n-import sys\n-import os.path\n-\n-def scrub(b):\n-  if sys.version_info >= (3,) and type(b) == bytes:\n-    return b.decode('ascii')\n-  else:\n-    return b\n-\n-src_dir = scrub(os.getenv(\"CFG_SRC_DIR\"))\n-if not src_dir:\n-  raise Exception(\"missing env var CFG_SRC_DIR\")\n-\n-\n-def get_keywords():\n-  keywords_file = os.path.join(src_dir, \"doc\", \"keywords.txt\")\n-  keywords = []\n-  for line in open(keywords_file).readlines():\n-    if not line or line.startswith('#'):\n-      continue\n-    for kw in line.split():\n-      if kw.isalnum():\n-        keywords.append(kw)\n-  return keywords\n-\n-\n-def sort(keywords, ncols):\n-  \"\"\"Sort keywords in a column-major ordered table.\n-\n-  Args:\n-    keywords: List of keywords\n-    ncols: Number of columns to be sorted\n-  \"\"\"\n-  ## sort and remove duplicates\n-  keywords = sorted(list(set(keywords)))\n-  sz = len(keywords)\n-\n-  if sz % ncols > 0:\n-    nrows = sz / ncols + 1\n-  else:\n-    nrows = sz / ncols\n-\n-  result = []\n-  max = ncols * nrows\n-  for i in xrange(0, max):\n-    result.append(\"\")\n-\n-  for i in xrange(1, sz+1):\n-    if i % nrows == 0:\n-      extra = 0\n-    else:\n-      extra = 1\n-    pos = (((i + (nrows - 1)) % nrows) * ncols) + \\\n-          (i / nrows + extra)\n-    result[pos - 1] = keywords[i - 1]\n-\n-  return rows(result, ncols)\n-\n-\n-def rows(keywords, ncols):\n-  \"\"\"Split input list of keywords into rows.\n-\n-  Each contains ncols or ncols-1 elements.\n-\n-  Args:\n-    keywords: List of keywords sorted in column-major order\n-    ncols: Number of columns\n-  \"\"\"\n-  sz = len(keywords)\n-  result = []\n-  i = 0\n-  while i < sz:\n-    if i + ncols < sz:\n-      se = i + ncols\n-    else:\n-      se = sz\n-    result.append(keywords[i:se])\n-    i = se\n-  return result\n-\n-\n-def table(rows):\n-  \"\"\"Render rows in a texinfo multitable.\"\"\"\n-  result = [\"@multitable @columnfractions .15 .15 .15 .15 .15\\n\"]\n-  for row in rows:\n-    result += [\"@item @code{\" + row[0] + \"}\\n\"];\n-    for e in row[1:]:\n-      result += [\"@tab @code{\" + e + \"}\\n\"];\n-  result += [\"@end multitable\\n\"];\n-  return result\n-\n-\n-def main(oargs):\n-  keywords = get_keywords()\n-  out_file = open(os.path.join(\"doc\", \"keywords.texi\"), 'w')\n-  for line in table(sort(keywords, 5)):\n-    out_file.write(line)\n-  out_file.close()\n-\n-if __name__ == '__main__':\n-  main(sys.argv[1:])"}]}