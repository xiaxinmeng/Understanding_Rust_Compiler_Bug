{"sha": "d1f862171150f91c114eb126c559e90873c8dc00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZjg2MjE3MTE1MGY5MWMxMTRlYjEyNmM1NTllOTA4NzNjOGRjMDA=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-01-27T14:34:30Z"}, "committer": {"name": "Areredify", "email": "misha-babenko@yandex.ru", "date": "2020-01-30T13:48:56Z"}, "message": "add  lint", "tree": {"sha": "45d43e83d23401ebf559dba384bcde2f91ff4788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45d43e83d23401ebf559dba384bcde2f91ff4788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1f862171150f91c114eb126c559e90873c8dc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f862171150f91c114eb126c559e90873c8dc00", "html_url": "https://github.com/rust-lang/rust/commit/d1f862171150f91c114eb126c559e90873c8dc00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1f862171150f91c114eb126c559e90873c8dc00/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f69835bab7cfa56dc4565d8fe32765a95d93182b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69835bab7cfa56dc4565d8fe32765a95d93182b", "html_url": "https://github.com/rust-lang/rust/commit/f69835bab7cfa56dc4565d8fe32765a95d93182b"}], "stats": {"total": 127, "additions": 108, "deletions": 19}, "files": [{"sha": "32427225769793ff4c2cd297a98ddbf7c42051e1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1f862171150f91c114eb126c559e90873c8dc00/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1f862171150f91c114eb126c559e90873c8dc00/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d1f862171150f91c114eb126c559e90873c8dc00", "patch": "@@ -1153,6 +1153,7 @@ Released 2018-09-13\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n+[`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist"}, {"sha": "4d746596c377cdf389c38fb30b1658906d9ce638", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 61, "deletions": 18, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d1f862171150f91c114eb126c559e90873c8dc00/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f862171150f91c114eb126c559e90873c8dc00/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=d1f862171150f91c114eb126c559e90873c8dc00", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, span_lint_and_help};\n+use crate::utils::{is_must_use_func_call, is_must_use_ty, match_def_path, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -30,7 +30,35 @@ declare_clippy_lint! {\n     \"non-binding let on a `#[must_use]` expression\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let _ = sync_primitive.lock()`\n+    ///\n+    /// **Why is this bad?** This statement locks the synchronization\n+    /// primitive and immediately drops the lock, which is probably\n+    /// not intended. To extend lock lifetime to the end of the scope,\n+    /// use an underscore-prefixed name instead (i.e. _lock).\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// let _ = mutex.lock();\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// let _lock = mutex.lock();\n+    /// ```\n+    pub LET_UNDERSCORE_LOCK,\n+    correctness,\n+    \"non-binding let on a synchronization lock\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n+\n+const LOCK_METHODS_PATHS: [&[&str]; 3] = [&paths::MUTEX_LOCK, &paths::RWLOCK_READ, &paths::RWLOCK_WRITE];\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &Stmt<'_>) {\n@@ -43,22 +71,37 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n             if let PatKind::Wild = local.pat.kind;\n             if let Some(ref init) = local.init;\n             then {\n-                if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n-                   span_lint_and_help(\n-                        cx,\n-                        LET_UNDERSCORE_MUST_USE,\n-                        stmt.span,\n-                        \"non-binding let on an expression with `#[must_use]` type\",\n-                        \"consider explicitly using expression value\"\n-                    )\n-                } else if is_must_use_func_call(cx, init) {\n-                    span_lint_and_help(\n-                        cx,\n-                        LET_UNDERSCORE_MUST_USE,\n-                        stmt.span,\n-                        \"non-binding let on a result of a `#[must_use]` function\",\n-                        \"consider explicitly using function result\"\n-                    )\n+                if_chain! {\n+                    if let ExprKind::MethodCall(_, _, _) = init.kind;\n+                    let method_did = cx.tables.type_dependent_def_id(init.hir_id).unwrap();\n+                    if LOCK_METHODS_PATHS.iter().any(|path| match_def_path(cx, method_did, path));\n+                    then {\n+                        span_lint_and_help(\n+                            cx,\n+                            LET_UNDERSCORE_LOCK,\n+                            stmt.span,\n+                            \"non-binding let on an a synchronization lock\",\n+                            \"consider using an underscore-prefixed named binding\"\n+                        )\n+                    } else {\n+                        if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n+                            span_lint_and_help(\n+                                cx,\n+                                LET_UNDERSCORE_MUST_USE,\n+                                stmt.span,\n+                                \"non-binding let on an expression with `#[must_use]` type\",\n+                                \"consider explicitly using expression value\"\n+                            )\n+                        } else if is_must_use_func_call(cx, init) {\n+                            span_lint_and_help(\n+                                cx,\n+                                LET_UNDERSCORE_MUST_USE,\n+                                stmt.span,\n+                                \"non-binding let on a result of a `#[must_use]` function\",\n+                                \"consider explicitly using function result\"\n+                            )\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "443a9c7e9d9da50159c15c17ff95106738aa0926", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1f862171150f91c114eb126c559e90873c8dc00/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f862171150f91c114eb126c559e90873c8dc00/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d1f862171150f91c114eb126c559e90873c8dc00", "patch": "@@ -566,6 +566,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n+        &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n         &lifetimes::EXTRA_UNUSED_LIFETIMES,\n         &lifetimes::NEEDLESS_LIFETIMES,\n@@ -1171,6 +1172,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&let_if_seq::USELESS_LET_IF_SEQ),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n@@ -1556,6 +1558,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&infinite_iter::INFINITE_ITER),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n         LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n         LintId::of(&loops::FOR_LOOP_OVER_RESULT),"}, {"sha": "ff8acb321a4609e3daf1f6f8e3406beacd301fd4", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1f862171150f91c114eb126c559e90873c8dc00/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f862171150f91c114eb126c559e90873c8dc00/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=d1f862171150f91c114eb126c559e90873c8dc00", "patch": "@@ -58,6 +58,7 @@ pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n pub const MEM_UNINITIALIZED: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n+pub const MUTEX_LOCK: [&str; 5] = [\"std\", \"sync\", \"mutex\", \"Mutex\", \"lock\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n@@ -100,6 +101,8 @@ pub const REPEAT: [&str; 3] = [\"core\", \"iter\", \"repeat\"];\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n+pub const RWLOCK_READ: [&str; 5] = [\"std\", \"sync\", \"rwlock\", \"RwLock\", \"read\"];\n+pub const RWLOCK_WRITE: [&str; 5] = [\"std\", \"sync\", \"rwlock\", \"RwLock\", \"write\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];"}, {"sha": "1f7d450ab66eb831b7dc261e19828cbd2d2514d7", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1f862171150f91c114eb126c559e90873c8dc00/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f862171150f91c114eb126c559e90873c8dc00/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d1f862171150f91c114eb126c559e90873c8dc00", "patch": "@@ -959,6 +959,13 @@ pub const ALL_LINTS: [Lint; 350] = [\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"let_underscore_lock\",\n+        group: \"correctness\",\n+        desc: \"non-binding let on a synchronization lock\",\n+        deprecation: None,\n+        module: \"let_underscore\",\n+    },\n     Lint {\n         name: \"let_underscore_must_use\",\n         group: \"restriction\","}, {"sha": "cfe207251f47c417e5a6e996885a97e5109fec39", "filename": "tests/ui/let_underscore.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1f862171150f91c114eb126c559e90873c8dc00/tests%2Fui%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1f862171150f91c114eb126c559e90873c8dc00/tests%2Fui%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore.rs?ref=d1f862171150f91c114eb126c559e90873c8dc00", "patch": "@@ -88,4 +88,11 @@ fn main() {\n     let _ = a.map(|_| ());\n \n     let _ = a;\n+\n+    let m = std::sync::Mutex::new(());\n+    let rw = std::sync::RwLock::new(());\n+\n+    let _ = m.lock();\n+    let _ = rw.read();\n+    let _ = rw.write();\n }"}, {"sha": "bcd560fe493fcbb5e0a148e18e99c25fc94099cd", "filename": "tests/ui/let_underscore.stderr", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1f862171150f91c114eb126c559e90873c8dc00/tests%2Fui%2Flet_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1f862171150f91c114eb126c559e90873c8dc00/tests%2Fui%2Flet_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore.stderr?ref=d1f862171150f91c114eb126c559e90873c8dc00", "patch": "@@ -95,5 +95,30 @@ LL |     let _ = a;\n    |\n    = help: consider explicitly using expression value\n \n-error: aborting due to 12 previous errors\n+error: non-binding let on an a synchronization lock\n+  --> $DIR/let_underscore.rs:95:5\n+   |\n+LL |     let _ = m.lock();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::let_underscore_lock)]` on by default\n+   = help: consider using an underscore-prefixed named binding\n+\n+error: non-binding let on an a synchronization lock\n+  --> $DIR/let_underscore.rs:96:5\n+   |\n+LL |     let _ = rw.read();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding\n+\n+error: non-binding let on an a synchronization lock\n+  --> $DIR/let_underscore.rs:97:5\n+   |\n+LL |     let _ = rw.write();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding\n+\n+error: aborting due to 15 previous errors\n "}]}