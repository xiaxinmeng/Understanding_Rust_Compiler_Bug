{"sha": "696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NmU5NTFmZTkwZmJlN2I5NGRhYzhiZThhOWYzZGJjYWNkMzM1Mjg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-21T18:50:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-21T18:50:53Z"}, "message": "Rollup merge of #46858 - QuietMisdreavus:external-doc-error, r=estebank\n\ntweaks and fixes for doc(include)\n\nThis PR makes a handful of changes around `#[doc(include=\"file.md\")]` (https://github.com/rust-lang/rust/issues/44732):\n\n* Turns errors when loading files into full errors. This matches the original RFC text.\n* Makes the `missing_docs` lint check for `#[doc(include=\"file.md\")]` as well as regular `#[doc=\"text\"]` attributes.\n* Loads files included by `#[doc(include=\"file.md\")]` into dep-info, mirroring the behavior of `include_str!()` and friends.\n* Adds or modifies tests to check for all of these.", "tree": {"sha": "7ce38e94da8dfd1cac5f545bf98287b3d13c452a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce38e94da8dfd1cac5f545bf98287b3d13c452a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "html_url": "https://github.com/rust-lang/rust/commit/696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256bf2be62cd1d124fbfe6c6a0fb9c43f4cb3e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/256bf2be62cd1d124fbfe6c6a0fb9c43f4cb3e91", "html_url": "https://github.com/rust-lang/rust/commit/256bf2be62cd1d124fbfe6c6a0fb9c43f4cb3e91"}, {"sha": "cbbb73b56ff8137f38611233d36455294613d0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbb73b56ff8137f38611233d36455294613d0ea", "html_url": "https://github.com/rust-lang/rust/commit/cbbb73b56ff8137f38611233d36455294613d0ea"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "836c22a3618fe2b106097a36d5ce5885eef85881", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "patch": "@@ -349,7 +349,27 @@ impl MissingDoc {\n             }\n         }\n \n-        let has_doc = attrs.iter().any(|a| a.is_value_str() && a.check_name(\"doc\"));\n+        fn has_doc(attr: &ast::Attribute) -> bool {\n+            if !attr.check_name(\"doc\") {\n+                return false;\n+            }\n+\n+            if attr.is_value_str() {\n+                return true;\n+            }\n+\n+            if let Some(list) = attr.meta_item_list() {\n+                for meta in list {\n+                    if meta.check_name(\"include\") {\n+                        return true;\n+                    }\n+                }\n+            }\n+\n+            false\n+        }\n+\n+        let has_doc = attrs.iter().any(|a| has_doc(a));\n         if !has_doc {\n             cx.span_lint(MISSING_DOCS,\n                          cx.tcx.sess.codemap().def_span(sp),"}, {"sha": "81baa0c3954ca202549502813249c4f23ee6da35", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "patch": "@@ -1115,15 +1115,19 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                     match File::open(&filename).and_then(|mut f| f.read_to_end(&mut buf)) {\n                         Ok(..) => {}\n                         Err(e) => {\n-                            self.cx.span_warn(at.span,\n-                                              &format!(\"couldn't read {}: {}\",\n-                                                       filename.display(),\n-                                                       e));\n+                            self.cx.span_err(at.span,\n+                                             &format!(\"couldn't read {}: {}\",\n+                                                      filename.display(),\n+                                                      e));\n                         }\n                     }\n \n                     match String::from_utf8(buf) {\n                         Ok(src) => {\n+                            // Add this input file to the code map to make it available as\n+                            // dependency information\n+                            self.cx.codemap().new_filemap_and_lines(&filename, &src);\n+\n                             let include_info = vec![\n                                 dummy_spanned(ast::NestedMetaItemKind::MetaItem(\n                                         attr::mk_name_value_item_str(\"file\".into(),\n@@ -1137,9 +1141,9 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                                         attr::mk_list_item(\"include\".into(), include_info))));\n                         }\n                         Err(_) => {\n-                            self.cx.span_warn(at.span,\n-                                              &format!(\"{} wasn't a utf-8 file\",\n-                                                       filename.display()));\n+                            self.cx.span_err(at.span,\n+                                             &format!(\"{} wasn't a utf-8 file\",\n+                                                      filename.display()));\n                         }\n                     }\n                 } else {"}, {"sha": "1ae0d0bd2760a62953651a6690f9bf991692ddaf", "filename": "src/test/compile-fail/external-doc-error.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Fcompile-fail%2Fexternal-doc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Fcompile-fail%2Fexternal-doc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexternal-doc-error.rs?ref=696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(external_doc)]\n+\n+#[doc(include = \"not-a-file.md\")] //~ ERROR: couldn't read\n+pub struct SomeStruct;\n+\n+fn main() {}"}, {"sha": "1293695b7997776e270e51f0f9e4405f8a57a3ab", "filename": "src/test/run-make/include_bytes_deps/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2FMakefile?ref=696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "patch": "@@ -8,7 +8,7 @@ ifneq ($(shell uname),FreeBSD)\n ifndef IS_WINDOWS\n all:\n \t$(RUSTC) --emit dep-info main.rs\n-\t$(CGREP) \"input.txt\" \"input.bin\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"input.txt\" \"input.bin\" \"input.md\" < $(TMPDIR)/main.d\n else\n all:\n "}, {"sha": "2a19b7405f795f88e9346104f4a843251e6eef2d", "filename": "src/test/run-make/include_bytes_deps/input.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2Finput.md?ref=696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "patch": "@@ -0,0 +1 @@\n+# Hello, world!"}, {"sha": "27ca1a46a500d6613891f0a991917c9dd53e0ae9", "filename": "src/test/run-make/include_bytes_deps/main.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2Fmain.rs?ref=696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(external_doc)]\n+\n+#[doc(include=\"input.md\")]\n+pub struct SomeStruct;\n+\n pub fn main() {\n     const INPUT_TXT: &'static str = include_str!(\"input.txt\");\n     const INPUT_BIN: &'static [u8] = include_bytes!(\"input.bin\");"}, {"sha": "767fb05313adc15973de66aae30bf9d3298508a4", "filename": "src/test/rustdoc/auxiliary/external-cross.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696e951fe90fbe7b94dac8be8a9f3dbcacd33528/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross.rs?ref=696e951fe90fbe7b94dac8be8a9f3dbcacd33528", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(external_doc)]\n+#![deny(missing_doc)]\n \n #[doc(include=\"external-cross-doc.md\")]\n pub struct NeedMoreDocs;"}]}