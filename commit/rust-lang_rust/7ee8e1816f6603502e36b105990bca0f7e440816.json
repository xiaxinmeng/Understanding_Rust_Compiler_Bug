{"sha": "7ee8e1816f6603502e36b105990bca0f7e440816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZThlMTgxNmY2NjAzNTAyZTM2YjEwNTk5MGJjYTBmN2U0NDA4MTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-15T04:23:58Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-16T02:22:35Z"}, "message": "Use `Symbol`s for crate names", "tree": {"sha": "150e997ea56c99b0ce2fb24bca03cebfc607c09b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/150e997ea56c99b0ce2fb24bca03cebfc607c09b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee8e1816f6603502e36b105990bca0f7e440816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee8e1816f6603502e36b105990bca0f7e440816", "html_url": "https://github.com/rust-lang/rust/commit/7ee8e1816f6603502e36b105990bca0f7e440816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee8e1816f6603502e36b105990bca0f7e440816/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c18c7c7059cb1c63aad9892ecbed58c229c74098", "url": "https://api.github.com/repos/rust-lang/rust/commits/c18c7c7059cb1c63aad9892ecbed58c229c74098", "html_url": "https://github.com/rust-lang/rust/commit/c18c7c7059cb1c63aad9892ecbed58c229c74098"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "a531956fb96da8c38659dc4562936e31417307ef", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -209,7 +209,7 @@ impl Clean<ExternalCrate> for CrateNum {\n         };\n \n         ExternalCrate {\n-            name: cx.tcx.crate_name(*self).to_string(),\n+            name: cx.tcx.crate_name(*self),\n             src: krate_src,\n             attrs: cx.tcx.get_attrs(root).clean(cx),\n             primitives,"}, {"sha": "cf9e81f30b1faf650d1e38e6f47180e3732586c9", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -51,7 +51,7 @@ thread_local!(crate static MAX_DEF_ID: RefCell<FxHashMap<CrateNum, DefId>> = Def\n \n #[derive(Clone, Debug)]\n crate struct Crate {\n-    crate name: String,\n+    crate name: Symbol,\n     crate version: Option<String>,\n     crate src: FileName,\n     crate module: Option<Item>,\n@@ -66,7 +66,7 @@ crate struct Crate {\n \n #[derive(Clone, Debug)]\n crate struct ExternalCrate {\n-    crate name: String,\n+    crate name: Symbol,\n     crate src: FileName,\n     crate attrs: Attributes,\n     crate primitives: Vec<(DefId, PrimitiveType)>,"}, {"sha": "77a3e9fa9549b4780de2dcc898c0fadd18579a34", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_span::source_map::FileName;\n+use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n use crate::config::RenderInfo;\n@@ -74,7 +75,7 @@ crate struct Cache {\n     crate implementors: FxHashMap<DefId, Vec<Impl>>,\n \n     /// Cache of where external crate documentation can be found.\n-    crate extern_locations: FxHashMap<CrateNum, (String, PathBuf, ExternalLocation)>,\n+    crate extern_locations: FxHashMap<CrateNum, (Symbol, PathBuf, ExternalLocation)>,\n \n     /// Cache of where documentation for primitives can be found.\n     crate primitive_locations: FxHashMap<clean::PrimitiveType, DefId>,\n@@ -173,10 +174,10 @@ impl Cache {\n                 },\n                 _ => PathBuf::new(),\n             };\n-            let extern_url = extern_html_root_urls.get(&e.name).map(|u| &**u);\n+            let extern_url = extern_html_root_urls.get(&*e.name.as_str()).map(|u| &**u);\n             cache\n                 .extern_locations\n-                .insert(n, (e.name.clone(), src_root, extern_location(e, extern_url, &dst)));\n+                .insert(n, (e.name, src_root, extern_location(e, extern_url, &dst)));\n \n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n             cache.external_paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n@@ -195,7 +196,7 @@ impl Cache {\n             cache.primitive_locations.insert(prim, def_id);\n         }\n \n-        cache.stack.push(krate.name.clone());\n+        cache.stack.push(krate.name.to_string());\n         krate = cache.fold_crate(krate);\n \n         for (trait_did, dids, impl_) in cache.orphan_trait_impls.drain(..) {\n@@ -340,7 +341,7 @@ impl DocFolder for Cache {\n \n         // Keep track of the fully qualified path for this item.\n         let pushed = match item.name {\n-            Some(ref n) if !n.is_empty() => {\n+            Some(n) if !n.is_empty() => {\n                 self.stack.push(n.to_string());\n                 true\n             }"}, {"sha": "f61919d78a0922bb4457a54d4c84f25a6d823ec1", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n use rustc_data_structures::sync::Lrc;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n-use rustc_span::Symbol;\n \n use crate::clean;\n use crate::config::{RenderInfo, RenderOptions};\n@@ -76,7 +75,7 @@ crate fn run_format<T: FormatRenderer>(\n         None => return Ok(()),\n     };\n \n-    item.name = Some(Symbol::intern(&krate.name));\n+    item.name = Some(krate.name);\n \n     // Render the crate documentation\n     let mut work = vec![(format_renderer.clone(), item)];"}, {"sha": "ba06b6b182b00300698d38a5fa730728b6f7f4a5", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -31,7 +31,7 @@ crate fn extern_location(\n ) -> ExternalLocation {\n     use ExternalLocation::*;\n     // See if there's documentation generated into the local directory\n-    let local_location = dst.join(&e.name);\n+    let local_location = dst.join(&*e.name.as_str());\n     if local_location.is_dir() {\n         return Local;\n     }"}, {"sha": "d517151bc31ea82360168419fd074c190238a799", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -418,14 +418,15 @@ impl FormatRenderer for Context {\n         // If user passed in `--playground-url` arg, we fill in crate name here\n         let mut playground = None;\n         if let Some(url) = playground_url {\n-            playground = Some(markdown::Playground { crate_name: Some(krate.name.clone()), url });\n+            playground =\n+                Some(markdown::Playground { crate_name: Some(krate.name.to_string()), url });\n         }\n         let mut layout = layout::Layout {\n             logo: String::new(),\n             favicon: String::new(),\n             external_html,\n             default_settings,\n-            krate: krate.name.clone(),\n+            krate: krate.name.to_string(),\n             css_file_extension: extension_css,\n             generate_search_filter,\n         };\n@@ -445,7 +446,7 @@ impl FormatRenderer for Context {\n                     }\n                     (sym::html_playground_url, Some(s)) => {\n                         playground = Some(markdown::Playground {\n-                            crate_name: Some(krate.name.clone()),\n+                            crate_name: Some(krate.name.to_string()),\n                             url: s.to_string(),\n                         });\n                     }\n@@ -530,7 +531,7 @@ impl FormatRenderer for Context {\n     }\n \n     fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n-        let final_file = self.dst.join(&krate.name).join(\"all.html\");\n+        let final_file = self.dst.join(&*krate.name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n         let crate_name = krate.name.clone();\n \n@@ -1019,7 +1020,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n         }\n \n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n-        let (mut all_sources, _krates) = try_err!(collect(&dst, &krate.name, \"sourcesIndex\"), &dst);\n+        let (mut all_sources, _krates) =\n+            try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n         all_sources.push(format!(\n             \"sourcesIndex[\\\"{}\\\"] = {};\",\n             &krate.name,\n@@ -1035,7 +1037,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     // Update the search index\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n-    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name), &dst);\n+    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name.as_str()), &dst);\n     all_indexes.push(search_index);\n \n     // Sort the indexes by crate so the file will be generated identically even\n@@ -1070,7 +1072,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 extra_scripts: &[],\n                 static_extra_scripts: &[],\n             };\n-            krates.push(krate.name.clone());\n+            krates.push(krate.name.to_string());\n             krates.sort();\n             krates.dedup();\n \n@@ -1162,7 +1164,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n         mydst.push(&format!(\"{}.{}.js\", remote_item_type, remote_path[remote_path.len() - 1]));\n \n         let (mut all_implementors, _) =\n-            try_err!(collect(&mydst, &krate.name, \"implementors\"), &mydst);\n+            try_err!(collect(&mydst, &krate.name.as_str(), \"implementors\"), &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel.\n@@ -1648,16 +1650,17 @@ impl Context {\n         };\n         let file = &file;\n \n+        let symbol;\n         let (krate, path) = if cnum == LOCAL_CRATE {\n             if let Some(path) = self.shared.local_sources.get(file) {\n-                (&self.shared.layout.krate, path)\n+                (self.shared.layout.krate.as_str(), path)\n             } else {\n                 return None;\n             }\n         } else {\n             let (krate, src_root) = match *cache.extern_locations.get(&cnum)? {\n-                (ref name, ref src, ExternalLocation::Local) => (name, src),\n-                (ref name, ref src, ExternalLocation::Remote(ref s)) => {\n+                (name, ref src, ExternalLocation::Local) => (name, src),\n+                (name, ref src, ExternalLocation::Remote(ref s)) => {\n                     root = s.to_string();\n                     (name, src)\n                 }\n@@ -1671,7 +1674,8 @@ impl Context {\n             let mut fname = file.file_name().expect(\"source has no filename\").to_os_string();\n             fname.push(\".html\");\n             path.push_str(&fname.to_string_lossy());\n-            (krate, &path)\n+            symbol = krate.as_str();\n+            (&*symbol, &path)\n         };\n \n         let loline = item.source.lo(self.sess()).line;"}, {"sha": "b6c3300906bfd569cf0d1aa5f86198b0332528a7", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -19,7 +19,7 @@ crate fn render(\n     krate: clean::Crate,\n ) -> Result<clean::Crate, Error> {\n     info!(\"emitting source files\");\n-    let dst = dst.join(\"src\").join(&krate.name);\n+    let dst = dst.join(\"src\").join(&*krate.name.as_str());\n     scx.ensure_dir(&dst)?;\n     let mut folder = SourceCollector { dst, scx };\n     Ok(folder.fold_crate(krate))"}, {"sha": "7af26558b76ecb3fbdce9523eb1b825df021e247", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e1816f6603502e36b105990bca0f7e440816/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=7ee8e1816f6603502e36b105990bca0f7e440816", "patch": "@@ -223,7 +223,7 @@ impl FormatRenderer for JsonRenderer {\n                     (\n                         k.as_u32(),\n                         types::ExternalCrate {\n-                            name: v.0.clone(),\n+                            name: v.0.to_string(),\n                             html_root_url: match &v.2 {\n                                 ExternalLocation::Remote(s) => Some(s.clone()),\n                                 _ => None,"}]}