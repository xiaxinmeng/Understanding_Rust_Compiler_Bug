{"sha": "265dce66b6b1181f4b955032b742c702c753f6c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NWRjZTY2YjZiMTE4MWY0Yjk1NTAzMmI3NDJjNzAyYzc1M2Y2Yzg=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-30T16:15:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-30T16:15:25Z"}, "message": "RangeFrom should have an infinite size_hint\n\nThis makes the size_hint from things like `take` more precise.", "tree": {"sha": "5270d39833685a2f986dfe1598a252fd63ccdd53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5270d39833685a2f986dfe1598a252fd63ccdd53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/265dce66b6b1181f4b955032b742c702c753f6c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/265dce66b6b1181f4b955032b742c702c753f6c8", "html_url": "https://github.com/rust-lang/rust/commit/265dce66b6b1181f4b955032b742c702c753f6c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/265dce66b6b1181f4b955032b742c702c753f6c8/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920c4799bead614c21b12ba396afe19cb70730f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/920c4799bead614c21b12ba396afe19cb70730f3", "html_url": "https://github.com/rust-lang/rust/commit/920c4799bead614c21b12ba396afe19cb70730f3"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "85149a0f570788272b5658f72a614c5924843141", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/265dce66b6b1181f4b955032b742c702c753f6c8/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265dce66b6b1181f4b955032b742c702c753f6c8/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=265dce66b6b1181f4b955032b742c702c753f6c8", "patch": "@@ -130,9 +130,10 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// // an infinite iterator has no upper bound\n+    /// // and the maximum possible lower bound\n     /// let iter = 0..;\n     ///\n-    /// assert_eq!((0, None), iter.size_hint());\n+    /// assert_eq!((usize::max_value(), None), iter.size_hint());\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c0313333ea9ee41d604afcbc133968fc6606e3b6", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/265dce66b6b1181f4b955032b742c702c753f6c8/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265dce66b6b1181f4b955032b742c702c753f6c8/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=265dce66b6b1181f4b955032b742c702c753f6c8", "patch": "@@ -543,6 +543,11 @@ impl<A: Step> Iterator for ops::RangeFrom<A> where\n         mem::swap(&mut n, &mut self.start);\n         Some(n)\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (usize::MAX, None)\n+    }\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "44d5936c63edd5c6d6e0b256a4401dc3e50a3824", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/265dce66b6b1181f4b955032b742c702c753f6c8/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265dce66b6b1181f4b955032b742c702c753f6c8/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=265dce66b6b1181f4b955032b742c702c753f6c8", "patch": "@@ -764,6 +764,7 @@ fn test_iterator_size_hint() {\n     let v2 = &[10, 11, 12];\n     let vi = v.iter();\n \n+    assert_eq!((0..).size_hint(), (usize::MAX, None));\n     assert_eq!(c.size_hint(), (usize::MAX, None));\n     assert_eq!(vi.clone().size_hint(), (10, Some(10)));\n "}]}