{"sha": "798baebde1fe77e5a660490ec64e727a5d79970d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OGJhZWJkZTFmZTc3ZTVhNjYwNDkwZWM2NGU3MjdhNWQ3OTk3MGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-02T20:00:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-02T20:00:51Z"}, "message": "Auto merge of #86817 - JohnTitor:rollup-rcysc95, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #84029 (add `track_path::path` fn for usage in `proc_macro`s)\n - #85001 (Merge `sys_common::bytestring` back into `os_str_bytes`)\n - #86308 (Docs: clarify that certain intrinsics are not unsafe)\n - #86796 (Add a regression test for issue-70703)\n - #86803 (Remove & from Command::args calls in documentation)\n - #86807 (Fix double import in wasm thread )\n - #86813 (Add a help message to `unused_doc_comments` lint)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "271df8bcac32ffd8ffd2d52d4a56f0094cecdcbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271df8bcac32ffd8ffd2d52d4a56f0094cecdcbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798baebde1fe77e5a660490ec64e727a5d79970d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798baebde1fe77e5a660490ec64e727a5d79970d", "html_url": "https://github.com/rust-lang/rust/commit/798baebde1fe77e5a660490ec64e727a5d79970d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798baebde1fe77e5a660490ec64e727a5d79970d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2545459bff0aae43288e2e17bff0d332c49a6353", "url": "https://api.github.com/repos/rust-lang/rust/commits/2545459bff0aae43288e2e17bff0d332c49a6353", "html_url": "https://github.com/rust-lang/rust/commit/2545459bff0aae43288e2e17bff0d332c49a6353"}, {"sha": "1b136323dcd219241bf8b8949f50992a83b28954", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b136323dcd219241bf8b8949f50992a83b28954", "html_url": "https://github.com/rust-lang/rust/commit/1b136323dcd219241bf8b8949f50992a83b28954"}], "stats": {"total": 468, "additions": 410, "deletions": 58}, "files": [{"sha": "1d73002710d381b3b74a3c477cffabf3e1619610", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -411,6 +411,10 @@ impl server::FreeFunctions for Rustc<'_> {\n     fn track_env_var(&mut self, var: &str, value: Option<&str>) {\n         self.sess.env_depinfo.borrow_mut().insert((Symbol::intern(var), value.map(Symbol::intern)));\n     }\n+\n+    fn track_path(&mut self, path: &str) {\n+        self.sess.file_depinfo.borrow_mut().insert(Symbol::intern(path));\n+    }\n }\n \n impl server::TokenStream for Rustc<'_> {"}, {"sha": "c0f7ea8df49e465813b18446417fac926ef3b475", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -28,18 +28,18 @@ use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_query_impl::Queries as TcxQueries;\n use rustc_resolve::{Resolver, ResolverArenas};\n+use rustc_serialize::json;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode};\n use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n-use tracing::{info, warn};\n-\n-use rustc_serialize::json;\n use tempfile::Builder as TempFileBuilder;\n+use tracing::{info, warn};\n \n use std::any::Any;\n use std::cell::RefCell;\n@@ -594,6 +594,16 @@ fn write_out_deps(\n             .map(|fmap| escape_dep_filename(&fmap.name.prefer_local().to_string()))\n             .collect();\n \n+        // Account for explicitly marked-to-track files\n+        // (e.g. accessed in proc macros).\n+        let file_depinfo = sess.parse_sess.file_depinfo.borrow();\n+        let extra_tracked_files = file_depinfo.iter().map(|path_sym| {\n+            let path = PathBuf::from(&*path_sym.as_str());\n+            let file = FileName::from(path);\n+            escape_dep_filename(&file.prefer_local().to_string())\n+        });\n+        files.extend(extra_tracked_files);\n+\n         if let Some(ref backend) = sess.opts.debugging_opts.codegen_backend {\n             files.push(backend.to_string());\n         }"}, {"sha": "b303f55cf772b8af4a73efb55e3f5e6f0aad4190", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -984,13 +984,16 @@ impl EarlyLintPass for DeprecatedAttr {\n }\n \n fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &[ast::Attribute]) {\n+    use rustc_ast::token::CommentKind;\n+\n     let mut attrs = attrs.iter().peekable();\n \n     // Accumulate a single span for sugared doc comments.\n     let mut sugared_span: Option<Span> = None;\n \n     while let Some(attr) = attrs.next() {\n-        if attr.is_doc_comment() {\n+        let is_doc_comment = attr.is_doc_comment();\n+        if is_doc_comment {\n             sugared_span =\n                 Some(sugared_span.map_or(attr.span, |span| span.with_hi(attr.span.hi())));\n         }\n@@ -1001,13 +1004,21 @@ fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &\n \n         let span = sugared_span.take().unwrap_or(attr.span);\n \n-        if attr.is_doc_comment() || cx.sess().check_name(attr, sym::doc) {\n+        if is_doc_comment || cx.sess().check_name(attr, sym::doc) {\n             cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, |lint| {\n                 let mut err = lint.build(\"unused doc comment\");\n                 err.span_label(\n                     node_span,\n                     format!(\"rustdoc does not generate documentation for {}\", node_kind),\n                 );\n+                match attr.kind {\n+                    AttrKind::DocComment(CommentKind::Line, _) | AttrKind::Normal(..) => {\n+                        err.help(\"use `//` for a plain comment\");\n+                    }\n+                    AttrKind::DocComment(CommentKind::Block, _) => {\n+                        err.help(\"use `/* */` for a plain comment\");\n+                    }\n+                }\n                 err.emit();\n             });\n         }"}, {"sha": "226fde2343aab1a6d757466dc234e1521fe9a489", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -133,6 +133,8 @@ pub struct ParseSess {\n     pub reached_eof: Lock<bool>,\n     /// Environment variables accessed during the build and their values when they exist.\n     pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n+    /// File paths accessed during the build.\n+    pub file_depinfo: Lock<FxHashSet<Symbol>>,\n     /// All the type ascriptions expressions that have had a suggestion for likely path typo.\n     pub type_ascription_path_suggestions: Lock<FxHashSet<Span>>,\n     /// Whether cfg(version) should treat the current release as incomplete\n@@ -165,6 +167,7 @@ impl ParseSess {\n             symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),\n             env_depinfo: Default::default(),\n+            file_depinfo: Default::default(),\n             type_ascription_path_suggestions: Default::default(),\n             assume_incomplete_release: false,\n             proc_macro_quoted_spans: Default::default(),"}, {"sha": "882d5d54b7c9fa238b091d2e1df3668f3f9ac409", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -65,6 +65,10 @@ fn equate_intrinsic_type<'tcx>(\n /// Returns the unsafety of the given intrinsic.\n pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n     match intrinsic {\n+        // When adding a new intrinsic to this list,\n+        // it's usually worth updating that intrinsic's documentation\n+        // to note that it's safe to call, since\n+        // safe extern fns are otherwise unprecedented.\n         sym::abort\n         | sym::size_of\n         | sym::min_align_of"}, {"sha": "b4311bbe5f41fa6ccd3a6495776c0ed2d012ef02", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -712,6 +712,11 @@ extern \"rust-intrinsic\" {\n \n     /// Aborts the execution of the process.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// A more user-friendly and stable version of this operation is\n     /// [`std::process::abort`](../../std/process/fn.abort.html).\n     pub fn abort() -> !;\n@@ -745,6 +750,11 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Any use other than with `if` statements will probably not have an effect.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n     pub fn likely(b: bool) -> bool;\n@@ -754,6 +764,11 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Any use other than with `if` statements will probably not have an effect.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n     pub fn unlikely(b: bool) -> bool;\n@@ -765,6 +780,11 @@ extern \"rust-intrinsic\" {\n \n     /// The size of a type in bytes.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// More specifically, this is the offset in bytes between successive\n     /// items of the same type, including alignment padding.\n     ///\n@@ -774,6 +794,11 @@ extern \"rust-intrinsic\" {\n \n     /// The minimum alignment of a type.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is [`core::mem::align_of`].\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n@@ -796,6 +821,11 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a static string slice containing the name of a type.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is [`core::any::type_name`].\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n@@ -804,6 +834,11 @@ extern \"rust-intrinsic\" {\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n@@ -829,6 +864,11 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// Consider using [`core::panic::Location::caller`] instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n@@ -837,6 +877,11 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This exists solely for [`mem::forget_unsized`]; normal `forget` uses\n     /// `ManuallyDrop` instead.\n+    ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_intrinsic_forget\", issue = \"none\")]\n     pub fn forget<T: ?Sized>(_: T);\n \n@@ -1090,6 +1135,11 @@ extern \"rust-intrinsic\" {\n     /// If the actual type neither requires drop glue nor implements\n     /// `Copy`, then the return value of this function is unspecified.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is [`mem::needs_drop`](crate::mem::needs_drop).\n     #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.40.0\")]\n     pub fn needs_drop<T>() -> bool;\n@@ -1310,21 +1360,41 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the minimum of two `f32` values.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`f32::min`]\n     pub fn minnumf32(x: f32, y: f32) -> f32;\n     /// Returns the minimum of two `f64` values.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`f64::min`]\n     pub fn minnumf64(x: f64, y: f64) -> f64;\n     /// Returns the maximum of two `f32` values.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`f32::max`]\n     pub fn maxnumf32(x: f32, y: f32) -> f32;\n     /// Returns the maximum of two `f64` values.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`f64::max`]\n     pub fn maxnumf64(x: f64, y: f64) -> f64;\n@@ -1438,6 +1508,11 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the number of bits set in an integer type `T`\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `count_ones` method. For example,\n     /// [`u32::count_ones`]\n@@ -1446,6 +1521,11 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `leading_zeros` method. For example,\n     /// [`u32::leading_zeros`]\n@@ -1497,6 +1577,11 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `trailing_zeros` method. For example,\n     /// [`u32::trailing_zeros`]\n@@ -1548,6 +1633,11 @@ extern \"rust-intrinsic\" {\n \n     /// Reverses the bytes in an integer type `T`.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `swap_bytes` method. For example,\n     /// [`u32::swap_bytes`]\n@@ -1556,6 +1646,11 @@ extern \"rust-intrinsic\" {\n \n     /// Reverses the bits in an integer type `T`.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `reverse_bits` method. For example,\n     /// [`u32::reverse_bits`]\n@@ -1564,6 +1659,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs checked integer addition.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_add` method. For example,\n     /// [`u32::overflowing_add`]\n@@ -1572,6 +1672,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs checked integer subtraction\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_sub` method. For example,\n     /// [`u32::overflowing_sub`]\n@@ -1580,6 +1685,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs checked integer multiplication\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_mul` method. For example,\n     /// [`u32::overflowing_mul`]\n@@ -1649,6 +1759,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs rotate left.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_left` method. For example,\n     /// [`u32::rotate_left`]\n@@ -1657,6 +1772,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs rotate right.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_right` method. For example,\n     /// [`u32::rotate_right`]\n@@ -1665,20 +1785,35 @@ extern \"rust-intrinsic\" {\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`u32::wrapping_add`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_add<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`u32::wrapping_sub`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_sub<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`u32::wrapping_mul`]\n@@ -1687,13 +1822,23 @@ extern \"rust-intrinsic\" {\n \n     /// Computes `a + b`, saturating at numeric bounds.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,\n     /// [`u32::saturating_add`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_add<T: Copy>(a: T, b: T) -> T;\n     /// Computes `a - b`, saturating at numeric bounds.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_sub` method. For example,\n     /// [`u32::saturating_sub`]\n@@ -1703,13 +1848,23 @@ extern \"rust-intrinsic\" {\n     /// Returns the value of the discriminant for the variant in 'v';\n     /// if `T` has no discriminant, returns `0`.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The stabilized version of this intrinsic is [`core::mem::discriminant`].\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n \n     /// Returns the number of variants of the type `T` cast to a `usize`;\n     /// if `T` has no variants, returns `0`. Uninhabited variants will be counted.\n     ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n     /// The to-be-stabilized version of this intrinsic is [`mem::variant_count`].\n     #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n     pub fn variant_count<T>() -> usize;\n@@ -1732,10 +1887,20 @@ extern \"rust-intrinsic\" {\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// See documentation of `<*const T>::guaranteed_eq` for details.\n+    ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     pub fn ptr_guaranteed_eq<T>(ptr: *const T, other: *const T) -> bool;\n \n     /// See documentation of `<*const T>::guaranteed_ne` for details.\n+    ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n "}, {"sha": "b968d44fe488d4d573b021d54f7c2bb57dac428c", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -55,6 +55,7 @@ macro_rules! with_api {\n             FreeFunctions {\n                 fn drop($self: $S::FreeFunctions);\n                 fn track_env_var(var: &str, value: Option<&str>);\n+                fn track_path(path: &str);\n             },\n             TokenStream {\n                 fn drop($self: $S::TokenStream);"}, {"sha": "53fd58a29d877b72a81a8861efd23d81753d3e47", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -1234,3 +1234,17 @@ pub mod tracked_env {\n         value\n     }\n }\n+\n+/// Tracked access to additional files.\n+#[unstable(feature = \"track_path\", issue = \"73921\")]\n+pub mod tracked_path {\n+\n+    /// Track a file explicitly.\n+    ///\n+    /// Commonly used for tracking asset preprocessing.\n+    #[unstable(feature = \"track_path\", issue = \"73921\")]\n+    pub fn path<P: AsRef<str>>(path: P) {\n+        let path: &str = path.as_ref();\n+        crate::bridge::client::FreeFunctions::track_path(path);\n+    }\n+}"}, {"sha": "b46d3dfc1e7c6ebd0a64ad95def6aa3905c94154", "filename": "library/std/src/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -452,7 +452,7 @@ impl fmt::Debug for ChildStderr {\n ///\n /// let output = if cfg!(target_os = \"windows\") {\n ///     Command::new(\"cmd\")\n-///             .args(&[\"/C\", \"echo hello\"])\n+///             .args([\"/C\", \"echo hello\"])\n ///             .output()\n ///             .expect(\"failed to execute process\")\n /// } else {\n@@ -609,7 +609,7 @@ impl Command {\n     /// use std::process::Command;\n     ///\n     /// Command::new(\"ls\")\n-    ///         .args(&[\"-l\", \"-a\"])\n+    ///         .args([\"-l\", \"-a\"])\n     ///         .spawn()\n     ///         .expect(\"ls command failed to start\");\n     /// ```"}, {"sha": "a66ab0837570d59db4b152288d0d195349efac16", "filename": "library/std/src/sys/wasm/atomics/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -1,4 +1,3 @@\n-use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n use crate::num::NonZeroUsize;"}, {"sha": "97fba60c27109e3773cccf77c7ef9708be5cc084", "filename": "library/std/src/sys_common/bytestring.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,26 +0,0 @@\n-#![allow(dead_code)]\n-\n-#[cfg(test)]\n-mod tests;\n-\n-use crate::fmt::{Formatter, Result, Write};\n-use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n-\n-pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter<'_>) -> Result {\n-    // Writes out a valid unicode string with the correct escape sequences\n-    fn write_str_escaped(f: &mut Formatter<'_>, s: &str) -> Result {\n-        for c in s.chars().flat_map(|c| c.escape_debug()) {\n-            f.write_char(c)?\n-        }\n-        Ok(())\n-    }\n-\n-    f.write_str(\"\\\"\")?;\n-    for Utf8LossyChunk { valid, broken } in Utf8Lossy::from_bytes(slice).chunks() {\n-        write_str_escaped(f, valid)?;\n-        for b in broken {\n-            write!(f, \"\\\\x{:02X}\", b)?;\n-        }\n-    }\n-    f.write_str(\"\\\"\")\n-}"}, {"sha": "1685f087d183e49f81d35ced27e8f480c9cada81", "filename": "library/std/src/sys_common/bytestring/tests.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring%2Ftests.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,19 +0,0 @@\n-use super::*;\n-use crate::fmt::{Debug, Formatter, Result};\n-\n-#[test]\n-fn smoke() {\n-    struct Helper<'a>(&'a [u8]);\n-\n-    impl Debug for Helper<'_> {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-            debug_fmt_bytestring(self.0, f)\n-        }\n-    }\n-\n-    let input = b\"\\xF0hello,\\tworld\";\n-    let expected = r#\"\"\\xF0hello,\\tworld\"\"#;\n-    let output = format!(\"{:?}\", Helper(input));\n-\n-    assert!(output == expected);\n-}"}, {"sha": "db83bad60d84ccc7da38e5af755dbb37ab076022", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -21,7 +21,6 @@\n mod tests;\n \n pub mod backtrace;\n-pub mod bytestring;\n pub mod condvar;\n pub mod fs;\n pub mod io;"}, {"sha": "569600470db77a22126e835facb44f913d85c17b", "filename": "library/std/src/sys_common/os_str_bytes.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -2,16 +2,18 @@\n //! systems: just a `Vec<u8>`/`[u8]`.\n \n use crate::borrow::Cow;\n-\n use crate::fmt;\n+use crate::fmt::Write;\n use crate::mem;\n use crate::rc::Rc;\n use crate::str;\n use crate::sync::Arc;\n-use crate::sys_common::bytestring::debug_fmt_bytestring;\n use crate::sys_common::{AsInner, IntoInner};\n \n-use core::str::lossy::Utf8Lossy;\n+use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n+\n+#[cfg(test)]\n+mod tests;\n \n #[derive(Hash)]\n #[repr(transparent)]\n@@ -26,7 +28,19 @@ pub struct Slice {\n \n impl fmt::Debug for Slice {\n     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        debug_fmt_bytestring(&self.inner, formatter)\n+        // Writes out a valid unicode string with the correct escape sequences\n+\n+        formatter.write_str(\"\\\"\")?;\n+        for Utf8LossyChunk { valid, broken } in Utf8Lossy::from_bytes(&self.inner).chunks() {\n+            for c in valid.chars().flat_map(|c| c.escape_debug()) {\n+                formatter.write_char(c)?\n+            }\n+\n+            for b in broken {\n+                write!(formatter, \"\\\\x{:02X}\", b)?;\n+            }\n+        }\n+        formatter.write_str(\"\\\"\")\n     }\n }\n "}, {"sha": "379673781557389d37828b7431b05a080a12a954", "filename": "library/std/src/sys_common/os_str_bytes/tests.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes%2Ftests.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1,10 @@\n+use super::*;\n+\n+#[test]\n+fn slice_debug_output() {\n+    let input = Slice::from_u8_slice(b\"\\xF0hello,\\tworld\");\n+    let expected = r#\"\"\\xF0hello,\\tworld\"\"#;\n+    let output = format!(\"{:?}\", input);\n+\n+    assert_eq!(output, expected);\n+}"}, {"sha": "465d3744789b07b8ec8fb5beacece0d449e848b9", "filename": "src/test/run-make/track-path-dep-info/Makefile", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2FMakefile?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1,13 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# FIXME(eddyb) provide `HOST_RUSTC` and `TARGET_RUSTC`\n+# instead of hardcoding them everywhere they're needed.\n+ifeq ($(IS_MUSL_HOST),1)\n+ADDITIONAL_ARGS := $(RUSTFLAGS)\n+endif\n+\n+all:\n+\t# Proc macro\n+\t$(BARE_RUSTC) $(ADDITIONAL_ARGS) --out-dir $(TMPDIR) macro_def.rs\n+\tEXISTING_PROC_MACRO_ENV=1 $(RUSTC) --emit dep-info macro_use.rs\n+\t$(CGREP) \"emojis.txt:\" < $(TMPDIR)/macro_use.d"}, {"sha": "e1a728461f3c37997362d898b4704fc01a1e7e80", "filename": "src/test/run-make/track-path-dep-info/emojis.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Femojis.txt", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Femojis.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Femojis.txt?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1 @@\n+\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e\ud83d\udc7e"}, {"sha": "8777ce21f8b8234c888b469edd469f6a72c62521", "filename": "src/test/run-make/track-path-dep-info/macro_def.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_def.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1,11 @@\n+#![feature(track_path)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn access_tracked_paths(_: TokenStream) -> TokenStream {\n+    tracked_path::path(\"emojis.txt\");\n+    TokenStream::new()\n+}"}, {"sha": "3c49fd05dd9e0115dd44bc736b1e7b46ea720e32", "filename": "src/test/run-make/track-path-dep-info/macro_use.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrack-path-dep-info%2Fmacro_use.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1,6 @@\n+#[macro_use]\n+extern crate macro_def;\n+\n+access_tracked_paths!();\n+\n+fn main() {}"}, {"sha": "d90498e96ea77b45f41138c6056d07be3d46dcea", "filename": "src/test/ui/inference/issue-70703.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Finference%2Fissue-70703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Finference%2Fissue-70703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-70703.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+trait Factory {\n+    type Product;\n+}\n+\n+impl Factory for () {\n+    type Product = ();\n+}\n+\n+trait ProductConsumer<P> {\n+    fn consume(self, product: P);\n+}\n+\n+impl<P> ProductConsumer<P> for () {\n+    fn consume(self, _: P) {}\n+}\n+\n+fn make_product_consumer<F: Factory>(_: F) -> impl ProductConsumer<F::Product> {\n+    ()\n+}\n+\n+fn main() {\n+    let consumer = make_product_consumer(());\n+    consumer.consume(());\n+}"}, {"sha": "fd9baf8c6b9a28168e7433af05f1d3cd0ed15bb6", "filename": "src/test/ui/unused/unused-doc-comments-edge-cases.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-edge-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-edge-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-edge-cases.rs?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1,29 @@\n+#![deny(unused_doc_comments)]\n+\n+fn doc_comment_on_match_arms(num: u8) -> bool {\n+    match num {\n+        3 => true,\n+        /// useless doc comment\n+        //~^ ERROR: unused doc comment\n+        _ => false,\n+    }\n+}\n+\n+fn doc_comment_between_if_else(num: u8) -> bool {\n+    if num == 3 {\n+        true //~ ERROR: mismatched types\n+    }\n+    /// useless doc comment\n+    else { //~ ERROR: expected expression, found keyword `else`\n+        false\n+    }\n+}\n+\n+fn doc_comment_on_expr(num: u8) -> bool {\n+    /// useless doc comment\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| ERROR: unused doc comment\n+    num == 3\n+}\n+\n+fn main() {}"}, {"sha": "14db5f64b0c7406f7f11e1294918150a44585e1e", "filename": "src/test/ui/unused/unused-doc-comments-edge-cases.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-edge-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-edge-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-edge-cases.stderr?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -0,0 +1,61 @@\n+error: expected expression, found keyword `else`\n+  --> $DIR/unused-doc-comments-edge-cases.rs:17:5\n+   |\n+LL |     else {\n+   |     ^^^^ expected expression\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/unused-doc-comments-edge-cases.rs:23:5\n+   |\n+LL |     /// useless doc comment\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+   = help: `///` is for documentation comments. For a plain comment, use `//`.\n+\n+error: unused doc comment\n+  --> $DIR/unused-doc-comments-edge-cases.rs:6:9\n+   |\n+LL |         /// useless doc comment\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |         _ => false,\n+   |         ---------- rustdoc does not generate documentation for match arms\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-doc-comments-edge-cases.rs:1:9\n+   |\n+LL | #![deny(unused_doc_comments)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   = help: use `//` for a plain comment\n+\n+error: unused doc comment\n+  --> $DIR/unused-doc-comments-edge-cases.rs:23:5\n+   |\n+LL |     /// useless doc comment\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     num == 3\n+   |     --- rustdoc does not generate documentation for expressions\n+   |\n+   = help: use `//` for a plain comment\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unused-doc-comments-edge-cases.rs:14:9\n+   |\n+LL | /     if num == 3 {\n+LL | |         true\n+   | |         ^^^^ expected `()`, found `bool`\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |         return true;\n+   |         ^^^^^^     ^\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "0054426fb1ec0cccf257bf1436f41f1040c8ac38", "filename": "src/test/ui/unused/useless-comment.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Funused%2Fuseless-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/798baebde1fe77e5a660490ec64e727a5d79970d/src%2Ftest%2Fui%2Funused%2Fuseless-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Fuseless-comment.stderr?ref=798baebde1fe77e5a660490ec64e727a5d79970d", "patch": "@@ -26,6 +26,8 @@ LL |     /// a\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |     let x = 12;\n    |     ----------- rustdoc does not generate documentation for statements\n+   |\n+   = help: use `//` for a plain comment\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:16:5\n@@ -40,6 +42,8 @@ LL | |         1 => {},\n LL | |         _ => {}\n LL | |     }\n    | |_____- rustdoc does not generate documentation for expressions\n+   |\n+   = help: use `//` for a plain comment\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:20:9\n@@ -48,6 +52,8 @@ LL |         /// c\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |         1 => {},\n    |         ------- rustdoc does not generate documentation for match arms\n+   |\n+   = help: use `//` for a plain comment\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:25:5\n@@ -56,6 +62,8 @@ LL |     /// foo\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |     unsafe {}\n    |     --------- rustdoc does not generate documentation for expressions\n+   |\n+   = help: use `//` for a plain comment\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:28:5\n@@ -65,6 +73,8 @@ LL |     #[doc = \"foo\"]\n LL |     #[doc = \"bar\"]\n LL |     3;\n    |     - rustdoc does not generate documentation for expressions\n+   |\n+   = help: use `//` for a plain comment\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:29:5\n@@ -73,12 +83,16 @@ LL |     #[doc = \"bar\"]\n    |     ^^^^^^^^^^^^^^\n LL |     3;\n    |     - rustdoc does not generate documentation for expressions\n+   |\n+   = help: use `//` for a plain comment\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:35:13\n    |\n LL |     let x = /** comment */ 47;\n    |             ^^^^^^^^^^^^^^ -- rustdoc does not generate documentation for expressions\n+   |\n+   = help: use `/* */` for a plain comment\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:37:5\n@@ -89,6 +103,8 @@ LL | /     {\n LL | |\n LL | |     }\n    | |_____- rustdoc does not generate documentation for expressions\n+   |\n+   = help: use `//` for a plain comment\n \n error: aborting due to 10 previous errors\n "}]}