{"sha": "fad77175e1811bdd0991ed00dc1a10ade8721a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZDc3MTc1ZTE4MTFiZGQwOTkxZWQwMGRjMWExMGFkZTg3MjFhMGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-25T17:23:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-25T17:27:24Z"}, "message": "std: Touch various I/O documentation blocks\n\nThese are mostly touchups from the previous commit.", "tree": {"sha": "82046aad7850dba04c4bcc02587600d88a4b2108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82046aad7850dba04c4bcc02587600d88a4b2108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad77175e1811bdd0991ed00dc1a10ade8721a0b", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad77175e1811bdd0991ed00dc1a10ade8721a0b", "html_url": "https://github.com/rust-lang/rust/commit/fad77175e1811bdd0991ed00dc1a10ade8721a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad77175e1811bdd0991ed00dc1a10ade8721a0b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a424e84a3e0157f3f0160ae366ba469457cb6295", "url": "https://api.github.com/repos/rust-lang/rust/commits/a424e84a3e0157f3f0160ae366ba469457cb6295", "html_url": "https://github.com/rust-lang/rust/commit/a424e84a3e0157f3f0160ae366ba469457cb6295"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "3e193f246a82fdd24e7d85e01b44b730a4a44529", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=fad77175e1811bdd0991ed00dc1a10ade8721a0b", "patch": "@@ -302,7 +302,6 @@ impl fmt::Show for IoError {\n \n /// A list specifying general categories of I/O error.\n #[deriving(Eq, Clone, Show)]\n-#[allow(missing_doc)]\n pub enum IoErrorKind {\n     /// Any I/O error not part of this list.\n     OtherIoError,\n@@ -1428,7 +1427,6 @@ pub struct FileStat {\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n-#[allow(missing_doc)]\n #[deriving(Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file."}, {"sha": "95241813257d26996e1ba70dcb3187b4a6280c5f", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=fad77175e1811bdd0991ed00dc1a10ade8721a0b", "patch": "@@ -14,8 +14,6 @@\n //! The destination and binding addresses can either be an IPv4 or IPv6\n //! address. There is no corresponding notion of a server because UDP is a\n //! datagram protocol.\n-//!\n-//! A UDP connection implements the `Reader` and `Writer` traits.\n \n use clone::Clone;\n use result::{Ok, Err};\n@@ -24,6 +22,36 @@ use io::{Reader, Writer, IoResult};\n use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};\n \n /// A User Datagram Protocol socket.\n+///\n+/// This is an implementation of a bound UDP socket. This supports both IPv4 and\n+/// IPv6 addresses, and there is no corresponding notion of a server because UDP\n+/// is a datagram protocol.\n+///\n+/// # Example\n+///\n+/// ```rust,no_run\n+/// # #[allow(unused_must_use)];\n+/// use std::io::net::udp::UdpSocket;\n+/// use std::io::net::ip::{Ipv4Addr, SocketAddr};\n+///\n+/// let addr = SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 34254 };\n+/// let mut socket = match UdpSocket::bind(addr) {\n+///     Ok(s) => s,\n+///     Err(e) => fail!(\"couldn't bind socket: {}\", e),\n+/// };\n+///\n+/// let mut buf = [0, ..10];\n+/// match socket.recvfrom(buf) {\n+///     Ok((amt, src)) => {\n+///         // Send a reply to the socket we received data from\n+///         let buf = buf.mut_slice_to(amt);\n+///         buf.reverse();\n+///         socket.sendto(buf, src);\n+///     }\n+///     Err(e) => println!(\"couldn't receive a datagram: {}\", e)\n+/// }\n+/// drop(socket); // close the socket\n+/// ```\n pub struct UdpSocket {\n     priv obj: ~RtioUdpSocket\n }"}, {"sha": "202e26e2c93c11c71569b01e14ee8d69b051be67", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=fad77175e1811bdd0991ed00dc1a10ade8721a0b", "patch": "@@ -340,11 +340,11 @@ pub enum FPCategory {\n }\n \n /// Operations on primitive floating point numbers.\n-///\n-/// TODO(#5527): In a future version of Rust, many of these functions will become constants.\n-///\n-/// FIXME(#8888): Several of these functions have a parameter named `unused_self`. Removing it\n-/// requires #8888 to be fixed.\n+// FIXME(#5527): In a future version of Rust, many of these functions will\n+//               become constants.\n+//\n+// FIXME(#8888): Several of these functions have a parameter named\n+//               `unused_self`. Removing it requires #8888 to be fixed.\n pub trait Float: Signed + Round + Primitive {\n     /// Returns the maximum of the two numbers.\n     fn max(self, other: Self) -> Self;"}, {"sha": "eeebede6c5833c28be0e870c865a980ecd2c6fff", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad77175e1811bdd0991ed00dc1a10ade8721a0b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=fad77175e1811bdd0991ed00dc1a10ade8721a0b", "patch": "@@ -367,18 +367,16 @@ pub fn unsetenv(n: &str) {\n }\n \n /// A low-level OS in-memory pipe.\n-///\n-/// This type is deprecated in favor of the types in `std::io::pipe`.\n pub struct Pipe {\n-    /// A file descriptor representing the input end of the pipe.\n+    /// A file descriptor representing the reading end of the pipe. Data written\n+    /// on the `out` file descriptor can be read from this file descriptor.\n     input: c_int,\n-    /// A file descriptor representing the output end of the pipe.\n+    /// A file descriptor representing the write end of the pipe. Data written\n+    /// to this file descriptor can be read from the `input` file descriptor.\n     out: c_int,\n }\n \n /// Creates a new low-level OS in-memory pipe.\n-///\n-/// This function is deprecated in favor of the types in `std::io::pipe`.\n #[cfg(unix)]\n pub fn pipe() -> Pipe {\n     unsafe {\n@@ -390,8 +388,6 @@ pub fn pipe() -> Pipe {\n }\n \n /// Creates a new low-level OS in-memory pipe.\n-///\n-/// This function is deprecated in favor of the types in `std::io::pipe`.\n #[cfg(windows)]\n pub fn pipe() -> Pipe {\n     unsafe {"}]}