{"sha": "2855794257e36ec7393f3b7d8f4b99e5776f550f", "node_id": "C_kwDOAAsO6NoAKDI4NTU3OTQyNTdlMzZlYzczOTNmM2I3ZDhmNGI5OWU1Nzc2ZjU1MGY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-01T17:57:53Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-09T18:10:00Z"}, "message": "Use newtype for unused generic parameters", "tree": {"sha": "0d90d03a27e2d6b86dbdfd0233f71aeb804027e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d90d03a27e2d6b86dbdfd0233f71aeb804027e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2855794257e36ec7393f3b7d8f4b99e5776f550f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2855794257e36ec7393f3b7d8f4b99e5776f550f", "html_url": "https://github.com/rust-lang/rust/commit/2855794257e36ec7393f3b7d8f4b99e5776f550f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2855794257e36ec7393f3b7d8f4b99e5776f550f/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e0576bd3aec2f1acf935b353900bd75742860b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e0576bd3aec2f1acf935b353900bd75742860b", "html_url": "https://github.com/rust-lang/rust/commit/89e0576bd3aec2f1acf935b353900bd75742860b"}], "stats": {"total": 98, "additions": 65, "deletions": 33}, "files": [{"sha": "a61d3ab40a5ca1c0efa4c9d1339ef95bf38be99b", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -40,12 +40,11 @@ where\n                         let index = index\n                             .try_into()\n                             .expect(\"more generic parameters than can fit into a `u32`\");\n-                        let is_used = unused_params.contains(index).map_or(true, |unused| !unused);\n                         // Only recurse when generic parameters in fns, closures and generators\n                         // are used and require substitution.\n                         // Just in case there are closures or generators within this subst,\n                         // recurse.\n-                        if is_used && subst.needs_subst() {\n+                        if unused_params.is_used(index) && subst.needs_subst() {\n                             return subst.visit_with(self);\n                         }\n                     }"}, {"sha": "bdc4ae391f0435b1f9451886d82fd13cda584bdd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -1429,7 +1429,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let instance =\n                 ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));\n             let unused = tcx.unused_generic_params(instance);\n-            if !unused.is_empty() {\n+            if !unused.all_used() {\n                 record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n             }\n         }"}, {"sha": "bf9be714daf7e940b09c29bdc1819efee06106a6", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::bit_set::{BitSet, FiniteBitSet};\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -22,7 +22,7 @@ use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc_middle::mir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, ReprOptions, Ty};\n+use rustc_middle::ty::{self, ReprOptions, Ty, UnusedGenericParams};\n use rustc_middle::ty::{DeducedParamAttrs, GeneratorDiagnosticData, ParameterizedOverTcx, TyCtxt};\n use rustc_serialize::opaque::FileEncoder;\n use rustc_session::config::SymbolManglingVersion;\n@@ -384,7 +384,7 @@ define_tables! {\n     trait_item_def_id: Table<DefIndex, RawDefId>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n     expn_that_defined: Table<DefIndex, LazyValue<ExpnId>>,\n-    unused_generic_params: Table<DefIndex, LazyValue<FiniteBitSet<u32>>>,\n+    unused_generic_params: Table<DefIndex, LazyValue<UnusedGenericParams>>,\n     params_in_repr: Table<DefIndex, LazyValue<BitSet<u32>>>,\n     repr_options: Table<DefIndex, LazyValue<ReprOptions>>,\n     // `def_keys` and `def_path_hashes` represent a lazy version of a"}, {"sha": "076ce1bdb3486f52604e53a7843c9e45356bf7ba", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -1839,7 +1839,7 @@ rustc_queries! {\n         desc { \"getting codegen unit `{sym}`\" }\n     }\n \n-    query unused_generic_params(key: ty::InstanceDef<'tcx>) -> FiniteBitSet<u32> {\n+    query unused_generic_params(key: ty::InstanceDef<'tcx>) -> UnusedGenericParams {\n         cache_on_disk_if { key.def_id().is_local() }\n         desc {\n             |tcx| \"determining which generic parameters are unused by `{}`\","}, {"sha": "4ee4d7caec1f3c86593240e6a3da72eddc30202b", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::LangItem;\n+use rustc_index::bit_set::FiniteBitSet;\n use rustc_macros::HashStable;\n use rustc_middle::ty::normalize_erasing_regions::NormalizationError;\n use rustc_span::Symbol;\n@@ -711,7 +712,7 @@ fn polymorphize<'tcx>(\n     }\n \n     InternalSubsts::for_item(tcx, def_id, |param, _| {\n-        let is_unused = unused.contains(param.index).unwrap_or(false);\n+        let is_unused = unused.is_unused(param.index);\n         debug!(\"polymorphize: param={:?} is_unused={:?}\", param, is_unused);\n         match param.kind {\n             // Upvar case: If parameter is a type parameter..\n@@ -733,7 +734,7 @@ fn polymorphize<'tcx>(\n             // Simple case: If parameter is a const or type parameter..\n             ty::GenericParamDefKind::Const { .. } | ty::GenericParamDefKind::Type { .. } if\n                 // ..and is within range and unused..\n-                unused.contains(param.index).unwrap_or(false) =>\n+                unused.is_unused(param.index) =>\n                     // ..then use the identity for this parameter.\n                     tcx.mk_param_from_def(param),\n \n@@ -774,3 +775,36 @@ fn needs_fn_once_adapter_shim(\n         (ty::ClosureKind::FnMut | ty::ClosureKind::FnOnce, _) => Err(()),\n     }\n }\n+\n+// Set bits represent unused generic parameters.\n+// An empty set indicates that all parameters are used.\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Decodable, Encodable, HashStable)]\n+pub struct UnusedGenericParams(FiniteBitSet<u32>);\n+\n+impl UnusedGenericParams {\n+    pub fn new_all_unused(amount: u32) -> Self {\n+        let mut bitset = FiniteBitSet::new_empty();\n+        bitset.set_range(0..amount);\n+        Self(bitset)\n+    }\n+\n+    pub fn new_all_used() -> Self {\n+        Self(FiniteBitSet::new_empty())\n+    }\n+\n+    pub fn mark_used(&mut self, idx: u32) {\n+        self.0.clear(idx);\n+    }\n+\n+    pub fn is_unused(&self, idx: u32) -> bool {\n+        self.0.contains(idx).unwrap_or(false)\n+    }\n+\n+    pub fn is_used(&self, idx: u32) -> bool {\n+        !self.is_unused(idx)\n+    }\n+\n+    pub fn all_used(&self) -> bool {\n+        self.0.is_empty()\n+    }\n+}"}, {"sha": "fa571d480b6460e0c4d75e9cce13f70757d0fe61", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -86,7 +86,7 @@ pub use self::context::{\n     tls, CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GlobalCtxt, Lift, OnDiskCache, TyCtxt,\n     TyCtxtFeed,\n };\n-pub use self::instance::{Instance, InstanceDef, ShortInstance};\n+pub use self::instance::{Instance, InstanceDef, ShortInstance, UnusedGenericParams};\n pub use self::list::List;\n pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;"}, {"sha": "72f451985796b82ac54a5809cf1f7dfd8dec9bd8", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -60,6 +60,7 @@ trivially_parameterized_over_tcx! {\n     ty::ImplPolarity,\n     ty::ReprOptions,\n     ty::TraitDef,\n+    ty::UnusedGenericParams,\n     ty::Visibility<DefIndex>,\n     ty::adjustment::CoerceUnsizedInfo,\n     ty::fast_reject::SimplifiedType,"}, {"sha": "9d4ee22a7273beba58c8cb282379a132a7585c03", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -34,7 +34,7 @@ use crate::ty::layout::TyAndLayout;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;\n-use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt, UnusedGenericParams};\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n@@ -50,7 +50,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n-use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::cstore::{CrateDepKind, CrateSource};\n use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};"}, {"sha": "5233cfb21203ba470e434673a921670a82bc1960", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -32,13 +32,13 @@ pub struct TypeLengthLimit {\n     pub type_length: usize,\n }\n \n-pub struct UnusedGenericParams {\n+pub struct UnusedGenericParamsHint {\n     pub span: Span,\n     pub param_spans: Vec<Span>,\n     pub param_names: Vec<String>,\n }\n \n-impl IntoDiagnostic<'_> for UnusedGenericParams {\n+impl IntoDiagnostic<'_> for UnusedGenericParamsHint {\n     #[track_caller]\n     fn into_diagnostic(\n         self,"}, {"sha": "60fbdf2fc7a6ea096a38857f0378f1a5f48003d7", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855794257e36ec7393f3b7d8f4b99e5776f550f/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=2855794257e36ec7393f3b7d8f4b99e5776f550f", "patch": "@@ -6,7 +6,6 @@\n //! for their size, offset of a field, etc.).\n \n use rustc_hir::{def::DefKind, def_id::DefId, ConstContext};\n-use rustc_index::bit_set::FiniteBitSet;\n use rustc_middle::mir::{\n     self,\n     visit::{TyContext, Visitor},\n@@ -17,12 +16,12 @@ use rustc_middle::ty::{\n     query::Providers,\n     subst::SubstsRef,\n     visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor},\n-    Const, Ty, TyCtxt,\n+    Const, Ty, TyCtxt, UnusedGenericParams,\n };\n use rustc_span::symbol::sym;\n use std::ops::ControlFlow;\n \n-use crate::errors::UnusedGenericParams;\n+use crate::errors::UnusedGenericParamsHint;\n \n /// Provide implementations of queries relating to polymorphization analysis.\n pub fn provide(providers: &mut Providers) {\n@@ -36,31 +35,30 @@ pub fn provide(providers: &mut Providers) {\n fn unused_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n-) -> FiniteBitSet<u32> {\n+) -> UnusedGenericParams {\n     if !tcx.sess.opts.unstable_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n-        return FiniteBitSet::new_empty();\n+        return UnusedGenericParams::new_all_used();\n     }\n \n     let def_id = instance.def_id();\n     // Exit early if this instance should not be polymorphized.\n     if !should_polymorphize(tcx, def_id, instance) {\n-        return FiniteBitSet::new_empty();\n+        return UnusedGenericParams::new_all_used();\n     }\n \n     let generics = tcx.generics_of(def_id);\n     debug!(?generics);\n \n     // Exit early when there are no parameters to be unused.\n     if generics.count() == 0 {\n-        return FiniteBitSet::new_empty();\n+        return UnusedGenericParams::new_all_used();\n     }\n \n     // Create a bitset with N rightmost ones for each parameter.\n     let generics_count: u32 =\n         generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n-    let mut unused_parameters = FiniteBitSet::<u32>::new_empty();\n-    unused_parameters.set_range(0..generics_count);\n+    let mut unused_parameters = UnusedGenericParams::new_all_unused(generics_count);\n     debug!(?unused_parameters, \"(start)\");\n \n     mark_used_by_default_parameters(tcx, def_id, generics, &mut unused_parameters);\n@@ -78,7 +76,7 @@ fn unused_generic_params<'tcx>(\n     debug!(?unused_parameters, \"(end)\");\n \n     // Emit errors for debugging and testing if enabled.\n-    if !unused_parameters.is_empty() {\n+    if !unused_parameters.all_used() {\n         emit_unused_generic_params_error(tcx, def_id, generics, &unused_parameters);\n     }\n \n@@ -136,13 +134,13 @@ fn mark_used_by_default_parameters<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &mut FiniteBitSet<u32>,\n+    unused_parameters: &mut UnusedGenericParams,\n ) {\n     match tcx.def_kind(def_id) {\n         DefKind::Closure | DefKind::Generator => {\n             for param in &generics.params {\n                 debug!(?param, \"(closure/gen)\");\n-                unused_parameters.clear(param.index);\n+                unused_parameters.mark_used(param.index);\n             }\n         }\n         DefKind::Mod\n@@ -178,7 +176,7 @@ fn mark_used_by_default_parameters<'tcx>(\n             for param in &generics.params {\n                 debug!(?param, \"(other)\");\n                 if let ty::GenericParamDefKind::Lifetime = param.kind {\n-                    unused_parameters.clear(param.index);\n+                    unused_parameters.mark_used(param.index);\n                 }\n             }\n         }\n@@ -196,7 +194,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n-    unused_parameters: &FiniteBitSet<u32>,\n+    unused_parameters: &UnusedGenericParams,\n ) {\n     let base_def_id = tcx.typeck_root_def_id(def_id);\n     if !tcx.has_attr(base_def_id, sym::rustc_polymorphize_error) {\n@@ -213,7 +211,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     let mut next_generics = Some(generics);\n     while let Some(generics) = next_generics {\n         for param in &generics.params {\n-            if unused_parameters.contains(param.index).unwrap_or(false) {\n+            if unused_parameters.is_unused(param.index) {\n                 debug!(?param);\n                 let def_span = tcx.def_span(param.def_id);\n                 param_spans.push(def_span);\n@@ -224,14 +222,14 @@ fn emit_unused_generic_params_error<'tcx>(\n         next_generics = generics.parent.map(|did| tcx.generics_of(did));\n     }\n \n-    tcx.sess.emit_err(UnusedGenericParams { span: fn_span, param_spans, param_names });\n+    tcx.sess.emit_err(UnusedGenericParamsHint { span: fn_span, param_spans, param_names });\n }\n \n /// Visitor used to aggregate generic parameter uses.\n struct MarkUsedGenericParams<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-    unused_parameters: &'a mut FiniteBitSet<u32>,\n+    unused_parameters: &'a mut UnusedGenericParams,\n }\n \n impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n@@ -244,7 +242,7 @@ impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n         debug!(?self.unused_parameters, ?unused);\n         for (i, arg) in substs.iter().enumerate() {\n             let i = i.try_into().unwrap();\n-            if !unused.contains(i).unwrap_or(false) {\n+            if unused.is_used(i) {\n                 arg.visit_with(self);\n             }\n         }\n@@ -308,7 +306,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         match c.kind() {\n             ty::ConstKind::Param(param) => {\n                 debug!(?param);\n-                self.unused_parameters.clear(param.index);\n+                self.unused_parameters.mark_used(param.index);\n                 ControlFlow::CONTINUE\n             }\n             ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs })"}]}