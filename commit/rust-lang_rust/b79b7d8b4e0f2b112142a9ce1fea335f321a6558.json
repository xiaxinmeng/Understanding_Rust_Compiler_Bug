{"sha": "b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "node_id": "C_kwDOAAsO6NoAKGI3OWI3ZDhiNGUwZjJiMTEyMTQyYTljZTFmZWEzMzVmMzIxYTY1NTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T12:32:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T12:32:54Z"}, "message": "Auto merge of #101846 - chenyukang:fix-101793, r=davidtwco\n\nFix the wording of help msg for bitwise not\n\nFixes #101793", "tree": {"sha": "dc6a19284e0fad10ac77c06130c1ec97155c3332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6a19284e0fad10ac77c06130c1ec97155c3332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "html_url": "https://github.com/rust-lang/rust/commit/b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba4a389b3961a2fd72e01bd6cb0b0e065edaf3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba4a389b3961a2fd72e01bd6cb0b0e065edaf3d", "html_url": "https://github.com/rust-lang/rust/commit/cba4a389b3961a2fd72e01bd6cb0b0e065edaf3d"}, {"sha": "484b612909fed94c21846ec54832b676174c9b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/484b612909fed94c21846ec54832b676174c9b57", "html_url": "https://github.com/rust-lang/rust/commit/484b612909fed94c21846ec54832b676174c9b57"}], "stats": {"total": 138, "additions": 109, "deletions": 29}, "files": [{"sha": "9459cfebde936802708cbf97f2b037f834c18032", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -47,15 +47,17 @@ parser_invalid_comparison_operator = invalid comparison operator `{$invalid}`\n     .spaceship_operator_invalid = `<=>` is not a valid comparison operator, use `std::cmp::Ordering`\n \n parser_invalid_logical_operator = `{$incorrect}` is not a logical operator\n-    .note = unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+    .note = unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n     .use_amp_amp_for_conjunction = use `&&` to perform logical conjunction\n     .use_pipe_pipe_for_disjunction = use `||` to perform logical disjunction\n \n parser_tilde_is_not_unary_operator = `~` cannot be used as a unary operator\n     .suggestion = use `!` to perform bitwise not\n \n parser_unexpected_token_after_not = unexpected {$negated_desc} after identifier\n-    .suggestion = use `!` to perform logical negation\n+parser_unexpected_token_after_not_bitwise = use `!` to perform bitwise not\n+parser_unexpected_token_after_not_logical = use `!` to perform logical negation\n+parser_unexpected_token_after_not_default = use `!` to perform logical negation or bitwise not\n \n parser_malformed_loop_label = malformed loop label\n     .suggestion = use the correct loop label format"}, {"sha": "a65f523a0f45551978a03ff38f140443d10801ac", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -430,8 +430,32 @@ pub(crate) struct NotAsNegationOperator {\n     #[primary_span]\n     pub negated: Span,\n     pub negated_desc: String,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"!\")]\n-    pub not: Span,\n+    #[subdiagnostic]\n+    pub sub: NotAsNegationOperatorSub,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum NotAsNegationOperatorSub {\n+    #[suggestion_short(\n+        parser::unexpected_token_after_not_default,\n+        applicability = \"machine-applicable\",\n+        code = \"!\"\n+    )]\n+    SuggestNotDefault(#[primary_span] Span),\n+\n+    #[suggestion_short(\n+        parser::unexpected_token_after_not_bitwise,\n+        applicability = \"machine-applicable\",\n+        code = \"!\"\n+    )]\n+    SuggestNotBitwise(#[primary_span] Span),\n+\n+    #[suggestion_short(\n+        parser::unexpected_token_after_not_logical,\n+        applicability = \"machine-applicable\",\n+        code = \"!\"\n+    )]\n+    SuggestNotLogical(#[primary_span] Span),\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "f4f75f71e722c100cf3abb1680ee79a142c589a6", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -6,8 +6,9 @@ use super::diagnostics::{\n     InvalidComparisonOperatorSub, InvalidLogicalOperator, InvalidLogicalOperatorSub,\n     LeftArrowOperator, LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath,\n     MalformedLoopLabel, MissingInInForLoop, MissingInInForLoopSub, MissingSemicolonBeforeArray,\n-    NotAsNegationOperator, OuterAttributeNotAllowedOnIfElse, RequireColonAfterLabeledExpression,\n-    SnapshotParser, TildeAsUnaryOperator, UnexpectedTokenAfterLabel,\n+    NotAsNegationOperator, NotAsNegationOperatorSub, OuterAttributeNotAllowedOnIfElse,\n+    RequireColonAfterLabeledExpression, SnapshotParser, TildeAsUnaryOperator,\n+    UnexpectedTokenAfterLabel,\n };\n use super::pat::{CommaRecoveryMode, RecoverColon, RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n@@ -660,12 +661,23 @@ impl<'a> Parser<'a> {\n     fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         // Emit the error...\n         let negated_token = self.look_ahead(1, |t| t.clone());\n+\n+        let sub_diag = if negated_token.is_numeric_lit() {\n+            NotAsNegationOperatorSub::SuggestNotBitwise\n+        } else if negated_token.is_bool_lit() {\n+            NotAsNegationOperatorSub::SuggestNotLogical\n+        } else {\n+            NotAsNegationOperatorSub::SuggestNotDefault\n+        };\n+\n         self.sess.emit_err(NotAsNegationOperator {\n             negated: negated_token.span,\n             negated_desc: super::token_descr(&negated_token),\n             // Span the `not` plus trailing whitespace to avoid\n             // trailing whitespace after the `!` in our suggestion\n-            not: self.sess.source_map().span_until_non_whitespace(lo.to(negated_token.span)),\n+            sub: sub_diag(\n+                self.sess.source_map().span_until_non_whitespace(lo.to(negated_token.span)),\n+            ),\n         });\n \n         // ...and recover!"}, {"sha": "e566ed488c957b2d3ecdf74807dd7ff4ffd054e1", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -2,4 +2,9 @@\n \n fn main() {\n     let _x = !1; //~ ERROR cannot be used as a unary operator\n+    let _y = !1; //~ ERROR unexpected `1` after identifier\n+    let _z = !false; //~ ERROR unexpected keyword `false` after identifier\n+    let _a = !true; //~ ERROR unexpected keyword `true` after identifier\n+    let v = 1 + 2;\n+    let _v = !v; //~ ERROR unexpected `v` after identifier\n }"}, {"sha": "1708a80505dbd7095c7082fe07e0dc6dfd3285e4", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -2,4 +2,9 @@\n \n fn main() {\n     let _x = ~1; //~ ERROR cannot be used as a unary operator\n+    let _y = not 1; //~ ERROR unexpected `1` after identifier\n+    let _z = not false; //~ ERROR unexpected keyword `false` after identifier\n+    let _a = not true; //~ ERROR unexpected keyword `true` after identifier\n+    let v = 1 + 2;\n+    let _v = not v; //~ ERROR unexpected `v` after identifier\n }"}, {"sha": "2a3242abea49cdb27f5cc76c442a105e76721766", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -4,5 +4,37 @@ error: `~` cannot be used as a unary operator\n LL |     let _x = ~1;\n    |              ^ help: use `!` to perform bitwise not\n \n-error: aborting due to previous error\n+error: unexpected `1` after identifier\n+  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:5:18\n+   |\n+LL |     let _y = not 1;\n+   |              ----^\n+   |              |\n+   |              help: use `!` to perform bitwise not\n+\n+error: unexpected keyword `false` after identifier\n+  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:6:18\n+   |\n+LL |     let _z = not false;\n+   |              ----^^^^^\n+   |              |\n+   |              help: use `!` to perform logical negation\n+\n+error: unexpected keyword `true` after identifier\n+  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:7:18\n+   |\n+LL |     let _a = not true;\n+   |              ----^^^^\n+   |              |\n+   |              help: use `!` to perform logical negation\n+\n+error: unexpected `v` after identifier\n+  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:9:18\n+   |\n+LL |     let _v = not v;\n+   |              ----^\n+   |              |\n+   |              help: use `!` to perform logical negation or bitwise not\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "14918ba895325b2f3fc9f52de52cad5508924e9f", "filename": "src/test/ui/did_you_mean/issue-46836-identifier-not-instead-of-negation.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -4,21 +4,21 @@ error: unexpected `for_you` after identifier\n LL |     if not for_you {\n    |        ----^^^^^^^\n    |        |\n-   |        help: use `!` to perform logical negation\n+   |        help: use `!` to perform logical negation or bitwise not\n \n error: unexpected `the_worst` after identifier\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:11:15\n    |\n LL |     while not the_worst {\n    |           ----^^^^^^^^^\n    |           |\n-   |           help: use `!` to perform logical negation\n+   |           help: use `!` to perform logical negation or bitwise not\n \n error: unexpected `println` after identifier\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:20:9\n    |\n LL |     if not  // lack of braces is [sic]\n-   |        ----- help: use `!` to perform logical negation\n+   |        ----- help: use `!` to perform logical negation or bitwise not\n LL |         println!(\"Then when?\");\n    |         ^^^^^^^\n \n@@ -42,15 +42,15 @@ error: unexpected `2` after identifier\n LL |     let resource = not 2;\n    |                    ----^\n    |                    |\n-   |                    help: use `!` to perform logical negation\n+   |                    help: use `!` to perform bitwise not\n \n error: unexpected `be_smothered_out_before` after identifier\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:32:27\n    |\n LL |     let young_souls = not be_smothered_out_before;\n    |                       ----^^^^^^^^^^^^^^^^^^^^^^^\n    |                       |\n-   |                       help: use `!` to perform logical negation\n+   |                       help: use `!` to perform logical negation or bitwise not\n \n error: aborting due to 6 previous errors\n "}, {"sha": "cbe59e8e0af7e29edb2a980c1fc43c30b3b26303", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -4,63 +4,63 @@ error: `and` is not a logical operator\n LL |     let _ = a and b;\n    |               ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:9:10\n    |\n LL |     if a and b {\n    |          ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:20:15\n    |\n LL |     let _ = a or b;\n    |               ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:10\n    |\n LL |     if a or b {\n    |          ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:30:11\n    |\n LL |     if (a and b) {\n    |           ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:38:11\n    |\n LL |     if (a or b) {\n    |           ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:46:13\n    |\n LL |     while a and b {\n    |             ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:54:13\n    |\n LL |     while a or b {\n    |             ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:13:33"}, {"sha": "6455b0863f8f5733a3d17b58878594e55fe177ac", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b79b7d8b4e0f2b112142a9ce1fea335f321a6558/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr?ref=b79b7d8b4e0f2b112142a9ce1fea335f321a6558", "patch": "@@ -4,63 +4,63 @@ error: `and` is not a logical operator\n LL |     let _ = a and b;\n    |               ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n   --> $DIR/issue-54109-without-witness.rs:15:10\n    |\n LL |     if a and b {\n    |          ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-without-witness.rs:24:15\n    |\n LL |     let _ = a or b;\n    |               ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-without-witness.rs:26:10\n    |\n LL |     if a or b {\n    |          ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n   --> $DIR/issue-54109-without-witness.rs:34:11\n    |\n LL |     if (a and b) {\n    |           ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-without-witness.rs:42:11\n    |\n LL |     if (a or b) {\n    |           ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n   --> $DIR/issue-54109-without-witness.rs:50:13\n    |\n LL |     while a and b {\n    |             ^^^ help: use `&&` to perform logical conjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n   --> $DIR/issue-54109-without-witness.rs:58:13\n    |\n LL |     while a or b {\n    |             ^^ help: use `||` to perform logical disjunction\n    |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+   = note: unlike in e.g., Python and PHP, `&&` and `||` are used for logical operators\n \n error: aborting due to 8 previous errors\n "}]}