{"sha": "44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDUyNWQ0ZTAyYThhNGYyZTIxY2RlMzM3N2M0YzBiZDkyNjliNDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-25T07:01:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-25T07:01:14Z"}, "message": "Merge #5048\n\n5048: Unify code style for worker threads r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f486439231cff1dcd0ef118bbbe72708d9113d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f486439231cff1dcd0ef118bbbe72708d9113d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9Eu6CRBK7hj4Ov3rIwAAdHIIACLWSKXrsFydWKs0LkwN4xy7\nNKb6w3bcOlBXZJ3kgvyWGSnu2WZJbIGe+EteDMb0ylBPPiBUobYj4f5/7cZCOrnU\nNdYnZtgUGh72YpHO2y5zlDxfCK4A1BQpm0y7LGbckfuKvOc4jVQ6Rx5VyxPSjUd5\nOq4tMXqJQM4Mh3hBy98bppe+vVfNnCwOkultil+UmaAwxzn4ep1LnGz7JSRAg5FC\nmPjPAr11Sk8WwXhCP1tvdFQO7mZEp9D3ggP1hq5NG2sKm5CkY0orI3S4s5T2ImsD\nQTfeFxsSUpj33cyzLvc270osiDa/5v84x1cb0mZM/zT4yBoqEGDIFd6hQFPO0IE=\n=WTaL\n-----END PGP SIGNATURE-----\n", "payload": "tree f486439231cff1dcd0ef118bbbe72708d9113d75\nparent fb70eb6e21da82c585d06e57c3c78f4aed4878f3\nparent 5a184fe85517507fd3b07c6fb36b017e558665f7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593068474 +0000\ncommitter GitHub <noreply@github.com> 1593068474 +0000\n\nMerge #5048\n\n5048: Unify code style for worker threads r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "html_url": "https://github.com/rust-lang/rust/commit/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb70eb6e21da82c585d06e57c3c78f4aed4878f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb70eb6e21da82c585d06e57c3c78f4aed4878f3", "html_url": "https://github.com/rust-lang/rust/commit/fb70eb6e21da82c585d06e57c3c78f4aed4878f3"}, {"sha": "5a184fe85517507fd3b07c6fb36b017e558665f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a184fe85517507fd3b07c6fb36b017e558665f7", "html_url": "https://github.com/rust-lang/rust/commit/5a184fe85517507fd3b07c6fb36b017e558665f7"}], "stats": {"total": 116, "additions": 66, "deletions": 50}, "files": [{"sha": "af75adbe229673a21969d2d90110cf767882735e", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "patch": "@@ -48,21 +48,23 @@ impl fmt::Display for FlycheckConfig {\n /// diagnostics based on the output.\n /// The spawned thread is shut down when this struct is dropped.\n #[derive(Debug)]\n-pub struct Flycheck {\n+pub struct FlycheckHandle {\n     // XXX: drop order is significant\n     cmd_send: Sender<CheckCommand>,\n     handle: jod_thread::JoinHandle<()>,\n-    pub task_recv: Receiver<CheckTask>,\n }\n \n-impl Flycheck {\n-    pub fn new(config: FlycheckConfig, workspace_root: PathBuf) -> Flycheck {\n-        let (task_send, task_recv) = unbounded::<CheckTask>();\n+impl FlycheckHandle {\n+    pub fn spawn(\n+        sender: Box<dyn Fn(CheckTask) + Send>,\n+        config: FlycheckConfig,\n+        workspace_root: PathBuf,\n+    ) -> FlycheckHandle {\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let handle = jod_thread::spawn(move || {\n-            FlycheckThread::new(config, workspace_root).run(&task_send, &cmd_recv);\n+            FlycheckActor::new(sender, config, workspace_root).run(&cmd_recv);\n         });\n-        Flycheck { task_recv, cmd_send, handle }\n+        FlycheckHandle { cmd_send, handle }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n@@ -95,7 +97,8 @@ pub enum CheckCommand {\n     Update,\n }\n \n-struct FlycheckThread {\n+struct FlycheckActor {\n+    sender: Box<dyn Fn(CheckTask) + Send>,\n     config: FlycheckConfig,\n     workspace_root: PathBuf,\n     last_update_req: Option<Instant>,\n@@ -109,9 +112,14 @@ struct FlycheckThread {\n     check_process: Option<jod_thread::JoinHandle<()>>,\n }\n \n-impl FlycheckThread {\n-    fn new(config: FlycheckConfig, workspace_root: PathBuf) -> FlycheckThread {\n-        FlycheckThread {\n+impl FlycheckActor {\n+    fn new(\n+        sender: Box<dyn Fn(CheckTask) + Send>,\n+        config: FlycheckConfig,\n+        workspace_root: PathBuf,\n+    ) -> FlycheckActor {\n+        FlycheckActor {\n+            sender,\n             config,\n             workspace_root,\n             last_update_req: None,\n@@ -120,9 +128,9 @@ impl FlycheckThread {\n         }\n     }\n \n-    fn run(&mut self, task_send: &Sender<CheckTask>, cmd_recv: &Receiver<CheckCommand>) {\n+    fn run(&mut self, cmd_recv: &Receiver<CheckCommand>) {\n         // If we rerun the thread, we need to discard the previous check results first\n-        self.clean_previous_results(task_send);\n+        self.clean_previous_results();\n \n         loop {\n             select! {\n@@ -134,7 +142,7 @@ impl FlycheckThread {\n                     },\n                 },\n                 recv(self.message_recv) -> msg => match msg {\n-                    Ok(msg) => self.handle_message(msg, task_send),\n+                    Ok(msg) => self.handle_message(msg),\n                     Err(RecvError) => {\n                         // Watcher finished, replace it with a never channel to\n                         // avoid busy-waiting.\n@@ -146,15 +154,15 @@ impl FlycheckThread {\n \n             if self.should_recheck() {\n                 self.last_update_req = None;\n-                task_send.send(CheckTask::ClearDiagnostics).unwrap();\n+                self.send(CheckTask::ClearDiagnostics);\n                 self.restart_check_process();\n             }\n         }\n     }\n \n-    fn clean_previous_results(&self, task_send: &Sender<CheckTask>) {\n-        task_send.send(CheckTask::ClearDiagnostics).unwrap();\n-        task_send.send(CheckTask::Status(Status::End)).unwrap();\n+    fn clean_previous_results(&self) {\n+        self.send(CheckTask::ClearDiagnostics);\n+        self.send(CheckTask::Status(Status::End));\n     }\n \n     fn should_recheck(&mut self) -> bool {\n@@ -173,27 +181,25 @@ impl FlycheckThread {\n         }\n     }\n \n-    fn handle_message(&self, msg: CheckEvent, task_send: &Sender<CheckTask>) {\n+    fn handle_message(&self, msg: CheckEvent) {\n         match msg {\n             CheckEvent::Begin => {\n-                task_send.send(CheckTask::Status(Status::Being)).unwrap();\n+                self.send(CheckTask::Status(Status::Being));\n             }\n \n             CheckEvent::End => {\n-                task_send.send(CheckTask::Status(Status::End)).unwrap();\n+                self.send(CheckTask::Status(Status::End));\n             }\n \n             CheckEvent::Msg(Message::CompilerArtifact(msg)) => {\n-                task_send.send(CheckTask::Status(Status::Progress(msg.target.name))).unwrap();\n+                self.send(CheckTask::Status(Status::Progress(msg.target.name)));\n             }\n \n             CheckEvent::Msg(Message::CompilerMessage(msg)) => {\n-                task_send\n-                    .send(CheckTask::AddDiagnostic {\n-                        workspace_root: self.workspace_root.clone(),\n-                        diagnostic: msg.message,\n-                    })\n-                    .unwrap();\n+                self.send(CheckTask::AddDiagnostic {\n+                    workspace_root: self.workspace_root.clone(),\n+                    diagnostic: msg.message,\n+                });\n             }\n \n             CheckEvent::Msg(Message::BuildScriptExecuted(_msg)) => {}\n@@ -271,6 +277,10 @@ impl FlycheckThread {\n             let _ = message_send.send(CheckEvent::End);\n         }))\n     }\n+\n+    fn send(&self, check_task: CheckTask) {\n+        (self.sender)(check_task)\n+    }\n }\n \n enum CheckEvent {"}, {"sha": "c5cf5ff27bac5ef4d1c485b27c8d5f2d9882b155", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "patch": "@@ -28,7 +28,7 @@ pub fn load_cargo(\n     let mut vfs = vfs::Vfs::default();\n     let mut loader = {\n         let loader =\n-            vfs_notify::LoaderHandle::spawn(Box::new(move |msg| sender.send(msg).unwrap()));\n+            vfs_notify::NotifyHandle::spawn(Box::new(move |msg| sender.send(msg).unwrap()));\n         Box::new(loader)\n     };\n "}, {"sha": "c022ff705a5c407b915c12d740e5096b1cfc1509", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "patch": "@@ -9,7 +9,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_db::{CrateId, SourceRoot, VfsPath};\n-use ra_flycheck::{Flycheck, FlycheckConfig};\n+use ra_flycheck::{CheckTask, FlycheckConfig, FlycheckHandle};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n use stdx::format_to;\n@@ -27,12 +27,18 @@ use crate::{\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n \n-fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) -> Option<Flycheck> {\n+fn create_flycheck(\n+    workspaces: &[ProjectWorkspace],\n+    config: &FlycheckConfig,\n+) -> Option<(FlycheckHandle, Receiver<CheckTask>)> {\n     // FIXME: Figure out the multi-workspace situation\n     workspaces.iter().find_map(move |w| match w {\n         ProjectWorkspace::Cargo { cargo, .. } => {\n+            let (sender, receiver) = unbounded();\n+            let sender = Box::new(move |msg| sender.send(msg).unwrap());\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n-            Some(Flycheck::new(config.clone(), cargo_project_root.into()))\n+            let flycheck = FlycheckHandle::spawn(sender, config.clone(), cargo_project_root.into());\n+            Some((flycheck, receiver))\n         }\n         ProjectWorkspace::Json { .. } => {\n             log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n@@ -63,7 +69,7 @@ pub(crate) struct GlobalState {\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) loader: Box<dyn vfs::loader::Handle>,\n     pub(crate) task_receiver: Receiver<vfs::loader::Message>,\n-    pub(crate) flycheck: Option<Flycheck>,\n+    pub(crate) flycheck: Option<(FlycheckHandle, Receiver<CheckTask>)>,\n     pub(crate) diagnostics: DiagnosticCollection,\n     pub(crate) mem_docs: FxHashSet<VfsPath>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n@@ -115,7 +121,7 @@ impl GlobalState {\n         };\n \n         let mut loader = {\n-            let loader = vfs_notify::LoaderHandle::spawn(Box::new(move |msg| {\n+            let loader = vfs_notify::NotifyHandle::spawn(Box::new(move |msg| {\n                 task_sender.send(msg).unwrap()\n             }));\n             Box::new(loader)"}, {"sha": "e5f82de5ed78688d6dd8ff7f3d0d5788fe0be412", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "patch": "@@ -136,7 +136,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                     Ok(task) => Event::Vfs(task),\n                     Err(RecvError) => return Err(\"vfs died\".into()),\n                 },\n-                recv(global_state.flycheck.as_ref().map_or(&never(), |it| &it.task_recv)) -> task => match task {\n+                recv(global_state.flycheck.as_ref().map_or(&never(), |it| &it.1)) -> task => match task {\n                     Ok(task) => Event::CheckWatcher(task),\n                     Err(RecvError) => return Err(\"check watcher died\".into()),\n                 },\n@@ -290,7 +290,7 @@ fn loop_turn(\n \n     if became_ready {\n         if let Some(flycheck) = &global_state.flycheck {\n-            flycheck.update();\n+            flycheck.0.update();\n         }\n     }\n \n@@ -486,7 +486,7 @@ fn on_notification(\n     let not = match notification_cast::<lsp_types::notification::DidSaveTextDocument>(not) {\n         Ok(_params) => {\n             if let Some(flycheck) = &global_state.flycheck {\n-                flycheck.update();\n+                flycheck.0.update();\n             }\n             return Ok(());\n         }"}, {"sha": "282cf0358071be31d1419830a34ecb0acccfcd01", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d525d4e02a8a4f2e21cde3377c4c0bd9269b41/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=44d525d4e02a8a4f2e21cde3377c4c0bd9269b41", "patch": "@@ -20,7 +20,7 @@ use walkdir::WalkDir;\n use crate::include::Include;\n \n #[derive(Debug)]\n-pub struct LoaderHandle {\n+pub struct NotifyHandle {\n     // Relative order of fields below is significant.\n     sender: crossbeam_channel::Sender<Message>,\n     _thread: jod_thread::JoinHandle,\n@@ -32,12 +32,12 @@ enum Message {\n     Invalidate(AbsPathBuf),\n }\n \n-impl loader::Handle for LoaderHandle {\n-    fn spawn(sender: loader::Sender) -> LoaderHandle {\n-        let actor = LoaderActor::new(sender);\n+impl loader::Handle for NotifyHandle {\n+    fn spawn(sender: loader::Sender) -> NotifyHandle {\n+        let actor = NotifyActor::new(sender);\n         let (sender, receiver) = unbounded::<Message>();\n         let thread = jod_thread::spawn(move || actor.run(receiver));\n-        LoaderHandle { sender, _thread: thread }\n+        NotifyHandle { sender, _thread: thread }\n     }\n     fn set_config(&mut self, config: loader::Config) {\n         self.sender.send(Message::Config(config)).unwrap()\n@@ -52,10 +52,10 @@ impl loader::Handle for LoaderHandle {\n \n type NotifyEvent = notify::Result<notify::Event>;\n \n-struct LoaderActor {\n+struct NotifyActor {\n+    sender: loader::Sender,\n     config: Vec<(AbsPathBuf, Include, bool)>,\n     watched_paths: FxHashSet<AbsPathBuf>,\n-    sender: loader::Sender,\n     // Drop order of fields bellow is significant,\n     watcher: Option<RecommendedWatcher>,\n     watcher_receiver: Receiver<NotifyEvent>,\n@@ -67,19 +67,19 @@ enum Event {\n     NotifyEvent(NotifyEvent),\n }\n \n-impl LoaderActor {\n-    fn new(sender: loader::Sender) -> LoaderActor {\n+impl NotifyActor {\n+    fn new(sender: loader::Sender) -> NotifyActor {\n         let (watcher_sender, watcher_receiver) = unbounded();\n         let watcher = log_notify_error(Watcher::new_immediate(move |event| {\n             watcher_sender.send(event).unwrap()\n         }));\n \n-        LoaderActor {\n-            watcher,\n-            watcher_receiver,\n-            watched_paths: FxHashSet::default(),\n+        NotifyActor {\n             sender,\n             config: Vec::new(),\n+            watched_paths: FxHashSet::default(),\n+            watcher,\n+            watcher_receiver,\n         }\n     }\n "}]}