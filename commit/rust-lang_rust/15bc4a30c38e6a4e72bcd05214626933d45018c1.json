{"sha": "15bc4a30c38e6a4e72bcd05214626933d45018c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YmM0YTMwYzM4ZTZhNGU3MmJjZDA1MjE0NjI2OTMzZDQ1MDE4YzE=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-26T19:23:41Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-28T02:52:25Z"}, "message": "Address nits", "tree": {"sha": "941586938e702e38250cd1c39fb9198f45384f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/941586938e702e38250cd1c39fb9198f45384f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15bc4a30c38e6a4e72bcd05214626933d45018c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15bc4a30c38e6a4e72bcd05214626933d45018c1", "html_url": "https://github.com/rust-lang/rust/commit/15bc4a30c38e6a4e72bcd05214626933d45018c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15bc4a30c38e6a4e72bcd05214626933d45018c1/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b3684872d42e531ce3f51edc914b3917658905", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b3684872d42e531ce3f51edc914b3917658905", "html_url": "https://github.com/rust-lang/rust/commit/e5b3684872d42e531ce3f51edc914b3917658905"}], "stats": {"total": 243, "additions": 92, "deletions": 151}, "files": [{"sha": "d2c79e1d820bf98751cb81b562eda485f0f5006d", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -1051,7 +1051,12 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n                     var_id: var_id,\n                     closure_expr_id: id\n                 };\n-                let upvar_capture = tcx.tables.borrow().upvar_capture_map.get(&upvar_id).unwrap().clone();\n+                let upvar_capture = tcx.tables\n+                                       .borrow()\n+                                       .upvar_capture_map\n+                                       .get(&upvar_id)\n+                                       .unwrap()\n+                                       .clone();\n                 var_id.encode(rbml_w);\n                 upvar_capture.encode(rbml_w);\n             })"}, {"sha": "c355e8b82a6ef9f201b8fe8b982ded75db45cff6", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -87,6 +87,11 @@ pub struct InferCtxt<'a, 'tcx: 'a> {\n \n     pub parameter_environment: ty::ParameterEnvironment<'a, 'tcx>,\n \n+    // This is a temporary field used for toggling on normalization in the inference context,\n+    // as we move towards the approach described here:\n+    // https://internals.rust-lang.org/t/flattening-the-contexts-for-fun-and-profit/2293\n+    // At a point sometime in the future normalization will be done by the typing context\n+    // directly.\n     normalize: bool,\n \n     err_count_on_creation: usize,\n@@ -334,7 +339,7 @@ pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n         float_unification_table: RefCell::new(UnificationTable::new()),\n         region_vars: RegionVarBindings::new(tcx),\n         parameter_environment: param_env.unwrap_or(tcx.empty_parameter_environment()),\n-        normalize: true,\n+        normalize: false,\n         err_count_on_creation: tcx.sess.err_count()\n     }\n }\n@@ -487,7 +492,8 @@ impl<'a, 'tcx> mc::Typer<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     fn adjustments(&self) -> Ref<NodeMap<ty::AutoAdjustment<'tcx>>> {\n-        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>) -> &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n+        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>)\n+                                        -> &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n             &tables.adjustments\n         }\n \n@@ -524,8 +530,7 @@ impl<'a, 'tcx> ty::ClosureTyper<'tcx> for InferCtxt<'a, 'tcx> {\n                     substs: &subst::Substs<'tcx>)\n                     -> ty::ClosureTy<'tcx>\n     {\n-        // the substitutions in `substs` are already monomorphized,\n-        // but we still must normalize associated types\n+\n         let closure_ty = self.tables\n                              .borrow()\n                              .closure_tys\n@@ -534,8 +539,15 @@ impl<'a, 'tcx> ty::ClosureTyper<'tcx> for InferCtxt<'a, 'tcx> {\n                              .subst(self.tcx, substs);\n \n         if self.normalize {\n-            // NOTE: this flag is *always* set to false currently\n-            panic!(\"issue XXXX: must finish fulfill refactor\") // normalize_associated_type(self.param_env.tcx, &closure_ty)\n+            // NOTE: this flag is currently *always* set to false, we are slowly folding\n+            // normalization into this trait and will come back to remove this in the near\n+            // future.\n+\n+            // code from NormalizingClosureTyper:\n+            // the substitutions in `substs` are already monomorphized,\n+            // but we still must normalize associated types\n+            // normalize_associated_type(self.param_env.tcx, &closure_ty)\n+            panic!(\"see issue 26597: fufillment context refactor must occur\")\n         } else {\n             closure_ty\n         }\n@@ -546,13 +558,18 @@ impl<'a, 'tcx> ty::ClosureTyper<'tcx> for InferCtxt<'a, 'tcx> {\n                       substs: &Substs<'tcx>)\n                       -> Option<Vec<ty::ClosureUpvar<'tcx>>>\n     {\n-        // the substitutions in `substs` are already monomorphized,\n-        // but we still must normalize associated types\n-        let result = ty::ctxt::closure_upvars(self, def_id, substs)\n+        let result = ty::ctxt::closure_upvars(self, def_id, substs);\n \n         if self.normalize {\n-            // NOTE: this flag is *always* set to false currently\n-            panic!(\"issue XXXX: must finish fulfill refactor\") // monomorphize::normalize_associated_type(self.param_env.tcx, &result)\n+            // NOTE: this flag is currently *always* set to false, we are slowly folding\n+            // normalization into this trait and will come back to remove this in the near\n+            // future.\n+\n+            // code from NormalizingClosureTyper:\n+            // the substitutions in `substs` are already monomorphized,\n+            // but we still must normalize associated types\n+            // monomorphize::normalize_associated_type(self.param_env.tcx, &result)\n+            panic!(\"see issue 26597: fufillment context refactor must occur\")\n         } else {\n             result\n         }\n@@ -1004,7 +1021,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match self.tables.borrow().node_types.get(&id) {\n             Some(&t) => t,\n             // FIXME\n-            None if self.tcx.sess.err_count() - self.err_count_on_creation != 0 => self.tcx.types.err,\n+            None if self.tcx.sess.err_count() - self.err_count_on_creation != 0 =>\n+                self.tcx.types.err,\n             None => {\n                 self.tcx.sess.bug(\n                     &format!(\"no type for node {}: {} in fcx\","}, {"sha": "9df6ed5d68126cf7923bf2d0a6d02b1f3c7b708b", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -351,7 +351,7 @@ pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n     }\n }\n \n-// TODO: this is gonna need to be removed ...\n+// FIXME: this is gonna need to be removed ...\n /// Normalizes the parameter environment, reporting errors if they occur.\n pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvironment<'a,'tcx>,\n                                              cause: ObligationCause<'tcx>)"}, {"sha": "489ce7bc4cf78c102eb07846f8d5fd17dcec4f97", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -3222,84 +3222,6 @@ impl<'tcx> CommonTypes<'tcx> {\n     }\n }\n \n-/// Create a type context and call the closure with a `&ty::ctxt` reference\n-/// to the context. The closure enforces that the type context and any interned\n-/// value (types, substs, etc.) can only be used while `ty::tls` has a valid\n-/// reference to the context, to allow formatting values that need it.\n-pub fn with_ctxt<'tcx, F, R>(s: Session,\n-                             arenas: &'tcx CtxtArenas<'tcx>,\n-                             def_map: DefMap,\n-                             named_region_map: resolve_lifetime::NamedRegionMap,\n-                             map: ast_map::Map<'tcx>,\n-                             freevars: RefCell<FreevarMap>,\n-                             region_maps: RegionMaps,\n-                             lang_items: middle::lang_items::LanguageItems,\n-                             stability: stability::Index<'tcx>,\n-                             f: F) -> (Session, R)\n-                             where F: FnOnce(&ctxt<'tcx>) -> R\n-{\n-    let mut interner = FnvHashMap();\n-    let common_types = CommonTypes::new(&arenas.type_, &mut interner);\n-\n-    tls::enter(ctxt {\n-        arenas: arenas,\n-        interner: RefCell::new(interner),\n-        substs_interner: RefCell::new(FnvHashMap()),\n-        bare_fn_interner: RefCell::new(FnvHashMap()),\n-        region_interner: RefCell::new(FnvHashMap()),\n-        stability_interner: RefCell::new(FnvHashMap()),\n-        types: common_types,\n-        named_region_map: named_region_map,\n-        region_maps: region_maps,\n-        free_region_maps: RefCell::new(FnvHashMap()),\n-        item_variance_map: RefCell::new(DefIdMap()),\n-        variance_computed: Cell::new(false),\n-        sess: s,\n-        def_map: def_map,\n-        tables: RefCell::new(Tables::empty()),\n-        impl_trait_refs: RefCell::new(DefIdMap()),\n-        trait_defs: RefCell::new(DefIdMap()),\n-        predicates: RefCell::new(DefIdMap()),\n-        super_predicates: RefCell::new(DefIdMap()),\n-        fulfilled_predicates: RefCell::new(traits::FulfilledPredicates::new()),\n-        map: map,\n-        freevars: freevars,\n-        tcache: RefCell::new(DefIdMap()),\n-        rcache: RefCell::new(FnvHashMap()),\n-        tc_cache: RefCell::new(FnvHashMap()),\n-        ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n-        enum_var_cache: RefCell::new(DefIdMap()),\n-        impl_or_trait_items: RefCell::new(DefIdMap()),\n-        trait_item_def_ids: RefCell::new(DefIdMap()),\n-        trait_items_cache: RefCell::new(DefIdMap()),\n-        ty_param_defs: RefCell::new(NodeMap()),\n-        normalized_cache: RefCell::new(FnvHashMap()),\n-        lang_items: lang_items,\n-        provided_method_sources: RefCell::new(DefIdMap()),\n-        struct_fields: RefCell::new(DefIdMap()),\n-        destructor_for_type: RefCell::new(DefIdMap()),\n-        destructors: RefCell::new(DefIdSet()),\n-        inherent_impls: RefCell::new(DefIdMap()),\n-        impl_items: RefCell::new(DefIdMap()),\n-        used_unsafe: RefCell::new(NodeSet()),\n-        used_mut_nodes: RefCell::new(NodeSet()),\n-        populated_external_types: RefCell::new(DefIdSet()),\n-        populated_external_primitive_impls: RefCell::new(DefIdSet()),\n-        extern_const_statics: RefCell::new(DefIdMap()),\n-        extern_const_variants: RefCell::new(DefIdMap()),\n-        extern_const_fns: RefCell::new(DefIdMap()),\n-        dependency_formats: RefCell::new(FnvHashMap()),\n-        node_lint_levels: RefCell::new(FnvHashMap()),\n-        transmute_restrictions: RefCell::new(Vec::new()),\n-        stability: RefCell::new(stability),\n-        selection_cache: traits::SelectionCache::new(),\n-        repr_hint_cache: RefCell::new(DefIdMap()),\n-        const_qualif_map: RefCell::new(NodeMap()),\n-        custom_coerce_unsized_kinds: RefCell::new(DefIdMap()),\n-        cast_kinds: RefCell::new(NodeMap()),\n-   }, f)\n-}\n-\n struct FlagComputation {\n     flags: TypeFlags,\n "}, {"sha": "80c4fc28703ac78dd131925ea13376a7d2aefa2e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -602,7 +602,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: Session,\n                                                make_glob_map: resolve::MakeGlobMap,\n                                                f: F)\n                                                -> (Session, R)\n-                                               where F: FnOnce(&ty::ctxt<'tcx>,\n+                                               where F: for<'a> FnOnce(&'a ty::ctxt<'tcx>,\n                                                                ty::CrateAnalysis) -> R\n {\n     let time_passes = sess.time_passes();"}, {"sha": "483d82f508f25a8ec84ffbaabe0023fac3a675b9", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -649,7 +649,10 @@ impl<'blk, 'tcx> mc::Typer<'tcx> for BlockS<'blk, 'tcx> {\n     }\n \n     fn adjustments<'a>(&'a self) -> Ref<NodeMap<ty::AutoAdjustment<'tcx>>> {\n-        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>) -> &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n+        // FIXME (@jroesch): this is becuase we currently have a HR inference problem\n+        // in the snapshot that causes this code not to work.\n+        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>) ->\n+            &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n             &tables.adjustments\n         }\n "}, {"sha": "f62411e85828de96c2fcabc219d83d19b55052d6", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -240,7 +240,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let trait_param_env = impl_param_env.with_caller_bounds(hybrid_preds.into_vec());\n     let trait_param_env = traits::normalize_param_env_or_error(trait_param_env,\n                                                                normalize_cause.clone());\n-    // TODO (@jroesch) this seems ugly, but is a temporary change\n+    // FIXME(@jroesch) this seems ugly, but is a temporary change\n     infcx.parameter_environment = trait_param_env;\n \n     debug!(\"compare_impl_method: trait_bounds={:?}\",\n@@ -362,7 +362,8 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // anyway, so it shouldn't be needed there either. Anyway, we can\n     // always add more relations later (it's backwards compat).\n     let mut free_regions = FreeRegionMap::new();\n-    free_regions.relate_free_regions_from_predicates(tcx, &infcx.parameter_environment.caller_bounds);\n+    free_regions.relate_free_regions_from_predicates(tcx,\n+                                                     &infcx.parameter_environment.caller_bounds);\n \n     infcx.resolve_regions_and_report_errors(&free_regions, impl_m_body_id);\n "}, {"sha": "9c2d1c4a34df1dbd9a3d9337b5054229eb5410fb", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -528,7 +528,8 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                         // expects. This is annoying and horrible. We\n                         // ought to recode this routine so it doesn't\n                         // (ab)use the normal type checking paths.\n-                        let adj = self.fcx.inh.tables.borrow().adjustments.get(&base_expr.id).cloned();\n+                        let adj = self.fcx.inh.tables.borrow().adjustments.get(&base_expr.id)\n+                                                                          .cloned();\n                         let (autoderefs, unsize) = match adj {\n                             Some(ty::AdjustDerefRef(adr)) => match adr.autoref {\n                                 None => {"}, {"sha": "7e87dc6540ea517f122b631c29beef3ec5e7a7d0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -87,8 +87,6 @@ use fmt_macros::{Parser, Piece, Position};\n use middle::astconv_util::{check_path_args, NO_TPS, NO_REGIONS};\n use middle::def;\n use middle::infer;\n-use middle::mem_categorization as mc;\n-use middle::mem_categorization::McResult;\n use middle::pat_util::{self, pat_id_map};\n use middle::privacy::{AllPublic, LastMod};\n use middle::region::{self, CodeExtent};\n@@ -290,32 +288,6 @@ pub struct FnCtxt<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> mc::Typer<'tcx> for FnCtxt<'a, 'tcx> {\n-    fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> {\n-        let ty = self.node_ty(id);\n-        self.resolve_type_vars_or_error(&ty)\n-    }\n-\n-    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>> {\n-        let ty = self.adjust_expr_ty(expr, self.inh.tables.borrow().adjustments.get(&expr.id));\n-        self.resolve_type_vars_or_error(&ty)\n-    }\n-\n-    fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        let ty = self.infcx().resolve_type_vars_if_possible(&ty);\n-        !traits::type_known_to_meet_builtin_bound(self.infcx(), self, ty, ty::BoundCopy, span)\n-    }\n-\n-    fn node_method_ty(&self, method_call: ty::MethodCall)\n-                      -> Option<Ty<'tcx>> {\n-        self.inh.tables\n-                .borrow()\n-                .method_map\n-                .get(&method_call)\n-                .map(|method| method.ty)\n-                .map(|ty| self.infcx().resolve_type_vars_if_possible(&ty))\n-    }\n-\n impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     fn new(tcx: &'a ty::ctxt<'tcx>,\n            tables: &'a RefCell<ty::Tables<'tcx>>,\n@@ -368,7 +340,8 @@ pub fn blank_fn_ctxt<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n     }\n }\n \n-fn static_inherited_fields<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>, tables: &'a RefCell<ty::Tables<'tcx>>)\n+fn static_inherited_fields<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n+                                     tables: &'a RefCell<ty::Tables<'tcx>>)\n                                     -> Inherited<'a, 'tcx> {\n     // It's kind of a kludge to manufacture a fake function context\n     // and statement context, but we might as well do write the code only once\n@@ -1271,16 +1244,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    /// Resolves all type variables in `t` and then, if any were left\n-    /// unresolved, substitutes an error type. This is used after the\n-    /// main checking when doing a second pass before writeback. The\n-    /// justification is that writeback will produce an error for\n-    /// these unconstrained type variables.\n-    fn resolve_type_vars_or_error(&self, ty: &Ty<'tcx>) -> mc::McResult<Ty<'tcx>> {\n-        let ty = self.infcx().resolve_type_vars_if_possible(ty);\n-        if ty.has_infer_types() || ty.references_error() { Err(()) } else { Ok(ty) }\n-    }\n-\n     fn record_deferred_call_resolution(&self,\n                                        closure_def_id: ast::DefId,\n                                        r: DeferredCallResolutionHandler<'tcx>) {\n@@ -1614,9 +1577,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn item_substs(&self) -> Ref<NodeMap<ty::ItemSubsts<'tcx>>> {\n-        // NOTE: @jroesch this is hack that appears to be fixed on nightly, will monitor if it changes\n-        // when we upgrade the snapshot compiler\n-        fn project_item_susbts<'a, 'tcx>(tables: &'a ty::Tables<'tcx>) -> &'a NodeMap<ty::ItemSubsts<'tcx>> {\n+        // NOTE: @jroesch this is hack that appears to be fixed on nightly, will monitor if\n+        // it changes when we upgrade the snapshot compiler\n+        fn project_item_susbts<'a, 'tcx>(tables: &'a ty::Tables<'tcx>)\n+                                        -> &'a NodeMap<ty::ItemSubsts<'tcx>> {\n             &tables.item_substs\n         }\n "}, {"sha": "a86301907385a1246dc033758bddee9fe4fb9de4", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -125,7 +125,8 @@ pub fn regionck_expr(fcx: &FnCtxt, e: &ast::Expr) {\n pub fn regionck_item(fcx: &FnCtxt, item: &ast::Item) {\n     let mut rcx = Rcx::new(fcx, RepeatingScope(item.id), item.id, Subject(item.id));\n     let tcx = fcx.tcx();\n-    rcx.free_region_map.relate_free_regions_from_predicates(tcx, &fcx.inh.infcx.parameter_environment.caller_bounds);\n+    rcx.free_region_map\n+       .relate_free_regions_from_predicates(tcx, &fcx.infcx().parameter_environment.caller_bounds);\n     rcx.visit_region_obligations(item.id);\n     rcx.resolve_regions_and_report_errors();\n }\n@@ -144,7 +145,8 @@ pub fn regionck_fn(fcx: &FnCtxt,\n     }\n \n     let tcx = fcx.tcx();\n-    rcx.free_region_map.relate_free_regions_from_predicates(tcx, &fcx.inh.infcx.parameter_environment.caller_bounds);\n+    rcx.free_region_map\n+       .relate_free_regions_from_predicates(tcx, &fcx.infcx().parameter_environment.caller_bounds);\n \n     rcx.resolve_regions_and_report_errors();\n "}, {"sha": "c7f084e27cda015f456bec5d6d0906b2b445bcf1", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -131,7 +131,8 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n         let closure_def_id = ast_util::local_def(expr.id);\n         if !self.fcx.inh.tables.borrow().closure_kinds.contains_key(&closure_def_id) {\n             self.closures_with_inferred_kinds.insert(expr.id);\n-            self.fcx.inh.tables.borrow_mut().closure_kinds.insert(closure_def_id, ty::FnClosureKind);\n+            self.fcx.inh.tables.borrow_mut().closure_kinds\n+                                            .insert(closure_def_id, ty::FnClosureKind);\n             debug!(\"check_closure: adding closure_id={:?} to closures_with_inferred_kinds\",\n                    closure_def_id);\n         }\n@@ -267,7 +268,10 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n                         // to move out of an upvar, this must be a FnOnce closure\n                         self.adjust_closure_kind(upvar_id.closure_expr_id, ty::FnOnceClosureKind);\n \n-                        let upvar_capture_map = &mut self.fcx.inh.tables.borrow_mut().upvar_capture_map;\n+                        let upvar_capture_map = &mut self.fcx\n+                                                         .inh\n+                                                         .tables.borrow_mut()\n+                                                         .upvar_capture_map;\n                         upvar_capture_map.insert(upvar_id, ty::UpvarCapture::ByValue);\n                     }\n                     mc::NoteClosureEnv(upvar_id) => {"}, {"sha": "df01b99fd9b808cf2748635409dcfc400c6fd70e", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -201,7 +201,10 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n \n             let type_scheme = fcx.tcx().lookup_item_type(local_def(item.id));\n             let item_ty = fcx.instantiate_type_scheme(item.span,\n-                                                      &fcx.inh.infcx.parameter_environment.free_substs,\n+                                                      &fcx.inh\n+                                                          .infcx\n+                                                          .parameter_environment\n+                                                          .free_substs,\n                                                       &type_scheme.ty);\n \n             bounds_checker.check_traits_in_ty(item_ty, item.span);\n@@ -222,7 +225,10 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             // to free.\n             let self_ty = fcx.tcx().node_id_to_type(item.id);\n             let self_ty = fcx.instantiate_type_scheme(item.span,\n-                                                      &fcx.inh.infcx.parameter_environment.free_substs,\n+                                                      &fcx.inh\n+                                                          .infcx\n+                                                          .parameter_environment\n+                                                          .free_substs,\n                                                       &self_ty);\n \n             bounds_checker.check_traits_in_ty(self_ty, item.span);\n@@ -235,7 +241,10 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             };\n \n             let trait_ref = fcx.instantiate_type_scheme(item.span,\n-                                                        &fcx.inh.infcx.parameter_environment.free_substs,\n+                                                        &fcx.inh\n+                                                            .infcx\n+                                                            .parameter_environment\n+                                                            .free_substs,\n                                                         &trait_ref);\n \n             // We are stricter on the trait-ref in an impl than the\n@@ -637,7 +646,10 @@ fn struct_variant<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         .map(|field| {\n             let field_ty = fcx.tcx().node_id_to_type(field.node.id);\n             let field_ty = fcx.instantiate_type_scheme(field.span,\n-                                                       &fcx.inh.infcx.parameter_environment.free_substs,\n+                                                       &fcx.inh\n+                                                           .infcx\n+                                                           .parameter_environment\n+                                                           .free_substs,\n                                                        &field_ty);\n             AdtField { ty: field_ty, span: field.span }\n         })\n@@ -662,7 +674,10 @@ fn enum_variants<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                             let arg_ty = arg_tys[index];\n                             let arg_ty =\n                                 fcx.instantiate_type_scheme(variant.span,\n-                                                            &fcx.inh.infcx.parameter_environment.free_substs,\n+                                                            &fcx.inh\n+                                                                .infcx\n+                                                                .parameter_environment\n+                                                                .free_substs,\n                                                             &arg_ty);\n                             AdtField {\n                                 ty: arg_ty,"}, {"sha": "1fc7224737d2d8b095e848a14d930baf3b536a13", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -217,7 +217,11 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             debug!(\"Upvar capture for {:?} resolved to {:?}\",\n                    upvar_id,\n                    new_upvar_capture);\n-            self.fcx.tcx().tables.borrow_mut().upvar_capture_map.insert(*upvar_id, new_upvar_capture);\n+            self.fcx.tcx()\n+                    .tables\n+                    .borrow_mut()\n+                    .upvar_capture_map\n+                    .insert(*upvar_id, new_upvar_capture);\n         }\n     }\n "}, {"sha": "fbabc287342e9e0ce9d5c59f1f6a18e17203580b", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15bc4a30c38e6a4e72bcd05214626933d45018c1/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=15bc4a30c38e6a4e72bcd05214626933d45018c1", "patch": "@@ -540,13 +540,15 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n \n             // Check that all transitive obligations are satisfied.\n-            if let Err(errors) = fulfill_cx.select_all_or_error(&infcx, &infcx.parameter_environment) {\n+            if let Err(errors) = fulfill_cx.select_all_or_error(&infcx,\n+                                                                &infcx.parameter_environment) {\n                 traits::report_fulfillment_errors(&infcx, &errors);\n             }\n \n             // Finally, resolve all regions.\n             let mut free_regions = FreeRegionMap::new();\n-            free_regions.relate_free_regions_from_predicates(tcx, &infcx.parameter_environment.caller_bounds);\n+            free_regions.relate_free_regions_from_predicates(tcx, &infcx.parameter_environment\n+                                                                        .caller_bounds);\n             infcx.resolve_regions_and_report_errors(&free_regions, impl_did.node);\n \n             if let Some(kind) = kind {"}]}