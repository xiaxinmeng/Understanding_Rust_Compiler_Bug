{"sha": "1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0", "node_id": "C_kwDOAAsO6NoAKDEwNDg2NTFmYTNkMGM4ZDVhYzk4YTYxNjgxMGQxY2YyYjFmZTgwYzA", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-11-01T15:05:57Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-11-01T15:19:49Z"}, "message": "Run destructors from existing tls callback", "tree": {"sha": "f4d5e469d006cad7f8eabbe54f93b1a2be7993b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4d5e469d006cad7f8eabbe54f93b1a2be7993b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmGABZYACgkQcTRy8vRW\nJ978whAAj3svRsifgVTsHRrqSJ0NTAdT/gwGz6Sl6e3WjhcJLhY338FT3rfamLK1\nMGhsbNN5AAWnveDbq5w+Ic1s9sDCLJS4g6HH20u1jMBsfVUbDssT3lLQWrtjiH+J\nflwmafaytCd9+YRDvDaVJ8P83hEefj2oL0ytfh4AWJ63TewvkfYDjtt58LspjPRY\n1GFdEamP47wVPQPyOOcz1pVhOnzlJ5sjbAmcz3V/he+drQ+fYbZpepQmRUoXGQqB\nXoKxCCQW+KwDKraowVjmv4GYse59OUQ5ca6KqZNGJIz0lVJbQnyzpjNUTTEy8UdG\nxpFJTKeUGeAay0qt95XoNt3EefigueXPwmcwUAuYXf1KSo068dpkUfEJvgN2QRwY\nyayNF2IM+bL6Hm90oxT5j9E400+tVKwxlTsRvGOBJpZQXFSfPuLrlm6plKQL6l4S\nLn74WHJB2Sc84XQJC5Cwogc+yU0tnqNFQ3KrTFqcL2a+O2NRVaP82ogPLH8UjdSW\nBsvfTq7S0Oqo4jmbYRGM8LpHkuQClzKD4m9OkPNP0JFqN0u/XFD+CabvO+Uz04Jq\nDDoGGc3nTF/fzg0ufVZIxjAdiR69uumCTeW7PuCux4ILWpM/v7xU9drZuKpb1KBt\np3Q8EvvXy4UcQ4ycM0geoKy1iiHNTtiVwxsIwLickEVUPvlt4BY=\n=o6Ar\n-----END PGP SIGNATURE-----", "payload": "tree f4d5e469d006cad7f8eabbe54f93b1a2be7993b2\nparent 9212f4070ecaf4277de5f268f2ddfe56585be745\nauthor Chris Denton <christophersdenton@gmail.com> 1635779157 +0000\ncommitter Chris Denton <christophersdenton@gmail.com> 1635779989 +0000\n\nRun destructors from existing tls callback\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0", "html_url": "https://github.com/rust-lang/rust/commit/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9212f4070ecaf4277de5f268f2ddfe56585be745", "url": "https://api.github.com/repos/rust-lang/rust/commits/9212f4070ecaf4277de5f268f2ddfe56585be745", "html_url": "https://github.com/rust-lang/rust/commit/9212f4070ecaf4277de5f268f2ddfe56585be745"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "25d1c6e8e87c2914908430fd4e92c17d11bb10aa", "filename": "library/std/src/sys/windows/thread_local_dtor.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_dtor.rs?ref=1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0", "patch": "@@ -3,7 +3,6 @@\n \n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![cfg(target_thread_local)]\n-use super::c;\n \n // Using a per-thread list avoids the problems in synchronizing global state.\n #[thread_local]\n@@ -13,27 +12,17 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     DESTRUCTORS.push((t, dtor));\n }\n \n-// See windows/thread_local_keys.rs for an explanation of this callback function.\n-// The short version is that all the function pointers in the `.CRT$XL*` array\n-// will be called whenever a thread or process starts or ends.\n-\n-#[link_section = \".CRT$XLD\"]\n-#[doc(hidden)]\n-#[used]\n-pub static TLS_CALLBACK: unsafe extern \"system\" fn(c::LPVOID, c::DWORD, c::LPVOID) = tls_callback;\n-\n-unsafe extern \"system\" fn tls_callback(_: c::LPVOID, reason: c::DWORD, _: c::LPVOID) {\n-    if reason == c::DLL_THREAD_DETACH || reason == c::DLL_PROCESS_DETACH {\n-        // Drop all the destructors.\n-        //\n-        // Note: While this is potentially an infinite loop, it *should* be\n-        // the case that this loop always terminates because we provide the\n-        // guarantee that a TLS key cannot be set after it is flagged for\n-        // destruction.\n-        while let Some((ptr, dtor)) = DESTRUCTORS.pop() {\n-            (dtor)(ptr);\n-        }\n-        // We're done so free the memory.\n-        DESTRUCTORS.shrink_to_fit();\n+/// Runs destructors. This should not be called until thread exit.\n+pub unsafe fn run_keyless_dtors() {\n+    // Drop all the destructors.\n+    //\n+    // Note: While this is potentially an infinite loop, it *should* be\n+    // the case that this loop always terminates because we provide the\n+    // guarantee that a TLS key cannot be set after it is flagged for\n+    // destruction.\n+    while let Some((ptr, dtor)) = DESTRUCTORS.pop() {\n+        (dtor)(ptr);\n     }\n+    // We're done so free the memory.\n+    DESTRUCTORS = Vec::new();\n }"}, {"sha": "ec670238e6f0eaa9ba65ec60687f173d0ebbab6d", "filename": "library/std/src/sys/windows/thread_local_key.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_key.rs?ref=1048651fa3d0c8d5ac98a616810d1cf2b1fe80c0", "patch": "@@ -196,6 +196,8 @@ pub static p_thread_callback: unsafe extern \"system\" fn(c::LPVOID, c::DWORD, c::\n unsafe extern \"system\" fn on_tls_callback(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID) {\n     if dwReason == c::DLL_THREAD_DETACH || dwReason == c::DLL_PROCESS_DETACH {\n         run_dtors();\n+        #[cfg(target_thread_local)]\n+        super::thread_local_dtor::run_keyless_dtors();\n     }\n \n     // See comments above for what this is doing. Note that we don't need this"}]}