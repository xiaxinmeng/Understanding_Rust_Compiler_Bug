{"sha": "9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZmIxY2UyOGNiMTY1NmQ2MTQyZjFmOWY2Zjg4MmViMTg3ZmFjMjU=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-19T03:21:11Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-19T18:38:55Z"}, "message": "append asyncness info to functions", "tree": {"sha": "97885edde0513823f34baa1c20f9555db31c0431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97885edde0513823f34baa1c20f9555db31c0431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "html_url": "https://github.com/rust-lang/rust/commit/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd4c27c329d85a69a6b585d217e48b4d500477e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd4c27c329d85a69a6b585d217e48b4d500477e", "html_url": "https://github.com/rust-lang/rust/commit/2fd4c27c329d85a69a6b585d217e48b4d500477e"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "5e1db92b555805a8e5284a4dbc0cfa870634d7bc", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "patch": "@@ -244,7 +244,7 @@ rustc_queries! {\n             desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n         }\n \n-        query is_async_fn(key: DefId) -> hir::IsAsync {\n+        query is_async_fn(key: DefId) -> bool {\n             desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n         }\n "}, {"sha": "97981f47820030683f98aa0071d6ad592851a04a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "patch": "@@ -3349,13 +3349,28 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n     }\n }\n \n+fn is_async_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n+        let node = tcx.hir().get(hir_id);\n+        if let Some(fn_like) = hir::map::blocks::FnLikeNode::from_node(node) {\n+             fn_like.asyncness() == hir::IsAsync::Async\n+        } else {\n+            false\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n+\n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n     util::provide(providers);\n     constness::provide(providers);\n     *providers = ty::query::Providers {\n+        is_async_fn,\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,"}, {"sha": "c46e2a901f88d98c79a58eba518f13803b579ad0", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "patch": "@@ -133,7 +133,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n-    is_async_fn { cdata.fn_asyncness(def_id.index) }\n+    is_async_fn => { cdata.is_async_fn(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     def_kind => { cdata.def_kind(def_id.index) }"}, {"sha": "1e7c0829a26a9982468ef56ab34eb6aceb9a078f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "patch": "@@ -875,7 +875,7 @@ impl EncodeContext<'tcx> {\n                 EntryKind::AssocConst(container, const_qualif, rendered_const)\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::TraitItemKind::Method(_, ref m) = ast_item.node {\n+                let fn_data = if let hir::TraitItemKind::Method(method_sig, m) = &ast_item.node {\n                     let param_names = match *m {\n                         hir::TraitMethod::Required(ref names) => {\n                             self.encode_fn_param_names(names)\n@@ -885,7 +885,7 @@ impl EncodeContext<'tcx> {\n                         }\n                     };\n                     FnData {\n-                        asyncness: hir::IsAsync::NotAsync,\n+                        asyncness: method_sig.header.asyncness,\n                         constness: hir::Constness::NotConst,\n                         param_names,\n                         sig: self.lazy(&tcx.fn_sig(def_id)),"}, {"sha": "0752934c8c1debd0d5a360bba6ca85b825da77a2", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "patch": "@@ -217,7 +217,11 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n     } else {\n         hir::Constness::NotConst\n     };\n-\n+    let asyncness =  if cx.tcx.is_async_fn(did) {\n+        hir::IsAsync::Async\n+    } else {\n+        hir::IsAsync::NotAsync\n+    };\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, || {\n         ((cx.tcx.generics_of(did), &predicates).clean(cx), (did, sig).clean(cx))\n@@ -230,7 +234,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n             unsafety: sig.unsafety(),\n             abi: sig.abi(),\n             constness,\n-            asyncness: hir::IsAsync::NotAsync,\n+            asyncness,\n         },\n         all_types,\n         ret_types,"}, {"sha": "7bd54c64cf6f53d2d1f23d174041eb170a82df84", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "patch": "@@ -2403,6 +2403,11 @@ impl Clean<Item> for ty::AssocItem {\n                     } else {\n                         hir::Constness::NotConst\n                     };\n+                    let asyncness = if cx.tcx.is_async_fn(self.def_id) {\n+                        hir::IsAsync::Async\n+                    } else {\n+                        hir::IsAsync::NotAsync\n+                    };\n                     let defaultness = match self.container {\n                         ty::ImplContainer(_) => Some(self.defaultness),\n                         ty::TraitContainer(_) => None,\n@@ -2414,7 +2419,7 @@ impl Clean<Item> for ty::AssocItem {\n                             unsafety: sig.unsafety(),\n                             abi: sig.abi(),\n                             constness,\n-                            asyncness: hir::IsAsync::NotAsync,\n+                            asyncness,\n                         },\n                         defaultness,\n                         all_types,"}]}