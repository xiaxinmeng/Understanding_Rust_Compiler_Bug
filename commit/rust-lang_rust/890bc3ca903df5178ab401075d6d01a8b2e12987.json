{"sha": "890bc3ca903df5178ab401075d6d01a8b2e12987", "node_id": "C_kwDOAAsO6NoAKDg5MGJjM2NhOTAzZGY1MTc4YWI0MDEwNzVkNmQwMWE4YjJlMTI5ODc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-12T05:52:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T05:52:36Z"}, "message": "Rollup merge of #106596 - estebank:verbose-e0271, r=compiler-errors\n\nHide more of long types in E0271\n\nFix #40186.", "tree": {"sha": "904a93117e2b735feb3740fc161f43ed19fb1d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/904a93117e2b735feb3740fc161f43ed19fb1d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890bc3ca903df5178ab401075d6d01a8b2e12987", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6AkCRBK7hj4Ov3rIwAAfcsIAIRJdGu0N3AuIkRNXk3J8IjI\n9Qp8k/Q5ct3QWh7Pvp85kUn/cm/AW3W4uKfp1wbbfAc/spL0syQbYybPgRZL5CGB\nD8AXD9m80iZwiUh1UNhpmsBd0zF1KjucgveU0loDMKcR0ZwtoelWfwp9bX3IKNJO\nP5Nt3GRRo/ge15TeWuhDtQpgVCy99vR59GGMAcYjXe0lK/SzZXDQRGTVfywScSGS\nc6ihxkPFGRfC7y96VIWaFlOKB8IlXX8A6C1sHJn7tiXO4O01lXRi7UgJKH8C6Wiq\nYtwsKk0it8H40V77SRki8xGnamrAQ6FLLf/VQyhTrvjGhAWtJ8l4L1KGEp0WNnw=\n=/v/X\n-----END PGP SIGNATURE-----\n", "payload": "tree 904a93117e2b735feb3740fc161f43ed19fb1d78\nparent e664cb215478fa6f56372e3072d450fffeb634c5\nparent f1ffe823cf1496436a1490e838dec375b225b97b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673502756 +0100\ncommitter GitHub <noreply@github.com> 1673502756 +0100\n\nRollup merge of #106596 - estebank:verbose-e0271, r=compiler-errors\n\nHide more of long types in E0271\n\nFix #40186.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890bc3ca903df5178ab401075d6d01a8b2e12987", "html_url": "https://github.com/rust-lang/rust/commit/890bc3ca903df5178ab401075d6d01a8b2e12987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890bc3ca903df5178ab401075d6d01a8b2e12987/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e664cb215478fa6f56372e3072d450fffeb634c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e664cb215478fa6f56372e3072d450fffeb634c5", "html_url": "https://github.com/rust-lang/rust/commit/e664cb215478fa6f56372e3072d450fffeb634c5"}, {"sha": "f1ffe823cf1496436a1490e838dec375b225b97b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ffe823cf1496436a1490e838dec375b225b97b", "html_url": "https://github.com/rust-lang/rust/commit/f1ffe823cf1496436a1490e838dec375b225b97b"}], "stats": {"total": 139, "additions": 123, "deletions": 16}, "files": [{"sha": "a91e8de5f21ea5221f33fccaa8b8b4392b46d178", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/890bc3ca903df5178ab401075d6d01a8b2e12987/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890bc3ca903df5178ab401075d6d01a8b2e12987/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=890bc3ca903df5178ab401075d6d01a8b2e12987", "patch": "@@ -283,6 +283,8 @@ pub trait PrettyPrinter<'tcx>:\n     /// This is typically the case for all non-`'_` regions.\n     fn should_print_region(&self, region: ty::Region<'tcx>) -> bool;\n \n+    fn reset_type_limit(&mut self) {}\n+\n     // Defaults (should not be overridden):\n \n     /// If possible, this returns a global path resolving to `def_id` that is visible\n@@ -1981,6 +1983,10 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n         self.0.ty_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n \n+    fn reset_type_limit(&mut self) {\n+        self.printed_type_count = 0;\n+    }\n+\n     fn const_infer_name(&self, id: ty::ConstVid<'tcx>) -> Option<Symbol> {\n         self.0.const_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n@@ -2722,11 +2728,15 @@ define_print_and_forward_display! {\n     }\n \n     ty::SubtypePredicate<'tcx> {\n-        p!(print(self.a), \" <: \", print(self.b))\n+        p!(print(self.a), \" <: \");\n+        cx.reset_type_limit();\n+        p!(print(self.b))\n     }\n \n     ty::CoercePredicate<'tcx> {\n-        p!(print(self.a), \" -> \", print(self.b))\n+        p!(print(self.a), \" -> \");\n+        cx.reset_type_limit();\n+        p!(print(self.b))\n     }\n \n     ty::TraitPredicate<'tcx> {\n@@ -2738,7 +2748,9 @@ define_print_and_forward_display! {\n     }\n \n     ty::ProjectionPredicate<'tcx> {\n-        p!(print(self.projection_ty), \" == \", print(self.term))\n+        p!(print(self.projection_ty), \" == \");\n+        cx.reset_type_limit();\n+        p!(print(self.term))\n     }\n \n     ty::Term<'tcx> {"}, {"sha": "20bede22c3427dfc0b08c478194d0529cea9169c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/890bc3ca903df5178ab401075d6d01a8b2e12987/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890bc3ca903df5178ab401075d6d01a8b2e12987/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=890bc3ca903df5178ab401075d6d01a8b2e12987", "patch": "@@ -1724,7 +1724,19 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 .and_then(|(predicate, _, normalized_term, expected_term)| {\n                     self.maybe_detailed_projection_msg(predicate, normalized_term, expected_term)\n                 })\n-                .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n+                .unwrap_or_else(|| {\n+                    with_forced_trimmed_paths!(format!(\n+                        \"type mismatch resolving `{}`\",\n+                        self.resolve_vars_if_possible(predicate)\n+                            .print(FmtPrinter::new_with_limit(\n+                                self.tcx,\n+                                Namespace::TypeNS,\n+                                rustc_session::Limit(10),\n+                            ))\n+                            .unwrap()\n+                            .into_buffer()\n+                    ))\n+                });\n             let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");\n \n             let secondary_span = match predicate.kind().skip_binder() {\n@@ -1755,7 +1767,20 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 kind: hir::ImplItemKind::Type(ty),\n                                 ..\n                             }),\n-                        ) => Some((ty.span, format!(\"type mismatch resolving `{}`\", predicate))),\n+                        ) => Some((\n+                            ty.span,\n+                            with_forced_trimmed_paths!(format!(\n+                                \"type mismatch resolving `{}`\",\n+                                self.resolve_vars_if_possible(predicate)\n+                                    .print(FmtPrinter::new_with_limit(\n+                                        self.tcx,\n+                                        Namespace::TypeNS,\n+                                        rustc_session::Limit(5),\n+                                    ))\n+                                    .unwrap()\n+                                    .into_buffer()\n+                            )),\n+                        )),\n                         _ => None,\n                     }),\n                 _ => None,"}, {"sha": "f59a6aa9810d8f7588f078824d730c69474ea781", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/890bc3ca903df5178ab401075d6d01a8b2e12987/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890bc3ca903df5178ab401075d6d01a8b2e12987/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=890bc3ca903df5178ab401075d6d01a8b2e12987", "patch": "@@ -2622,11 +2622,25 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             ObligationCauseCode::ObjectCastObligation(concrete_ty, object_ty) => {\n-                err.note(&format!(\n-                    \"required for the cast from `{}` to the object type `{}`\",\n-                    self.ty_to_string(concrete_ty),\n-                    self.ty_to_string(object_ty)\n-                ));\n+                let (concrete_ty, concrete_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(concrete_ty));\n+                let (object_ty, object_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(object_ty));\n+                err.note(&with_forced_trimmed_paths!(format!(\n+                    \"required for the cast from `{concrete_ty}` to the object type `{object_ty}`\",\n+                )));\n+                if let Some(file) = concrete_file {\n+                    err.note(&format!(\n+                        \"the full name for the casted type has been written to '{}'\",\n+                        file.display(),\n+                    ));\n+                }\n+                if let Some(file) = object_file {\n+                    err.note(&format!(\n+                        \"the full name for the object type has been written to '{}'\",\n+                        file.display(),\n+                    ));\n+                }\n             }\n             ObligationCauseCode::Coercion { source: _, target } => {\n                 err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));"}, {"sha": "7e6b71408558345b0a00c3bcede817b03a98559b", "filename": "tests/ui/diagnostic-width/E0271.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fdiagnostic-width%2FE0271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fdiagnostic-width%2FE0271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2FE0271.rs?ref=890bc3ca903df5178ab401075d6d01a8b2e12987", "patch": "@@ -0,0 +1,33 @@\n+// compile-flags: --diagnostic-width=40\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+trait Future {\n+    type Error;\n+}\n+\n+impl<T, E> Future for Result<T, E> {\n+    type Error = E;\n+}\n+\n+impl<T> Future for Option<T> {\n+    type Error = ();\n+}\n+\n+struct Foo;\n+\n+fn foo() -> Box<dyn Future<Error=Foo>> {\n+    Box::new( //~ ERROR E0271\n+        Ok::<_, ()>(\n+            Err::<(), _>(\n+                Ok::<_, ()>(\n+                    Err::<(), _>(\n+                        Ok::<_, ()>(\n+                            Err::<(), _>(Some(5))\n+                        )\n+                    )\n+                )\n+            )\n+        )\n+    )\n+}\n+fn main() {\n+}"}, {"sha": "ed7b6651d018645f3599c751dbf6432bb1b24c10", "filename": "tests/ui/diagnostic-width/E0271.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr?ref=890bc3ca903df5178ab401075d6d01a8b2e12987", "patch": "@@ -0,0 +1,23 @@\n+error[E0271]: type mismatch resolving `<Result<Result<(), Result<Result<(), Result<Result<(), Option<{integer}>>, ...>>, ...>>, ...> as Future>::Error == Foo`\n+  --> $DIR/E0271.rs:18:5\n+   |\n+LL | /     Box::new(\n+LL | |         Ok::<_, ()>(\n+LL | |             Err::<(), _>(\n+LL | |                 Ok::<_, ()>(\n+...  |\n+LL | |         )\n+LL | |     )\n+   | |_____^ type mismatch resolving `<Result<Result<(), Result<Result<(), ...>, ...>>, ...> as Future>::Error == Foo`\n+   |\n+note: expected this to be `Foo`\n+  --> $DIR/E0271.rs:8:18\n+   |\n+LL |     type Error = E;\n+   |                  ^\n+   = note: required for the cast from `Result<Result<..., ...>, ...>` to the object type `dyn Future<Error = Foo>`\n+   = note: the full name for the casted type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "810f7c28c004f61efa5575ec0e1426d170def6a2", "filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=890bc3ca903df5178ab401075d6d01a8b2e12987", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+error[E0271]: type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:39:9\n    |\n LL |       let v = Unit2.m(\n@@ -10,7 +10,7 @@ LL | |             f: |x| {\n ...  |\n LL | |             },\n LL | |         },\n-   | |_________^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+   | |_________^ type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14"}, {"sha": "f04a753a0e8bd5cc5df21dcb15c3d6c1fbba7831", "filename": "tests/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/890bc3ca903df5178ab401075d6d01a8b2e12987/tests%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=890bc3ca903df5178ab401075d6d01a8b2e12987", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:25:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait>::Assoc`\n LL |\n LL |         Foo(())\n    |         ------- return type was inferred to be `Foo<()>` here\n@@ -28,11 +28,11 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    = note: see issue #103532 <https://github.com/rust-lang/rust/issues/103532> for more information\n    = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable\n \n-error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'a>>::Assoc`\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait<'a>>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:41:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'a>>::Assoc`\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait<'a>>::Assoc`\n ...\n LL |         Foo(())\n    |         ------- return type was inferred to be `Foo<()>` here"}]}