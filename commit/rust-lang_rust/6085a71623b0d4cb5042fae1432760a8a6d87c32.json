{"sha": "6085a71623b0d4cb5042fae1432760a8a6d87c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwODVhNzE2MjNiMGQ0Y2I1MDQyZmFlMTQzMjc2MGE4YTZkODdjMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-14T19:07:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-14T19:07:29Z"}, "message": "auto merge of #19703 : nikomatsakis/rust/unsafe-trait, r=acrichto\n\nThis PR allows declaring traits and impls as `unsafe`. An `unsafe` trait requires an `unsafe` impl. An `unsafe` impl does not permit unsafe code within its interior (unless that code is contained within an unsafe block or unsafe fn, as normal). The commits are standalone.\r\n\r\nr? @alexcrichton \r\ncc #13231", "tree": {"sha": "47f6bf0ad82b98d7b4f1c9327b8ab3df7381bb50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47f6bf0ad82b98d7b4f1c9327b8ab3df7381bb50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6085a71623b0d4cb5042fae1432760a8a6d87c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6085a71623b0d4cb5042fae1432760a8a6d87c32", "html_url": "https://github.com/rust-lang/rust/commit/6085a71623b0d4cb5042fae1432760a8a6d87c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6085a71623b0d4cb5042fae1432760a8a6d87c32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c061009675b8b54edee03b7603bc2cf9ed79fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c061009675b8b54edee03b7603bc2cf9ed79fa", "html_url": "https://github.com/rust-lang/rust/commit/93c061009675b8b54edee03b7603bc2cf9ed79fa"}, {"sha": "7855893ac7cbac32dcc801dcefe1ec845fa92616", "url": "https://api.github.com/repos/rust-lang/rust/commits/7855893ac7cbac32dcc801dcefe1ec845fa92616", "html_url": "https://github.com/rust-lang/rust/commit/7855893ac7cbac32dcc801dcefe1ec845fa92616"}], "stats": {"total": 1045, "additions": 694, "deletions": 351}, "files": [{"sha": "3040125d97e32a40ecdf77b2b33b5c827084d6d1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -1721,15 +1721,15 @@ impl LintPass for Stability {\n         if self.is_internal(cx, item.span) { return }\n \n         match item.node {\n-            ast::ItemTrait(_, _, ref supertraits, _) => {\n+            ast::ItemTrait(_, _, _, ref supertraits, _) => {\n                 for t in supertraits.iter() {\n                     if let ast::TraitTyParamBound(ref t) = *t {\n                         let id = ty::trait_ref_to_def_id(cx.tcx, &t.trait_ref);\n                         self.lint(cx, id, t.trait_ref.path.span);\n                     }\n                 }\n             }\n-            ast::ItemImpl(_, Some(ref t), _, _) => {\n+            ast::ItemImpl(_, _, Some(ref t), _, _) => {\n                 let id = ty::trait_ref_to_def_id(cx.tcx, t);\n                 self.lint(cx, id, t.path.span);\n             }"}, {"sha": "b698e4fcc7f7bc6719f79bd781940fddf71958a7", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -255,3 +255,5 @@ pub const tag_method_ty_generics: uint = 0xa7;\n pub const tag_predicate: uint = 0xa8;\n pub const tag_predicate_space: uint = 0xa9;\n pub const tag_predicate_data: uint = 0xb0;\n+\n+pub const tag_unsafety: uint = 0xb1;"}, {"sha": "b78112f1f78508a893460f88d3863fa33d4af8e2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -361,15 +361,26 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n     }\n }\n \n+fn parse_unsafety(item_doc: rbml::Doc) -> ast::Unsafety {\n+    let unsafety_doc = reader::get_doc(item_doc, tag_unsafety);\n+    if reader::doc_as_u8(unsafety_doc) != 0 {\n+        ast::Unsafety::Unsafe\n+    } else {\n+        ast::Unsafety::Normal\n+    }\n+}\n+\n pub fn get_trait_def<'tcx>(cdata: Cmd,\n                            item_id: ast::NodeId,\n                            tcx: &ty::ctxt<'tcx>) -> ty::TraitDef<'tcx>\n {\n     let item_doc = lookup_item(item_id, cdata.data());\n     let generics = doc_generics(item_doc, tcx, cdata, tag_item_generics);\n     let bounds = trait_def_bounds(item_doc, tcx, cdata);\n+    let unsafety = parse_unsafety(item_doc);\n \n     ty::TraitDef {\n+        unsafety: unsafety,\n         generics: generics,\n         bounds: bounds,\n         trait_ref: Rc::new(item_trait_ref(item_doc, tcx, cdata))"}, {"sha": "a1f04b7412b32d660a98781f674ddd4c409d24c0", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -1205,7 +1205,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             None => {}\n         }\n       }\n-      ast::ItemImpl(_, ref opt_trait, ref ty, ref ast_items) => {\n+      ast::ItemImpl(unsafety, _, ref opt_trait, ref ty, ref ast_items) => {\n         // We need to encode information about the default methods we\n         // have inherited, so we drive this based on the impl structure.\n         let impl_items = tcx.impl_items.borrow();\n@@ -1218,6 +1218,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, item.attrs.as_slice());\n+        encode_unsafety(rbml_w, unsafety);\n         match ty.node {\n             ast::TyPath(ref path, _) if path.segments\n                                                         .len() == 1 => {\n@@ -1308,13 +1309,14 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             }\n         }\n       }\n-      ast::ItemTrait(_, _, _, ref ms) => {\n+      ast::ItemTrait(_, _, _, _, ref ms) => {\n         add_to_index(item, rbml_w, index);\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, 'I');\n         encode_item_variances(rbml_w, ecx, item.id);\n         let trait_def = ty::lookup_trait_def(tcx, def_id);\n+        encode_unsafety(rbml_w, trait_def.unsafety);\n         encode_generics(rbml_w, ecx, &trait_def.generics, tag_item_generics);\n         encode_trait_ref(rbml_w, ecx, &*trait_def.trait_ref, tag_item_trait_ref);\n         encode_name(rbml_w, item.ident.name);\n@@ -1674,6 +1676,14 @@ fn encode_attributes(rbml_w: &mut Encoder, attrs: &[ast::Attribute]) {\n     rbml_w.end_tag();\n }\n \n+fn encode_unsafety(rbml_w: &mut Encoder, unsafety: ast::Unsafety) {\n+    let byte: u8 = match unsafety {\n+        ast::Unsafety::Normal => 0,\n+        ast::Unsafety::Unsafe => 1,\n+    };\n+    rbml_w.wr_tagged_u8(tag_unsafety, byte);\n+}\n+\n fn encode_crate_deps(rbml_w: &mut Encoder, cstore: &cstore::CStore) {\n     fn get_ordered_deps(cstore: &cstore::CStore) -> Vec<decoder::CrateDep> {\n         // Pull the cnums and name,vers,hash out of cstore\n@@ -1855,7 +1865,7 @@ struct ImplVisitor<'a, 'b:'a, 'c:'a, 'tcx:'b> {\n \n impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'b, 'c, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n-        if let ast::ItemImpl(_, Some(ref trait_ref), _, _) = item.node {\n+        if let ast::ItemImpl(_, _, Some(ref trait_ref), _, _) = item.node {\n             let def_map = &self.ecx.tcx.def_map;\n             let trait_def = def_map.borrow()[trait_ref.ref_id].clone();\n             let def_id = trait_def.def_id();"}, {"sha": "d649c6491314c2e5b4a0ad7123aef8bf396b48a9", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -549,11 +549,11 @@ fn parse_hex(st: &mut PState) -> uint {\n     };\n }\n \n-fn parse_fn_style(c: char) -> ast::FnStyle {\n+fn parse_unsafety(c: char) -> ast::Unsafety {\n     match c {\n-        'u' => ast::UnsafeFn,\n-        'n' => ast::NormalFn,\n-        _ => panic!(\"parse_fn_style: bad fn_style {}\", c)\n+        'u' => ast::Unsafety::Unsafe,\n+        'n' => ast::Unsafety::Normal,\n+        _ => panic!(\"parse_unsafety: bad unsafety {}\", c)\n     }\n }\n \n@@ -575,14 +575,14 @@ fn parse_onceness(c: char) -> ast::Onceness {\n \n fn parse_closure_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n                               conv: conv_did) -> ty::ClosureTy<'tcx> {\n-    let fn_style = parse_fn_style(next(st));\n+    let unsafety = parse_unsafety(next(st));\n     let onceness = parse_onceness(next(st));\n     let store = parse_trait_store(st, |x,y| conv(x,y));\n     let bounds = parse_existential_bounds(st, |x,y| conv(x,y));\n     let sig = parse_sig(st, |x,y| conv(x,y));\n     let abi = parse_abi_set(st);\n     ty::ClosureTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         onceness: onceness,\n         store: store,\n         bounds: bounds,\n@@ -593,11 +593,11 @@ fn parse_closure_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n \n fn parse_bare_fn_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n                               conv: conv_did) -> ty::BareFnTy<'tcx> {\n-    let fn_style = parse_fn_style(next(st));\n+    let unsafety = parse_unsafety(next(st));\n     let abi = parse_abi_set(st);\n     let sig = parse_sig(st, |x,y| conv(x,y));\n     ty::BareFnTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         abi: abi,\n         sig: sig\n     }"}, {"sha": "9b9d2ab42df2b8976c8688609d17d7c84329f976", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -313,10 +313,10 @@ fn enc_sty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n     }\n }\n \n-fn enc_fn_style(w: &mut SeekableMemWriter, p: ast::FnStyle) {\n+fn enc_unsafety(w: &mut SeekableMemWriter, p: ast::Unsafety) {\n     match p {\n-        ast::NormalFn => mywrite!(w, \"n\"),\n-        ast::UnsafeFn => mywrite!(w, \"u\"),\n+        ast::Unsafety::Normal => mywrite!(w, \"n\"),\n+        ast::Unsafety::Unsafe => mywrite!(w, \"u\"),\n     }\n }\n \n@@ -335,14 +335,14 @@ fn enc_onceness(w: &mut SeekableMemWriter, o: ast::Onceness) {\n \n pub fn enc_bare_fn_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                 ft: &ty::BareFnTy<'tcx>) {\n-    enc_fn_style(w, ft.fn_style);\n+    enc_unsafety(w, ft.unsafety);\n     enc_abi(w, ft.abi);\n     enc_fn_sig(w, cx, &ft.sig);\n }\n \n pub fn enc_closure_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                 ft: &ty::ClosureTy<'tcx>) {\n-    enc_fn_style(w, ft.fn_style);\n+    enc_unsafety(w, ft.unsafety);\n     enc_onceness(w, ft.onceness);\n     enc_trait_store(w, cx, ft.store);\n     enc_existential_bounds(w, cx, &ft.bounds);"}, {"sha": "939775e7507130eeec8b011f904d370eb5beb696", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -355,7 +355,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n             ast::ItemEnum(ref enum_def, _) if allow_dead_code => {\n                 self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.id));\n             }\n-            ast::ItemImpl(_, Some(ref _trait_ref), _, ref impl_items) => {\n+            ast::ItemImpl(_, _, Some(ref _trait_ref), _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         ast::MethodImplItem(ref method) => {"}, {"sha": "d16ce3ad678b34d8c1bd1e121d77aa328c7427a3", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -34,8 +34,8 @@ impl Copy for UnsafeContext {}\n \n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::ty_bare_fn(ref f) => f.fn_style == ast::UnsafeFn,\n-        ty::ty_closure(ref f) => f.fn_style == ast::UnsafeFn,\n+        ty::ty_bare_fn(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n+        ty::ty_closure(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n         _ => false,\n     }\n }\n@@ -92,9 +92,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n             visit::FkItemFn(_, _, fn_style, _) =>\n-                (true, fn_style == ast::UnsafeFn),\n+                (true, fn_style == ast::Unsafety::Unsafe),\n             visit::FkMethod(_, _, method) =>\n-                (true, method.pe_fn_style() == ast::UnsafeFn),\n+                (true, method.pe_unsafety() == ast::Unsafety::Unsafe),\n             _ => (false, false),\n         };\n "}, {"sha": "1d1ee39d6843552024072d5f712c432768885ba5", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -521,7 +521,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             debug!(\"coerce_from_bare_fn(a={}, b={})\",\n                    a.repr(self.get_ref().infcx.tcx), b.repr(self.get_ref().infcx.tcx));\n \n-            if fn_ty_a.abi != abi::Rust || fn_ty_a.fn_style != ast::NormalFn {\n+            if fn_ty_a.abi != abi::Rust || fn_ty_a.unsafety != ast::Unsafety::Normal {\n                 return self.subtype(a, b);\n             }\n "}, {"sha": "26bba55594b5e365c7561b5a9a9faf54b29c210a", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -51,7 +51,7 @@ use middle::ty_fold;\n use middle::ty_fold::{TypeFoldable};\n use util::ppaux::Repr;\n \n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n use syntax::ast;\n use syntax::abi;\n use syntax::codemap::Span;\n@@ -193,12 +193,12 @@ pub trait Combine<'tcx> {\n \n     fn bare_fn_tys(&self, a: &ty::BareFnTy<'tcx>,\n                    b: &ty::BareFnTy<'tcx>) -> cres<'tcx, ty::BareFnTy<'tcx>> {\n-        let fn_style = try!(self.fn_styles(a.fn_style, b.fn_style));\n+        let unsafety = try!(self.unsafeties(a.unsafety, b.unsafety));\n         let abi = try!(self.abi(a.abi, b.abi));\n         let sig = try!(self.fn_sigs(&a.sig, &b.sig));\n-        Ok(ty::BareFnTy {fn_style: fn_style,\n-                abi: abi,\n-                sig: sig})\n+        Ok(ty::BareFnTy {unsafety: unsafety,\n+                         abi: abi,\n+                         sig: sig})\n     }\n \n     fn closure_tys(&self, a: &ty::ClosureTy<'tcx>,\n@@ -219,13 +219,13 @@ pub trait Combine<'tcx> {\n                 return Err(ty::terr_sigil_mismatch(expected_found(self, a.store, b.store)))\n             }\n         };\n-        let fn_style = try!(self.fn_styles(a.fn_style, b.fn_style));\n+        let unsafety = try!(self.unsafeties(a.unsafety, b.unsafety));\n         let onceness = try!(self.oncenesses(a.onceness, b.onceness));\n         let bounds = try!(self.existential_bounds(a.bounds, b.bounds));\n         let sig = try!(self.fn_sigs(&a.sig, &b.sig));\n         let abi = try!(self.abi(a.abi, b.abi));\n         Ok(ty::ClosureTy {\n-            fn_style: fn_style,\n+            unsafety: unsafety,\n             onceness: onceness,\n             store: store,\n             bounds: bounds,\n@@ -240,7 +240,7 @@ pub trait Combine<'tcx> {\n         self.contratys(a, b).and_then(|t| Ok(t))\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle>;\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety>;\n \n     fn abi(&self, a: abi::Abi, b: abi::Abi) -> cres<'tcx, abi::Abi> {\n         if a == b {"}, {"sha": "1738b8db99b37d59fee2b81a137e2a972fb7dfe8", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -21,7 +21,7 @@ use middle::infer::{TypeTrace, Subtype};\n use middle::infer::type_variable::{EqTo};\n use util::ppaux::{Repr};\n \n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n \n pub struct Equate<'f, 'tcx: 'f> {\n     fields: CombineFields<'f, 'tcx>\n@@ -70,9 +70,9 @@ impl<'f, 'tcx> Combine<'tcx> for Equate<'f, 'tcx> {\n         Ok(ty::mt { mutbl: a.mutbl, ty: t })\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         if a != b {\n-            Err(ty::terr_fn_style_mismatch(expected_found(self, a, b)))\n+            Err(ty::terr_unsafety_mismatch(expected_found(self, a, b)))\n         } else {\n             Ok(a)\n         }"}, {"sha": "5c2944f898ed29053a1442272f11ccd7eea75a1a", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -157,7 +157,7 @@ trait ErrorReportingHelpers<'tcx> {\n \n     fn give_expl_lifetime_param(&self,\n                                 decl: &ast::FnDecl,\n-                                fn_style: ast::FnStyle,\n+                                unsafety: ast::Unsafety,\n                                 ident: ast::Ident,\n                                 opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                                 generics: &ast::Generics,\n@@ -828,7 +828,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                         ast::MethodImplItem(ref m) => {\n                             Some((m.pe_fn_decl(),\n                                   m.pe_generics(),\n-                                  m.pe_fn_style(),\n+                                  m.pe_unsafety(),\n                                   m.pe_ident(),\n                                   Some(&m.pe_explicit_self().node),\n                                   m.span))\n@@ -841,7 +841,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                         ast::ProvidedMethod(ref m) => {\n                             Some((m.pe_fn_decl(),\n                                   m.pe_generics(),\n-                                  m.pe_fn_style(),\n+                                  m.pe_unsafety(),\n                                   m.pe_ident(),\n                                   Some(&m.pe_explicit_self().node),\n                                   m.span))\n@@ -853,14 +853,14 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             },\n             None => None\n         };\n-        let (fn_decl, generics, fn_style, ident, expl_self, span)\n+        let (fn_decl, generics, unsafety, ident, expl_self, span)\n                                     = node_inner.expect(\"expect item fn\");\n         let taken = lifetimes_in_scope(self.tcx, scope_id);\n         let life_giver = LifeGiver::with_taken(taken.as_slice());\n         let rebuilder = Rebuilder::new(self.tcx, fn_decl, expl_self,\n                                        generics, same_regions, &life_giver);\n         let (fn_decl, expl_self, generics) = rebuilder.rebuild();\n-        self.give_expl_lifetime_param(&fn_decl, fn_style, ident,\n+        self.give_expl_lifetime_param(&fn_decl, unsafety, ident,\n                                       expl_self.as_ref(), &generics, span);\n     }\n }\n@@ -1407,12 +1407,12 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n     fn give_expl_lifetime_param(&self,\n                                 decl: &ast::FnDecl,\n-                                fn_style: ast::FnStyle,\n+                                unsafety: ast::Unsafety,\n                                 ident: ast::Ident,\n                                 opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                                 generics: &ast::Generics,\n                                 span: codemap::Span) {\n-        let suggested_fn = pprust::fun_to_string(decl, fn_style, ident,\n+        let suggested_fn = pprust::fun_to_string(decl, unsafety, ident,\n                                               opt_explicit_self, generics);\n         let msg = format!(\"consider using an explicit lifetime \\\n                            parameter as shown: {}\", suggested_fn);\n@@ -1690,7 +1690,7 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n         match tcx.map.find(parent) {\n             Some(node) => match node {\n                 ast_map::NodeItem(item) => match item.node {\n-                    ast::ItemImpl(ref gen, _, _, _) => {\n+                    ast::ItemImpl(_, ref gen, _, _, _) => {\n                         taken.push_all(gen.lifetimes.as_slice());\n                     }\n                     _ => ()"}, {"sha": "9fc4e095c43bdf9c7c2044dda9908b3ed59bdd80", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -20,8 +20,7 @@ use super::{TypeTrace, Subtype};\n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n-use syntax::ast::{NormalFn, UnsafeFn};\n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n use util::ppaux::mt_to_string;\n use util::ppaux::Repr;\n \n@@ -81,10 +80,10 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n         self.lub().tys(a, b)\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         match (a, b) {\n-          (NormalFn, _) | (_, NormalFn) => Ok(NormalFn),\n-          (UnsafeFn, UnsafeFn) => Ok(UnsafeFn)\n+          (Unsafety::Normal, _) | (_, Unsafety::Normal) => Ok(Unsafety::Normal),\n+          (Unsafety::Unsafe, Unsafety::Unsafe) => Ok(Unsafety::Unsafe)\n         }\n     }\n "}, {"sha": "f27b07c9c9d45db79d80e01da15c62bbe39e4b3e", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -20,8 +20,7 @@ use super::{TypeTrace, Subtype};\n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n use syntax::ast::{Many, Once};\n-use syntax::ast::{NormalFn, UnsafeFn};\n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n use syntax::ast::{MutMutable, MutImmutable};\n use util::ppaux::mt_to_string;\n use util::ppaux::Repr;\n@@ -77,10 +76,10 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n         self.glb().tys(a, b)\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         match (a, b) {\n-          (UnsafeFn, _) | (_, UnsafeFn) => Ok(UnsafeFn),\n-          (NormalFn, NormalFn) => Ok(NormalFn),\n+          (Unsafety::Unsafe, _) | (_, Unsafety::Unsafe) => Ok(Unsafety::Unsafe),\n+          (Unsafety::Normal, Unsafety::Normal) => Ok(Unsafety::Normal),\n         }\n     }\n "}, {"sha": "00c79bc726cf699bdddc2415a66c5bafd0e5dc3f", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -23,7 +23,7 @@ use middle::ty::{mod, Ty};\n use middle::ty::TyVar;\n use util::ppaux::{Repr};\n \n-use syntax::ast::{Onceness, FnStyle, MutImmutable, MutMutable};\n+use syntax::ast::{Onceness, MutImmutable, MutMutable, Unsafety};\n \n \n /// \"Greatest lower bound\" (common subtype)\n@@ -93,9 +93,9 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         Ok(*a) // return is meaningless in sub, just return *a\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n-        self.lub().fn_styles(a, b).compare(b, || {\n-            ty::terr_fn_style_mismatch(expected_found(self, a, b))\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n+        self.lub().unsafeties(a, b).compare(b, || {\n+            ty::terr_unsafety_mismatch(expected_found(self, a, b))\n         })\n     }\n "}, {"sha": "8cce1321d728bdc7b9ae770f35cd219b01aaf0c9", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -76,7 +76,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n             // method to the root. In this case, if the trait is private, then\n             // parent all the methods to the trait to indicate that they're\n             // private.\n-            ast::ItemTrait(_, _, _, ref methods) if item.vis != ast::Public => {\n+            ast::ItemTrait(_, _, _, _, ref methods) if item.vis != ast::Public => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::ProvidedMethod(ref m) => {\n@@ -241,7 +241,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             //   undefined symbols at linkage time if this case is not handled.\n             //\n             // * Private trait impls for private types can be completely ignored\n-            ast::ItemImpl(_, _, ref ty, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, ref ty, ref impl_items) => {\n                 let public_ty = match ty.node {\n                     ast::TyPath(_, id) => {\n                         match self.tcx.def_map.borrow()[id].clone() {\n@@ -282,7 +282,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n \n             // Default methods on traits are all public so long as the trait\n             // is public\n-            ast::ItemTrait(_, _, _, ref methods) if public_first => {\n+            ast::ItemTrait(_, _, _, _, ref methods) if public_first => {\n                 for method in methods.iter() {\n                     match *method {\n                         ast::ProvidedMethod(ref m) => {\n@@ -611,7 +611,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                     // invoked, and the struct/enum itself is private. Crawl\n                     // back up the chains to find the relevant struct/enum that\n                     // was private.\n-                    ast::ItemImpl(_, _, ref ty, _) => {\n+                    ast::ItemImpl(_, _, _, ref ty, _) => {\n                         let id = match ty.node {\n                             ast::TyPath(_, id) => id,\n                             _ => return Some((err_span, err_msg, None)),\n@@ -1096,7 +1096,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         match item.node {\n             // implementations of traits don't need visibility qualifiers because\n             // that's controlled by having the trait in scope.\n-            ast::ItemImpl(_, Some(..), _, ref impl_items) => {\n+            ast::ItemImpl(_, _, Some(..), _, ref impl_items) => {\n                 check_inherited(item.span, item.vis,\n                                 \"visibility qualifiers have no effect on trait \\\n                                  impls\");\n@@ -1134,7 +1134,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ast::ItemTrait(_, _, _, ref methods) => {\n+            ast::ItemTrait(_, _, _, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::ProvidedMethod(ref m) => {\n@@ -1175,7 +1175,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         };\n         check_inherited(tcx, item.span, item.vis);\n         match item.node {\n-            ast::ItemImpl(_, _, _, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         ast::MethodImplItem(ref m) => {\n@@ -1198,7 +1198,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n \n             ast::ItemStruct(ref def, _) => check_struct(&**def),\n \n-            ast::ItemTrait(_, _, _, ref methods) => {\n+            ast::ItemTrait(_, _, _, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::RequiredMethod(..) => {}\n@@ -1305,7 +1305,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // namespace (the contents have their own privacies).\n             ast::ItemForeignMod(_) => {}\n \n-            ast::ItemTrait(_, _, ref bounds, _) => {\n+            ast::ItemTrait(_, _, _, ref bounds, _) => {\n                 if !self.trait_is_public(item.id) {\n                     return\n                 }\n@@ -1320,7 +1320,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // (i.e. we could just return here to not check them at\n             // all, or some worse estimation of whether an impl is\n             // publicly visible.\n-            ast::ItemImpl(ref g, ref trait_ref, ref self_, ref impl_items) => {\n+            ast::ItemImpl(_, ref g, ref trait_ref, ref self_, ref impl_items) => {\n                 // `impl [... for] Private` is never visible.\n                 let self_contains_private;\n                 // impl [... for] Public<...>, but not `impl [... for]"}, {"sha": "38d3b859c9d228689e0ddcab4852cbc3f70e88f7", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -55,7 +55,7 @@ fn item_might_be_inlined(item: &ast::Item) -> bool {\n     }\n \n     match item.node {\n-        ast::ItemImpl(ref generics, _, _, _) |\n+        ast::ItemImpl(_, ref generics, _, _, _) |\n         ast::ItemFn(_, _, _, ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                                       .map\n                                       .expect_item(impl_did.node)\n                                       .node {\n-                                ast::ItemImpl(ref generics, _, _, _) => {\n+                                ast::ItemImpl(_, ref generics, _, _, _) => {\n                                     generics_require_inlining(generics)\n                                 }\n                                 _ => false"}, {"sha": "c6fdd845ea7758d7ef001ab77959e6aec9ce7407", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -1432,7 +1432,7 @@ impl<'a> Resolver<'a> {\n                 parent\n             }\n \n-            ItemImpl(_, None, ref ty, ref impl_items) => {\n+            ItemImpl(_, _, None, ref ty, ref impl_items) => {\n                 // If this implements an anonymous trait, then add all the\n                 // methods within to a new module, if the type was defined\n                 // within this module.\n@@ -1581,9 +1581,9 @@ impl<'a> Resolver<'a> {\n                 parent\n             }\n \n-            ItemImpl(_, Some(_), _, _) => parent,\n+            ItemImpl(_, _, Some(_), _, _) => parent,\n \n-            ItemTrait(_, _, _, ref items) => {\n+            ItemTrait(_, _, _, _, ref items) => {\n                 let name_bindings =\n                     self.add_child(name,\n                                    parent.clone(),\n@@ -4230,7 +4230,8 @@ impl<'a> Resolver<'a> {\n                 });\n             }\n \n-            ItemImpl(ref generics,\n+            ItemImpl(_,\n+                     ref generics,\n                      ref implemented_traits,\n                      ref self_type,\n                      ref impl_items) => {\n@@ -4241,7 +4242,7 @@ impl<'a> Resolver<'a> {\n                                             impl_items.as_slice());\n             }\n \n-            ItemTrait(ref generics, ref unbound, ref bounds, ref trait_items) => {\n+            ItemTrait(_, ref generics, ref unbound, ref bounds, ref trait_items) => {\n                 // Create a new rib for the self type.\n                 let mut self_type_rib = Rib::new(ItemRibKind);\n "}, {"sha": "48d6ac847d8d02b66a562eddc2c960414aae1b98", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -106,15 +106,15 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n             ast::ItemTy(_, ref generics) |\n             ast::ItemEnum(_, ref generics) |\n             ast::ItemStruct(_, ref generics) |\n-            ast::ItemTrait(ref generics, _, _, _) => {\n+            ast::ItemTrait(_, ref generics, _, _, _) => {\n                 // These kinds of items have only early bound lifetime parameters.\n                 let lifetimes = &generics.lifetimes;\n                 self.with(EarlyScope(subst::TypeSpace, lifetimes, &ROOT_SCOPE), |this| {\n                     this.check_lifetime_defs(lifetimes);\n                     visit::walk_item(this, item);\n                 });\n             }\n-            ast::ItemImpl(ref generics, _, _, _) => {\n+            ast::ItemImpl(_, ref generics, _, _, _) => {\n                 // Impls have both early- and late-bound lifetimes.\n                 self.visit_early_late(subst::TypeSpace, generics, |this| {\n                     this.check_lifetime_defs(&generics.lifetimes);"}, {"sha": "8b31132f7362184e196409e60b7ebc657efe0909", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -791,7 +791,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             // provide an impl, but only for suitable `fn` pointers\n             ty::ty_bare_fn(ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     inputs: _,\n@@ -1505,7 +1505,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         let sig = match self_ty.sty {\n             ty::ty_bare_fn(ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 ref sig\n             }) => {"}, {"sha": "d6fd3d9a94388059bdc8a29e767b918414ec76c8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -80,7 +80,7 @@ use std::rc::Rc;\n use std::collections::enum_set::{EnumSet, CLike};\n use std::collections::hash_map::{HashMap, Occupied, Vacant};\n use syntax::abi;\n-use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n+use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, Ident, ItemTrait, LOCAL_CRATE};\n use syntax::ast::{MutImmutable, MutMutable, Name, NamedField, NodeId};\n use syntax::ast::{Onceness, StmtExpr, StmtSemi, StructField, UnnamedField};\n use syntax::ast::{Visibility};\n@@ -908,14 +908,14 @@ pub fn type_escapes_depth(ty: Ty, depth: uint) -> bool {\n \n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct BareFnTy<'tcx> {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub abi: abi::Abi,\n     pub sig: FnSig<'tcx>,\n }\n \n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ClosureTy<'tcx> {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub onceness: ast::Onceness,\n     pub store: TraitStore,\n     pub bounds: ExistentialBounds,\n@@ -1380,7 +1380,7 @@ impl<T:Copy> Copy for expected_found<T> {}\n #[deriving(Clone, Show)]\n pub enum type_err<'tcx> {\n     terr_mismatch,\n-    terr_fn_style_mismatch(expected_found<FnStyle>),\n+    terr_unsafety_mismatch(expected_found<ast::Unsafety>),\n     terr_onceness_mismatch(expected_found<Onceness>),\n     terr_abi_mismatch(expected_found<abi::Abi>),\n     terr_mutability,\n@@ -1915,6 +1915,8 @@ pub struct Polytype<'tcx> {\n \n /// As `Polytype` but for a trait ref.\n pub struct TraitDef<'tcx> {\n+    pub unsafety: ast::Unsafety,\n+\n     /// Generic type definitions. Note that `Self` is listed in here\n     /// as having a single bound, the trait itself (e.g., in the trait\n     /// `Eq`, there is a single bound `Self : Eq`). This is so that\n@@ -2354,7 +2356,7 @@ pub fn mk_ctor_fn<'tcx>(cx: &ctxt<'tcx>,\n     let input_args = input_tys.iter().map(|ty| *ty).collect();\n     mk_bare_fn(cx,\n                BareFnTy {\n-                   fn_style: ast::NormalFn,\n+                   unsafety: ast::Unsafety::Normal,\n                    abi: abi::Rust,\n                    sig: FnSig {\n                     inputs: input_args,\n@@ -3994,7 +3996,7 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n \n                             ty::mk_closure(\n                                 cx,\n-                                ty::ClosureTy {fn_style: b.fn_style,\n+                                ty::ClosureTy {unsafety: b.unsafety,\n                                                onceness: ast::Many,\n                                                store: store,\n                                                bounds: bounds,\n@@ -4404,7 +4406,7 @@ pub fn type_err_to_str<'tcx>(cx: &ctxt<'tcx>, err: &type_err<'tcx>) -> String {\n     match *err {\n         terr_cyclic_ty => \"cyclic type of infinite size\".to_string(),\n         terr_mismatch => \"types differ\".to_string(),\n-        terr_fn_style_mismatch(values) => {\n+        terr_unsafety_mismatch(values) => {\n             format!(\"expected {} fn, found {} fn\",\n                     values.expected.to_string(),\n                     values.found.to_string())\n@@ -4572,7 +4574,7 @@ pub fn provided_trait_methods<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n         match cx.map.find(id.node) {\n             Some(ast_map::NodeItem(item)) => {\n                 match item.node {\n-                    ItemTrait(_, _, _, ref ms) => {\n+                    ItemTrait(_, _, _, _, ref ms) => {\n                         let (_, p) =\n                             ast_util::split_trait_methods(ms.as_slice());\n                         p.iter()\n@@ -4739,7 +4741,7 @@ pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n             match cx.map.find(id.node) {\n                 Some(ast_map::NodeItem(item)) => {\n                     match item.node {\n-                        ast::ItemImpl(_, ref opt_trait, _, _) => {\n+                        ast::ItemImpl(_, _, ref opt_trait, _, _) => {\n                             match opt_trait {\n                                 &Some(ref t) => {\n                                     Some(ty::node_id_to_trait_ref(cx, t.ref_id))\n@@ -5720,7 +5722,7 @@ pub fn trait_id_of_impl(tcx: &ctxt,\n     match node {\n         ast_map::NodeItem(item) => {\n             match item.node {\n-                ast::ItemImpl(_, Some(ref trait_ref), _, _) => {\n+                ast::ItemImpl(_, _, Some(ref trait_ref), _, _) => {\n                     Some(node_id_to_trait_ref(tcx, trait_ref.ref_id).def_id)\n                 }\n                 _ => None\n@@ -5871,12 +5873,12 @@ pub fn hash_crate_independent(tcx: &ctxt, ty: Ty, svh: &Svh) -> u64 {\n             }\n             ty_bare_fn(ref b) => {\n                 byte!(14);\n-                hash!(b.fn_style);\n+                hash!(b.unsafety);\n                 hash!(b.abi);\n             }\n             ty_closure(ref c) => {\n                 byte!(15);\n-                hash!(c.fn_style);\n+                hash!(c.unsafety);\n                 hash!(c.onceness);\n                 hash!(c.bounds);\n                 match c.store {"}, {"sha": "5d0c584864dbcdd5415c9cd2539139ed598ccf22", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -563,7 +563,7 @@ pub fn super_fold_bare_fn_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n {\n     ty::BareFnTy { sig: fty.sig.fold_with(this),\n                    abi: fty.abi,\n-                   fn_style: fty.fn_style }\n+                   unsafety: fty.unsafety }\n }\n \n pub fn super_fold_closure_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n@@ -573,7 +573,7 @@ pub fn super_fold_closure_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n     ty::ClosureTy {\n         store: fty.store.fold_with(this),\n         sig: fty.sig.fold_with(this),\n-        fn_style: fty.fn_style,\n+        unsafety: fty.unsafety,\n         onceness: fty.onceness,\n         bounds: fty.bounds.fold_with(this),\n         abi: fty.abi,"}, {"sha": "74e312803f31ae03856e09024959d31f1db3d3bc", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -259,16 +259,16 @@ pub fn trait_ref_to_string<'tcx>(cx: &ctxt<'tcx>,\n \n pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n     fn bare_fn_to_string<'tcx>(cx: &ctxt<'tcx>,\n-                               fn_style: ast::FnStyle,\n+                               unsafety: ast::Unsafety,\n                                abi: abi::Abi,\n                                ident: Option<ast::Ident>,\n                                sig: &ty::FnSig<'tcx>)\n                                -> String {\n         let mut s = String::new();\n-        match fn_style {\n-            ast::NormalFn => {}\n-            _ => {\n-                s.push_str(fn_style.to_string().as_slice());\n+        match unsafety {\n+            ast::Unsafety::Normal => {}\n+            ast::Unsafety::Unsafe => {\n+                s.push_str(unsafety.to_string().as_slice());\n                 s.push(' ');\n             }\n         };\n@@ -302,10 +302,10 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             }\n         }\n \n-        match cty.fn_style {\n-            ast::NormalFn => {}\n-            _ => {\n-                s.push_str(cty.fn_style.to_string().as_slice());\n+        match cty.unsafety {\n+            ast::Unsafety::Normal => {}\n+            ast::Unsafety::Unsafe => {\n+                s.push_str(cty.unsafety.to_string().as_slice());\n                 s.push(' ');\n             }\n         };\n@@ -414,7 +414,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             closure_to_string(cx, &**f)\n         }\n         ty_bare_fn(ref f) => {\n-            bare_fn_to_string(cx, f.fn_style, f.abi, None, &f.sig)\n+            bare_fn_to_string(cx, f.unsafety, f.abi, None, &f.sig)\n         }\n         ty_infer(infer_ty) => infer_ty_to_string(cx, infer_ty),\n         ty_err => \"[type error]\".to_string(),\n@@ -1001,8 +1001,8 @@ impl<'tcx> Repr<'tcx> for ast::Visibility {\n \n impl<'tcx> Repr<'tcx> for ty::BareFnTy<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"BareFnTy {{fn_style: {}, abi: {}, sig: {}}}\",\n-                self.fn_style,\n+        format!(\"BareFnTy {{unsafety: {}, abi: {}, sig: {}}}\",\n+                self.unsafety,\n                 self.abi.to_string(),\n                 self.sig.repr(tcx))\n     }"}, {"sha": "6a50af3bc799208adcda6d2d57a466c9058f9415", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n                      -> Ty<'tcx>\n     {\n         ty::mk_closure(self.infcx.tcx, ty::ClosureTy {\n-            fn_style: ast::NormalFn,\n+            unsafety: ast::Unsafety::Normal,\n             onceness: ast::Many,\n             store: ty::RegionTraitStore(region_bound, ast::MutMutable),\n             bounds: ty::region_existential_bound(region_bound),"}, {"sha": "712d6217dde81fd9ba237ef91435bbdd932b7b95", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -282,7 +282,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 NodeItem(item) => {\n                     scope_id = item.id;\n                     match item.node {\n-                        ast::ItemImpl(_, _, ref ty, _) => {\n+                        ast::ItemImpl(_, _, _, ref ty, _) => {\n                             let mut result = String::from_str(\"<\");\n                             result.push_str(ty_to_string(&**ty).as_slice());\n \n@@ -1040,7 +1040,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                 self.process_const(item, &**typ, &**expr),\n             ast::ItemStruct(ref def, ref ty_params) => self.process_struct(item, &**def, ty_params),\n             ast::ItemEnum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n-            ast::ItemImpl(ref ty_params,\n+            ast::ItemImpl(_,\n+                          ref ty_params,\n                           ref trait_ref,\n                           ref typ,\n                           ref impl_items) => {\n@@ -1050,7 +1051,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                   &**typ,\n                                   impl_items)\n             }\n-            ast::ItemTrait(ref generics, _, ref trait_refs, ref methods) =>\n+            ast::ItemTrait(_, ref generics, _, ref trait_refs, ref methods) =>\n                 self.process_trait(item, generics, trait_refs, methods),\n             ast::ItemMod(ref m) => self.process_mod(item, m),\n             ast::ItemTy(ref ty, ref ty_params) => {"}, {"sha": "83779ffbe161c8935c317ba0c3e1744d3993c449", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -2304,7 +2304,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n         let mut v = TransItemVisitor{ ccx: ccx };\n         v.visit_block(&**body);\n       }\n-      ast::ItemImpl(ref generics, _, _, ref impl_items) => {\n+      ast::ItemImpl(_, ref generics, _, _, ref impl_items) => {\n         meth::trans_impl(ccx,\n                          item.ident,\n                          impl_items.as_slice(),"}, {"sha": "81d44d84414798e7e402b27e75950f188bf8fe00", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -278,7 +278,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     // which is the fn pointer, and `args`, which is the arguments tuple.\n     let (input_tys, output_ty) =\n         match bare_fn_ty.sty {\n-            ty::ty_bare_fn(ty::BareFnTy { fn_style: ast::NormalFn,\n+            ty::ty_bare_fn(ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n                                           abi: synabi::Rust,\n                                           sig: ty::FnSig { inputs: ref input_tys,\n                                                            output: output_ty,\n@@ -294,7 +294,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n         };\n     let tuple_input_ty = ty::mk_tup(tcx, input_tys.to_vec());\n     let tuple_fn_ty = ty::mk_bare_fn(tcx,\n-                                     ty::BareFnTy { fn_style: ast::NormalFn,\n+                                     ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n                                                     abi: synabi::RustCall,\n                                                     sig: ty::FnSig {\n                                                         inputs: vec![bare_fn_ty_ref,"}, {"sha": "3f8c951786dfaff5c6e470cd0e87c144730973a0", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -433,8 +433,8 @@ impl<'tcx> TypeMap<'tcx> {\n                                        &trait_data.principal.substs,\n                                        &mut unique_type_id);\n             },\n-            ty::ty_bare_fn(ty::BareFnTy{ fn_style, abi, ref sig } ) => {\n-                if fn_style == ast::UnsafeFn {\n+            ty::ty_bare_fn(ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+                if unsafety == ast::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n                 }\n \n@@ -551,13 +551,13 @@ impl<'tcx> TypeMap<'tcx> {\n                                               cx: &CrateContext<'a, 'tcx>,\n                                               closure_ty: ty::ClosureTy<'tcx>,\n                                               unique_type_id: &mut String) {\n-        let ty::ClosureTy { fn_style,\n+        let ty::ClosureTy { unsafety,\n                             onceness,\n                             store,\n                             ref bounds,\n                             ref sig,\n                             abi: _ } = closure_ty;\n-        if fn_style == ast::UnsafeFn {\n+        if unsafety == ast::Unsafety::Unsafe {\n             unique_type_id.push_str(\"unsafe \");\n         }\n \n@@ -3767,8 +3767,8 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, trait_data.principal.def_id, false, output);\n             push_type_params(cx, &trait_data.principal.substs, output);\n         },\n-        ty::ty_bare_fn(ty::BareFnTy{ fn_style, abi, ref sig } ) => {\n-            if fn_style == ast::UnsafeFn {\n+        ty::ty_bare_fn(ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+            if unsafety == ast::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }\n \n@@ -3810,13 +3810,13 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         },\n-        ty::ty_closure(box ty::ClosureTy { fn_style,\n+        ty::ty_closure(box ty::ClosureTy { unsafety,\n                                            onceness,\n                                            store,\n                                            ref sig,\n                                            .. // omitting bounds ...\n                                            }) => {\n-            if fn_style == ast::UnsafeFn {\n+            if unsafety == ast::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }\n "}, {"sha": "b3272a14753511f1e8fe6fd81f0e59eb723abbff", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -924,7 +924,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                     tcx.sess.span_err(ast_ty.span,\n                                       \"variadic function must have C calling convention\");\n                 }\n-                ty::mk_bare_fn(tcx, ty_of_bare_fn(this, bf.fn_style, bf.abi, &*bf.decl))\n+                ty::mk_bare_fn(tcx, ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl))\n             }\n             ast::TyClosure(ref f) => {\n                 // Use corresponding trait store to figure out default bounds\n@@ -935,7 +935,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                                      None,\n                                                      f.bounds.as_slice());\n                 let fn_decl = ty_of_closure(this,\n-                                            f.fn_style,\n+                                            f.unsafety,\n                                             f.onceness,\n                                             bounds,\n                                             ty::RegionTraitStore(\n@@ -1082,7 +1082,7 @@ struct SelfInfo<'a, 'tcx> {\n \n pub fn ty_of_method<'tcx, AC: AstConv<'tcx>>(\n                     this: &AC,\n-                    fn_style: ast::FnStyle,\n+                    unsafety: ast::Unsafety,\n                     untransformed_self_ty: Ty<'tcx>,\n                     explicit_self: &ast::ExplicitSelf,\n                     decl: &ast::FnDecl,\n@@ -1094,22 +1094,22 @@ pub fn ty_of_method<'tcx, AC: AstConv<'tcx>>(\n     });\n     let (bare_fn_ty, optional_explicit_self_category) =\n         ty_of_method_or_bare_fn(this,\n-                                fn_style,\n+                                unsafety,\n                                 abi,\n                                 self_info,\n                                 decl);\n     (bare_fn_ty, optional_explicit_self_category.unwrap())\n }\n \n-pub fn ty_of_bare_fn<'tcx, AC: AstConv<'tcx>>(this: &AC, fn_style: ast::FnStyle, abi: abi::Abi,\n+pub fn ty_of_bare_fn<'tcx, AC: AstConv<'tcx>>(this: &AC, unsafety: ast::Unsafety, abi: abi::Abi,\n                                               decl: &ast::FnDecl) -> ty::BareFnTy<'tcx> {\n-    let (bare_fn_ty, _) = ty_of_method_or_bare_fn(this, fn_style, abi, None, decl);\n+    let (bare_fn_ty, _) = ty_of_method_or_bare_fn(this, unsafety, abi, None, decl);\n     bare_fn_ty\n }\n \n fn ty_of_method_or_bare_fn<'a, 'tcx, AC: AstConv<'tcx>>(\n                            this: &AC,\n-                           fn_style: ast::FnStyle,\n+                           unsafety: ast::Unsafety,\n                            abi: abi::Abi,\n                            opt_self_info: Option<SelfInfo<'a, 'tcx>>,\n                            decl: &ast::FnDecl)\n@@ -1207,7 +1207,7 @@ fn ty_of_method_or_bare_fn<'a, 'tcx, AC: AstConv<'tcx>>(\n     };\n \n     (ty::BareFnTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         abi: abi,\n         sig: ty::FnSig {\n             inputs: self_and_input_tys,\n@@ -1301,7 +1301,7 @@ fn determine_explicit_self_category<'a, 'tcx, AC: AstConv<'tcx>,\n \n pub fn ty_of_closure<'tcx, AC: AstConv<'tcx>>(\n     this: &AC,\n-    fn_style: ast::FnStyle,\n+    unsafety: ast::Unsafety,\n     onceness: ast::Onceness,\n     bounds: ty::ExistentialBounds,\n     store: ty::TraitStore,\n@@ -1346,7 +1346,7 @@ pub fn ty_of_closure<'tcx, AC: AstConv<'tcx>>(\n     debug!(\"ty_of_closure: output_ty={}\", output_ty.repr(this.tcx()));\n \n     ty::ClosureTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         onceness: onceness,\n         store: store,\n         bounds: bounds,"}, {"sha": "e3fec2c8b1df2623bf936f54040d6fbed6fdb374", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -89,7 +89,7 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n \n     let mut fn_ty = astconv::ty_of_closure(\n         fcx,\n-        ast::NormalFn,\n+        ast::Unsafety::Normal,\n         ast::Many,\n \n         // The `RegionTraitStore` and region_existential_bounds\n@@ -119,7 +119,7 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     fcx.write_ty(expr.id, closure_type);\n \n     check_fn(fcx.ccx,\n-             ast::NormalFn,\n+             ast::Unsafety::Normal,\n              expr.id,\n              &fn_ty.sig,\n              decl,\n@@ -304,7 +304,7 @@ fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n \n     // construct the function type\n     let fn_ty = astconv::ty_of_closure(fcx,\n-                                       ast::NormalFn,\n+                                       ast::Unsafety::Normal,\n                                        expected_onceness,\n                                        expected_bounds,\n                                        store,\n@@ -321,9 +321,9 @@ fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     // style inferred for it, then check it under its parent's style.\n     // Otherwise, use its own\n     let (inherited_style, inherited_style_id) = match store {\n-        ty::RegionTraitStore(..) => (fcx.ps.borrow().fn_style,\n+        ty::RegionTraitStore(..) => (fcx.ps.borrow().unsafety,\n                                      fcx.ps.borrow().def),\n-        ty::UniqTraitStore => (ast::NormalFn, expr.id)\n+        ty::UniqTraitStore => (ast::Unsafety::Normal, expr.id)\n     };\n \n     check_fn(fcx.ccx,"}, {"sha": "7463652a931360a2320c9d30ed5f1f6e73c5c162", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -115,7 +115,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         // Create the final `MethodCallee`.\n         let fty = ty::mk_bare_fn(self.tcx(), ty::BareFnTy {\n             sig: method_sig,\n-            fn_style: pick.method_ty.fty.fn_style,\n+            unsafety: pick.method_ty.fty.unsafety,\n             abi: pick.method_ty.fty.abi.clone(),\n         });\n         let callee = MethodCallee {"}, {"sha": "d97a9c9e39b19c9844032053135131fca7c85aeb", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -205,7 +205,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     let transformed_self_ty = fn_sig.inputs[0];\n     let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n         sig: fn_sig,\n-        fn_style: bare_fn_ty.fn_style,\n+        unsafety: bare_fn_ty.unsafety,\n         abi: bare_fn_ty.abi.clone(),\n     });\n "}, {"sha": "e0df94745d6a906e2156dc5135d02c06bccfea29", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -180,35 +180,33 @@ enum Expectation<'tcx> {\n \n impl<'tcx> Copy for Expectation<'tcx> {}\n \n-#[deriving(Clone)]\n-pub struct FnStyleState {\n+#[deriving(Copy, Clone)]\n+pub struct UnsafetyState {\n     pub def: ast::NodeId,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     from_fn: bool\n }\n \n-impl Copy for FnStyleState {}\n-\n-impl FnStyleState {\n-    pub fn function(fn_style: ast::FnStyle, def: ast::NodeId) -> FnStyleState {\n-        FnStyleState { def: def, fn_style: fn_style, from_fn: true }\n+impl UnsafetyState {\n+    pub fn function(unsafety: ast::Unsafety, def: ast::NodeId) -> UnsafetyState {\n+        UnsafetyState { def: def, unsafety: unsafety, from_fn: true }\n     }\n \n-    pub fn recurse(&mut self, blk: &ast::Block) -> FnStyleState {\n-        match self.fn_style {\n+    pub fn recurse(&mut self, blk: &ast::Block) -> UnsafetyState {\n+        match self.unsafety {\n             // If this unsafe, then if the outer function was already marked as\n             // unsafe we shouldn't attribute the unsafe'ness to the block. This\n             // way the block can be warned about instead of ignoring this\n             // extraneous block (functions are never warned about).\n-            ast::UnsafeFn if self.from_fn => *self,\n+            ast::Unsafety::Unsafe if self.from_fn => *self,\n \n-            fn_style => {\n-                let (fn_style, def) = match blk.rules {\n-                    ast::UnsafeBlock(..) => (ast::UnsafeFn, blk.id),\n-                    ast::DefaultBlock => (fn_style, self.def),\n+            unsafety => {\n+                let (unsafety, def) = match blk.rules {\n+                    ast::UnsafeBlock(..) => (ast::Unsafety::Unsafe, blk.id),\n+                    ast::DefaultBlock => (unsafety, self.def),\n                 };\n-                FnStyleState{ def: def,\n-                             fn_style: fn_style,\n+                UnsafetyState{ def: def,\n+                             unsafety: unsafety,\n                              from_fn: false }\n             }\n         }\n@@ -240,7 +238,7 @@ pub struct FnCtxt<'a, 'tcx: 'a> {\n \n     ret_ty: ty::FnOutput<'tcx>,\n \n-    ps: RefCell<FnStyleState>,\n+    ps: RefCell<UnsafetyState>,\n \n     inh: &'a Inherited<'a, 'tcx>,\n \n@@ -312,7 +310,7 @@ pub fn blank_fn_ctxt<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n         writeback_errors: Cell::new(false),\n         err_count_on_creation: ccx.tcx.sess.err_count(),\n         ret_ty: rty,\n-        ps: RefCell::new(FnStyleState::function(ast::NormalFn, 0)),\n+        ps: RefCell::new(UnsafetyState::function(ast::Unsafety::Normal, 0)),\n         inh: inh,\n         ccx: ccx\n     }\n@@ -374,7 +372,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     match fty.sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n             let inh = Inherited::new(ccx.tcx, param_env);\n-            let fcx = check_fn(ccx, fn_ty.fn_style, id, &fn_ty.sig,\n+            let fcx = check_fn(ccx, fn_ty.unsafety, id, &fn_ty.sig,\n                                decl, id, body, &inh);\n \n             vtable::select_all_fcx_obligations_or_error(&fcx);\n@@ -476,8 +474,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for GatherLocalsVisitor<'a, 'tcx> {\n /// * ...\n /// * inherited: other fields inherited from the enclosing fn (if any)\n fn check_fn<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n-                      fn_style: ast::FnStyle,\n-                      fn_style_id: ast::NodeId,\n+                      unsafety: ast::Unsafety,\n+                      unsafety_id: ast::NodeId,\n                       fn_sig: &ty::FnSig<'tcx>,\n                       decl: &ast::FnDecl,\n                       fn_id: ast::NodeId,\n@@ -506,7 +504,7 @@ fn check_fn<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n         writeback_errors: Cell::new(false),\n         err_count_on_creation: err_count_on_creation,\n         ret_ty: ret_ty,\n-        ps: RefCell::new(FnStyleState::function(fn_style, fn_style_id)),\n+        ps: RefCell::new(UnsafetyState::function(unsafety, unsafety_id)),\n         inh: inherited,\n         ccx: ccx\n     };\n@@ -597,7 +595,7 @@ pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) {\n         let param_env = ParameterEnvironment::for_item(ccx.tcx, it.id);\n         check_bare_fn(ccx, &**decl, &**body, it.id, fn_pty.ty, param_env);\n       }\n-      ast::ItemImpl(_, ref opt_trait_ref, _, ref impl_items) => {\n+      ast::ItemImpl(_, _, ref opt_trait_ref, _, ref impl_items) => {\n         debug!(\"ItemImpl {} with id {}\", token::get_ident(it.ident), it.id);\n \n         let impl_pty = ty::lookup_item_type(ccx.tcx, ast_util::local_def(it.id));\n@@ -627,7 +625,7 @@ pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) {\n         }\n \n       }\n-      ast::ItemTrait(_, _, _, ref trait_methods) => {\n+      ast::ItemTrait(_, _, _, _, ref trait_methods) => {\n         let trait_def = ty::lookup_trait_def(ccx.tcx, local_def(it.id));\n         for trait_method in trait_methods.iter() {\n             match *trait_method {\n@@ -4493,8 +4491,8 @@ fn check_block_with_expected<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                        expected: Expectation<'tcx>) {\n     let prev = {\n         let mut fcx_ps = fcx.ps.borrow_mut();\n-        let fn_style_state = fcx_ps.recurse(blk);\n-        replace(&mut *fcx_ps, fn_style_state)\n+        let unsafety_state = fcx_ps.recurse(blk);\n+        replace(&mut *fcx_ps, unsafety_state)\n     };\n \n     let mut warned = false;\n@@ -5696,7 +5694,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n         (n_tps, inputs, ty::FnConverging(output))\n     };\n     let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-        fn_style: ast::UnsafeFn,\n+        unsafety: ast::Unsafety::Unsafe,\n         abi: abi::RustIntrinsic,\n         sig: FnSig {\n             inputs: inputs,"}, {"sha": "a55f3c61919402a15c7d14716c77618c839da960", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -50,6 +50,7 @@ use util::ppaux::Repr;\n \n mod orphan;\n mod overlap;\n+mod unsafety;\n \n fn get_base_type<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n                            span: Span,\n@@ -145,7 +146,7 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for CoherenceCheckVisitor<'a, 'tcx> {\n         //debug!(\"(checking coherence) item '{}'\", token::get_ident(item.ident));\n \n         match item.node {\n-            ItemImpl(_, ref opt_trait, _, _) => {\n+            ItemImpl(_, _, ref opt_trait, _, _) => {\n                 match opt_trait.clone() {\n                     Some(opt_trait) => {\n                         self.cc.check_implementation(item, &[opt_trait]);\n@@ -325,7 +326,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     // Converts an implementation in the AST to a vector of items.\n     fn create_impl_from_item(&self, item: &Item) -> Vec<ImplOrTraitItemId> {\n         match item.node {\n-            ItemImpl(_, ref trait_refs, _, ref ast_items) => {\n+            ItemImpl(_, _, ref trait_refs, _, ref ast_items) => {\n                 let mut items: Vec<ImplOrTraitItemId> =\n                         ast_items.iter()\n                                  .map(|ast_item| {\n@@ -620,6 +621,7 @@ pub fn check_coherence(crate_context: &CrateCtxt) {\n         inference_context: new_infer_ctxt(crate_context.tcx),\n         inherent_impls: RefCell::new(FnvHashMap::new()),\n     }.check(crate_context.tcx.map.krate());\n+    unsafety::check(crate_context.tcx);\n     orphan::check(crate_context.tcx);\n     overlap::check(crate_context.tcx);\n }"}, {"sha": "1803bf766dda1042788334c5943627bd41be46ad", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -44,7 +44,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v ast::Item) {\n         let def_id = ast_util::local_def(item.id);\n         match item.node {\n-            ast::ItemImpl(_, None, _, _) => {\n+            ast::ItemImpl(_, _, None, _, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\", item.repr(self.tcx));\n@@ -64,7 +64,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            ast::ItemImpl(_, Some(_), _, _) => {\n+            ast::ItemImpl(_, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\", item.repr(self.tcx));\n                 if traits::is_orphan_impl(self.tcx, def_id) {"}, {"sha": "07a84846c47ad26d96192b791939b2030dff9a84", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Unsafety checker: every impl either implements a trait defined in this\n+//! crate or pertains to a type defined in this crate.\n+\n+use middle::ty;\n+use syntax::ast::{Item, ItemImpl};\n+use syntax::ast;\n+use syntax::ast_util;\n+use syntax::visit;\n+use util::ppaux::UserString;\n+\n+pub fn check(tcx: &ty::ctxt) {\n+    let mut orphan = UnsafetyChecker { tcx: tcx };\n+    visit::walk_crate(&mut orphan, tcx.map.krate());\n+}\n+\n+struct UnsafetyChecker<'cx, 'tcx:'cx> {\n+    tcx: &'cx ty::ctxt<'tcx>\n+}\n+\n+impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n+    fn visit_item(&mut self, item: &'v ast::Item) {\n+        match item.node {\n+            ast::ItemImpl(unsafety, _, _, _, _) => {\n+                match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n+                    None => {\n+                        // Inherent impl.\n+                        match unsafety {\n+                            ast::Unsafety::Normal => { /* OK */ }\n+                            ast::Unsafety::Unsafe => {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    \"inherent impls cannot be declared as unsafe\");\n+                            }\n+                        }\n+                    }\n+\n+                    Some(trait_ref) => {\n+                        let trait_def = ty::lookup_trait_def(self.tcx, trait_ref.def_id);\n+                        match (trait_def.unsafety, unsafety) {\n+                            (ast::Unsafety::Normal, ast::Unsafety::Unsafe) => {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    format!(\"implementing the trait `{}` is not unsafe\",\n+                                            trait_ref.user_string(self.tcx)).as_slice());\n+                            }\n+\n+                            (ast::Unsafety::Unsafe, ast::Unsafety::Normal) => {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    format!(\"the trait `{}` requires an `unsafe impl` declaration\",\n+                                            trait_ref.user_string(self.tcx)).as_slice());\n+                            }\n+\n+                            (ast::Unsafety::Unsafe, ast::Unsafety::Unsafe) |\n+                            (ast::Unsafety::Normal, ast::Unsafety::Normal) => {\n+                                /* OK */\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            _ => { }\n+        }\n+\n+        visit::walk_item(self, item);\n+    }\n+}"}, {"sha": "61b8e6c956cabb2244f2efc967e8dd18d3c03ccb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -258,7 +258,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                    trait_def: &ty::TraitDef<'tcx>) {\n     let tcx = ccx.tcx;\n     if let ast_map::NodeItem(item) = tcx.map.get(trait_id) {\n-        if let ast::ItemTrait(_, _, _, ref trait_items) = item.node {\n+        if let ast::ItemTrait(_, _, _, _, ref trait_items) = item.node {\n             // For each method, construct a suitable ty::Method and\n             // store it into the `tcx.impl_or_trait_items` table:\n             for trait_item in trait_items.iter() {\n@@ -277,7 +277,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     &m.explicit_self,\n                                     m.abi,\n                                     &m.generics,\n-                                    &m.fn_style,\n+                                    &m.unsafety,\n                                     &*m.decl)\n                             }\n                             ast::ProvidedMethod(ref m) => {\n@@ -291,7 +291,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     m.pe_explicit_self(),\n                                     m.pe_abi(),\n                                     m.pe_generics(),\n-                                    &m.pe_fn_style(),\n+                                    &m.pe_unsafety(),\n                                     &*m.pe_fn_decl())\n                             }\n                             ast::TypeTraitItem(ref at) => {\n@@ -366,7 +366,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                            m_explicit_self: &ast::ExplicitSelf,\n                                            m_abi: abi::Abi,\n                                            m_generics: &ast::Generics,\n-                                           m_fn_style: &ast::FnStyle,\n+                                           m_unsafety: &ast::Unsafety,\n                                            m_decl: &ast::FnDecl)\n                                            -> ty::Method<'tcx> {\n         let ty_generics =\n@@ -386,7 +386,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             let trait_self_ty = ty::mk_self_type(tmcx.tcx(),\n                                                  local_def(trait_id));\n             astconv::ty_of_method(&tmcx,\n-                                  *m_fn_style,\n+                                  *m_unsafety,\n                                   trait_self_ty,\n                                   m_explicit_self,\n                                   m_decl,\n@@ -572,7 +572,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                     method_generics: &m_ty_generics,\n                 };\n                 astconv::ty_of_method(&imcx,\n-                                      m.pe_fn_style(),\n+                                      m.pe_unsafety(),\n                                       untransformed_rcvr_ty,\n                                       m.pe_explicit_self(),\n                                       &*m.pe_fn_decl(),\n@@ -586,7 +586,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                     method_generics: &m_ty_generics,\n                 };\n                 astconv::ty_of_method(&tmcx,\n-                                      m.pe_fn_style(),\n+                                      m.pe_unsafety(),\n                                       untransformed_rcvr_ty,\n                                       m.pe_explicit_self(),\n                                       &*m.pe_fn_decl(),\n@@ -1045,7 +1045,8 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                                    enum_definition.variants.as_slice(),\n                                    generics);\n         },\n-        ast::ItemImpl(ref generics,\n+        ast::ItemImpl(_,\n+                      ref generics,\n                       ref opt_trait_ref,\n                       ref selfty,\n                       ref impl_items) => {\n@@ -1144,7 +1145,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                                                AllowEqConstraints::DontAllow);\n             }\n         },\n-        ast::ItemTrait(_, _, _, ref trait_methods) => {\n+        ast::ItemTrait(_, _, _, _, ref trait_methods) => {\n             let trait_def = trait_def_of_item(ccx, it);\n \n             debug!(\"trait_def: ident={} trait_def={}\",\n@@ -1335,12 +1336,13 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         return def.clone();\n     }\n \n-    let (generics, unbound, bounds, items) = match it.node {\n-        ast::ItemTrait(ref generics,\n+    let (unsafety, generics, unbound, bounds, items) = match it.node {\n+        ast::ItemTrait(unsafety,\n+                       ref generics,\n                        ref unbound,\n                        ref supertraits,\n                        ref items) => {\n-            (generics, unbound, supertraits, items.as_slice())\n+            (unsafety, generics, unbound, supertraits, items.as_slice())\n         }\n         ref s => {\n             tcx.sess.span_bug(\n@@ -1369,6 +1371,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     let substs = mk_item_substs(ccx, &ty_generics);\n     let trait_def = Rc::new(ty::TraitDef {\n+        unsafety: unsafety,\n         generics: ty_generics,\n         bounds: bounds,\n         trait_ref: Rc::new(ty::TraitRef {\n@@ -1446,7 +1449,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n             tcx.tcache.borrow_mut().insert(local_def(it.id), pty.clone());\n             return pty;\n         }\n-        ast::ItemFn(ref decl, fn_style, abi, ref generics, _) => {\n+        ast::ItemFn(ref decl, unsafety, abi, ref generics, _) => {\n             let ty_generics = ty_generics_for_fn_or_method(\n                 ccx,\n                 generics,\n@@ -1457,7 +1460,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n                     ccx: ccx,\n                     generics: &ty_generics,\n                 };\n-                astconv::ty_of_bare_fn(&fcx, fn_style, abi, &**decl)\n+                astconv::ty_of_bare_fn(&fcx, unsafety, abi, &**decl)\n             };\n             let pty = Polytype {\n                 generics: ty_generics,\n@@ -2151,7 +2154,7 @@ pub fn ty_of_foreign_fn_decl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         ccx.tcx,\n         ty::BareFnTy {\n             abi: abi,\n-            fn_style: ast::UnsafeFn,\n+            unsafety: ast::Unsafety::Unsafe,\n             sig: ty::FnSig {inputs: input_tys,\n                             output: output,\n                             variadic: decl.variadic}"}, {"sha": "d55d642f746514709a6616e3a3fb7f3bcb5164cf", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -226,7 +226,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n             let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     inputs: Vec::new(),\n@@ -274,7 +274,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             }\n \n             let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     inputs: vec!("}, {"sha": "8fe14bae0f5bc00b7b96d2ab0ee54cfaaa80987f", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n         match item.node {\n             ast::ItemEnum(_, ref generics) |\n             ast::ItemStruct(_, ref generics) |\n-            ast::ItemTrait(ref generics, _, _, _) => {\n+            ast::ItemTrait(_, ref generics, _, _, _) => {\n                 for (i, p) in generics.lifetimes.iter().enumerate() {\n                     let id = p.lifetime.id;\n                     self.add_inferred(item.id, RegionParam, TypeSpace, i, id);"}, {"sha": "a7d7c5207550b88a552acf65d6becfab7fe2bfe0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -161,6 +161,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n     let trait_def = ty::lookup_trait_def(tcx, did);\n     let (bounds, default_unbound) = trait_def.bounds.clean(cx);\n     clean::Trait {\n+        unsafety: def.unsafety,\n         generics: (&def.generics, subst::TypeSpace).clean(cx),\n         items: items.collect(),\n         bounds: bounds,\n@@ -171,13 +172,13 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::Function {\n     let t = ty::lookup_item_type(tcx, did);\n     let (decl, style) = match t.ty.sty {\n-        ty::ty_bare_fn(ref f) => ((did, &f.sig).clean(cx), f.fn_style),\n+        ty::ty_bare_fn(ref f) => ((did, &f.sig).clean(cx), f.unsafety),\n         _ => panic!(\"bad function\"),\n     };\n     clean::Function {\n         decl: decl,\n         generics: (&t.generics, subst::FnSpace).clean(cx),\n-        fn_style: style,\n+        unsafety: style,\n     }\n }\n \n@@ -299,10 +300,10 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n                 let mut item = method.clean(cx);\n                 item.inner = match item.inner.clone() {\n                     clean::TyMethodItem(clean::TyMethod {\n-                        fn_style, decl, self_, generics\n+                        unsafety, decl, self_, generics\n                     }) => {\n                         clean::MethodItem(clean::Method {\n-                            fn_style: fn_style,\n+                            unsafety: unsafety,\n                             decl: decl,\n                             self_: self_,\n                             generics: generics,"}, {"sha": "92184ce93deeca2188f40ec2ac1dcfc49fbf720b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -740,7 +740,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>, subst::ParamSpace) {\n pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n }\n \n@@ -768,7 +768,7 @@ impl Clean<Item> for ast::Method {\n             inner: MethodItem(Method {\n                 generics: self.pe_generics().clean(cx),\n                 self_: self.pe_explicit_self().node.clean(cx),\n-                fn_style: self.pe_fn_style().clone(),\n+                unsafety: self.pe_unsafety().clone(),\n                 decl: decl,\n             }),\n         }\n@@ -777,7 +777,7 @@ impl Clean<Item> for ast::Method {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyMethod {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub self_: SelfTy,\n@@ -804,7 +804,7 @@ impl Clean<Item> for ast::TypeMethod {\n             visibility: None,\n             stability: get_stability(cx, ast_util::local_def(self.id)),\n             inner: TyMethodItem(TyMethod {\n-                fn_style: self.fn_style.clone(),\n+                unsafety: self.unsafety.clone(),\n                 decl: decl,\n                 self_: self.explicit_self.node.clean(cx),\n                 generics: self.generics.clean(cx),\n@@ -838,7 +838,7 @@ impl Clean<SelfTy> for ast::ExplicitSelf_ {\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -853,7 +853,7 @@ impl Clean<Item> for doctree::Function {\n             inner: FunctionItem(Function {\n                 decl: self.decl.clean(cx),\n                 generics: self.generics.clean(cx),\n-                fn_style: self.fn_style,\n+                unsafety: self.unsafety,\n             }),\n         }\n     }\n@@ -864,7 +864,7 @@ pub struct ClosureDecl {\n     pub lifetimes: Vec<Lifetime>,\n     pub decl: FnDecl,\n     pub onceness: ast::Onceness,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub bounds: Vec<TyParamBound>,\n }\n \n@@ -874,7 +874,7 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n             lifetimes: self.lifetimes.clean(cx),\n             decl: self.decl.clean(cx),\n             onceness: self.onceness,\n-            fn_style: self.fn_style,\n+            unsafety: self.unsafety,\n             bounds: self.bounds.clean(cx)\n         }\n     }\n@@ -974,6 +974,7 @@ impl Clean<FunctionRetTy> for ast::FunctionRetTy {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Trait {\n+    pub unsafety: ast::Unsafety,\n     pub items: Vec<TraitMethod>,\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n@@ -991,6 +992,7 @@ impl Clean<Item> for doctree::Trait {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             inner: TraitItem(Trait {\n+                unsafety: self.unsafety,\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n@@ -1111,7 +1113,7 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n             attrs: inline::load_attrs(cx, cx.tcx(), self.def_id),\n             source: Span::empty(),\n             inner: TyMethodItem(TyMethod {\n-                fn_style: self.fty.fn_style,\n+                unsafety: self.fty.unsafety,\n                 generics: (&self.generics, subst::FnSpace).clean(cx),\n                 self_: self_,\n                 decl: (self.def_id, &sig).clean(cx),\n@@ -1364,7 +1366,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 type_: box mt.ty.clean(cx),\n             },\n             ty::ty_bare_fn(ref fty) => BareFunction(box BareFunctionDecl {\n-                fn_style: fty.fn_style,\n+                unsafety: fty.unsafety,\n                 generics: Generics {\n                     lifetimes: Vec::new(),\n                     type_params: Vec::new(),\n@@ -1378,7 +1380,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     lifetimes: Vec::new(), // FIXME: this looks wrong...\n                     decl: (ast_util::local_def(0), &fty.sig).clean(cx),\n                     onceness: fty.onceness,\n-                    fn_style: fty.fn_style,\n+                    unsafety: fty.unsafety,\n                     bounds: fty.bounds.clean(cx),\n                 };\n                 match fty.store {\n@@ -1789,7 +1791,7 @@ impl Clean<Item> for doctree::Typedef {\n \n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub struct BareFunctionDecl {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub generics: Generics,\n     pub decl: FnDecl,\n     pub abi: String,\n@@ -1798,7 +1800,7 @@ pub struct BareFunctionDecl {\n impl Clean<BareFunctionDecl> for ast::BareFnTy {\n     fn clean(&self, cx: &DocContext) -> BareFunctionDecl {\n         BareFunctionDecl {\n-            fn_style: self.fn_style,\n+            unsafety: self.unsafety,\n             generics: Generics {\n                 lifetimes: self.lifetimes.clean(cx),\n                 type_params: Vec::new(),\n@@ -2071,7 +2073,7 @@ impl Clean<Item> for ast::ForeignItem {\n                 ForeignFunctionItem(Function {\n                     decl: decl.clean(cx),\n                     generics: generics.clean(cx),\n-                    fn_style: ast::UnsafeFn,\n+                    unsafety: ast::Unsafety::Unsafe,\n                 })\n             }\n             ast::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "6592ca498dc646708ca7c73e97c9a662e11f48c4", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -129,7 +129,7 @@ pub struct Function {\n     pub name: Ident,\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub whence: Span,\n     pub generics: ast::Generics,\n }\n@@ -170,6 +170,7 @@ pub struct Constant {\n }\n \n pub struct Trait {\n+    pub unsafety: ast::Unsafety,\n     pub name: Ident,\n     pub items: Vec<ast::TraitItem>, //should be TraitItem\n     pub generics: ast::Generics,\n@@ -183,6 +184,7 @@ pub struct Trait {\n }\n \n pub struct Impl {\n+    pub unsafety: ast::Unsafety,\n     pub generics: ast::Generics,\n     pub trait_: Option<ast::TraitRef>,\n     pub for_: P<ast::Ty>,"}, {"sha": "6a2929beca22e7f5469daf5111a5f8b895f44358", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -32,7 +32,7 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n-pub struct FnStyleSpace(pub ast::FnStyle);\n+pub struct UnsafetySpace(pub ast::Unsafety);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n@@ -49,7 +49,7 @@ pub struct WhereClause<'a>(pub &'a clean::Generics);\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n \n impl Copy for VisSpace {}\n-impl Copy for FnStyleSpace {}\n+impl Copy for UnsafetySpace {}\n impl Copy for MutableSpace {}\n impl Copy for RawMutableSpace {}\n \n@@ -59,9 +59,9 @@ impl VisSpace {\n     }\n }\n \n-impl FnStyleSpace {\n-    pub fn get(&self) -> ast::FnStyle {\n-        let FnStyleSpace(v) = *self; v\n+impl UnsafetySpace {\n+    pub fn get(&self) -> ast::Unsafety {\n+        let UnsafetySpace(v) = *self; v\n     }\n }\n \n@@ -404,7 +404,7 @@ impl fmt::Show for clean::Type {\n             clean::Primitive(prim) => primitive_link(f, prim, prim.to_string()),\n             clean::Closure(ref decl) => {\n                 write!(f, \"{style}{lifetimes}|{args}|{bounds}{arrow}\",\n-                       style = FnStyleSpace(decl.fn_style),\n+                       style = UnsafetySpace(decl.unsafety),\n                        lifetimes = if decl.lifetimes.len() == 0 {\n                            \"\".to_string()\n                        } else {\n@@ -433,7 +433,7 @@ impl fmt::Show for clean::Type {\n             }\n             clean::Proc(ref decl) => {\n                 write!(f, \"{style}{lifetimes}proc({args}){bounds}{arrow}\",\n-                       style = FnStyleSpace(decl.fn_style),\n+                       style = UnsafetySpace(decl.unsafety),\n                        lifetimes = if decl.lifetimes.len() == 0 {\n                            \"\".to_string()\n                        } else {\n@@ -454,7 +454,7 @@ impl fmt::Show for clean::Type {\n             }\n             clean::BareFunction(ref decl) => {\n                 write!(f, \"{}{}fn{}{}\",\n-                       FnStyleSpace(decl.fn_style),\n+                       UnsafetySpace(decl.unsafety),\n                        match decl.abi.as_slice() {\n                            \"\" => \" extern \".to_string(),\n                            \"\\\"Rust\\\"\" => \"\".to_string(),\n@@ -584,11 +584,11 @@ impl fmt::Show for VisSpace {\n     }\n }\n \n-impl fmt::Show for FnStyleSpace {\n+impl fmt::Show for UnsafetySpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n-            ast::UnsafeFn => write!(f, \"unsafe \"),\n-            ast::NormalFn => Ok(())\n+            ast::Unsafety::Unsafe => write!(f, \"unsafe \"),\n+            ast::Unsafety::Normal => Ok(())\n         }\n     }\n }"}, {"sha": "1977b6320d0ecade3cd69627d2bc01e7d1aed454", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -58,7 +58,7 @@ use rustc::util::nodemap::NodeSet;\n use clean;\n use doctree;\n use fold::DocFolder;\n-use html::format::{VisSpace, Method, FnStyleSpace, MutableSpace, Stability};\n+use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace, Stability};\n use html::format::{ConciseStability, TyParamBounds, WhereClause};\n use html::highlight;\n use html::item_type::ItemType;\n@@ -1664,10 +1664,10 @@ fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    try!(write!(w, \"<pre class='rust fn'>{vis}{fn_style}fn \\\n+    try!(write!(w, \"<pre class='rust fn'>{vis}{unsafety}fn \\\n                     {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(it.visibility),\n-           fn_style = FnStyleSpace(f.fn_style),\n+           unsafety = UnsafetySpace(f.unsafety),\n            name = it.name.as_ref().unwrap().as_slice(),\n            generics = f.generics,\n            where_clause = WhereClause(&f.generics),\n@@ -1693,8 +1693,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n \n     // Output the trait definition\n-    try!(write!(w, \"<pre class='rust trait'>{}trait {}{}{}{} \",\n+    try!(write!(w, \"<pre class='rust trait'>{}{}trait {}{}{}{} \",\n                   VisSpace(it.visibility),\n+                  UnsafetySpace(t.unsafety),\n                   it.name.as_ref().unwrap().as_slice(),\n                   t.generics,\n                   bounds,\n@@ -1813,13 +1814,13 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n }\n \n fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n-    fn method(w: &mut fmt::Formatter, it: &clean::Item, fn_style: ast::FnStyle,\n+    fn method(w: &mut fmt::Formatter, it: &clean::Item, unsafety: ast::Unsafety,\n            g: &clean::Generics, selfty: &clean::SelfTy,\n            d: &clean::FnDecl) -> fmt::Result {\n         write!(w, \"{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n-               match fn_style {\n-                   ast::UnsafeFn => \"unsafe \",\n+               match unsafety {\n+                   ast::Unsafety::Unsafe => \"unsafe \",\n                    _ => \"\",\n                },\n                ty = shortty(it),\n@@ -1841,10 +1842,10 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            method(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n         }\n         clean::MethodItem(ref m) => {\n-            method(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n         }\n         clean::AssociatedTypeItem(ref typ) => {\n             assoc_type(w, meth, typ)"}, {"sha": "4374ce5deef4ecde2d6fbb305005437395b07244", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit_fn(&mut self, item: &ast::Item,\n                     name: ast::Ident, fd: &ast::FnDecl,\n-                    fn_style: &ast::FnStyle, _abi: &abi::Abi,\n+                    unsafety: &ast::Unsafety, _abi: &abi::Abi,\n                     gen: &ast::Generics) -> Function {\n         debug!(\"Visiting fn\");\n         Function {\n@@ -133,7 +133,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: name,\n             whence: item.span,\n             generics: gen.clone(),\n-            fn_style: *fn_style,\n+            unsafety: *unsafety,\n         }\n     }\n \n@@ -322,8 +322,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            ast::ItemTrait(ref gen, ref def_ub, ref b, ref items) => {\n+            ast::ItemTrait(unsafety, ref gen, ref def_ub, ref b, ref items) => {\n                 let t = Trait {\n+                    unsafety: unsafety,\n                     name: name,\n                     items: items.clone(),\n                     generics: gen.clone(),\n@@ -337,8 +338,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.traits.push(t);\n             },\n-            ast::ItemImpl(ref gen, ref tr, ref ty, ref items) => {\n+            ast::ItemImpl(unsafety, ref gen, ref tr, ref ty, ref items) => {\n                 let i = Impl {\n+                    unsafety: unsafety,\n                     generics: gen.clone(),\n                     trait_: tr.clone(),\n                     for_: ty.clone(),"}, {"sha": "206fb26eb55cb94826b47b7b54649c50b984b33f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -20,7 +20,6 @@ pub use self::Decl_::*;\n pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n pub use self::FloatTy::*;\n-pub use self::FnStyle::*;\n pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n pub use self::ImplItem::*;\n@@ -1027,7 +1026,7 @@ pub struct TypeField {\n pub struct TypeMethod {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub fn_style: FnStyle,\n+    pub unsafety: Unsafety,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n     pub generics: Generics,\n@@ -1198,15 +1197,15 @@ impl fmt::Show for Onceness {\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct ClosureTy {\n     pub lifetimes: Vec<LifetimeDef>,\n-    pub fn_style: FnStyle,\n+    pub unsafety: Unsafety,\n     pub onceness: Onceness,\n     pub decl: P<FnDecl>,\n     pub bounds: TyParamBounds,\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct BareFnTy {\n-    pub fn_style: FnStyle,\n+    pub unsafety: Unsafety,\n     pub abi: Abi,\n     pub lifetimes: Vec<LifetimeDef>,\n     pub decl: P<FnDecl>\n@@ -1304,21 +1303,17 @@ pub struct FnDecl {\n     pub variadic: bool\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n-pub enum FnStyle {\n-    /// Declared with \"unsafe fn\"\n-    UnsafeFn,\n-    /// Declared with \"fn\"\n-    NormalFn,\n+#[deriving(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+pub enum Unsafety {\n+    Unsafe,\n+    Normal,\n }\n \n-impl Copy for FnStyle {}\n-\n-impl fmt::Show for FnStyle {\n+impl fmt::Show for Unsafety {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            NormalFn => \"normal\".fmt(f),\n-            UnsafeFn => \"unsafe\".fmt(f),\n+            Unsafety::Normal => \"normal\".fmt(f),\n+            Unsafety::Unsafe => \"unsafe\".fmt(f),\n         }\n     }\n }\n@@ -1371,7 +1366,7 @@ pub enum Method_ {\n              Generics,\n              Abi,\n              ExplicitSelf,\n-             FnStyle,\n+             Unsafety,\n              P<FnDecl>,\n              P<Block>,\n              Visibility),\n@@ -1609,19 +1604,21 @@ pub struct Item {\n pub enum Item_ {\n     ItemStatic(P<Ty>, Mutability, P<Expr>),\n     ItemConst(P<Ty>, P<Expr>),\n-    ItemFn(P<FnDecl>, FnStyle, Abi, Generics, P<Block>),\n+    ItemFn(P<FnDecl>, Unsafety, Abi, Generics, P<Block>),\n     ItemMod(Mod),\n     ItemForeignMod(ForeignMod),\n     ItemTy(P<Ty>, Generics),\n     ItemEnum(EnumDef, Generics),\n     ItemStruct(P<StructDef>, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(Generics,\n+    ItemTrait(Unsafety,\n+              Generics,\n               Option<TraitRef>, // (optional) default bound not required for Self.\n                                 // Currently, only Sized makes sense here.\n               TyParamBounds,\n               Vec<TraitItem>),\n-    ItemImpl(Generics,\n+    ItemImpl(Unsafety,\n+             Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self\n              Vec<ImplItem>),"}, {"sha": "6decfd1c3addc22fa6d0e69563c2b48ef60843a9", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -122,7 +122,7 @@ impl<'a> Code<'a> {\n struct ItemFnParts<'a> {\n     ident:    ast::Ident,\n     decl:     &'a ast::FnDecl,\n-    style:    ast::FnStyle,\n+    unsafety: ast::Unsafety,\n     abi:      abi::Abi,\n     generics: &'a ast::Generics,\n     body:     &'a Block,\n@@ -182,7 +182,7 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> visit::FnKind<'a> {\n         let item = |: p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n-            visit::FkItemFn(p.ident, p.generics, p.style, p.abi)\n+            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi)\n         };\n         let closure = |: _: ClosureParts| {\n             visit::FkFnBlock\n@@ -200,9 +200,9 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             ast_map::NodeItem(i) => match i.node {\n-                ast::ItemFn(ref decl, style, abi, ref generics, ref block) =>\n+                ast::ItemFn(ref decl, unsafety, abi, ref generics, ref block) =>\n                     item_fn(ItemFnParts{\n-                        ident: i.ident, decl: &**decl, style: style, body: &**block,\n+                        ident: i.ident, decl: &**decl, unsafety: unsafety, body: &**block,\n                         generics: generics, abi: abi, id: i.id, span: i.span\n                     }),\n                 _ => panic!(\"item FnLikeNode that is not fn-like\"),"}, {"sha": "6089f39e828b140e63d13a1255e5dda4855591d8", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -755,7 +755,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         let parent = self.parent;\n         self.parent = i.id;\n         match i.node {\n-            ItemImpl(_, _, _, ref impl_items) => {\n+            ItemImpl(_, _, _, _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         MethodImplItem(ref m) => {\n@@ -786,7 +786,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                     None => {}\n                 }\n             }\n-            ItemTrait(_, _, ref bounds, ref trait_items) => {\n+            ItemTrait(_, _, _, ref bounds, ref trait_items) => {\n                 for b in bounds.iter() {\n                     if let TraitTyParamBound(ref t) = *b {\n                         self.insert(t.trait_ref.ref_id, NodeItem(i));"}, {"sha": "63c95a976d47d1d17630e921842db38cec5a6e2a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -233,14 +233,14 @@ pub fn trait_method_to_ty_method(method: &Method) -> TypeMethod {\n                  ref generics,\n                  abi,\n                  ref explicit_self,\n-                 fn_style,\n+                 unsafety,\n                  ref decl,\n                  _,\n                  vis) => {\n             TypeMethod {\n                 ident: ident,\n                 attrs: method.attrs.clone(),\n-                fn_style: fn_style,\n+                unsafety: unsafety,\n                 decl: (*decl).clone(),\n                 generics: generics.clone(),\n                 explicit_self: (*explicit_self).clone(),\n@@ -722,7 +722,7 @@ pub trait PostExpansionMethod {\n     fn pe_generics<'a>(&'a self) -> &'a ast::Generics;\n     fn pe_abi(&self) -> Abi;\n     fn pe_explicit_self<'a>(&'a self) -> &'a ast::ExplicitSelf;\n-    fn pe_fn_style(&self) -> ast::FnStyle;\n+    fn pe_unsafety(&self) -> ast::Unsafety;\n     fn pe_fn_decl<'a>(&'a self) -> &'a ast::FnDecl;\n     fn pe_body<'a>(&'a self) -> &'a ast::Block;\n     fn pe_vis(&self) -> ast::Visibility;\n@@ -749,7 +749,7 @@ impl PostExpansionMethod for Method {\n     mf_method!(pe_abi,Abi,MethDecl(_,_,abi,_,_,_,_,_),abi)\n     mf_method!(pe_explicit_self,&'a ast::ExplicitSelf,\n                MethDecl(_,_,_,ref explicit_self,_,_,_,_),explicit_self)\n-    mf_method!(pe_fn_style,ast::FnStyle,MethDecl(_,_,_,_,fn_style,_,_,_),fn_style)\n+    mf_method!(pe_unsafety,ast::Unsafety,MethDecl(_,_,_,_,unsafety,_,_,_),unsafety)\n     mf_method!(pe_fn_decl,&'a ast::FnDecl,MethDecl(_,_,_,_,_,ref decl,_,_),&**decl)\n     mf_method!(pe_body,&'a ast::Block,MethDecl(_,_,_,_,_,_,ref body,_),&**body)\n     mf_method!(pe_vis,ast::Visibility,MethDecl(_,_,_,_,_,_,_,vis),vis)"}, {"sha": "d2185a00876d2ce895efd8a055e2047446da1a0e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -133,17 +133,17 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n     F: FnMut(&[ast::Attribute]) -> bool\n {\n     let item = match item {\n-        ast::ItemImpl(a, b, c, impl_items) => {\n+        ast::ItemImpl(u, a, b, c, impl_items) => {\n             let impl_items = impl_items.into_iter()\n                                        .filter(|ii| impl_item_in_cfg(cx, ii))\n                                        .collect();\n-            ast::ItemImpl(a, b, c, impl_items)\n+            ast::ItemImpl(u, a, b, c, impl_items)\n         }\n-        ast::ItemTrait(a, b, c, methods) => {\n+        ast::ItemTrait(u, a, b, c, methods) => {\n             let methods = methods.into_iter()\n                                  .filter(|m| trait_method_in_cfg(cx, m))\n                                  .collect();\n-            ast::ItemTrait(a, b, c, methods)\n+            ast::ItemTrait(u, a, b, c, methods)\n         }\n         ast::ItemStruct(def, generics) => {\n             ast::ItemStruct(fold_struct(cx, def), generics)"}, {"sha": "d35091f8ab0aaf11cd205cd4f3b13a94c95bbad6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -969,7 +969,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   name,\n                   Vec::new(),\n                   ast::ItemFn(self.fn_decl(inputs, output),\n-                              ast::NormalFn,\n+                              ast::Unsafety::Normal,\n                               abi::Rust,\n                               generics,\n                               body))"}, {"sha": "f40be823a1a543346122c3ca466e95b377adceea", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -462,7 +462,8 @@ impl<'a> TraitDef<'a> {\n             self.span,\n             ident,\n             a,\n-            ast::ItemImpl(trait_generics,\n+            ast::ItemImpl(ast::Unsafety::Normal,\n+                          trait_generics,\n                           opt_trait_ref,\n                           self_type,\n                           methods.into_iter()\n@@ -684,7 +685,7 @@ impl<'a> MethodDef<'a> {\n                                 fn_generics,\n                                 abi,\n                                 explicit_self,\n-                                ast::NormalFn,\n+                                ast::Unsafety::Normal,\n                                 fn_decl,\n                                 body_block,\n                                 ast::Inherited)"}, {"sha": "9656629e14d7707c2adad859a0f32de332c1045b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                 }\n             }\n \n-            ast::ItemImpl(_, _, _, ref items) => {\n+            ast::ItemImpl(_, _, _, _, ref items) => {\n                 if attr::contains_name(i.attrs.as_slice(),\n                                        \"unsafe_destructor\") {\n                     self.gate_feature(\"unsafe_destructor\","}, {"sha": "8a578c2cb05c0f82e2d61544e936723353816691", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -415,9 +415,9 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 TyRptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n             }\n             TyClosure(f) => {\n-                TyClosure(f.map(|ClosureTy {fn_style, onceness, bounds, decl, lifetimes}| {\n+                TyClosure(f.map(|ClosureTy {unsafety, onceness, bounds, decl, lifetimes}| {\n                     ClosureTy {\n-                        fn_style: fn_style,\n+                        unsafety: unsafety,\n                         onceness: onceness,\n                         bounds: fld.fold_bounds(bounds),\n                         decl: fld.fold_fn_decl(decl),\n@@ -426,9 +426,9 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 }))\n             }\n             TyBareFn(f) => {\n-                TyBareFn(f.map(|BareFnTy {lifetimes, fn_style, abi, decl}| BareFnTy {\n+                TyBareFn(f.map(|BareFnTy {lifetimes, unsafety, abi, decl}| BareFnTy {\n                     lifetimes: fld.fold_lifetime_defs(lifetimes),\n-                    fn_style: fn_style,\n+                    unsafety: unsafety,\n                     abi: abi,\n                     decl: fld.fold_fn_decl(decl)\n                 }))\n@@ -983,10 +983,10 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n         ItemConst(t, e) => {\n             ItemConst(folder.fold_ty(t), folder.fold_expr(e))\n         }\n-        ItemFn(decl, fn_style, abi, generics, body) => {\n+        ItemFn(decl, unsafety, abi, generics, body) => {\n             ItemFn(\n                 folder.fold_fn_decl(decl),\n-                fn_style,\n+                unsafety,\n                 abi,\n                 folder.fold_generics(generics),\n                 folder.fold_block(body)\n@@ -1008,7 +1008,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             let struct_def = folder.fold_struct_def(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n-        ItemImpl(generics, ifce, ty, impl_items) => {\n+        ItemImpl(unsafety, generics, ifce, ty, impl_items) => {\n             let mut new_impl_items = Vec::new();\n             for impl_item in impl_items.iter() {\n                 match *impl_item {\n@@ -1030,12 +1030,13 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                     Some(folder.fold_trait_ref((*trait_ref).clone()))\n                 }\n             };\n-            ItemImpl(folder.fold_generics(generics),\n+            ItemImpl(unsafety,\n+                     folder.fold_generics(generics),\n                      ifce,\n                      folder.fold_ty(ty),\n                      new_impl_items)\n         }\n-        ItemTrait(generics, unbound, bounds, methods) => {\n+        ItemTrait(unsafety, generics, unbound, bounds, methods) => {\n             let bounds = folder.fold_bounds(bounds);\n             let methods = methods.into_iter().flat_map(|method| {\n                 let r = match method {\n@@ -1063,7 +1064,8 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                 };\n                 r\n             }).collect();\n-            ItemTrait(folder.fold_generics(generics),\n+            ItemTrait(unsafety,\n+                      folder.fold_generics(generics),\n                       unbound,\n                       bounds,\n                       methods)\n@@ -1077,7 +1079,7 @@ pub fn noop_fold_type_method<T: Folder>(m: TypeMethod, fld: &mut T) -> TypeMetho\n         id,\n         ident,\n         attrs,\n-        fn_style,\n+        unsafety,\n         abi,\n         decl,\n         generics,\n@@ -1089,7 +1091,7 @@ pub fn noop_fold_type_method<T: Folder>(m: TypeMethod, fld: &mut T) -> TypeMetho\n         id: fld.new_id(id),\n         ident: fld.fold_ident(ident),\n         attrs: attrs.move_map(|a| fld.fold_attribute(a)),\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         abi: abi,\n         decl: fld.fold_fn_decl(decl),\n         generics: fld.fold_generics(generics),\n@@ -1159,7 +1161,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n     let node = folder.fold_item_underscore(node);\n     let ident = match node {\n         // The node may have changed, recompute the \"pretty\" impl name.\n-        ItemImpl(_, ref maybe_trait, ref ty, _) => {\n+        ItemImpl(_, _, ref maybe_trait, ref ty, _) => {\n             ast_util::impl_pretty_name(maybe_trait, &**ty)\n         }\n         _ => ident\n@@ -1211,15 +1213,15 @@ pub fn noop_fold_method<T: Folder>(m: P<Method>, folder: &mut T) -> SmallVector<\n                      generics,\n                      abi,\n                      explicit_self,\n-                     fn_style,\n+                     unsafety,\n                      decl,\n                      body,\n                      vis) => {\n                 MethDecl(folder.fold_ident(ident),\n                          folder.fold_generics(generics),\n                          abi,\n                          folder.fold_explicit_self(explicit_self),\n-                         fn_style,\n+                         unsafety,\n                          folder.fold_fn_decl(decl),\n                          folder.fold_block(body),\n                          vis)"}, {"sha": "d6f5d0e248a86d206be640d88a82d988bec4ef60", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -1062,7 +1062,7 @@ mod test {\n                                                   span:sp(15,15)})), // not sure\n                                 variadic: false\n                             }),\n-                                    ast::NormalFn,\n+                                    ast::Unsafety::Normal,\n                                     abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),"}, {"sha": "d1991c0463f445570a1cd3e7c347b72f0967be3b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 59, "deletions": 35, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -16,7 +16,7 @@ use self::ItemOrViewItem::*;\n use abi;\n use ast::{AssociatedType, BareFnTy, ClosureTy};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n-use ast::{ProvidedMethod, Public, FnStyle};\n+use ast::{ProvidedMethod, Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n@@ -34,7 +34,7 @@ use ast::{Many};\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n-use ast::{Ident, NormalFn, Inherited, ImplItem, Item, Item_, ItemStatic};\n+use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy};\n use ast::{LifetimeDef, Lit, Lit_};\n@@ -60,7 +60,7 @@ use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr, TyQPath\n use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n use ast::{TypeImplItem, TypeTraitItem, Typedef, UnboxedClosureKind};\n use ast::{UnnamedField, UnsafeBlock};\n-use ast::{UnsafeFn, ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n+use ast::{ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use ast;\n@@ -1121,7 +1121,7 @@ impl<'a> Parser<'a> {\n         Function Style\n         */\n \n-        let fn_style = self.parse_unsafety();\n+        let unsafety = self.parse_unsafety();\n         let abi = if self.eat_keyword(keywords::Extern) {\n             self.parse_opt_abi().unwrap_or(abi::C)\n         } else {\n@@ -1139,7 +1139,7 @@ impl<'a> Parser<'a> {\n         });\n         TyBareFn(P(BareFnTy {\n             abi: abi,\n-            fn_style: fn_style,\n+            unsafety: unsafety,\n             lifetimes: lifetime_defs,\n             decl: decl\n         }))\n@@ -1240,7 +1240,7 @@ impl<'a> Parser<'a> {\n \n         */\n \n-        let fn_style = self.parse_unsafety();\n+        let unsafety = self.parse_unsafety();\n \n         let lifetime_defs = self.parse_legacy_lifetime_defs(lifetime_defs);\n \n@@ -1266,19 +1266,19 @@ impl<'a> Parser<'a> {\n         });\n \n         TyClosure(P(ClosureTy {\n-            fn_style: fn_style,\n+            unsafety: unsafety,\n             onceness: Many,\n             bounds: bounds,\n             decl: decl,\n             lifetimes: lifetime_defs,\n         }))\n     }\n \n-    pub fn parse_unsafety(&mut self) -> FnStyle {\n+    pub fn parse_unsafety(&mut self) -> Unsafety {\n         if self.eat_keyword(keywords::Unsafe) {\n-            return UnsafeFn;\n+            return Unsafety::Unsafe;\n         } else {\n-            return NormalFn;\n+            return Unsafety::Normal;\n         }\n     }\n \n@@ -1351,7 +1351,7 @@ impl<'a> Parser<'a> {\n                 let lo = p.span.lo;\n \n                 let vis = p.parse_visibility();\n-                let style = p.parse_fn_style();\n+                let style = p.parse_unsafety();\n                 let abi = if p.eat_keyword(keywords::Extern) {\n                     p.parse_opt_abi().unwrap_or(abi::C)\n                 } else {\n@@ -1379,7 +1379,7 @@ impl<'a> Parser<'a> {\n                     RequiredMethod(TypeMethod {\n                         ident: ident,\n                         attrs: attrs,\n-                        fn_style: style,\n+                        unsafety: style,\n                         decl: d,\n                         generics: generics,\n                         abi: abi,\n@@ -4548,12 +4548,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an item-position function declaration.\n-    fn parse_item_fn(&mut self, fn_style: FnStyle, abi: abi::Abi) -> ItemInfo {\n+    fn parse_item_fn(&mut self, unsafety: Unsafety, abi: abi::Abi) -> ItemInfo {\n         let (ident, mut generics) = self.parse_fn_header();\n         let decl = self.parse_fn_decl(false);\n         self.parse_where_clause(&mut generics);\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block();\n-        (ident, ItemFn(decl, fn_style, abi, generics, body), Some(inner_attrs))\n+        (ident, ItemFn(decl, unsafety, abi, generics, body), Some(inner_attrs))\n     }\n \n     /// Parse a method in a trait impl\n@@ -4591,7 +4591,7 @@ impl<'a> Parser<'a> {\n                                                              self.span.hi) };\n                 (ast::MethMac(m), self.span.hi, attrs)\n             } else {\n-                let fn_style = self.parse_fn_style();\n+                let unsafety = self.parse_unsafety();\n                 let abi = if self.eat_keyword(keywords::Extern) {\n                     self.parse_opt_abi().unwrap_or(abi::C)\n                 } else {\n@@ -4612,7 +4612,7 @@ impl<'a> Parser<'a> {\n                                generics,\n                                abi,\n                                explicit_self,\n-                               fn_style,\n+                               unsafety,\n                                decl,\n                                body,\n                                visa),\n@@ -4628,7 +4628,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse trait Foo { ... }\n-    fn parse_item_trait(&mut self) -> ItemInfo {\n+    fn parse_item_trait(&mut self, unsafety: Unsafety) -> ItemInfo {\n         let ident = self.parse_ident();\n         let mut tps = self.parse_generics();\n         let sized = self.parse_for_sized();\n@@ -4639,7 +4639,7 @@ impl<'a> Parser<'a> {\n         self.parse_where_clause(&mut tps);\n \n         let meths = self.parse_trait_items();\n-        (ident, ItemTrait(tps, sized, bounds, meths), None)\n+        (ident, ItemTrait(unsafety, tps, sized, bounds, meths), None)\n     }\n \n     fn parse_impl_items(&mut self) -> (Vec<ImplItem>, Vec<Attribute>) {\n@@ -4667,7 +4667,7 @@ impl<'a> Parser<'a> {\n     /// Parses two variants (with the region/type params always optional):\n     ///    impl<T> Foo { ... }\n     ///    impl<T> ToString for ~[T] { ... }\n-    fn parse_item_impl(&mut self) -> ItemInfo {\n+    fn parse_item_impl(&mut self, unsafety: ast::Unsafety) -> ItemInfo {\n         // First, parse type parameters if necessary.\n         let mut generics = self.parse_generics();\n \n@@ -4706,7 +4706,7 @@ impl<'a> Parser<'a> {\n         let ident = ast_util::impl_pretty_name(&opt_trait, &*ty);\n \n         (ident,\n-         ItemImpl(generics, opt_trait, ty, impl_items),\n+         ItemImpl(unsafety, generics, opt_trait, ty, impl_items),\n          Some(attrs))\n     }\n \n@@ -5143,16 +5143,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parse unsafe or not\n-    fn parse_fn_style(&mut self) -> FnStyle {\n-        if self.eat_keyword(keywords::Unsafe) {\n-            UnsafeFn\n-        } else {\n-            NormalFn\n-        }\n-    }\n-\n-\n     /// At this point, this is essentially a wrapper for\n     /// parse_foreign_items.\n     fn parse_foreign_mod_items(&mut self,\n@@ -5491,7 +5481,7 @@ impl<'a> Parser<'a> {\n                 // EXTERN FUNCTION ITEM\n                 let abi = opt_abi.unwrap_or(abi::C);\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(NormalFn, abi);\n+                    self.parse_item_fn(Unsafety::Normal, abi);\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5549,12 +5539,45 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return IoviItem(item);\n         }\n+        if self.token.is_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1u, |t| t.is_keyword(keywords::Trait))\n+        {\n+            // UNSAFE TRAIT ITEM\n+            self.expect_keyword(keywords::Unsafe);\n+            self.expect_keyword(keywords::Trait);\n+            let (ident, item_, extra_attrs) =\n+                self.parse_item_trait(ast::Unsafety::Unsafe);\n+            let last_span = self.last_span;\n+            let item = self.mk_item(lo,\n+                                    last_span.hi,\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return IoviItem(item);\n+        }\n+        if self.token.is_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1u, |t| t.is_keyword(keywords::Impl))\n+        {\n+            // IMPL ITEM\n+            self.expect_keyword(keywords::Unsafe);\n+            self.expect_keyword(keywords::Impl);\n+            let (ident, item_, extra_attrs) = self.parse_item_impl(ast::Unsafety::Unsafe);\n+            let last_span = self.last_span;\n+            let item = self.mk_item(lo,\n+                                    last_span.hi,\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return IoviItem(item);\n+        }\n         if self.token.is_keyword(keywords::Fn) &&\n                 self.look_ahead(1, |f| !Parser::fn_expr_lookahead(f)) {\n             // FUNCTION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(NormalFn, abi::Rust);\n+                self.parse_item_fn(Unsafety::Normal, abi::Rust);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5575,7 +5598,7 @@ impl<'a> Parser<'a> {\n             };\n             self.expect_keyword(keywords::Fn);\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(UnsafeFn, abi);\n+                self.parse_item_fn(Unsafety::Unsafe, abi);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5624,7 +5647,8 @@ impl<'a> Parser<'a> {\n         }\n         if self.eat_keyword(keywords::Trait) {\n             // TRAIT ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_trait();\n+            let (ident, item_, extra_attrs) =\n+                self.parse_item_trait(ast::Unsafety::Normal);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5636,7 +5660,7 @@ impl<'a> Parser<'a> {\n         }\n         if self.eat_keyword(keywords::Impl) {\n             // IMPL ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_impl();\n+            let (ident, item_, extra_attrs) = self.parse_item_impl(ast::Unsafety::Normal);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "db122f271a9c45f81da830b4f06b1f7330636b98", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -363,11 +363,11 @@ pub fn ident_to_string(id: &ast::Ident) -> String {\n     $to_string(|s| s.print_ident(*id))\n }\n \n-pub fn fun_to_string(decl: &ast::FnDecl, fn_style: ast::FnStyle, name: ast::Ident,\n+pub fn fun_to_string(decl: &ast::FnDecl, unsafety: ast::Unsafety, name: ast::Ident,\n                   opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                   generics: &ast::Generics) -> String {\n     $to_string(|s| {\n-        try!(s.print_fn(decl, Some(fn_style), abi::Rust,\n+        try!(s.print_fn(decl, Some(unsafety), abi::Rust,\n                         name, generics, opt_explicit_self, ast::Inherited));\n         try!(s.end()); // Close the head box\n         s.end() // Close the outer box\n@@ -707,7 +707,7 @@ impl<'a> State<'a> {\n                 };\n                 try!(self.print_ty_fn(Some(f.abi),\n                                       None,\n-                                      f.fn_style,\n+                                      f.unsafety,\n                                       ast::Many,\n                                       &*f.decl,\n                                       None,\n@@ -726,7 +726,7 @@ impl<'a> State<'a> {\n                 };\n                 try!(self.print_ty_fn(None,\n                                       Some('&'),\n-                                      f.fn_style,\n+                                      f.unsafety,\n                                       f.onceness,\n                                       &*f.decl,\n                                       None,\n@@ -858,10 +858,10 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \";\"));\n                 try!(self.end()); // end the outer cbox\n             }\n-            ast::ItemFn(ref decl, fn_style, abi, ref typarams, ref body) => {\n+            ast::ItemFn(ref decl, unsafety, abi, ref typarams, ref body) => {\n                 try!(self.print_fn(\n                     &**decl,\n-                    Some(fn_style),\n+                    Some(unsafety),\n                     abi,\n                     item.ident,\n                     typarams,\n@@ -917,12 +917,16 @@ impl<'a> State<'a> {\n                 try!(self.print_struct(&**struct_def, generics, item.ident, item.span));\n             }\n \n-            ast::ItemImpl(ref generics,\n+            ast::ItemImpl(unsafety,\n+                          ref generics,\n                           ref opt_trait,\n                           ref ty,\n                           ref impl_items) => {\n-                try!(self.head(visibility_qualified(item.vis,\n-                                                    \"impl\").as_slice()));\n+                try!(self.head(\"\"));\n+                try!(self.print_visibility(item.vis));\n+                try!(self.print_unsafety(unsafety));\n+                try!(self.word_nbsp(\"impl\"));\n+\n                 if generics.is_parameterized() {\n                     try!(self.print_generics(generics));\n                     try!(space(&mut self.s));\n@@ -955,9 +959,11 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.bclose(item.span));\n             }\n-            ast::ItemTrait(ref generics, ref unbound, ref bounds, ref methods) => {\n-                try!(self.head(visibility_qualified(item.vis,\n-                                                    \"trait\").as_slice()));\n+            ast::ItemTrait(unsafety, ref generics, ref unbound, ref bounds, ref methods) => {\n+                try!(self.head(\"\"));\n+                try!(self.print_visibility(item.vis));\n+                try!(self.print_unsafety(unsafety));\n+                try!(self.word_nbsp(\"trait\"));\n                 try!(self.print_ident(item.ident));\n                 try!(self.print_generics(generics));\n                 if let &Some(ref tref) = unbound {\n@@ -1188,7 +1194,7 @@ impl<'a> State<'a> {\n         try!(self.print_outer_attributes(m.attrs.as_slice()));\n         try!(self.print_ty_fn(None,\n                               None,\n-                              m.fn_style,\n+                              m.unsafety,\n                               ast::Many,\n                               &*m.decl,\n                               Some(m.ident),\n@@ -1223,12 +1229,12 @@ impl<'a> State<'a> {\n                           ref generics,\n                           abi,\n                           ref explicit_self,\n-                          fn_style,\n+                          unsafety,\n                           ref decl,\n                           ref body,\n                           vis) => {\n                 try!(self.print_fn(&**decl,\n-                                   Some(fn_style),\n+                                   Some(unsafety),\n                                    abi,\n                                    ident,\n                                    generics,\n@@ -2164,14 +2170,14 @@ impl<'a> State<'a> {\n \n     pub fn print_fn(&mut self,\n                     decl: &ast::FnDecl,\n-                    fn_style: Option<ast::FnStyle>,\n+                    unsafety: Option<ast::Unsafety>,\n                     abi: abi::Abi,\n                     name: ast::Ident,\n                     generics: &ast::Generics,\n                     opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                     vis: ast::Visibility) -> IoResult<()> {\n         try!(self.head(\"\"));\n-        try!(self.print_fn_header_info(opt_explicit_self, fn_style, abi, vis));\n+        try!(self.print_fn_header_info(opt_explicit_self, unsafety, abi, vis));\n         try!(self.nbsp());\n         try!(self.print_ident(name));\n         try!(self.print_generics(generics));\n@@ -2588,7 +2594,7 @@ impl<'a> State<'a> {\n     pub fn print_ty_fn(&mut self,\n                        opt_abi: Option<abi::Abi>,\n                        opt_sigil: Option<char>,\n-                       fn_style: ast::FnStyle,\n+                       unsafety: ast::Unsafety,\n                        onceness: ast::Onceness,\n                        decl: &ast::FnDecl,\n                        id: Option<ast::Ident>,\n@@ -2603,11 +2609,11 @@ impl<'a> State<'a> {\n         if opt_sigil == Some('~') && onceness == ast::Once {\n             try!(word(&mut self.s, \"proc\"));\n         } else if opt_sigil == Some('&') {\n-            try!(self.print_fn_style(fn_style));\n+            try!(self.print_unsafety(unsafety));\n             try!(self.print_extern_opt_abi(opt_abi));\n         } else {\n             assert!(opt_sigil.is_none());\n-            try!(self.print_fn_style(fn_style));\n+            try!(self.print_unsafety(unsafety));\n             try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n             try!(word(&mut self.s, \"fn\"));\n         }\n@@ -2872,10 +2878,10 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_opt_fn_style(&mut self,\n-                            opt_fn_style: Option<ast::FnStyle>) -> IoResult<()> {\n-        match opt_fn_style {\n-            Some(fn_style) => self.print_fn_style(fn_style),\n+    pub fn print_opt_unsafety(&mut self,\n+                            opt_unsafety: Option<ast::Unsafety>) -> IoResult<()> {\n+        match opt_unsafety {\n+            Some(unsafety) => self.print_unsafety(unsafety),\n             None => Ok(())\n         }\n     }\n@@ -2906,11 +2912,11 @@ impl<'a> State<'a> {\n \n     pub fn print_fn_header_info(&mut self,\n                                 _opt_explicit_self: Option<&ast::ExplicitSelf_>,\n-                                opt_fn_style: Option<ast::FnStyle>,\n+                                opt_unsafety: Option<ast::Unsafety>,\n                                 abi: abi::Abi,\n                                 vis: ast::Visibility) -> IoResult<()> {\n         try!(word(&mut self.s, visibility_qualified(vis, \"\").as_slice()));\n-        try!(self.print_opt_fn_style(opt_fn_style));\n+        try!(self.print_opt_unsafety(opt_unsafety));\n \n         if abi != abi::Rust {\n             try!(self.word_nbsp(\"extern\"));\n@@ -2920,10 +2926,10 @@ impl<'a> State<'a> {\n         word(&mut self.s, \"fn\")\n     }\n \n-    pub fn print_fn_style(&mut self, s: ast::FnStyle) -> IoResult<()> {\n+    pub fn print_unsafety(&mut self, s: ast::Unsafety) -> IoResult<()> {\n         match s {\n-            ast::NormalFn => Ok(()),\n-            ast::UnsafeFn => self.word_nbsp(\"unsafe\"),\n+            ast::Unsafety::Normal => Ok(()),\n+            ast::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n         }\n     }\n }\n@@ -2950,7 +2956,7 @@ mod test {\n             variadic: false\n         };\n         let generics = ast_util::empty_generics();\n-        assert_eq!(fun_to_string(&decl, ast::NormalFn, abba_ident,\n+        assert_eq!(fun_to_string(&decl, ast::Unsafety::Normal, abba_ident,\n                                None, &generics),\n                    \"fn abba()\");\n     }"}, {"sha": "155cabb153cfa510560a88179a8b23a016493cfa", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -123,7 +123,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n \n         if is_test_fn(&self.cx, &*i) || is_bench_fn(&self.cx, &*i) {\n             match i.node {\n-                ast::ItemFn(_, ast::UnsafeFn, _, _, _) => {\n+                ast::ItemFn(_, ast::Unsafety::Unsafe, _, _, _) => {\n                     let diag = self.cx.span_diagnostic;\n                     diag.span_fatal(i.span,\n                                     \"unsafe functions cannot be used for \\"}, {"sha": "3535c6e267eba83ff0d2ed87d82647a5168a5878", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -34,7 +34,7 @@ use owned_slice::OwnedSlice;\n \n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    FkItemFn(Ident, &'a Generics, FnStyle, Abi),\n+    FkItemFn(Ident, &'a Generics, Unsafety, Abi),\n \n     /// fn foo(&self)\n     FkMethod(Ident, &'a Generics, &'a Method),\n@@ -282,7 +282,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_generics(type_parameters);\n             walk_enum_def(visitor, enum_definition, type_parameters)\n         }\n-        ItemImpl(ref type_parameters,\n+        ItemImpl(_,\n+                 ref type_parameters,\n                  ref trait_reference,\n                  ref typ,\n                  ref impl_items) => {\n@@ -311,7 +312,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                                      generics,\n                                      item.id)\n         }\n-        ItemTrait(ref generics, _, ref bounds, ref methods) => {\n+        ItemTrait(_, ref generics, _, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n             walk_ty_param_bounds_helper(visitor, bounds);\n             for method in methods.iter() {"}, {"sha": "d5437690acdc74705e1b6ea3831c035ca42462db", "filename": "src/test/auxiliary/trait-safety-lib.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fauxiliary%2Ftrait-safety-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fauxiliary%2Ftrait-safety-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait-safety-lib.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Simple smoke test that unsafe traits can be compiled etc.\n+\n+pub unsafe trait Foo {\n+    fn foo(&self) -> int;\n+}\n+\n+unsafe impl Foo for int {\n+    fn foo(&self) -> int { *self }\n+}"}, {"sha": "d174092e4d0ac898312f7e7ab12473db9422df31", "filename": "src/test/compile-fail/trait-safety-fn-body.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that an unsafe impl does not imply that unsafe actions are\n+// legal in the methods.\n+\n+unsafe trait UnsafeTrait {\n+    fn foo(self) { }\n+}\n+\n+unsafe impl UnsafeTrait for *mut int {\n+    fn foo(self) {\n+        // Unsafe actions are not made legal by taking place in an unsafe trait:\n+        *self += 1; //~ ERROR E0133\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "285d4c1ba8d14a312e55c7667e3fb3825830b765", "filename": "src/test/compile-fail/trait-safety-inherent-impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-inherent-impl.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that inherent impls cannot be unsafe.\n+\n+struct SomeStruct;\n+\n+unsafe impl SomeStruct { //~ ERROR inherent impls cannot be declared as unsafe\n+    fn foo(self) { }\n+}\n+\n+fn main() { }"}, {"sha": "21dd5a237c5db970421a2a29f0bc94bd346f4971", "filename": "src/test/compile-fail/trait-safety-trait-impl-cc.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl-cc.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:trait-safety-lib.rs\n+\n+// Check that unsafe traits require unsafe impls and that inherent\n+// impls cannot be unsafe.\n+\n+extern crate \"trait-safety-lib\" as lib;\n+\n+struct Bar;\n+impl lib::Foo for Bar { //~ ERROR requires an `unsafe impl` declaration\n+    fn foo(&self) -> int {\n+        *self as int\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "1bd6d76360768f8602e46615c73e2eff418776c8", "filename": "src/test/compile-fail/trait-safety-trait-impl.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that unsafe traits require unsafe impls and that inherent\n+// impls cannot be unsafe.\n+\n+trait SafeTrait {\n+    fn foo(self) { }\n+}\n+\n+unsafe trait UnsafeTrait {\n+    fn foo(self) { }\n+}\n+\n+unsafe impl UnsafeTrait for u8 { } // OK\n+\n+impl UnsafeTrait for u16 { } //~ ERROR requires an `unsafe impl` declaration\n+\n+unsafe impl SafeTrait for u32 { } //~ ERROR the trait `SafeTrait` is not unsafe\n+\n+fn main() { }"}, {"sha": "b96dbbf3cc964159bb4dfef44461921ad571bb09", "filename": "src/test/pretty/trait-safety.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-safety.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+unsafe trait UnsafeTrait {\n+    fn foo(&self);\n+}\n+\n+unsafe impl UnsafeTrait for int {\n+    fn foo(&self) { }\n+}\n+\n+pub unsafe trait PubUnsafeTrait {\n+    fn foo(&self);\n+}\n+\n+fn main() { }"}, {"sha": "99203d3e24acc7e569a1be3e7fdb99637cdfe7e2", "filename": "src/test/run-pass/trait-safety-ok-cc.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Frun-pass%2Ftrait-safety-ok-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Frun-pass%2Ftrait-safety-ok-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-safety-ok-cc.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:trait-safety-lib.rs\n+\n+// Simple smoke test that unsafe traits can be compiled across crates.\n+\n+extern crate \"trait-safety-lib\" as lib;\n+\n+use lib::Foo;\n+\n+struct Bar { x: int }\n+unsafe impl Foo for Bar {\n+    fn foo(&self) -> int { self.x }\n+}\n+\n+fn take_foo<F:Foo>(f: &F) -> int { f.foo() }\n+\n+fn main() {\n+    let x: int = 22;\n+    assert_eq!(22, take_foo(&x));\n+\n+    let x: Bar = Bar { x: 23 };\n+    assert_eq!(23, take_foo(&x));\n+}"}, {"sha": "a24796a7d0c31025929372e3a6a20464835d7ec9", "filename": "src/test/run-pass/trait-safety-ok.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Frun-pass%2Ftrait-safety-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085a71623b0d4cb5042fae1432760a8a6d87c32/src%2Ftest%2Frun-pass%2Ftrait-safety-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-safety-ok.rs?ref=6085a71623b0d4cb5042fae1432760a8a6d87c32", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Simple smoke test that unsafe traits can be compiled etc.\n+\n+unsafe trait Foo {\n+    fn foo(&self) -> int;\n+}\n+\n+unsafe impl Foo for int {\n+    fn foo(&self) -> int { *self }\n+}\n+\n+fn take_foo<F:Foo>(f: &F) -> int { f.foo() }\n+\n+fn main() {\n+    let x: int = 22;\n+    assert_eq!(22, take_foo(&x));\n+}"}]}