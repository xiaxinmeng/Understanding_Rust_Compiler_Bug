{"sha": "2aeb76500e979c2acebf056f99db0a0cc96d07d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZWI3NjUwMGU5NzljMmFjZWJmMDU2Zjk5ZGIwYTBjYzk2ZDA3ZDU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T15:18:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-26T15:18:26Z"}, "message": "Rollup merge of #52617 - matthewjasper:remove-unused-code, r=nikomatsakis\n\nDon't match on region kinds when reporting NLL errors\n\nFirst half (by number of tests affected) of the changes to \"does not live long enough\".\n\nNow that lexical MIR borrowck is gone, region kinds are always ReVar, so matching on them to change errors does nothing.\n\nChanges \"borrowed value only lives until here\" to \"`x` is dropped here while still borrowed\".\n\nr? @pnkfelix  cc @nikomatsakis", "tree": {"sha": "0f8b7772e808271d68e0c28fda47e35e89314322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8b7772e808271d68e0c28fda47e35e89314322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aeb76500e979c2acebf056f99db0a0cc96d07d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWeZCCRBK7hj4Ov3rIwAAdHIIAGTQLfpSEYQiZN/mssU14ajg\nEZT5Z4H+asM/NWhDQeDg3gg2Jh3OaGLhNzb5CgxvJUAD1qmlklKTnxBIENzIeEZA\nz8vgqEoXN3KW2foIumBZ1xk2m6rKLgXAKShCEAq9gqpJvyE5wxz9v1xgLgNLCOgy\nJ8ZbO9IzdUEo8UJOfB3sHZ59qzjU0yauKyQUqYOVBuqCPsBr3DvUMWoKwZ9i/aNY\n+ZRplwaAB3dsSKUJsnV/AJnwD5CN4Y2R8oHW95OIfF6vI6X1S79thREw65G5mzAA\noT7hPZEOzZ3ta/em5RPjyeSge41IdsumZv23s5VSK9voJUegr1Qmo0IjFsllnmE=\n=W68U\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f8b7772e808271d68e0c28fda47e35e89314322\nparent 0127704c984ad99f113e7f8b1adeb47994acac6d\nparent 338d545b9062a3efec018c05c2f8834778c9cf2d\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1532618306 -0600\ncommitter GitHub <noreply@github.com> 1532618306 -0600\n\nRollup merge of #52617 - matthewjasper:remove-unused-code, r=nikomatsakis\n\nDon't match on region kinds when reporting NLL errors\n\nFirst half (by number of tests affected) of the changes to \"does not live long enough\".\n\nNow that lexical MIR borrowck is gone, region kinds are always ReVar, so matching on them to change errors does nothing.\n\nChanges \"borrowed value only lives until here\" to \"`x` is dropped here while still borrowed\".\n\nr? @pnkfelix  cc @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aeb76500e979c2acebf056f99db0a0cc96d07d5", "html_url": "https://github.com/rust-lang/rust/commit/2aeb76500e979c2acebf056f99db0a0cc96d07d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aeb76500e979c2acebf056f99db0a0cc96d07d5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0127704c984ad99f113e7f8b1adeb47994acac6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0127704c984ad99f113e7f8b1adeb47994acac6d", "html_url": "https://github.com/rust-lang/rust/commit/0127704c984ad99f113e7f8b1adeb47994acac6d"}, {"sha": "338d545b9062a3efec018c05c2f8834778c9cf2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/338d545b9062a3efec018c05c2f8834778c9cf2d", "html_url": "https://github.com/rust-lang/rust/commit/338d545b9062a3efec018c05c2f8834778c9cf2d"}], "stats": {"total": 333, "additions": 135, "deletions": 198}, "files": [{"sha": "e20e608a2cd5400b02112271b775a6ccba5f85ef", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 95, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -14,7 +14,7 @@ use rustc::mir::{BindingForm, BorrowKind, ClearCrossCrate, Field, Local};\n use rustc::mir::{LocalDecl, LocalKind, Location, Operand, Place};\n use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::mir::VarBindingForm;\n-use rustc::ty::{self, RegionKind};\n+use rustc::ty;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n@@ -427,34 +427,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         self.access_place_error_reported\n             .insert((root_place.clone(), borrow_span));\n \n-        match (borrow.region, &self.describe_place(&borrow.borrowed_place)) {\n-            (RegionKind::ReScope(_), Some(name)) => {\n-                self.report_scoped_local_value_does_not_live_long_enough(\n-                    context,\n-                    name,\n-                    &scope_tree,\n-                    &borrow,\n-                    drop_span,\n-                    borrow_span,\n-                    proper_span,\n-                );\n-            }\n-            (RegionKind::ReScope(_), None) => {\n-                self.report_scoped_temporary_value_does_not_live_long_enough(\n-                    context,\n-                    &scope_tree,\n-                    &borrow,\n-                    drop_span,\n-                    borrow_span,\n-                    proper_span,\n-                );\n-            }\n-            (RegionKind::ReEarlyBound(_), Some(name))\n-            | (RegionKind::ReFree(_), Some(name))\n-            | (RegionKind::ReStatic, Some(name))\n-            | (RegionKind::ReEmpty, Some(name))\n-            | (RegionKind::ReVar(_), Some(name)) => {\n-                self.report_unscoped_local_value_does_not_live_long_enough(\n+        match &self.describe_place(&borrow.borrowed_place) {\n+            Some(name) => {\n+                self.report_local_value_does_not_live_long_enough(\n                     context,\n                     name,\n                     &scope_tree,\n@@ -465,12 +440,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     kind.map(|k| (k, place_span.0)),\n                 );\n             }\n-            (RegionKind::ReEarlyBound(_), None)\n-            | (RegionKind::ReFree(_), None)\n-            | (RegionKind::ReStatic, None)\n-            | (RegionKind::ReEmpty, None)\n-            | (RegionKind::ReVar(_), None) => {\n-                self.report_unscoped_temporary_value_does_not_live_long_enough(\n+            None => {\n+                self.report_temporary_value_does_not_live_long_enough(\n                     context,\n                     &scope_tree,\n                     &borrow,\n@@ -479,65 +450,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     proper_span,\n                 );\n             }\n-            (RegionKind::ReLateBound(_, _), _)\n-            | (RegionKind::ReSkolemized(_, _), _)\n-            | (RegionKind::ReClosureBound(_), _)\n-            | (RegionKind::ReCanonical(_), _)\n-            | (RegionKind::ReErased, _) => {\n-                span_bug!(\n-                    drop_span,\n-                    \"region {:?} does not make sense in this context\",\n-                    borrow.region\n-                );\n-            }\n         }\n     }\n \n-    fn report_scoped_local_value_does_not_live_long_enough(\n-        &mut self,\n-        context: Context,\n-        name: &String,\n-        _scope_tree: &Lrc<ScopeTree>,\n-        borrow: &BorrowData<'tcx>,\n-        drop_span: Span,\n-        borrow_span: Span,\n-        _proper_span: Span,\n-    ) {\n-        let tcx = self.tcx;\n-        let mut err =\n-            tcx.path_does_not_live_long_enough(borrow_span, &format!(\"`{}`\", name), Origin::Mir);\n-        err.span_label(borrow_span, \"borrowed value does not live long enough\");\n-        err.span_label(\n-            drop_span,\n-            format!(\"`{}` dropped here while still borrowed\", name),\n-        );\n-        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.buffer(&mut self.errors_buffer);\n-    }\n-\n-    fn report_scoped_temporary_value_does_not_live_long_enough(\n-        &mut self,\n-        context: Context,\n-        _scope_tree: &Lrc<ScopeTree>,\n-        borrow: &BorrowData<'tcx>,\n-        drop_span: Span,\n-        _borrow_span: Span,\n-        proper_span: Span,\n-    ) {\n-        let tcx = self.tcx;\n-        let mut err =\n-            tcx.path_does_not_live_long_enough(proper_span, \"borrowed value\", Origin::Mir);\n-        err.span_label(proper_span, \"temporary value does not live long enough\");\n-        err.span_label(\n-            drop_span,\n-            \"temporary value dropped here while still borrowed\",\n-        );\n-        err.note(\"consider using a `let` binding to increase its lifetime\");\n-        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.buffer(&mut self.errors_buffer);\n-    }\n-\n-    fn report_unscoped_local_value_does_not_live_long_enough(\n+    fn report_local_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n         name: &String,\n@@ -549,7 +465,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         kind_place: Option<(WriteKind, &Place<'tcx>)>,\n     ) {\n         debug!(\n-            \"report_unscoped_local_value_does_not_live_long_enough(\\\n+            \"report_local_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n             context, name, scope_tree, borrow, drop_span, borrow_span\n@@ -559,13 +475,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut err =\n             tcx.path_does_not_live_long_enough(borrow_span, &format!(\"`{}`\", name), Origin::Mir);\n         err.span_label(borrow_span, \"borrowed value does not live long enough\");\n-        err.span_label(drop_span, \"borrowed value only lives until here\");\n+        err.span_label(\n+            drop_span,\n+            format!(\"`{}` dropped here while still borrowed\", name),\n+        );\n \n         self.explain_why_borrow_contains_point(context, borrow, kind_place, &mut err);\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    fn report_unscoped_temporary_value_does_not_live_long_enough(\n+    fn report_temporary_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n         scope_tree: &Lrc<ScopeTree>,\n@@ -575,7 +494,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         proper_span: Span,\n     ) {\n         debug!(\n-            \"report_unscoped_temporary_value_does_not_live_long_enough(\\\n+            \"report_temporary_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n             context, scope_tree, borrow, drop_span, proper_span"}, {"sha": "b15f156b7c2013510162f1d3a1a1ed7281a14c99", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     spawn(|| books.push(4));\n    |           ^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |     //~^ ERROR E0373\n LL | }\n-   | - borrowed value only lives until here\n+   | - `books` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "8c643973af67b85f8b850a69bf3817a4a4c6e0b9", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     Box::new(|| books.push(4))\n    |              ^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |     //~^ ERROR E0373\n LL | }\n-   | - borrowed value only lives until here\n+   | - `books` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:8...\n   --> $DIR/borrowck-escaping-closure-error-2.rs:19:8"}, {"sha": "b59f628c746bb775a76f56f29ad6be7eb9b2ff90", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     dt = Dt(\"dt\", &c_shortest);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c_shortest` dropped here while still borrowed\n    | borrow later used here, when `dt` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "ad460fcf55e57d4cda386772cd6a795d88c1cfad", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     dt = Dt(\"dt\", &c_shortest);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c_shortest` dropped here while still borrowed\n    | borrow later used here, when `dt` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "864fb2f2ea6f43934fd2b97cc0523c3a65bd45b5", "filename": "src/test/ui/dropck/dropck-eyepatch.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     dt = Dt(\"dt\", &c_shortest);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c_shortest` dropped here while still borrowed\n    | borrow later used here, when `dt` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "31ba24b0004fb4e68dcf9ce41e408ca8b87c0fce", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     //~^ `y` does not live long enough [E0597]\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `y` dropped here while still borrowed\n    | borrow later used here, when `x` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "e03d72a02f0aa6eb2c7ed842ee5cbc79cbca7175", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |         unsafe { (|| yield &a).resume() }\n    |                  ^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:24:9\n@@ -16,7 +16,7 @@ LL | |             //~^ ERROR: `a` does not live long enough\n LL | |         }\n    | |_________^ borrowed value does not live long enough\n LL |       };\n-   |       - borrowed value only lives until here\n+   |       - `a` dropped here while still borrowed\n LL |   }\n    |   - borrow later used here, when `_b` is dropped\n "}, {"sha": "ef7e64ffd97ae251494a68b10e5b8548955c115b", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `*cell` dropped here while still borrowed\n    | borrow later used here, when `gen` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -26,7 +26,7 @@ LL | |     };\n LL |   }\n    |   -\n    |   |\n-   |   borrowed value only lives until here\n+   |   `ref_` dropped here while still borrowed\n    |   borrow later used here, when `gen` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "56d853c2966c5de5b0e2f6cc89d9eecd64a37122", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |         a = &b;\n    |             ^^ borrowed value does not live long enough\n LL |         //~^ ERROR `b` does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `b` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "6eb2765514054d15f2e0eddbd297ecb495f193c4", "filename": "src/test/ui/issue-12470.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-12470.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-12470.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12470.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     let bb: &B = &*b;    //~ ERROR does not live long enough\n    |                  ^^^ borrowed value does not live long enough\n LL |     make_a(bb)\n LL | }\n-   | - borrowed value only lives until here\n+   | - `*b` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 36:16...\n   --> $DIR/issue-12470.rs:36:16"}, {"sha": "5c592f6f37523e4454bf6bf65bd78c5ac5691ae8", "filename": "src/test/ui/issue-13497-2.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-13497-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-13497-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13497-2.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `rawLines` does not live long enough\n+  --> $DIR/issue-13497-2.rs:13:5\n+   |\n+LL |     rawLines //~ ERROR `rawLines` does not live long enough\n+   |     ^^^^^^^^ borrowed value does not live long enough\n+LL |         .iter().map(|l| l.trim()).collect()\n+LL | }\n+   | - `rawLines` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 11:24...\n+  --> $DIR/issue-13497-2.rs:11:24\n+   |\n+LL | fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n+   |                        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "5cab7ca9e7a3fa6d7e6d405194923c3d9103327e", "filename": "src/test/ui/issue-17954.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     let a = &FOO;\n    |             ^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `FOO` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "5cab7ca9e7a3fa6d7e6d405194923c3d9103327e", "filename": "src/test/ui/issue-17954.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-17954.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-17954.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.mir.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     let a = &FOO;\n    |             ^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `FOO` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "b5e550e5be1c9d963a3a7483d86dbc19523a19d3", "filename": "src/test/ui/issue-17954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.rs?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -29,5 +29,5 @@ fn main() {\n         println!(\"{}\", a);\n     });\n }\n-//[mir]~^ borrowed value only lives until here\n+//[mir]~^ `FOO` dropped here while still borrowed\n //[ast]~^^ temporary value only lives until here"}, {"sha": "860359b5937cc15634ab505f6483fc7a35649dcc", "filename": "src/test/ui/issue-18118.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18118.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -57,7 +57,7 @@ LL |         &p //~ ERROR `p` does not live long enough\n    |         ^^ borrowed value does not live long enough\n LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `p` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "28e63b2d36b114bc6d6b7cd545d0e1da65a316b4", "filename": "src/test/ui/issue-30438-c.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-30438-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-30438-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30438-c.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     &x\n    |     ^^ borrowed value does not live long enough\n LL |     //~^ ERROR: `x` does not live long enough\n LL | }\n-   | - borrowed value only lives until here\n+   | - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'y as defined on the function body at 17:10...\n   --> $DIR/issue-30438-c.rs:17:10"}, {"sha": "40d7838a8032519573159508158cdca96ab6305f", "filename": "src/test/ui/issue-4335.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -11,7 +11,7 @@ LL |     id(Box::new(|| *v))\n    |                 ^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `v` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:6...\n   --> $DIR/issue-4335.rs:15:6"}, {"sha": "463abaede88f9315d3f886e1e5f8638bd7850ff5", "filename": "src/test/ui/issue-46036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-46036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-46036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46036.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     let foo = Foo { x: &a }; //~ ERROR E0597\n    |                        ^^ borrowed value does not live long enough\n LL |     loop { }\n LL | }\n-   | - borrowed value only lives until here\n+   | - `a` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "7d12827dda5d2e958d9a4d2339749af16d4a21df", "filename": "src/test/ui/issue-46471-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -20,7 +20,7 @@ LL | |         &mut z\n LL | |     };\n    | |     -\n    | |     |\n-   | |_____borrowed value only lives until here\n+   | |_____`z` dropped here while still borrowed\n    |       borrow later used here\n \n error: aborting due to 2 previous errors"}, {"sha": "560c341b4df051606a804be229d743b8d14957fe", "filename": "src/test/ui/issue-46471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -16,7 +16,7 @@ LL |     &x\n    |     ^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `x` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "ccbb852b1457484b78f384873994876c539a1f7b", "filename": "src/test/ui/issue-52126-assign-op-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -8,7 +8,7 @@ LL |         println!(\"accumulator before add_assign {:?}\", acc.map);\n    |                                                        ------- borrow later used here\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `line` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "28353a8bc2be7cd96173b85ba924110d998d6d35", "filename": "src/test/ui/nll/borrowed-local-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -10,7 +10,7 @@ LL | |         //~^ ERROR `v` does not live long enough [E0597]\n LL | |     });\n    | |_____-- borrow later used here\n    |       |\n-   |       borrowed value only lives until here\n+   |       `v` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "867e473af2c0ee2c3ab5fec18c6842455c328993", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     &v\n    |     ^^ borrowed value does not live long enough\n LL |     //~^ ERROR `v` does not live long enough [E0597]\n LL | }\n-   | - borrowed value only lives until here\n+   | - `v` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n   --> $DIR/borrowed-universal-error-2.rs:14:8"}, {"sha": "12a9adf6e0ba67b2dc6593acb4e2acf142027f23", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |             y: &y,\n    |                ^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n LL | \n LL |     deref(p);\n    |           - borrow later used here"}, {"sha": "a830768b36e1cd1bd1efefce51034e051c10aa93", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -30,7 +30,7 @@ LL |         closure(&mut p, &y);\n    |                         ^^ borrowed value does not live long enough\n LL |         //~^ ERROR `y` does not live long enough [E0597]\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n LL | \n LL |     deref(p);\n    |           - borrow later used here"}, {"sha": "bf12800e58d71ffbcc4679f56e7e9cf8fa6a23d8", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -57,7 +57,7 @@ LL | |         };\n    | |_________^ borrowed value does not live long enough\n ...\n LL |       }\n-   |       - borrowed value only lives until here\n+   |       - `y` dropped here while still borrowed\n LL | \n LL |       deref(p);\n    |             - borrow later used here"}, {"sha": "4b0dad3bda0229c93083e54301c77666ffe15a3d", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -34,7 +34,7 @@ LL |         let mut closure = || p = &y;\n    |                           ^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n LL | \n LL |     deref(p);\n    |           - borrow later used here"}, {"sha": "0295747d529f1a2c3c83a38ed3e80504c414410e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -82,7 +82,7 @@ LL |     let cell = Cell::new(&a);\n    |                          ^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `a` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "532bc493e7dbcc0400d8699dc2793c1f2106a49a", "filename": "src/test/ui/nll/issue-31567.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |     let s_inner: &'a S = &*v.0; //~ ERROR `*v.0` does not live long enough\n    |                          ^^^^^ borrowed value does not live long enough\n LL |     &s_inner.0\n LL | }\n-   | - borrowed value only lives until here\n+   | - `*v.0` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:17...\n   --> $DIR/issue-31567.rs:21:17"}, {"sha": "e73df61a30371963f3a1dcdea36aab51a4198ca9", "filename": "src/test/ui/nll/issue-47470.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `local` does not live long enough\n LL |         &local //~ ERROR `local` does not live long enough\n    |         ^^^^^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `local` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the impl at 23:6...\n   --> $DIR/issue-47470.rs:23:6"}, {"sha": "ae7193ef4fa793d44b6a515ff55774f76277ab51", "filename": "src/test/ui/region-borrow-params-issue-29793-small.nll.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `x` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:19:17\n@@ -14,7 +14,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `y` dropped here while still borrowed\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n@@ -23,7 +23,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `x` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n@@ -32,7 +32,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `y` dropped here while still borrowed\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:65:17\n@@ -41,7 +41,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n@@ -56,7 +56,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n@@ -71,7 +71,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n@@ -86,7 +86,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n@@ -101,7 +101,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n@@ -116,7 +116,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n@@ -131,7 +131,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n@@ -146,7 +146,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n@@ -161,7 +161,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n@@ -176,7 +176,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n@@ -191,7 +191,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n@@ -206,7 +206,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n@@ -221,7 +221,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n@@ -236,7 +236,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n@@ -251,7 +251,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:198:14\n@@ -266,7 +266,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:198:14"}, {"sha": "13e34d85210a785d33d277ec3a68d38aa0df5887", "filename": "src/test/ui/regions-nested-fns-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL | |             if false { &y } else { z }\n LL | |         });\n    | |_________^ borrowed value does not live long enough\n LL |   }\n-   |   - borrowed value only lives until here\n+   |   - `y` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "22f2f13f1f7cf60db1c8d206de3c0626b22dcb2c", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `*a` does not live long enough\n LL |         *a.borrow() + 1\n    |          ^ borrowed value does not live long enough\n LL |     }; //~^ ERROR `*a` does not live long enough\n-   |     - borrowed value only lives until here\n+   |     - `*a` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "225ed0f9cc832c50b66076604ea79f2190e3a316", "filename": "src/test/ui/span/dropck-object-cycle.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(object_invoke1(&*m), (4,5));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `*m` dropped here while still borrowed\n    | borrow later used here, when `m` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "6c0373ce1570a176a2001345ce741e4f128d2a59", "filename": "src/test/ui/span/dropck_arr_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     b1.a[1].v.set(Some(&b3));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `b3` dropped here while still borrowed\n    | borrow later used here, when `b1` is dropped\n \n error[E0597]: `b2` does not live long enough\n@@ -19,7 +19,7 @@ LL |     b1.a[0].v.set(Some(&b2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `b2` dropped here while still borrowed\n    | borrow later used here, when `b1` is dropped\n \n error[E0597]: `b1` does not live long enough\n@@ -31,7 +31,7 @@ LL |     b3.a[0].v.set(Some(&b1));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `b1` dropped here while still borrowed\n    | borrow later used here, when `b1` is dropped\n \n error: aborting due to 3 previous errors"}, {"sha": "2884b1818baa9cf23801cd1e28dbc4f393af7543", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     d1.p.set(Some(&d2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d2` dropped here while still borrowed\n    | borrow later used here, when `d1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -21,7 +21,7 @@ LL |     //~^ ERROR `d1` does not live long enough\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `d1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "27a52360bb7010f6788f9d6551cffdbe9eb5bc07", "filename": "src/test/ui/span/dropck_misc_variants.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -6,7 +6,7 @@ LL |     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `bomb` dropped here while still borrowed\n    | borrow later used here, when `_w` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -20,7 +20,7 @@ LL |         let u = NoisyDrop(&v);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `v` dropped here while still borrowed\n    | borrow later used here, when `_w` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "c0950e79296784067ecc8d666f505e5c85aa7da6", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     c1.v[1].v.set(Some(&c3));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c3` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c2` does not live long enough\n@@ -19,7 +19,7 @@ LL |     c1.v[0].v.set(Some(&c2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c2` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c1` does not live long enough\n@@ -31,7 +31,7 @@ LL |     c3.v[0].v.set(Some(&c1));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c1` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error: aborting due to 3 previous errors"}, {"sha": "e841e6c635bc31aedf064d36f11b50ac3500802c", "filename": "src/test/ui/span/issue-11925.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `x` does not live long enough\n LL |         let f = to_fn_once(move|| &x); //~ ERROR does not live long enough\n    |                                   ^-\n    |                                   ||\n-   |                                   |borrowed value only lives until here\n+   |                                   |`x` dropped here while still borrowed\n    |                                   borrowed value does not live long enough\n \n error: aborting due to previous error"}, {"sha": "fe0187f38637898f045a56766ae14cb0bfee185f", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,15 +4,15 @@ error[E0597]: `y` does not live long enough\n LL |     y.borrow().clone()\n    |     ^ borrowed value does not live long enough\n LL | }\n-   | - borrowed value only lives until here\n+   | - `y` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n    |\n LL |         y.borrow().clone()\n    |         ^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b9834a3d4379e550b95321da5bcac9c68be8f405", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     _d = D_Child(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "cd3d658aa8726eea3ba8f555cb0eee02e223efe4", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -6,7 +6,7 @@ LL |     _d = D_HasSelfMethod(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -19,7 +19,7 @@ LL |     _d = D_HasMethodWithSelfArg(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -32,7 +32,7 @@ LL |     _d = D_HasType(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "54c6ac43f347c33d93de70cf2624529f449cb7b1", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -6,7 +6,7 @@ LL |     d2 = D(S(&d1, \"inner\"), \"d2\");\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `d2` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "a81b591d288eb234a93e9ab67851d73638385da6", "filename": "src/test/ui/span/issue-25199.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     let test = Test{test: &container};\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `container` dropped here while still borrowed\n    | borrow later used here, when `container` is dropped\n \n error: aborting due to previous error"}, {"sha": "b6c28828120880ea36de2937eeda12862e16edc4", "filename": "src/test/ui/span/issue-26656.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -6,7 +6,7 @@ LL |     zook.button = B::BigRedButton(&ticking);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `ticking` dropped here while still borrowed\n    | borrow later used here, when `zook` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "2cf408d097b837b382c43a8927a98d77bb9fca77", "filename": "src/test/ui/span/issue-29106.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -6,7 +6,7 @@ LL |         y = Arc::new(Foo(&x));\n LL |     }\n    |     -\n    |     |\n-   |     borrowed value only lives until here\n+   |     `x` dropped here while still borrowed\n    |     borrow later used here, when `y` is dropped\n \n error[E0597]: `x` does not live long enough\n@@ -17,7 +17,7 @@ LL |         y = Rc::new(Foo(&x));\n LL |     }\n    |     -\n    |     |\n-   |     borrowed value only lives until here\n+   |     `x` dropped here while still borrowed\n    |     borrow later used here, when `y` is dropped\n \n error: aborting due to 2 previous errors"}, {"sha": "0d13c9844b331377c98db5622e0c46a8b67ae716", "filename": "src/test/ui/span/issue-36537.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |         p = &a;\n    |         ^^^^^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `a` dropped here while still borrowed\n LL |     p.use_ref();\n    |     - borrow later used here\n "}, {"sha": "def4a308bc75efac4ab5f0088faf6dc3104f750f", "filename": "src/test/ui/span/issue-40157.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `foo` does not live long enough\n LL |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n    |                       ------------------------------^^^--------------------\n    |                       |                             |          |\n-   |                       |                             |          borrowed value only lives until here\n+   |                       |                             |          `foo` dropped here while still borrowed\n    |                       |                             borrowed value does not live long enough\n    |                       borrow later used here\n "}, {"sha": "27eb4a3afed6d90decde00d95696e01fcf0bac0d", "filename": "src/test/ui/span/issue28498-reject-ex1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     foo.data[0].1.set(Some(&foo.data[1]));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `foo.data` dropped here while still borrowed\n    | borrow later used here, when `foo` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "72acc54bffb321468473a4ffb1a2a0c488cf7898", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     foo1 = Foo(1, &first_dropped);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `first_dropped` dropped here while still borrowed\n    | borrow later used here, when `foo1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "a39050a5199117d7ae8273ffabe77a99b2ce536b", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `first_dropped` dropped here while still borrowed\n    | borrow later used here, when `foo1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "fcffea25702b92b23544da0303d61e8a1ca3fc55", "filename": "src/test/ui/span/issue28498-reject-trait-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     foo1 = Foo(1, &first_dropped);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `first_dropped` dropped here while still borrowed\n    | borrow later used here, when `foo1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "e5139dca351a6295c42a69af281702a5e05b715b", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `b` does not live long enough\n LL |         p = &*b;\n    |               ^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `b` dropped here while still borrowed\n LL |     //~^^ ERROR `b` does not live long enough\n LL |     p.use_ref();\n    |     - borrow later used here"}, {"sha": "049618fe4744bbc618dc5329dd26dbd4b5581c12", "filename": "src/test/ui/span/range-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `b` does not live long enough\n LL |         &a..&b\n    |             ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `b` dropped here while still borrowed\n ...\n LL |     r.use_ref();\n    |     - borrow later used here\n@@ -15,7 +15,7 @@ error[E0597]: `a` does not live long enough\n LL |         &a..&b\n    |         ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `a` dropped here while still borrowed\n ...\n LL |     r.use_ref();\n    |     - borrow later used here"}, {"sha": "4881259ff23abb30bc4cbaf2da5031d9d9206460", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |         let c_ref = &c;\n    |                     ^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `c` dropped here while still borrowed\n LL |     f.use_mut();\n    |     - borrow later used here\n "}, {"sha": "f522521b400e405faec70ce4842488266a36b494", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -10,7 +10,7 @@ LL | |         repeater3(tmp1)\n LL | |     };\n    | |     -\n    | |     |\n-   | |_____borrowed value only lives until here\n+   | |_____`tmp0` dropped here while still borrowed\n    |       borrow later used here\n \n error: aborting due to previous error"}, {"sha": "08ca100c247dc16d2b083ea0f7e54ddfb1063f7c", "filename": "src/test/ui/span/regions-escape-loop-via-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -6,7 +6,7 @@ LL |         let x = 1 + *p;\n LL |         p = &x;\n    |             ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "33fca7fa703b0589fc5282e55f98c116d00eefe3", "filename": "src/test/ui/span/regions-escape-loop-via-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -41,7 +41,7 @@ LL |         _y.push(&mut z);\n    |         borrow later used here\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5fa25ae8506e6d092a38c20af46d22cbef6742c7", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -5,7 +5,7 @@ LL |         y = borrow(&*x);\n    |                    ^^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `*x` dropped here while still borrowed\n LL |     assert!(*y != 0);\n    |             -- borrow later used here\n "}, {"sha": "7f7217b8004a6338709027816597c38c07d48d31", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -8,7 +8,7 @@ LL | |             //~^ ERROR `y` does not live long enough\n LL | |         })\n    | |_________^ borrowed value does not live long enough\n LL |       };\n-   |       - borrowed value only lives until here\n+   |       - `y` dropped here while still borrowed\n LL | \n LL |       bad.join();\n    |       --- borrow later used here\n@@ -20,7 +20,7 @@ LL |         let y = &x;\n    |                 ^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n LL | \n LL |     bad.join();\n    |     --- borrow later used here"}, {"sha": "58dad753ac4a16041cec864287eb65cd278acf0c", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `x` does not live long enough\n LL |         Mutex::new(&x)\n    |                    ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n ...\n LL |     let _dangling = *lock.lock().unwrap();\n    |                      ---- borrow later used here\n@@ -15,7 +15,7 @@ error[E0597]: `x` does not live long enough\n LL |         RwLock::new(&x)\n    |                     ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n LL |     //~^^ ERROR `x` does not live long enough\n LL |     let _dangling = *lock.read().unwrap();\n    |                      ---- borrow later used here\n@@ -30,7 +30,7 @@ LL |         let _ = tx.send(&x);\n    |                         ^^ borrowed value does not live long enough\n LL |         (tx, rx)\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "878ae36386371e884198de18717031aa84d74094", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -15,7 +15,7 @@ error[E0597]: `z` does not live long enough\n LL |         *lock.lock().unwrap() = &z;\n    |                                 ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n LL |     //~^^ ERROR `z` does not live long enough\n LL |     lock.use_ref(); // (Mutex is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n    |     ---- borrow later used here\n@@ -37,7 +37,7 @@ error[E0597]: `z` does not live long enough\n LL |         *lock.write().unwrap() = &z;\n    |                                  ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n LL |     //~^^ ERROR `z` does not live long enough\n LL |     lock.use_ref(); // (RwLock is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n    |     ---- borrow later used here\n@@ -59,7 +59,7 @@ error[E0597]: `z` does not live long enough\n LL |         tx.send(&z).unwrap();\n    |                 ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n ...\n LL | }\n    | - borrow later used here, when `tx` is dropped"}, {"sha": "ee51304800d3264dcff930fe25a774f7fa98dcd4", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     c1.v[0].v.set(Some(&c2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c2` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c1` does not live long enough\n@@ -19,7 +19,7 @@ LL |     //~^ ERROR `c1` does not live long enough\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c1` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error: aborting due to 2 previous errors"}, {"sha": "73256b4fb17c9e6ec66d32c02cf59f1e5ba2d742", "filename": "src/test/ui/span/vec_refs_data_with_early_death.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -7,7 +7,7 @@ LL |     v.push(&y);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `y` dropped here while still borrowed\n    | borrow later used here, when `v` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -21,7 +21,7 @@ LL |     v.push(&x);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `x` dropped here while still borrowed\n    | borrow later used here, when `v` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "cc32eaaa9799121650b389d6f458396411e32d95", "filename": "src/test/ui/span/wf-method-late-bound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aeb76500e979c2acebf056f99db0a0cc96d07d5/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr?ref=2aeb76500e979c2acebf056f99db0a0cc96d07d5", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `pointer` does not live long enough\n LL |         f2.xmute(&pointer)\n    |                  ^^^^^^^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `pointer` dropped here while still borrowed\n LL |     //~^^ ERROR `pointer` does not live long enough\n LL |     println!(\"{}\", dangling);\n    |                    -------- borrow later used here"}]}