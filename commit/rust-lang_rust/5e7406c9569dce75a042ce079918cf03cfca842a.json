{"sha": "5e7406c9569dce75a042ce079918cf03cfca842a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzQwNmM5NTY5ZGNlNzVhMDQyY2UwNzk5MThjZjAzY2ZjYTg0MmE=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-14T19:17:55Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-09-12T15:38:32Z"}, "message": "Adjust sync::Weak::from_raw to support unsized T", "tree": {"sha": "3badd15845e69aa4a359aaf1c4ffa9cd25f99f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3badd15845e69aa4a359aaf1c4ffa9cd25f99f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7406c9569dce75a042ce079918cf03cfca842a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7406c9569dce75a042ce079918cf03cfca842a", "html_url": "https://github.com/rust-lang/rust/commit/5e7406c9569dce75a042ce079918cf03cfca842a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7406c9569dce75a042ce079918cf03cfca842a/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c61ce2cf0560577923abafab2e5bfce14516525", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c61ce2cf0560577923abafab2e5bfce14516525", "html_url": "https://github.com/rust-lang/rust/commit/0c61ce2cf0560577923abafab2e5bfce14516525"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "06dec6f01f8d3937f5cde8387ea9fb7832f90635", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e7406c9569dce75a042ce079918cf03cfca842a/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7406c9569dce75a042ce079918cf03cfca842a/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=5e7406c9569dce75a042ce079918cf03cfca842a", "patch": "@@ -1629,17 +1629,18 @@ impl<T> Weak<T> {\n     /// [`forget`]: std::mem::forget\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n-        if ptr.is_null() {\n-            Self::new()\n-        } else {\n-            // See Arc::from_raw for details\n-            unsafe {\n-                let offset = data_offset(ptr);\n-                let fake_ptr = ptr as *mut ArcInner<T>;\n-                let ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n-                Weak { ptr: NonNull::new(ptr).expect(\"Invalid pointer passed to from_raw\") }\n-            }\n-        }\n+        // SAFETY: data_offset is safe to call, because this pointer originates from a Weak.\n+        // See Weak::as_ptr for context on how the input pointer is derived.\n+        let offset = unsafe { data_offset(ptr) };\n+\n+        // Reverse the offset to find the original ArcInner.\n+        // SAFETY: we use wrapping_offset here because the pointer may be dangling (iff T: Sized)\n+        let ptr = unsafe {\n+            set_data_ptr(ptr as *mut ArcInner<T>, (ptr as *mut u8).wrapping_offset(-offset))\n+        };\n+\n+        // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n+        unsafe { Weak { ptr: NonNull::new_unchecked(ptr) } }\n     }\n }\n "}]}