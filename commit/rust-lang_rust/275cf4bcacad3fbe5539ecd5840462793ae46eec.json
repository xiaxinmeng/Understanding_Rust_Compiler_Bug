{"sha": "275cf4bcacad3fbe5539ecd5840462793ae46eec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NWNmNGJjYWNhZDNmYmU1NTM5ZWNkNTg0MDQ2Mjc5M2FlNDZlZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T03:32:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T03:32:21Z"}, "message": "Auto merge of #65229 - Centril:rollup-wnr46vg, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #64656 (Implement (HashMap) Entry::insert as per #60142)\n - #65037 (`#[track_caller]` feature gate (RFC 2091 1/N))\n - #65166 (Suggest to add `move` keyword for generator capture)\n - #65175 (add more info in debug traces for gcu merging)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "907f93d50a06e4997a8b0b29214bc219243810c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/907f93d50a06e4997a8b0b29214bc219243810c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/275cf4bcacad3fbe5539ecd5840462793ae46eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/275cf4bcacad3fbe5539ecd5840462793ae46eec", "html_url": "https://github.com/rust-lang/rust/commit/275cf4bcacad3fbe5539ecd5840462793ae46eec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/275cf4bcacad3fbe5539ecd5840462793ae46eec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5bd31ec6db6a249311888a93fc176f06dcb6aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bd31ec6db6a249311888a93fc176f06dcb6aa6", "html_url": "https://github.com/rust-lang/rust/commit/b5bd31ec6db6a249311888a93fc176f06dcb6aa6"}, {"sha": "e27f0298363f6ca60bb5761a8c74d52b3999a061", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27f0298363f6ca60bb5761a8c74d52b3999a061", "html_url": "https://github.com/rust-lang/rust/commit/e27f0298363f6ca60bb5761a8c74d52b3999a061"}], "stats": {"total": 552, "additions": 542, "deletions": 10}, "files": [{"sha": "217ce65c1963cfdfdc1e792bffe8df9f7f21ef6c", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -107,6 +107,12 @@ dependencies = [\n  \"winapi 0.3.6\",\n ]\n \n+[[package]]\n+name = \"autocfg\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n+\n [[package]]\n name = \"backtrace\"\n version = \"0.3.37\"\n@@ -1269,7 +1275,7 @@ version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"df044dd42cdb7e32f28557b661406fc0f2494be75199779998810dbc35030e0d\"\n dependencies = [\n- \"hashbrown\",\n+ \"hashbrown 0.5.0\",\n  \"lazy_static 1.3.0\",\n  \"log\",\n  \"pest\",\n@@ -1286,10 +1292,19 @@ version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e1de41fb8dba9714efd92241565cdff73f78508c95697dd56787d3cba27e2353\"\n dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6587d09be37fb98a11cb08b9000a3f592451c1b1b613ca69d949160e313a430a\"\n+dependencies = [\n+ \"autocfg\",\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n- \"serde\",\n ]\n \n [[package]]\n@@ -4109,7 +4124,7 @@ dependencies = [\n  \"core\",\n  \"dlmalloc\",\n  \"fortanix-sgx-abi\",\n- \"hashbrown\",\n+ \"hashbrown 0.6.1\",\n  \"libc\",\n  \"panic_abort\",\n  \"panic_unwind\","}, {"sha": "afc11a2b9492cfa8ef06de26bebf2a1662a2d195", "filename": "src/doc/unstable-book/src/language-features/track-caller.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrack-caller.md", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrack-caller.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrack-caller.md?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,5 @@\n+# `track_caller`\n+\n+The tracking issue for this feature is: [#47809](https://github.com/rust-lang/rust/issues/47809).\n+\n+------------------------"}, {"sha": "e208e25f6ea9d2d818eacec84b79cf4374dae69d", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -2120,6 +2120,25 @@ These attributes are meant to only be used by the standard library and are\n rejected in your own crates.\n \"##,\n \n+E0736: r##\"\n+#[track_caller] and #[naked] cannot be applied to the same function.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0736\n+#![feature(track_caller)]\n+\n+#[naked]\n+#[track_caller]\n+fn foo() {}\n+```\n+\n+This is primarily due to ABI incompatibilities between the two attributes.\n+See [RFC 2091] for details on this and other limitations.\n+\n+[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n+\"##,\n+\n ;\n //  E0006, // merged with E0005\n //  E0101, // replaced with E0282\n@@ -2179,4 +2198,5 @@ rejected in your own crates.\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n     E0727, // `async` generators are not yet supported\n     E0728, // `await` must be in an `async` function or block\n+    E0739, // invalid track_caller application/syntax\n }"}, {"sha": "c37fec982b1160bd80d505d3f6ad3432ac721545", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -11,7 +11,7 @@ use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n \n use std::fmt::{self, Display};\n-use syntax::symbol::sym;\n+use syntax::{attr, symbol::sym};\n use syntax_pos::Span;\n \n #[derive(Copy, Clone, PartialEq)]\n@@ -103,6 +103,8 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_marker(attr, item, target)\n             } else if attr.check_name(sym::target_feature) {\n                 self.check_target_feature(attr, item, target)\n+            } else if attr.check_name(sym::track_caller) {\n+                self.check_track_caller(attr, &item, target)\n             } else {\n                 true\n             };\n@@ -135,6 +137,32 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    /// Checks if a `#[track_caller]` is applied to a non-naked function. Returns `true` if valid.\n+    fn check_track_caller(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n+        if target != Target::Fn {\n+            struct_span_err!(\n+                self.tcx.sess,\n+                attr.span,\n+                E0739,\n+                \"attribute should be applied to function\"\n+            )\n+            .span_label(item.span, \"not a function\")\n+            .emit();\n+            false\n+        } else if attr::contains_name(&item.attrs, sym::naked) {\n+            struct_span_err!(\n+                self.tcx.sess,\n+                attr.span,\n+                E0736,\n+                \"cannot use `#[track_caller]` with `#[naked]`\",\n+            )\n+            .emit();\n+            false\n+        } else {\n+            true\n+        }\n+    }\n+\n     /// Checks if the `#[non_exhaustive]` attribute on an `item` is valid. Returns `true` if valid.\n     fn check_non_exhaustive(\n         &self,"}, {"sha": "06bd4a42748d893ecf3a1c4339147ebba2e12252", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -2734,7 +2734,9 @@ bitflags! {\n         const USED                      = 1 << 9;\n         /// #[ffi_returns_twice], indicates that an extern function can return\n         /// multiple times\n-        const FFI_RETURNS_TWICE = 1 << 10;\n+        const FFI_RETURNS_TWICE         = 1 << 10;\n+        /// #[track_caller]: allow access to the caller location\n+        const TRACK_CALLER              = 1 << 11;\n     }\n }\n "}, {"sha": "2f9df7bd77e847bd99e0e5850f613ca2a35dc015", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -750,6 +750,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let kind_place = kind.filter(|_| place_desc.is_some()).map(|k| (k, place_span.0));\n         let explanation = self.explain_why_borrow_contains_point(location, &borrow, kind_place);\n \n+        debug!(\n+            \"report_borrowed_value_does_not_live_long_enough(place_desc: {:?}, explanation: {:?})\",\n+            place_desc,\n+            explanation\n+        );\n         let err = match (place_desc, explanation) {\n             (Some(_), _) if self.is_place_thread_local(root_place) => {\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span)\n@@ -790,6 +795,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 span,\n                 &format!(\"`{}`\", name),\n             ),\n+            (\n+                Some(ref name),\n+                BorrowExplanation::MustBeValidFor {\n+                    category: category @ ConstraintCategory::OpaqueType,\n+                    from_closure: false,\n+                    ref region_name,\n+                    span,\n+                    ..\n+                },\n+\n+            ) if borrow_spans.for_generator() => self.report_escaping_closure_capture(\n+                borrow_spans.args_or_use(),\n+                borrow_span,\n+                region_name,\n+                category,\n+                span,\n+                &format!(\"`{}`\", name),\n+            ),\n             (\n                 ref name,\n                 BorrowExplanation::MustBeValidFor {\n@@ -1214,6 +1237,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             ConstraintCategory::Return => {\n                 err.span_note(constraint_span, \"closure is returned here\");\n             }\n+            ConstraintCategory::OpaqueType => {\n+                err.span_note(constraint_span, \"generator is returned here\");\n+            }\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n                 err.span_note("}, {"sha": "5354b45f92d0a236dfd90f1cfa5f0d69db94ed34", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -17,6 +17,7 @@ use syntax_pos::Span;\n \n mod find_use;\n \n+#[derive(Debug)]\n pub(in crate::borrow_check) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span),\n     UsedLaterInLoop(LaterUseKind, Span),\n@@ -35,7 +36,7 @@ pub(in crate::borrow_check) enum BorrowExplanation {\n     Unexplained,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n pub(in crate::borrow_check) enum LaterUseKind {\n     TraitCapture,\n     ClosureCapture,"}, {"sha": "61868b24c0b8a8239e8e78e172bd455c75fd8223", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -494,6 +494,9 @@ fn merge_codegen_units<'tcx>(\n         for (k, v) in smallest.items_mut().drain() {\n             second_smallest.items_mut().insert(k, v);\n         }\n+        debug!(\"CodegenUnit {} merged in to CodegenUnit {}\",\n+               smallest.name(),\n+               second_smallest.name());\n     }\n \n     let cgu_name_builder = &mut CodegenUnitNameBuilder::new(tcx);\n@@ -774,18 +777,19 @@ where\n     if cfg!(debug_assertions) {\n         debug!(\"{}\", label);\n         for cgu in cgus {\n-            debug!(\"CodegenUnit {}:\", cgu.name());\n+            debug!(\"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n \n             for (mono_item, linkage) in cgu.items() {\n                 let symbol_name = mono_item.symbol_name(tcx).name.as_str();\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n                                                    .unwrap_or(\"<no hash>\");\n \n-                debug!(\" - {} [{:?}] [{}]\",\n+                debug!(\" - {} [{:?}] [{}] estimated size {}\",\n                        mono_item.to_string(tcx, true),\n                        linkage,\n-                       symbol_hash);\n+                       symbol_hash,\n+                       mono_item.size_estimate(tcx));\n             }\n \n             debug!(\"\");"}, {"sha": "fa283904fe47467e83357e6cc7d46c4db2060fbd", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -172,6 +172,18 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n+\n+    // Prohibits applying `#[track_caller]` to trait decls\n+    for attr in &trait_item.attrs {\n+        if attr.check_name(sym::track_caller) {\n+            struct_span_err!(\n+                tcx.sess,\n+                attr.span,\n+                E0738,\n+                \"`#[track_caller]` is not supported in trait declarations.\"\n+            ).emit();\n+        }\n+    }\n }\n \n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -182,6 +194,30 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         hir::ImplItemKind::Method(ref sig, _) => Some(sig),\n         _ => None\n     };\n+\n+    // Prohibits applying `#[track_caller]` to trait impls\n+    if method_sig.is_some() {\n+        let track_caller_attr = impl_item.attrs.iter()\n+            .find(|a| a.check_name(sym::track_caller));\n+        if let Some(tc_attr) = track_caller_attr {\n+            let parent_hir_id = tcx.hir().get_parent_item(hir_id);\n+            let containing_item = tcx.hir().expect_item(parent_hir_id);\n+            let containing_impl_is_for_trait = match &containing_item.kind {\n+                hir::ItemKind::Impl(_, _, _, _, tr, _, _) => tr.is_some(),\n+                _ => bug!(\"parent of an ImplItem must be an Impl\"),\n+            };\n+\n+            if containing_impl_is_for_trait {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    tc_attr.span,\n+                    E0738,\n+                    \"`#[track_caller]` is not supported in traits yet.\"\n+                ).emit();\n+            }\n+        }\n+    }\n+\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n "}, {"sha": "7f34aa354c9e858c288ae82fff7ae59b4544aa5e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -2594,6 +2594,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n         } else if attr.check_name(sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n+        } else if attr.check_name(sym::track_caller) {\n+            if tcx.fn_sig(id).abi() != abi::Abi::Rust {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    attr.span,\n+                    E0737,\n+                    \"rust ABI is required to use `#[track_caller]`\"\n+                ).emit();\n+            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n         } else if attr.check_name(sym::export_name) {\n             if let Some(s) = attr.value_str() {\n                 if s.as_str().contains(\"\\0\") {"}, {"sha": "ef08e8d4f0b7ab341d428a998b7061f653ebe29e", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -4905,6 +4905,75 @@ fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n The `Box<...>` ensures that the result is of known size,\n and the pin is required to keep it in the same place in memory.\n \"##,\n+\n+E0737: r##\"\n+#[track_caller] requires functions to have the \"Rust\" ABI for implicitly\n+receiving caller location. See [RFC 2091] for details on this and other\n+restrictions.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0737\n+#![feature(track_caller)]\n+\n+#[track_caller]\n+extern \"C\" fn foo() {}\n+```\n+\n+[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n+\"##,\n+\n+E0738: r##\"\n+#[track_caller] cannot be used in traits yet.  This is due to limitations in the\n+compiler which are likely to be temporary. See [RFC 2091] for details on this\n+and other restrictions.\n+\n+Erroneous example with a trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self);\n+}\n+\n+impl Foo for u64 {\n+    #[track_caller]\n+    fn bar(&self) {}\n+}\n+```\n+\n+Erroneous example with a blanket trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    #[track_caller]\n+    fn bar(&self) {}\n+    fn baz(&self);\n+}\n+```\n+\n+Erroneous example with a trait method declaration:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self) {}\n+\n+    #[track_caller]\n+    fn baz(&self);\n+}\n+```\n+\n+Note that while the compiler may be able to support the attribute in traits in\n+the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n+\n+[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n+\"##,\n+\n ;\n //  E0035, merged into E0087/E0089\n //  E0036, merged into E0087/E0089"}, {"sha": "5309af6f4c342eb9e99f67b4135506ff750bd18f", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -23,7 +23,7 @@ libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of\n compiler_builtins = { version = \"0.1.16\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n-hashbrown = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n+hashbrown = { version = \"0.6.1\", default-features = false, features = ['rustc-dep-of-std'] }\n \n [dependencies.backtrace_rs]\n package = \"backtrace\""}, {"sha": "fcca112563d2da04ae415174cc2d888b8b4404b7", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -2030,6 +2030,31 @@ impl<'a, K, V> Entry<'a, K, V> {\n             Vacant(entry) => Vacant(entry),\n         }\n     }\n+\n+    /// Sets the value of the entry, and returns an OccupiedEntry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_insert)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, String> = HashMap::new();\n+    /// let entry = map.entry(\"poneyland\").insert(\"hoho\".to_string());\n+    ///\n+    /// assert_eq!(entry.key(), &\"poneyland\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"entry_insert\", issue = \"65225\")]\n+    pub fn insert(self, value: V) -> OccupiedEntry<'a, K, V> {\n+        match self {\n+            Occupied(mut entry) => {\n+                entry.insert(value);\n+                entry\n+            },\n+            Vacant(entry) => entry.insert_entry(value),\n+        }\n+    }\n }\n \n impl<'a, K, V: Default> Entry<'a, K, V> {\n@@ -2347,6 +2372,28 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n     pub fn insert(self, value: V) -> &'a mut V {\n         self.base.insert(value)\n     }\n+\n+    /// Sets the value of the entry with the VacantEntry's key,\n+    /// and returns an OccupiedEntry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::Entry;\n+    ///\n+    /// let mut map: HashMap<&str, u32> = HashMap::new();\n+    ///\n+    /// if let Entry::Vacant(o) = map.entry(\"poneyland\") {\n+    ///     o.insert(37);\n+    /// }\n+    /// assert_eq!(map[\"poneyland\"], 37);\n+    /// ```\n+    #[inline]\n+    fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {\n+        let base = self.base.insert_entry(value);\n+        OccupiedEntry { base }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "94f0995566f5289fa6f66229528281ac0a1c0e8c", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -525,6 +525,9 @@ declare_features! (\n     // Allows the use of raw-dylibs (RFC 2627).\n     (active, raw_dylib, \"1.40.0\", Some(58713), None),\n \n+    /// Enable accurate caller location reporting during panic (RFC 2091).\n+    (active, track_caller, \"1.40.0\", Some(47809), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -540,4 +543,5 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::or_patterns,\n     sym::let_chains,\n     sym::raw_dylib,\n+    sym::track_caller,\n ];"}, {"sha": "ae23cc5cb933c24f631dd48415bc6a1580ff52d6", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -324,6 +324,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     gated!(ffi_returns_twice, Whitelisted, template!(Word), experimental!(ffi_returns_twice)),\n+    gated!(track_caller, Whitelisted, template!(Word), experimental!(track_caller)),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:"}, {"sha": "2b005c3fc421a192c8031c84933aa9a13282a306", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -674,6 +674,7 @@ symbols! {\n         tool_attributes,\n         tool_lints,\n         trace_macros,\n+        track_caller,\n         trait_alias,\n         transmute,\n         transparent,"}, {"sha": "f004b4180ddc9c30fd424f4bfe8b21f66cb76434", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+// run-rustfix\n+\n+fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+    let x = 0u32;\n+    Box::new(async move { x } )\n+    //~^ ERROR E0373\n+}\n+\n+fn main() {\n+    let _foo = foo();\n+}"}, {"sha": "4f35fd52ca39beed26bfb01c5becd7ef41c7e593", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+// run-rustfix\n+\n+fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+    let x = 0u32;\n+    Box::new(async { x } )\n+    //~^ ERROR E0373\n+}\n+\n+fn main() {\n+    let _foo = foo();\n+}"}, {"sha": "af17ecc86fbf9b1d52d8b942e91a07189019daaa", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,22 @@\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/async-borrowck-escaping-block-error.rs:6:20\n+   |\n+LL |     Box::new(async { x } )\n+   |                    ^^-^^\n+   |                    | |\n+   |                    | `x` is borrowed here\n+   |                    may outlive borrowed value `x`\n+   |\n+note: generator is returned here\n+  --> $DIR/async-borrowck-escaping-block-error.rs:4:13\n+   |\n+LL | fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     Box::new(async move { x } )\n+   |                    ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "5865cf0a4f754facf2d04bdfd7ecfb49502b41fb", "filename": "src/test/ui/feature-gates/feature-gate-track_caller.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,5 @@\n+#[track_caller]\n+fn f() {}\n+//~^^ ERROR the `#[track_caller]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "b890019ee4f3ced65361613930089ab8980d3ccd", "filename": "src/test/ui/feature-gates/feature-gate-track_caller.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[track_caller]` attribute is an experimental feature\n+  --> $DIR/feature-gate-track_caller.rs:1:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/47809\n+   = help: add `#![feature(track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d400db8575e0a288dbe48666a81fdb12cc8955bf", "filename": "src/test/ui/rfc-2091-track-caller/error-odd-syntax.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,7 @@\n+#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+#[track_caller(1)]\n+fn f() {}\n+//~^^ ERROR malformed `track_caller` attribute input\n+\n+fn main() {}"}, {"sha": "a53a8ee2bedc6c86dd357daa03a28f425dbc9e3e", "filename": "src/test/ui/rfc-2091-track-caller/error-odd-syntax.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,16 @@\n+error: malformed `track_caller` attribute input\n+  --> $DIR/error-odd-syntax.rs:3:1\n+   |\n+LL | #[track_caller(1)]\n+   | ^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[track_caller]`\n+\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/error-odd-syntax.rs:1:12\n+   |\n+LL | #![feature(track_caller)]\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "2994f3c06212f4f80bfe036ea592e2f688fe002e", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,7 @@\n+#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+#[track_caller]\n+extern \"C\" fn f() {}\n+//~^^ ERROR rust ABI is required to use `#[track_caller]`\n+\n+fn main() {}"}, {"sha": "a34acf3fc614288ae041783581f2cab500e3324f", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/error-with-invalid-abi.rs:1:12\n+   |\n+LL | #![feature(track_caller)]\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0737]: rust ABI is required to use `#[track_caller]`\n+  --> $DIR/error-with-invalid-abi.rs:3:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0737`."}, {"sha": "bbbcec30e8d51bdf3e47097c1523e522c5e94bba", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,8 @@\n+#![feature(naked_functions, track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+#[track_caller]\n+#[naked]\n+fn f() {}\n+//~^^^ ERROR cannot use `#[track_caller]` with `#[naked]`\n+\n+fn main() {}"}, {"sha": "93e6f7a4cd32c19ed5cafed9d50fc0a80ed99e3c", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/error-with-naked.rs:1:29\n+   |\n+LL | #![feature(naked_functions, track_caller)]\n+   |                             ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n+  --> $DIR/error-with-naked.rs:3:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0736`."}, {"sha": "1cd45c8cdbc911188dd77709eae0ca2596e4d730", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,13 @@\n+#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+trait Trait {\n+    #[track_caller]\n+    fn unwrap(&self);\n+    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n+}\n+\n+impl Trait for u64 {\n+    fn unwrap(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "fb3732b59708301ee85a939dcea17d978155f092", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/error-with-trait-decl.rs:1:12\n+   |\n+LL | #![feature(track_caller)]\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+  --> $DIR/error-with-trait-decl.rs:4:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0738`."}, {"sha": "0f2020d6fb26b65659351d04d266ab66efa925c6", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,9 @@\n+#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+trait Trait {\n+    #[track_caller]\n+    fn unwrap(&self) {}\n+    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n+}\n+\n+fn main() {}"}, {"sha": "c212a716c20240ef427a0ee0df1b24701cec2620", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/error-with-trait-default-impl.rs:1:12\n+   |\n+LL | #![feature(track_caller)]\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+  --> $DIR/error-with-trait-default-impl.rs:4:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0738`."}, {"sha": "1378ebaa03ffae320700bd5c6a21c95ed7b31958", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,13 @@\n+#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+trait Trait {\n+    fn unwrap(&self);\n+}\n+\n+impl Trait for u64 {\n+    #[track_caller]\n+    fn unwrap(&self) {}\n+    //~^^ ERROR: `#[track_caller]` is not supported in traits yet.\n+}\n+\n+fn main() {}"}, {"sha": "2662fbff7a2c2dff6cddfc5bb61db0a8dd559523", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/error-with-trait-fn-impl.rs:1:12\n+   |\n+LL | #![feature(track_caller)]\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0738]: `#[track_caller]` is not supported in traits yet.\n+  --> $DIR/error-with-trait-fn-impl.rs:8:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0738`."}, {"sha": "01ebf13b521b26e2b435a026f9e82c7f3cce9302", "filename": "src/test/ui/rfc-2091-track-caller/only-for-fns.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,7 @@\n+#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+#[track_caller]\n+struct S;\n+//~^^ ERROR attribute should be applied to function\n+\n+fn main() {}"}, {"sha": "3301da7ff47bf4df94d75447c57e08e0aae00cf0", "filename": "src/test/ui/rfc-2091-track-caller/only-for-fns.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/only-for-fns.rs:1:12\n+   |\n+LL | #![feature(track_caller)]\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0739]: attribute should be applied to function\n+  --> $DIR/only-for-fns.rs:3:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+LL | struct S;\n+   | --------- not a function\n+\n+error: aborting due to previous error\n+"}, {"sha": "f2c3f0dc59e019abe0838a41bd4766f36f8e7228", "filename": "src/test/ui/rfc-2091-track-caller/pass.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.rs?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+\n+#[track_caller]\n+fn f() {}\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "b1fd23a6a9ddb2f821fc1d2ff7572f1dd9648ec0", "filename": "src/test/ui/rfc-2091-track-caller/pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/275cf4bcacad3fbe5539ecd5840462793ae46eec/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.stderr?ref=275cf4bcacad3fbe5539ecd5840462793ae46eec", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n+  --> $DIR/pass.rs:2:12\n+   |\n+LL | #![feature(track_caller)]\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}