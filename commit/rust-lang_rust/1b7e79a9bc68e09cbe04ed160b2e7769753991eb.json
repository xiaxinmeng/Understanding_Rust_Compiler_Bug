{"sha": "1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiN2U3OWE5YmM2OGUwOWNiZTA0ZWQxNjBiMmU3NzY5NzUzOTkxZWI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-01T16:27:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-29T18:42:56Z"}, "message": "Move check_mod_attr query in librustc_passes.", "tree": {"sha": "1d68c84cc0e0d2602db817a6d04e5c58c20d7947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d68c84cc0e0d2602db817a6d04e5c58c20d7947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "html_url": "https://github.com/rust-lang/rust/commit/1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0a89914692b0c7c237d4d6a688c399ee3705742", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a89914692b0c7c237d4d6a688c399ee3705742", "html_url": "https://github.com/rust-lang/rust/commit/f0a89914692b0c7c237d4d6a688c399ee3705742"}], "stats": {"total": 254, "additions": 135, "deletions": 119}, "files": [{"sha": "db5e31981c08f13232491f38378ef4ebec310b3c", "filename": "src/librustc/hir/check_attr.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "patch": "@@ -0,0 +1,125 @@\n+//! This module implements some validity checks for attributes.\n+//! In particular it verifies that `#[inline]` and `#[repr]` attributes are\n+//! attached to items that actually support them and if there are\n+//! conflicts between multiple such attributes attached to the same\n+//! item.\n+\n+use rustc_hir as hir;\n+use rustc_hir::{Item, ItemKind, TraitItem, TraitItemKind};\n+\n+use std::fmt::{self, Display};\n+\n+#[derive(Copy, Clone, PartialEq)]\n+pub enum MethodKind {\n+    Trait { body: bool },\n+    Inherent,\n+}\n+\n+#[derive(Copy, Clone, PartialEq)]\n+pub enum Target {\n+    ExternCrate,\n+    Use,\n+    Static,\n+    Const,\n+    Fn,\n+    Closure,\n+    Mod,\n+    ForeignMod,\n+    GlobalAsm,\n+    TyAlias,\n+    OpaqueTy,\n+    Enum,\n+    Struct,\n+    Union,\n+    Trait,\n+    TraitAlias,\n+    Impl,\n+    Expression,\n+    Statement,\n+    AssocConst,\n+    Method(MethodKind),\n+    AssocTy,\n+    ForeignFn,\n+    ForeignStatic,\n+    ForeignTy,\n+}\n+\n+impl Display for Target {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"{}\",\n+            match *self {\n+                Target::ExternCrate => \"extern crate\",\n+                Target::Use => \"use\",\n+                Target::Static => \"static item\",\n+                Target::Const => \"constant item\",\n+                Target::Fn => \"function\",\n+                Target::Closure => \"closure\",\n+                Target::Mod => \"module\",\n+                Target::ForeignMod => \"foreign module\",\n+                Target::GlobalAsm => \"global asm\",\n+                Target::TyAlias => \"type alias\",\n+                Target::OpaqueTy => \"opaque type\",\n+                Target::Enum => \"enum\",\n+                Target::Struct => \"struct\",\n+                Target::Union => \"union\",\n+                Target::Trait => \"trait\",\n+                Target::TraitAlias => \"trait alias\",\n+                Target::Impl => \"item\",\n+                Target::Expression => \"expression\",\n+                Target::Statement => \"statement\",\n+                Target::AssocConst => \"associated const\",\n+                Target::Method(_) => \"method\",\n+                Target::AssocTy => \"associated type\",\n+                Target::ForeignFn => \"foreign function\",\n+                Target::ForeignStatic => \"foreign static item\",\n+                Target::ForeignTy => \"foreign type\",\n+            }\n+        )\n+    }\n+}\n+\n+impl Target {\n+    pub fn from_item(item: &Item<'_>) -> Target {\n+        match item.kind {\n+            ItemKind::ExternCrate(..) => Target::ExternCrate,\n+            ItemKind::Use(..) => Target::Use,\n+            ItemKind::Static(..) => Target::Static,\n+            ItemKind::Const(..) => Target::Const,\n+            ItemKind::Fn(..) => Target::Fn,\n+            ItemKind::Mod(..) => Target::Mod,\n+            ItemKind::ForeignMod(..) => Target::ForeignMod,\n+            ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n+            ItemKind::TyAlias(..) => Target::TyAlias,\n+            ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n+            ItemKind::Enum(..) => Target::Enum,\n+            ItemKind::Struct(..) => Target::Struct,\n+            ItemKind::Union(..) => Target::Union,\n+            ItemKind::Trait(..) => Target::Trait,\n+            ItemKind::TraitAlias(..) => Target::TraitAlias,\n+            ItemKind::Impl { .. } => Target::Impl,\n+        }\n+    }\n+\n+    pub fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n+        match trait_item.kind {\n+            TraitItemKind::Const(..) => Target::AssocConst,\n+            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+                Target::Method(MethodKind::Trait { body: false })\n+            }\n+            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+                Target::Method(MethodKind::Trait { body: true })\n+            }\n+            TraitItemKind::Type(..) => Target::AssocTy,\n+        }\n+    }\n+\n+    pub fn from_foreign_item(foreign_item: &hir::ForeignItem<'_>) -> Target {\n+        match foreign_item.kind {\n+            hir::ForeignItemKind::Fn(..) => Target::ForeignFn,\n+            hir::ForeignItemKind::Static(..) => Target::ForeignStatic,\n+            hir::ForeignItemKind::Type => Target::ForeignTy,\n+        }\n+    }\n+}"}, {"sha": "9f4d04a49781490b3b403c77b786f857daeb4cfc", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "patch": "@@ -10,7 +10,6 @@ pub mod upvars;\n use crate::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers<'_>) {\n-    check_attr::provide(providers);\n     map::provide(providers);\n     upvars::provide(providers);\n }"}, {"sha": "b5425e8b351693c67103619008dfdcf7b1bb60f0", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 8, "deletions": 118, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "patch": "@@ -4,138 +4,28 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::hir::map::Map;\n-use crate::ty::query::Providers;\n-use crate::ty::TyCtxt;\n+use rustc::hir::check_attr::{MethodKind, Target};\n+use rustc::hir::map::Map;\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::DUMMY_HIR_ID;\n-use rustc_hir::{self, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n+use rustc_hir::{self, HirId, Item, ItemKind, TraitItem};\n use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast::Attribute;\n use syntax::attr;\n \n-use std::fmt::{self, Display};\n-\n-#[derive(Copy, Clone, PartialEq)]\n-pub(crate) enum MethodKind {\n-    Trait { body: bool },\n-    Inherent,\n-}\n-\n-#[derive(Copy, Clone, PartialEq)]\n-pub(crate) enum Target {\n-    ExternCrate,\n-    Use,\n-    Static,\n-    Const,\n-    Fn,\n-    Closure,\n-    Mod,\n-    ForeignMod,\n-    GlobalAsm,\n-    TyAlias,\n-    OpaqueTy,\n-    Enum,\n-    Struct,\n-    Union,\n-    Trait,\n-    TraitAlias,\n-    Impl,\n-    Expression,\n-    Statement,\n-    AssocConst,\n-    Method(MethodKind),\n-    AssocTy,\n-    ForeignFn,\n-    ForeignStatic,\n-    ForeignTy,\n+pub(crate) trait TargetExt {\n+    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target;\n }\n \n-impl Display for Target {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"{}\",\n-            match *self {\n-                Target::ExternCrate => \"extern crate\",\n-                Target::Use => \"use\",\n-                Target::Static => \"static item\",\n-                Target::Const => \"constant item\",\n-                Target::Fn => \"function\",\n-                Target::Closure => \"closure\",\n-                Target::Mod => \"module\",\n-                Target::ForeignMod => \"foreign module\",\n-                Target::GlobalAsm => \"global asm\",\n-                Target::TyAlias => \"type alias\",\n-                Target::OpaqueTy => \"opaque type\",\n-                Target::Enum => \"enum\",\n-                Target::Struct => \"struct\",\n-                Target::Union => \"union\",\n-                Target::Trait => \"trait\",\n-                Target::TraitAlias => \"trait alias\",\n-                Target::Impl => \"item\",\n-                Target::Expression => \"expression\",\n-                Target::Statement => \"statement\",\n-                Target::AssocConst => \"associated const\",\n-                Target::Method(_) => \"method\",\n-                Target::AssocTy => \"associated type\",\n-                Target::ForeignFn => \"foreign function\",\n-                Target::ForeignStatic => \"foreign static item\",\n-                Target::ForeignTy => \"foreign type\",\n-            }\n-        )\n-    }\n-}\n-\n-impl Target {\n-    pub(crate) fn from_item(item: &Item<'_>) -> Target {\n-        match item.kind {\n-            ItemKind::ExternCrate(..) => Target::ExternCrate,\n-            ItemKind::Use(..) => Target::Use,\n-            ItemKind::Static(..) => Target::Static,\n-            ItemKind::Const(..) => Target::Const,\n-            ItemKind::Fn(..) => Target::Fn,\n-            ItemKind::Mod(..) => Target::Mod,\n-            ItemKind::ForeignMod(..) => Target::ForeignMod,\n-            ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n-            ItemKind::TyAlias(..) => Target::TyAlias,\n-            ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n-            ItemKind::Enum(..) => Target::Enum,\n-            ItemKind::Struct(..) => Target::Struct,\n-            ItemKind::Union(..) => Target::Union,\n-            ItemKind::Trait(..) => Target::Trait,\n-            ItemKind::TraitAlias(..) => Target::TraitAlias,\n-            ItemKind::Impl { .. } => Target::Impl,\n-        }\n-    }\n-\n-    fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n-        match trait_item.kind {\n-            TraitItemKind::Const(..) => Target::AssocConst,\n-            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n-                Target::Method(MethodKind::Trait { body: false })\n-            }\n-            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n-                Target::Method(MethodKind::Trait { body: true })\n-            }\n-            TraitItemKind::Type(..) => Target::AssocTy,\n-        }\n-    }\n-\n-    fn from_foreign_item(foreign_item: &hir::ForeignItem<'_>) -> Target {\n-        match foreign_item.kind {\n-            hir::ForeignItemKind::Fn(..) => Target::ForeignFn,\n-            hir::ForeignItemKind::Static(..) => Target::ForeignStatic,\n-            hir::ForeignItemKind::Type => Target::ForeignTy,\n-        }\n-    }\n-\n+impl TargetExt for Target {\n     fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n         match impl_item.kind {\n             hir::ImplItemKind::Const(..) => Target::AssocConst,"}, {"sha": "5494a652bc8427deb153cddfff98e1726bc7fd61", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7e79a9bc68e09cbe04ed160b2e7769753991eb/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=1b7e79a9bc68e09cbe04ed160b2e7769753991eb", "patch": "@@ -17,6 +17,7 @@ extern crate log;\n \n use rustc::ty::query::Providers;\n \n+mod check_attr;\n mod check_const;\n pub mod dead;\n mod diagnostic_items;\n@@ -32,6 +33,7 @@ mod region;\n pub mod stability;\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    check_attr::provide(providers);\n     check_const::provide(providers);\n     diagnostic_items::provide(providers);\n     entry::provide(providers);"}]}