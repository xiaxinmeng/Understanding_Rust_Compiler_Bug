{"sha": "6e8a8282b8c131adb7f39909b9148687ea6c3b7b", "node_id": "C_kwDOAAsO6NoAKDZlOGE4MjgyYjhjMTMxYWRiN2YzOTkwOWI5MTQ4Njg3ZWE2YzNiN2I", "commit": {"author": {"name": "Kai Luo", "email": "lkail@cn.ibm.com", "date": "2023-03-23T08:50:49Z"}, "committer": {"name": "Kai Luo", "email": "lkail@cn.ibm.com", "date": "2023-03-23T08:50:49Z"}, "message": "Implement current_dll_path for AIX", "tree": {"sha": "f3f8e8cc7059a84ca73e4533852536f4fa121b07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f8e8cc7059a84ca73e4533852536f4fa121b07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8a8282b8c131adb7f39909b9148687ea6c3b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a8282b8c131adb7f39909b9148687ea6c3b7b", "html_url": "https://github.com/rust-lang/rust/commit/6e8a8282b8c131adb7f39909b9148687ea6c3b7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a8282b8c131adb7f39909b9148687ea6c3b7b/comments", "author": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c771fec3329ef1d8c66697daf9517501d0c129a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c771fec3329ef1d8c66697daf9517501d0c129a", "html_url": "https://github.com/rust-lang/rust/commit/1c771fec3329ef1d8c66697daf9517501d0c129a"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "2c804f0f0a4871d837b63f0a3793763ea82597b7", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6e8a8282b8c131adb7f39909b9148687ea6c3b7b/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8a8282b8c131adb7f39909b9148687ea6c3b7b/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=6e8a8282b8c131adb7f39909b9148687ea6c3b7b", "patch": "@@ -67,6 +67,7 @@ fn current_dll_path() -> Result<PathBuf, String> {\n     use std::ffi::{CStr, OsStr};\n     use std::os::unix::prelude::*;\n \n+    #[cfg(not(target_os = \"aix\"))]\n     unsafe {\n         let addr = current_dll_path as usize as *mut _;\n         let mut info = std::mem::zeroed();\n@@ -80,6 +81,39 @@ fn current_dll_path() -> Result<PathBuf, String> {\n         let os = OsStr::from_bytes(bytes);\n         Ok(PathBuf::from(os))\n     }\n+\n+    #[cfg(target_os = \"aix\")]\n+    unsafe {\n+        let addr = current_dll_path as u64;\n+        let mut buffer = vec![0i8; 4096];\n+        loop {\n+            if libc::loadquery(libc::L_GETINFO, buffer.as_mut_ptr(), buffer.len() as u32) >= 0 {\n+                break;\n+            } else {\n+                if std::io::Error::last_os_error().raw_os_error().unwrap() != libc::ENOMEM {\n+                    return Err(\"loadquery failed\".into());\n+                }\n+                buffer.resize(buffer.len() * 2, 0i8);\n+            }\n+        }\n+        let mut current = buffer.as_mut_ptr() as *mut libc::ld_info;\n+        loop {\n+            let data_base = (*current).ldinfo_dataorg as u64;\n+            let data_end = data_base + (*current).ldinfo_datasize;\n+            let text_base = (*current).ldinfo_textorg as u64;\n+            let text_end = text_base + (*current).ldinfo_textsize;\n+            if (data_base <= addr && addr < data_end) || (text_base <= addr && addr < text_end) {\n+                let bytes = CStr::from_ptr(&(*current).ldinfo_filename[0]).to_bytes();\n+                let os = OsStr::from_bytes(bytes);\n+                return Ok(PathBuf::from(os));\n+            }\n+            if (*current).ldinfo_next == 0 {\n+                break;\n+            }\n+            current = ((current as u64) + ((*current).ldinfo_next) as u64) as *mut libc::ld_info;\n+        }\n+        return Err(format!(\"current dll's address {} is not in the load map\", addr));\n+    }\n }\n \n #[cfg(windows)]"}]}