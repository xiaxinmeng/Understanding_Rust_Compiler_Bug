{"sha": "6493ab6f2aa709c019baf640e31699535679553d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OTNhYjZmMmFhNzA5YzAxOWJhZjY0MGUzMTY5OTUzNTY3OTU1M2Q=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-31T23:46:05Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-02-14T18:16:53Z"}, "message": "Fixed incorrect reporting of errors when checking borrows in drops.", "tree": {"sha": "3eaaa2c7d9233d66e694c8b3a68ebf84a58af2c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eaaa2c7d9233d66e694c8b3a68ebf84a58af2c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6493ab6f2aa709c019baf640e31699535679553d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlqEfRYACgkQAXYLT59T\n8VSOkA/+KIYFjEgDrjHFe3U1zFWRfv9slvjM9oWAVzqMYm8jMNop701oDJmFzU0B\noX+K/MxHb6mErePIXRXPGj7JbBlWpxqJK5PqWv9n9xSzcy0xJJXWXygyRzNaObQC\nCNRHgj+enEbE6wA6o6Xqh+n2ORYZNdrE4zxuluC5eDEHAbGguC5HxCgcF0RqbPDG\nEoj45MJ/8JQippm5ogKwpG0+NZJj19laeyV1M0lhn0Zgv8ukiWq0kGm7e2QKVU5l\nkXZyFh+e3Jt87+y7fNeAEAaDDEkDaQULwgmaonywFMDcPn3mPyEYGt04Vo3MDH+q\nbA0rq7DGZvTgN8MyW3cjHdxkREbmQeh+uXd0oxQzf6xuN549CyHmU6s52FIRY/2A\nWfpE02f0n44VdRb85XypIBADHW8PkebygTPcktHNLXE6c281EgHyWK8ayr1x+jtC\nGHj0miwTuCvJavY1RfZYN99MFAyMtJ88paAk/6W7PyEe2i98BQ1pe9mSLf+Wx1nc\n0h138O7GfmdsWKnXGdIGtJAP09uaKqZJ7D+o09iFZM8SqgAF+0Nr7LqnoxEWtyJB\nL14jTbDlAvEZc8n5oyrKr/78HaSlFSd7eqXUWcHI7/0FthahsDkDGo0H7oxx6ZsX\nIJmECZ9fi33RT4n7Y+5ZcB1TUpl2XqxDC8WgZBVnNiPZ7E2Y6EA=\n=4InG\n-----END PGP SIGNATURE-----", "payload": "tree 3eaaa2c7d9233d66e694c8b3a68ebf84a58af2c4\nparent 673d97e3ca764e4fd9a3c6389f5f0f2e19e0584d\nauthor David Wood <david@davidtw.co> 1517442365 +0000\ncommitter David Wood <david@davidtw.co> 1518632213 +0000\n\nFixed incorrect reporting of errors when checking borrows in drops.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6493ab6f2aa709c019baf640e31699535679553d", "html_url": "https://github.com/rust-lang/rust/commit/6493ab6f2aa709c019baf640e31699535679553d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6493ab6f2aa709c019baf640e31699535679553d/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "673d97e3ca764e4fd9a3c6389f5f0f2e19e0584d", "url": "https://api.github.com/repos/rust-lang/rust/commits/673d97e3ca764e4fd9a3c6389f5f0f2e19e0584d", "html_url": "https://github.com/rust-lang/rust/commit/673d97e3ca764e4fd9a3c6389f5f0f2e19e0584d"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "e321661e40ef0b5736887563c6a27ac31a2e6640", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6493ab6f2aa709c019baf640e31699535679553d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6493ab6f2aa709c019baf640e31699535679553d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6493ab6f2aa709c019baf640e31699535679553d", "patch": "@@ -2073,7 +2073,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// currently in, when such distinction matters.\n     fn each_borrow_involving_path<F>(\n         &mut self,\n-        _context: Context,\n+        context: Context,\n         access_place: (ShallowOrDeep, &Place<'tcx>),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n         mut op: F,\n@@ -2085,20 +2085,50 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // FIXME: analogous code in check_loans first maps `place` to\n         // its base_path.\n \n+        // When this function is called as a result of an `access_terminator` call attempting\n+        // to drop a struct, if that struct does not have a destructor, then we need to check\n+        // each of the fields in the struct. See #47703.\n+        let (access, places) = if let ContextKind::Drop = context.kind {\n+            let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n+\n+            match ty.sty {\n+                ty::TyAdt(def, substs) if def.is_struct() && !def.has_dtor(self.tcx) => {\n+                    let mut places = Vec::new();\n+\n+                    for (index, field) in def.all_fields().enumerate() {\n+                        let proj = Projection {\n+                            base: place.clone(),\n+                            elem: ProjectionElem::Field(Field::new(index),\n+                                                        field.ty(self.tcx, substs)),\n+                        };\n+\n+                        places.push(Place::Projection(Box::new(proj)));\n+                    }\n+\n+                    (ShallowOrDeep::Shallow(None), places)\n+                },\n+                _ => (access, vec![ place.clone() ]),\n+            }\n+        } else {\n+            (access, vec![ place.clone() ])\n+        };\n+\n         let data = flow_state.borrows.operator().borrows();\n \n         // check for loan restricting path P being used. Accounts for\n         // borrows of P, P.a.b, etc.\n-        let mut elems_incoming = flow_state.borrows.elems_incoming();\n-        while let Some(i) = elems_incoming.next() {\n-            let borrowed = &data[i.borrow_index()];\n-\n-            if self.places_conflict(&borrowed.borrowed_place, place, access) {\n-                debug!(\"each_borrow_involving_path: {:?} @ {:?} vs. {:?}/{:?}\",\n-                       i, borrowed, place, access);\n-                let ctrl = op(self, i, borrowed);\n-                if ctrl == Control::Break {\n-                    return;\n+        for place in places {\n+            let mut elems_incoming = flow_state.borrows.elems_incoming();\n+            while let Some(i) = elems_incoming.next() {\n+                let borrowed = &data[i.borrow_index()];\n+\n+                if self.places_conflict(&borrowed.borrowed_place, &place, access) {\n+                    debug!(\"each_borrow_involving_path: {:?} @ {:?} vs. {:?}/{:?}\",\n+                           i, borrowed, place, access);\n+                    let ctrl = op(self, i, borrowed);\n+                    if ctrl == Control::Break {\n+                        return;\n+                    }\n                 }\n             }\n         }"}]}