{"sha": "7368f5601e873dcd79c84d99362f7254ad09b18e", "node_id": "C_kwDOAAsO6NoAKDczNjhmNTYwMWU4NzNkY2Q3OWM4NGQ5OTM2MmY3MjU0YWQwOWIxOGU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-08T15:01:38Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-08T15:01:38Z"}, "message": "Sync from rust f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "tree": {"sha": "53ba9fee8eec5871aa0d2c362eb60609a2641ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53ba9fee8eec5871aa0d2c362eb60609a2641ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7368f5601e873dcd79c84d99362f7254ad09b18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7368f5601e873dcd79c84d99362f7254ad09b18e", "html_url": "https://github.com/rust-lang/rust/commit/7368f5601e873dcd79c84d99362f7254ad09b18e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7368f5601e873dcd79c84d99362f7254ad09b18e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c97227a433c244f34fb8bb23afe41f259431d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c97227a433c244f34fb8bb23afe41f259431d9b", "html_url": "https://github.com/rust-lang/rust/commit/3c97227a433c244f34fb8bb23afe41f259431d9b"}, {"sha": "451817e48f7852017dd1ddc27bfa7709d74f646c", "url": "https://api.github.com/repos/rust-lang/rust/commits/451817e48f7852017dd1ddc27bfa7709d74f646c", "html_url": "https://github.com/rust-lang/rust/commit/451817e48f7852017dd1ddc27bfa7709d74f646c"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "b4c790961707900f839ad4977a89d5e725cf9f69", "filename": "src/archive.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7368f5601e873dcd79c84d99362f7254ad09b18e/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7368f5601e873dcd79c84d99362f7254ad09b18e/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=7368f5601e873dcd79c84d99362f7254ad09b18e", "patch": "@@ -5,7 +5,7 @@ use std::fs::File;\n use std::io::{self, Read, Seek};\n use std::path::{Path, PathBuf};\n \n-use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n+use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n use rustc_session::Session;\n \n use object::read::archive::ArchiveFile;\n@@ -17,9 +17,34 @@ enum ArchiveEntry {\n     File(PathBuf),\n }\n \n+pub(crate) struct ArArchiveBuilderBuilder;\n+\n+impl ArchiveBuilderBuilder for ArArchiveBuilderBuilder {\n+    fn new_archive_builder<'a>(&self, sess: &'a Session) -> Box<dyn ArchiveBuilder<'a> + 'a> {\n+        Box::new(ArArchiveBuilder {\n+            sess,\n+            use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n+            // FIXME fix builtin ranlib on macOS\n+            no_builtin_ranlib: sess.target.is_like_osx,\n+\n+            src_archives: vec![],\n+            entries: vec![],\n+        })\n+    }\n+\n+    fn create_dll_import_lib(\n+        &self,\n+        _sess: &Session,\n+        _lib_name: &str,\n+        _dll_imports: &[rustc_session::cstore::DllImport],\n+        _tmpdir: &Path,\n+    ) -> PathBuf {\n+        bug!(\"creating dll imports is not supported\");\n+    }\n+}\n+\n pub(crate) struct ArArchiveBuilder<'a> {\n     sess: &'a Session,\n-    dst: PathBuf,\n     use_gnu_style_archive: bool,\n     no_builtin_ranlib: bool,\n \n@@ -30,30 +55,18 @@ pub(crate) struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path) -> Self {\n-        ArArchiveBuilder {\n-            sess,\n-            dst: output.to_path_buf(),\n-            use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n-            // FIXME fix builtin ranlib on macOS\n-            no_builtin_ranlib: sess.target.is_like_osx,\n-\n-            src_archives: vec![],\n-            entries: vec![],\n-        }\n-    }\n-\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string().into_bytes(),\n             ArchiveEntry::File(file.to_owned()),\n         ));\n     }\n \n-    fn add_archive<F>(&mut self, archive_path: &Path, mut skip: F) -> std::io::Result<()>\n-    where\n-        F: FnMut(&str) -> bool + 'static,\n-    {\n+    fn add_archive(\n+        &mut self,\n+        archive_path: &Path,\n+        mut skip: Box<dyn FnMut(&str) -> bool + 'static>,\n+    ) -> std::io::Result<()> {\n         let read_cache = ReadCache::new(std::fs::File::open(&archive_path)?);\n         let archive = ArchiveFile::parse(&read_cache).unwrap();\n         let archive_index = self.src_archives.len();\n@@ -74,7 +87,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) -> bool {\n+    fn build(mut self: Box<Self>, output: &Path) -> bool {\n         enum BuilderKind {\n             Bsd(ar::Builder<File>),\n             Gnu(ar::GnuBuilder<File>),\n@@ -163,7 +176,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         let mut builder = if self.use_gnu_style_archive {\n             BuilderKind::Gnu(\n                 ar::GnuBuilder::new(\n-                    File::create(&self.dst).unwrap_or_else(|err| {\n+                    File::create(output).unwrap_or_else(|err| {\n                         sess.fatal(&format!(\n                             \"error opening destination during archive building: {}\",\n                             err\n@@ -178,7 +191,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         } else {\n             BuilderKind::Bsd(\n                 ar::Builder::new(\n-                    File::create(&self.dst).unwrap_or_else(|err| {\n+                    File::create(output).unwrap_or_else(|err| {\n                         sess.fatal(&format!(\n                             \"error opening destination during archive building: {}\",\n                             err\n@@ -209,7 +222,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n \n             // Run ranlib to be able to link the archive\n             let status = std::process::Command::new(ranlib)\n-                .arg(self.dst)\n+                .arg(output)\n                 .status()\n                 .expect(\"Couldn't run ranlib\");\n \n@@ -220,17 +233,4 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n \n         any_members\n     }\n-\n-    fn sess(&self) -> &Session {\n-        self.sess\n-    }\n-\n-    fn create_dll_import_lib(\n-        _sess: &Session,\n-        _lib_name: &str,\n-        _dll_imports: &[rustc_session::cstore::DllImport],\n-        _tmpdir: &Path,\n-    ) -> PathBuf {\n-        bug!(\"creating dll imports is not supported\");\n-    }\n }"}, {"sha": "bb0793b1deb2e8e75262648ebc89ab6b1d1e76e5", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7368f5601e873dcd79c84d99362f7254ad09b18e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7368f5601e873dcd79c84d99362f7254ad09b18e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7368f5601e873dcd79c84d99362f7254ad09b18e", "patch": "@@ -226,7 +226,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     ) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n-        link_binary::<crate::archive::ArArchiveBuilder<'_>>(sess, &codegen_results, outputs)\n+        link_binary(sess, &crate::archive::ArArchiveBuilderBuilder, &codegen_results, outputs)\n     }\n }\n "}]}