{"sha": "873c83ba56650a32383bb8fb4820a0ce792bc121", "node_id": "C_kwDOAAsO6NoAKDg3M2M4M2JhNTY2NTBhMzIzODNiYjhmYjQ4MjBhMGNlNzkyYmMxMjE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-13T17:37:46Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-13T17:45:37Z"}, "message": "Extract try_move_finished_goal_to_global_cache from try_finalize_goal", "tree": {"sha": "e17b63faee9019f696e95347eb3d6b8e4e0ade49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17b63faee9019f696e95347eb3d6b8e4e0ade49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/873c83ba56650a32383bb8fb4820a0ce792bc121", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPqd0IACgkQgTGiTgx5\n76/9uA/7B/mUvAN/VaXta3t4VaXXYcqmfMJwxmm4Zhpo0n+b2knbhXxw92eOYjHH\n37X/9diyh3/XsDP4l1hCeq1iPRPqiF104+ozmWbbkh/65/MIFk4HimHCU4ltn/Pc\nj75V6fEi5/8nnxYMzjJSSoFwtoFJ17Zxij6mq0PiY0wZg2KwZg5icVMZDRgTXmUS\nWJOPG7nCHpmC1UYpYH2/IT7h8EGl3bJXcA5+t3lETh321a3XskXaQUSJRjIckRVB\nzE/PhguCUGA8fuK+E03q56N5Ja7hflb6PALYv+uOEOVU7nL83Cl50H4ZGc66zVpC\nRJiILlGluHL/WIpvk8CD1cZDWG39bFH+pcH+8TDvZ26Js/uFG4Ic5m/wUZehjlbM\n7oQY5D1owboehSxQioEwjhOpKNarMEHPUbzggYYIBIcsIajvAvZoo8p9iS7O5jZS\ntGnGhGvEQWCQ/GvQIxo029WOFDACDTnzifNLkQTWOFb2iU9H6tGJiNoOnk/jj7Rp\ntAkJ6Nu/6A8NVd9yuD6xXLE9yRxQ5uI5SYaZ9nK+0AnyvsXsMfRpf1OUjsqAJ4jt\n5SbuPhGlTwC9YwL8hjsFoIAF2yx9nHo7kOrG2wu07YStmo1Pwuuft32/mS+6TCZT\nA4L1pkf+6K49KfZf0had/eXZa3nGuAiorChIApgiAa3VIv7PXvA=\n=1Z/x\n-----END PGP SIGNATURE-----", "payload": "tree e17b63faee9019f696e95347eb3d6b8e4e0ade49\nparent 44a23888288d680ccfd24409629e184fe8ab95bb\nauthor Santiago Pastorino <spastorino@gmail.com> 1676309866 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676310337 -0300\n\nExtract try_move_finished_goal_to_global_cache from try_finalize_goal\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/873c83ba56650a32383bb8fb4820a0ce792bc121", "html_url": "https://github.com/rust-lang/rust/commit/873c83ba56650a32383bb8fb4820a0ce792bc121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/873c83ba56650a32383bb8fb4820a0ce792bc121/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a23888288d680ccfd24409629e184fe8ab95bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a23888288d680ccfd24409629e184fe8ab95bb", "html_url": "https://github.com/rust-lang/rust/commit/44a23888288d680ccfd24409629e184fe8ab95bb"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "c25a9cddfe7349d1bd6c2122f444bef04fb7001d", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/873c83ba56650a32383bb8fb4820a0ce792bc121/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873c83ba56650a32383bb8fb4820a0ce792bc121/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=873c83ba56650a32383bb8fb4820a0ce792bc121", "patch": "@@ -133,7 +133,6 @@ impl<'tcx> SearchGraph<'tcx> {\n         let cache = &mut self.provisional_cache;\n         let provisional_entry_index = *cache.lookup_table.get(&goal).unwrap();\n         let provisional_entry = &mut cache.entries[provisional_entry_index];\n-        let depth = provisional_entry.depth;\n         // We eagerly update the response in the cache here. If we have to reevaluate\n         // this goal we use the new response when hitting a cycle, and we definitely\n         // want to access the final response whenever we look at the cache.\n@@ -157,29 +156,41 @@ impl<'tcx> SearchGraph<'tcx> {\n             self.stack.push(StackElem { goal, has_been_used: false });\n             false\n         } else {\n-            // If not, we're done with this goal.\n-            //\n-            // Check whether that this goal doesn't depend on a goal deeper on the stack\n-            // and if so, move it and all nested goals to the global cache.\n-            //\n-            // Note that if any nested goal were to depend on something deeper on the stack,\n-            // this would have also updated the depth of the current goal.\n-            if depth == self.stack.next_index() {\n-                for (i, entry) in cache.entries.drain_enumerated(provisional_entry_index.index()..)\n-                {\n-                    let actual_index = cache.lookup_table.remove(&entry.goal);\n-                    debug_assert_eq!(Some(i), actual_index);\n-                    debug_assert!(entry.depth == depth);\n-                    cache::try_move_finished_goal_to_global_cache(\n-                        tcx,\n-                        &mut self.overflow_data,\n-                        &self.stack,\n-                        entry.goal,\n-                        entry.response,\n-                    );\n-                }\n-            }\n+            self.try_move_finished_goal_to_global_cache(tcx, &goal);\n             true\n         }\n     }\n+\n+    pub(super) fn try_move_finished_goal_to_global_cache(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        goal: &CanonicalGoal<'tcx>,\n+    ) {\n+        let cache = &mut self.provisional_cache;\n+        let provisional_entry_index = *cache.lookup_table.get(goal).unwrap();\n+        let provisional_entry = &mut cache.entries[provisional_entry_index];\n+        let depth = provisional_entry.depth;\n+\n+        // If not, we're done with this goal.\n+        //\n+        // Check whether that this goal doesn't depend on a goal deeper on the stack\n+        // and if so, move it and all nested goals to the global cache.\n+        //\n+        // Note that if any nested goal were to depend on something deeper on the stack,\n+        // this would have also updated the depth of the current goal.\n+        if depth == self.stack.next_index() {\n+            for (i, entry) in cache.entries.drain_enumerated(provisional_entry_index.index()..) {\n+                let actual_index = cache.lookup_table.remove(&entry.goal);\n+                debug_assert_eq!(Some(i), actual_index);\n+                debug_assert!(entry.depth == depth);\n+                cache::try_move_finished_goal_to_global_cache(\n+                    tcx,\n+                    &mut self.overflow_data,\n+                    &self.stack,\n+                    entry.goal,\n+                    entry.response,\n+                );\n+            }\n+        }\n+    }\n }"}]}