{"sha": "432ebd57efe38e691acc25570cb79acbe4956651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmViZDU3ZWZlMzhlNjkxYWNjMjU1NzBjYjc5YWNiZTQ5NTY2NTE=", "commit": {"author": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-10-06T15:59:14Z"}, "committer": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-10-27T15:04:04Z"}, "message": "Removed test for unhandled case in function_item_references lint\n\nRemoved test for the unhandled case of calls to `fn f<T>(x: &T)` where `x` is a\nfunction reference and is formatted as a pointer in `f`. This compiles since\n`&T` implements `Pointer`, but is unlikely to occur in practice. Also tweaked\nthe lint's wording and modified tests accordingly.", "tree": {"sha": "f5177e4c87d6077658ec8d3c5701c795485e9ef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5177e4c87d6077658ec8d3c5701c795485e9ef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432ebd57efe38e691acc25570cb79acbe4956651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432ebd57efe38e691acc25570cb79acbe4956651", "html_url": "https://github.com/rust-lang/rust/commit/432ebd57efe38e691acc25570cb79acbe4956651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432ebd57efe38e691acc25570cb79acbe4956651/comments", "author": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "511fe048b4ee2535961014b1be3294a771cc7e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/511fe048b4ee2535961014b1be3294a771cc7e87", "html_url": "https://github.com/rust-lang/rust/commit/511fe048b4ee2535961014b1be3294a771cc7e87"}], "stats": {"total": 175, "additions": 86, "deletions": 89}, "files": [{"sha": "97688c3ea162f0773ada026df57c80226859d4bf", "filename": "compiler/rustc_mir/src/transform/function_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432ebd57efe38e691acc25570cb79acbe4956651/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432ebd57efe38e691acc25570cb79acbe4956651/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_references.rs?ref=432ebd57efe38e691acc25570cb79acbe4956651", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n         let ret = if fn_sig.output().skip_binder().is_unit() { \"\" } else { \" -> _\" };\n         self.tcx.struct_span_lint_hir(FUNCTION_ITEM_REFERENCES, lint_root, span, |lint| {\n             lint.build(&format!(\n-                \"cast `{}` with `as {}{}fn({}{}){}` to use it as a pointer\",\n+                \"cast `{}` with `as {}{}fn({}{}){}` to obtain a function pointer\",\n                 ident,\n                 unsafety,\n                 abi,"}, {"sha": "9ec3871e48218f2efa4d918ad5256a8df0e1b37b", "filename": "src/test/ui/lint/function-references.rs", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/432ebd57efe38e691acc25570cb79acbe4956651/src%2Ftest%2Fui%2Flint%2Ffunction-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432ebd57efe38e691acc25570cb79acbe4956651/src%2Ftest%2Fui%2Flint%2Ffunction-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-references.rs?ref=432ebd57efe38e691acc25570cb79acbe4956651", "patch": "@@ -10,7 +10,7 @@ fn baz(x: u32, y: u32) -> u32 { x + y }\n unsafe fn unsafe_fn() { }\n extern \"C\" fn c_fn() { }\n unsafe extern \"C\" fn unsafe_c_fn() { }\n-unsafe extern fn variadic_fn(_x: u32, _args: ...) { }\n+unsafe extern fn variadic(_x: u32, _args: ...) { }\n \n //function references passed to these functions should never lint\n fn call_fn(f: &dyn Fn(u32) -> u32, x: u32) { f(x); }\n@@ -20,7 +20,6 @@ fn parameterized_call_fn<F: Fn(u32) -> u32>(f: &F, x: u32) { f(x); }\n fn print_ptr<F: Pointer>(f: F) { println!(\"{:p}\", f); }\n fn bound_by_ptr_trait<F: Pointer>(_f: F) { }\n fn bound_by_ptr_trait_tuple<F: Pointer, G: Pointer>(_t: (F, G)) { }\n-fn implicit_ptr_trait<F>(f: &F) { println!(\"{:p}\", f); }\n \n fn main() {\n     //`let` bindings with function references shouldn't lint\n@@ -56,47 +55,47 @@ fn main() {\n \n     //potential ways to incorrectly try printing function pointers\n     println!(\"{:p}\", &foo);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n     print!(\"{:p}\", &foo);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n     format!(\"{:p}\", &foo);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n \n     println!(\"{:p}\", &foo as *const _);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n     println!(\"{:p}\", zst_ref);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n     println!(\"{:p}\", cast_zst_ptr);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n     println!(\"{:p}\", coerced_zst_ptr);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n \n     println!(\"{:p}\", &fn_item);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n     println!(\"{:p}\", indirect_ref);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n \n     println!(\"{:p}\", &nop);\n-    //~^ WARNING cast `nop` with `as fn()` to use it as a pointer\n+    //~^ WARNING cast `nop` with `as fn()` to obtain a function pointer\n     println!(\"{:p}\", &bar);\n-    //~^ WARNING cast `bar` with `as fn(_) -> _` to use it as a pointer\n+    //~^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n     println!(\"{:p}\", &baz);\n-    //~^ WARNING cast `baz` with `as fn(_, _) -> _` to use it as a pointer\n+    //~^ WARNING cast `baz` with `as fn(_, _) -> _` to obtain a function pointer\n     println!(\"{:p}\", &unsafe_fn);\n-    //~^ WARNING cast `unsafe_fn` with `as unsafe fn()` to use it as a pointer\n+    //~^ WARNING cast `unsafe_fn` with `as unsafe fn()` to obtain a function pointer\n     println!(\"{:p}\", &c_fn);\n-    //~^ WARNING cast `c_fn` with `as extern \"C\" fn()` to use it as a pointer\n+    //~^ WARNING cast `c_fn` with `as extern \"C\" fn()` to obtain a function pointer\n     println!(\"{:p}\", &unsafe_c_fn);\n-    //~^ WARNING cast `unsafe_c_fn` with `as unsafe extern \"C\" fn()` to use it as a pointer\n-    println!(\"{:p}\", &variadic_fn);\n-    //~^ WARNING cast `variadic_fn` with `as unsafe extern \"C\" fn(_, ...)` to use it as a pointer\n+    //~^ WARNING cast `unsafe_c_fn` with `as unsafe extern \"C\" fn()` to obtain a function pointer\n+    println!(\"{:p}\", &variadic);\n+    //~^ WARNING cast `variadic` with `as unsafe extern \"C\" fn(_, ...)` to obtain a function pointer\n     println!(\"{:p}\", &std::env::var::<String>);\n-    //~^ WARNING cast `var` with `as fn(_) -> _` to use it as a pointer\n+    //~^ WARNING cast `var` with `as fn(_) -> _` to obtain a function pointer\n \n     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n-    //~^ WARNING cast `nop` with `as fn()` to use it as a pointer\n-    //~^^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n-    //~^^^ WARNING cast `bar` with `as fn(_) -> _` to use it as a pointer\n+    //~^ WARNING cast `nop` with `as fn()` to obtain a function pointer\n+    //~^^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^^^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n \n     //using a function reference to call a function shouldn't lint\n     (&bar)(1);\n@@ -109,10 +108,10 @@ fn main() {\n     unsafe {\n         //potential ways to incorrectly try transmuting function pointers\n         std::mem::transmute::<_, usize>(&foo);\n-        //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n+        //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n-        //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n-        //~^^ WARNING cast `bar` with `as fn(_) -> _` to use it as a pointer\n+        //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+        //~^^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n \n         //the correct way to transmute function pointers\n         std::mem::transmute::<_, usize>(foo as fn() -> u32);\n@@ -121,14 +120,12 @@ fn main() {\n \n     //function references as arguments required to be bound by std::fmt::Pointer should lint\n     print_ptr(&bar);\n-    //~^ WARNING cast `bar` with `as fn(_) -> _` to use it as a pointer\n+    //~^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n     bound_by_ptr_trait(&bar);\n-    //~^ WARNING cast `bar` with `as fn(_) -> _` to use it as a pointer\n+    //~^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n     bound_by_ptr_trait_tuple((&foo, &bar));\n-    //~^ WARNING cast `foo` with `as fn() -> _` to use it as a pointer\n-    //~^^ WARNING cast `bar` with `as fn(_) -> _` to use it as a pointer\n-    implicit_ptr_trait(&bar);\n-    //~^ WARNING cast `bar` with `as fn(_) -> _` to use it as a pointer\n+    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n \n     //correct ways to pass function pointers as arguments bound by std::fmt::Pointer\n     print_ptr(bar as fn(u32) -> u32);"}, {"sha": "71940a1d4cf8ad07c3d035025f63557c2c15b845", "filename": "src/test/ui/lint/function-references.stderr", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/432ebd57efe38e691acc25570cb79acbe4956651/src%2Ftest%2Fui%2Flint%2Ffunction-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/432ebd57efe38e691acc25570cb79acbe4956651/src%2Ftest%2Fui%2Flint%2Ffunction-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-references.stderr?ref=432ebd57efe38e691acc25570cb79acbe4956651", "patch": "@@ -1,5 +1,5 @@\n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:58:22\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:57:22\n    |\n LL |     println!(\"{:p}\", &foo);\n    |                      ^^^^\n@@ -10,158 +10,158 @@ note: the lint level is defined here\n LL | #![warn(function_item_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:60:20\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:59:20\n    |\n LL |     print!(\"{:p}\", &foo);\n    |                    ^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:62:21\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:61:21\n    |\n LL |     format!(\"{:p}\", &foo);\n    |                     ^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:65:22\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:64:22\n    |\n LL |     println!(\"{:p}\", &foo as *const _);\n    |                      ^^^^^^^^^^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:67:22\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:66:22\n    |\n LL |     println!(\"{:p}\", zst_ref);\n    |                      ^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:69:22\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:68:22\n    |\n LL |     println!(\"{:p}\", cast_zst_ptr);\n    |                      ^^^^^^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:71:22\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:70:22\n    |\n LL |     println!(\"{:p}\", coerced_zst_ptr);\n    |                      ^^^^^^^^^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:74:22\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:73:22\n    |\n LL |     println!(\"{:p}\", &fn_item);\n    |                      ^^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:76:22\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:75:22\n    |\n LL |     println!(\"{:p}\", indirect_ref);\n    |                      ^^^^^^^^^^^^\n \n-warning: cast `nop` with `as fn()` to use it as a pointer\n-  --> $DIR/function-references.rs:79:22\n+warning: cast `nop` with `as fn()` to obtain a function pointer\n+  --> $DIR/function-references.rs:78:22\n    |\n LL |     println!(\"{:p}\", &nop);\n    |                      ^^^^\n \n-warning: cast `bar` with `as fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:81:22\n+warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:80:22\n    |\n LL |     println!(\"{:p}\", &bar);\n    |                      ^^^^\n \n-warning: cast `baz` with `as fn(_, _) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:83:22\n+warning: cast `baz` with `as fn(_, _) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:82:22\n    |\n LL |     println!(\"{:p}\", &baz);\n    |                      ^^^^\n \n-warning: cast `unsafe_fn` with `as unsafe fn()` to use it as a pointer\n-  --> $DIR/function-references.rs:85:22\n+warning: cast `unsafe_fn` with `as unsafe fn()` to obtain a function pointer\n+  --> $DIR/function-references.rs:84:22\n    |\n LL |     println!(\"{:p}\", &unsafe_fn);\n    |                      ^^^^^^^^^^\n \n-warning: cast `c_fn` with `as extern \"C\" fn()` to use it as a pointer\n-  --> $DIR/function-references.rs:87:22\n+warning: cast `c_fn` with `as extern \"C\" fn()` to obtain a function pointer\n+  --> $DIR/function-references.rs:86:22\n    |\n LL |     println!(\"{:p}\", &c_fn);\n    |                      ^^^^^\n \n-warning: cast `unsafe_c_fn` with `as unsafe extern \"C\" fn()` to use it as a pointer\n-  --> $DIR/function-references.rs:89:22\n+warning: cast `unsafe_c_fn` with `as unsafe extern \"C\" fn()` to obtain a function pointer\n+  --> $DIR/function-references.rs:88:22\n    |\n LL |     println!(\"{:p}\", &unsafe_c_fn);\n    |                      ^^^^^^^^^^^^\n \n-warning: cast `variadic_fn` with `as unsafe extern \"C\" fn(_, ...)` to use it as a pointer\n-  --> $DIR/function-references.rs:91:22\n+warning: cast `variadic` with `as unsafe extern \"C\" fn(_, ...)` to obtain a function pointer\n+  --> $DIR/function-references.rs:90:22\n    |\n-LL |     println!(\"{:p}\", &variadic_fn);\n-   |                      ^^^^^^^^^^^^\n+LL |     println!(\"{:p}\", &variadic);\n+   |                      ^^^^^^^^^\n \n-warning: cast `var` with `as fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:93:22\n+warning: cast `var` with `as fn(_) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:92:22\n    |\n LL |     println!(\"{:p}\", &std::env::var::<String>);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: cast `nop` with `as fn()` to use it as a pointer\n-  --> $DIR/function-references.rs:96:32\n+warning: cast `nop` with `as fn()` to obtain a function pointer\n+  --> $DIR/function-references.rs:95:32\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                ^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:96:38\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:95:38\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                      ^^^^\n \n-warning: cast `bar` with `as fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:96:44\n+warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:95:44\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                            ^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:111:41\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:110:41\n    |\n LL |         std::mem::transmute::<_, usize>(&foo);\n    |                                         ^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:113:50\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:112:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n    |                                                  ^^^^^^^^^^^^\n \n-warning: cast `bar` with `as fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:113:50\n+warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:112:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n    |                                                  ^^^^^^^^^^^^\n \n-warning: cast `bar` with `as fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:123:15\n+warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:122:15\n    |\n LL |     print_ptr(&bar);\n    |               ^^^^\n \n-warning: cast `bar` with `as fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:125:24\n+warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:124:24\n    |\n LL |     bound_by_ptr_trait(&bar);\n    |                        ^^^^\n \n-warning: cast `bar` with `as fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:127:30\n+warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:126:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n    |                              ^^^^^^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:127:30\n+warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+  --> $DIR/function-references.rs:126:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n    |                              ^^^^^^^^^^^^"}]}