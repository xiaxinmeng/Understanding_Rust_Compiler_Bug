{"sha": "226358e2fb2541678c21bdddc603311863a5ab93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNjM1OGUyZmIyNTQxNjc4YzIxYmRkZGM2MDMzMTE4NjNhNWFiOTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-15T21:57:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-22T19:54:16Z"}, "message": "rename `ParameterEnvironment` to `ParamEnv`", "tree": {"sha": "fc8d7620ebc542a8b726ed40a22c0260455e7fe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc8d7620ebc542a8b726ed40a22c0260455e7fe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/226358e2fb2541678c21bdddc603311863a5ab93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/226358e2fb2541678c21bdddc603311863a5ab93", "html_url": "https://github.com/rust-lang/rust/commit/226358e2fb2541678c21bdddc603311863a5ab93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/226358e2fb2541678c21bdddc603311863a5ab93/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca65a8a80844f6aabb47d9239c5b65b43b58e539", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca65a8a80844f6aabb47d9239c5b65b43b58e539", "html_url": "https://github.com/rust-lang/rust/commit/ca65a8a80844f6aabb47d9239c5b65b43b58e539"}], "stats": {"total": 182, "additions": 91, "deletions": 91}, "files": [{"sha": "291d0d7c937ed6a3a15621ee013ab8952161d449", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -163,7 +163,7 @@ pub enum DepNode<D: Clone + Debug> {\n     // not a hotspot.\n     ProjectionCache { def_ids: Vec<D> },\n \n-    ParameterEnvironment(D),\n+    ParamEnv(D),\n     DescribeDef(D),\n     DefSpan(D),\n     Stability(D),\n@@ -293,7 +293,7 @@ impl<D: Clone + Debug> DepNode<D> {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(|d| ProjectionCache { def_ids: d })\n             }\n-            ParameterEnvironment(ref d) => op(d).map(ParameterEnvironment),\n+            ParamEnv(ref d) => op(d).map(ParamEnv),\n             DescribeDef(ref d) => op(d).map(DescribeDef),\n             DefSpan(ref d) => op(d).map(DefSpan),\n             Stability(ref d) => op(d).map(Stability),"}, {"sha": "090ad4c2661ad951d6a466a0f36f46c12cc1dc38", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -28,7 +28,7 @@ use middle::lang_items;\n use mir::tcx::LvalueTy;\n use ty::subst::{Kind, Subst, Substs};\n use ty::{TyVid, IntVid, FloatVid};\n-use ty::{self, ParameterEnvironment, Ty, TyCtxt};\n+use ty::{self, ParamEnv, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::relate::{Relate, RelateResult, TypeRelation};\n@@ -161,7 +161,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // For region variables.\n     region_vars: RegionVarBindings<'a, 'gcx, 'tcx>,\n \n-    pub parameter_environment: ty::ParameterEnvironment<'gcx>,\n+    pub parameter_environment: ty::ParamEnv<'gcx>,\n \n     /// Caches the results of trait selection. This cache is used\n     /// for things that have to do with the parameters in scope.\n@@ -406,41 +406,41 @@ pub trait InferEnv<'a, 'tcx> {\n     fn to_parts(self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParameterEnvironment<'tcx>>);\n+                    Option<ty::ParamEnv<'tcx>>);\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for () {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParameterEnvironment<'tcx>>) {\n+                    Option<ty::ParamEnv<'tcx>>) {\n         (None, None, None)\n     }\n }\n \n-impl<'a, 'tcx> InferEnv<'a, 'tcx> for ty::ParameterEnvironment<'tcx> {\n+impl<'a, 'tcx> InferEnv<'a, 'tcx> for ty::ParamEnv<'tcx> {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParameterEnvironment<'tcx>>) {\n+                    Option<ty::ParamEnv<'tcx>>) {\n         (None, None, Some(self))\n     }\n }\n \n-impl<'a, 'tcx> InferEnv<'a, 'tcx> for (&'a ty::TypeckTables<'tcx>, ty::ParameterEnvironment<'tcx>) {\n+impl<'a, 'tcx> InferEnv<'a, 'tcx> for (&'a ty::TypeckTables<'tcx>, ty::ParamEnv<'tcx>) {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParameterEnvironment<'tcx>>) {\n+                    Option<ty::ParamEnv<'tcx>>) {\n         (Some(self.0), None, Some(self.1))\n     }\n }\n \n-impl<'a, 'tcx> InferEnv<'a, 'tcx> for (ty::TypeckTables<'tcx>, ty::ParameterEnvironment<'tcx>) {\n+impl<'a, 'tcx> InferEnv<'a, 'tcx> for (ty::TypeckTables<'tcx>, ty::ParamEnv<'tcx>) {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParameterEnvironment<'tcx>>) {\n+                    Option<ty::ParamEnv<'tcx>>) {\n         (None, Some(self.0), Some(self.1))\n     }\n }\n@@ -449,7 +449,7 @@ impl<'a, 'tcx> InferEnv<'a, 'tcx> for hir::BodyId {\n     fn to_parts(self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                 -> (Option<&'a ty::TypeckTables<'tcx>>,\n                     Option<ty::TypeckTables<'tcx>>,\n-                    Option<ty::ParameterEnvironment<'tcx>>) {\n+                    Option<ty::ParamEnv<'tcx>>) {\n         let def_id = tcx.hir.body_owner_def_id(self);\n         (Some(tcx.typeck_tables_of(def_id)),\n          None,\n@@ -465,7 +465,7 @@ pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     arena: DroplessArena,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n     tables: Option<&'a ty::TypeckTables<'gcx>>,\n-    param_env: Option<ty::ParameterEnvironment<'gcx>>,\n+    param_env: Option<ty::ParamEnv<'gcx>>,\n     projection_mode: Reveal,\n }\n \n@@ -526,7 +526,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n         let tables = tables.map(InferTables::Interned).unwrap_or_else(|| {\n             fresh_tables.as_ref().map_or(InferTables::Missing, InferTables::InProgress)\n         });\n-        let param_env = param_env.take().unwrap_or_else(|| ParameterEnvironment::empty());\n+        let param_env = param_env.take().unwrap_or_else(|| ParamEnv::empty());\n         global_tcx.enter_local(arena, |tcx| f(InferCtxt {\n             tcx: tcx,\n             tables: tables,\n@@ -648,7 +648,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     }\n \n     pub fn normalize_associated_type_in_env<T>(\n-        self, value: &T, env: ty::ParameterEnvironment<'tcx>\n+        self, value: &T, env: ty::ParamEnv<'tcx>\n     ) -> T\n         where T: TransNormalize<'tcx>\n     {\n@@ -1672,7 +1672,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tables.borrow().upvar_capture_map.get(&upvar_id).cloned()\n     }\n \n-    pub fn param_env(&self) -> ty::ParameterEnvironment<'gcx> {\n+    pub fn param_env(&self) -> ty::ParamEnv<'gcx> {\n         self.parameter_environment\n     }\n "}, {"sha": "2e94190203167221991e4d50ccde6c40cfe09414", "filename": "src/librustc/traits/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Ftraits%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Ftraits%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2FREADME.md?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -418,7 +418,7 @@ before, and hence the cache lookup would succeed, yielding\n One subtle interaction is that the results of trait lookup will vary\n depending on what where clauses are in scope. Therefore, we actually\n have *two* caches, a local and a global cache. The local cache is\n-attached to the `ParameterEnvironment` and the global cache attached\n+attached to ParamEnv` and the global cache attached\n to the `tcx`. We use the local cache whenever the result might depend\n on the where clauses that are in scope. The determination of which\n cache to use is done by the method `pick_candidate_cache` in"}, {"sha": "fd6efa9fd06c43ecac1566eab4272af34291652e", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -437,9 +437,9 @@ pub fn type_known_to_meet_bound<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx\n /// Normalizes the parameter environment, reporting errors if they occur.\n pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                               region_context: DefId,\n-                                              unnormalized_env: ty::ParameterEnvironment<'tcx>,\n+                                              unnormalized_env: ty::ParamEnv<'tcx>,\n                                               cause: ObligationCause<'tcx>)\n-                                              -> ty::ParameterEnvironment<'tcx>\n+                                              -> ty::ParamEnv<'tcx>\n {\n     // I'm not wild about reporting errors here; I'd prefer to\n     // have the errors get reported at a defined place (e.g.,\n@@ -477,15 +477,15 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\",\n            predicates);\n \n-    let elaborated_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates));\n+    let elaborated_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates));\n \n     tcx.infer_ctxt(elaborated_env, Reveal::UserFacing).enter(|infcx| {\n         let predicates = match fully_normalize(\n                 &infcx, cause,\n                 // You would really want to pass infcx.parameter_environment.caller_bounds here,\n                 // but that is an interned slice, and fully_normalize takes &T and returns T, so\n                 // without further refactoring, a slice can't be used. Luckily, we still have the\n-                // predicate vector from which we created the ParameterEnvironment in infcx, so we\n+                // predicate vector from which we created the ParamEnv in infcx, so we\n                 // can pass that instead. It's roundabout and a bit brittle, but this code path\n                 // ought to be refactored anyway, and until then it saves us from having to copy.\n                 &predicates,\n@@ -528,7 +528,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         debug!(\"normalize_param_env_or_error: resolved predicates={:?}\",\n             predicates);\n \n-        ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates))\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates))\n     })\n }\n "}, {"sha": "7366ed45f31bd514f96279377cbd36433dfe1e26", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -315,7 +315,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn param_env(&self) -> ty::ParameterEnvironment<'gcx> {\n+    pub fn param_env(&self) -> ty::ParamEnv<'gcx> {\n         self.infcx.param_env()\n     }\n "}, {"sha": "63f3f2ee2d2e4797e33908db270fbb2593f3f34c", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -136,7 +136,7 @@ impl Key for (MirSuite, MirPassIndex, DefId) {\n     }\n }\n \n-impl<'tcx, T: Clone + Hash + Eq + Debug> Key for ty::ParameterEnvironmentAnd<'tcx, T> {\n+impl<'tcx, T: Clone + Hash + Eq + Debug> Key for ty::ParamEnvAnd<'tcx, T> {\n     fn map_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -254,25 +254,25 @@ impl<M: DepTrackingMapConfig<Key=DefId>> QueryDescription for M {\n }\n \n impl<'tcx> QueryDescription for queries::is_copy_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription for queries::is_sized_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Sized`\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription for queries::is_freeze_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is freeze\", env.value)\n     }\n }\n \n impl<'tcx> QueryDescription for queries::needs_drop_raw<'tcx> {\n-    fn describe(_tcx: TyCtxt, env: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> String {\n+    fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` needs drop\", env.value)\n     }\n }\n@@ -890,14 +890,14 @@ define_maps! { <'tcx>\n     [] specialization_graph_of: SpecializationGraph(DefId) -> Rc<specialization_graph::Graph>,\n     [] is_object_safe: ObjectSafety(DefId) -> bool,\n \n-    [] parameter_environment: ParameterEnvironment(DefId) -> ty::ParameterEnvironment<'tcx>,\n+    [] parameter_environment: ParamEnv(DefId) -> ty::ParamEnv<'tcx>,\n \n     // Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n     // `ty.is_copy()`, etc, since that will prune the environment where possible.\n-    [] is_copy_raw: is_copy_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,\n-    [] is_sized_raw: is_sized_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,\n-    [] is_freeze_raw: is_freeze_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,\n-    [] needs_drop_raw: needs_drop_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,\n+    [] is_copy_raw: is_copy_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n+    [] is_sized_raw: is_sized_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n+    [] is_freeze_raw: is_freeze_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n+    [] needs_drop_raw: needs_drop_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -942,22 +942,22 @@ fn relevant_trait_impls_for((def_id, _): (DefId, SimplifiedType)) -> DepNode<Def\n     DepNode::TraitImpls(def_id)\n }\n \n-fn is_copy_dep_node<'tcx>(_: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n+fn is_copy_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n     let krate_def_id = DefId::local(CRATE_DEF_INDEX);\n     DepNode::IsCopy(krate_def_id)\n }\n \n-fn is_sized_dep_node<'tcx>(_: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n+fn is_sized_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n     let krate_def_id = DefId::local(CRATE_DEF_INDEX);\n     DepNode::IsSized(krate_def_id)\n }\n \n-fn is_freeze_dep_node<'tcx>(_: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n+fn is_freeze_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n     let krate_def_id = DefId::local(CRATE_DEF_INDEX);\n     DepNode::IsSized(krate_def_id)\n }\n \n-fn needs_drop_dep_node<'tcx>(_: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n+fn needs_drop_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepNode<DefId> {\n     let krate_def_id = DefId::local(CRATE_DEF_INDEX);\n     DepNode::NeedsDrop(krate_def_id)\n }"}, {"sha": "ec49d7ff2c6ee8245bbd38489f43a9b5f955b012", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -1238,18 +1238,18 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n     }\n }\n \n-/// When type checking, we use the `ParameterEnvironment` to track\n+/// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this\n /// particular point.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct ParameterEnvironment<'tcx> {\n+pub struct ParamEnv<'tcx> {\n     /// Obligations that the caller must satisfy. This is basically\n     /// the set of bounds on the in-scope type parameters, translated\n     /// into Obligations, and elaborated and normalized.\n     pub caller_bounds: &'tcx Slice<ty::Predicate<'tcx>>,\n }\n \n-impl<'tcx> ParameterEnvironment<'tcx> {\n+impl<'tcx> ParamEnv<'tcx> {\n     /// Creates a suitable environment in which to perform trait\n     /// queries on the given value. This will either be `self` *or*\n     /// the empty environment, depending on whether `value` references\n@@ -1265,30 +1265,30 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n     /// effectively, when type-checking the body of said\n     /// function. This preserves existing behavior in any\n     /// case. --nmatsakis\n-    pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParameterEnvironmentAnd<'tcx, T> {\n+    pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {\n         assert!(!value.needs_infer());\n         if value.has_param_types() || value.has_self_ty() {\n-            ParameterEnvironmentAnd {\n+            ParamEnvAnd {\n                 param_env: self,\n                 value: value,\n             }\n         } else {\n-            ParameterEnvironmentAnd {\n-                param_env: ParameterEnvironment::empty(),\n+            ParamEnvAnd {\n+                param_env: ParamEnv::empty(),\n                 value: value,\n             }\n         }\n     }\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct ParameterEnvironmentAnd<'tcx, T> {\n-    pub param_env: ParameterEnvironment<'tcx>,\n+pub struct ParamEnvAnd<'tcx, T> {\n+    pub param_env: ParamEnv<'tcx>,\n     pub value: T,\n }\n \n-impl<'tcx, T> ParameterEnvironmentAnd<'tcx, T> {\n-    pub fn into_parts(self) -> (ParameterEnvironment<'tcx>, T) {\n+impl<'tcx, T> ParamEnvAnd<'tcx, T> {\n+    pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {\n         (self.param_env, self.value)\n     }\n }\n@@ -2517,10 +2517,10 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n         })\n }\n \n-/// See `ParameterEnvironment` struct def'n for details.\n+/// See `ParamEnv` struct def'n for details.\n fn parameter_environment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    def_id: DefId)\n-                                   -> ParameterEnvironment<'tcx> {\n+                                   -> ParamEnv<'tcx> {\n     // Compute the bounds on Self and the type parameters.\n \n     let bounds = tcx.predicates_of(def_id).instantiate_identity(tcx);\n@@ -2538,7 +2538,7 @@ fn parameter_environment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // are any errors at that point, so after type checking you can be\n     // sure that this will succeed without errors anyway.\n \n-    let unnormalized_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates));\n+    let unnormalized_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates));\n \n     let body_id = tcx.hir.as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n         tcx.hir.maybe_body_owned_by(id).map_or(id, |body| body.node_id)"}, {"sha": "d18b0a69ade22631e8c43c6e5406b6e78df223d7", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -16,7 +16,7 @@ use infer::InferCtxt;\n use ich::{StableHashingContext, NodeIdHashingMode};\n use traits::{self, Reveal};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::ParameterEnvironment;\n+use ty::ParamEnv;\n use ty::fold::TypeVisitor;\n use ty::layout::{Layout, LayoutError};\n use ty::subst::{Subst, Kind};\n@@ -148,7 +148,7 @@ pub enum Representability {\n     SelfRecursive(Vec<Span>),\n }\n \n-impl<'tcx> ParameterEnvironment<'tcx> {\n+impl<'tcx> ParamEnv<'tcx> {\n     /// Construct a trait environment suitable for contexts where\n     /// there are no where clauses in scope.\n     pub fn empty() -> Self {\n@@ -157,7 +157,7 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n \n     /// Construct a trait environment with the given set of predicates.\n     pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>) -> Self {\n-        ty::ParameterEnvironment { caller_bounds }\n+        ty::ParamEnv { caller_bounds }\n     }\n \n     pub fn can_type_implement_copy<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -720,23 +720,23 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n impl<'a, 'tcx> ty::TyS<'tcx> {\n     pub fn moves_by_default(&'tcx self,\n                             tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            param_env: ParameterEnvironment<'tcx>,\n+                            param_env: ParamEnv<'tcx>,\n                             span: Span)\n                             -> bool {\n         !tcx.at(span).is_copy_raw(param_env.and(self))\n     }\n \n     pub fn is_sized(&'tcx self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    param_env: ParameterEnvironment<'tcx>,\n+                    param_env: ParamEnv<'tcx>,\n                     span: Span)-> bool\n     {\n         tcx.at(span).is_sized_raw(param_env.and(self))\n     }\n \n     pub fn is_freeze(&'tcx self,\n                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                     param_env: ParameterEnvironment<'tcx>,\n+                     param_env: ParamEnv<'tcx>,\n                      span: Span)-> bool\n     {\n         tcx.at(span).is_freeze_raw(param_env.and(self))\n@@ -751,7 +751,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n     #[inline]\n     pub fn needs_drop(&'tcx self,\n                       tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                      param_env: ty::ParameterEnvironment<'tcx>)\n+                      param_env: ty::ParamEnv<'tcx>)\n                       -> bool {\n         tcx.needs_drop_raw(param_env.and(self))\n     }\n@@ -942,7 +942,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n }\n \n fn is_copy_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                         query: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>)\n+                         query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                          -> bool\n {\n     let (param_env, ty) = query.into_parts();\n@@ -952,7 +952,7 @@ fn is_copy_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn is_sized_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          query: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>)\n+                          query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                           -> bool\n {\n     let (param_env, ty) = query.into_parts();\n@@ -962,7 +962,7 @@ fn is_sized_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn is_freeze_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           query: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>)\n+                           query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                            -> bool\n {\n     let (param_env, ty) = query.into_parts();\n@@ -972,7 +972,7 @@ fn is_freeze_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            query: ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>)\n+                            query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                             -> bool\n {\n     let (param_env, ty) = query.into_parts();\n@@ -1018,7 +1018,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::TyAdt(def, _) if def.has_dtor(tcx) => true,\n \n         // Can refer to a type which may drop.\n-        // FIXME(eddyb) check this against a ParameterEnvironment.\n+        // FIXME(eddyb) check this against a ParamEnv.\n         ty::TyDynamic(..) | ty::TyProjection(..) | ty::TyParam(_) |\n         ty::TyAnon(..) | ty::TyInfer(_) | ty::TyError => true,\n "}, {"sha": "fd632d0c7418b116b665200c9a554852ed72fbfa", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -90,7 +90,7 @@ struct CheckLoanCtxt<'a, 'tcx: 'a> {\n     dfcx_loans: &'a LoanDataFlow<'a, 'tcx>,\n     move_data: &'a move_data::FlowedMoveData<'a, 'tcx>,\n     all_loans: &'a [Loan<'tcx>],\n-    param_env: &'a ty::ParameterEnvironment<'tcx>,\n+    param_env: &'a ty::ParamEnv<'tcx>,\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {"}, {"sha": "5f13a080909ff1e0e8e85c2c4e0ff26268cd6385", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         self.ctxt.tcx\n     }\n \n-    fn param_env(&self) -> ty::ParameterEnvironment<'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.ctxt.param_env()\n     }\n \n@@ -290,7 +290,7 @@ struct ElaborateDropsCtxt<'a, 'tcx: 'a> {\n impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn move_data(&self) -> &'b MoveData<'tcx> { &self.env.move_data }\n \n-    fn param_env(&self) -> ty::ParameterEnvironment<'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.env.param_env\n     }\n "}, {"sha": "cf56a705839f6949a3174003031cea671faccaa4", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n+use rustc::ty::{self, TyCtxt, ParamEnv};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n@@ -191,7 +191,7 @@ pub struct MovePathLookup<'tcx> {\n struct MoveDataBuilder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: ParameterEnvironment<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     data: MoveData<'tcx>,\n }\n \n@@ -203,7 +203,7 @@ pub enum MovePathError {\n impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     fn new(mir: &'a Mir<'tcx>,\n            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-           param_env: ParameterEnvironment<'tcx>)\n+           param_env: ParamEnv<'tcx>)\n            -> Self {\n         let mut move_paths = IndexVec::new();\n         let mut path_map = IndexVec::new();\n@@ -370,15 +370,15 @@ impl<'tcx> MovePathLookup<'tcx> {\n impl<'a, 'tcx> MoveData<'tcx> {\n     pub fn gather_moves(mir: &Mir<'tcx>,\n                         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                        param_env: ParameterEnvironment<'tcx>)\n+                        param_env: ParamEnv<'tcx>)\n                         -> Self {\n         gather_moves(mir, tcx, param_env)\n     }\n }\n \n fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          param_env: ParameterEnvironment<'tcx>)\n+                          param_env: ParamEnv<'tcx>)\n                           -> MoveData<'tcx> {\n     let mut builder = MoveDataBuilder::new(mir, tcx, param_env);\n "}, {"sha": "aa7952e493ce95009b5abaceccc51f13e4decf32", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -51,7 +51,7 @@ fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem>\n \n pub struct MoveDataParamEnv<'tcx> {\n     move_data: MoveData<'tcx>,\n-    param_env: ty::ParameterEnvironment<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n }\n \n pub fn borrowck_mir(bcx: &mut BorrowckCtxt,"}, {"sha": "f7c20542cbf2e98c685bd4b56166d7efb22e2529", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -535,7 +535,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                      lp: &LoanPath<'tcx>,\n                                      the_move: &move_data::Move,\n                                      moved_lp: &LoanPath<'tcx>,\n-                                     _param_env: &ty::ParameterEnvironment<'tcx>) {\n+                                     _param_env: &ty::ParamEnv<'tcx>) {\n         let (verb, verb_participle) = match use_kind {\n             MovedInUse => (\"use\", \"used\"),\n             MovedInCapture => (\"capture\", \"captured\"),"}, {"sha": "91886b221fe1ac1e57337f269081dc3bc052de1c", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -69,7 +69,7 @@ fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> Diagn\n struct MatchVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    param_env: ty::ParameterEnvironment<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     region_maps: &'a RegionMaps,\n }\n "}, {"sha": "1a56a2d0777d41948f15491b039582f3c942c697", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -527,7 +527,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n         if def.has_dtor(cx.tcx) {\n             return;\n         }\n-        let param_env = ty::ParameterEnvironment::empty();\n+        let param_env = ty::ParamEnv::empty();\n         if !ty.moves_by_default(cx.tcx, param_env, item.span) {\n             return;\n         }"}, {"sha": "14d7be67d64468e44601db9fbf74b77103c7bd3e", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -217,7 +217,7 @@ pub struct DropShimElaborator<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     patch: MirPatch<'tcx>,\n     tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: ty::ParameterEnvironment<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'a, 'tcx> fmt::Debug for DropShimElaborator<'a, 'tcx> {\n@@ -232,7 +232,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n     fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }\n     fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n     fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n-    fn param_env(&self) -> ty::ParameterEnvironment<'tcx> { self.param_env }\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> { self.param_env }\n \n     fn drop_style(&self, _path: Self::Path, mode: DropFlagMode) -> DropStyle {\n         if let DropFlagMode::Shallow = mode {"}, {"sha": "5516d84e121adec6da3a13b41cc6c5401ee5a4ca", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -545,7 +545,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n     }\n }\n \n-fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, param_env: ty::ParameterEnvironment<'tcx>,\n+fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, param_env: ty::ParamEnv<'tcx>,\n                           ty: Ty<'tcx>) -> Option<u64> {\n     tcx.infer_ctxt(param_env, traits::Reveal::All).enter(|infcx| {\n         ty.layout(&infcx).ok().map(|layout| {"}, {"sha": "c839061df16f78f6319f9951b3328dbd4ad42174", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> Qualif {\n     /// Remove flags which are impossible for the given type.\n     fn restrict(&mut self, ty: Ty<'tcx>,\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                param_env: ty::ParameterEnvironment<'tcx>) {\n+                param_env: ty::ParamEnv<'tcx>) {\n         if ty.is_freeze(tcx, param_env, DUMMY_SP) {\n             *self = *self - Qualif::MUTABLE_INTERIOR;\n         }\n@@ -128,7 +128,7 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     rpo: ReversePostorder<'a, 'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    param_env: ty::ParameterEnvironment<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     temp_qualif: IndexVec<Local, Option<Qualif>>,\n     return_qualif: Option<Qualif>,\n     qualif: Qualif,\n@@ -139,7 +139,7 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-           param_env: ty::ParameterEnvironment<'tcx>,\n+           param_env: ty::ParamEnv<'tcx>,\n            def_id: DefId,\n            mir: &'a Mir<'tcx>,\n            mode: Mode)"}, {"sha": "585840ce1e509f17df1558be01671169b234710d", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -56,7 +56,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n     fn mir(&self) -> &'a Mir<'tcx>;\n     fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx>;\n-    fn param_env(&self) -> ty::ParameterEnvironment<'tcx>;\n+    fn param_env(&self) -> ty::ParamEnv<'tcx>;\n \n     fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle;\n     fn get_drop_flag(&mut self, path: Self::Path) -> Option<Operand<'tcx>>;"}, {"sha": "8b58e71a0d6d4d1455f540584a103e8f94e24c5f", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -38,7 +38,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::mir::transform::MirSource;\n-use rustc::ty::{self, ParameterEnvironment, Ty, TyCtxt};\n+use rustc::ty::{self, ParamEnv, Ty, TyCtxt};\n use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeSet;\n@@ -58,7 +58,7 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     in_fn: bool,\n     promotable: bool,\n     mut_rvalue_borrows: NodeSet,\n-    param_env: ty::ParameterEnvironment<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n }\n \n@@ -466,7 +466,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         in_fn: false,\n         promotable: false,\n         mut_rvalue_borrows: NodeSet(),\n-        param_env: ParameterEnvironment::empty(),\n+        param_env: ParamEnv::empty(),\n     }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "5a1b8d96cbce6c9126d2f252882711f079f392b1", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -24,7 +24,7 @@ use partitioning::CodegenUnit;\n use type_::Type;\n use rustc_data_structures::base_n;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, ParameterEnvironment, Ty, TyCtxt};\n+use rustc::ty::{self, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{LayoutTyper, TyLayout};\n use session::config::NoDebugInfo;\n use session::Session;\n@@ -321,15 +321,15 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     }\n \n     pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        ty.needs_drop(self.tcx, ParameterEnvironment::empty())\n+        ty.needs_drop(self.tcx, ParamEnv::empty())\n     }\n \n     pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self.tcx, ParameterEnvironment::empty(), DUMMY_SP)\n+        ty.is_sized(self.tcx, ParamEnv::empty(), DUMMY_SP)\n     }\n \n     pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx, ParameterEnvironment::empty(), DUMMY_SP)\n+        ty.is_freeze(self.tcx, ParamEnv::empty(), DUMMY_SP)\n     }\n \n     pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {"}, {"sha": "d89a5e7a51912c60b875616a4e1d84e90217ec36", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226358e2fb2541678c21bdddc603311863a5ab93/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=226358e2fb2541678c21bdddc603311863a5ab93", "patch": "@@ -212,7 +212,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_node_id);\n-    let param_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&hybrid_preds.predicates));\n+    let param_env = ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates));\n     let param_env = traits::normalize_param_env_or_error(tcx,\n                                                          impl_m.def_id,\n                                                          param_env,"}]}