{"sha": "756466bfd0fd457623378ab461164dbaaa9ce971", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjQ2NmJmZDBmZDQ1NzYyMzM3OGFiNDYxMTY0ZGJhYWE5Y2U5NzE=", "commit": {"author": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-01-11T19:03:20Z"}, "committer": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-01-13T09:41:56Z"}, "message": "Rewrite each_attr to return a vector.", "tree": {"sha": "5293a2d86c2eec2b3ca8d6343677238868098eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5293a2d86c2eec2b3ca8d6343677238868098eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756466bfd0fd457623378ab461164dbaaa9ce971", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756466bfd0fd457623378ab461164dbaaa9ce971", "html_url": "https://github.com/rust-lang/rust/commit/756466bfd0fd457623378ab461164dbaaa9ce971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756466bfd0fd457623378ab461164dbaaa9ce971/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27db3f058523ce66e284436e4a3a72edad4c4b81", "url": "https://api.github.com/repos/rust-lang/rust/commits/27db3f058523ce66e284436e4a3a72edad4c4b81", "html_url": "https://github.com/rust-lang/rust/commit/27db3f058523ce66e284436e4a3a72edad4c4b81"}], "stats": {"total": 53, "additions": 16, "deletions": 37}, "files": [{"sha": "e9ef214543d6e738a51fde00796c785f1991ec0a", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/756466bfd0fd457623378ab461164dbaaa9ce971/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756466bfd0fd457623378ab461164dbaaa9ce971/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=756466bfd0fd457623378ab461164dbaaa9ce971", "patch": "@@ -70,7 +70,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                      span: Span) -> Option<String> {\n     let def_id = trait_ref.def_id;\n     let mut report = None;\n-    ty::each_attr(infcx.tcx, def_id, |item| {\n+    for item in ty::get_attrs(infcx.tcx, def_id).iter() {\n         if item.check_name(\"rustc_on_unimplemented\") {\n             let err_sp = if item.meta().span == DUMMY_SP {\n                 span\n@@ -136,11 +136,9 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                                  eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\",\n                                                  trait_str).as_slice());\n             }\n-            false\n-        } else {\n-            true\n+            break;\n         }\n-    });\n+    }\n     report\n }\n "}, {"sha": "236aa3818c77acc2f1b1c04e98b77118fa0d2bd5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/756466bfd0fd457623378ab461164dbaaa9ce971/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756466bfd0fd457623378ab461164dbaaa9ce971/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=756466bfd0fd457623378ab461164dbaaa9ce971", "patch": "@@ -68,14 +68,15 @@ use util::nodemap::{NodeMap, NodeSet, DefIdMap, DefIdSet};\n use util::nodemap::{FnvHashMap};\n \n use arena::TypedArena;\n-use std::borrow::BorrowFrom;\n+use std::borrow::{BorrowFrom, Cow};\n use std::cell::{Cell, RefCell};\n use std::cmp::{self, Ordering};\n use std::fmt::{self, Show};\n use std::hash::{Hash, Writer, SipHasher, Hasher};\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n+use std::vec::CowVec;\n use collections::enum_set::{EnumSet, CLike};\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n@@ -5555,35 +5556,20 @@ pub fn predicates<'tcx>(\n     vec\n }\n \n-/// Iterate over attributes of a definition.\n-// (This should really be an iterator.)\n-pub fn each_attr<F>(tcx: &ctxt, did: DefId, mut f: F) -> bool where\n-    F: FnMut(&ast::Attribute) -> bool,\n-{\n+/// Get the attributes of a definition.\n+pub fn get_attrs<'tcx>(tcx: &'tcx ctxt, did: DefId)\n+                       -> CowVec<'tcx, ast::Attribute> {\n     if is_local(did) {\n         let item = tcx.map.expect_item(did.node);\n-        item.attrs.iter().all(|attr| f(attr))\n+        Cow::Borrowed(&item.attrs[])\n     } else {\n-        info!(\"getting foreign attrs\");\n-        let attrs = csearch::get_item_attrs(&tcx.sess.cstore, did);\n-        let cont = attrs.iter().all(|attr| f(attr));\n-        info!(\"done\");\n-        cont\n+        Cow::Owned(csearch::get_item_attrs(&tcx.sess.cstore, did))\n     }\n }\n \n /// Determine whether an item is annotated with an attribute\n pub fn has_attr(tcx: &ctxt, did: DefId, attr: &str) -> bool {\n-    let mut found = false;\n-    each_attr(tcx, did, |item| {\n-        if item.check_name(attr) {\n-            found = true;\n-            false\n-        } else {\n-            true\n-        }\n-    });\n-    found\n+    get_attrs(tcx, did).iter().any(|item| item.check_name(attr))\n }\n \n /// Determine whether an item is annotated with `#[repr(packed)]`\n@@ -5600,13 +5586,9 @@ pub fn lookup_simd(tcx: &ctxt, did: DefId) -> bool {\n pub fn lookup_repr_hints(tcx: &ctxt, did: DefId) -> Rc<Vec<attr::ReprAttr>> {\n     memoized(&tcx.repr_hint_cache, did, |did: DefId| {\n         Rc::new(if did.krate == LOCAL_CRATE {\n-            let mut acc = Vec::new();\n-            ty::each_attr(tcx, did, |meta| {\n-                acc.extend(attr::find_repr_attrs(tcx.sess.diagnostic(),\n-                                                 meta).into_iter());\n-                true\n-            });\n-            acc\n+            get_attrs(tcx, did).iter().flat_map(|meta| {\n+                attr::find_repr_attrs(tcx.sess.diagnostic(), meta).into_iter()\n+            }).collect()\n         } else {\n             csearch::get_repr_attrs(&tcx.sess.cstore, did)\n         })"}, {"sha": "36757470dc068169c0189a2d349f2060013c047c", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/756466bfd0fd457623378ab461164dbaaa9ce971/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756466bfd0fd457623378ab461164dbaaa9ce971/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=756466bfd0fd457623378ab461164dbaaa9ce971", "patch": "@@ -352,12 +352,11 @@ pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, did: ast::DefId,\n         // don't do this then linker errors can be generated where the linker\n         // complains that one object files has a thread local version of the\n         // symbol and another one doesn't.\n-        ty::each_attr(ccx.tcx(), did, |attr| {\n+        for attr in ty::get_attrs(ccx.tcx(), did).iter() {\n             if attr.check_name(\"thread_local\") {\n                 llvm::set_thread_local(c, true);\n             }\n-            true\n-        });\n+        }\n         ccx.externs().borrow_mut().insert(name.to_string(), c);\n         return c;\n     }"}]}