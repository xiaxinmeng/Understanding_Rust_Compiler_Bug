{"sha": "86348f5994cdc3831edf3a5582d6d9d576fd1d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MzQ4ZjU5OTRjZGMzODMxZWRmM2E1NTgyZDZkOWQ1NzZmZDFkODA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-02T12:43:04Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Comment fixes / todos", "tree": {"sha": "d630646508fcf2422026178f0a0c707ff828e2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d630646508fcf2422026178f0a0c707ff828e2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86348f5994cdc3831edf3a5582d6d9d576fd1d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86348f5994cdc3831edf3a5582d6d9d576fd1d80", "html_url": "https://github.com/rust-lang/rust/commit/86348f5994cdc3831edf3a5582d6d9d576fd1d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86348f5994cdc3831edf3a5582d6d9d576fd1d80/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3397ca679fb0156c9f102ab82354e2bcef5f4dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3397ca679fb0156c9f102ab82354e2bcef5f4dd1", "html_url": "https://github.com/rust-lang/rust/commit/3397ca679fb0156c9f102ab82354e2bcef5f4dd1"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "b32df8e90ef8a6b79097211f3a04bbb538bc68e8", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86348f5994cdc3831edf3a5582d6d9d576fd1d80/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86348f5994cdc3831edf3a5582d6d9d576fd1d80/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=86348f5994cdc3831edf3a5582d6d9d576fd1d80", "patch": "@@ -587,6 +587,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.write_method_resolution(tgt_expr, func);\n                 (ty, self.db.value_ty(func.into()), Some(generics(self.db, func.into())))\n             }\n+            // TODO fix this\n             None => (receiver_ty, Binders::new(0, Ty::Unknown), None),\n         };\n         let substs = self.substs_for_method_call(def_generics, generic_args, &derefed_receiver_ty);"}, {"sha": "1da4bcc19bf493fbcd5379dee31cfb06336c1fe8", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86348f5994cdc3831edf3a5582d6d9d576fd1d80/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86348f5994cdc3831edf3a5582d6d9d576fd1d80/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=86348f5994cdc3831edf3a5582d6d9d576fd1d80", "patch": "@@ -288,10 +288,12 @@ pub enum Ty {\n     Projection(ProjectionTy),\n \n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n+    // TODO fix documentation\n     Param(TypeParamId),\n \n     /// A bound type variable. Used during trait resolution to represent Chalk\n     /// variables, and in `Dyn` and `Opaque` bounds to represent the `Self` type.\n+    // TODO fix documentation\n     Bound(u32),\n \n     /// A type variable used during type checking. Not to be confused with a"}, {"sha": "76e2fbabf8a45d7e54f36117b313ea948b68f068", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86348f5994cdc3831edf3a5582d6d9d576fd1d80/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86348f5994cdc3831edf3a5582d6d9d576fd1d80/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=86348f5994cdc3831edf3a5582d6d9d576fd1d80", "patch": "@@ -37,10 +37,9 @@ pub struct TyLoweringContext<'a, DB: HirDatabase> {\n     pub db: &'a DB,\n     pub resolver: &'a Resolver,\n     /// Note: Conceptually, it's thinkable that we could be in a location where\n-    /// some type params are quantified universally (and should be represented\n-    /// as placeholders), and others are quantified existentially (and should be\n-    /// converted to variables). I think in practice, this isn't possible\n-    /// currently, so this should be fine for now.\n+    /// some type params should be represented as placeholders, and others\n+    /// should be converted to variables. I think in practice, this isn't\n+    /// possible currently, so this should be fine for now.\n     pub type_param_mode: TypeParamLoweringMode,\n     pub impl_trait_mode: ImplTraitLoweringMode,\n     pub impl_trait_counter: std::cell::Cell<u16>,\n@@ -71,8 +70,8 @@ pub enum ImplTraitLoweringMode {\n     /// types of functions we're calling.\n     Opaque,\n     /// `impl Trait` gets lowered into a type variable. Used for argument\n-    /// position impl Trait currently, since it allows us to support that\n-    /// without Chalk.\n+    /// position impl Trait when inside the respective function, since it allows\n+    /// us to support that without Chalk.\n     Param,\n     /// `impl Trait` gets lowered into a variable that can unify with some\n     /// type. This is used in places where values flow 'in', i.e. for arguments"}]}