{"sha": "43eb9259ec92561033969118d1cc071a91f86084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZWI5MjU5ZWM5MjU2MTAzMzk2OTExOGQxY2MwNzFhOTFmODYwODQ=", "commit": {"author": {"name": "Tim", "email": "t.diekmann.3dv@gmail.com", "date": "2018-09-06T13:11:56Z"}, "committer": {"name": "Tim", "email": "t.diekmann.3dv@gmail.com", "date": "2018-09-06T13:11:56Z"}, "message": "Use binary_op_val instead of doing the check manually.", "tree": {"sha": "8c64581283414847a4c557ef2f1d58a5cbb2248f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c64581283414847a4c557ef2f1d58a5cbb2248f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43eb9259ec92561033969118d1cc071a91f86084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43eb9259ec92561033969118d1cc071a91f86084", "html_url": "https://github.com/rust-lang/rust/commit/43eb9259ec92561033969118d1cc071a91f86084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43eb9259ec92561033969118d1cc071a91f86084/comments", "author": null, "committer": null, "parents": [{"sha": "92dd526a4e8633b95754e2a8e2ef7169c30706f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/92dd526a4e8633b95754e2a8e2ef7169c30706f6", "html_url": "https://github.com/rust-lang/rust/commit/92dd526a4e8633b95754e2a8e2ef7169c30706f6"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "48085c2145418ed1a2e6e01e94da1db1e1144dcc", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/43eb9259ec92561033969118d1cc071a91f86084/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43eb9259ec92561033969118d1cc071a91f86084/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=43eb9259ec92561033969118d1cc071a91f86084", "patch": "@@ -126,23 +126,22 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 }\n             }\n             \"unchecked_shl\" | \"unchecked_shr\" => {\n-                let bits = dest.layout.size.bytes() as u128 * 8;\n                 let l = self.read_value(args[0])?;\n                 let r = self.read_value(args[1])?;\n-                let r_ty = substs.type_at(0);\n-                let r_layout_of = self.layout_of(r_ty)?;\n-                let r_val =  r.to_scalar()?.to_bits(r_layout_of.size)?;\n-                if r_val >= bits {\n-                    return err!(Intrinsic(\n-                        format!(\"Overflowing shift by {} in {}\", r_val, intrinsic_name),\n-                    ));\n-                }\n                 let bin_op = match intrinsic_name {\n                     \"unchecked_shl\" => BinOp::Shl,\n                     \"unchecked_shr\" => BinOp::Shr,\n                     _ => bug!(\"Already checked for int ops\")\n                 };\n-                self.binop_ignore_overflow(bin_op, l, r, dest)?;\n+                let (val, overflowed) = self.binary_op_val(bin_op, l, r)?;\n+                if overflowed {\n+                    let layout = self.layout_of(substs.type_at(0))?;\n+                    let r_val =  r.to_scalar()?.to_bits(layout.size)?;\n+                    return err!(Intrinsic(\n+                        format!(\"Overflowing shift by {} in {}\", r_val, intrinsic_name),\n+                    ));\n+                }\n+                self.write_scalar(val, dest)?;\n             }\n             \"transmute\" => {\n                 // Go through an allocation, to make sure the completely different layouts"}]}