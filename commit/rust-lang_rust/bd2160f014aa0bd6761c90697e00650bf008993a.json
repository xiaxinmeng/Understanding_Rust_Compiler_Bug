{"sha": "bd2160f014aa0bd6761c90697e00650bf008993a", "node_id": "C_kwDOAAsO6NoAKGJkMjE2MGYwMTRhYTBiZDY3NjFjOTA2OTdlMDA2NTBiZjAwODk5M2E", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-27T00:54:31Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T14:01:53Z"}, "message": "final rabasing fixes", "tree": {"sha": "7f94147c19b71f7dead9d734ee0d5f65413d099e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f94147c19b71f7dead9d734ee0d5f65413d099e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd2160f014aa0bd6761c90697e00650bf008993a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2160f014aa0bd6761c90697e00650bf008993a", "html_url": "https://github.com/rust-lang/rust/commit/bd2160f014aa0bd6761c90697e00650bf008993a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd2160f014aa0bd6761c90697e00650bf008993a/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/66fe84d9369c40f2b17ae8cd541d6d87c501b45f", "html_url": "https://github.com/rust-lang/rust/commit/66fe84d9369c40f2b17ae8cd541d6d87c501b45f"}], "stats": {"total": 127, "additions": 23, "deletions": 104}, "files": [{"sha": "60ea7695795570ab9d4ecdf37a2076493bd07ca1", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bd2160f014aa0bd6761c90697e00650bf008993a/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bd2160f014aa0bd6761c90697e00650bf008993a/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=bd2160f014aa0bd6761c90697e00650bf008993a", "patch": "@@ -22,13 +22,6 @@ import {\n     DependencyId,\n } from \"./dependencies_provider\";\n import { execRevealDependency } from \"./commands\";\n-import {\n-    Dependency,\n-    DependencyFile,\n-    RustDependenciesProvider,\n-    DependencyId,\n-} from \"./dependencies_provider\";\n-import { execRevealDependency } from \"./commands\";\n import { PersistentState } from \"./persistent_state\";\n import { bootstrap } from \"./bootstrap\";\n import { ExecOptions } from \"child_process\";\n@@ -40,12 +33,12 @@ import { ExecOptions } from \"child_process\";\n export type Workspace =\n     | { kind: \"Empty\" }\n     | {\n-          kind: \"Workspace Folder\";\n-      }\n+    kind: \"Workspace Folder\";\n+}\n     | {\n-          kind: \"Detached Files\";\n-          files: vscode.TextDocument[];\n-      };\n+    kind: \"Detached Files\";\n+    files: vscode.TextDocument[];\n+};\n \n export function fetchWorkspace(): Workspace {\n     const folders = (vscode.workspace.workspaceFolders || []).filter(\n@@ -59,9 +52,9 @@ export function fetchWorkspace(): Workspace {\n         ? rustDocuments.length === 0\n             ? { kind: \"Empty\" }\n             : {\n-                  kind: \"Detached Files\",\n-                  files: rustDocuments,\n-              }\n+                kind: \"Detached Files\",\n+                files: rustDocuments,\n+            }\n         : { kind: \"Workspace Folder\" };\n }\n \n@@ -483,4 +476,4 @@ export interface Disposable {\n     dispose(): void;\n }\n \n-export type Cmd = (...args: any[]) => unknown;\n+export type Cmd = (...args: any[]) => unknown;\n\\ No newline at end of file"}, {"sha": "0faf7665cfda723c1436d3232acd1bfcc4515346", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bd2160f014aa0bd6761c90697e00650bf008993a/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bd2160f014aa0bd6761c90697e00650bf008993a/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=bd2160f014aa0bd6761c90697e00650bf008993a", "patch": "@@ -1,17 +1,12 @@\n import * as vscode from \"vscode\";\n import * as fspath from \"path\";\n import * as fs from \"fs\";\n-import { CtxInit } from \"./ctx\";\n+import {CtxInit} from \"./ctx\";\n import * as ra from \"./lsp_ext\";\n-import { FetchDependencyListResult } from \"./lsp_ext\";\n-import { Ctx } from \"./ctx\";\n-import { setFlagsFromString } from \"v8\";\n-import * as ra from \"./lsp_ext\";\n-\n+import {FetchDependencyListResult} from \"./lsp_ext\";\n \n export class RustDependenciesProvider\n-    implements vscode.TreeDataProvider<Dependency | DependencyFile>\n-{\n+    implements vscode.TreeDataProvider<Dependency | DependencyFile> {\n     dependenciesMap: { [id: string]: Dependency | DependencyFile };\n     ctx: CtxInit;\n \n@@ -61,7 +56,6 @@ export class RustDependenciesProvider\n                 void vscode.window.showInformationMessage(\"No dependency in empty workspace\");\n                 return Promise.resolve([]);\n             }\n-\n             if (element) {\n                 const files = fs.readdirSync(element.dependencyPath).map((fileName) => {\n                     const filePath = fspath.join(element.dependencyPath, fileName);\n@@ -80,20 +74,17 @@ export class RustDependenciesProvider\n     }\n \n     private async getRootDependencies(): Promise<Dependency[]> {\n-        const crates = await this.ctx.client.sendRequest(ra.fetchDependencyGraph, {});\n-\n         const dependenciesResult: FetchDependencyListResult = await this.ctx.client.sendRequest(\n             ra.fetchDependencyList,\n             {}\n         );\n         const crates = dependenciesResult.crates;\n-        const deps = crates.map((crate) => {\n-        const dep = this.toDep(crate.name || \"unknown\", crate.version || \"\", crate.path);\n+\n+        return crates.map((crate) => {\n+            const dep = this.toDep(crate.name || \"unknown\", crate.version || \"\", crate.path);\n             this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n-        this.dependenciesMap[stdlib.dependencyPath.toLowerCase()] = stdlib;\n-        return dep;\n+            return dep;\n         });\n-        return deps;\n     }\n \n     private toDep(moduleName: string, version: string, path: string): Dependency {\n@@ -131,11 +122,13 @@ export class DependencyFile extends vscode.TreeItem {\n         this.id = this.dependencyPath.toLowerCase();\n         const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n         if (!isDir) {\n-            this.command = { command: \"vscode.open\",\n+            this.command = {\n+                command: \"vscode.open\",\n                 title: \"Open File\",\n                 arguments: [vscode.Uri.file(this.dependencyPath)],\n-        };\n-    }}\n+            };\n+        }\n+    }\n }\n \n-export type DependencyId = { id: string };\n+export type DependencyId = { id: string };\n\\ No newline at end of file"}, {"sha": "c876048ba6512a129ccd17c3e840754515af64d1", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bd2160f014aa0bd6761c90697e00650bf008993a/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bd2160f014aa0bd6761c90697e00650bf008993a/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=bd2160f014aa0bd6761c90697e00650bf008993a", "patch": "@@ -96,40 +96,6 @@ export class Cargo {\n         return artifacts[0].fileName;\n     }\n \n-    async crates(): Promise<Crate[]> {\n-        const pathToCargo = await cargoPath();\n-        return await new Promise((resolve, reject) => {\n-            const crates: Crate[] = [];\n-\n-            const cargo = cp.spawn(pathToCargo, [\"tree\", \"--prefix\", \"none\"], {\n-                stdio: [\"ignore\", \"pipe\", \"pipe\"],\n-                cwd: this.rootFolder,\n-            });\n-            const rl = readline.createInterface({ input: cargo.stdout });\n-            rl.on(\"line\", (line) => {\n-                const match = line.match(TREE_LINE_PATTERN);\n-                if (match) {\n-                    const name = match[1];\n-                    const version = match[2];\n-                    const extraInfo = match[3];\n-                    // ignore duplicates '(*)' and path dependencies\n-                    if (this.shouldIgnore(extraInfo)) {\n-                        return;\n-                    }\n-                    crates.push({ name, version });\n-                }\n-            });\n-            cargo.on(\"exit\", (exitCode, _) => {\n-                if (exitCode === 0) resolve(crates);\n-                else reject(new Error(`exit code: ${exitCode}.`));\n-            });\n-        });\n-    }\n-\n-    private shouldIgnore(extraInfo: string): boolean {\n-        return extraInfo !== undefined && (extraInfo === \"*\" || path.isAbsolute(extraInfo));\n-    }\n-\n     private async runCargo(\n         cargoArgs: string[],\n         onStdoutJson: (obj: any) => void,\n@@ -161,29 +127,6 @@ export class Cargo {\n     }\n }\n \n-export async function activeToolchain(): Promise<string> {\n-    const pathToRustup = await rustupPath();\n-    return await new Promise((resolve, reject) => {\n-        const execution = cp.spawn(pathToRustup, [\"show\", \"active-toolchain\"], {\n-            stdio: [\"ignore\", \"pipe\", \"pipe\"],\n-            cwd: os.homedir(),\n-        });\n-        const rl = readline.createInterface({ input: execution.stdout });\n-\n-        let currToolchain: string | undefined = undefined;\n-        rl.on(\"line\", (line) => {\n-            const match = line.match(TOOLCHAIN_PATTERN);\n-            if (match) {\n-                currToolchain = match[1];\n-            }\n-        });\n-        execution.on(\"exit\", (exitCode, _) => {\n-            if (exitCode === 0 && currToolchain) resolve(currToolchain);\n-            else reject(new Error(`exit code: ${exitCode}.`));\n-        });\n-    });\n-}\n-\n /** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n export async function getSysroot(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n@@ -202,16 +145,6 @@ export async function getRustcId(dir: string): Promise<string> {\n     return rx.exec(data)![1];\n }\n \n-export async function getRustcVersion(dir: string): Promise<string> {\n-    const rustcPath = await getPathForExecutable(\"rustc\");\n-\n-    // do not memoize the result because the toolchain may change between runs\n-    const data = await execute(`${rustcPath} -V`, { cwd: dir });\n-    const rx = /(\\d\\.\\d+\\.\\d+)/;\n-\n-    return rx.exec(data)![1];\n-}\n-\n /** Mirrors `toolchain::cargo()` implementation */\n export function cargoPath(): Promise<string> {\n     return getPathForExecutable(\"cargo\");\n@@ -278,4 +211,4 @@ async function isFileAtUri(uri: vscode.Uri): Promise<boolean> {\n     } catch {\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file"}]}