{"sha": "3eecdd10a2e145c1744592784de41a0d6e7c30a2", "node_id": "C_kwDOAAsO6NoAKDNlZWNkZDEwYTJlMTQ1YzE3NDQ1OTI3ODRkZTQxYTBkNmU3YzMwYTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-11T19:42:27Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-19T20:20:58Z"}, "message": "Fix known-bug, silence ICE stderr", "tree": {"sha": "dec04641e4dc7d9bb70343ed94669663b75ffbbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec04641e4dc7d9bb70343ed94669663b75ffbbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eecdd10a2e145c1744592784de41a0d6e7c30a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eecdd10a2e145c1744592784de41a0d6e7c30a2", "html_url": "https://github.com/rust-lang/rust/commit/3eecdd10a2e145c1744592784de41a0d6e7c30a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eecdd10a2e145c1744592784de41a0d6e7c30a2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c83bd03a9d94af35c97a6b8b595d40e291af84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c83bd03a9d94af35c97a6b8b595d40e291af84a", "html_url": "https://github.com/rust-lang/rust/commit/4c83bd03a9d94af35c97a6b8b595d40e291af84a"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "3169e4781ee2e0c18ca968683971ef3b68e0b834", "filename": "tests/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -1,7 +1,7 @@\n-// check-fail\n-// known-bug\n+// edition:2021\n+// known-bug: unknown\n // unset-rustc-env:RUST_BACKTRACE\n-// compile-flags:-Z trait-solver=chalk --edition=2021\n+// compile-flags:-Z trait-solver=chalk\n // error-pattern:internal compiler error\n // failure-status:101\n // normalize-stderr-test \"DefId([^)]*)\" -> \"...\""}, {"sha": "50dd66da6dbb4505ef24919e204ad8ff24330980", "filename": "tests/ui/const-generics/issues/issue-85031-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.rs?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// known-bug\n+// known-bug: unknown\n \n // This should not compile, as the compiler should not know\n // `A - 0` is satisfied `?x - 0` if `?x` is inferred to `A`.\n@@ -10,7 +10,6 @@ pub struct Ref<'a>(&'a i32);\n \n impl<'a> Ref<'a> {\n     pub fn foo<const A: usize>() -> [(); A - 0] {\n-        //~^ WARN function cannot\n         Self::foo()\n     }\n }"}, {"sha": "896e1c7ea8dd663be2e440170f875f751e6bf677", "filename": "tests/ui/const-generics/issues/issue-85031-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-85031-2.stderr?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -3,7 +3,6 @@ warning: function cannot return without recursing\n    |\n LL |     pub fn foo<const A: usize>() -> [(); A - 0] {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n-LL |\n LL |         Self::foo()\n    |         ----------- recursive call site\n    |"}, {"sha": "5101de19d3cb6ea9ad3df085b6e27b5dc480f84b", "filename": "tests/ui/generic-associated-types/bugs/hrtb-implied-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.rs?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n \n // This gives us problems because `for<'a> I::Item<'a>: Debug` should mean \"for\n // all 'a where I::Item<'a> is WF\", but really means \"for all 'a possible\"\n@@ -29,7 +29,6 @@ where\n \n fn main() {\n     let slice = &mut ();\n-    //~^ temporary value dropped while borrowed\n     let windows = WindowsMut { slice };\n     print_items::<WindowsMut<'_>>(windows);\n }"}, {"sha": "362aeae23614fcf972a6887d860c037f38064ff8", "filename": "tests/ui/generic-associated-types/bugs/hrtb-implied-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -3,7 +3,7 @@ error[E0716]: temporary value dropped while borrowed\n    |\n LL |     let slice = &mut ();\n    |                      ^^ creates a temporary value which is freed while still in use\n-...\n+LL |     let windows = WindowsMut { slice };\n LL |     print_items::<WindowsMut<'_>>(windows);\n    |     -------------------------------------- argument requires that borrow lasts for `'static`\n LL | }"}, {"sha": "3174227a7a1e199a24fb633f6f14f417169a44c6", "filename": "tests/ui/generic-associated-types/bugs/hrtb-implied-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n \n // This gives us problems because `for<'a> I::Item<'a>: Debug` should mean \"for\n // all 'a where I::Item<'a> is WF\", but really means \"for all 'a possible\"\n@@ -16,7 +16,6 @@ where\n {\n     let mut iter2 = Eat(iter, f);\n     let _next = iter2.next();\n-    //~^ borrowed data escapes\n     true\n }\n impl<I: LendingIterator> LendingIterator for &mut I {"}, {"sha": "973c548d785edd8bf867d6f23620a594b79f5114", "filename": "tests/ui/generic-associated-types/bugs/issue-100013.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.rs?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n // edition: 2021\n \n // We really should accept this, but we need implied bounds between the regions\n@@ -13,24 +13,20 @@ pub trait FutureIterator {\n \n fn call<I: FutureIterator>() -> impl Send {\n     async { // a generator checked for autotrait impl `Send`\n-        //~^ lifetime bound not satisfied\n         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n         async {}.await; // a yield point\n     }\n }\n \n fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n     async { // a generator checked for autotrait impl `Send`\n-        //~^ lifetime bound not satisfied\n         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n-        //~^ lifetime may not live long enough\n         async {}.await; // a yield point\n     }\n }\n \n fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n     async { // a generator checked for autotrait impl `Send`\n-        //~^ lifetime bound not satisfied\n         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n         async {}.await; // a yield point\n     }"}, {"sha": "9db124a81e487185972de56ae66977fe0b203336", "filename": "tests/ui/generic-associated-types/bugs/issue-100013.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -2,77 +2,73 @@ error: lifetime bound not satisfied\n   --> $DIR/issue-100013.rs:15:5\n    |\n LL | /     async { // a generator checked for autotrait impl `Send`\n-LL | |\n LL | |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n note: the lifetime defined here...\n-  --> $DIR/issue-100013.rs:17:38\n+  --> $DIR/issue-100013.rs:16:38\n    |\n LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n    |                                      ^^\n note: ...must outlive the lifetime defined here\n-  --> $DIR/issue-100013.rs:17:34\n+  --> $DIR/issue-100013.rs:16:34\n    |\n LL |         let x = None::<I::Future<'_, '_>>; // a type referencing GAT\n    |                                  ^^\n    = note: this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)\n \n error: lifetime bound not satisfied\n-  --> $DIR/issue-100013.rs:23:5\n+  --> $DIR/issue-100013.rs:22:5\n    |\n LL | /     async { // a generator checked for autotrait impl `Send`\n-LL | |\n LL | |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n-LL | |\n LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n note: the lifetime defined here...\n-  --> $DIR/issue-100013.rs:22:14\n+  --> $DIR/issue-100013.rs:21:14\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |              ^^\n note: ...must outlive the lifetime defined here\n-  --> $DIR/issue-100013.rs:22:10\n+  --> $DIR/issue-100013.rs:21:10\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |          ^^\n    = note: this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-100013.rs:25:17\n+  --> $DIR/issue-100013.rs:23:17\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |          --  -- lifetime `'b` defined here\n    |          |\n    |          lifetime `'a` defined here\n-...\n+LL |     async { // a generator checked for autotrait impl `Send`\n LL |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime bound not satisfied\n-  --> $DIR/issue-100013.rs:32:5\n+  --> $DIR/issue-100013.rs:29:5\n    |\n LL | /     async { // a generator checked for autotrait impl `Send`\n-LL | |\n LL | |         let x = None::<I::Future<'a, 'b>>; // a type referencing GAT\n LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n note: the lifetime defined here...\n-  --> $DIR/issue-100013.rs:31:18\n+  --> $DIR/issue-100013.rs:28:18\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n    |                  ^^\n note: ...must outlive the lifetime defined here\n-  --> $DIR/issue-100013.rs:31:10\n+  --> $DIR/issue-100013.rs:28:10\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n    |          ^^"}, {"sha": "8f2cc45509ffcbd4bd1cfd4bf639d34ef33f7ca7", "filename": "tests/ui/generic-associated-types/bugs/issue-91762.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eecdd10a2e145c1744592784de41a0d6e7c30a2/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs?ref=3eecdd10a2e145c1744592784de41a0d6e7c30a2", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n \n // We almost certainly want this to pass, but\n // it's particularly difficult currently, because we need a way of specifying\n@@ -22,7 +22,6 @@ pub trait FunctorExt<T>: Sized {\n \n         arg = self;\n         ret = <Self::Base as Functor>::fmap(arg);\n-        //~^ type annotations needed\n     }\n }\n "}]}