{"sha": "dbcd82885f4730077fabd57340d7e297122bc596", "node_id": "C_kwDOAAsO6NoAKGRiY2Q4Mjg4NWY0NzMwMDc3ZmFiZDU3MzQwZDdlMjk3MTIyYmM1OTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-11T18:56:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-11T18:56:21Z"}, "message": "Auto merge of #8624 - pitaj:is_digit_ascii_radix, r=xFrednet\n\nNew lint `is_digit_ascii_radix`\n\nCloses #6399\n\nchangelog: Added [`is_digit_ascii_radix`]: recommend `is_ascii_digit()` or `is_ascii_hexdigit()` in place of `is_digit(10)` and `is_digit(16)`", "tree": {"sha": "b1c7f8d5e3ee2fa27aa6aff6dc1b931863457dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c7f8d5e3ee2fa27aa6aff6dc1b931863457dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbcd82885f4730077fabd57340d7e297122bc596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbcd82885f4730077fabd57340d7e297122bc596", "html_url": "https://github.com/rust-lang/rust/commit/dbcd82885f4730077fabd57340d7e297122bc596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbcd82885f4730077fabd57340d7e297122bc596/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "636ed84c815e1fa86a4ee7764d52d43615af6742", "url": "https://api.github.com/repos/rust-lang/rust/commits/636ed84c815e1fa86a4ee7764d52d43615af6742", "html_url": "https://github.com/rust-lang/rust/commit/636ed84c815e1fa86a4ee7764d52d43615af6742"}, {"sha": "06cfeb90c156d70c2318774081b37db809f6d840", "url": "https://api.github.com/repos/rust-lang/rust/commits/06cfeb90c156d70c2318774081b37db809f6d840", "html_url": "https://github.com/rust-lang/rust/commit/06cfeb90c156d70c2318774081b37db809f6d840"}], "stats": {"total": 174, "additions": 160, "deletions": 14}, "files": [{"sha": "858547c84c185c5e224f383a4dbec2d7b79471b2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -3356,6 +3356,7 @@ Released 2018-09-13\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n [`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n+[`is_digit_ascii_radix`]: https://rust-lang.github.io/rust-clippy/master/index.html#is_digit_ascii_radix\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count"}, {"sha": "e3e31c5863edfb21409005971f2c43020fae82a7", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -43,8 +43,8 @@ fn check_case_sensitive_file_extension_comparison(ctx: &LateContext<'_>, expr: &\n         if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = extension.kind;\n         if (2..=6).contains(&ext_literal.as_str().len());\n         if ext_literal.as_str().starts_with('.');\n-        if ext_literal.as_str().chars().skip(1).all(|c| c.is_uppercase() || c.is_digit(10))\n-            || ext_literal.as_str().chars().skip(1).all(|c| c.is_lowercase() || c.is_digit(10));\n+        if ext_literal.as_str().chars().skip(1).all(|c| c.is_uppercase() || c.is_ascii_digit())\n+            || ext_literal.as_str().chars().skip(1).all(|c| c.is_lowercase() || c.is_ascii_digit());\n         then {\n             let mut ty = ctx.typeck_results().expr_ty(obj);\n             ty = match ty.kind() {"}, {"sha": "e72031e48778f366cfb8639f831c0f0b6e59ed40", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -739,7 +739,7 @@ fn check_word(cx: &LateContext<'_>, word: &str, span: Span) {\n     /// letters (`Clippy` is ok) and one lower-case letter (`NASA` is ok).\n     /// Plurals are also excluded (`IDs` is ok).\n     fn is_camel_case(s: &str) -> bool {\n-        if s.starts_with(|c: char| c.is_digit(10)) {\n+        if s.starts_with(|c: char| c.is_ascii_digit()) {\n             return false;\n         }\n "}, {"sha": "52c440de9dd4343ad2ae45df9b32e84920f41123", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -165,6 +165,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::FLAT_MAP_IDENTITY),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::INTO_ITER_ON_REF),\n+    LintId::of(methods::IS_DIGIT_ASCII_RADIX),\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n     LintId::of(methods::ITER_CLONED_COLLECT),\n     LintId::of(methods::ITER_COUNT),"}, {"sha": "cfaa6871b50b1578337726eee30af74acc7323cb", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -302,6 +302,7 @@ store.register_lints(&[\n     methods::INEFFICIENT_TO_STRING,\n     methods::INSPECT_FOR_EACH,\n     methods::INTO_ITER_ON_REF,\n+    methods::IS_DIGIT_ASCII_RADIX,\n     methods::ITERATOR_STEP_BY_ZERO,\n     methods::ITER_CLONED_COLLECT,\n     methods::ITER_COUNT,"}, {"sha": "d6e4390fde1b6dac563f58d7b6d23b7715f1b7db", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -61,6 +61,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(methods::CHARS_NEXT_CMP),\n     LintId::of(methods::ERR_EXPECT),\n     LintId::of(methods::INTO_ITER_ON_REF),\n+    LintId::of(methods::IS_DIGIT_ASCII_RADIX),\n     LintId::of(methods::ITER_CLONED_COLLECT),\n     LintId::of(methods::ITER_NEXT_SLICE),\n     LintId::of(methods::ITER_NTH_ZERO),"}, {"sha": "ad333df2f2d5d7f24f33b85050a3a021a4729333", "filename": "clippy_lints/src/methods/is_digit_ascii_radix.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -0,0 +1,50 @@\n+//! Lint for `c.is_digit(10)`\n+\n+use super::IS_DIGIT_ASCII_RADIX;\n+use clippy_utils::{\n+    consts::constant_full_int, consts::FullInt, diagnostics::span_lint_and_sugg, meets_msrv, msrvs,\n+    source::snippet_with_applicability,\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_semver::RustcVersion;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    self_arg: &'tcx Expr<'_>,\n+    radix: &'tcx Expr<'_>,\n+    msrv: Option<&RustcVersion>,\n+) {\n+    if !meets_msrv(msrv, &msrvs::IS_ASCII_DIGIT) {\n+        return;\n+    }\n+\n+    if !cx.typeck_results().expr_ty_adjusted(self_arg).peel_refs().is_char() {\n+        return;\n+    }\n+\n+    if let Some(radix_val) = constant_full_int(cx, cx.typeck_results(), radix) {\n+        let (num, replacement) = match radix_val {\n+            FullInt::S(10) | FullInt::U(10) => (10, \"is_ascii_digit\"),\n+            FullInt::S(16) | FullInt::U(16) => (16, \"is_ascii_hexdigit\"),\n+            _ => return,\n+        };\n+        let mut applicability = Applicability::MachineApplicable;\n+\n+        span_lint_and_sugg(\n+            cx,\n+            IS_DIGIT_ASCII_RADIX,\n+            expr.span,\n+            &format!(\"use of `char::is_digit` with literal radix of {}\", num),\n+            \"try\",\n+            format!(\n+                \"{}.{}()\",\n+                snippet_with_applicability(cx, self_arg.span, \"..\", &mut applicability),\n+                replacement\n+            ),\n+            applicability,\n+        );\n+    }\n+}"}, {"sha": "82f4769a69977f172b28e1b37b2a78099eed4aa7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -26,6 +26,7 @@ mod implicit_clone;\n mod inefficient_to_string;\n mod inspect_for_each;\n mod into_iter_on_ref;\n+mod is_digit_ascii_radix;\n mod iter_cloned_collect;\n mod iter_count;\n mod iter_next_slice;\n@@ -2131,6 +2132,36 @@ declare_clippy_lint! {\n     \"no-op use of `deref` or `deref_mut` method to `Option`.\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Finds usages of [`char::is_digit`]\n+    /// (https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_digit) that\n+    /// can be replaced with [`is_ascii_digit`]\n+    /// (https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_digit) or\n+    /// [`is_ascii_hexdigit`]\n+    /// (https://doc.rust-lang.org/stable/std/primitive.char.html#method.is_ascii_hexdigit).\n+    ///\n+    /// ### Why is this bad?\n+    /// `is_digit(..)` is slower and requires specifying the radix.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let c: char = '6';\n+    /// c.is_digit(10);\n+    /// c.is_digit(16);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let c: char = '6';\n+    /// c.is_ascii_digit();\n+    /// c.is_ascii_hexdigit();\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub IS_DIGIT_ASCII_RADIX,\n+    style,\n+    \"use of `char::is_digit(..)` with literal radix of 10 or 16\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2219,6 +2250,7 @@ impl_lint_pass!(Methods => [\n     UNNECESSARY_JOIN,\n     ERR_EXPECT,\n     NEEDLESS_OPTION_AS_DEREF,\n+    IS_DIGIT_ASCII_RADIX,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2516,6 +2548,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             },\n             (\"get_or_insert_with\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"get_or_insert\"),\n             (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n+            (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, msrv),\n             (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n             (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n             (\"join\", [join_arg]) => {"}, {"sha": "6860b60acbdb4612e144604db5ddd53b146e5b46", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -361,7 +361,7 @@ impl MiscEarlyLints {\n         // See <https://github.com/rust-lang/rust-clippy/issues/4507> for a regression.\n         // FIXME: Find a better way to detect those cases.\n         let lit_snip = match snippet_opt(cx, lit.span) {\n-            Some(snip) if snip.chars().next().map_or(false, |c| c.is_digit(10)) => snip,\n+            Some(snip) if snip.chars().next().map_or(false, |c| c.is_ascii_digit()) => snip,\n             _ => return,\n         };\n "}, {"sha": "e3bc40c4b49148962fe3cf94d316c42de3e7220f", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -197,7 +197,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         if interned_name.chars().any(char::is_uppercase) {\n             return;\n         }\n-        if interned_name.chars().all(|c| c.is_digit(10) || c == '_') {\n+        if interned_name.chars().all(|c| c.is_ascii_digit() || c == '_') {\n             span_lint(\n                 self.0.cx,\n                 JUST_UNDERSCORES_AND_DIGITS,"}, {"sha": "134fd1ce505a092b22022b6c840a8d722cffc2e7", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -32,4 +32,5 @@ msrv_aliases! {\n     1,28,0 { FROM_BOOL }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n+    1,24,0 { IS_ASCII_DIGIT }\n }"}, {"sha": "b92d42e83232ce27501f77e0e904dbe301eca758", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -57,7 +57,7 @@ impl<'a> NumericLiteral<'a> {\n                 .trim_start()\n                 .chars()\n                 .next()\n-                .map_or(false, |c| c.is_digit(10))\n+                .map_or(false, |c| c.is_ascii_digit())\n         {\n             let (unsuffixed, suffix) = split_suffix(src, lit_kind);\n             let float = matches!(lit_kind, LitKind::Float(..));"}, {"sha": "c0ba647d707918cbef380c7d9a0cbb7fe02e83d0", "filename": "tests/ui/is_digit_ascii_radix.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fis_digit_ascii_radix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fis_digit_ascii_radix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_digit_ascii_radix.fixed?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+#![warn(clippy::is_digit_ascii_radix)]\n+\n+const TEN: u32 = 10;\n+\n+fn main() {\n+    let c: char = '6';\n+\n+    // Should trigger the lint.\n+    let _ = c.is_ascii_digit();\n+    let _ = c.is_ascii_hexdigit();\n+    let _ = c.is_ascii_hexdigit();\n+\n+    // Should not trigger the lint.\n+    let _ = c.is_digit(11);\n+    let _ = c.is_digit(TEN);\n+}"}, {"sha": "68e3f3243d96dabb8f47af2cd321a3ad04d66989", "filename": "tests/ui/is_digit_ascii_radix.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_digit_ascii_radix.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+#![warn(clippy::is_digit_ascii_radix)]\n+\n+const TEN: u32 = 10;\n+\n+fn main() {\n+    let c: char = '6';\n+\n+    // Should trigger the lint.\n+    let _ = c.is_digit(10);\n+    let _ = c.is_digit(16);\n+    let _ = c.is_digit(0x10);\n+\n+    // Should not trigger the lint.\n+    let _ = c.is_digit(11);\n+    let _ = c.is_digit(TEN);\n+}"}, {"sha": "dc5cb2913ae151c463aba06fb78cf21da04b3914", "filename": "tests/ui/is_digit_ascii_radix.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fis_digit_ascii_radix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fis_digit_ascii_radix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_digit_ascii_radix.stderr?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -0,0 +1,22 @@\n+error: use of `char::is_digit` with literal radix of 10\n+  --> $DIR/is_digit_ascii_radix.rs:11:13\n+   |\n+LL |     let _ = c.is_digit(10);\n+   |             ^^^^^^^^^^^^^^ help: try: `c.is_ascii_digit()`\n+   |\n+   = note: `-D clippy::is-digit-ascii-radix` implied by `-D warnings`\n+\n+error: use of `char::is_digit` with literal radix of 16\n+  --> $DIR/is_digit_ascii_radix.rs:12:13\n+   |\n+LL |     let _ = c.is_digit(16);\n+   |             ^^^^^^^^^^^^^^ help: try: `c.is_ascii_hexdigit()`\n+\n+error: use of `char::is_digit` with literal radix of 16\n+  --> $DIR/is_digit_ascii_radix.rs:13:13\n+   |\n+LL |     let _ = c.is_digit(0x10);\n+   |             ^^^^^^^^^^^^^^^^ help: try: `c.is_ascii_hexdigit()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3c5e9642714657676c3a950ca78c4ac51af3e687", "filename": "tests/ui/to_digit_is_some.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fto_digit_is_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fto_digit_is_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_digit_is_some.fixed?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let c = 'x';\n     let d = &c;\n \n-    let _ = d.is_digit(10);\n-    let _ = char::is_digit(c, 10);\n+    let _ = d.is_digit(8);\n+    let _ = char::is_digit(c, 8);\n }"}, {"sha": "4f247c06ceedaba747c89d5ff4b602e55c5653cb", "filename": "tests/ui/to_digit_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_digit_is_some.rs?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let c = 'x';\n     let d = &c;\n \n-    let _ = d.to_digit(10).is_some();\n-    let _ = char::to_digit(c, 10).is_some();\n+    let _ = d.to_digit(8).is_some();\n+    let _ = char::to_digit(c, 8).is_some();\n }"}, {"sha": "10a1b393a3906fced44d5ec028e9e9666282312c", "filename": "tests/ui/to_digit_is_some.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fto_digit_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbcd82885f4730077fabd57340d7e297122bc596/tests%2Fui%2Fto_digit_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_digit_is_some.stderr?ref=dbcd82885f4730077fabd57340d7e297122bc596", "patch": "@@ -1,16 +1,16 @@\n error: use of `.to_digit(..).is_some()`\n   --> $DIR/to_digit_is_some.rs:9:13\n    |\n-LL |     let _ = d.to_digit(10).is_some();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `d.is_digit(10)`\n+LL |     let _ = d.to_digit(8).is_some();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `d.is_digit(8)`\n    |\n    = note: `-D clippy::to-digit-is-some` implied by `-D warnings`\n \n error: use of `.to_digit(..).is_some()`\n   --> $DIR/to_digit_is_some.rs:10:13\n    |\n-LL |     let _ = char::to_digit(c, 10).is_some();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `char::is_digit(c, 10)`\n+LL |     let _ = char::to_digit(c, 8).is_some();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `char::is_digit(c, 8)`\n \n error: aborting due to 2 previous errors\n "}]}