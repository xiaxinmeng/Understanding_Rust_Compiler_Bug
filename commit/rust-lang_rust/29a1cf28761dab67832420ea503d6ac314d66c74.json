{"sha": "29a1cf28761dab67832420ea503d6ac314d66c74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YTFjZjI4NzYxZGFiNjc4MzI0MjBlYTUwM2Q2YWMzMTRkNjZjNzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T11:36:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-11T11:36:07Z"}, "message": "Rollup merge of #67930 - lzutao:result-as_deref, r=dtolnay\n\nRename Result::as_deref_ok to as_deref\n\nAddresses https://github.com/rust-lang/rust/issues/50264#issuecomment-533952247\nr? @dtolnay", "tree": {"sha": "a18022c4811df8e8c62b89e9ce9d4637e190e31c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a18022c4811df8e8c62b89e9ce9d4637e190e31c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a1cf28761dab67832420ea503d6ac314d66c74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGbMnCRBK7hj4Ov3rIwAAdHIIAD618aRiZIW/ilp6lHbRKgAS\nFT72JOiJWjE4bxVVtT69X7smSb/JeTmJkEgscJU+K6p0bgDEmHRAFPOCY+Z4vXjZ\nfAucS95XYnMVVmondPbYVZ0/CwmTwNDHrOwpU5YVNzDyOuZRXtP5R6iHSX6NmKBt\nDRtDUx9eH+HW3rOOJU4J5VK8DNaQvXy/vg079HbtuZlkqQz5uioROIi8t2/e7kcQ\nQNJbEJ1i/+J482NjtrW3x7ucDpAQDH0LT9Ttrhw/eEARmyhYBODod0qZS8STNlzU\n+7vDuinJLZQnkGjPhv9d5H0iipf9ti8yP+5Y9DWFAE242+5vKZ8nJ253ahPeCjo=\n=nROg\n-----END PGP SIGNATURE-----\n", "payload": "tree a18022c4811df8e8c62b89e9ce9d4637e190e31c\nparent 7b741fb68e506cc432c1859d8c4fa4a3936f0f41\nparent c2c2d3b32bcdffaba36a3b67915f3f2267553595\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578742567 +0100\ncommitter GitHub <noreply@github.com> 1578742567 +0100\n\nRollup merge of #67930 - lzutao:result-as_deref, r=dtolnay\n\nRename Result::as_deref_ok to as_deref\n\nAddresses https://github.com/rust-lang/rust/issues/50264#issuecomment-533952247\nr? @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a1cf28761dab67832420ea503d6ac314d66c74", "html_url": "https://github.com/rust-lang/rust/commit/29a1cf28761dab67832420ea503d6ac314d66c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a1cf28761dab67832420ea503d6ac314d66c74/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b741fb68e506cc432c1859d8c4fa4a3936f0f41", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b741fb68e506cc432c1859d8c4fa4a3936f0f41", "html_url": "https://github.com/rust-lang/rust/commit/7b741fb68e506cc432c1859d8c4fa4a3936f0f41"}, {"sha": "c2c2d3b32bcdffaba36a3b67915f3f2267553595", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c2d3b32bcdffaba36a3b67915f3f2267553595", "html_url": "https://github.com/rust-lang/rust/commit/c2c2d3b32bcdffaba36a3b67915f3f2267553595"}], "stats": {"total": 152, "additions": 31, "deletions": 121}, "files": [{"sha": "c657ce33f60adccb380b82001affb7dfd59606ae", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=29a1cf28761dab67832420ea503d6ac314d66c74", "patch": "@@ -1136,7 +1136,7 @@ impl<T: Deref, E> Result<T, E> {\n     ///\n     /// Leaves the original `Result` in-place, creating a new one containing a reference to the\n     /// `Ok` type's `Deref::Target` type.\n-    pub fn as_deref_ok(&self) -> Result<&T::Target, &E> {\n+    pub fn as_deref(&self) -> Result<&T::Target, &E> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n@@ -1152,24 +1152,13 @@ impl<T, E: Deref> Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n-impl<T: Deref, E: Deref> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E::Target>`.\n-    ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a reference to both\n-    /// the `Ok` and `Err` types' `Deref::Target` types.\n-    pub fn as_deref(&self) -> Result<&T::Target, &E::Target> {\n-        self.as_ref().map(|t| t.deref()).map_err(|e| e.deref())\n-    }\n-}\n-\n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: DerefMut, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T::Target, &mut E>`.\n     ///\n     /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n     /// the `Ok` type's `Deref::Target` type.\n-    pub fn as_deref_mut_ok(&mut self) -> Result<&mut T::Target, &mut E> {\n+    pub fn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E> {\n         self.as_mut().map(|t| t.deref_mut())\n     }\n }\n@@ -1185,18 +1174,6 @@ impl<T, E: DerefMut> Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n-impl<T: DerefMut, E: DerefMut> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to\n-    /// `Result<&mut T::Target, &mut E::Target>`.\n-    ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n-    /// both the `Ok` and `Err` types' `Deref::Target` types.\n-    pub fn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E::Target> {\n-        self.as_mut().map(|t| t.deref_mut()).map_err(|e| e.deref_mut())\n-    }\n-}\n-\n impl<T, E> Result<Option<T>, E> {\n     /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n     ///"}, {"sha": "c835313aae7037cd59860781dee296bc37fc3149", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 27, "deletions": 58, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=29a1cf28761dab67832420ea503d6ac314d66c74", "patch": "@@ -236,31 +236,17 @@ fn test_try() {\n \n #[test]\n fn test_result_as_deref() {\n-    // &Result<T: Deref, E>::Ok(T).as_deref_ok() ->\n+    // &Result<T: Deref, E>::Ok(T).as_deref() ->\n     //      Result<&T::Deref::Target, &E>::Ok(&*T)\n     let ref_ok = &Result::Ok::<&i32, u8>(&42);\n     let expected_result = Result::Ok::<&i32, &u8>(&42);\n-    assert_eq!(ref_ok.as_deref_ok(), expected_result);\n-\n-    let ref_ok = &Result::Ok::<String, u32>(String::from(\"a result\"));\n-    let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n-    assert_eq!(ref_ok.as_deref_ok(), expected_result);\n-\n-    let ref_ok = &Result::Ok::<Vec<i32>, u32>(vec![1, 2, 3, 4, 5]);\n-    let expected_result = Result::Ok::<&[i32], &u32>([1, 2, 3, 4, 5].as_slice());\n-    assert_eq!(ref_ok.as_deref_ok(), expected_result);\n-\n-    // &Result<T: Deref, E: Deref>::Ok(T).as_deref() ->\n-    //      Result<&T::Deref::Target, &E::Deref::Target>::Ok(&*T)\n-    let ref_ok = &Result::Ok::<&i32, &u8>(&42);\n-    let expected_result = Result::Ok::<&i32, &u8>(&42);\n     assert_eq!(ref_ok.as_deref(), expected_result);\n \n-    let ref_ok = &Result::Ok::<String, &u32>(String::from(\"a result\"));\n+    let ref_ok = &Result::Ok::<String, u32>(String::from(\"a result\"));\n     let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n     assert_eq!(ref_ok.as_deref(), expected_result);\n \n-    let ref_ok = &Result::Ok::<Vec<i32>, &u32>(vec![1, 2, 3, 4, 5]);\n+    let ref_ok = &Result::Ok::<Vec<i32>, u32>(vec![1, 2, 3, 4, 5]);\n     let expected_result = Result::Ok::<&[i32], &u32>([1, 2, 3, 4, 5].as_slice());\n     assert_eq!(ref_ok.as_deref(), expected_result);\n \n@@ -281,19 +267,21 @@ fn test_result_as_deref() {\n     // &Result<T: Deref, E: Deref>::Err(T).as_deref_err() ->\n     //      Result<&T, &E::Deref::Target>::Err(&*E)\n     let ref_err = &Result::Err::<&u8, &i32>(&41);\n-    let expected_result = Result::Err::<&u8, &i32>(&41);\n+    let expected_result = Result::Err::<&u8, &&i32>(&&41);\n     assert_eq!(ref_err.as_deref(), expected_result);\n \n-    let ref_err = &Result::Err::<&u32, String>(String::from(\"an error\"));\n-    let expected_result = Result::Err::<&u32, &str>(\"an error\");\n+    let s = String::from(\"an error\");\n+    let ref_err = &Result::Err::<&u32, String>(s.clone());\n+    let expected_result = Result::Err::<&u32, &String>(&s);\n     assert_eq!(ref_err.as_deref(), expected_result);\n \n-    let ref_err = &Result::Err::<&u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n-    let expected_result = Result::Err::<&u32, &[i32]>([5, 4, 3, 2, 1].as_slice());\n+    let v = vec![5, 4, 3, 2, 1];\n+    let ref_err = &Result::Err::<&u32, Vec<i32>>(v.clone());\n+    let expected_result = Result::Err::<&u32, &Vec<i32>>(&v);\n     assert_eq!(ref_err.as_deref(), expected_result);\n \n     // The following cases test calling `as_deref_*` with the wrong variant (i.e.\n-    // `as_deref_ok()` with a `Result::Err()`, or `as_deref_err()` with a `Result::Ok()`.\n+    // `as_deref()` with a `Result::Err()`, or `as_deref_err()` with a `Result::Ok()`.\n     // While uncommon, these cases are supported to ensure that an `as_deref_*`\n     // call can still be made even when one of the Result types does not implement\n     // `Deref` (for example, std::io::Error).\n@@ -312,56 +300,38 @@ fn test_result_as_deref() {\n     let expected_result = Result::Ok::<&[i32; 5], &u32>(&[1, 2, 3, 4, 5]);\n     assert_eq!(ref_ok.as_deref_err(), expected_result);\n \n-    // &Result<T: Deref, E>::Err(E).as_deref_ok() ->\n+    // &Result<T: Deref, E>::Err(E).as_deref() ->\n     //      Result<&T::Deref::Target, &E>::Err(&E)\n     let ref_err = &Result::Err::<&u8, i32>(41);\n     let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.as_deref_ok(), expected_result);\n+    assert_eq!(ref_err.as_deref(), expected_result);\n \n     let ref_err = &Result::Err::<&u32, &str>(\"an error\");\n     let expected_result = Result::Err::<&u32, &&str>(&\"an error\");\n-    assert_eq!(ref_err.as_deref_ok(), expected_result);\n+    assert_eq!(ref_err.as_deref(), expected_result);\n \n     let ref_err = &Result::Err::<&u32, [i32; 5]>([5, 4, 3, 2, 1]);\n     let expected_result = Result::Err::<&u32, &[i32; 5]>(&[5, 4, 3, 2, 1]);\n-    assert_eq!(ref_err.as_deref_ok(), expected_result);\n+    assert_eq!(ref_err.as_deref(), expected_result);\n }\n \n #[test]\n fn test_result_as_deref_mut() {\n-    // &mut Result<T: Deref, E>::Ok(T).as_deref_mut_ok() ->\n+    // &mut Result<T: Deref, E>::Ok(T).as_deref_mut() ->\n     //      Result<&mut T::Deref::Target, &mut E>::Ok(&mut *T)\n     let mut val = 42;\n     let mut expected_val = 42;\n     let mut_ok = &mut Result::Ok::<&mut i32, u8>(&mut val);\n     let expected_result = Result::Ok::<&mut i32, &mut u8>(&mut expected_val);\n-    assert_eq!(mut_ok.as_deref_mut_ok(), expected_result);\n-\n-    let mut expected_string = String::from(\"a result\");\n-    let mut_ok = &mut Result::Ok::<String, u32>(expected_string.clone());\n-    let expected_result = Result::Ok::<&mut str, &mut u32>(expected_string.deref_mut());\n-    assert_eq!(mut_ok.as_deref_mut_ok(), expected_result);\n-\n-    let mut expected_vec = vec![1, 2, 3, 4, 5];\n-    let mut_ok = &mut Result::Ok::<Vec<i32>, u32>(expected_vec.clone());\n-    let expected_result = Result::Ok::<&mut [i32], &mut u32>(expected_vec.as_mut_slice());\n-    assert_eq!(mut_ok.as_deref_mut_ok(), expected_result);\n-\n-    // &mut Result<T: Deref, E: Deref>::Ok(T).as_deref_mut() ->\n-    //      Result<&mut T::Deref::Target, &mut E::Deref::Target>::Ok(&mut *T)\n-    let mut val = 42;\n-    let mut expected_val = 42;\n-    let mut_ok = &mut Result::Ok::<&mut i32, &mut u8>(&mut val);\n-    let expected_result = Result::Ok::<&mut i32, &mut u8>(&mut expected_val);\n     assert_eq!(mut_ok.as_deref_mut(), expected_result);\n \n     let mut expected_string = String::from(\"a result\");\n-    let mut_ok = &mut Result::Ok::<String, &mut u32>(expected_string.clone());\n+    let mut_ok = &mut Result::Ok::<String, u32>(expected_string.clone());\n     let expected_result = Result::Ok::<&mut str, &mut u32>(expected_string.deref_mut());\n     assert_eq!(mut_ok.as_deref_mut(), expected_result);\n \n     let mut expected_vec = vec![1, 2, 3, 4, 5];\n-    let mut_ok = &mut Result::Ok::<Vec<i32>, &mut u32>(expected_vec.clone());\n+    let mut_ok = &mut Result::Ok::<Vec<i32>, u32>(expected_vec.clone());\n     let expected_result = Result::Ok::<&mut [i32], &mut u32>(expected_vec.as_mut_slice());\n     assert_eq!(mut_ok.as_deref_mut(), expected_result);\n \n@@ -386,23 +356,22 @@ fn test_result_as_deref_mut() {\n     // &mut Result<T: Deref, E: Deref>::Err(T).as_deref_mut_err() ->\n     //      Result<&mut T, &mut E::Deref::Target>::Err(&mut *E)\n     let mut val = 41;\n-    let mut expected_val = 41;\n-    let mut_err = &mut Result::Err::<&mut u8, &mut i32>(&mut val);\n-    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n+    let mut_err = &mut Result::Err::<&mut u8, i32>(val);\n+    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut val);\n     assert_eq!(mut_err.as_deref_mut(), expected_result);\n \n     let mut expected_string = String::from(\"an error\");\n     let mut_err = &mut Result::Err::<&mut u32, String>(expected_string.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut str>(expected_string.as_mut_str());\n+    let expected_result = Result::Err::<&mut u32, &mut String>(&mut expected_string);\n     assert_eq!(mut_err.as_deref_mut(), expected_result);\n \n     let mut expected_vec = vec![5, 4, 3, 2, 1];\n     let mut_err = &mut Result::Err::<&mut u32, Vec<i32>>(expected_vec.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut [i32]>(expected_vec.as_mut_slice());\n+    let expected_result = Result::Err::<&mut u32, &mut Vec<i32>>(&mut expected_vec);\n     assert_eq!(mut_err.as_deref_mut(), expected_result);\n \n     // The following cases test calling `as_deref_mut_*` with the wrong variant (i.e.\n-    // `as_deref_mut_ok()` with a `Result::Err()`, or `as_deref_mut_err()` with a `Result::Ok()`.\n+    // `as_deref_mut()` with a `Result::Err()`, or `as_deref_mut_err()` with a `Result::Ok()`.\n     // While uncommon, these cases are supported to ensure that an `as_deref_mut_*`\n     // call can still be made even when one of the Result types does not implement\n     // `Deref` (for example, std::io::Error).\n@@ -426,22 +395,22 @@ fn test_result_as_deref_mut() {\n     let expected_result = Result::Ok::<&mut [i32; 5], &mut u32>(&mut expected_arr);\n     assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n \n-    // &mut Result<T: Deref, E>::Err(E).as_deref_mut_ok() ->\n+    // &mut Result<T: Deref, E>::Err(E).as_deref_mut() ->\n     //      Result<&mut T::Deref::Target, &mut E>::Err(&mut E)\n     let mut expected_val = 41;\n     let mut_err = &mut Result::Err::<&mut u8, i32>(expected_val.clone());\n     let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n-    assert_eq!(mut_err.as_deref_mut_ok(), expected_result);\n+    assert_eq!(mut_err.as_deref_mut(), expected_result);\n \n     let string = String::from(\"an error\");\n     let expected_string = string.clone();\n     let mut ref_str = expected_string.as_ref();\n     let mut_err = &mut Result::Err::<&mut u32, &str>(string.as_str());\n     let expected_result = Result::Err::<&mut u32, &mut &str>(&mut ref_str);\n-    assert_eq!(mut_err.as_deref_mut_ok(), expected_result);\n+    assert_eq!(mut_err.as_deref_mut(), expected_result);\n \n     let mut expected_arr = [5, 4, 3, 2, 1];\n     let mut_err = &mut Result::Err::<&mut u32, [i32; 5]>(expected_arr.clone());\n     let expected_result = Result::Err::<&mut u32, &mut [i32; 5]>(&mut expected_arr);\n-    assert_eq!(mut_err.as_deref_mut_ok(), expected_result);\n+    assert_eq!(mut_err.as_deref_mut(), expected_result);\n }"}, {"sha": "1d98361c46198f2640dc9718a85ee03972a83c42", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr?ref=29a1cf28761dab67832420ea503d6ac314d66c74", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `as_deref_err` found for enum `std::result::Result\n   --> $DIR/result-as_deref_err.rs:4:28\n    |\n LL |     let _result = &Err(41).as_deref_err();\n-   |                            ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_ok`\n+   |                            ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_err` exists but the following trait bounds were not satisfied:\n            `{integer} : std::ops::Deref`"}, {"sha": "950a050ea9f81aa93fe11e6a1a7882e5b8a19950", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29a1cf28761dab67832420ea503d6ac314d66c74/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr?ref=29a1cf28761dab67832420ea503d6ac314d66c74", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no method named `as_deref_mut_err` found for enum `std::result::Re\n   --> $DIR/result-as_deref_mut_err.rs:4:32\n    |\n LL |     let _result = &mut Err(41).as_deref_mut_err();\n-   |                                ^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut_ok`\n+   |                                ^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_mut_err` exists but the following trait bounds were not satisfied:\n            `{integer} : std::ops::DerefMut`"}, {"sha": "54b695a0865f120546bfc199edaf281dc8aa3281", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_ok.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.rs?ref=7b741fb68e506cc432c1859d8c4fa4a3936f0f41", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &mut Ok(42).as_deref_mut_ok();\n-//~^ ERROR no method named `as_deref_mut_ok` found\n-}"}, {"sha": "af8d657999cb0d8c0c97ae2751657733e1a1f828", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_ok.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr?ref=7b741fb68e506cc432c1859d8c4fa4a3936f0f41", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `as_deref_mut_ok` found for enum `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result-as_deref_mut_ok.rs:4:31\n-   |\n-LL |     let _result = &mut Ok(42).as_deref_mut_ok();\n-   |                               ^^^^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut_err`\n-   |\n-   = note: the method `as_deref_mut_ok` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::DerefMut`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "ebb0500e8190fdc9309291450952d3496a2dbb83", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_ok.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.rs?ref=7b741fb68e506cc432c1859d8c4fa4a3936f0f41", "patch": "@@ -1,6 +0,0 @@\n-#![feature(inner_deref)]\n-\n-fn main() {\n-    let _result = &Ok(42).as_deref_ok();\n-//~^ ERROR no method named `as_deref_ok` found\n-}"}, {"sha": "145e610d52c7c527a03f2f73ad1430563426abaa", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_ok.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b741fb68e506cc432c1859d8c4fa4a3936f0f41/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr?ref=7b741fb68e506cc432c1859d8c4fa4a3936f0f41", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `as_deref_ok` found for enum `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result-as_deref_ok.rs:4:27\n-   |\n-LL |     let _result = &Ok(42).as_deref_ok();\n-   |                           ^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_err`\n-   |\n-   = note: the method `as_deref_ok` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}]}