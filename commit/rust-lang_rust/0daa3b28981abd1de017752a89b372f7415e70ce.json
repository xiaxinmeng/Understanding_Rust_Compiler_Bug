{"sha": "0daa3b28981abd1de017752a89b372f7415e70ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYWEzYjI4OTgxYWJkMWRlMDE3NzUyYTg5YjM3MmY3NDE1ZTcwY2U=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-12T08:14:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-12T08:14:41Z"}, "message": "Merge pull request #99 from oli-obk/travis\n\nvarious travis cleanups + run miri tests on travis against 4 major targets", "tree": {"sha": "c024e5d01ddd05d7acf8cad479705e36c955f213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c024e5d01ddd05d7acf8cad479705e36c955f213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0daa3b28981abd1de017752a89b372f7415e70ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0daa3b28981abd1de017752a89b372f7415e70ce", "html_url": "https://github.com/rust-lang/rust/commit/0daa3b28981abd1de017752a89b372f7415e70ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0daa3b28981abd1de017752a89b372f7415e70ce/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b983862ee883048c4195f550d93d2348968e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b983862ee883048c4195f550d93d2348968e2f", "html_url": "https://github.com/rust-lang/rust/commit/57b983862ee883048c4195f550d93d2348968e2f"}, {"sha": "3ee34381b63a55837cb6c3834b969a281da6877c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee34381b63a55837cb6c3834b969a281da6877c", "html_url": "https://github.com/rust-lang/rust/commit/3ee34381b63a55837cb6c3834b969a281da6877c"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "91e6255f33ccfd46e4e291d7360d48ac3ffaed8f", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0daa3b28981abd1de017752a89b372f7415e70ce/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0daa3b28981abd1de017752a89b372f7415e70ce/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=0daa3b28981abd1de017752a89b372f7415e70ce", "patch": "@@ -5,6 +5,9 @@ before_script:\n - |\n   pip install 'travis-cargo<0.2' --user &&\n   export PATH=$HOME/.local/bin:$PATH\n+- sh ~/rust-installer/rustup.sh --add-target=i686-unknown-linux-gnu --prefix=/home/travis/rust -y --disable-sudo\n+- sh ~/rust-installer/rustup.sh --add-target=i686-pc-windows-gnu --prefix=/home/travis/rust -y --disable-sudo\n+- sh ~/rust-installer/rustup.sh --add-target=i686-pc-windows-msvc --prefix=/home/travis/rust -y --disable-sudo\n script:\n - |\n   env RUST_SYSROOT=$HOME/rust travis-cargo build &&"}, {"sha": "56c2e433d0671f6d93bd04c8de203ada18fb0113", "filename": "src/bin/miri.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0daa3b28981abd1de017752a89b372f7415e70ce/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0daa3b28981abd1de017752a89b372f7415e70ce/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=0daa3b28981abd1de017752a89b372f7415e70ce", "patch": "@@ -21,7 +21,10 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let mut control = CompileController::basic();\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n-        control.after_analysis.stop = Compilation::Stop;\n+        if std::env::var(\"MIRI_HOST_TARGET\") != Ok(\"yes\".to_owned()) {\n+            // only fully compile targets on the host\n+            control.after_analysis.stop = Compilation::Stop;\n+        }\n         control\n     }\n }\n@@ -136,6 +139,12 @@ fn main() {\n         args.push(sysroot_flag);\n         args.push(find_sysroot());\n     }\n+    // we run the optimization passes inside miri\n+    // if we ran them twice we'd get funny failures due to borrowck ElaborateDrops only working on\n+    // unoptimized MIR\n+    // FIXME: add an after-mir-passes hook to rustc driver\n+    args.push(\"-Zmir-opt-level=0\".to_owned());\n+    // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n \n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls, None, None);"}, {"sha": "afb401a919e916d9b1f26a588057627a8075f543", "filename": "tests/compile-fail/send-is-not-static-par-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0daa3b28981abd1de017752a89b372f7415e70ce/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0daa3b28981abd1de017752a89b372f7415e70ce/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs?ref=0daa3b28981abd1de017752a89b372f7415e70ce", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//error-pattern: no mir for `std::panicking::panicking`\n+//error-pattern: no mir for `std::\n \n use std::sync::Mutex;\n "}, {"sha": "909538494e86a5994e36f7d199a1b1a91d0fdcd8", "filename": "tests/compiletest.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0daa3b28981abd1de017752a89b372f7415e70ce/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0daa3b28981abd1de017752a89b372f7415e70ce/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=0daa3b28981abd1de017752a89b372f7415e70ce", "patch": "@@ -3,9 +3,9 @@ extern crate compiletest_rs as compiletest;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n \n-fn compile_fail(sysroot: &str) {\n-    let flags = format!(\"--sysroot {} -Dwarnings\", sysroot);\n-    for_all_targets(sysroot, |target| {\n+fn compile_fail(sysroot: &Path) {\n+    let flags = format!(\"--sysroot {} -Dwarnings\", sysroot.to_str().expect(\"non utf8 path\"));\n+    for_all_targets(&sysroot, |target| {\n         let mut config = compiletest::default_config();\n         config.host_rustcflags = Some(flags.clone());\n         config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n@@ -27,13 +27,21 @@ fn run_pass() {\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(path: &str, target: &str) {\n+fn miri_pass(path: &str, target: &str, host: &str) {\n     let mut config = compiletest::default_config();\n     config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n+    config.host = host.to_owned();\n     config.rustc_path = PathBuf::from(\"target/debug/miri\");\n+    // don't actually execute the final binary, it might be for other targets and we only care\n+    // about running miri, not the binary.\n+    config.runtool = Some(\"echo \\\"\\\" || \".to_owned());\n+    if target == host {\n+        std::env::set_var(\"MIRI_HOST_TARGET\", \"yes\");\n+    }\n     compiletest::run_tests(&config);\n+    std::env::set_var(\"MIRI_HOST_TARGET\", \"\");\n }\n \n fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n@@ -42,8 +50,10 @@ fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n     path.metadata().map(|m| m.is_dir()).unwrap_or(false)\n }\n \n-fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n-    for entry in std::fs::read_dir(format!(\"{}/lib/rustlib/\", sysroot)).unwrap() {\n+fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n+    let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n+    println!(\"target dir: {}\", target_dir.to_str().unwrap());\n+    for entry in std::fs::read_dir(target_dir).expect(\"invalid sysroot\") {\n         let entry = entry.unwrap();\n         if !is_target_dir(entry.path()) { continue; }\n         let target = entry.file_name().into_string().unwrap();\n@@ -55,20 +65,27 @@ fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n \n #[test]\n fn compile_test() {\n-    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    let sysroot = match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n-            .to_owned(),\n-    };\n+    let sysroot = std::process::Command::new(\"rustc\")\n+        .arg(\"--print\")\n+        .arg(\"sysroot\")\n+        .output()\n+        .expect(\"rustc not found\")\n+        .stdout;\n+    let sysroot = std::str::from_utf8(&sysroot).expect(\"sysroot is not utf8\").trim();\n+    let sysroot = &Path::new(&sysroot);\n+    let host = std::process::Command::new(\"rustc\")\n+        .arg(\"-vV\")\n+        .output()\n+        .expect(\"rustc not found for -vV\")\n+        .stdout;\n+    let host = std::str::from_utf8(&host).expect(\"sysroot is not utf8\");\n+    let host = host.split(\"\\nhost: \").skip(1).next().expect(\"no host: part in rustc -vV\");\n+    let host = host.split(\"\\n\").next().expect(\"no \\n after host\");\n     run_pass();\n     for_all_targets(&sysroot, |target| {\n-        miri_pass(\"tests/run-pass\", &target);\n+        miri_pass(\"tests/run-pass\", &target, host);\n         if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n-            miri_pass(&path, &target);\n+            miri_pass(&path, &target, host);\n         }\n     });\n     compile_fail(&sysroot);"}, {"sha": "1b1dbaa68387eecef10cff436501d2e5151a0b07", "filename": "tests/run-pass/aux_test.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0daa3b28981abd1de017752a89b372f7415e70ce/tests%2Frun-pass%2Faux_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0daa3b28981abd1de017752a89b372f7415e70ce/tests%2Frun-pass%2Faux_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faux_test.rs?ref=0daa3b28981abd1de017752a89b372f7415e70ce", "patch": "@@ -1,9 +1,8 @@\n // aux-build:dep.rs\n+// ignore-cross-compile\n \n-// FIXME: Auxiliary builds are currently broken.\n-// extern crate dep;\n+extern crate dep;\n \n fn main() {\n-    // FIXME: Auxiliary builds are currently broken.\n-    // dep::foo();\n+    dep::foo();\n }"}]}