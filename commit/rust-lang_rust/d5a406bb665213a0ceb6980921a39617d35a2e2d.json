{"sha": "d5a406bb665213a0ceb6980921a39617d35a2e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YTQwNmJiNjY1MjEzYTBjZWI2OTgwOTIxYTM5NjE3ZDM1YTJlMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T00:33:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T00:33:21Z"}, "message": "Auto merge of #82985 - cjgillot:lint, r=jackh726\n\nCleanup the computation of lint levels\n\nThis now uses an `IndexVec` and a special root `LintStackIndex = 0` to encode command-line levels.", "tree": {"sha": "888c26116adbd9ef46a53780a2673550ccc82ef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/888c26116adbd9ef46a53780a2673550ccc82ef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a406bb665213a0ceb6980921a39617d35a2e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a406bb665213a0ceb6980921a39617d35a2e2d", "html_url": "https://github.com/rust-lang/rust/commit/d5a406bb665213a0ceb6980921a39617d35a2e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a406bb665213a0ceb6980921a39617d35a2e2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b0c7dfe9bcb55096d8b81a67e683730f1e3c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b0c7dfe9bcb55096d8b81a67e683730f1e3c15", "html_url": "https://github.com/rust-lang/rust/commit/72b0c7dfe9bcb55096d8b81a67e683730f1e3c15"}, {"sha": "5a731ffdaefe26f68d0744882390f6c12c4284da", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a731ffdaefe26f68d0744882390f6c12c4284da", "html_url": "https://github.com/rust-lang/rust/commit/5a731ffdaefe26f68d0744882390f6c12c4284da"}], "stats": {"total": 99, "additions": 37, "deletions": 62}, "files": [{"sha": "c7e26013f1cbe1dcb8b224884f842d1b9e1f1743", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a406bb665213a0ceb6980921a39617d35a2e2d/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a406bb665213a0ceb6980921a39617d35a2e2d/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=d5a406bb665213a0ceb6980921a39617d35a2e2d", "patch": "@@ -11,7 +11,8 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n-    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet,\n+    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet, LintStackIndex,\n+    COMMAND_LINE,\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -50,15 +51,15 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n pub struct LintLevelsBuilder<'s> {\n     sess: &'s Session,\n     sets: LintLevelSets,\n-    id_to_set: FxHashMap<HirId, u32>,\n-    cur: u32,\n+    id_to_set: FxHashMap<HirId, LintStackIndex>,\n+    cur: LintStackIndex,\n     warn_about_weird_lints: bool,\n     store: &'s LintStore,\n     crate_attrs: &'s [ast::Attribute],\n }\n \n pub struct BuilderPush {\n-    prev: u32,\n+    prev: LintStackIndex,\n     pub changed: bool,\n }\n \n@@ -72,7 +73,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         let mut builder = LintLevelsBuilder {\n             sess,\n             sets: LintLevelSets::new(),\n-            cur: 0,\n+            cur: COMMAND_LINE,\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n             store,\n@@ -120,7 +121,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n-        self.sets.list.push(LintSet::CommandLine { specs });\n+        self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });\n     }\n \n     /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n@@ -523,8 +524,7 @@ impl<'s> LintLevelsBuilder<'s> {\n \n         let prev = self.cur;\n         if !specs.is_empty() {\n-            self.cur = self.sets.list.len() as u32;\n-            self.sets.list.push(LintSet::Node { specs, parent: prev });\n+            self.cur = self.sets.list.push(LintSet { specs, parent: prev });\n         }\n \n         BuilderPush { prev, changed: prev != self.cur }"}, {"sha": "560581cf641a52e2f7e0eff75143b3e4a4bfc023", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 29, "deletions": 54, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d5a406bb665213a0ceb6980921a39617d35a2e2d/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a406bb665213a0ceb6980921a39617d35a2e2d/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=d5a406bb665213a0ceb6980921a39617d35a2e2d", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n+use rustc_index::vec::IndexVec;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     FutureIncompatibilityReason, Level, Lint, LintId,\n@@ -51,35 +52,37 @@ impl LintLevelSource {\n /// A tuple of a lint level and its source.\n pub type LevelAndSource = (Level, LintLevelSource);\n \n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct LintLevelSets {\n-    pub list: Vec<LintSet>,\n+    pub list: IndexVec<LintStackIndex, LintSet>,\n     pub lint_cap: Level,\n }\n \n-#[derive(Debug)]\n-pub enum LintSet {\n-    CommandLine {\n-        // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n-        // flag.\n-        specs: FxHashMap<LintId, LevelAndSource>,\n-    },\n-\n-    Node {\n-        specs: FxHashMap<LintId, LevelAndSource>,\n-        parent: u32,\n-    },\n+rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n+    pub struct LintStackIndex {\n+        const COMMAND_LINE = 0,\n+    }\n+}\n+\n+#[derive(Debug, HashStable)]\n+pub struct LintSet {\n+    // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n+    // flag.\n+    pub specs: FxHashMap<LintId, LevelAndSource>,\n+\n+    pub parent: LintStackIndex,\n }\n \n impl LintLevelSets {\n     pub fn new() -> Self {\n-        LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid }\n+        LintLevelSets { list: IndexVec::new(), lint_cap: Level::Forbid }\n     }\n \n     pub fn get_lint_level(\n         &self,\n         lint: &'static Lint,\n-        idx: u32,\n+        idx: LintStackIndex,\n         aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n     ) -> LevelAndSource {\n@@ -122,7 +125,7 @@ impl LintLevelSets {\n     pub fn get_lint_id_level(\n         &self,\n         id: LintId,\n-        mut idx: u32,\n+        mut idx: LintStackIndex,\n         aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n     ) -> (Option<Level>, LintLevelSource) {\n         if let Some(specs) = aux {\n@@ -131,28 +134,22 @@ impl LintLevelSets {\n             }\n         }\n         loop {\n-            match self.list[idx as usize] {\n-                LintSet::CommandLine { ref specs } => {\n-                    if let Some(&(level, src)) = specs.get(&id) {\n-                        return (Some(level), src);\n-                    }\n-                    return (None, LintLevelSource::Default);\n-                }\n-                LintSet::Node { ref specs, parent } => {\n-                    if let Some(&(level, src)) = specs.get(&id) {\n-                        return (Some(level), src);\n-                    }\n-                    idx = parent;\n-                }\n+            let LintSet { ref specs, parent } = self.list[idx];\n+            if let Some(&(level, src)) = specs.get(&id) {\n+                return (Some(level), src);\n+            }\n+            if idx == COMMAND_LINE {\n+                return (None, LintLevelSource::Default);\n             }\n+            idx = parent;\n         }\n     }\n }\n \n #[derive(Debug)]\n pub struct LintLevelMap {\n     pub sets: LintLevelSets,\n-    pub id_to_set: FxHashMap<HirId, u32>,\n+    pub id_to_set: FxHashMap<HirId, LintStackIndex>,\n }\n \n impl LintLevelMap {\n@@ -180,29 +177,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n \n         id_to_set.hash_stable(hcx, hasher);\n \n-        let LintLevelSets { ref list, lint_cap } = *sets;\n-\n-        lint_cap.hash_stable(hcx, hasher);\n-\n-        hcx.while_hashing_spans(true, |hcx| {\n-            list.len().hash_stable(hcx, hasher);\n-\n-            // We are working under the assumption here that the list of\n-            // lint-sets is built in a deterministic order.\n-            for lint_set in list {\n-                ::std::mem::discriminant(lint_set).hash_stable(hcx, hasher);\n-\n-                match *lint_set {\n-                    LintSet::CommandLine { ref specs } => {\n-                        specs.hash_stable(hcx, hasher);\n-                    }\n-                    LintSet::Node { ref specs, parent } => {\n-                        specs.hash_stable(hcx, hasher);\n-                        parent.hash_stable(hcx, hasher);\n-                    }\n-                }\n-            }\n-        })\n+        hcx.while_hashing_spans(true, |hcx| sets.hash_stable(hcx, hasher))\n     }\n }\n "}]}