{"sha": "85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZGRkMWRjNTg3NjE1YTBkYzc2Y2VmODBmZjdkODhhMWI0YmMyOGU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-04T12:22:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-04T13:55:46Z"}, "message": "Rename `Res::kind_name` to `Res::descr` for consistency", "tree": {"sha": "285f299f0a4274781cf9e252850979f0c0003709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285f299f0a4274781cf9e252850979f0c0003709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "html_url": "https://github.com/rust-lang/rust/commit/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917a0fbc1b73fe7dd5c65fd4b38759366e96c251", "url": "https://api.github.com/repos/rust-lang/rust/commits/917a0fbc1b73fe7dd5c65fd4b38759366e96c251", "html_url": "https://github.com/rust-lang/rust/commit/917a0fbc1b73fe7dd5c65fd4b38759366e96c251"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "87af450451e7e87e0049ec646ee2c055849223c5", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -370,7 +370,7 @@ impl<Id> Res<Id> {\n     }\n \n     /// A human readable name for the res kind (\"function\", \"module\", etc.).\n-    pub fn kind_name(&self) -> &'static str {\n+    pub fn descr(&self) -> &'static str {\n         match *self {\n             Res::Def(kind, _) => kind.descr(),\n             Res::SelfCtor(..) => \"self constructor\","}, {"sha": "ed183acc93b74f75e9f5adafb28c90c8fef37406", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -286,7 +286,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 PatKind::Path(hir::QPath::Resolved(None, ref path))\n                         if path.segments.len() == 1 && path.segments[0].args.is_none() => {\n                     format!(\"interpreted as {} {} pattern, not new variable\",\n-                            path.res.article(), path.res.kind_name())\n+                            path.res.article(), path.res.descr())\n                 }\n                 _ => format!(\"pattern `{}` not covered\", pattern_string),\n             };"}, {"sha": "509aa95bb61dfc38ffff8f817caf5cb2bdaba6d1", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -41,7 +41,7 @@ impl<'a> Resolver<'a> {\n         let item_str = path.last().unwrap().ident;\n         let code = source.error_code(res.is_some());\n         let (base_msg, fallback_label, base_span) = if let Some(res) = res {\n-            (format!(\"expected {}, found {} `{}`\", expected, res.kind_name(), path_str),\n+            (format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str),\n                 format!(\"not a {}\", expected),\n                 span)\n         } else {"}, {"sha": "88465535c2cb6793e04489825e9d0aa312805776", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -1532,7 +1532,7 @@ impl<'a> NameBinding<'a> {\n     }\n \n     fn descr(&self) -> &'static str {\n-        if self.is_extern_crate() { \"extern crate\" } else { self.res().kind_name() }\n+        if self.is_extern_crate() { \"extern crate\" } else { self.res().descr() }\n     }\n \n     fn article(&self) -> &'static str {\n@@ -3868,7 +3868,7 @@ impl<'a> Resolver<'a> {\n                             \"`{}` is {} {}, not a module\",\n                             ident,\n                             res.article(),\n-                            res.kind_name(),\n+                            res.descr(),\n                         );\n \n                         return PathResult::Failed {\n@@ -4220,7 +4220,7 @@ impl<'a> Resolver<'a> {\n                         names.push(TypoSuggestion {\n                             candidate: ident.name,\n                             article: binding.res().article(),\n-                            kind: binding.res().kind_name(),\n+                            kind: binding.res().descr(),\n                         });\n                     }\n                 }\n@@ -4238,7 +4238,7 @@ impl<'a> Resolver<'a> {\n                         names.push(TypoSuggestion {\n                             candidate: ident.name,\n                             article: res.article(),\n-                            kind: res.kind_name(),\n+                            kind: res.descr(),\n                         });\n                     }\n                 }"}, {"sha": "f1706a4616b06b92103759bc7e1937df793a50b9", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -333,7 +333,7 @@ impl<'a> Resolver<'a> {\n                     // Not only attributes, but anything in macro namespace can result in\n                     // `Res::NonMacroAttr` definition (e.g., `inline!()`), so we must report\n                     // an error for those cases.\n-                    let msg = format!(\"expected a macro, found {}\", res.kind_name());\n+                    let msg = format!(\"expected a macro, found {}\", res.descr());\n                     self.session.span_err(path.span, &msg);\n                     return Err(Determinacy::Determined);\n                 }\n@@ -913,7 +913,7 @@ impl<'a> Resolver<'a> {\n                         // (which is a best effort error recovery tool, basically), so we can't\n                         // promise their resolution won't change later.\n                         let msg = format!(\"inconsistent resolution for a macro: first {}, then {}\",\n-                                          initial_res.kind_name(), res.kind_name());\n+                                          initial_res.descr(), res.descr());\n                         this.session.span_err(span, &msg);\n                     } else {\n                         span_bug!(span, \"inconsistent resolution for a macro\");"}, {"sha": "e9e202ce37996e515e0f137f2475e5722245aac4", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -884,7 +884,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         };\n         let report_unexpected_res = |res: Res| {\n             let msg = format!(\"expected tuple struct/variant, found {} `{}`\",\n-                              res.kind_name(),\n+                              res.descr(),\n                               hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)));\n             struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg)\n                 .span_label(pat.span, \"not a tuple variant or struct\").emit();\n@@ -947,7 +947,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             let fields_ending = if variant.fields.len() == 1 { \"\" } else { \"s\" };\n             struct_span_err!(tcx.sess, pat.span, E0023,\n                              \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n-                             subpats.len(), subpats_ending, res.kind_name(),\n+                             subpats.len(), subpats_ending, res.descr(),\n                              variant.fields.len(),  fields_ending)\n                 .span_label(pat.span, format!(\"expected {} field{}, found {}\",\n                                               variant.fields.len(), fields_ending, subpats.len()))"}, {"sha": "e404a8e6972c8c70a3ac48f1294606854339c77c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -1902,7 +1902,7 @@ fn report_unexpected_variant_res<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                  qpath: &QPath) {\n     span_err!(tcx.sess, span, E0533,\n               \"expected unit struct/variant or constant, found {} `{}`\",\n-              res.kind_name(),\n+              res.descr(),\n               hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)));\n }\n "}, {"sha": "abf19a0a5efa4cca9346102bdd1d44dd4c52f5b1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=85ddd1dc587615a0dc76cef80ff7d88a1b4bc28e", "patch": "@@ -513,18 +513,18 @@ fn ambiguity_error(\n             msg += &format!(\n                 \"both {} {} and {} {}\",\n                 first_def.article(),\n-                first_def.kind_name(),\n+                first_def.descr(),\n                 second_def.article(),\n-                second_def.kind_name(),\n+                second_def.descr(),\n             );\n         }\n         _ => {\n             let mut candidates = candidates.iter().peekable();\n             while let Some((res, _)) = candidates.next() {\n                 if candidates.peek().is_some() {\n-                    msg += &format!(\"{} {}, \", res.article(), res.kind_name());\n+                    msg += &format!(\"{} {}, \", res.article(), res.descr());\n                 } else {\n-                    msg += &format!(\"and {} {}\", res.article(), res.kind_name());\n+                    msg += &format!(\"and {} {}\", res.article(), res.descr());\n                 }\n             }\n         }\n@@ -575,7 +575,7 @@ fn ambiguity_error(\n \n                 diag.span_suggestion(\n                     sp,\n-                    &format!(\"to link to the {}, {}\", res.kind_name(), action),\n+                    &format!(\"to link to the {}, {}\", res.descr(), action),\n                     suggestion,\n                     Applicability::MaybeIncorrect,\n                 );"}]}