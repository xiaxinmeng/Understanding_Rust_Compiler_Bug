{"sha": "27a9bf773c525e17dce80320af56b7c7814f9829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTliZjc3M2M1MjVlMTdkY2U4MDMyMGFmNTZiN2M3ODE0Zjk4Mjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-30T22:37:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-03T17:32:34Z"}, "message": "compiletest: Remove io_error usage", "tree": {"sha": "f809f54e20d28a88dc04060bb3035031224c05a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f809f54e20d28a88dc04060bb3035031224c05a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a9bf773c525e17dce80320af56b7c7814f9829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a9bf773c525e17dce80320af56b7c7814f9829", "html_url": "https://github.com/rust-lang/rust/commit/27a9bf773c525e17dce80320af56b7c7814f9829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a9bf773c525e17dce80320af56b7c7814f9829/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e8ba7252a162fc6a3c5186904947f5969d732af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8ba7252a162fc6a3c5186904947f5969d732af", "html_url": "https://github.com/rust-lang/rust/commit/5e8ba7252a162fc6a3c5186904947f5969d732af"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "8896b44f060080e6df809be8ef14cb19ea35898a", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27a9bf773c525e17dce80320af56b7c7814f9829/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a9bf773c525e17dce80320af56b7c7814f9829/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=27a9bf773c525e17dce80320af56b7c7814f9829", "patch": "@@ -234,7 +234,13 @@ pub fn run_tests(config: &config) {\n     // For context, see #8904\n     io::test::raise_fd_limit();\n     let res = test::run_tests_console(&opts, tests);\n-    if !res { fail!(\"Some tests failed\"); }\n+    match res {\n+        Ok(true) => {}\n+        Ok(false) => fail!(\"Some tests failed\"),\n+        Err(e) => {\n+            println!(\"I/O failure during tests: {}\", e);\n+        }\n+    }\n }\n \n pub fn test_opts(config: &config) -> test::TestOpts {\n@@ -255,7 +261,7 @@ pub fn make_tests(config: &config) -> ~[test::TestDescAndFn] {\n     debug!(\"making tests from {}\",\n            config.src_base.display());\n     let mut tests = ~[];\n-    let dirs = fs::readdir(&config.src_base);\n+    let dirs = fs::readdir(&config.src_base).unwrap();\n     for file in dirs.iter() {\n         let file = file.clone();\n         debug!(\"inspecting file {}\", file.display());"}, {"sha": "019803a9337796d87b7a12ccf9f64f63dfce4a37", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27a9bf773c525e17dce80320af56b7c7814f9829/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a9bf773c525e17dce80320af56b7c7814f9829/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=27a9bf773c525e17dce80320af56b7c7814f9829", "patch": "@@ -58,9 +58,9 @@ pub fn run(lib_path: &str,\n     });\n \n     match opt_process {\n-        Some(ref mut process) => {\n+        Ok(ref mut process) => {\n             for input in input.iter() {\n-                process.input().write(input.as_bytes());\n+                process.input().write(input.as_bytes()).unwrap();\n             }\n             let run::ProcessOutput { status, output, error } = process.finish_with_output();\n \n@@ -70,7 +70,7 @@ pub fn run(lib_path: &str,\n                 err: str::from_utf8_owned(error).unwrap()\n             })\n         },\n-        None => None\n+        Err(..) => None\n     }\n }\n \n@@ -90,13 +90,13 @@ pub fn run_background(lib_path: &str,\n     });\n \n     match opt_process {\n-        Some(mut process) => {\n+        Ok(mut process) => {\n             for input in input.iter() {\n-                process.input().write(input.as_bytes());\n+                process.input().write(input.as_bytes()).unwrap();\n             }\n \n             Some(process)\n         },\n-        None => None\n+        Err(..) => None\n     }\n }"}, {"sha": "0503790ae943c964002a3d906e96ff1d14929654", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27a9bf773c525e17dce80320af56b7c7814f9829/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a9bf773c525e17dce80320af56b7c7814f9829/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=27a9bf773c525e17dce80320af56b7c7814f9829", "patch": "@@ -153,7 +153,7 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n     let rounds =\n         match props.pp_exact { Some(_) => 1, None => 2 };\n \n-    let src = File::open(testfile).read_to_end();\n+    let src = File::open(testfile).read_to_end().unwrap();\n     let src = str::from_utf8_owned(src).unwrap();\n     let mut srcs = ~[src];\n \n@@ -175,7 +175,7 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n     let mut expected = match props.pp_exact {\n         Some(ref file) => {\n             let filepath = testfile.dir_path().join(file);\n-            let s = File::open(&filepath).read_to_end();\n+            let s = File::open(&filepath).read_to_end().unwrap();\n             str::from_utf8_owned(s).unwrap()\n           }\n           None => { srcs[srcs.len() - 2u].clone() }\n@@ -318,8 +318,10 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n                 //waiting 1 second for gdbserver start\n                 timer::sleep(1000);\n                 let result = task::try(proc() {\n-                    tcp::TcpStream::connect(\n-                        SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 5039 });\n+                    tcp::TcpStream::connect(SocketAddr {\n+                        ip: Ipv4Addr(127, 0, 0, 1),\n+                        port: 5039,\n+                    }).unwrap();\n                 });\n                 if result.is_err() {\n                     continue;\n@@ -361,7 +363,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n                                stdout: out,\n                                stderr: err,\n                                cmdline: cmdline};\n-            process.force_destroy();\n+            process.force_destroy().unwrap();\n         }\n \n         _=> {\n@@ -727,7 +729,7 @@ fn compose_and_run_compiler(\n \n fn ensure_dir(path: &Path) {\n     if path.is_dir() { return; }\n-    fs::mkdir(path, io::UserRWX);\n+    fs::mkdir(path, io::UserRWX).unwrap();\n }\n \n fn compose_and_run(config: &config, testfile: &Path,\n@@ -852,7 +854,7 @@ fn dump_output(config: &config, testfile: &Path, out: &str, err: &str) {\n fn dump_output_file(config: &config, testfile: &Path,\n                     out: &str, extension: &str) {\n     let outfile = make_out_name(config, testfile, extension);\n-    File::create(&outfile).write(out.as_bytes());\n+    File::create(&outfile).write(out.as_bytes()).unwrap();\n }\n \n fn make_out_name(config: &config, testfile: &Path, extension: &str) -> Path {\n@@ -1003,7 +1005,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n     let tdir = aux_output_dir_name(config, testfile);\n \n-    let dirs = fs::readdir(&tdir);\n+    let dirs = fs::readdir(&tdir).unwrap();\n     for file in dirs.iter() {\n         if file.extension_str() == Some(\"so\") {\n             // FIXME (#9639): This needs to handle non-utf8 paths\n@@ -1099,7 +1101,7 @@ fn disassemble_extract(config: &config, _props: &TestProps,\n \n \n fn count_extracted_lines(p: &Path) -> uint {\n-    let x = File::open(&p.with_extension(\"ll\")).read_to_end();\n+    let x = File::open(&p.with_extension(\"ll\")).read_to_end().unwrap();\n     let x = str::from_utf8_owned(x).unwrap();\n     x.lines().len()\n }"}]}