{"sha": "73b3ee664ecc938b943b5a08a23ef29104fc390f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYjNlZTY2NGVjYzkzOGI5NDNiNWEwOGEyM2VmMjkxMDRmYzM5MGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T19:24:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T19:25:35Z"}, "message": "minor: use minicore", "tree": {"sha": "4f03ef4a9b684ba96da926ee2ffabcf7398b4f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f03ef4a9b684ba96da926ee2ffabcf7398b4f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73b3ee664ecc938b943b5a08a23ef29104fc390f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73b3ee664ecc938b943b5a08a23ef29104fc390f", "html_url": "https://github.com/rust-lang/rust/commit/73b3ee664ecc938b943b5a08a23ef29104fc390f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73b3ee664ecc938b943b5a08a23ef29104fc390f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4df27132afafbd9ac5ec14070432c38d6cae8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4df27132afafbd9ac5ec14070432c38d6cae8f", "html_url": "https://github.com/rust-lang/rust/commit/2e4df27132afafbd9ac5ec14070432c38d6cae8f"}], "stats": {"total": 156, "additions": 69, "deletions": 87}, "files": [{"sha": "94b628fb8d2504a027b0458ca1daa651cc4bd988", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ee664ecc938b943b5a08a23ef29104fc390f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ee664ecc938b943b5a08a23ef29104fc390f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=73b3ee664ecc938b943b5a08a23ef29104fc390f", "patch": "@@ -705,12 +705,8 @@ fn issue_4931() {\n fn issue_4885() {\n     check_infer(\n         r#\"\n-        #[lang = \"coerce_unsized\"]\n-        pub trait CoerceUnsized<T> {}\n-\n-        trait Future {\n-            type Output;\n-        }\n+        //- minicore: coerce_unsized, future\n+        use core::future::Future;\n         trait Foo<R> {\n             type Bar;\n         }\n@@ -727,13 +723,13 @@ fn issue_4885() {\n         }\n         \"#,\n         expect![[r#\"\n-            136..139 'key': &K\n-            198..214 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n-            204..207 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n-            204..212 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n-            208..211 'key': &K\n-            228..231 'key': &K\n-            290..293 '{ }': ()\n+            70..73 'key': &K\n+            132..148 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n+            138..141 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n+            138..146 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n+            142..145 'key': &K\n+            162..165 'key': &K\n+            224..227 '{ }': ()\n         \"#]],\n     );\n }"}, {"sha": "108ff3179488f348192ef14158328b1907332c65", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ee664ecc938b943b5a08a23ef29104fc390f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ee664ecc938b943b5a08a23ef29104fc390f/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=73b3ee664ecc938b943b5a08a23ef29104fc390f", "patch": "@@ -1917,20 +1917,14 @@ fn fn_pointer_return() {\n fn effects_smoke_test() {\n     check_infer(\n         r#\"\n+        //- minicore: future\n         async fn main() {\n             let x = unsafe { 92 };\n             let y = async { async { () }.await };\n             let z = try { () };\n             let w = const { 92 };\n             let t = 'a: { 92 };\n         }\n-\n-        #[prelude_import] use future::*;\n-\n-        mod future {\n-            #[lang = \"future_trait\"]\n-            pub trait Future { type Output; }\n-        }\n         \"#,\n         expect![[r#\"\n             16..162 '{     ...2 }; }': ()"}, {"sha": "dd1ea817f3538c7f2618aa6f829002c388517e23", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 59, "deletions": 67, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/73b3ee664ecc938b943b5a08a23ef29104fc390f/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b3ee664ecc938b943b5a08a23ef29104fc390f/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=73b3ee664ecc938b943b5a08a23ef29104fc390f", "patch": "@@ -2731,9 +2731,7 @@ fn test(x: &dyn Foo) {\n fn builtin_copy() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n+//- minicore: copy\n struct IsCopy;\n impl Copy for IsCopy {}\n struct NotCopy;\n@@ -2748,20 +2746,20 @@ fn test() {\n     (IsCopy, NotCopy).test();\n }\"#,\n         expect![[r#\"\n-            110..114 'self': &Self\n-            166..267 '{     ...t(); }': ()\n-            172..178 'IsCopy': IsCopy\n-            172..185 'IsCopy.test()': bool\n-            191..198 'NotCopy': NotCopy\n-            191..205 'NotCopy.test()': {unknown}\n-            211..227 '(IsCop...sCopy)': (IsCopy, IsCopy)\n-            211..234 '(IsCop...test()': bool\n-            212..218 'IsCopy': IsCopy\n-            220..226 'IsCopy': IsCopy\n-            240..257 '(IsCop...tCopy)': (IsCopy, NotCopy)\n-            240..264 '(IsCop...test()': {unknown}\n-            241..247 'IsCopy': IsCopy\n-            249..256 'NotCopy': NotCopy\n+            78..82 'self': &Self\n+            134..235 '{     ...t(); }': ()\n+            140..146 'IsCopy': IsCopy\n+            140..153 'IsCopy.test()': bool\n+            159..166 'NotCopy': NotCopy\n+            159..173 'NotCopy.test()': {unknown}\n+            179..195 '(IsCop...sCopy)': (IsCopy, IsCopy)\n+            179..202 '(IsCop...test()': bool\n+            180..186 'IsCopy': IsCopy\n+            188..194 'IsCopy': IsCopy\n+            208..225 '(IsCop...tCopy)': (IsCopy, NotCopy)\n+            208..232 '(IsCop...test()': {unknown}\n+            209..215 'IsCopy': IsCopy\n+            217..224 'NotCopy': NotCopy\n         \"#]],\n     );\n }\n@@ -2770,9 +2768,7 @@ fn test() {\n fn builtin_fn_def_copy() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n+//- minicore: copy\n fn foo() {}\n fn bar<T: Copy>(T) -> T {}\n struct Struct(usize);\n@@ -2788,20 +2784,20 @@ fn test() {\n     Enum::Variant.test();\n }\"#,\n         expect![[r#\"\n-            41..43 '{}': ()\n-            60..61 'T': {unknown}\n-            68..70 '{}': ()\n-            68..70: expected T, got ()\n-            145..149 'self': &Self\n-            201..281 '{     ...t(); }': ()\n-            207..210 'foo': fn foo()\n-            207..217 'foo.test()': bool\n-            223..226 'bar': fn bar<{unknown}>({unknown}) -> {unknown}\n-            223..233 'bar.test()': bool\n-            239..245 'Struct': Struct(usize) -> Struct\n-            239..252 'Struct.test()': bool\n-            258..271 'Enum::Variant': Variant(usize) -> Enum\n-            258..278 'Enum::...test()': bool\n+            9..11 '{}': ()\n+            28..29 'T': {unknown}\n+            36..38 '{}': ()\n+            36..38: expected T, got ()\n+            113..117 'self': &Self\n+            169..249 '{     ...t(); }': ()\n+            175..178 'foo': fn foo()\n+            175..185 'foo.test()': bool\n+            191..194 'bar': fn bar<{unknown}>({unknown}) -> {unknown}\n+            191..201 'bar.test()': bool\n+            207..213 'Struct': Struct(usize) -> Struct\n+            207..220 'Struct.test()': bool\n+            226..239 'Enum::Variant': Variant(usize) -> Enum\n+            226..246 'Enum::...test()': bool\n         \"#]],\n     );\n }\n@@ -2810,9 +2806,7 @@ fn test() {\n fn builtin_fn_ptr_copy() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n+//- minicore: copy\n trait Test { fn test(&self) -> bool; }\n impl<T: Copy> Test for T {}\n \n@@ -2822,17 +2816,17 @@ fn test(f1: fn(), f2: fn(usize) -> u8, f3: fn(u8, u8) -> &u8) {\n     f3.test();\n }\"#,\n         expect![[r#\"\n-            54..58 'self': &Self\n-            108..110 'f1': fn()\n-            118..120 'f2': fn(usize) -> u8\n-            139..141 'f3': fn(u8, u8) -> &u8\n-            162..210 '{     ...t(); }': ()\n-            168..170 'f1': fn()\n-            168..177 'f1.test()': bool\n-            183..185 'f2': fn(usize) -> u8\n-            183..192 'f2.test()': bool\n-            198..200 'f3': fn(u8, u8) -> &u8\n-            198..207 'f3.test()': bool\n+            22..26 'self': &Self\n+            76..78 'f1': fn()\n+            86..88 'f2': fn(usize) -> u8\n+            107..109 'f3': fn(u8, u8) -> &u8\n+            130..178 '{     ...t(); }': ()\n+            136..138 'f1': fn()\n+            136..145 'f1.test()': bool\n+            151..153 'f2': fn(usize) -> u8\n+            151..160 'f2.test()': bool\n+            166..168 'f3': fn(u8, u8) -> &u8\n+            166..175 'f3.test()': bool\n         \"#]],\n     );\n }\n@@ -2841,9 +2835,7 @@ fn test(f1: fn(), f2: fn(usize) -> u8, f3: fn(u8, u8) -> &u8) {\n fn builtin_sized() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"sized\"]\n-trait Sized {}\n-\n+//- minicore: sized\n trait Test { fn test(&self) -> bool; }\n impl<T: Sized> Test for T {}\n \n@@ -2854,22 +2846,22 @@ fn test() {\n     (1u8, *\"foo\").test(); // not Sized\n }\"#,\n         expect![[r#\"\n-            56..60 'self': &Self\n-            113..228 '{     ...ized }': ()\n-            119..122 '1u8': u8\n-            119..129 '1u8.test()': bool\n-            135..150 '(*\"foo\").test()': {unknown}\n-            136..142 '*\"foo\"': str\n-            137..142 '\"foo\"': &str\n-            169..179 '(1u8, 1u8)': (u8, u8)\n-            169..186 '(1u8, ...test()': bool\n-            170..173 '1u8': u8\n-            175..178 '1u8': u8\n-            192..205 '(1u8, *\"foo\")': (u8, str)\n-            192..212 '(1u8, ...test()': {unknown}\n-            193..196 '1u8': u8\n-            198..204 '*\"foo\"': str\n-            199..204 '\"foo\"': &str\n+            22..26 'self': &Self\n+            79..194 '{     ...ized }': ()\n+            85..88 '1u8': u8\n+            85..95 '1u8.test()': bool\n+            101..116 '(*\"foo\").test()': {unknown}\n+            102..108 '*\"foo\"': str\n+            103..108 '\"foo\"': &str\n+            135..145 '(1u8, 1u8)': (u8, u8)\n+            135..152 '(1u8, ...test()': bool\n+            136..139 '1u8': u8\n+            141..144 '1u8': u8\n+            158..171 '(1u8, *\"foo\")': (u8, str)\n+            158..178 '(1u8, ...test()': {unknown}\n+            159..162 '1u8': u8\n+            164..170 '*\"foo\"': str\n+            165..170 '\"foo\"': &str\n         \"#]],\n     );\n }"}]}