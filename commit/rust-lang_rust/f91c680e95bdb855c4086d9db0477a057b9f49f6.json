{"sha": "f91c680e95bdb855c4086d9db0477a057b9f49f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MWM2ODBlOTViZGI4NTVjNDA4NmQ5ZGIwNDc3YTA1N2I5ZjQ5ZjY=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-10-07T00:12:58Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-10-07T00:12:58Z"}, "message": "doc fixups", "tree": {"sha": "0cfaef2bb1abc2e5d8dc8a92850c8ab4960aec27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cfaef2bb1abc2e5d8dc8a92850c8ab4960aec27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f91c680e95bdb855c4086d9db0477a057b9f49f6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f91c680e95bdb855c4086d9db0477a057b9f49f6", "html_url": "https://github.com/rust-lang/rust/commit/f91c680e95bdb855c4086d9db0477a057b9f49f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f91c680e95bdb855c4086d9db0477a057b9f49f6/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c04b3c5bd5b7e6fe70273d3e021818f86da4967", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c04b3c5bd5b7e6fe70273d3e021818f86da4967", "html_url": "https://github.com/rust-lang/rust/commit/7c04b3c5bd5b7e6fe70273d3e021818f86da4967"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "dbbff61b8dd50c139154eb800a05892f7a6843d3", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f91c680e95bdb855c4086d9db0477a057b9f49f6/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91c680e95bdb855c4086d9db0477a057b9f49f6/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=f91c680e95bdb855c4086d9db0477a057b9f49f6", "patch": "@@ -45,14 +45,14 @@ use ringbuf::RingBuf;\n /// searches. However, this does mean that searches will have to do *more* comparisons on average.\n /// The precise number of comparisons depends on the node search strategy used. For optimal cache\n /// effeciency, one could search the nodes linearly. For optimal comparisons, one could search\n-/// search the node using binary search. As a compromise, one could also perform a linear search\n+/// the node using binary search. As a compromise, one could also perform a linear search\n /// that initially only checks every i<sup>th</sup> element for some choice of i.\n ///\n /// Currently, our implementation simply performs naive linear search. This provides excellent\n /// performance on *small* nodes of elements which are cheap to compare. However in the future we\n /// would like to further explore choosing the optimal search strategy based on the choice of B,\n /// and possibly other factors. Using linear search, searching for a random element is expected\n-/// to take O(Blog<sub>B</sub>n) comparisons, which is generally worse than a BST. In practice,\n+/// to take O(B log<sub>B</sub>n) comparisons, which is generally worse than a BST. In practice,\n /// however, performance is excellent. `BTreeMap` is able to readily outperform `TreeMap` under\n /// many workloads, and is competetive where it doesn't. BTreeMap also generally *scales* better\n /// than TreeMap, making it more appropriate for large datasets.\n@@ -68,7 +68,7 @@ use ringbuf::RingBuf;\n /// it's possible to force one to occur at every single level of the tree in a single insertion or\n /// deletion. In fact, a malicious or otherwise unlucky sequence of insertions and deletions can\n /// force this degenerate behaviour to occur on every operation. While the total amount of work\n-/// done on each operation isn't *catastrophic*, and *is* still bounded by O(Blog<sub>B</sub>n),\n+/// done on each operation isn't *catastrophic*, and *is* still bounded by O(B log<sub>B</sub>n),\n /// it is certainly much slower when it does.\n #[deriving(Clone)]\n pub struct BTreeMap<K, V> {"}]}