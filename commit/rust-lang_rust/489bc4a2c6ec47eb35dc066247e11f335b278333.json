{"sha": "489bc4a2c6ec47eb35dc066247e11f335b278333", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OWJjNGEyYzZlYzQ3ZWIzNWRjMDY2MjQ3ZTExZjMzNWIyNzgzMzM=", "commit": {"author": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-26T19:25:36Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-27T09:52:45Z"}, "message": "When mentioning lifetimes, put either the trait ref or the self type closer to the lifetimes\n\nWhen mentioning lifetimes, only invert wording between the expected trait and the self type when the self type has the vid.\nThis way, the lifetimes always stay close to the self type or trait ref that actually contains them.", "tree": {"sha": "99d718a35e3ef113f0905033ebe1f1e748f2a4c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99d718a35e3ef113f0905033ebe1f1e748f2a4c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/489bc4a2c6ec47eb35dc066247e11f335b278333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/489bc4a2c6ec47eb35dc066247e11f335b278333", "html_url": "https://github.com/rust-lang/rust/commit/489bc4a2c6ec47eb35dc066247e11f335b278333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/489bc4a2c6ec47eb35dc066247e11f335b278333/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1730ad4d1cbb703be970f8494ec349bf2c38e3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1730ad4d1cbb703be970f8494ec349bf2c38e3f4", "html_url": "https://github.com/rust-lang/rust/commit/1730ad4d1cbb703be970f8494ec349bf2c38e3f4"}], "stats": {"total": 125, "additions": 81, "deletions": 44}, "files": [{"sha": "391539b77bc46485321841b7bba279b2b651b8d2", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 63, "deletions": 26, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -251,10 +251,16 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             }\n         });\n \n-        let self_ty_has_vid = self\n+        let actual_self_ty_has_vid = self\n             .tcx()\n             .any_free_region_meets(&actual_trait_ref.self_ty(), |r| Some(r) == vid);\n \n+        let expected_self_ty_has_vid = self\n+            .tcx()\n+            .any_free_region_meets(&expected_trait_ref.self_ty(), |r| Some(r) == vid);\n+\n+        let self_ty_has_vid = actual_self_ty_has_vid || expected_self_ty_has_vid;\n+\n         debug!(\n             \"try_report_placeholders_trait: actual_has_vid={:?}\",\n             actual_has_vid\n@@ -266,8 +272,12 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         debug!(\"try_report_placeholders_trait: has_sub={:?}\", has_sub);\n         debug!(\"try_report_placeholders_trait: has_sup={:?}\", has_sup);\n         debug!(\n-            \"try_report_placeholders_trait: self_ty_has_vid={:?}\",\n-            self_ty_has_vid\n+            \"try_report_placeholders_trait: actual_self_ty_has_vid={:?}\",\n+            actual_self_ty_has_vid\n+        );\n+        debug!(\n+            \"try_report_placeholders_trait: expected_self_ty_has_vid={:?}\",\n+            expected_self_ty_has_vid\n         );\n \n         // The weird thing here with the `maybe_highlighting_region` calls and the\n@@ -289,23 +299,43 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             RegionHighlightMode::maybe_highlighting_region(sup_placeholder, has_sup, || {\n                 match (has_sub, has_sup) {\n                     (Some(n1), Some(n2)) => {\n-                        err.note(&format!(\n-                            \"`{}` would have to be implemented for the type `{}`, \\\n-                             for any two lifetimes `'{}` and `'{}`\",\n-                            expected_trait_ref,\n-                            expected_trait_ref.self_ty(),\n-                            std::cmp::min(n1, n2),\n-                            std::cmp::max(n1, n2),\n-                        ));\n+                        if self_ty_has_vid {\n+                            err.note(&format!(\n+                                \"`{}` would have to be implemented for the type `{}`, \\\n+                                 for any two lifetimes `'{}` and `'{}`\",\n+                                expected_trait_ref,\n+                                expected_trait_ref.self_ty(),\n+                                std::cmp::min(n1, n2),\n+                                std::cmp::max(n1, n2),\n+                            ));\n+                        } else {\n+                            err.note(&format!(\n+                                \"`{}` must implement `{}`, \\\n+                                 for any two lifetimes `'{}` and `'{}`\",\n+                                expected_trait_ref.self_ty(),\n+                                expected_trait_ref,\n+                                std::cmp::min(n1, n2),\n+                                std::cmp::max(n1, n2),\n+                            ));\n+                        }\n                     }\n                     (Some(n), _) | (_, Some(n)) => {\n-                        err.note(&format!(\n-                            \"`{}` would have to be implemented for the type `{}`, \\\n-                             for any lifetime `'{}`\",\n-                            expected_trait_ref,\n-                            expected_trait_ref.self_ty(),\n-                            n,\n-                        ));\n+                        if self_ty_has_vid {\n+                            err.note(&format!(\n+                                \"`{}` would have to be implemented for the type `{}`, \\\n+                                 for any lifetime `'{}`\",\n+                                expected_trait_ref,\n+                                expected_trait_ref.self_ty(),\n+                                n,\n+                            ));\n+                        } else {\n+                            err.note(&format!(\n+                                \"`{}` must implement `{}`, for any lifetime `'{}`\",\n+                                expected_trait_ref.self_ty(),\n+                                expected_trait_ref,\n+                                n,\n+                            ));\n+                        }\n                     }\n                     (None, None) => RegionHighlightMode::maybe_highlighting_region(\n                         vid,\n@@ -320,11 +350,19 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                                     n,\n                                 ));\n                             } else {\n-                                err.note(&format!(\n-                                    \"`{}` would have to be implemented for the type `{}`\",\n-                                    expected_trait_ref,\n-                                    expected_trait_ref.self_ty(),\n-                                ));\n+                                if self_ty_has_vid {\n+                                    err.note(&format!(\n+                                        \"`{}` would have to be implemented for the type `{}`\",\n+                                        expected_trait_ref,\n+                                        expected_trait_ref.self_ty(),\n+                                    ));\n+                                } else {\n+                                    err.note(&format!(\n+                                        \"`{}` must implement `{}`\",\n+                                        expected_trait_ref.self_ty(),\n+                                        expected_trait_ref,\n+                                    ));\n+                                }\n                             }\n                         },\n                     ),\n@@ -347,10 +385,9 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                         ));\n                     } else {\n                         err.note(&format!(\n-                            \"but `{}` is actually implemented for the type `{}`, \\\n-                             for some lifetime `'{}`\",\n-                            actual_trait_ref,\n+                            \"but `{}` actually implements `{}`, for some lifetime `'{}`\",\n                             actual_trait_ref.self_ty(),\n+                            actual_trait_ref,\n                             n\n                         ));\n                     }"}, {"sha": "5a074fe345734692c2d85a7d7dfb90e548cea8fc", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -41,8 +41,8 @@ LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `tuple_one`,\n-   = note: `TheTrait<(&'0 isize, &'1 isize)>` would have to be implemented for the type `Tuple`, for any two lifetimes `'0` and `'1`\n-   = note: but `TheTrait<(&'2 isize, &'2 isize)>` is actually implemented for the type `Tuple`, for some lifetime `'2`\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n+   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n@@ -51,8 +51,8 @@ LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `tuple_two`,\n-   = note: `TheTrait<(&'0 isize, &'1 isize)>` would have to be implemented for the type `Tuple`, for any two lifetimes `'0` and `'1`\n-   = note: but `TheTrait<(&'2 isize, &'2 isize)>` is actually implemented for the type `Tuple`, for some lifetime `'2`\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n+   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:105:5\n@@ -61,8 +61,8 @@ LL |     tuple_four::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `tuple_four`,\n-   = note: `TheTrait<(&'0 isize, &'1 isize)>` would have to be implemented for the type `Tuple`, for any two lifetimes `'0` and `'1`\n-   = note: but `TheTrait<(&'2 isize, &'2 isize)>` is actually implemented for the type `Tuple`, for some lifetime `'2`\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n+   = note: but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d0bcebeac4f70e5eb9fbf035d45c786a1f3662ed", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -4,8 +4,8 @@ error: implementation of `Deserialize` is not general enough\n LL |     assert_deserialize_owned::<&'static str>(); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `Deserialize<'0>` would have to be implemented for the type `&'static str`, for any lifetime `'0`\n-   = note: but `Deserialize<'1>` is actually implemented for the type `&str`, for some lifetime `'1`\n+   = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`\n+   = note: but `&str` actually implements `Deserialize<'1>`, for some lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "aa91314b350a1475ae970d0a5011976f56576b25", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -5,8 +5,8 @@ LL | fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n    |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `want_foo2`,\n-   = note: `Foo<(&'0 isize, &'1 isize)>` would have to be implemented for the type `SomeStruct`, for any two lifetimes `'0` and `'1`\n-   = note: but `Foo<(&'2 isize, &'2 isize)>` is actually implemented for the type `SomeStruct`, for some lifetime `'2`\n+   = note: `SomeStruct` must implement `Foo<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`\n+   = note: but `SomeStruct` actually implements `Foo<(&'2 isize, &'2 isize)>`, for some lifetime `'2`\n \n error: aborting due to previous error\n "}, {"sha": "91b5db6cd664fe76ff4f9f5e95af38b330071145", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -5,8 +5,8 @@ LL |     foo::<()>(); //~ ERROR not general enough\n    |     ^^^^^^^^^\n    |\n    = note: Due to a where-clause on `foo`,\n-   = note: `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` would have to be implemented for the type `()`\n-   = note: but `Trait<fn(std::cell::Cell<&'0 u32>)>` is actually implemented for the type `()`, for some lifetime `'0`\n+   = note: `()` must implement `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>`\n+   = note: but `()` actually implements `Trait<fn(std::cell::Cell<&'0 u32>)>`, for some lifetime `'0`\n \n error: aborting due to previous error\n "}, {"sha": "24edcd910764ef08ca5748eb5046ae935074fc5b", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -5,8 +5,8 @@ LL |     want_hrtb::<StaticInt>() //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `want_hrtb`,\n-   = note: `Foo<&'0 isize>` would have to be implemented for the type `StaticInt`, for any lifetime `'0`\n-   = note: but `Foo<&'1 isize>` is actually implemented for the type `StaticInt`, for some lifetime `'1`\n+   = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`\n+   = note: but `StaticInt` actually implements `Foo<&'1 isize>`, for some lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}, {"sha": "a87fa6d3012da8a999319fa5b4e66eaf79f452fd", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -5,8 +5,8 @@ LL |     foo_hrtb_bar_not(&mut t); //~ ERROR not general enough\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: Due to a where-clause on `foo_hrtb_bar_not`,\n-   = note: `Foo<&'0 isize>` would have to be implemented for the type `&mut T`, for any lifetime `'0`\n-   = note: but `Foo<&'1 isize>` is actually implemented for the type `&mut T`, for some lifetime `'1`\n+   = note: `&mut T` must implement `Foo<&'0 isize>`, for any lifetime `'0`\n+   = note: but `&mut T` actually implements `Foo<&'1 isize>`, for some lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "442d32eb9f1e9e9d2d919d2c9b11972d98cc08a0", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/489bc4a2c6ec47eb35dc066247e11f335b278333/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=489bc4a2c6ec47eb35dc066247e11f335b278333", "patch": "@@ -4,8 +4,8 @@ error: implementation of `Deserialize` is not general enough\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `Deserialize<'0>` would have to be implemented for the type `&'static str`, for any lifetime `'0`\n-   = note: but `Deserialize<'1>` is actually implemented for the type `&str`, for some lifetime `'1`\n+   = note: `&'static str` must implement `Deserialize<'0>`, for any lifetime `'0`\n+   = note: but `&str` actually implements `Deserialize<'1>`, for some lifetime `'1`\n \n error: aborting due to previous error\n "}]}