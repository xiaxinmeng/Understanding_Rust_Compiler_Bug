{"sha": "b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5M2M2YmM1NTc1ZGI0YWNjNWFhNTg2N2I2ZjBjYzBkZDM3ODU4ZjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-18T11:50:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:25Z"}, "message": "simplify", "tree": {"sha": "accf81be7c1f5c3a310394c0b6a1df941664c5ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/accf81be7c1f5c3a310394c0b6a1df941664c5ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4", "html_url": "https://github.com/rust-lang/rust/commit/b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789772e8e5137c3769aa36b2a3c85ffec949e40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/789772e8e5137c3769aa36b2a3c85ffec949e40e", "html_url": "https://github.com/rust-lang/rust/commit/789772e8e5137c3769aa36b2a3c85ffec949e40e"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "35bdbafbfd55c8f042d209665bb5a536ee62d245", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 52, "deletions": 32, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=b93c6bc5575db4acc5aa5867b6f0cc0dd37858f4", "patch": "@@ -33,48 +33,68 @@ impl InputModuleItems {\n         let source = module_id.source(&module_tree);\n         let file_id = source.file_id;\n         let source = ModuleSource::from_source_item_id(db, source);\n-        let file_items = db.file_items(file_id);\n-        let fill = |acc: &mut InputModuleItems, items: &mut Iterator<Item = ast::ItemOrMacro>| {\n-            for item in items {\n-                match item {\n-                    ast::ItemOrMacro::Item(it) => {\n-                        acc.add_item(file_id, &file_items, it);\n-                    }\n-                    ast::ItemOrMacro::Macro(macro_call) => {\n-                        let item_id = file_items.id_of_unchecked(macro_call.syntax());\n-                        let loc = MacroCallLoc {\n-                            source_root_id,\n-                            module_id,\n-                            source_item_id: SourceItemId {\n-                                file_id,\n-                                item_id: Some(item_id),\n-                            },\n-                        };\n-                        let id = loc.id(db);\n-                        let file_id = HirFileId::from(id);\n-                        let file_items = db.file_items(file_id);\n-                        //FIXME: expand recursively\n-                        for item in db.hir_source_file(file_id).items() {\n-                            acc.add_item(file_id, &file_items, item);\n-                        }\n-                    }\n-                }\n-            }\n-        };\n-\n         let mut res = InputModuleItems::default();\n         match source {\n-            ModuleSource::SourceFile(it) => fill(&mut res, &mut it.items_with_macros()),\n+            ModuleSource::SourceFile(it) => res.fill(\n+                db,\n+                source_root_id,\n+                module_id,\n+                file_id,\n+                &mut it.items_with_macros(),\n+            ),\n             ModuleSource::Module(it) => {\n                 if let Some(item_list) = it.item_list() {\n-                    fill(&mut res, &mut item_list.items_with_macros())\n+                    res.fill(\n+                        db,\n+                        source_root_id,\n+                        module_id,\n+                        file_id,\n+                        &mut item_list.items_with_macros(),\n+                    )\n                 }\n             }\n         };\n         Arc::new(res)\n     }\n \n-    pub(crate) fn add_item(\n+    fn fill(\n+        &mut self,\n+        db: &impl HirDatabase,\n+        source_root_id: SourceRootId,\n+        module_id: ModuleId,\n+        file_id: HirFileId,\n+        items: &mut Iterator<Item = ast::ItemOrMacro>,\n+    ) {\n+        let file_items = db.file_items(file_id);\n+\n+        for item in items {\n+            match item {\n+                ast::ItemOrMacro::Item(it) => {\n+                    self.add_item(file_id, &file_items, it);\n+                }\n+                ast::ItemOrMacro::Macro(macro_call) => {\n+                    let item_id = file_items.id_of_unchecked(macro_call.syntax());\n+                    let loc = MacroCallLoc {\n+                        source_root_id,\n+                        module_id,\n+                        source_item_id: SourceItemId {\n+                            file_id,\n+                            item_id: Some(item_id),\n+                        },\n+                    };\n+                    let id = loc.id(db);\n+                    let file_id = HirFileId::from(id);\n+                    let file_items = db.file_items(file_id);\n+                    //FIXME: expand recursively\n+                    for item in db.hir_source_file(file_id).items() {\n+                        self.add_item(file_id, &file_items, item);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn add_item(\n         &mut self,\n         file_id: HirFileId,\n         file_items: &SourceFileItems,"}]}