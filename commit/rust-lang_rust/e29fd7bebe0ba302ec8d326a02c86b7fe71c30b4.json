{"sha": "e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOWZkN2JlYmUwYmEzMDJlYzhkMzI2YTAyYzg2YjdmZTcxYzMwYjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-15T01:06:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-15T01:06:52Z"}, "message": "Only put `{` on a newline in a match arm where necessary\n\nFixes #3005", "tree": {"sha": "ca331c293dc780c657dd0cd3ca0fb059be1c4e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca331c293dc780c657dd0cd3ca0fb059be1c4e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4", "html_url": "https://github.com/rust-lang/rust/commit/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8c1fea72dee881b602d850422568b1f8c14d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8c1fea72dee881b602d850422568b1f8c14d12", "html_url": "https://github.com/rust-lang/rust/commit/2f8c1fea72dee881b602d850422568b1f8c14d12"}], "stats": {"total": 126, "additions": 58, "deletions": 68}, "files": [{"sha": "eb9771a2356a6c2c63a2910f37ee38ee9ce9cb3a", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4", "patch": "@@ -74,7 +74,7 @@ use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use source_map::SpanUtils;\n use utils::{\n-    first_line_width, last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n+    self, first_line_width, last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n     trimmed_last_line_width, wrap_str,\n };\n \n@@ -130,7 +130,7 @@ enum ChainItemKind {\n impl ChainItemKind {\n     fn is_block_like(&self, context: &RewriteContext, reps: &str) -> bool {\n         match self {\n-            ChainItemKind::Parent(ref expr) => is_block_expr(context, expr, reps),\n+            ChainItemKind::Parent(ref expr) => utils::is_block_expr(context, expr, reps),\n             ChainItemKind::MethodCall(..)\n             | ChainItemKind::StructField(..)\n             | ChainItemKind::TupleField(..)\n@@ -845,38 +845,6 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n     }\n }\n \n-// States whether an expression's last line exclusively consists of closing\n-// parens, braces, and brackets in its idiomatic formatting.\n-fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool {\n-    match expr.node {\n-        ast::ExprKind::Mac(..)\n-        | ast::ExprKind::Call(..)\n-        | ast::ExprKind::MethodCall(..)\n-        | ast::ExprKind::Array(..)\n-        | ast::ExprKind::Struct(..)\n-        | ast::ExprKind::While(..)\n-        | ast::ExprKind::WhileLet(..)\n-        | ast::ExprKind::If(..)\n-        | ast::ExprKind::IfLet(..)\n-        | ast::ExprKind::Block(..)\n-        | ast::ExprKind::Loop(..)\n-        | ast::ExprKind::ForLoop(..)\n-        | ast::ExprKind::Match(..) => repr.contains('\\n'),\n-        ast::ExprKind::Paren(ref expr)\n-        | ast::ExprKind::Binary(_, _, ref expr)\n-        | ast::ExprKind::Index(_, ref expr)\n-        | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n-        | ast::ExprKind::Try(ref expr)\n-        | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n-        // This can only be a string lit\n-        ast::ExprKind::Lit(_) => {\n-            repr.contains('\\n') && trimmed_last_line_width(repr) <= context.config.tab_spaces()\n-        }\n-        _ => false,\n-    }\n-}\n-\n /// Remove try operators (`?`s) that appear in the given string. If removing\n /// them leaves an empty line, remove that line as well unless it is the first\n /// line (we need the first newline for detecting pre/post comment)."}, {"sha": "24f5548397228221133458dbf3919ea6ccedab69", "filename": "src/matches.rs", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4", "patch": "@@ -247,52 +247,42 @@ fn rewrite_match_arm(\n     } else {\n         (mk_sp(arm.span().lo(), arm.span().lo()), String::new())\n     };\n-    let pats_str =\n-        rewrite_match_pattern(context, &ptr_vec_to_ref_vec(&arm.pats), &arm.guard, shape)\n-            .and_then(|pats_str| {\n-                combine_strs_with_missing_comments(\n-                    context,\n-                    &attrs_str,\n-                    &pats_str,\n-                    missing_span,\n-                    shape,\n-                    false,\n-                )\n-            })?;\n \n-    let arrow_span = mk_sp(arm.pats.last().unwrap().span.hi(), arm.body.span.lo());\n-    rewrite_match_body(\n-        context,\n-        &arm.body,\n-        &pats_str,\n-        shape,\n-        arm.guard.is_some(),\n-        arrow_span,\n-        is_last,\n-    )\n-}\n-\n-fn rewrite_match_pattern(\n-    context: &RewriteContext,\n-    pats: &[&ast::Pat],\n-    guard: &Option<ast::Guard>,\n-    shape: Shape,\n-) -> Option<String> {\n     // Patterns\n     // 5 = ` => {`\n     let pat_shape = shape.sub_width(5)?;\n-    let pats_str = rewrite_multiple_patterns(context, pats, pat_shape)?;\n+    let pats_str = rewrite_multiple_patterns(context, &ptr_vec_to_ref_vec(&arm.pats), pat_shape)?;\n \n     // Guard\n+    let block_like_pat = trimmed_last_line_width(&pats_str) <= context.config.tab_spaces();\n+    let new_line_guard = pats_str.contains('\\n') && !block_like_pat;\n     let guard_str = rewrite_guard(\n         context,\n-        guard,\n+        &arm.guard,\n         shape,\n         trimmed_last_line_width(&pats_str),\n-        pats_str.contains('\\n'),\n+        new_line_guard,\n     )?;\n \n-    Some(format!(\"{}{}\", pats_str, guard_str))\n+    let lhs_str = combine_strs_with_missing_comments(\n+        context,\n+        &attrs_str,\n+        &format!(\"{}{}\", pats_str, guard_str),\n+        missing_span,\n+        shape,\n+        false,\n+    )?;\n+\n+    let arrow_span = mk_sp(arm.pats.last().unwrap().span.hi(), arm.body.span.lo());\n+    rewrite_match_body(\n+        context,\n+        &arm.body,\n+        &lhs_str,\n+        shape,\n+        guard_str.contains('\\n'),\n+        arrow_span,\n+        is_last,\n+    )\n }\n \n fn block_can_be_flattened<'a>("}, {"sha": "7d9272fe7e325eb7b20600d0818f10c8989f52b6", "filename": "src/utils.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=e29fd7bebe0ba302ec8d326a02c86b7fe71c30b4", "patch": "@@ -417,3 +417,35 @@ pub fn starts_with_newline(s: &str) -> bool {\n pub fn first_line_ends_with(s: &str, c: char) -> bool {\n     s.lines().next().map_or(false, |l| l.ends_with(c))\n }\n+\n+// States whether an expression's last line exclusively consists of closing\n+// parens, braces, and brackets in its idiomatic formatting.\n+pub fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool {\n+    match expr.node {\n+        ast::ExprKind::Mac(..)\n+        | ast::ExprKind::Call(..)\n+        | ast::ExprKind::MethodCall(..)\n+        | ast::ExprKind::Array(..)\n+        | ast::ExprKind::Struct(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::Block(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Match(..) => repr.contains('\\n'),\n+        ast::ExprKind::Paren(ref expr)\n+        | ast::ExprKind::Binary(_, _, ref expr)\n+        | ast::ExprKind::Index(_, ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n+        // This can only be a string lit\n+        ast::ExprKind::Lit(_) => {\n+            repr.contains('\\n') && trimmed_last_line_width(repr) <= context.config.tab_spaces()\n+        }\n+        _ => false,\n+    }\n+}"}]}