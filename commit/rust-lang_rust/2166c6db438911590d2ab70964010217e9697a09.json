{"sha": "2166c6db438911590d2ab70964010217e9697a09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNjZjNmRiNDM4OTExNTkwZDJhYjcwOTY0MDEwMjE3ZTk2OTdhMDk=", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T19:46:59Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T19:46:59Z"}, "message": "Add comments and unit tests for new SparseBitMatrix methods", "tree": {"sha": "61a28f9eb922966fce5037da3a8c00b042e0bdf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a28f9eb922966fce5037da3a8c00b042e0bdf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2166c6db438911590d2ab70964010217e9697a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2166c6db438911590d2ab70964010217e9697a09", "html_url": "https://github.com/rust-lang/rust/commit/2166c6db438911590d2ab70964010217e9697a09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2166c6db438911590d2ab70964010217e9697a09/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e148b0cef3eccf06414c47841a525c7cc096f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e148b0cef3eccf06414c47841a525c7cc096f28", "html_url": "https://github.com/rust-lang/rust/commit/7e148b0cef3eccf06414c47841a525c7cc096f28"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "fad3b95cf43a9d0b2123cc99588cafa22ba8bc21", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2166c6db438911590d2ab70964010217e9697a09/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2166c6db438911590d2ab70964010217e9697a09/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=2166c6db438911590d2ab70964010217e9697a09", "patch": "@@ -1087,13 +1087,20 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         self.ensure_row(row).insert(column)\n     }\n \n+    /// Sets the cell at `(row, column)` to false. Put another way, delete\n+    /// `column` from the bitset for `row`. Has no effect if `row` does not\n+    /// exist.\n+    ///\n+    /// Returns `true` if this changed the matrix.\n     pub fn remove(&mut self, row: R, column: C) -> bool {\n         match self.rows.get_mut(row) {\n             Some(Some(row)) => row.remove(column),\n             _ => false,\n         }\n     }\n \n+    /// Sets all columns at `row` to false. Has no effect if `row` does\n+    /// not exist.\n     pub fn clear(&mut self, row: R) {\n         if let Some(Some(row)) = self.rows.get_mut(row) {\n             row.clear();\n@@ -1147,6 +1154,10 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }\n     }\n \n+    /// Interescts `row` with `set`. `set` can be either `BitSet` or\n+    /// `HybridBitSet`. Has no effect if `row` does not exist.\n+    ///\n+    /// Returns true if the row was changed.\n     pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool\n     where\n         HybridBitSet<C>: BitRelations<Set>,\n@@ -1157,6 +1168,10 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         }\n     }\n \n+    /// Subtracts `set from `row`. `set` can be either `BitSet` or\n+    /// `HybridBitSet`. Has no effect if `row` does not exist.\n+    ///\n+    /// Returns true if the row was changed.\n     pub fn subtract_row<Set>(&mut self, row: R, set: &Set) -> bool\n     where\n         HybridBitSet<C>: BitRelations<Set>,\n@@ -1167,6 +1182,10 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         }\n     }\n \n+    /// Unions `row` with `set`. `set` can be either `BitSet` or\n+    /// `HybridBitSet`.\n+    ///\n+    /// Returns true if the row was changed.\n     pub fn union_row<Set>(&mut self, row: R, set: &Set) -> bool\n     where\n         HybridBitSet<C>: BitRelations<Set>,"}, {"sha": "6ea249a0b693a60d5289298233086835557dfe2a", "filename": "compiler/rustc_index/src/bit_set/tests.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2166c6db438911590d2ab70964010217e9697a09/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2166c6db438911590d2ab70964010217e9697a09/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set%2Ftests.rs?ref=2166c6db438911590d2ab70964010217e9697a09", "patch": "@@ -304,6 +304,72 @@ fn sparse_matrix_iter() {\n     assert!(iter.next().is_none());\n }\n \n+#[test]\n+fn sparse_matrix_operations() {\n+    let mut matrix: SparseBitMatrix<usize, usize> = SparseBitMatrix::new(100);\n+    matrix.insert(3, 22);\n+    matrix.insert(3, 75);\n+    matrix.insert(2, 99);\n+    matrix.insert(4, 0);\n+\n+    let mut disjoint: HybridBitSet<usize> = HybridBitSet::new_empty(100);\n+    disjoint.insert(33);\n+\n+    let mut superset = HybridBitSet::new_empty(100);\n+    superset.insert(22);\n+    superset.insert(75);\n+    superset.insert(33);\n+\n+    let mut subset = HybridBitSet::new_empty(100);\n+    subset.insert(22);\n+\n+    // SparseBitMatrix::remove\n+    {\n+        let mut matrix = matrix.clone();\n+        matrix.remove(3, 22);\n+        assert!(!matrix.row(3).unwrap().contains(22));\n+        matrix.remove(0, 0);\n+        assert!(matrix.row(0).is_none());\n+    }\n+\n+    // SparseBitMatrix::clear\n+    {\n+        let mut matrix = matrix.clone();\n+        matrix.clear(3);\n+        assert!(!matrix.row(3).unwrap().contains(75));\n+        matrix.clear(0);\n+        assert!(matrix.row(0).is_none());\n+    }\n+\n+    // SparseBitMatrix::intersect_row\n+    {\n+        let mut matrix = matrix.clone();\n+        assert!(!matrix.intersect_row(2, &superset));\n+        assert!(matrix.intersect_row(2, &subset));\n+        matrix.intersect_row(0, &disjoint);\n+        assert!(matrix.row(0).is_none());\n+    }\n+\n+     // SparseBitMatrix::subtract_row\n+     {\n+        let mut matrix = matrix.clone();\n+        assert!(!matrix.subtract_row(2, &disjoint));\n+        assert!(matrix.subtract_row(2, &subset));\n+        assert!(matrix.subtract_row(2, &superset));\n+        matrix.intersect_row(0, &disjoint);\n+        assert!(matrix.row(0).is_none());\n+     }\n+\n+     // SparseBitMatrix::union_row \n+     {\n+        let mut matrix = matrix.clone();\n+        assert!(!matrix.union_row(2, &subset));\n+        assert!(matrix.union_row(2, &disjoint));\n+        matrix.union_row(0, &disjoint);\n+        assert!(matrix.row(0).is_some());\n+     }\n+}\n+\n /// Merge dense hybrid set into empty sparse hybrid set.\n #[bench]\n fn union_hybrid_sparse_empty_to_dense(b: &mut Bencher) {"}]}