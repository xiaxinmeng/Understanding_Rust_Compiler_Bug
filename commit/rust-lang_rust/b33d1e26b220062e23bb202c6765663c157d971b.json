{"sha": "b33d1e26b220062e23bb202c6765663c157d971b", "node_id": "C_kwDOAAsO6NoAKGIzM2QxZTI2YjIyMDA2MmUyM2JiMjAyYzY3NjU2NjNjMTU3ZDk3MWI", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-12-07T18:47:51Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-12-09T01:38:23Z"}, "message": "Make `debuginfo_offset_calcuation` generic so we can resuse the logic\n\nThis will allow us to separate the act of calculating the offsets from\ncreating LLVM IR that performs the actions.", "tree": {"sha": "7c9e5e907e01f000d6fd7ec4dcdbcb056cfb11e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9e5e907e01f000d6fd7ec4dcdbcb056cfb11e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b33d1e26b220062e23bb202c6765663c157d971b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b33d1e26b220062e23bb202c6765663c157d971b", "html_url": "https://github.com/rust-lang/rust/commit/b33d1e26b220062e23bb202c6765663c157d971b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b33d1e26b220062e23bb202c6765663c157d971b/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525d0dd6e223357bc2520590cd1d9377445e0dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/525d0dd6e223357bc2520590cd1d9377445e0dc9", "html_url": "https://github.com/rust-lang/rust/commit/525d0dd6e223357bc2520590cd1d9377445e0dc9"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "8935d42548f5fbb38ed4eaff44c7d4edc04fde7a", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b33d1e26b220062e23bb202c6765663c157d971b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33d1e26b220062e23bb202c6765663c157d971b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=b33d1e26b220062e23bb202c6765663c157d971b", "patch": "@@ -3,12 +3,12 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::Abi;\n-use rustc_target::abi::Size;\n+use rustc_target::abi::{Abi, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -76,6 +76,33 @@ impl<'tcx, S: Copy, L: Copy> DebugScope<S, L> {\n     }\n }\n \n+trait DebugInfoOffsetLocation<'tcx, Bx> {\n+    fn deref(&self, bx: &mut Bx) -> Self;\n+    fn layout(&self) -> TyAndLayout<'tcx>;\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self;\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n+}\n+\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n+    for PlaceRef<'tcx, Bx::Value>\n+{\n+    fn deref(&self, bx: &mut Bx) -> Self {\n+        bx.load_operand(*self).deref(bx.cx())\n+    }\n+\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+        PlaceRef::project_field(*self, bx, field.index())\n+    }\n+\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n+        self.project_downcast(bx, variant)\n+    }\n+}\n+\n struct DebugInfoOffset<T> {\n     /// Offset from the `base` used to calculate the debuginfo offset.\n     direct_offset: Size,\n@@ -86,12 +113,17 @@ struct DebugInfoOffset<T> {\n     result: T,\n }\n \n-fn calculate_debuginfo_offset<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+fn calculate_debuginfo_offset<\n+    'a,\n+    'tcx,\n+    Bx: BuilderMethods<'a, 'tcx>,\n+    L: DebugInfoOffsetLocation<'tcx, Bx>,\n+>(\n     bx: &mut Bx,\n     local: mir::Local,\n     var: &PerLocalVarDebugInfo<'tcx, Bx::DIVariable>,\n-    base: PlaceRef<'tcx, Bx::Value>,\n-) -> DebugInfoOffset<PlaceRef<'tcx, Bx::Value>> {\n+    base: L,\n+) -> DebugInfoOffset<L> {\n     let mut direct_offset = Size::ZERO;\n     // FIXME(eddyb) use smallvec here.\n     let mut indirect_offsets = vec![];\n@@ -101,16 +133,15 @@ fn calculate_debuginfo_offset<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         match *elem {\n             mir::ProjectionElem::Deref => {\n                 indirect_offsets.push(Size::ZERO);\n-                place = bx.load_operand(place).deref(bx.cx());\n+                place = place.deref(bx);\n             }\n             mir::ProjectionElem::Field(field, _) => {\n-                let i = field.index();\n                 let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n-                *offset += place.layout.fields.offset(i);\n-                place = place.project_field(bx, i);\n+                *offset += place.layout().fields.offset(field.index());\n+                place = place.project_field(bx, field);\n             }\n             mir::ProjectionElem::Downcast(_, variant) => {\n-                place = place.project_downcast(bx, variant);\n+                place = place.downcast(bx, variant);\n             }\n             _ => span_bug!(\n                 var.source_info.span,"}]}