{"sha": "6b1494885c724a4875daa0e6f56e2499647e1e59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTQ5NDg4NWM3MjRhNDg3NWRhYTBlNmY1NmUyNDk5NjQ3ZTFlNTk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-05-11T22:33:42Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-05-11T22:33:42Z"}, "message": "Merge pull request #48 from oli-obk/newlines\n\nhandle windows newlines", "tree": {"sha": "77d3d75e650e7260a43dc5955c304cffb95509ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77d3d75e650e7260a43dc5955c304cffb95509ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1494885c724a4875daa0e6f56e2499647e1e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1494885c724a4875daa0e6f56e2499647e1e59", "html_url": "https://github.com/rust-lang/rust/commit/6b1494885c724a4875daa0e6f56e2499647e1e59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1494885c724a4875daa0e6f56e2499647e1e59/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541ccbe7000fdafc459eb025faf2d64ec21ba856", "url": "https://api.github.com/repos/rust-lang/rust/commits/541ccbe7000fdafc459eb025faf2d64ec21ba856", "html_url": "https://github.com/rust-lang/rust/commit/541ccbe7000fdafc459eb025faf2d64ec21ba856"}, {"sha": "cd3b032e11f71ecdb640d9270c63a2d2019eb315", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3b032e11f71ecdb640d9270c63a2d2019eb315", "html_url": "https://github.com/rust-lang/rust/commit/cd3b032e11f71ecdb640d9270c63a2d2019eb315"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "f0aebe7c94f09026384afb92abcba8a92b1512e0", "filename": "src/changes.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6b1494885c724a4875daa0e6f56e2499647e1e59/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1494885c724a4875daa0e6f56e2499647e1e59/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=6b1494885c724a4875daa0e6f56e2499647e1e59", "patch": "@@ -18,8 +18,10 @@ use std::collections::HashMap;\n use syntax::codemap::{CodeMap, Span, BytePos};\n use std::fmt;\n use std::fs::File;\n-use std::io::Write;\n+use std::io::{Write, stdout};\n use WriteMode;\n+use NEWLINE_STYLE;\n+use NewlineStyle;\n \n // This is basically a wrapper around a bunch of Ropes which makes it convenient\n // to work with libsyntax. It is badly named.\n@@ -148,6 +150,28 @@ impl<'a> ChangeSet<'a> {\n                       -> Result<Option<String>, ::std::io::Error> {\n         let text = &self.file_map[filename];\n \n+        // prints all newlines either as `\\n` or as `\\r\\n`\n+        fn write_system_newlines<T>(\n+            mut writer: T,\n+            text: &StringBuffer)\n+            -> Result<(), ::std::io::Error>\n+            where T: Write,\n+        {\n+            match NEWLINE_STYLE {\n+                NewlineStyle::Unix => write!(writer, \"{}\", text),\n+                NewlineStyle::Windows => {\n+                    for (c, _) in text.chars() {\n+                        match c {\n+                            '\\n' => try!(write!(writer, \"\\r\\n\")),\n+                            '\\r' => continue,\n+                            c => try!(write!(writer, \"{}\", c)),\n+                        }\n+                    }\n+                    Ok(())\n+                },\n+            }\n+        }\n+\n         match mode {\n             WriteMode::Overwrite => {\n                 // Do a little dance to make writing safer - write to a temp file\n@@ -157,24 +181,30 @@ impl<'a> ChangeSet<'a> {\n                 let bk_name = filename.to_owned() + \".bk\";\n                 {\n                     // Write text to temp file\n-                    let mut tmp_file = try!(File::create(&tmp_name));\n-                    try!(write!(tmp_file, \"{}\", text));\n+                    let tmp_file = try!(File::create(&tmp_name));\n+                    try!(write_system_newlines(tmp_file, text));\n                 }\n \n                 try!(::std::fs::rename(filename, bk_name));\n                 try!(::std::fs::rename(tmp_name, filename));\n             }\n             WriteMode::NewFile(extn) => {\n                 let filename = filename.to_owned() + \".\" + extn;\n-                let mut file = try!(File::create(&filename));\n-                try!(write!(file, \"{}\", text));\n+                let file = try!(File::create(&filename));\n+                try!(write_system_newlines(file, text));\n             }\n             WriteMode::Display => {\n                 println!(\"{}:\\n\", filename);\n-                println!(\"{}\", text);\n+                let stdout = stdout();\n+                let stdout_lock = stdout.lock();\n+                try!(write_system_newlines(stdout_lock, text));\n             }\n             WriteMode::Return(_) => {\n-                return Ok(Some(text.to_string()));\n+                // io::Write is not implemented for String, working around with Vec<u8>\n+                let mut v = Vec::new();\n+                try!(write_system_newlines(&mut v, text));\n+                // won't panic, we are writing correct utf8\n+                return Ok(Some(String::from_utf8(v).unwrap()));\n             }\n         }\n "}, {"sha": "34a801dd36935de9ba631dcc8eca90474c9a952d", "filename": "src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b1494885c724a4875daa0e6f56e2499647e1e59/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1494885c724a4875daa0e6f56e2499647e1e59/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6b1494885c724a4875daa0e6f56e2499647e1e59", "patch": "@@ -59,6 +59,7 @@ const LEEWAY: usize = 5;\n const MAX_WIDTH: usize = 100;\n const MIN_STRING: usize = 10;\n const TAB_SPACES: usize = 4;\n+const NEWLINE_STYLE: NewlineStyle = NewlineStyle::Unix;\n const FN_BRACE_STYLE: BraceStyle = BraceStyle::SameLineWhere;\n const FN_RETURN_INDENT: ReturnIndent = ReturnIndent::WithArgs;\n // When we get scoped annotations, we should have rustfmt::skip.\n@@ -75,6 +76,12 @@ pub enum WriteMode {\n     Return(&'static Fn(HashMap<String, String>)),\n }\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+enum NewlineStyle {\n+    Windows, // \\r\\n\n+    Unix, // \\n\n+}\n+\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n enum BraceStyle {\n     AlwaysNextLine,\n@@ -120,7 +127,8 @@ fn fmt_lines(changes: &mut ChangeSet) {\n         let mut cur_line = 1;\n         let mut newline_count = 0;\n         for (c, b) in text.chars() {\n-            if c == '\\n' { // TOOD test for \\r too\n+            if c == '\\r' { continue; }\n+            if c == '\\n' {\n                 // Check for (and record) trailing whitespace.\n                 if let Some(lw) = last_wspace {\n                     trims.push((cur_line, lw, b));"}]}