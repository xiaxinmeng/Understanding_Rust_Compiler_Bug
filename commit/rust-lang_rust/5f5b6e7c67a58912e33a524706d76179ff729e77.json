{"sha": "5f5b6e7c67a58912e33a524706d76179ff729e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNWI2ZTdjNjdhNTg5MTJlMzNhNTI0NzA2ZDc2MTc5ZmY3MjllNzc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-01T11:49:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:40:55Z"}, "message": "Tidy.", "tree": {"sha": "b9d1a6f643c2be497dfcbc843954eecc0a270582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d1a6f643c2be497dfcbc843954eecc0a270582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5b6e7c67a58912e33a524706d76179ff729e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5b6e7c67a58912e33a524706d76179ff729e77", "html_url": "https://github.com/rust-lang/rust/commit/5f5b6e7c67a58912e33a524706d76179ff729e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5b6e7c67a58912e33a524706d76179ff729e77/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "html_url": "https://github.com/rust-lang/rust/commit/9694ab9e18f0b6b306dafaaccb8cc33a293302bd"}], "stats": {"total": 85, "additions": 60, "deletions": 25}, "files": [{"sha": "26e287037f72cdd84bfc5ce73bf8f7ff163ad864", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=5f5b6e7c67a58912e33a524706d76179ff729e77", "patch": "@@ -948,7 +948,10 @@ pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'\n     visitor.visit_defaultness(defaultness);\n }\n \n-pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData<'v>) {\n+pub fn walk_struct_def<'v, V: Visitor<'v>>(\n+    visitor: &mut V,\n+    struct_definition: &'v VariantData<'v>,\n+) {\n     if let Some(ctor_hir_id) = struct_definition.ctor_hir_id() {\n         visitor.visit_id(ctor_hir_id);\n     }"}, {"sha": "83869951ea2a15afe36876aae620f6520955200f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5f5b6e7c67a58912e33a524706d76179ff729e77", "patch": "@@ -1579,7 +1579,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             output_lifetime_params: Vec<hir::GenericParam>,\n         }\n \n-        impl<'r, 'a, 'v, 'hir> hir::intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n+        impl<'r, 'a, 'v, 'hir> hir::intravisit::Visitor<'v>\n+        for ImplTraitLifetimeCollector<'r, 'a, 'hir>\n+        {\n             fn nested_visit_map<'this>(\n                 &'this mut self,\n             ) -> hir::intravisit::NestedVisitorMap<'this, 'v> {"}, {"sha": "4492845acb808280a72831e5987aa4d05550b11f", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=5f5b6e7c67a58912e33a524706d76179ff729e77", "patch": "@@ -164,7 +164,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_mod(&mut self, m: &Mod) -> hir::Mod<'hir> {\n         hir::Mod {\n             inner: m.inner,\n-            item_ids: self.arena.alloc_from_iter(m.items.iter().flat_map(|x| self.lower_item_id(x))),\n+            item_ids: self.arena.alloc_from_iter(\n+                m.items.iter().flat_map(|x| self.lower_item_id(x))\n+            ),\n         }\n     }\n \n@@ -560,7 +562,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     });\n                 }\n \n-                let path = self.arena.alloc(self.lower_path_extra(ret_res, &path, ParamMode::Explicit, None));\n+                let path = self.lower_path_extra(ret_res, &path, ParamMode::Explicit, None);\n+                let path = self.arena.alloc(path);\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n@@ -667,7 +670,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 let res = self.expect_full_res_from_use(id).next().unwrap_or(Res::Err);\n                 let res = self.lower_res(res);\n-                let path = self.arena.alloc(self.lower_path_extra(res, &prefix, ParamMode::Explicit, None));\n+                let path = self.lower_path_extra(res, &prefix, ParamMode::Explicit, None);\n+                let path = self.arena.alloc(path);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n         }\n@@ -733,8 +737,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m) => {\n-                    hir::ForeignItemKind::Static(\n-                        self.arena.alloc(self.lower_ty(t, ImplTraitContext::disallowed()).into_inner()), m)\n+                    let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n+                    hir::ForeignItemKind::Static(self.arena.alloc(ty.into_inner()), m)\n                 }\n                 ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"macro shouldn't exist here\"),\n@@ -771,7 +775,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData<'hir> {\n         match *vdata {\n             VariantData::Struct(ref fields, recovered) => hir::VariantData::Struct(\n-                self.arena.alloc_from_iter(fields.iter().enumerate().map(|f| self.lower_struct_field(f))),\n+                self.arena.alloc_from_iter(\n+                    fields.iter().enumerate().map(|f| self.lower_struct_field(f))\n+                ),\n                 recovered,\n             ),\n             VariantData::Tuple(ref fields, id) => {\n@@ -823,15 +829,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n-            AssocItemKind::Const(ref ty, ref default) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::TraitItemKind::Const(\n-                    self.arena.alloc(self.lower_ty(ty, ImplTraitContext::disallowed()).into_inner()),\n+            AssocItemKind::Const(ref ty, ref default) => {\n+                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n+                let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                let ty = self.arena.alloc(ty.into_inner());\n+                (generics, hir::TraitItemKind::Const(\n+                    ty,\n                     default\n                         .as_ref()\n                         .map(|x| self.lower_const_body(i.span, Some(x))),\n-                ),\n-            ),\n+                ))\n+            },\n             AssocItemKind::Fn(ref sig, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) = self.lower_method_sig(\n@@ -913,13 +921,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n-            AssocItemKind::Const(ref ty, ref expr) => (\n-                self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::ImplItemKind::Const(\n-                    self.arena.alloc(self.lower_ty(ty, ImplTraitContext::disallowed()).into_inner()),\n+            AssocItemKind::Const(ref ty, ref expr) => {\n+                let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n+                let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                let ty = self.arena.alloc(ty.into_inner());\n+                (generics, hir::ImplItemKind::Const(\n+                    ty,\n                     self.lower_const_body(i.span, expr.as_deref()),\n-                ),\n-            ),\n+                ))\n+            },\n             AssocItemKind::Fn(ref sig, ref body) => {\n                 self.current_item = Some(i.span);\n                 let body_id = self.lower_maybe_async_body(\n@@ -1302,7 +1312,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     this.expr_block(P(body), AttrVec::new())\n                 });\n \n-            (this.arena.alloc_from_iter(parameters), this.expr(body_span, async_expr, AttrVec::new()))\n+            (\n+                this.arena.alloc_from_iter(parameters),\n+                this.expr(body_span, async_expr, AttrVec::new()),\n+            )\n         })\n     }\n "}, {"sha": "23133454bd9b50edc73e0c0ad2b1d17e4625ed6b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5f5b6e7c67a58912e33a524706d76179ff729e77", "patch": "@@ -996,7 +996,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n         self.perform_lint(cx, \"item\", item.hir_id, &item.vis, item.span, true);\n     }\n \n-    fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, foreign_item: &hir::ForeignItem<'tcx>) {\n+    fn check_foreign_item(\n+        &mut self,\n+        cx: &LateContext<'_, '_>,\n+        foreign_item: &hir::ForeignItem<'tcx>,\n+    ) {\n         self.perform_lint(cx, \"item\", foreign_item.hir_id, &foreign_item.vis,\n                           foreign_item.span, true);\n     }"}, {"sha": "bd2cbee2c348c52f05e0cda9a2798d7bb9550705", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=5f5b6e7c67a58912e33a524706d76179ff729e77", "patch": "@@ -246,7 +246,13 @@ impl NonSnakeCase {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n-    fn check_mod(&mut self, cx: &LateContext<'_, '_>, _: &'tcx hir::Mod<'tcx>, _: Span, id: hir::HirId) {\n+    fn check_mod(\n+        &mut self,\n+        cx: &LateContext<'_, '_>,\n+        _: &'tcx hir::Mod<'tcx>,\n+        _: Span,\n+        id: hir::HirId,\n+    ) {\n         if id != hir::CRATE_HIR_ID {\n             return;\n         }"}, {"sha": "b2c5ddd5bd4ffb8740ddd4937cf9e6a0581d2b9e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5f5b6e7c67a58912e33a524706d76179ff729e77", "patch": "@@ -2435,7 +2435,12 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n }\n \n #[allow(trivial_numeric_casts)]\n-pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant<'tcx>], id: hir::HirId) {\n+pub fn check_enum<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    sp: Span,\n+    vs: &'tcx [hir::Variant<'tcx>],\n+    id: hir::HirId,\n+) {\n     let def_id = tcx.hir().local_def_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated"}, {"sha": "a32c98068da5a443e7c09b991a96390406f5f494", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5b6e7c67a58912e33a524706d76179ff729e77/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=5f5b6e7c67a58912e33a524706d76179ff729e77", "patch": "@@ -32,7 +32,9 @@ use std::mem;\n // resolve_type_vars_in_body, which creates a new TypeTables which\n // doesn't contain any inference types.\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn resolve_type_vars_in_body(&self, body: &'tcx hir::Body<'tcx>) -> &'tcx ty::TypeckTables<'tcx> {\n+    pub fn resolve_type_vars_in_body(&self, body: &'tcx hir::Body<'tcx>)\n+        -> &'tcx ty::TypeckTables<'tcx>\n+    {\n         let item_id = self.tcx.hir().body_owner(body.id());\n         let item_def_id = self.tcx.hir().local_def_id(item_id);\n "}]}