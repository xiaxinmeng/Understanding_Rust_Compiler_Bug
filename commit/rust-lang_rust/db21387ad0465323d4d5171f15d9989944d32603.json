{"sha": "db21387ad0465323d4d5171f15d9989944d32603", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjEzODdhZDA0NjUzMjNkNGQ1MTcxZjE1ZDk5ODk5NDRkMzI2MDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T21:18:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:57Z"}, "message": "libsyntax: De-`@mut` `TtReader::repeat_idx`", "tree": {"sha": "d97e22c793fad02c1defc9f6694fa0bf2a4ab06c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97e22c793fad02c1defc9f6694fa0bf2a4ab06c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db21387ad0465323d4d5171f15d9989944d32603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db21387ad0465323d4d5171f15d9989944d32603", "html_url": "https://github.com/rust-lang/rust/commit/db21387ad0465323d4d5171f15d9989944d32603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db21387ad0465323d4d5171f15d9989944d32603/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3810bea0da90b49c23f004e0b08277bb88404d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/3810bea0da90b49c23f004e0b08277bb88404d85", "html_url": "https://github.com/rust-lang/rust/commit/3810bea0da90b49c23f004e0b08277bb88404d85"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "0c0571616d0062220d3db954ea7765d643764371", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/db21387ad0465323d4d5171f15d9989944d32603/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db21387ad0465323d4d5171f15d9989944d32603/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=db21387ad0465323d4d5171f15d9989944d32603", "patch": "@@ -36,7 +36,7 @@ pub struct TtReader {\n     stack: @mut TtFrame,\n     /* for MBE-style macro transcription */\n     priv interpolations: RefCell<HashMap<Ident, @named_match>>,\n-    repeat_idx: ~[uint],\n+    priv repeat_idx: RefCell<~[uint]>,\n     repeat_len: ~[uint],\n     /* cached: */\n     cur_tok: Token,\n@@ -63,7 +63,7 @@ pub fn new_tt_reader(sp_diag: @mut SpanHandler,\n             None => RefCell::new(HashMap::new()),\n             Some(x) => RefCell::new(x),\n         },\n-        repeat_idx: ~[],\n+        repeat_idx: RefCell::new(~[]),\n         repeat_len: ~[],\n         /* dummy values, never read: */\n         cur_tok: EOF,\n@@ -111,7 +111,8 @@ fn lookup_cur_matched_by_matched(r: &mut TtReader,\n           matched_seq(ref ads, _) => ads[*idx]\n         }\n     }\n-    r.repeat_idx.iter().fold(start, red)\n+    let repeat_idx = r.repeat_idx.borrow();\n+    repeat_idx.get().iter().fold(start, red)\n }\n \n fn lookup_cur_matched(r: &mut TtReader, name: Ident) -> @named_match {\n@@ -186,8 +187,10 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n         }\n \n         /* done with this set; pop or repeat? */\n-        if ! r.stack.dotdotdoted\n-            || { *r.repeat_idx.last() == *r.repeat_len.last() - 1 } {\n+        if ! r.stack.dotdotdoted || {\n+                let repeat_idx = r.repeat_idx.borrow();\n+                *repeat_idx.get().last() == *r.repeat_len.last() - 1\n+            } {\n \n             match r.stack.up {\n               None => {\n@@ -196,8 +199,11 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n               }\n               Some(tt_f) => {\n                 if r.stack.dotdotdoted {\n-                    r.repeat_idx.pop();\n-                    r.repeat_len.pop();\n+                    {\n+                        let mut repeat_idx = r.repeat_idx.borrow_mut();\n+                        repeat_idx.get().pop();\n+                        r.repeat_len.pop();\n+                    }\n                 }\n \n                 r.stack = tt_f;\n@@ -207,7 +213,10 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n \n         } else { /* repeat */\n             r.stack.idx = 0u;\n-            r.repeat_idx[r.repeat_idx.len() - 1u] += 1u;\n+            {\n+                let mut repeat_idx = r.repeat_idx.borrow_mut();\n+                repeat_idx.get()[repeat_idx.get().len() - 1u] += 1u;\n+            }\n             match r.stack.sep.clone() {\n               Some(tk) => {\n                 r.cur_tok = tk; /* repeat same span, I guess */\n@@ -264,15 +273,18 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                     r.stack.idx += 1u;\n                     return tt_next_token(r);\n                 } else {\n-                    r.repeat_len.push(len);\n-                    r.repeat_idx.push(0u);\n-                    r.stack = @mut TtFrame {\n-                        forest: tts,\n-                        idx: 0u,\n-                        dotdotdoted: true,\n-                        sep: sep,\n-                        up: Some(r.stack)\n-                    };\n+                    {\n+                        let mut repeat_idx = r.repeat_idx.borrow_mut();\n+                        r.repeat_len.push(len);\n+                        repeat_idx.get().push(0u);\n+                        r.stack = @mut TtFrame {\n+                            forest: tts,\n+                            idx: 0u,\n+                            dotdotdoted: true,\n+                            sep: sep,\n+                            up: Some(r.stack)\n+                        };\n+                    }\n                 }\n               }\n             }"}]}