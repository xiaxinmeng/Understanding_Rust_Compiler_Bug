{"sha": "0405d758a5d9db06994c4bc4ad6683d3afffd44a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDVkNzU4YTVkOWRiMDY5OTRjNGJjNGFkNjY4M2QzYWZmZmQ0NGE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-05T19:17:36Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-05T19:17:36Z"}, "message": "Simplify TokenStream FromStr", "tree": {"sha": "b6fff536dab0dfd9d4895f1d1fc4f82f299e7194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6fff536dab0dfd9d4895f1d1fc4f82f299e7194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0405d758a5d9db06994c4bc4ad6683d3afffd44a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0405d758a5d9db06994c4bc4ad6683d3afffd44a", "html_url": "https://github.com/rust-lang/rust/commit/0405d758a5d9db06994c4bc4ad6683d3afffd44a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0405d758a5d9db06994c4bc4ad6683d3afffd44a/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16a76aa158d0898d6a46d7bba7310150555a69b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a76aa158d0898d6a46d7bba7310150555a69b9", "html_url": "https://github.com/rust-lang/rust/commit/16a76aa158d0898d6a46d7bba7310150555a69b9"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "14c853c7752af973223f79851a936a9dea9a151e", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0405d758a5d9db06994c4bc4ad6683d3afffd44a/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0405d758a5d9db06994c4bc4ad6683d3afffd44a/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=0405d758a5d9db06994c4bc4ad6683d3afffd44a", "patch": "@@ -184,6 +184,7 @@ pub mod token_stream {\n             let (subtree, _token_map) =\n                 mbe::parse_to_token_tree(src).ok_or(\"Failed to parse from mbe\")?;\n \n+            let subtree = subtree_replace_token_ids_with_unspecified(subtree);\n             Ok(TokenStream { subtree })\n         }\n     }\n@@ -226,6 +227,44 @@ pub mod token_stream {\n             }\n         }\n     }\n+\n+    fn subtree_replace_token_ids_with_unspecified(subtree: tt::Subtree) -> tt::Subtree {\n+        tt::Subtree {\n+            delimiter: subtree\n+                .delimiter\n+                .map(|d| tt::Delimiter { id: tt::TokenId::unspecified(), ..d }),\n+            token_trees: subtree\n+                .token_trees\n+                .into_iter()\n+                .map(|t| token_tree_replace_token_ids_with_unspecified(t))\n+                .collect(),\n+        }\n+    }\n+\n+    fn token_tree_replace_token_ids_with_unspecified(tt: tt::TokenTree) -> tt::TokenTree {\n+        match tt {\n+            tt::TokenTree::Leaf(leaf) => {\n+                tt::TokenTree::Leaf(leaf_replace_token_ids_with_unspecified(leaf))\n+            }\n+            tt::TokenTree::Subtree(subtree) => {\n+                tt::TokenTree::Subtree(subtree_replace_token_ids_with_unspecified(subtree))\n+            }\n+        }\n+    }\n+\n+    fn leaf_replace_token_ids_with_unspecified(leaf: tt::Leaf) -> tt::Leaf {\n+        match leaf {\n+            tt::Leaf::Literal(lit) => {\n+                tt::Leaf::Literal(tt::Literal { id: tt::TokenId::unspecified(), ..lit })\n+            }\n+            tt::Leaf::Punct(punct) => {\n+                tt::Leaf::Punct(tt::Punct { id: tt::TokenId::unspecified(), ..punct })\n+            }\n+            tt::Leaf::Ident(ident) => {\n+                tt::Leaf::Ident(tt::Ident { id: tt::TokenId::unspecified(), ..ident })\n+            }\n+        }\n+    }\n }\n \n impl TokenStreamBuilder {\n@@ -277,42 +316,6 @@ impl server::FreeFunctions for Rustc {\n     }\n }\n \n-fn subtree_replace_token_ids_with_unspecified(subtree: tt::Subtree) -> tt::Subtree {\n-    tt::Subtree {\n-        delimiter: subtree.delimiter.map(|d| tt::Delimiter { id: tt::TokenId::unspecified(), ..d }),\n-        token_trees: subtree\n-            .token_trees\n-            .into_iter()\n-            .map(|t| token_tree_replace_token_ids_with_unspecified(t))\n-            .collect(),\n-    }\n-}\n-\n-fn token_tree_replace_token_ids_with_unspecified(tt: tt::TokenTree) -> tt::TokenTree {\n-    match tt {\n-        tt::TokenTree::Leaf(leaf) => {\n-            tt::TokenTree::Leaf(leaf_replace_token_ids_with_unspecified(leaf))\n-        }\n-        tt::TokenTree::Subtree(subtree) => {\n-            tt::TokenTree::Subtree(subtree_replace_token_ids_with_unspecified(subtree))\n-        }\n-    }\n-}\n-\n-fn leaf_replace_token_ids_with_unspecified(leaf: tt::Leaf) -> tt::Leaf {\n-    match leaf {\n-        tt::Leaf::Literal(lit) => {\n-            tt::Leaf::Literal(tt::Literal { id: tt::TokenId::unspecified(), ..lit })\n-        }\n-        tt::Leaf::Punct(punct) => {\n-            tt::Leaf::Punct(tt::Punct { id: tt::TokenId::unspecified(), ..punct })\n-        }\n-        tt::Leaf::Ident(ident) => {\n-            tt::Leaf::Ident(tt::Ident { id: tt::TokenId::unspecified(), ..ident })\n-        }\n-    }\n-}\n-\n impl server::TokenStream for Rustc {\n     fn new(&mut self) -> Self::TokenStream {\n         Self::TokenStream::new()\n@@ -322,8 +325,9 @@ impl server::TokenStream for Rustc {\n         stream.is_empty()\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n-        let (subtree, _) = mbe::parse_to_token_tree(src).expect(\"cannot parse string\");\n-        TokenStream::with_subtree(subtree_replace_token_ids_with_unspecified(subtree))\n+        use std::str::FromStr;\n+\n+        Self::TokenStream::from_str(src).expect(\"cannot parse string\")\n     }\n     fn to_string(&mut self, stream: &Self::TokenStream) -> String {\n         stream.to_string()"}]}