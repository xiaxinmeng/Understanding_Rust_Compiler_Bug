{"sha": "0e615caa8dc17b5d8ca87e956d37a37364cf5994", "node_id": "C_kwDOAAsO6NoAKDBlNjE1Y2FhOGRjMTdiNWQ4Y2E4N2U5NTZkMzdhMzczNjRjZjU5OTQ", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-10-03T08:51:18Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-10-03T08:51:18Z"}, "message": "check if const is ADT or not", "tree": {"sha": "8a3a8f294ae25615bb8cae03d7778d9174fb81bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3a8f294ae25615bb8cae03d7778d9174fb81bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e615caa8dc17b5d8ca87e956d37a37364cf5994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e615caa8dc17b5d8ca87e956d37a37364cf5994", "html_url": "https://github.com/rust-lang/rust/commit/0e615caa8dc17b5d8ca87e956d37a37364cf5994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e615caa8dc17b5d8ca87e956d37a37364cf5994/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b30ae6bab09197def6f61183715059b991faec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b30ae6bab09197def6f61183715059b991faec", "html_url": "https://github.com/rust-lang/rust/commit/b8b30ae6bab09197def6f61183715059b991faec"}], "stats": {"total": 93, "additions": 77, "deletions": 16}, "files": [{"sha": "451427a69807d7ba4134f66c2c04584290df7974", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e615caa8dc17b5d8ca87e956d37a37364cf5994/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e615caa8dc17b5d8ca87e956d37a37364cf5994/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=0e615caa8dc17b5d8ca87e956d37a37364cf5994", "patch": "@@ -899,10 +899,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n-        if obligation.references_error() {\n-            return;\n-        }\n-\n         candidates.vec.push(TransmutabilityCandidate);\n     }\n "}, {"sha": "5c8a76401d23397ce84ef1fcd8383f3e76e6413f", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e615caa8dc17b5d8ca87e956d37a37364cf5994/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e615caa8dc17b5d8ca87e956d37a37364cf5994/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=0e615caa8dc17b5d8ca87e956d37a37364cf5994", "patch": "@@ -11,9 +11,10 @@ use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n-use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n-use rustc_middle::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n+use rustc_middle::ty::{\n+    self, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n+    ToPolyTraitRef, ToPredicate, Ty, TyCtxt,\n+};\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n@@ -289,8 +290,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let scope = type_at(2).skip_binder();\n \n-        let assume =\n-            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3));\n+        let Some(assume) =\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3)) else {\n+                return Err(Unimplemented);\n+            };\n \n         let cause = obligation.cause.clone();\n "}, {"sha": "51f2eb8606a7f3d96b5612bf63bea12298e99715", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e615caa8dc17b5d8ca87e956d37a37364cf5994/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e615caa8dc17b5d8ca87e956d37a37364cf5994/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=0e615caa8dc17b5d8ca87e956d37a37364cf5994", "patch": "@@ -115,18 +115,23 @@ mod rustc {\n             tcx: TyCtxt<'tcx>,\n             param_env: ParamEnv<'tcx>,\n             c: Const<'tcx>,\n-        ) -> Self {\n+        ) -> Option<Self> {\n             use rustc_middle::ty::ScalarInt;\n             use rustc_middle::ty::TypeVisitable;\n             use rustc_span::symbol::sym;\n \n             let c = c.eval(tcx, param_env);\n \n             if let Some(err) = c.error_reported() {\n-                return Self { alignment: true, lifetimes: true, safety: true, validity: true };\n+                return Some(Self {\n+                    alignment: true,\n+                    lifetimes: true,\n+                    safety: true,\n+                    validity: true,\n+                });\n             }\n \n-            let adt_def = c.ty().ty_adt_def().expect(\"The given `Const` must be an ADT.\");\n+            let adt_def = c.ty().ty_adt_def()?;\n \n             assert_eq!(\n                 tcx.require_lang_item(LangItem::TransmuteOpts, None),\n@@ -148,12 +153,12 @@ mod rustc {\n                 fields[field_idx].unwrap_leaf() == ScalarInt::TRUE\n             };\n \n-            Self {\n+            Some(Self {\n                 alignment: get_field(sym::alignment),\n                 lifetimes: get_field(sym::lifetimes),\n                 safety: get_field(sym::safety),\n                 validity: get_field(sym::validity),\n-            }\n+            })\n         }\n     }\n }"}, {"sha": "bcb8b158edfc5b71081f5f2324dcc91ffed5d043", "filename": "src/test/ui/transmutability/issue-101739-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs?ref=0e615caa8dc17b5d8ca87e956d37a37364cf5994", "previous_filename": "src/test/ui/transmutability/issues-101739.rs"}, {"sha": "5fa741f26fd077fcab991165fa53e51848546d67", "filename": "src/test/ui/transmutability/issue-101739-1.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr?ref=0e615caa8dc17b5d8ca87e956d37a37364cf5994", "patch": "@@ -1,11 +1,11 @@\n error[E0412]: cannot find type `Dst` in this scope\n-  --> $DIR/issues-101739.rs:8:9\n+  --> $DIR/issue-101739-1.rs:8:9\n    |\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n    |         ^^^ not found in this scope\n \n error[E0308]: mismatched types\n-  --> $DIR/issues-101739.rs:8:50\n+  --> $DIR/issue-101739-1.rs:8:50\n    |\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n    |                                                  ^^^^^^^^^^^^^^^^ expected struct `Assume`, found `bool`", "previous_filename": "src/test/ui/transmutability/issues-101739.stderr"}, {"sha": "964a7e49ee614f07767b969c517e17623ab4eb68", "filename": "src/test/ui/transmutability/issue-101739-2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs?ref=0e615caa8dc17b5d8ca87e956d37a37364cf5994", "patch": "@@ -0,0 +1,37 @@\n+#![crate_type = \"lib\"]\n+#![feature(transmutability)]\n+#![allow(dead_code, incomplete_features, non_camel_case_types)]\n+\n+mod assert {\n+    use std::mem::BikeshedIntrinsicFrom;\n+\n+    pub fn is_transmutable<\n+        Src,\n+        Dst,\n+        Context,\n+        const ASSUME_ALIGNMENT: bool,\n+        const ASSUME_LIFETIMES: bool,\n+        const ASSUME_VALIDITY: bool,\n+        const ASSUME_VISIBILITY: bool,\n+    >()\n+    where\n+        Dst: BikeshedIntrinsicFrom< //~ ERROR this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+            Src,\n+            Context,\n+            ASSUME_ALIGNMENT,\n+            ASSUME_LIFETIMES,\n+            ASSUME_VALIDITY,\n+            ASSUME_VISIBILITY,\n+        >,\n+    {}\n+}\n+\n+fn via_const() {\n+    struct Context;\n+    #[repr(C)] struct Src;\n+    #[repr(C)] struct Dst;\n+\n+    const FALSE: bool = false;\n+\n+    assert::is_transmutable::<Src, Dst, Context, FALSE, FALSE, FALSE, FALSE>();\n+}"}, {"sha": "3f83d6583b09cc6e723bfdedd1807cff6ebf50a5", "filename": "src/test/ui/transmutability/issue-101739-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e615caa8dc17b5d8ca87e956d37a37364cf5994/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr?ref=0e615caa8dc17b5d8ca87e956d37a37364cf5994", "patch": "@@ -0,0 +1,20 @@\n+error[E0107]: this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+  --> $DIR/issue-101739-2.rs:18:14\n+   |\n+LL |           Dst: BikeshedIntrinsicFrom<\n+   |                ^^^^^^^^^^^^^^^^^^^^^ expected at most 3 generic arguments\n+...\n+LL | /             ASSUME_LIFETIMES,\n+LL | |             ASSUME_VALIDITY,\n+LL | |             ASSUME_VISIBILITY,\n+   | |_____________________________- help: remove these generic arguments\n+   |\n+note: trait defined here, with at most 3 generic parameters: `Src`, `Context`, `ASSUME`\n+  --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL\n+   |\n+LL | pub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ ---  -------  ------------------------------------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}