{"sha": "3dbc11bc6322a8d337ccdf79464e547abafe7f00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmMxMWJjNjMyMmE4ZDMzN2NjZGY3OTQ2NGU1NDdhYmFmZTdmMDA=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-12-11T17:29:31Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2017-12-11T22:20:15Z"}, "message": "Updated existing tests with new error messages.", "tree": {"sha": "de539b1d41c7334778aed6020eb9c07b865ba1e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de539b1d41c7334778aed6020eb9c07b865ba1e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbc11bc6322a8d337ccdf79464e547abafe7f00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaLwSfAAoJEAF2C0+fU/FUPiEQAL/s/Czea2kF5mb828ogJQM8\nNbK06MSWRBW/vJxTZoENxxizYcp9OooSMCMdjqCVyHiG7TqRy77drvorXIqI9aaY\nynHMq8SrSQmehnZ7jKXxf+/IyzTVsEILcidiW1u3LlGA2f/aTPW1bn0PNMu/WNwx\npvL2lUq0d43cQsDkSgCN/FszxWk+LSnSgTYlo8j3BkKtABm7Euyt8u3C7nwrtlkx\nKlbzUCh92cnpHq5U5NhyO7TlBfaH0Cpm21bef5ye3bArvVhH7A8WOA9j8j9T6YUz\nbKWmgmrzCL1swt864Rd5wmYAHhAW7wSWo7GByDyDEoxqvv3IeNF3Dh6igG1+9jpW\nzJrByhWnDQBlvBDyoAtmhW9ZOLrf0TiJGiAjCdfi4YamOgsjTKVlJv7fOjXBEliP\n2bXUJ3kSVOix+n0fDP/Kg5nP50tumpooGV5J1+vgHV3EQBB8AcnRCNk8tT+WneVi\nqF48ymsw29W8tU2CaNXPtYrn0FL0sJcjA1RcjPKw4zl3OGPnHlVLPR4eymfdD2qx\njJh+lr0TaUwi6A1Sssm7aEcPl4WQsuYDdiHvdFLkKj0zjAOIUa6eHf9r+e2EPfnb\njQUlPIV1Xv9VpM1vbZBC6IZWgOHf2dUfXkzK0yDoGTWoqlHoD52bOwmeWe61RlBo\nTnIR1kLnPisugNmtnySy\n=cleg\n-----END PGP SIGNATURE-----", "payload": "tree de539b1d41c7334778aed6020eb9c07b865ba1e6\nparent 00c7a3f4dce52caad94decd820e8cd66a30b3d8d\nauthor David Wood <david@davidtw.co> 1513013371 +0000\ncommitter David Wood <david@davidtw.co> 1513030815 +0000\n\nUpdated existing tests with new error messages.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbc11bc6322a8d337ccdf79464e547abafe7f00", "html_url": "https://github.com/rust-lang/rust/commit/3dbc11bc6322a8d337ccdf79464e547abafe7f00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbc11bc6322a8d337ccdf79464e547abafe7f00/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00c7a3f4dce52caad94decd820e8cd66a30b3d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c7a3f4dce52caad94decd820e8cd66a30b3d8d", "html_url": "https://github.com/rust-lang/rust/commit/00c7a3f4dce52caad94decd820e8cd66a30b3d8d"}], "stats": {"total": 103, "additions": 57, "deletions": 46}, "files": [{"sha": "0d5feb6b9cc84b2489521f0d5ab999f8041a6030", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-outlives-fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -12,8 +12,9 @@\n //[mir]compile-flags: -Z borrowck=mir\n \n fn cplusplus_mode(x: isize) -> &'static isize {\n-    &x //[ast]~ ERROR `x` does not live long enough\n+    &x\n+    //[ast]~^ ERROR `x` does not live long enough [E0597]\n+    //[mir]~^^ ERROR `x` does not live long enough [E0597]\n }\n-//[mir]~^ ERROR borrowed value does not live long enough\n \n fn main() {}"}, {"sha": "2c9ace4825dfcae3434c3043a3079cd37ffbd8b6", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-with-panic-outlives-fn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -13,10 +13,11 @@\n \n fn cplusplus_mode_exceptionally_unsafe(x: &mut Option<&'static mut isize>) {\n     let mut z = (0, 0);\n-    *x = Some(&mut z.1); //[ast]~ ERROR [E0597]\n+    *x = Some(&mut z.1);\n+    //[ast]~^ ERROR `z.1` does not live long enough [E0597]\n+    //[mir]~^^ ERROR `z.1` does not live long enough [E0597]\n     panic!(\"catch me for a dangling pointer!\")\n }\n-//[mir]~^ ERROR [E0597]\n \n fn main() {\n     cplusplus_mode_exceptionally_unsafe(&mut None);"}, {"sha": "4211057610bc7ebf60e5ae3f805b330209eda5c2", "filename": "src/test/compile-fail/issue-17954.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -18,12 +18,16 @@ static FOO: u8 = 3;\n \n fn main() {\n     let a = &FOO;\n-    //[ast]~^ ERROR borrowed value does not live long enough\n+    //[mir]~^ ERROR `FOO` does not live long enough [E0597]\n+    //[mir]~| does not live long enough\n+    //[mir]~| NOTE borrowed value must be valid for the static lifetime\n+    //[ast]~^^^^ ERROR borrowed value does not live long enough\n     //[ast]~| does not live long enough\n     //[ast]~| NOTE borrowed value must be valid for the static lifetime\n \n     std::thread::spawn(move || {\n         println!(\"{}\", a);\n     });\n-} //[ast]~ temporary value only lives until here\n-  //[mir]~^ ERROR borrowed value does not live long enough\n+}\n+//[mir]~^ borrowed value only lives until here\n+//[ast]~^^ temporary value only lives until here"}, {"sha": "2e2dfdb03d990796a9fa91b7d370d95156af3448", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-big.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -82,8 +82,8 @@ fn main() {\n             //[ast]~^ ERROR `x` does not live long enough\n             //[ast]~| ERROR `y` does not live long enough\n     });\n-    //[mir]~^ ERROR borrowed value does not live long enough\n-    //[mir]~| ERROR borrowed value does not live long enough\n+    //[mir]~^ ERROR `x` does not live long enough\n+    //[mir]~| ERROR `y` does not live long enough\n \n     w.handle(); // This works\n     // w.handle_ref(); // This doesn't"}, {"sha": "5eae5d924712b70fb7465955734e40cc0e7a62ff", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -30,11 +30,11 @@ fn test() {\n         let closure = SomeStruct {\n             p: &mut p,\n             y: &y,\n+            //~^ ERROR `y` does not live long enough [E0597]\n         };\n \n         closure.invoke();\n     }\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n \n     deref(p);\n }"}, {"sha": "6b57f91987be5e810da3b556ebf025991107e8d0", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -1,13 +1,13 @@\n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/capture-ref-in-struct.rs:36:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/capture-ref-in-struct.rs:32:16\n    |\n-28 |         let y = 22;\n-   |             - temporary value created here\n+32 |             y: &y,\n+   |                ^^ does not live long enough\n ...\n-36 |     }\n-   |      ^ temporary value dropped here while still borrowed\n+37 |     }\n+   |      - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#4r...\n \n error: aborting due to previous error\n "}, {"sha": "7e918c6431de4450e874558b91bee2001218119e", "filename": "src/test/ui/nll/closure-requirements/escape-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -35,8 +35,8 @@ fn test() {\n         let y = 22;\n         let mut closure = expect_sig(|p, y| *p = y);\n         closure(&mut p, &y);\n+        //~^ ERROR `y` does not live long enough [E0597]\n     }\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n \n     deref(p);\n }"}, {"sha": "0ec671997e7afcf57e124607d5f0b8550327ff29", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -24,16 +24,16 @@ note: No external requirements\n    |\n    = note: defining type: DefId(0/0:3 ~ escape_argument[317d]::test[0]) with substs []\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/escape-argument.rs:38:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/escape-argument.rs:37:25\n    |\n-35 |         let y = 22;\n-   |             - temporary value created here\n-...\n-38 |     }\n-   |      ^ temporary value dropped here while still borrowed\n+37 |         closure(&mut p, &y);\n+   |                         ^^ does not live long enough\n+38 |         //~^ ERROR `y` does not live long enough [E0597]\n+39 |     }\n+   |      - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#5r...\n \n error: aborting due to previous error\n "}, {"sha": "05700ae00ad4f72900ad96f2cdec06474a528f22", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -27,13 +27,13 @@ fn test() {\n     {\n         let y = 22;\n \n-        let mut closure = || {\n+        let mut closure = || { //~ ERROR `y` does not live long enough [E0597]\n             let mut closure1 = || p = &y;\n             closure1();\n         };\n \n         closure();\n-    } //~ ERROR borrowed value does not live long enough\n+    }\n \n     deref(p);\n }"}, {"sha": "6c70afa0c9c8ab53987db0d196b5a21ea5247dda", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -16,7 +16,7 @@ note: External requirements\n note: External requirements\n   --> $DIR/escape-upvar-nested.rs:30:27\n    |\n-30 |           let mut closure = || {\n+30 |           let mut closure = || { //~ ERROR `y` does not live long enough [E0597]\n    |  ___________________________^\n 31 | |             let mut closure1 = || p = &y;\n 32 | |             closure1();\n@@ -46,16 +46,20 @@ note: No external requirements\n    |\n    = note: defining type: DefId(0/0:3 ~ escape_upvar_nested[317d]::test[0]) with substs []\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/escape-upvar-nested.rs:36:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/escape-upvar-nested.rs:30:27\n    |\n-28 |         let y = 22;\n-   |             - temporary value created here\n+30 |           let mut closure = || { //~ ERROR `y` does not live long enough [E0597]\n+   |  ___________________________^\n+31 | |             let mut closure1 = || p = &y;\n+32 | |             closure1();\n+33 | |         };\n+   | |_________^ does not live long enough\n ...\n-36 |     } //~ ERROR borrowed value does not live long enough\n-   |      ^ temporary value dropped here while still borrowed\n+36 |       }\n+   |        - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#3r...\n \n error: aborting due to previous error\n "}, {"sha": "93d8bfafcbaa4ffed82d2b0be51f828a7d2b679b", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -31,8 +31,9 @@ fn test() {\n     {\n         let y = 22;\n         let mut closure = || p = &y;\n+        //~^ ERROR `y` does not live long enough [E0597]\n         closure();\n-    } //~ ERROR borrowed value does not live long enough\n+    }\n \n     deref(p);\n }"}, {"sha": "0b982dd812b59a6a9f09ca42fc22a7c4008eedc2", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dbc11bc6322a8d337ccdf79464e547abafe7f00/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=3dbc11bc6322a8d337ccdf79464e547abafe7f00", "patch": "@@ -21,22 +21,22 @@ note: No external requirements\n 29 | |     let mut p = &x;\n 30 | |\n ...  |\n-37 | |     deref(p);\n-38 | | }\n+38 | |     deref(p);\n+39 | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:3 ~ escape_upvar_ref[317d]::test[0]) with substs []\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/escape-upvar-ref.rs:35:6\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/escape-upvar-ref.rs:33:27\n    |\n-32 |         let y = 22;\n-   |             - temporary value created here\n+33 |         let mut closure = || p = &y;\n+   |                           ^^^^^^^^^ does not live long enough\n ...\n-35 |     } //~ ERROR borrowed value does not live long enough\n-   |      ^ temporary value dropped here while still borrowed\n+36 |     }\n+   |      - borrowed value only lives until here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: borrowed value must be valid for lifetime '_#3r...\n \n error: aborting due to previous error\n "}]}