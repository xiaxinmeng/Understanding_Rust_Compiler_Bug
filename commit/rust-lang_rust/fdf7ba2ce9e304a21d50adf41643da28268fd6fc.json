{"sha": "fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZjdiYTJjZTllMzA0YTIxZDUwYWRmNDE2NDNkYTI4MjY4ZmQ2ZmM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-11-06T21:10:49Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-11-06T21:10:49Z"}, "message": "Move tls-model to a -Z option since it is unstable", "tree": {"sha": "1830dafa91f30f2c4e993e047210bb32d70c1242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1830dafa91f30f2c4e993e047210bb32d70c1242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "html_url": "https://github.com/rust-lang/rust/commit/fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdf7ba2ce9e304a21d50adf41643da28268fd6fc/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3", "html_url": "https://github.com/rust-lang/rust/commit/ad1bb2e465a1b83bde937ce05b7cf84cf949f1b3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "558761256d2a98121c6ffa4f01bd3cfbfc7d63ba", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdf7ba2ce9e304a21d50adf41643da28268fd6fc/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf7ba2ce9e304a21d50adf41643da28268fd6fc/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "patch": "@@ -911,8 +911,6 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n          \"choose the code model to use (rustc --print code-models for details)\"),\n-    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-         \"choose the TLS model to use (rustc --print tls-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n          \"metadata to mangle symbol names with\"),\n     extra_filename: String = (\"\".to_string(), parse_string, [UNTRACKED],\n@@ -1107,6 +1105,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n+    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+         \"choose the TLS model to use (rustc --print tls-models for details)\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1475,7 +1475,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         })\n     });\n \n-    let debugging_opts = build_debugging_options(matches, error_format);\n+    let mut debugging_opts = build_debugging_options(matches, error_format);\n \n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n@@ -1576,9 +1576,9 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n     }\n-    if cg.tls_model.as_ref().map_or(false, |s| s == \"help\") {\n+    if debugging_opts.tls_model.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::TlsModels);\n-        cg.tls_model = None;\n+        debugging_opts.tls_model = None;\n     }\n \n     let cg = cg;\n@@ -2523,7 +2523,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.cg.tls_model = Some(String::from(\"tls model\"));\n+        opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "cb71ef104d3d9424fc0310c63c3da083f5636d1b", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdf7ba2ce9e304a21d50adf41643da28268fd6fc/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf7ba2ce9e304a21d50adf41643da28268fd6fc/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=fdf7ba2ce9e304a21d50adf41643da28268fd6fc", "patch": "@@ -168,7 +168,7 @@ pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n }\n \n fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n-    let tls_model_arg = match sess.opts.cg.tls_model {\n+    let tls_model_arg = match sess.opts.debugging_opts.tls_model {\n         Some(ref s) => &s[..],\n         None => &sess.target.target.options.tls_model[..],\n     };"}]}