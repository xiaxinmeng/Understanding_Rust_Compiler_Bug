{"sha": "36e6f4be31aff59540f0184dac2cabbd5daf0ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZTZmNGJlMzFhZmY1OTU0MGYwMTg0ZGFjMmNhYmJkNWRhZjBhYzM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-04T19:51:57Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-04T23:48:03Z"}, "message": "add missing urls on io structs", "tree": {"sha": "17172753630bb0426330a338cd7e0571606e60bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17172753630bb0426330a338cd7e0571606e60bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e6f4be31aff59540f0184dac2cabbd5daf0ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e6f4be31aff59540f0184dac2cabbd5daf0ac3", "html_url": "https://github.com/rust-lang/rust/commit/36e6f4be31aff59540f0184dac2cabbd5daf0ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e6f4be31aff59540f0184dac2cabbd5daf0ac3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccfc38f034e3f53cb460936bd9744085d4a63b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfc38f034e3f53cb460936bd9744085d4a63b40", "html_url": "https://github.com/rust-lang/rust/commit/ccfc38f034e3f53cb460936bd9744085d4a63b40"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "ad9ae5638b6ac454c1f0abe1825f9d45b62426d8", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/36e6f4be31aff59540f0184dac2cabbd5daf0ac3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e6f4be31aff59540f0184dac2cabbd5daf0ac3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=36e6f4be31aff59540f0184dac2cabbd5daf0ac3", "patch": "@@ -21,7 +21,7 @@\n //! of other types, and you can implement them for your types too. As such,\n //! you'll see a few different types of I/O throughout the documentation in\n //! this module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`]s. For\n-//! example, `Read` adds a `read()` method, which we can use on `File`s:\n+//! example, [`Read`] adds a [`read()`] method, which we can use on `File`s:\n //!\n //! ```\n //! use std::io;\n@@ -251,6 +251,7 @@\n //! [`Lines`]: struct.Lines.html\n //! [`io::Result`]: type.Result.html\n //! [`try!`]: ../macro.try.html\n+//! [`read()`]: trait.Read.html#tymethod.read\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -814,19 +815,23 @@ pub trait Read {\n ///\n /// Implementors of the `Write` trait are sometimes called 'writers'.\n ///\n-/// Writers are defined by two required methods, `write()` and `flush()`:\n+/// Writers are defined by two required methods, [`write()`] and [`flush()`]:\n ///\n-/// * The `write()` method will attempt to write some data into the object,\n+/// * The [`write()`] method will attempt to write some data into the object,\n ///   returning how many bytes were successfully written.\n ///\n-/// * The `flush()` method is useful for adaptors and explicit buffers\n+/// * The [`flush()`] method is useful for adaptors and explicit buffers\n ///   themselves for ensuring that all buffered data has been pushed out to the\n ///   'true sink'.\n ///\n /// Writers are intended to be composable with one another. Many implementors\n-/// throughout `std::io` take and provide types which implement the `Write`\n+/// throughout [`std::io`] take and provide types which implement the `Write`\n /// trait.\n ///\n+/// [`write()`]: #tymethod.write\n+/// [`flush()`]: #tymethod.flush\n+/// [`std::io`]: index.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -1475,10 +1480,10 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n \n /// Reader adaptor which limits the bytes read from an underlying reader.\n ///\n-/// This struct is generally created by calling [`take()`][take] on a reader.\n-/// Please see the documentation of `take()` for more details.\n+/// This struct is generally created by calling [`take()`] on a reader.\n+/// Please see the documentation of [`take()`] for more details.\n ///\n-/// [take]: trait.Read.html#method.take\n+/// [`take()`]: trait.Read.html#method.take\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Take<T> {\n     inner: T,\n@@ -1491,8 +1496,10 @@ impl<T> Take<T> {\n     ///\n     /// # Note\n     ///\n-    /// This instance may reach EOF after reading fewer bytes than indicated by\n-    /// this method if the underlying `Read` instance reaches EOF.\n+    /// This instance may reach `EOF` after reading fewer bytes than indicated by\n+    /// this method if the underlying [`Read`] instance reaches EOF.\n+    ///\n+    /// [`Read`]: ../../std/io/trait.Read.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "e8b812daed8c13b5c389ba4fd8a8b9f14f75b7af", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36e6f4be31aff59540f0184dac2cabbd5daf0ac3/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e6f4be31aff59540f0184dac2cabbd5daf0ac3/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=36e6f4be31aff59540f0184dac2cabbd5daf0ac3", "patch": "@@ -318,10 +318,11 @@ impl<'a> BufRead for StdinLock<'a> {\n ///\n /// Each handle shares a global buffer of data to be written to the standard\n /// output stream. Access is also synchronized via a lock and explicit control\n-/// over locking is available via the `lock` method.\n+/// over locking is available via the [`lock()`] method.\n ///\n /// Created by the [`io::stdout`] method.\n ///\n+/// [`lock()`]: #method.lock\n /// [`io::stdout`]: fn.stdout.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdout {"}]}