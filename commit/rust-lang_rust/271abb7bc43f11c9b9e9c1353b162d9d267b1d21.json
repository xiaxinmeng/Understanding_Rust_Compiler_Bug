{"sha": "271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MWFiYjdiYzQzZjExYzliOWU5YzEzNTNiMTYyZDlkMjY3YjFkMjE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-02T18:33:26Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-03T11:23:51Z"}, "message": "Add tests", "tree": {"sha": "5bf0cbdcbfa09535dca9db7cc02cbc4d6153889a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf0cbdcbfa09535dca9db7cc02cbc4d6153889a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "html_url": "https://github.com/rust-lang/rust/commit/271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b79d24ad5b251c0806a07aa7769e824f3c37fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b79d24ad5b251c0806a07aa7769e824f3c37fec", "html_url": "https://github.com/rust-lang/rust/commit/7b79d24ad5b251c0806a07aa7769e824f3c37fec"}], "stats": {"total": 138, "additions": 128, "deletions": 10}, "files": [{"sha": "3257275c56f7027a9c4a9249c5c6c7b927caf19f", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "patch": "@@ -5,7 +5,7 @@ export type UpdatesChannel = \"stable\" | \"nightly\";\n \n export const NIGHTLY_TAG = \"nightly\";\n \n-export type RunnableEnvCfg = Record<string, string> | [{ mask?: string, env: Record<string, string>; }]\n+export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string, env: Record<string, string>; }[];\n \n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";\n@@ -117,7 +117,7 @@ export class Config {\n     }\n \n     get runnableEnv() {\n-        return this.get<RunnableEnvCfg | undefined>(\"runnableEnv\");\n+        return this.get<RunnableEnvCfg>(\"runnableEnv\");\n     }\n \n     get debug() {"}, {"sha": "bd92c5b6d739fbd32e87406590bfc0c14f2b2439", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "patch": "@@ -93,7 +93,7 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     }\n \n     const executable = await getDebugExecutable(runnable);\n-    const env = prepareEnv(runnable, ctx.config);\n+    const env = prepareEnv(runnable, ctx.config.runnableEnv);\n     const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, debugOptions.sourceFileMap);\n     if (debugConfig.type in debugOptions.engineSettings) {\n         const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];"}, {"sha": "4a5c6ad4125f45c51d49dac8347e78ba9f202ab1", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "patch": "@@ -5,7 +5,7 @@ import * as tasks from './tasks';\n \n import { Ctx } from './ctx';\n import { makeDebugConfig } from './debug';\n-import { Config } from './config';\n+import { Config, RunnableEnvCfg } from './config';\n \n const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n@@ -96,22 +96,22 @@ export class RunnableQuickPick implements vscode.QuickPickItem {\n     }\n }\n \n-export function prepareEnv(runnable: ra.Runnable, config: Config): Record<string, string> {\n+export function prepareEnv(runnable: ra.Runnable, runnableEnvCfg: RunnableEnvCfg): Record<string, string> {\n     const env: Record<string, string> = { \"RUST_BACKTRACE\": \"short\" };\n \n     if (runnable.args.expectTest) {\n         env[\"UPDATE_EXPECT\"] = \"1\";\n     }\n \n-    if (config.runnableEnv) {\n-        if (Array.isArray(config.runnableEnv)) {\n-            for (const it of config.runnableEnv) {\n+    if (runnableEnvCfg) {\n+        if (Array.isArray(runnableEnvCfg)) {\n+            for (const it of runnableEnvCfg) {\n                 if (!it.mask || new RegExp(it.mask).test(runnable.label)) {\n                     Object.assign(env, it.env);\n                 }\n             }\n         } else {\n-            Object.assign(env, config.runnableEnv as Record<string, string>);\n+            Object.assign(env, runnableEnvCfg as Record<string, string>);\n         }\n     }\n \n@@ -136,7 +136,7 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n         command: args[0], // run, test, etc...\n         args: args.slice(1),\n         cwd: runnable.args.workspaceRoot,\n-        env: prepareEnv(runnable, config),\n+        env: prepareEnv(runnable, config.runnableEnv),\n     };\n \n     const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()"}, {"sha": "979d497dd9b0633cec780bc30982588de03ca24e", "filename": "editors/code/tests/unit/runnable_env.test.ts", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/271abb7bc43f11c9b9e9c1353b162d9d267b1d21/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts?ref=271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "patch": "@@ -0,0 +1,118 @@\n+import * as assert from 'assert';\n+import { prepareEnv } from '../../src/run';\n+import { RunnableEnvCfg } from '../../src/config';\n+import * as ra from '../../src/lsp_ext';\n+\n+function make_runnable(label: string): ra.Runnable {\n+    return {\n+        label,\n+        kind: \"cargo\",\n+        args: {\n+            cargoArgs: [],\n+            executableArgs: []\n+        }\n+    }\n+}\n+\n+function fakePrepareEnv(runnable_name: string, config: RunnableEnvCfg) : Record<string, string> {\n+    const runnable = make_runnable(runnable_name);\n+    return prepareEnv(runnable, config);\n+}\n+\n+suite('Runnable env', () => {\n+    test('Global config works', () => {\n+        const bin_env = fakePrepareEnv(\"run project_name\", {\"GLOBAL\": \"g\"});\n+        assert.equal(bin_env[\"GLOBAL\"], \"g\");\n+\n+        const test_env = fakePrepareEnv(\"test some::mod::test_name\", {\"GLOBAL\": \"g\"});\n+        assert.equal(test_env[\"GLOBAL\"], \"g\");\n+    });\n+\n+    test('null mask works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            }\n+        ];\n+        const bin_env = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(bin_env[\"DATA\"], \"data\");\n+\n+        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(test_env[\"DATA\"], \"data\");\n+    });\n+\n+    test('order works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                env: { DATA: \"newdata\" }\n+            }\n+        ];\n+        const bin_env = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(bin_env[\"DATA\"], \"newdata\");\n+\n+        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(test_env[\"DATA\"], \"newdata\");\n+    });\n+\n+    test('mask works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                mask: \"^run\",\n+                env: { DATA: \"rundata\" }\n+            },\n+            {\n+                mask: \"special_test$\",\n+                env: { DATA: \"special_test\" }\n+            }\n+        ];\n+        const bin_env = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(bin_env[\"DATA\"], \"rundata\");\n+\n+        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(test_env[\"DATA\"], \"data\");\n+\n+        const special_test_env = fakePrepareEnv(\"test some::mod::special_test\", config);\n+        assert.equal(special_test_env[\"DATA\"], \"special_test\");\n+    });\n+\n+    test('exact test name works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                mask: \"some::mod::test_name\",\n+                env: { DATA: \"test special\" }\n+            }\n+        ];\n+        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(test_env[\"DATA\"], \"test special\");\n+\n+        const special_test_env = fakePrepareEnv(\"test some::mod::another_test\", config);\n+        assert.equal(special_test_env[\"DATA\"], \"data\");\n+    });\n+\n+    test('test mod name works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                mask: \"some::mod\",\n+                env: { DATA: \"mod special\" }\n+            }\n+        ];\n+        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(test_env[\"DATA\"], \"mod special\");\n+\n+        const special_test_env = fakePrepareEnv(\"test some::mod::another_test\", config);\n+        assert.equal(special_test_env[\"DATA\"], \"mod special\");\n+    });\n+\n+});"}]}