{"sha": "faa513b1f616fd831ca7ba2d3a8ad987f83d4a16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYTUxM2IxZjYxNmZkODMxY2E3YmEyZDNhOGFkOTg3ZjgzZDRhMTY=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T14:14:49Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T23:30:21Z"}, "message": "(core::str) fixed replace, fixed starts_with, and added more find/contains/replace test cases", "tree": {"sha": "fce58bb8fc7d495ecc79ca0f9e4ecf3be05d5e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce58bb8fc7d495ecc79ca0f9e4ecf3be05d5e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa513b1f616fd831ca7ba2d3a8ad987f83d4a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa513b1f616fd831ca7ba2d3a8ad987f83d4a16", "html_url": "https://github.com/rust-lang/rust/commit/faa513b1f616fd831ca7ba2d3a8ad987f83d4a16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa513b1f616fd831ca7ba2d3a8ad987f83d4a16/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba44e24d5fccfc6fe7c28a742d18e03b6acafae", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba44e24d5fccfc6fe7c28a742d18e03b6acafae", "html_url": "https://github.com/rust-lang/rust/commit/2ba44e24d5fccfc6fe7c28a742d18e03b6acafae"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "a527a79935cdf94bf6f0fedff13ca86b214911b3", "filename": "src/libcore/str.rs", "status": "modified", "additions": 62, "deletions": 5, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/faa513b1f616fd831ca7ba2d3a8ad987f83d4a16/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa513b1f616fd831ca7ba2d3a8ad987f83d4a16/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=faa513b1f616fd831ca7ba2d3a8ad987f83d4a16", "patch": "@@ -667,9 +667,10 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n         if idx == -1 {\n             ret s;\n         }\n-        ret slice(s, 0u, idx as uint) + to +\n-            replace(slice(s, idx as uint + len(from), len(s)),\n-                    from, to);\n+        let before = unsafe::slice_bytes(s, 0u, idx as uint);\n+        let after  = unsafe::slice_bytes(s, idx as uint + len_bytes(from),\n+                                         len_bytes(s));\n+        ret before + to + replace(after, from, to);\n     }\n }\n \n@@ -932,8 +933,8 @@ haystack - The string to look in\n needle - The string to look for\n */\n fn starts_with(haystack: str, needle: str) -> bool {\n-    let haystack_len: uint = len_bytes(haystack);\n-    let needle_len: uint = len_bytes(needle);\n+    let haystack_len: uint = len(haystack);\n+    let needle_len: uint = len(needle);\n     if needle_len == 0u { ret true; }\n     if needle_len > haystack_len { ret false; }\n     ret eq(substr(haystack, 0u, needle_len), needle);\n@@ -1715,6 +1716,13 @@ mod tests {\n         t(\"this is a simple\", \"\", 0);\n         t(\"this is a simple\", \"simple\", 10);\n         t(\"this\", \"simple\", -1);\n+\n+        // FIXME: return option<char> position instead\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") ==  0);\n+        assert (find(data, \"\u0e30\u0e40\")   ==  6); // byte position\n+        assert (find(data, \"\u4e2d\u534e\") ==  27); // byte position\n+        assert (find(data, \"\u0e44\u0e17\u534e\") == -1);\n     }\n \n     #[test]\n@@ -1832,6 +1840,49 @@ mod tests {\n         assert (replace(\" test test \", test, \"\") == \"   \");\n     }\n \n+    #[test]\n+    fn test_replace_2a() {\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        let repl = \"\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\";\n+\n+        let a = \"\u0e1b\u0e23\u0e30\u0e40\";\n+        let A = \"\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        check is_not_empty(a);\n+        assert (replace(data, a, repl) ==  A);\n+    }\n+\n+    #[test]\n+    fn test_replace_2b() {\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        let repl = \"\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\";\n+\n+        let b = \"\u0e30\u0e40\";\n+        let B = \"\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        check is_not_empty(b);\n+        assert (replace(data, b,   repl) ==  B);\n+    }\n+\n+    #[test]\n+    fn test_replace_2c() {\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        let repl = \"\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\";\n+\n+        let c = \"\u4e2d\u534e\";\n+        let C = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\";\n+        check is_not_empty(c);\n+        assert (replace(data, c, repl) ==  C);\n+    }\n+\n+    #[test]\n+    fn test_replace_2d() {\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        let repl = \"\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\";\n+\n+        let d = \"\u0e44\u0e17\u534e\";\n+        check is_not_empty(d);\n+        assert (replace(data, d, repl) == data);\n+    }\n+\n     #[test]\n     fn test_slice() {\n         assert (eq(\"ab\", slice(\"abc\", 0u, 2u)));\n@@ -2032,6 +2083,12 @@ mod tests {\n         assert contains(\"\", \"\");\n         assert !contains(\"abcde\", \"def\");\n         assert !contains(\"\", \"a\");\n+\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert  contains(data, \"\u0e1b\u0e23\u0e30\u0e40\");\n+        assert  contains(data, \"\u0e30\u0e40\");\n+        assert  contains(data, \"\u4e2d\u534e\");\n+        assert !contains(data, \"\u0e44\u0e17\u534e\");\n     }\n \n     #[test]"}]}