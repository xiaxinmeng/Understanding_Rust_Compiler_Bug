{"sha": "35b339bd5fbf678dd319c62ea1316a5d1160f0df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjMzOWJkNWZiZjY3OGRkMzE5YzYyZWExMzE2YTVkMTE2MGYwZGY=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2019-03-28T01:15:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T01:15:30Z"}, "message": "Rollup merge of #59390 - czipperz:ptr_eq_smart_pointer, r=Centril,steveklabnik\n\nMake `ptr::eq` documentation mention fat-pointer behavior\n\nResolves #59214", "tree": {"sha": "ae77b7d02742a5b147a83094fed874c01598efb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae77b7d02742a5b147a83094fed874c01598efb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b339bd5fbf678dd319c62ea1316a5d1160f0df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnCAyCRBK7hj4Ov3rIwAAdHIIAG+jN8kvsb9Bt/8w+aHoDSuV\n7iwM2VG08ESxsUGXPl2VufCPSnHsvflczRzNz0arDvIsaQ/zBSSQ4DNHu1xqz/Dg\nLB6UEoH1hFqOXwM1D8t2MFyrzujdtbdRBqpyr7JLMjtMEwcQRvNd7eAKPN/9656V\nCnc06bvq1Fws624JHhbqPkHJItdGg1DH1fmmUo0qBrDJzmBgwylxcyl+ya+6Jq1j\njhjJvJRrJ5AmcdG/KKGmJMOBkKBo9XjyJne9rAd+JN6EabrO09xy80R/A+GItKk0\naV1nngBmb1RKs1O7eU4MDNHbtKBDS7zAYDUXnAo507ZShTxNOLCV72adcHn/18M=\n=5BEr\n-----END PGP SIGNATURE-----\n", "payload": "tree ae77b7d02742a5b147a83094fed874c01598efb1\nparent a4bf8557b2b3c134c9c1d449f86dd38b842b43b1\nparent 61b6c56f50af6ca2848f4bd623c8b2cd2b24cb77\nauthor Josh Stone <cuviper@gmail.com> 1553735730 -0700\ncommitter GitHub <noreply@github.com> 1553735730 -0700\n\nRollup merge of #59390 - czipperz:ptr_eq_smart_pointer, r=Centril,steveklabnik\n\nMake `ptr::eq` documentation mention fat-pointer behavior\n\nResolves #59214\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b339bd5fbf678dd319c62ea1316a5d1160f0df", "html_url": "https://github.com/rust-lang/rust/commit/35b339bd5fbf678dd319c62ea1316a5d1160f0df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b339bd5fbf678dd319c62ea1316a5d1160f0df/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4bf8557b2b3c134c9c1d449f86dd38b842b43b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4bf8557b2b3c134c9c1d449f86dd38b842b43b1", "html_url": "https://github.com/rust-lang/rust/commit/a4bf8557b2b3c134c9c1d449f86dd38b842b43b1"}, {"sha": "61b6c56f50af6ca2848f4bd623c8b2cd2b24cb77", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b6c56f50af6ca2848f4bd623c8b2cd2b24cb77", "html_url": "https://github.com/rust-lang/rust/commit/61b6c56f50af6ca2848f4bd623c8b2cd2b24cb77"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "dabf914fdb2cd4eeedd761ac9b8f32f08319faa2", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/35b339bd5fbf678dd319c62ea1316a5d1160f0df/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b339bd5fbf678dd319c62ea1316a5d1160f0df/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=35b339bd5fbf678dd319c62ea1316a5d1160f0df", "patch": "@@ -2495,11 +2495,57 @@ impl<T: ?Sized> Eq for *mut T {}\n /// let other_five_ref = &other_five;\n ///\n /// assert!(five_ref == same_five_ref);\n-/// assert!(five_ref == other_five_ref);\n-///\n /// assert!(ptr::eq(five_ref, same_five_ref));\n+///\n+/// assert!(five_ref == other_five_ref);\n /// assert!(!ptr::eq(five_ref, other_five_ref));\n /// ```\n+///\n+/// Slices are also compared by their length (fat pointers):\n+///\n+/// ```\n+/// let a = [1, 2, 3];\n+/// assert!(std::ptr::eq(&a[..3], &a[..3]));\n+/// assert!(!std::ptr::eq(&a[..2], &a[..3]));\n+/// assert!(!std::ptr::eq(&a[0..2], &a[1..3]));\n+/// ```\n+///\n+/// Traits are also compared by their implementation:\n+///\n+/// ```\n+/// #[repr(transparent)]\n+/// struct Wrapper { member: i32 }\n+///\n+/// trait Trait {}\n+/// impl Trait for Wrapper {}\n+/// impl Trait for i32 {}\n+///\n+/// fn main() {\n+///     let wrapper = Wrapper { member: 10 };\n+///\n+///     // Pointers have equal addresses.\n+///     assert!(std::ptr::eq(\n+///         &wrapper as *const Wrapper as *const u8,\n+///         &wrapper.member as *const i32 as *const u8\n+///     ));\n+///\n+///     // Objects have equal addresses, but `Trait` has different implementations.\n+///     assert!(!std::ptr::eq(\n+///         &wrapper as &dyn Trait,\n+///         &wrapper.member as &dyn Trait,\n+///     ));\n+///     assert!(!std::ptr::eq(\n+///         &wrapper as &dyn Trait as *const dyn Trait,\n+///         &wrapper.member as &dyn Trait as *const dyn Trait,\n+///     ));\n+///\n+///     // Converting the reference to a `*const u8` compares by address.\n+///     assert!(std::ptr::eq(\n+///         &wrapper as &dyn Trait as *const dyn Trait as *const u8,\n+///         &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,\n+///     ));\n+/// }\n+/// ```\n #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n #[inline]\n pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {"}]}