{"sha": "34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "node_id": "C_kwDOAAsO6NoAKDM0ZmE2ZGFhNWNlMGM2NGNjYTIwNTI2M2FiY2QzMmEyYzZjZjA2OGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-22T21:44:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T21:44:39Z"}, "message": "Rollup merge of #109203 - Ezrashaw:refactor-ident-parsing, r=Nilstrieb\n\nrefactor/feat: refactor identifier parsing a bit\n\n\\+ error recovery for `expected_ident_found`\n\nPrior art: #108854", "tree": {"sha": "7e237feae45154be505b1961b36484382bd1a77d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e237feae45154be505b1961b36484382bd1a77d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG3bHCRBK7hj4Ov3rIwAAVA0IACrwtFb+W/gP4b3V42gWpG2Y\nKuBv17c3OGiTY1wqI+T50n7HuUrnKGmU0XExqq+lK3hRLdwSe8365UzbinR04fxG\nU2iUUd4xfuaAqxm6/m/E20ZEZNzQfuWE+CEcvtcGuucifky9RlRlYhIgJTYvLJuT\nRkoJejTpjCwvmyWnIDErLKk4n+EPsQ9zW3wJ3IbmzNBHEzszCdhNDzpPn1vJHwqb\nphVEYIvu9u1iCQcoYbjF/6nhokgTj4IZl8eoNOc3phL9dK0A0wm1mNnHv0BMZyLe\nuKAQUq7VgeBFPFeqOLarEfTd+XUbYzO9D51Zv5x46zuYFImv3ouH+SKPN4JqJxg=\n=Si/5\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e237feae45154be505b1961b36484382bd1a77d\nparent 0392e2996e828fe5f435b3f13037f8af7ad4563b\nparent 05b5046633e9f594f955e0365a1219d1a96a5b54\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679521479 +0100\ncommitter GitHub <noreply@github.com> 1679521479 +0100\n\nRollup merge of #109203 - Ezrashaw:refactor-ident-parsing, r=Nilstrieb\n\nrefactor/feat: refactor identifier parsing a bit\n\n\\+ error recovery for `expected_ident_found`\n\nPrior art: #108854\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "html_url": "https://github.com/rust-lang/rust/commit/34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0392e2996e828fe5f435b3f13037f8af7ad4563b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0392e2996e828fe5f435b3f13037f8af7ad4563b", "html_url": "https://github.com/rust-lang/rust/commit/0392e2996e828fe5f435b3f13037f8af7ad4563b"}, {"sha": "05b5046633e9f594f955e0365a1219d1a96a5b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b5046633e9f594f955e0365a1219d1a96a5b54", "html_url": "https://github.com/rust-lang/rust/commit/05b5046633e9f594f955e0365a1219d1a96a5b54"}], "stats": {"total": 345, "additions": 250, "deletions": 95}, "files": [{"sha": "96765c296e79bdc0b266710380853c5b4c103d1c", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -336,7 +336,7 @@ parse_expected_identifier_found_reserved_keyword = expected identifier, found re\n parse_expected_identifier_found_doc_comment = expected identifier, found doc comment\n parse_expected_identifier = expected identifier\n \n-parse_sugg_escape_to_use_as_identifier = escape `{$ident_name}` to use it as an identifier\n+parse_sugg_escape_identifier = escape `{$ident_name}` to use it as an identifier\n \n parse_sugg_remove_comma = remove this comma\n "}, {"sha": "a9d116012ae5bf680dfb337568739e436342fc0e", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -888,12 +888,12 @@ pub(crate) struct InvalidMetaItem {\n \n #[derive(Subdiagnostic)]\n #[suggestion(\n-    parse_sugg_escape_to_use_as_identifier,\n+    parse_sugg_escape_identifier,\n     style = \"verbose\",\n     applicability = \"maybe-incorrect\",\n     code = \"r#\"\n )]\n-pub(crate) struct SuggEscapeToUseAsIdentifier {\n+pub(crate) struct SuggEscapeIdentifier {\n     #[primary_span]\n     pub span: Span,\n     pub ident_name: String,\n@@ -937,7 +937,7 @@ impl ExpectedIdentifierFound {\n pub(crate) struct ExpectedIdentifier {\n     pub span: Span,\n     pub token: Token,\n-    pub suggest_raw: Option<SuggEscapeToUseAsIdentifier>,\n+    pub suggest_raw: Option<SuggEscapeIdentifier>,\n     pub suggest_remove_comma: Option<SuggRemoveComma>,\n     pub help_cannot_start_number: Option<HelpIdentifierStartsWithNumber>,\n }\n@@ -986,7 +986,10 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n \n #[derive(Subdiagnostic)]\n #[help(parse_invalid_identifier_with_leading_number)]\n-pub(crate) struct HelpIdentifierStartsWithNumber;\n+pub(crate) struct HelpIdentifierStartsWithNumber {\n+    #[primary_span]\n+    pub num_span: Span,\n+}\n \n pub(crate) struct ExpectedSemi {\n     pub span: Span,"}, {"sha": "9544afd3d6df941e23e8c52f6671de6b2bec7cca", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 89, "deletions": 34, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -6,14 +6,14 @@ use super::{\n use crate::errors::{\n     AmbiguousPlus, AttributeOnParamType, BadQPathStage2, BadTypePlus, BadTypePlusSub,\n     ComparisonOperatorsCannotBeChained, ComparisonOperatorsCannotBeChainedSugg,\n-    ConstGenericWithoutBraces, ConstGenericWithoutBracesSugg, DocCommentOnParamType,\n-    DoubleColonInBound, ExpectedIdentifier, ExpectedSemi, ExpectedSemiSugg,\n+    ConstGenericWithoutBraces, ConstGenericWithoutBracesSugg, DocCommentDoesNotDocumentAnything,\n+    DocCommentOnParamType, DoubleColonInBound, ExpectedIdentifier, ExpectedSemi, ExpectedSemiSugg,\n     GenericParamsWithoutAngleBrackets, GenericParamsWithoutAngleBracketsSugg,\n     HelpIdentifierStartsWithNumber, InInTypo, IncorrectAwait, IncorrectSemicolon,\n     IncorrectUseOfAwait, ParenthesesInForHead, ParenthesesInForHeadSugg,\n     PatternMethodParamWithoutBody, QuestionMarkInType, QuestionMarkInTypeSugg, SelfParamNotFirst,\n     StructLiteralBodyWithoutPath, StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens,\n-    StructLiteralNeedingParensSugg, SuggEscapeToUseAsIdentifier, SuggRemoveComma,\n+    StructLiteralNeedingParensSugg, SuggEscapeIdentifier, SuggRemoveComma,\n     UnexpectedConstInGenericParam, UnexpectedConstParamDeclaration,\n     UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets, UseEqInstead,\n };\n@@ -38,7 +38,7 @@ use rustc_errors::{\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n+use rustc_span::{Span, SpanSnippetError, Symbol, DUMMY_SP};\n use std::mem::take;\n use std::ops::{Deref, DerefMut};\n use thin_vec::{thin_vec, ThinVec};\n@@ -268,7 +268,21 @@ impl<'a> Parser<'a> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n \n-    pub(super) fn expected_ident_found(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    /// Emits an error with suggestions if an identifier was expected but not found.\n+    ///\n+    /// Returns a possibly recovered identifier.\n+    pub(super) fn expected_ident_found(\n+        &mut self,\n+        recover: bool,\n+    ) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n+        if let TokenKind::DocComment(..) = self.prev_token.kind {\n+            return Err(DocCommentDoesNotDocumentAnything {\n+                span: self.prev_token.span,\n+                missing_comma: None,\n+            }\n+            .into_diagnostic(&self.sess.span_diagnostic));\n+        }\n+\n         let valid_follow = &[\n             TokenKind::Eq,\n             TokenKind::Colon,\n@@ -281,31 +295,51 @@ impl<'a> Parser<'a> {\n             TokenKind::CloseDelim(Delimiter::Parenthesis),\n         ];\n \n-        let suggest_raw = match self.token.ident() {\n-            Some((ident, false))\n-                if ident.is_raw_guess()\n-                    && self.look_ahead(1, |t| valid_follow.contains(&t.kind)) =>\n-            {\n-                Some(SuggEscapeToUseAsIdentifier {\n-                    span: ident.span.shrink_to_lo(),\n-                    // `Symbol::to_string()` is different from `Symbol::into_diagnostic_arg()`,\n-                    // which uses `Symbol::to_ident_string()` and \"helpfully\" adds an implicit `r#`\n-                    ident_name: ident.name.to_string(),\n-                })\n-            }\n-            _ => None,\n-        };\n+        let mut recovered_ident = None;\n+        // we take this here so that the correct original token is retained in\n+        // the diagnostic, regardless of eager recovery.\n+        let bad_token = self.token.clone();\n+\n+        // suggest prepending a keyword in identifier position with `r#`\n+        let suggest_raw = if let Some((ident, false)) = self.token.ident()\n+            && ident.is_raw_guess()\n+            && self.look_ahead(1, |t| valid_follow.contains(&t.kind))\n+        {\n+            recovered_ident = Some((ident, true));\n+\n+            // `Symbol::to_string()` is different from `Symbol::into_diagnostic_arg()`,\n+            // which uses `Symbol::to_ident_string()` and \"helpfully\" adds an implicit `r#`\n+            let ident_name = ident.name.to_string();\n+\n+            Some(SuggEscapeIdentifier {\n+                span: ident.span.shrink_to_lo(),\n+                ident_name\n+            })\n+        } else { None };\n+\n+        let suggest_remove_comma =\n+            if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n+                if recover {\n+                    self.bump();\n+                    recovered_ident = self.ident_or_err(false).ok();\n+                };\n \n-        let suggest_remove_comma = (self.token == token::Comma\n-            && self.look_ahead(1, |t| t.is_ident()))\n-        .then_some(SuggRemoveComma { span: self.token.span });\n+                Some(SuggRemoveComma { span: bad_token.span })\n+            } else {\n+                None\n+            };\n \n-        let help_cannot_start_number =\n-            self.is_lit_bad_ident().then_some(HelpIdentifierStartsWithNumber);\n+        let help_cannot_start_number = self.is_lit_bad_ident().map(|(len, valid_portion)| {\n+            let (invalid, valid) = self.token.span.split_at(len as u32);\n+\n+            recovered_ident = Some((Ident::new(valid_portion, valid), false));\n+\n+            HelpIdentifierStartsWithNumber { num_span: invalid }\n+        });\n \n         let err = ExpectedIdentifier {\n-            span: self.token.span,\n-            token: self.token.clone(),\n+            span: bad_token.span,\n+            token: bad_token,\n             suggest_raw,\n             suggest_remove_comma,\n             help_cannot_start_number,\n@@ -314,6 +348,7 @@ impl<'a> Parser<'a> {\n \n         // if the token we have is a `<`\n         // it *might* be a misplaced generic\n+        // FIXME: could we recover with this?\n         if self.token == token::Lt {\n             // all keywords that could have generic applied\n             let valid_prev_keywords =\n@@ -364,18 +399,38 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        err\n+        if let Some(recovered_ident) = recovered_ident && recover {\n+            err.emit();\n+            Ok(recovered_ident)\n+        } else {\n+            Err(err)\n+        }\n+    }\n+\n+    pub(super) fn expected_ident_found_err(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        self.expected_ident_found(false).unwrap_err()\n     }\n \n     /// Checks if the current token is a integer or float literal and looks like\n     /// it could be a invalid identifier with digits at the start.\n-    pub(super) fn is_lit_bad_ident(&mut self) -> bool {\n-        matches!(self.token.uninterpolate().kind, token::Literal(Lit { kind: token::LitKind::Integer | token::LitKind::Float, .. })\n-            // ensure that the integer literal is followed by a *invalid*\n-            // suffix: this is how we know that it is a identifier with an\n-            // invalid beginning.\n-            if rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n-        )\n+    ///\n+    /// Returns the number of characters (bytes) composing the invalid portion\n+    /// of the identifier and the valid portion of the identifier.\n+    pub(super) fn is_lit_bad_ident(&mut self) -> Option<(usize, Symbol)> {\n+        // ensure that the integer literal is followed by a *invalid*\n+        // suffix: this is how we know that it is a identifier with an\n+        // invalid beginning.\n+        if let token::Literal(Lit {\n+            kind: token::LitKind::Integer | token::LitKind::Float,\n+            symbol,\n+            suffix,\n+        }) = self.token.kind\n+            && rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n+        {\n+            Some((symbol.as_str().len(), suffix.unwrap()))\n+        } else {\n+            None\n+        }\n     }\n \n     pub(super) fn expected_one_of_not_found("}, {"sha": "ae8fe90e9d6116bddbc9328bdf8b0194fd3c1c94", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -1181,7 +1181,7 @@ impl<'a> Parser<'a> {\n         defaultness: Defaultness,\n     ) -> PResult<'a, ItemInfo> {\n         let impl_span = self.token.span;\n-        let mut err = self.expected_ident_found();\n+        let mut err = self.expected_ident_found_err();\n \n         // Only try to recover if this is implementing a trait for a type\n         let mut impl_info = match self.parse_item_impl(attrs, defaultness) {\n@@ -1744,7 +1744,7 @@ impl<'a> Parser<'a> {\n     /// Parses a field identifier. Specialized version of `parse_ident_common`\n     /// for better diagnostics and suggestions.\n     fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n-        let (ident, is_raw) = self.ident_or_err()?;\n+        let (ident, is_raw) = self.ident_or_err(true)?;\n         if !is_raw && ident.is_reserved() {\n             let snapshot = self.create_snapshot_for_diagnostic();\n             let err = if self.check_fn_front_matter(false, Case::Sensitive) {\n@@ -1776,7 +1776,7 @@ impl<'a> Parser<'a> {\n                     Err(err) => {\n                         err.cancel();\n                         self.restore_snapshot(snapshot);\n-                        self.expected_ident_found()\n+                        self.expected_ident_found_err()\n                     }\n                 }\n             } else if self.eat_keyword(kw::Struct) {\n@@ -1792,11 +1792,11 @@ impl<'a> Parser<'a> {\n                     Err(err) => {\n                         err.cancel();\n                         self.restore_snapshot(snapshot);\n-                        self.expected_ident_found()\n+                        self.expected_ident_found_err()\n                     }\n                 }\n             } else {\n-                let mut err = self.expected_ident_found();\n+                let mut err = self.expected_ident_found_err();\n                 if self.eat_keyword_noexpect(kw::Let)\n                     && let removal_span = self.prev_token.span.until(self.token.span)\n                     && let Ok(ident) = self.parse_ident_common(false)"}, {"sha": "53c25a80c4bf32752ce306607e3577ac8fd22b6a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -42,8 +42,7 @@ use thin_vec::ThinVec;\n use tracing::debug;\n \n use crate::errors::{\n-    DocCommentDoesNotDocumentAnything, IncorrectVisibilityRestriction, MismatchedClosingDelimiter,\n-    NonStringAbiLiteral,\n+    IncorrectVisibilityRestriction, MismatchedClosingDelimiter, NonStringAbiLiteral,\n };\n \n bitflags::bitflags! {\n@@ -552,21 +551,11 @@ impl<'a> Parser<'a> {\n         self.parse_ident_common(true)\n     }\n \n-    fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n-        self.token.ident().ok_or_else(|| match self.prev_token.kind {\n-            TokenKind::DocComment(..) => DocCommentDoesNotDocumentAnything {\n-                span: self.prev_token.span,\n-                missing_comma: None,\n-            }\n-            .into_diagnostic(&self.sess.span_diagnostic),\n-            _ => self.expected_ident_found(),\n-        })\n-    }\n-\n     fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {\n-        let (ident, is_raw) = self.ident_or_err()?;\n+        let (ident, is_raw) = self.ident_or_err(recover)?;\n+\n         if !is_raw && ident.is_reserved() {\n-            let mut err = self.expected_ident_found();\n+            let mut err = self.expected_ident_found_err();\n             if recover {\n                 err.emit();\n             } else {\n@@ -577,6 +566,21 @@ impl<'a> Parser<'a> {\n         Ok(ident)\n     }\n \n+    fn ident_or_err(&mut self, recover: bool) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n+        let result = self.token.ident().ok_or_else(|| self.expected_ident_found(recover));\n+\n+        let (ident, is_raw) = match result {\n+            Ok(ident) => ident,\n+            Err(err) => match err {\n+                // we recovered!\n+                Ok(ident) => ident,\n+                Err(err) => return Err(err),\n+            },\n+        };\n+\n+        Ok((ident, is_raw))\n+    }\n+\n     /// Checks if the next token is `tok`, and returns `true` if so.\n     ///\n     /// This method will automatically add `tok` to `expected_tokens` if `tok` is not"}, {"sha": "2246002f5d32a432ce891c64b438c1370bcdf9f2", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -348,10 +348,6 @@ impl<'a> Parser<'a> {\n             lo = self.token.span;\n         }\n \n-        if self.is_lit_bad_ident() {\n-            return Err(self.expected_ident_found());\n-        }\n-\n         let pat = if self.check(&token::BinOp(token::And)) || self.token.kind == token::AndAnd {\n             self.parse_pat_deref(expected)?\n         } else if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {\n@@ -395,7 +391,13 @@ impl<'a> Parser<'a> {\n             } else {\n                 PatKind::Lit(const_expr)\n             }\n-        } else if self.can_be_ident_pat() {\n+        // Don't eagerly error on semantically invalid tokens when matching\n+        // declarative macros, as the input to those doesn't have to be\n+        // semantically valid. For attribute/derive proc macros this is not the\n+        // case, so doing the recovery for them is fine.\n+        } else if self.can_be_ident_pat()\n+            || (self.is_lit_bad_ident().is_some() && self.may_recover())\n+        {\n             // Parse `ident @ pat`\n             // This can give false positives and parse nullary enums,\n             // they are dealt with later in resolve.\n@@ -594,7 +596,7 @@ impl<'a> Parser<'a> {\n         // Make sure we don't allow e.g. `let mut $p;` where `$p:pat`.\n         if let token::Interpolated(nt) = &self.token.kind {\n             if let token::NtPat(_) = **nt {\n-                self.expected_ident_found().emit();\n+                self.expected_ident_found_err().emit();\n             }\n         }\n "}, {"sha": "02cffc762bed32597274febc1332400af944eebd", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -795,6 +795,18 @@ impl Span {\n         })\n     }\n \n+    /// Splits a span into two composite spans around a certain position.\n+    pub fn split_at(self, pos: u32) -> (Span, Span) {\n+        let len = self.hi().0 - self.lo().0;\n+        debug_assert!(pos <= len);\n+\n+        let split_pos = BytePos(self.lo().0 + pos);\n+        (\n+            Span::new(self.lo(), split_pos, self.ctxt(), self.parent()),\n+            Span::new(split_pos, self.hi(), self.ctxt(), self.parent()),\n+        )\n+    }\n+\n     /// Returns a `Span` that would enclose both `self` and `end`.\n     ///\n     /// Note that this can also be used to extend the span \"backwards\":"}, {"sha": "7575372b940fdfa7cb85b674dc45ca7affe11137", "filename": "tests/ui/parser/ident-recovery.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fident-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fident-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fident-recovery.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -0,0 +1,16 @@\n+fn ,comma() {\n+    //~^ ERROR expected identifier, found `,`\n+    struct Foo {\n+        x: i32,,\n+        //~^ ERROR expected identifier, found `,`\n+        y: u32,\n+    }\n+}\n+\n+fn break() {\n+//~^ ERROR expected identifier, found keyword `break`\n+    let continue = 5;\n+    //~^ ERROR expected identifier, found keyword `continue`\n+}\n+\n+fn main() {}"}, {"sha": "e9a55026d12450ffd7feb846d29db272058710d1", "filename": "tests/ui/parser/ident-recovery.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fident-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fident-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fident-recovery.stderr?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -0,0 +1,42 @@\n+error: expected identifier, found `,`\n+  --> $DIR/ident-recovery.rs:1:4\n+   |\n+LL | fn ,comma() {\n+   |    ^\n+   |    |\n+   |    expected identifier\n+   |    help: remove this comma\n+\n+error: expected identifier, found `,`\n+  --> $DIR/ident-recovery.rs:4:16\n+   |\n+LL |         x: i32,,\n+   |                ^\n+   |                |\n+   |                expected identifier\n+   |                help: remove this comma\n+\n+error: expected identifier, found keyword `break`\n+  --> $DIR/ident-recovery.rs:10:4\n+   |\n+LL | fn break() {\n+   |    ^^^^^ expected identifier, found keyword\n+   |\n+help: escape `break` to use it as an identifier\n+   |\n+LL | fn r#break() {\n+   |    ++\n+\n+error: expected identifier, found keyword `continue`\n+  --> $DIR/ident-recovery.rs:12:9\n+   |\n+LL |     let continue = 5;\n+   |         ^^^^^^^^ expected identifier, found keyword\n+   |\n+help: escape `continue` to use it as an identifier\n+   |\n+LL |     let r#continue = 5;\n+   |         ++\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b2c6612965608ed45307849ed034d9ce480ac0dc", "filename": "tests/ui/parser/integer-literal-start-ident.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -4,7 +4,11 @@ error: expected identifier, found `1main`\n LL | fn 1main() {}\n    |    ^^^^^ expected identifier\n    |\n-   = help: identifiers cannot start with a number\n+help: identifiers cannot start with a number\n+  --> $DIR/integer-literal-start-ident.rs:1:4\n+   |\n+LL | fn 1main() {}\n+   |    ^\n \n error: aborting due to previous error\n "}, {"sha": "3dc636b6a33bd5db95805b44a321838b934f6f75", "filename": "tests/ui/parser/issues/issue-104088.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -1,26 +1,19 @@\n-fn test() {\n+fn 1234test() {\n+//~^ ERROR expected identifier, found `1234test`\n     if let 123 = 123 { println!(\"yes\"); }\n-}\n-\n-fn test_2() {\n-    let 1x = 123;\n-    //~^ ERROR expected identifier, found `1x`\n-}\n-\n-fn test_3() {\n-    let 2x: i32 = 123;\n-    //~^ ERROR expected identifier, found `2x`\n-}\n \n-fn test_4() {\n     if let 2e1 = 123 {\n         //~^ ERROR mismatched types\n     }\n-}\n \n-fn test_5() {\n     let 23name = 123;\n     //~^ ERROR expected identifier, found `23name`\n+\n+    let 2x: i32 = 123;\n+    //~^ ERROR expected identifier, found `2x`\n+\n+    let 1x = 123;\n+    //~^ ERROR expected identifier, found `1x`\n }\n \n fn main() {}"}, {"sha": "8b751759d69a667314fef024e0be03a1356b5198", "filename": "tests/ui/parser/issues/issue-104088.stderr", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34fa6daa5ce0c64cca205263abcd32a2c6cf068d/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr?ref=34fa6daa5ce0c64cca205263abcd32a2c6cf068d", "patch": "@@ -1,35 +1,59 @@\n-error: expected identifier, found `1x`\n-  --> $DIR/issue-104088.rs:6:9\n+error: expected identifier, found `1234test`\n+  --> $DIR/issue-104088.rs:1:4\n    |\n-LL |     let 1x = 123;\n-   |         ^^ expected identifier\n+LL | fn 1234test() {\n+   |    ^^^^^^^^ expected identifier\n+   |\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:1:4\n+   |\n+LL | fn 1234test() {\n+   |    ^^^^\n+\n+error: expected identifier, found `23name`\n+  --> $DIR/issue-104088.rs:9:9\n+   |\n+LL |     let 23name = 123;\n+   |         ^^^^^^ expected identifier\n+   |\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:9:9\n    |\n-   = help: identifiers cannot start with a number\n+LL |     let 23name = 123;\n+   |         ^^\n \n error: expected identifier, found `2x`\n-  --> $DIR/issue-104088.rs:11:9\n+  --> $DIR/issue-104088.rs:12:9\n    |\n LL |     let 2x: i32 = 123;\n    |         ^^ expected identifier\n    |\n-   = help: identifiers cannot start with a number\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:12:9\n+   |\n+LL |     let 2x: i32 = 123;\n+   |         ^\n \n-error: expected identifier, found `23name`\n-  --> $DIR/issue-104088.rs:22:9\n+error: expected identifier, found `1x`\n+  --> $DIR/issue-104088.rs:15:9\n    |\n-LL |     let 23name = 123;\n-   |         ^^^^^^ expected identifier\n+LL |     let 1x = 123;\n+   |         ^^ expected identifier\n    |\n-   = help: identifiers cannot start with a number\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:15:9\n+   |\n+LL |     let 1x = 123;\n+   |         ^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-104088.rs:16:12\n+  --> $DIR/issue-104088.rs:5:12\n    |\n LL |     if let 2e1 = 123 {\n    |            ^^^   --- this expression has type `{integer}`\n    |            |\n    |            expected integer, found floating-point number\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}