{"sha": "8407ec9fedccdd410dee2bca67651ce245ed5cd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MDdlYzlmZWRjY2RkNDEwZGVlMmJjYTY3NjUxY2UyNDVlZDVjZDM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-27T15:16:30Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-04T09:46:52Z"}, "message": "syntax: make #[deriving(TotalOrd)] lazy.\n\nPreviously it would call:\n\n  f(sf1.cmp(&of1), f(sf2.cmp(&of2), ...))\n\n(where s/of1 = 'self/other field 1', and f was\nstd::cmp::lexical_ordering)\n\nThis meant that every .cmp subcall got evaluated when calling a derived\nTotalOrd.cmp.\n\nThis corrects this to use\n\n   let test = sf1.cmp(&of1);\n   if test == Equal {\n      let test = sf2.cmp(&of2);\n      if test == Equal {\n        // ...\n      } else {\n        test\n      }\n   } else {\n     test\n   }\n\nThis gives a lexical ordering by short-circuiting on the first comparison\nthat is not Equal.", "tree": {"sha": "1169ef9f908506cbdfe415bbfe1d269f4afea6ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1169ef9f908506cbdfe415bbfe1d269f4afea6ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8407ec9fedccdd410dee2bca67651ce245ed5cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8407ec9fedccdd410dee2bca67651ce245ed5cd3", "html_url": "https://github.com/rust-lang/rust/commit/8407ec9fedccdd410dee2bca67651ce245ed5cd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8407ec9fedccdd410dee2bca67651ce245ed5cd3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44acdad5f8974206d871bb1134f67368bdb236ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/44acdad5f8974206d871bb1134f67368bdb236ee", "html_url": "https://github.com/rust-lang/rust/commit/44acdad5f8974206d871bb1134f67368bdb236ee"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "b66f89e83415e1b22ad0a575f950f1855057460f", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8407ec9fedccdd410dee2bca67651ce245ed5cd3/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8407ec9fedccdd410dee2bca67651ce245ed5cd3/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=8407ec9fedccdd410dee2bca67651ce245ed5cd3", "patch": "@@ -153,7 +153,6 @@ pub fn cmp2<A:TotalOrd,B:TotalOrd>(\n Return `o1` if it is not `Equal`, otherwise `o2`. Simulates the\n lexical ordering on a type `(int, int)`.\n */\n-// used in deriving code in libsyntax\n #[inline]\n pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n     match o1 {"}, {"sha": "001e92355282f9d5f095dfab787c3afa9dd779d4", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8407ec9fedccdd410dee2bca67651ce245ed5cd3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8407ec9fedccdd410dee2bca67651ce245ed5cd3/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=8407ec9fedccdd410dee2bca67651ce245ed5cd3", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use ast;\n use ast::{MetaItem, item, expr};\n use codemap::span;\n use ext::base::ExtCtxt;\n@@ -40,40 +41,70 @@ pub fn expand_deriving_totalord(cx: @ExtCtxt,\n }\n \n \n-pub fn ordering_const(cx: @ExtCtxt, span: span, cnst: Ordering) -> @expr {\n+pub fn ordering_const(cx: @ExtCtxt, span: span, cnst: Ordering) -> ast::Path {\n     let cnst = match cnst {\n         Less => \"Less\",\n         Equal => \"Equal\",\n         Greater => \"Greater\"\n     };\n-    cx.expr_path(\n-        cx.path_global(span,\n-                       ~[cx.ident_of(\"std\"),\n-                         cx.ident_of(\"cmp\"),\n-                         cx.ident_of(cnst)]))\n+    cx.path_global(span,\n+                   ~[cx.ident_of(\"std\"),\n+                     cx.ident_of(\"cmp\"),\n+                     cx.ident_of(cnst)])\n }\n \n pub fn cs_cmp(cx: @ExtCtxt, span: span,\n               substr: &Substructure) -> @expr {\n+    let test_id = cx.ident_of(\"__test\");\n+    let equals_path = ordering_const(cx, span, Equal);\n \n+    /*\n+    Builds:\n+\n+    let __test = self_field1.cmp(&other_field2);\n+    if other == ::std::cmp::Equal {\n+        let __test = self_field2.cmp(&other_field2);\n+        if __test == ::std::cmp::Equal {\n+            ...\n+        } else {\n+            __test\n+        }\n+    } else {\n+        __test\n+    }\n+\n+    FIXME #6449: These `if`s could/should be `match`es.\n+    */\n     cs_same_method_fold(\n-        // foldr (possibly) nests the matches in lexical_ordering better\n+        // foldr nests the if-elses correctly, leaving the first field\n+        // as the outermost one, and the last as the innermost.\n         false,\n         |cx, span, old, new| {\n-            cx.expr_call_global(span,\n-                                ~[cx.ident_of(\"std\"),\n-                                  cx.ident_of(\"cmp\"),\n-                                  cx.ident_of(\"lexical_ordering\")],\n-                                ~[old, new])\n+            // let __test = new;\n+            // if __test == ::std::cmp::Equal {\n+            //    old\n+            // } else {\n+            //    __test\n+            // }\n+\n+            let assign = cx.stmt_let(span, false, test_id, new);\n+\n+            let cond = cx.expr_binary(span, ast::eq,\n+                                      cx.expr_ident(span, test_id),\n+                                      cx.expr_path(equals_path.clone()));\n+            let if_ = cx.expr_if(span,\n+                                 cond,\n+                                 old, Some(cx.expr_ident(span, test_id)));\n+            cx.expr_block(cx.block(span, ~[assign], Some(if_)))\n         },\n-        ordering_const(cx, span, Equal),\n+        cx.expr_path(equals_path.clone()),\n         |cx, span, list, _| {\n             match list {\n                 // an earlier nonmatching variant is Less than a\n-                // later one\n+                // later one.\n                 [(self_var, _, _),\n-                 (other_var, _, _)] => ordering_const(cx, span,\n-                                                      self_var.cmp(&other_var)),\n+                 (other_var, _, _)] => cx.expr_path(ordering_const(cx, span,\n+                                                                   self_var.cmp(&other_var))),\n                 _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(TotalOrd)`\")\n             }\n         },"}]}