{"sha": "6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNGQ4NmVkOTA0ZWQ3YWUwNGVkYzQyMjZhMGExYzJkMzkwNjdkNTc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-22T02:59:19Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-22T13:10:08Z"}, "message": "add a base Container trait", "tree": {"sha": "3f29d860792467b38ec0e3f3eee987a804da0d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f29d860792467b38ec0e3f3eee987a804da0d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "html_url": "https://github.com/rust-lang/rust/commit/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d635a6e506012ad4d427578e394aa2041e7dbdfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d635a6e506012ad4d427578e394aa2041e7dbdfb", "html_url": "https://github.com/rust-lang/rust/commit/d635a6e506012ad4d427578e394aa2041e7dbdfb"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "062416838cc49cc350857c3b31ffd39aef5fdb19", "filename": "src/libcore/container.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "patch": "@@ -13,7 +13,15 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-pub trait Mutable {\n+pub trait Container {\n+    /// Return the number of elements in the container\n+    pure fn len(&self) -> uint;\n+\n+    /// Return true if the container contains no elements\n+    pure fn is_empty(&self) -> bool;\n+}\n+\n+pub trait Mutable: Container {\n     /// Clear the container, removing all values.\n     fn clear(&mut self);\n }"}, {"sha": "dc4e24c4f8a3c882ab696c71611214fe6709865e", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "patch": "@@ -26,7 +26,7 @@ use to_bytes::IterBytes;\n /// Open addressing with linear probing.\n pub mod linear {\n     use iter::BaseIter;\n-    use container::{Mutable, Map, Set};\n+    use container::{Container, Mutable, Map, Set};\n     use cmp::Eq;\n     use cmp;\n     use hash::Hash;\n@@ -258,6 +258,11 @@ pub mod linear {\n         }\n     }\n \n+    impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Container {\n+        pure fn len(&self) -> uint { self.size }\n+        pure fn is_empty(&self) -> bool { self.len() == 0 }\n+    }\n+\n     impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Mutable {\n         fn clear(&mut self) {\n             for uint::range(0, self.buckets.len()) |idx| {\n@@ -364,14 +369,6 @@ pub mod linear {\n             }\n         }\n \n-        pure fn len(&const self) -> uint {\n-            self.size\n-        }\n-\n-        pure fn is_empty(&const self) -> bool {\n-            self.len() == 0\n-        }\n-\n         pure fn find_ref(&self, k: &K) -> Option<&self/V> {\n             match self.bucket_for_key(self.buckets, k) {\n                 FoundEntry(idx) => {\n@@ -464,6 +461,11 @@ pub mod linear {\n         }\n     }\n \n+    impl <T: Hash IterBytes Eq> LinearSet<T>: Container {\n+        pure fn len(&self) -> uint { self.map.len() }\n+        pure fn is_empty(&self) -> bool { self.map.is_empty() }\n+    }\n+\n     impl <T: Hash IterBytes Eq> LinearSet<T>: Mutable {\n         fn clear(&mut self) { self.map.clear() }\n     }\n@@ -486,12 +488,6 @@ pub mod linear {\n     impl <T: Hash IterBytes Eq> LinearSet<T> {\n         /// Create an empty LinearSet\n         static fn new() -> LinearSet<T> { LinearSet{map: LinearMap()} }\n-\n-        /// Return the number of elements in the set\n-        pure fn len(&self) -> uint { self.map.len() }\n-\n-        /// Return true if the set contains no elements\n-        pure fn is_empty(&self) -> bool { self.map.is_empty() }\n     }\n }\n "}, {"sha": "ee78fafb60bad7ad811a07ce46e5fbd02fcfeb6c", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "patch": "@@ -10,7 +10,7 @@\n \n //! A priority queue implemented with a binary heap\n \n-use core::container::Mutable;\n+use core::container::{Container, Mutable};\n use core::cmp::Ord;\n use core::prelude::*;\n use core::ptr::addr_of;\n@@ -25,6 +25,14 @@ pub struct PriorityQueue <T: Ord>{\n     priv data: ~[T],\n }\n \n+impl <T: Ord> PriorityQueue<T>: Container {\n+    /// Returns the length of the queue\n+    pure fn len(&self) -> uint { self.data.len() }\n+\n+    /// Returns true if a queue contains no elements\n+    pure fn is_empty(&self) -> bool { self.data.is_empty() }\n+}\n+\n impl <T: Ord> PriorityQueue<T>: Mutable {\n     /// Drop all items from the queue\n     fn clear(&mut self) { self.data.truncate(0) }\n@@ -39,12 +47,6 @@ impl <T: Ord> PriorityQueue<T> {\n         if self.is_empty() { None } else { Some(self.top()) }\n     }\n \n-    /// Returns the length of the queue\n-    pure fn len(&self) -> uint { self.data.len() }\n-\n-    /// Returns true if a queue contains no elements\n-    pure fn is_empty(&self) -> bool { self.data.is_empty() }\n-\n     /// Returns true if a queue contains some elements\n     pure fn is_not_empty(&self) -> bool { self.data.is_not_empty() }\n "}, {"sha": "0bb8738773c92ca9d1dae0ec716a7517dd9ee0ac", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4d86ed904ed7ae04edc4226a0a1c2d39067d57/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=6f4d86ed904ed7ae04edc4226a0a1c2d39067d57", "patch": "@@ -14,7 +14,7 @@\n \n #[forbid(deprecated_mode)];\n \n-use core::container::{Mutable, Map, Set};\n+use core::container::{Container, Mutable, Map, Set};\n use core::cmp::{Eq, Ord};\n use core::option::{Option, Some, None};\n use core::prelude::*;\n@@ -67,6 +67,14 @@ impl <K: Eq Ord, V: Eq> TreeMap<K, V>: Eq {\n     pure fn ne(&self, other: &TreeMap<K, V>) -> bool { !self.eq(other) }\n }\n \n+impl <K: Ord, V> TreeMap<K, V>: Container {\n+    /// Return the number of elements in the map\n+    pure fn len(&self) -> uint { self.length }\n+\n+    /// Return true if the map contains no elements\n+    pure fn is_empty(&self) -> bool { self.root.is_none() }\n+}\n+\n impl <K: Ord, V> TreeMap<K, V>: Mutable {\n     /// Clear the map, removing all key-value pairs.\n     fn clear(&mut self) {\n@@ -112,12 +120,6 @@ impl <K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-    /// Return the number of elements in the map\n-    pure fn len(&self) -> uint { self.length }\n-\n-    /// Return true if the map contains no elements\n-    pure fn is_empty(&self) -> bool { self.root.is_none() }\n-\n     /// Return true if the map contains some elements\n     pure fn is_not_empty(&self) -> bool { self.root.is_some() }\n \n@@ -206,6 +208,14 @@ impl <T: Eq Ord> TreeSet<T>: Eq {\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }\n \n+impl <T: Ord> TreeSet<T>: Container {\n+    /// Return the number of elements in the map\n+    pure fn len(&self) -> uint { self.map.len() }\n+\n+    /// Return true if the map contains no elements\n+    pure fn is_empty(&self) -> bool { self.map.is_empty() }\n+}\n+\n impl <T: Ord> TreeSet<T>: Mutable {\n     /// Clear the set, removing all values.\n     fn clear(&mut self) { self.map.clear() }\n@@ -230,12 +240,6 @@ impl <T: Ord> TreeSet<T> {\n     /// Create an empty TreeSet\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n-    /// Return the number of elements in the set\n-    pure fn len(&self) -> uint { self.map.len() }\n-\n-    /// Return true if the set contains no elements\n-    pure fn is_empty(&self) -> bool { self.map.is_empty() }\n-\n     /// Return true if the set contains some elements\n     pure fn is_not_empty(&self) -> bool { self.map.is_not_empty() }\n "}]}