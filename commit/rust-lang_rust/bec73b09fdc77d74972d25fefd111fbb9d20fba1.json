{"sha": "bec73b09fdc77d74972d25fefd111fbb9d20fba1", "node_id": "C_kwDOAAsO6NoAKGJlYzczYjA5ZmRjNzdkNzQ5NzJkMjVmZWZkMTExZmJiOWQyMGZiYTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-19T16:57:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:22:45Z"}, "message": "Pacify tidy.", "tree": {"sha": "0de8d52b226a3e23504b5a6766acfb5693d3eb8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de8d52b226a3e23504b5a6766acfb5693d3eb8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bec73b09fdc77d74972d25fefd111fbb9d20fba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bec73b09fdc77d74972d25fefd111fbb9d20fba1", "html_url": "https://github.com/rust-lang/rust/commit/bec73b09fdc77d74972d25fefd111fbb9d20fba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bec73b09fdc77d74972d25fefd111fbb9d20fba1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1dbe54ea5e05725273ae8ac6c1dda15153fa7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1dbe54ea5e05725273ae8ac6c1dda15153fa7c", "html_url": "https://github.com/rust-lang/rust/commit/8f1dbe54ea5e05725273ae8ac6c1dda15153fa7c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "8b024721718d2ae7c6e286a42067b9bd6cafef38", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bec73b09fdc77d74972d25fefd111fbb9d20fba1/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec73b09fdc77d74972d25fefd111fbb9d20fba1/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=bec73b09fdc77d74972d25fefd111fbb9d20fba1", "patch": "@@ -67,7 +67,7 @@ enum LocationExtended {\n #[derive(Debug)]\n struct SsaLocals {\n     dominators: Dominators<BasicBlock>,\n-    /// Assignments to each local.  This defines whether the local is SSA.\n+    /// Assignments to each local. This defines whether the local is SSA.\n     assignments: IndexVec<Local, Set1<LocationExtended>>,\n     /// We visit the body in reverse postorder, to ensure each local is assigned before it is used.\n     /// We remember the order in which we saw the assignments to compute the SSA values in a single\n@@ -157,7 +157,7 @@ impl<'tcx> Visitor<'tcx> for SsaLocals {\n ///   _d => _a // transitively through _c\n ///\n /// This function also returns whether all the `move?` in the pattern are `move` and not copies.\n-/// A local which is in the bitset can be replaced by `move _a`.  Otherwise, it must be\n+/// A local which is in the bitset can be replaced by `move _a`. Otherwise, it must be\n /// replaced by `copy _a`, as we cannot move multiple times from `_a`.\n ///\n /// If an operand copies `_c`, it must happen before the assignment `_d = _c`, otherwise it is UB.\n@@ -221,7 +221,7 @@ fn compute_copy_classes(\n fn meet_copy_equivalence(copies: &IndexVec<Local, Local>, property: &mut BitSet<Local>) {\n     // Consolidate to have a local iff all its copies are.\n     //\n-    // `copies` defines equivalence classes between locals.  The `local`s that recursively\n+    // `copies` defines equivalence classes between locals. The `local`s that recursively\n     // move/copy the same local all have the same `head`.\n     for (local, &head) in copies.iter_enumerated() {\n         // If any copy does not have `property`, then the head is not."}]}