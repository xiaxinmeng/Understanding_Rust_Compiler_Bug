{"sha": "b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MmM4YzJmY2Y5ZmYzMmUyMjVmNTc0NTZiNjVkNzJiNzM2ZjNjMmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-24T00:54:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-24T23:44:07Z"}, "message": "Reorder code, fix unittests", "tree": {"sha": "d2c4006494b05048ca848c498c1d9390ec3bdca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c4006494b05048ca848c498c1d9390ec3bdca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "html_url": "https://github.com/rust-lang/rust/commit/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366dd1bd3fbabd020cd9acd8f12065e488acc3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/366dd1bd3fbabd020cd9acd8f12065e488acc3d6", "html_url": "https://github.com/rust-lang/rust/commit/366dd1bd3fbabd020cd9acd8f12065e488acc3d6"}], "stats": {"total": 282, "additions": 194, "deletions": 88}, "files": [{"sha": "8ef42826faca5cc2d00043951c4a785f67c5f886", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -1049,18 +1049,19 @@ which expected that trait. This error typically occurs when working with\n `Fn`-based types. Erroneous code example:\n \n ```compile_fail,E0281\n-fn foo<F: Fn()>(x: F) { }\n+fn foo<F: Fn(usize)>(x: F) { }\n \n fn main() {\n-    // type mismatch: the type ... implements the trait `core::ops::Fn<(_,)>`,\n-    // but the trait `core::ops::Fn<()>` is required (expected (), found tuple\n+    // type mismatch: ... implements the trait `core::ops::Fn<(String,)>`,\n+    // but the trait `core::ops::Fn<(usize,)>` is required\n     // [E0281]\n-    foo(|y| { });\n+    foo(|y: String| { });\n }\n ```\n \n-The issue in this case is that `foo` is defined as accepting a `Fn` with no\n-arguments, but the closure we attempted to pass to it requires one argument.\n+The issue in this case is that `foo` is defined as accepting a `Fn` with one\n+argument of type `String`, but the closure we attempted to pass to it requires\n+one arguments of type `usize`.\n \"##,\n \n E0282: r##\"\n@@ -1807,6 +1808,20 @@ makes a difference in practice.)\n [rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n \"##,\n \n+E0593: r##\"\n+You tried to supply an `Fn`-based type with an incorrect number of arguments\n+than what was expected. Erroneous code example:\n+\n+```compile_fail,E0593\n+fn foo<F: Fn()>(x: F) { }\n+\n+fn main() {\n+    // [E0593] closure takes 1 argument but 0 arguments are required\n+    foo(|y| { });\n+}\n+```\n+\"##,\n+\n }\n \n \n@@ -1850,6 +1865,4 @@ register_diagnostics! {\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n     E0566, // conflicting representation hints\n     E0587, // conflicting packed and align representation hints\n-    E0593, // closure argument count mismatch\n-    E0594  // closure mismatch\n }"}, {"sha": "532a6be356e3da7da657efda30306ee1a7f1f49e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 97, "deletions": 52, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -664,61 +664,52 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     return;\n                 }\n                 let expected_trait_ty = expected_trait_ref.self_ty();\n-                if expected_trait_ty.is_closure() {\n-                    if let &TypeError::TupleSize(ref expected_found) = e {\n-                        let mut err = struct_span_err!(self.tcx.sess, span, E0593,\n-                            \"closure takes {} parameter{} but {} parameter{} are required here\",\n-                            expected_found.found,\n-                            if expected_found.found == 1 { \"\" } else { \"s\" },\n-                            expected_found.expected,\n-                            if expected_found.expected == 1 { \"\" } else { \"s\" });\n-\n-                        err.span_label(span, &format!(\"expected closure that takes {} parameter{}\",\n-                                                      expected_found.expected,\n-                                                      if expected_found.expected == 1 {\n-                                                          \"\"\n-                                                      } else {\n-                                                          \"s\"\n-                                                      }));\n-                        let closure_span = expected_trait_ty.ty_to_def_id().and_then(|did| {\n-                            self.tcx.hir.span_if_local(did)\n-                        });\n-                        if let Some(span) = closure_span {\n-                            err.span_label(span, &format!(\"takes {} parameter{}\",\n-                                                          expected_found.found,\n-                                                          if expected_found.found == 1 {\n-                                                              \"\"\n-                                                          } else {\n-                                                              \"s\"\n-                                                          }));\n-                        }\n-                        err\n+                let found_span = expected_trait_ty.ty_to_def_id().and_then(|did| {\n+                    self.tcx.hir.span_if_local(did)\n+                });\n+\n+                if let &TypeError::TupleSize(ref expected_found) = e {\n+                    // Expected `|x| { }`, found `|x, y| { }`\n+                    self.report_arg_count_mismatch(span,\n+                                                   found_span,\n+                                                   expected_found.expected,\n+                                                   expected_found.found,\n+                                                   expected_trait_ty.is_closure())\n+                } else if let &TypeError::Sorts(ref expected_found) = e {\n+                    let expected = if let ty::TyTuple(tys, _) = expected_found.expected.sty {\n+                        tys.len()\n                     } else {\n-                        let mut err = struct_span_err!(self.tcx.sess, span, E0594,\n-                            \"closure mismatch: `{}` implements the trait `{}`, \\\n-                             but the trait `{}` is required\",\n-                            expected_trait_ty,\n-                            expected_trait_ref,\n-                            actual_trait_ref);\n-\n-                        let closure_span = expected_trait_ty.ty_to_def_id().and_then(|did| {\n-                            self.tcx.hir.span_if_local(did)\n-                        });\n-                        if let Some(span) = closure_span {\n-                            err.span_label(span, &format!(\"{}\", e));\n-                        } else {\n-                            err.note(&format!(\"{}\", e));\n-                        }\n-                        err\n+                        1\n+                    };\n+                    let found = if let ty::TyTuple(tys, _) = expected_found.found.sty {\n+                        tys.len()\n+                    } else {\n+                        1\n+                    };\n+\n+                    if expected != found {\n+                        // Expected `|| { }`, found `|x, y| { }`\n+                        // Expected `fn(x) -> ()`, found `|| { }`\n+                        self.report_arg_count_mismatch(span,\n+                                                       found_span,\n+                                                       expected,\n+                                                       found,\n+                                                       expected_trait_ty.is_closure())\n+                    } else {\n+                        self.report_type_argument_mismatch(span,\n+                                                            found_span,\n+                                                            expected_trait_ty,\n+                                                            expected_trait_ref,\n+                                                            actual_trait_ref,\n+                                                            e)\n                     }\n                 } else {\n-                    struct_span_err!(self.tcx.sess, span, E0281,\n-                        \"type mismatch: the type `{}` implements the trait `{}`, \\\n-                         but the trait `{}` is required ({})\",\n-                        expected_trait_ty,\n-                        expected_trait_ref,\n-                        actual_trait_ref,\n-                        e)\n+                    self.report_type_argument_mismatch(span,\n+                                                        found_span,\n+                                                        expected_trait_ty,\n+                                                        expected_trait_ref,\n+                                                        actual_trait_ref,\n+                                                        e)\n                 }\n             }\n \n@@ -731,6 +722,60 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.note_obligation_cause(&mut err, obligation);\n         err.emit();\n     }\n+\n+    fn report_type_argument_mismatch(&self,\n+                                      span: Span,\n+                                      found_span: Option<Span>,\n+                                      expected_ty: Ty<'tcx>,\n+                                      expected_ref: ty::PolyTraitRef<'tcx>,\n+                                      found_ref: ty::PolyTraitRef<'tcx>,\n+                                      type_error: &TypeError<'tcx>)\n+        -> DiagnosticBuilder<'tcx>\n+    {\n+        let mut err = struct_span_err!(self.tcx.sess, span, E0281,\n+            \"type mismatch: `{}` implements the trait `{}`, but the trait `{}` is required\",\n+            expected_ty,\n+            expected_ref,\n+            found_ref);\n+\n+        err.span_label(span, &format!(\"{}\", type_error));\n+\n+        if let Some(sp) = found_span {\n+            err.span_label(span, &format!(\"requires `{}`\", found_ref));\n+            err.span_label(sp, &format!(\"implements `{}`\", expected_ref));\n+        }\n+\n+        err\n+    }\n+\n+    fn report_arg_count_mismatch(&self,\n+                                 span: Span,\n+                                 found_span: Option<Span>,\n+                                 expected: usize,\n+                                 found: usize,\n+                                 is_closure: bool)\n+        -> DiagnosticBuilder<'tcx>\n+    {\n+        let mut err = struct_span_err!(self.tcx.sess, span, E0593,\n+            \"{} takes {} argument{} but {} argument{} {} required\",\n+            if is_closure { \"closure\" } else { \"function\" },\n+            found,\n+            if found == 1 { \"\" } else { \"s\" },\n+            expected,\n+            if expected == 1 { \"\" } else { \"s\" },\n+            if expected == 1 { \"is\" } else { \"are\" });\n+\n+        err.span_label(span, &format!(\"expected {} that takes {} argument{}\",\n+                                      if is_closure { \"closure\" } else { \"function\" },\n+                                      expected,\n+                                      if expected == 1 { \"\" } else { \"s\" }));\n+        if let Some(span) = found_span {\n+            err.span_label(span, &format!(\"takes {} argument{}\",\n+                                          found,\n+                                          if found == 1 { \"\" } else { \"s\" }));\n+        }\n+        err\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "abb66c99fab9c6d8eb5c831e7fa6b309c3f642e5", "filename": "src/test/compile-fail/E0281.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2FE0281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2FE0281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0281.rs?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -8,9 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo<F: Fn()>(x: F) { }\n+fn foo<F: Fn(usize)>(x: F) { }\n \n fn main() {\n-    foo(|y| { }); //~ ERROR E0281\n-                  //~^ ERROR E0281\n+    foo(|y: String| { });\n+    //~^ ERROR E0281\n+    //~| ERROR E0281\n+    //~| NOTE implements\n+    //~| NOTE implements\n+    //~| NOTE requires\n+    //~| NOTE requires\n+    //~| NOTE expected usize, found struct `std::string::String`\n+    //~| NOTE expected usize, found struct `std::string::String`\n+    //~| NOTE required by `foo`\n+    //~| NOTE required by `foo`\n }"}, {"sha": "4bea8177b7c5e354e64815a68085787044985ace", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -19,9 +19,13 @@ fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n fn main() {\n     apply(&3, takes_imm);\n     apply(&3, takes_mut);\n-    //~^ ERROR (types differ in mutability)\n+    //~^ ERROR type mismatch\n+    //~| NOTE types differ in mutability\n+    //~| NOTE required by `apply`\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n-    //~^ ERROR (types differ in mutability)\n+    //~^ ERROR type mismatch\n+    //~| NOTE types differ in mutability\n+    //~| NOTE required by `apply`\n }"}, {"sha": "7e489621e21027857fbacb0a562e16d3bf65f292", "filename": "src/test/compile-fail/issue-36053-2.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36053-2.rs?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -18,4 +18,11 @@ fn main() {\n     //~^ ERROR no method named `count`\n     //~| ERROR E0281\n     //~| ERROR E0281\n+    //~| NOTE expected &str, found str\n+    //~| NOTE expected &str, found str\n+    //~| NOTE implements\n+    //~| NOTE implements\n+    //~| NOTE requires\n+    //~| NOTE requires\n+    //~| NOTE the method `count` exists but the following trait bounds\n }"}, {"sha": "7400a27fb6bc14c5ec842e164bee284ba64b5aef", "filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -20,8 +20,16 @@ fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n \n pub fn main() {\n     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+    //~^ NOTE implements\n+    //~| NOTE implements\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n     //~| ERROR type mismatch\n+    //~| NOTE expected isize, found usize\n+    //~| NOTE expected isize, found usize\n+    //~| NOTE requires\n+    //~| NOTE requires\n+    //~| NOTE required by `call_it`\n+    //~| NOTE required by `call_it`\n     println!(\"{}\", z);\n }"}, {"sha": "284f82d86eb921e5d496f22cb4f56e794cf8a1be", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n fn main() {\n+    [1, 2, 3].sort_by(|| panic!());\n     [1, 2, 3].sort_by(|tuple| panic!());\n     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n }"}, {"sha": "c1b880b6162734e5a720e3452086e4a222831800", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -1,43 +1,59 @@\n-error[E0593]: closure takes 1 parameter but 2 parameters are required here\n+error[E0593]: closure takes 0 arguments but 2 arguments are required\n   --> $DIR/closure-arg-count.rs:12:15\n    |\n-12 |     [1, 2, 3].sort_by(|tuple| panic!());\n-   |               ^^^^^^^ ---------------- takes 1 parameter\n+12 |     [1, 2, 3].sort_by(|| panic!());\n+   |               ^^^^^^^ ----------- takes 0 arguments\n    |               |\n-   |               expected closure that takes 2 parameters\n+   |               expected closure that takes 2 arguments\n \n-error[E0593]: closure takes 1 parameter but 2 parameters are required here\n+error[E0593]: closure takes 0 arguments but 2 arguments are required\n   --> $DIR/closure-arg-count.rs:12:15\n    |\n-12 |     [1, 2, 3].sort_by(|tuple| panic!());\n-   |               ^^^^^^^ ---------------- takes 1 parameter\n+12 |     [1, 2, 3].sort_by(|| panic!());\n+   |               ^^^^^^^ ----------- takes 0 arguments\n    |               |\n-   |               expected closure that takes 2 parameters\n+   |               expected closure that takes 2 arguments\n+\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:13:15\n+   |\n+13 |     [1, 2, 3].sort_by(|tuple| panic!());\n+   |               ^^^^^^^ ---------------- takes 1 argument\n+   |               |\n+   |               expected closure that takes 2 arguments\n+\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:13:15\n+   |\n+13 |     [1, 2, 3].sort_by(|tuple| panic!());\n+   |               ^^^^^^^ ---------------- takes 1 argument\n+   |               |\n+   |               expected closure that takes 2 arguments\n \n error[E0308]: mismatched types\n-  --> $DIR/closure-arg-count.rs:13:24\n+  --> $DIR/closure-arg-count.rs:14:24\n    |\n-13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n    |                        ^^^^^^^^^^^^^^^ expected &{integer}, found tuple\n    |\n    = note: expected type `&{integer}`\n               found type `(_, _)`\n \n-error[E0593]: closure takes 1 parameter but 2 parameters are required here\n-  --> $DIR/closure-arg-count.rs:13:15\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:14:15\n    |\n-13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n-   |               ^^^^^^^ -------------------------- takes 1 parameter\n+14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |               ^^^^^^^ -------------------------- takes 1 argument\n    |               |\n-   |               expected closure that takes 2 parameters\n+   |               expected closure that takes 2 arguments\n \n-error[E0593]: closure takes 1 parameter but 2 parameters are required here\n-  --> $DIR/closure-arg-count.rs:13:15\n+error[E0593]: closure takes 1 argument but 2 arguments are required\n+  --> $DIR/closure-arg-count.rs:14:15\n    |\n-13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n-   |               ^^^^^^^ -------------------------- takes 1 parameter\n+14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |               ^^^^^^^ -------------------------- takes 1 argument\n    |               |\n-   |               expected closure that takes 2 parameters\n+   |               expected closure that takes 2 arguments\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "5b3eb5931896aee60c50c0e36b8efa0c97379607", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b52c8c2fcf9ff32e225f57456b65d72b736f3c2d/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=b52c8c2fcf9ff32e225f57456b65d72b736f3c2d", "patch": "@@ -8,11 +8,14 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n    = note: required by `baz`\n \n-error[E0594]: closure mismatch: `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]` implements the trait `std::ops::Fn<(_,)>`, but the trait `for<'r> std::ops::Fn<(&'r (),)>` is required\n+error[E0281]: type mismatch: `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]` implements the trait `std::ops::Fn<(_,)>`, but the trait `for<'r> std::ops::Fn<(&'r (),)>` is required\n   --> $DIR/closure-mismatch.rs:18:5\n    |\n 18 |     baz(|_| ());\n-   |     ^^^ ------ expected concrete lifetime, found bound lifetime parameter\n+   |     ^^^ ------ implements `std::ops::Fn<(_,)>`\n+   |     |\n+   |     requires `for<'r> std::ops::Fn<(&'r (),)>`\n+   |     expected concrete lifetime, found bound lifetime parameter\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n    = note: required by `baz`"}]}