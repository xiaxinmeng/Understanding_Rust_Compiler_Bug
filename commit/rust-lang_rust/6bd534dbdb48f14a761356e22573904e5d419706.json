{"sha": "6bd534dbdb48f14a761356e22573904e5d419706", "node_id": "C_kwDOAAsO6NoAKDZiZDUzNGRiZGI0OGYxNGE3NjEzNTZlMjI1NzM5MDRlNWQ0MTk3MDY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-11-19T21:18:28Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-11-19T21:18:28Z"}, "message": "return the correct type for closures in `type_of`", "tree": {"sha": "e1b6b4305ac472b632d1a8bc9da8d487436e666a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b6b4305ac472b632d1a8bc9da8d487436e666a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bd534dbdb48f14a761356e22573904e5d419706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd534dbdb48f14a761356e22573904e5d419706", "html_url": "https://github.com/rust-lang/rust/commit/6bd534dbdb48f14a761356e22573904e5d419706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bd534dbdb48f14a761356e22573904e5d419706/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18fa4342fc215fe9e714307db694eaa8f5dc4a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fa4342fc215fe9e714307db694eaa8f5dc4a0d", "html_url": "https://github.com/rust-lang/rust/commit/18fa4342fc215fe9e714307db694eaa8f5dc4a0d"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "769febfe8cf9914d215da253fdc13d49efb038bb", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bd534dbdb48f14a761356e22573904e5d419706/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd534dbdb48f14a761356e22573904e5d419706/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=6bd534dbdb48f14a761356e22573904e5d419706", "patch": "@@ -294,7 +294,9 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n         if let hir::ExprKind::Closure(..) = expr.kind {\n             let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n             self.tcx.ensure().generics_of(def_id);\n-            self.tcx.ensure().type_of(def_id);\n+            // We do not call `type_of` for closures here as that\n+            // depends on typecheck and would therefore hide\n+            // any further errors in case one typeck fails.\n         }\n         intravisit::walk_expr(self, expr);\n     }"}, {"sha": "202d8111706337120a2cd375db35a46a92dcd1d7", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bd534dbdb48f14a761356e22573904e5d419706/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd534dbdb48f14a761356e22573904e5d419706/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=6bd534dbdb48f14a761356e22573904e5d419706", "patch": "@@ -463,14 +463,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Field(field) => icx.to_ty(field.ty),\n \n-        Node::Expr(&Expr { kind: ExprKind::Closure(.., gen), .. }) => {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n-            if let Some(movability) = gen {\n-                tcx.mk_generator(def_id.to_def_id(), substs, movability)\n-            } else {\n-                tcx.mk_closure(def_id.to_def_id(), substs)\n-            }\n-        }\n+        Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => tcx.typeck(def_id).node_type(hir_id),\n \n         Node::AnonConst(_) if let Some(param) = tcx.opt_const_param_of(def_id) => {\n             // We defer to `type_of` of the corresponding parameter"}, {"sha": "e57045b20ce5968b6cacf149443d7a3ed71090e1", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bd534dbdb48f14a761356e22573904e5d419706/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd534dbdb48f14a761356e22573904e5d419706/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=6bd534dbdb48f14a761356e22573904e5d419706", "patch": "@@ -715,13 +715,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         debug!(\"walk_captures({:?})\", closure_expr);\n \n-        let closure_def_id = self.tcx().hir().local_def_id(closure_expr.hir_id).to_def_id();\n-        let upvars = self.tcx().upvars_mentioned(self.body_owner);\n+        let tcx = self.tcx();\n+        let closure_def_id = tcx.hir().local_def_id(closure_expr.hir_id).to_def_id();\n+        let upvars = tcx.upvars_mentioned(self.body_owner);\n \n         // For purposes of this function, generator and closures are equivalent.\n         let body_owner_is_closure = matches!(\n-            self.tcx().type_of(self.body_owner.to_def_id()).kind(),\n-            ty::Closure(..) | ty::Generator(..)\n+            tcx.hir().body_owner_kind(tcx.hir().local_def_id_to_hir_id(self.body_owner)),\n+            hir::BodyOwnerKind::Closure,\n         );\n \n         // If we have a nested closure, we want to include the fake reads present in the nested closure."}]}