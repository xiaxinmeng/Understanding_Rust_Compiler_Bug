{"sha": "f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "node_id": "C_kwDOAAsO6NoAKGYwZmVmZGU0MDE3ZmEwNzdhMDE4YzRlZDAzYTY2YjVjNjk3MGZiOGE", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T17:33:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "remove Item::parse", "tree": {"sha": "a78181fef4a62ff374154d8964bc90efebc999da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78181fef4a62ff374154d8964bc90efebc999da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "html_url": "https://github.com/rust-lang/rust/commit/f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b468bd664539ece8db6ac63d3d652ec0679edd9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b468bd664539ece8db6ac63d3d652ec0679edd9e", "html_url": "https://github.com/rust-lang/rust/commit/b468bd664539ece8db6ac63d3d652ec0679edd9e"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "5eaad8b1d537c129c6fd0ea269e9a79f1250e984", "filename": "crates/ide_ssr/src/fragments.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ffragments.rs?ref=f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "patch": "@@ -19,3 +19,14 @@ pub(crate) fn ty(s: &str) -> Result<SyntaxNode, ()> {\n     let node = parse.tree().syntax().descendants().find_map(ast::Type::cast).ok_or(())?;\n     Ok(node.syntax().clone())\n }\n+\n+pub(crate) fn item(s: &str) -> Result<SyntaxNode, ()> {\n+    let template = \"{}\";\n+    let input = template.replace(\"{}\", s);\n+    let parse = syntax::SourceFile::parse(&input);\n+    if !parse.errors().is_empty() {\n+        return Err(());\n+    }\n+    let node = parse.tree().syntax().descendants().find_map(ast::Item::cast).ok_or(())?;\n+    Ok(node.syntax().clone())\n+}"}, {"sha": "1d5633cfe0072e20e70c33d8cc286837c2512e01", "filename": "crates/ide_ssr/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fparsing.rs?ref=f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "patch": "@@ -80,7 +80,7 @@ impl ParsedRule {\n             builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_stmt.clone());\n         }\n         builder.try_add2(fragments::ty(&raw_pattern), raw_template.map(fragments::ty));\n-        builder.try_add(ast::Item::parse(&raw_pattern), raw_template.map(ast::Item::parse));\n+        builder.try_add2(fragments::item(&raw_pattern), raw_template.map(fragments::item));\n         builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n         builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n         builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template_stmt);"}, {"sha": "1c4cb6bc7704cdd8080e55216ee6df17c3df045a", "filename": "crates/ide_ssr/src/replacing.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fide_ssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fide_ssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Freplacing.rs?ref=f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "patch": "@@ -1,5 +1,6 @@\n //! Code for applying replacement templates for matches that have previously been found.\n \n+use crate::fragments;\n use crate::{resolving::ResolvedRule, Match, SsrMatches};\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -228,9 +229,10 @@ fn parse_as_kind(code: &str, kind: SyntaxKind) -> Option<SyntaxNode> {\n         if let Ok(expr) = ast::Expr::parse(code) {\n             return Some(expr.syntax().clone());\n         }\n-    } else if ast::Item::can_cast(kind) {\n-        if let Ok(item) = ast::Item::parse(code) {\n-            return Some(item.syntax().clone());\n+    }\n+    if ast::Item::can_cast(kind) {\n+        if let Ok(item) = fragments::item(code) {\n+            return Some(item);\n         }\n     }\n     None"}, {"sha": "da62590ab66cffbd48c212ab7a0bb68d65a0ae70", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "patch": "@@ -142,7 +142,6 @@ pub enum ParserEntryPoint {\n     Expr,\n     StatementOptionalSemi,\n     Pattern,\n-    Item,\n     Attr,\n }\n \n@@ -164,7 +163,6 @@ pub fn parse(inp: &Input, entry_point: ParserEntryPoint) -> Output {\n         ParserEntryPoint::Path => grammar::entry::prefix::path,\n         ParserEntryPoint::Expr => grammar::entry::prefix::expr,\n         ParserEntryPoint::Pattern => grammar::entry::prefix::pat,\n-        ParserEntryPoint::Item => grammar::entry::prefix::item,\n         ParserEntryPoint::StatementOptionalSemi => grammar::entry_points::stmt_optional_semi,\n         ParserEntryPoint::Attr => grammar::entry_points::attr,\n     };"}, {"sha": "a495e4aff1751c316e1dea6128a02f3615dc1a7a", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "patch": "@@ -194,13 +194,6 @@ impl ast::Expr {\n     }\n }\n \n-impl ast::Item {\n-    /// Returns `text`, parsed as an item, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Item)\n-    }\n-}\n-\n impl ast::Attr {\n     /// Returns `text`, parsed as an attribute, but only if it has no errors.\n     pub fn parse(text: &str) -> Result<Self, ()> {"}, {"sha": "a1f35aab680d4230fe6be0e9d8f3da0c85d42d00", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fefde4017fa077a018c4ed03a66b5c6970fb8a/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=f0fefde4017fa077a018c4ed03a66b5c6970fb8a", "patch": "@@ -86,15 +86,6 @@ fn pattern_parser_tests() {\n     );\n }\n \n-#[test]\n-fn item_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/item/ok\"],\n-        &[\"parser/fragments/item/err\"],\n-        crate::ast::Item::parse,\n-    );\n-}\n-\n #[test]\n fn stmt_parser_tests() {\n     fragment_parser_dir_test("}]}