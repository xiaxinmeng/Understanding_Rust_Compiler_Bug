{"sha": "75eee8b194231c2fe808242a9828253125b854c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZWVlOGIxOTQyMzFjMmZlODA4MjQyYTk4MjgyNTMxMjViODU0Yzg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T13:34:50Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T13:43:15Z"}, "message": "Overhaul alias-checking of blocks\n\nThe set of active bindings has to be updated as by-reference locals are\nencountered.\n\nIssue #918", "tree": {"sha": "4709f37980a65be11b4f1fa61f507cb9cc26c1c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4709f37980a65be11b4f1fa61f507cb9cc26c1c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75eee8b194231c2fe808242a9828253125b854c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75eee8b194231c2fe808242a9828253125b854c8", "html_url": "https://github.com/rust-lang/rust/commit/75eee8b194231c2fe808242a9828253125b854c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75eee8b194231c2fe808242a9828253125b854c8/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87fa38910eb78c116cd34b2524edd9c1cfe97228", "url": "https://api.github.com/repos/rust-lang/rust/commits/87fa38910eb78c116cd34b2524edd9c1cfe97228", "html_url": "https://github.com/rust-lang/rust/commit/87fa38910eb78c116cd34b2524edd9c1cfe97228"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "35733d6e3f670af9e487240a425260a19d96e836", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/75eee8b194231c2fe808242a9828253125b854c8/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75eee8b194231c2fe808242a9828253125b854c8/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=75eee8b194231c2fe808242a9828253125b854c8", "patch": "@@ -47,7 +47,6 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> copy_map {\n                copy_map: std::map::new_int_hash()};\n     let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n               visit_expr: bind visit_expr(cx, _, _, _),\n-              visit_decl: bind visit_decl(cx, _, _, _),\n               visit_block: bind visit_block(cx, _, _, _)\n               with *visit::default_visitor::<scope>()};\n     visit::visit_crate(*crate, {bs: [], ret_style: ast::return_val},\n@@ -132,46 +131,38 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n     if !handled { visit::visit_expr(ex, sc, v); }\n }\n \n-fn visit_decl(cx: @ctx, d: @ast::decl, sc: scope, v: vt<scope>) {\n-    visit::visit_decl(d, sc, v);\n-    alt d.node {\n-      ast::decl_local(locs) {\n-        for (_, loc) in locs {\n-            alt loc.node.init {\n-              some(init) {\n-                if init.op == ast::init_move {\n-                    check_lval(cx, init.expr, sc, v);\n-                }\n-              }\n-              none. { }\n-            }\n-        }\n-      }\n-      _ { }\n-    }\n-}\n-\n fn visit_block(cx: @ctx, b: ast::blk, sc: scope, v: vt<scope>) {\n-    let ref_locs = [];\n+    let bs = sc.bs;\n     for stmt in b.node.stmts {\n         alt stmt.node {\n-          ast::stmt_decl(@{node: ast::decl_local(ls), _}, _) {\n-            for (st, loc) in ls {\n+          ast::stmt_decl(@{node: ast::decl_item(it), _}, _) {\n+            v.visit_item(it, sc, v);\n+          }\n+          ast::stmt_decl(@{node: ast::decl_local(locs), _}, _) {\n+            for (st, loc) in locs {\n                 if st == ast::let_ref {\n-                    ref_locs += [loc];\n+                    add_bindings_for_let(*cx, bs, loc);\n+                    sc = {bs: bs with sc};\n+                }\n+                alt loc.node.init {\n+                  some(init) {\n+                    if init.op == ast::init_move {\n+                        check_lval(cx, init.expr, sc, v);\n+                    }\n+                  }\n+                  none. { }\n                 }\n             }\n           }\n-          _ {}\n+          ast::stmt_expr(ex, _) {\n+            v.visit_expr(ex, sc, v);\n+          }\n+          ast::stmt_crate_directive(cd) {\n+            visit::visit_crate_directive(cd, sc, v);\n+          }\n         }\n     }\n-    if vec::len(ref_locs) > 0u {\n-        let bindings = sc.bs;\n-        for loc in ref_locs { add_bindings_for_let(*cx, bindings, loc); }\n-        visit::visit_block(b, {bs: bindings with sc}, v);\n-    } else {\n-        visit::visit_block(b, sc, v);\n-    }\n+    visit::visit_expr_opt(b.node.expr, sc, v);\n }\n \n fn add_bindings_for_let(cx: ctx, &bs: [binding], loc: @ast::local) {\n@@ -192,12 +183,14 @@ fn add_bindings_for_let(cx: ctx, &bs: [binding], loc: @ast::local) {\n                 let ret_style = ty::ty_fn_ret_style(cx.tcx, fty);\n                 if ast_util::ret_by_ref(ret_style) {\n                     // FIXME pick right arg\n-                    let arg_root = expr_root(cx.tcx, args[0], false);\n+                    let arg = args[0];\n+                    let arg_root = expr_root(cx.tcx, arg, false);\n                     root_var = path_def_id(cx, arg_root.ex);\n                     if !is_none(root_var) {\n                         is_temp = false;\n                         if ret_style == ast::return_ref(true) {\n-                            outer_ds = [@{mut: true with *arg_root.ds[0]}];\n+                            outer_ds = [@{mut: true, kind: unbox,\n+                                          outer_t: ty::expr_ty(cx.tcx, arg)}];\n                         }\n                         outer_ds = *arg_root.ds + outer_ds;\n                     }"}]}