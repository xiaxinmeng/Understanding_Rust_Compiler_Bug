{"sha": "3bfa3e8123dd2d652019ad270622025d10b87cc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZmEzZTgxMjNkZDJkNjUyMDE5YWQyNzA2MjIwMjVkMTBiODdjYzg=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-04T19:21:30Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-08T18:57:18Z"}, "message": "when generating new function, focus on return type instead of body\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "45c5761137519e63ea26fb097924394e8e7b268b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c5761137519e63ea26fb097924394e8e7b268b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bfa3e8123dd2d652019ad270622025d10b87cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfa3e8123dd2d652019ad270622025d10b87cc8", "html_url": "https://github.com/rust-lang/rust/commit/3bfa3e8123dd2d652019ad270622025d10b87cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bfa3e8123dd2d652019ad270622025d10b87cc8/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "636b413e142e2b831ded74642c8193a0dc39b4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/636b413e142e2b831ded74642c8193a0dc39b4a7", "html_url": "https://github.com/rust-lang/rust/commit/636b413e142e2b831ded74642c8193a0dc39b4a7"}], "stats": {"total": 148, "additions": 80, "deletions": 68}, "files": [{"sha": "d23f4293b35f6b4bbce09b5a11590a67ec3ab6f8", "filename": "crates/assists/src/handlers/generate_function.rs", "status": "modified", "additions": 67, "deletions": 65, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/3bfa3e8123dd2d652019ad270622025d10b87cc8/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfa3e8123dd2d652019ad270622025d10b87cc8/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=3bfa3e8123dd2d652019ad270622025d10b87cc8", "patch": "@@ -36,8 +36,8 @@ use crate::{\n //     bar(\"\", baz());\n // }\n //\n-// fn bar(arg: &str, baz: Baz) {\n-//     ${0:todo!()}\n+// fn bar(arg: &str, baz: Baz) ${0:-> ()} {\n+//     todo!()\n // }\n //\n // ```\n@@ -80,21 +80,19 @@ pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Optio\n \n struct FunctionTemplate {\n     insert_offset: TextSize,\n-    placeholder_expr: ast::MacroCall,\n     leading_ws: String,\n     fn_def: ast::Fn,\n+    ret_type: ast::RetType,\n     trailing_ws: String,\n     file: FileId,\n }\n \n impl FunctionTemplate {\n     fn to_string(&self, cap: Option<SnippetCap>) -> String {\n         let f = match cap {\n-            Some(cap) => render_snippet(\n-                cap,\n-                self.fn_def.syntax(),\n-                Cursor::Replace(self.placeholder_expr.syntax()),\n-            ),\n+            Some(cap) => {\n+                render_snippet(cap, self.fn_def.syntax(), Cursor::Replace(self.ret_type.syntax()))\n+            }\n             None => self.fn_def.to_string(),\n         };\n         format!(\"{}{}{}\", self.leading_ws, f, self.trailing_ws)\n@@ -141,8 +139,14 @@ impl FunctionBuilder {\n         let placeholder_expr = make::expr_todo();\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n         let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n-        let mut fn_def =\n-            make::fn_(visibility, self.fn_name, self.type_params, self.params, fn_body);\n+        let mut fn_def = make::fn_(\n+            visibility,\n+            self.fn_name,\n+            self.type_params,\n+            self.params,\n+            fn_body,\n+            Some(make::ret_type(make::ty(\"()\"))),\n+        );\n         let leading_ws;\n         let trailing_ws;\n \n@@ -163,12 +167,10 @@ impl FunctionBuilder {\n             }\n         };\n \n-        let placeholder_expr =\n-            fn_def.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n         FunctionTemplate {\n             insert_offset,\n-            placeholder_expr,\n             leading_ws,\n+            ret_type: fn_def.ret_type().unwrap(),\n             fn_def,\n             trailing_ws,\n             file: self.file,\n@@ -349,8 +351,8 @@ fn foo() {\n     bar();\n }\n \n-fn bar() {\n-    ${0:todo!()}\n+fn bar() ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -376,8 +378,8 @@ impl Foo {\n     }\n }\n \n-fn bar() {\n-    ${0:todo!()}\n+fn bar() ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -400,8 +402,8 @@ fn foo1() {\n     bar();\n }\n \n-fn bar() {\n-    ${0:todo!()}\n+fn bar() ${0:-> ()} {\n+    todo!()\n }\n \n fn foo2() {}\n@@ -426,8 +428,8 @@ mod baz {\n         bar();\n     }\n \n-    fn bar() {\n-        ${0:todo!()}\n+    fn bar() ${0:-> ()} {\n+        todo!()\n     }\n }\n \",\n@@ -452,8 +454,8 @@ fn foo() {\n     bar(baz());\n }\n \n-fn bar(baz: Baz) {\n-    ${0:todo!()}\n+fn bar(baz: Baz) ${0:-> ()} {\n+    todo!()\n }\n \",\n         );\n@@ -485,8 +487,8 @@ impl Baz {\n     }\n }\n \n-fn bar(baz: Baz) {\n-    ${0:todo!()}\n+fn bar(baz: Baz) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -506,8 +508,8 @@ fn foo() {\n     bar(\"bar\")\n }\n \n-fn bar(arg: &str) {\n-    ${0:todo!()}\n+fn bar(arg: &str) ${0:-> ()} {\n+    todo!()\n }\n \"#,\n         )\n@@ -527,8 +529,8 @@ fn foo() {\n     bar('x')\n }\n \n-fn bar(arg: char) {\n-    ${0:todo!()}\n+fn bar(arg: char) ${0:-> ()} {\n+    todo!()\n }\n \"#,\n         )\n@@ -548,8 +550,8 @@ fn foo() {\n     bar(42)\n }\n \n-fn bar(arg: i32) {\n-    ${0:todo!()}\n+fn bar(arg: i32) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -569,8 +571,8 @@ fn foo() {\n     bar(42 as u8)\n }\n \n-fn bar(arg: u8) {\n-    ${0:todo!()}\n+fn bar(arg: u8) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -594,8 +596,8 @@ fn foo() {\n     bar(x as u8)\n }\n \n-fn bar(x: u8) {\n-    ${0:todo!()}\n+fn bar(x: u8) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -617,8 +619,8 @@ fn foo() {\n     bar(worble)\n }\n \n-fn bar(worble: ()) {\n-    ${0:todo!()}\n+fn bar(worble: ()) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -646,8 +648,8 @@ fn baz() {\n     bar(foo())\n }\n \n-fn bar(foo: impl Foo) {\n-    ${0:todo!()}\n+fn bar(foo: impl Foo) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -673,8 +675,8 @@ fn foo() {\n     bar(&baz())\n }\n \n-fn bar(baz: &Baz) {\n-    ${0:todo!()}\n+fn bar(baz: &Baz) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -702,8 +704,8 @@ fn foo() {\n     bar(Baz::baz())\n }\n \n-fn bar(baz: Baz::Bof) {\n-    ${0:todo!()}\n+fn bar(baz: Baz::Bof) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -725,8 +727,8 @@ fn foo<T>(t: T) {\n     bar(t)\n }\n \n-fn bar<T>(t: T) {\n-    ${0:todo!()}\n+fn bar<T>(t: T) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -756,8 +758,8 @@ fn foo() {\n     bar(Baz::new);\n }\n \n-fn bar(arg: fn() -> Baz) {\n-    ${0:todo!()}\n+fn bar(arg: fn() -> Baz) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -781,8 +783,8 @@ fn foo() {\n     bar(closure)\n }\n \n-fn bar(closure: impl Fn(i64) -> i64) {\n-    ${0:todo!()}\n+fn bar(closure: impl Fn(i64) -> i64) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -802,8 +804,8 @@ fn foo() {\n     bar(baz)\n }\n \n-fn bar(baz: ()) {\n-    ${0:todo!()}\n+fn bar(baz: ()) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -827,8 +829,8 @@ fn foo() {\n     bar(baz(), baz())\n }\n \n-fn bar(baz_1: Baz, baz_2: Baz) {\n-    ${0:todo!()}\n+fn bar(baz_1: Baz, baz_2: Baz) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -852,8 +854,8 @@ fn foo() {\n     bar(baz(), baz(), \"foo\", \"bar\")\n }\n \n-fn bar(baz_1: Baz, baz_2: Baz, arg_1: &str, arg_2: &str) {\n-    ${0:todo!()}\n+fn bar(baz_1: Baz, baz_2: Baz, arg_1: &str, arg_2: &str) ${0:-> ()} {\n+    todo!()\n }\n \"#,\n         )\n@@ -872,8 +874,8 @@ fn foo() {\n \",\n             r\"\n mod bar {\n-    pub(crate) fn my_fn() {\n-        ${0:todo!()}\n+    pub(crate) fn my_fn() ${0:-> ()} {\n+        todo!()\n     }\n }\n \n@@ -911,8 +913,8 @@ fn bar() {\n     baz(foo)\n }\n \n-fn baz(foo: foo::Foo) {\n-    ${0:todo!()}\n+fn baz(foo: foo::Foo) ${0:-> ()} {\n+    todo!()\n }\n \",\n         )\n@@ -935,8 +937,8 @@ fn foo() {\n mod bar {\n     fn something_else() {}\n \n-    pub(crate) fn my_fn() {\n-        ${0:todo!()}\n+    pub(crate) fn my_fn() ${0:-> ()} {\n+        todo!()\n     }\n }\n \n@@ -963,8 +965,8 @@ fn foo() {\n             r\"\n mod bar {\n     mod baz {\n-        pub(crate) fn my_fn() {\n-            ${0:todo!()}\n+        pub(crate) fn my_fn() ${0:-> ()} {\n+            todo!()\n         }\n     }\n }\n@@ -992,8 +994,8 @@ fn main() {\n             r\"\n \n \n-pub(crate) fn bar() {\n-    ${0:todo!()}\n+pub(crate) fn bar() ${0:-> ()} {\n+    todo!()\n }\",\n         )\n     }"}, {"sha": "41f536574eacedcb4451fd7fd0766bc2cd8f4abc", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bfa3e8123dd2d652019ad270622025d10b87cc8/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfa3e8123dd2d652019ad270622025d10b87cc8/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3bfa3e8123dd2d652019ad270622025d10b87cc8", "patch": "@@ -454,8 +454,8 @@ fn foo() {\n     bar(\"\", baz());\n }\n \n-fn bar(arg: &str, baz: Baz) {\n-    ${0:todo!()}\n+fn bar(arg: &str, baz: Baz) ${0:-> ()} {\n+    todo!()\n }\n \n \"#####,"}, {"sha": "74dbdfaf7b795397bf1cf6951d742f5cbb383ed3", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bfa3e8123dd2d652019ad270622025d10b87cc8/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfa3e8123dd2d652019ad270622025d10b87cc8/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=3bfa3e8123dd2d652019ad270622025d10b87cc8", "patch": "@@ -320,6 +320,10 @@ pub fn param(name: String, ty: String) -> ast::Param {\n     ast_from_text(&format!(\"fn f({}: {}) {{ }}\", name, ty))\n }\n \n+pub fn ret_type(ty: ast::Type) -> ast::RetType {\n+    ast_from_text(&format!(\"fn f() -> {} {{ }}\", ty))\n+}\n+\n pub fn param_list(pats: impl IntoIterator<Item = ast::Param>) -> ast::ParamList {\n     let args = pats.into_iter().join(\", \");\n     ast_from_text(&format!(\"fn f({}) {{ }}\", args))\n@@ -350,14 +354,20 @@ pub fn fn_(\n     type_params: Option<ast::GenericParamList>,\n     params: ast::ParamList,\n     body: ast::BlockExpr,\n+    ret_type: Option<ast::RetType>,\n ) -> ast::Fn {\n     let type_params =\n         if let Some(type_params) = type_params { format!(\"<{}>\", type_params) } else { \"\".into() };\n+    let ret_type = if let Some(ret_type) = ret_type { format!(\"{} \", ret_type) } else { \"\".into() };\n     let visibility = match visibility {\n         None => String::new(),\n         Some(it) => format!(\"{} \", it),\n     };\n-    ast_from_text(&format!(\"{}fn {}{}{} {}\", visibility, fn_name, type_params, params, body))\n+\n+    ast_from_text(&format!(\n+        \"{}fn {}{}{} {}{}\",\n+        visibility, fn_name, type_params, params, ret_type, body\n+    ))\n }\n \n fn ast_from_text<N: AstNode>(text: &str) -> N {"}]}