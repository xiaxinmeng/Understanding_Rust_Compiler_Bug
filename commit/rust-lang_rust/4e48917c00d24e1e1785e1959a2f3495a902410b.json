{"sha": "4e48917c00d24e1e1785e1959a2f3495a902410b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDg5MTdjMDBkMjRlMWUxNzg1ZTE5NTlhMmYzNDk1YTkwMjQxMGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-18T13:21:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-18T13:21:23Z"}, "message": "use loc2id for FnIds", "tree": {"sha": "0ae3a1f3c92ce9e308934e023d6a24385b4260d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae3a1f3c92ce9e308934e023d6a24385b4260d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e48917c00d24e1e1785e1959a2f3495a902410b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e48917c00d24e1e1785e1959a2f3495a902410b", "html_url": "https://github.com/rust-lang/rust/commit/4e48917c00d24e1e1785e1959a2f3495a902410b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e48917c00d24e1e1785e1959a2f3495a902410b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2", "html_url": "https://github.com/rust-lang/rust/commit/cb22a799d60c6c5f81ad0f3d0361f575264f3bc2"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "d78b6afb944bdef64cee47f3d015f365b76ea5b5", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=4e48917c00d24e1e1785e1959a2f3495a902410b", "patch": "@@ -1,7 +1,5 @@\n use std::sync::Arc;\n \n-use parking_lot::Mutex;\n-\n use ra_editor::LineIndex;\n use ra_syntax::{SourceFileNode, SyntaxNode};\n use salsa::{self, Database};\n@@ -11,19 +9,17 @@ use crate::{\n     descriptors::{\n         DescriptorDatabase, FnScopesQuery, FnSyntaxQuery, ModuleScopeQuery, ModuleTreeQuery,\n         SubmodulesQuery,\n-        module::{ModuleSource, ModuleId},\n     },\n-    input::SourceRootId,\n     symbol_index::SymbolIndex,\n     syntax_ptr::SyntaxPtr,\n-    loc2id::Loc2IdMap,\n+    loc2id::{IdMaps, IdDatabase},\n     Cancelable, Canceled, FileId,\n };\n \n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n-    loc2id: Arc<Mutex<Loc2IdMap<(SourceRootId, ModuleSource), ModuleId>>>,\n+    id_maps: IdMaps,\n }\n \n impl salsa::Database for RootDatabase {\n@@ -35,8 +31,8 @@ impl salsa::Database for RootDatabase {\n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n         let mut db = RootDatabase {\n-            runtime: Default::default(),\n-            loc2id: Default::default(),\n+            runtime: salsa::Runtime::default(),\n+            id_maps: IdMaps::default(),\n         };\n         db.query_mut(crate::input::SourceRootQuery)\n             .set(crate::input::WORKSPACE, Default::default());\n@@ -60,11 +56,17 @@ impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n             runtime: self.runtime.snapshot(self),\n-            loc2id: Arc::clone(&self.loc2id),\n+            id_maps: self.id_maps.clone(),\n         })\n     }\n }\n \n+impl IdDatabase for RootDatabase {\n+    fn id_maps(&self) -> &IdMaps {\n+        &self.id_maps\n+    }\n+}\n+\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl crate::input::FilesDatabase {"}, {"sha": "a7257acf9a16c4bcf5de06a740290d7d1d369556", "filename": "crates/ra_analysis/src/descriptors/function/imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs?ref=4e48917c00d24e1e1785e1959a2f3495a902410b", "patch": "@@ -8,9 +8,9 @@ use crate::descriptors::{\n };\n \n /// Resolve `FnId` to the corresponding `SyntaxNode`\n-/// TODO: this should return something more type-safe then `SyntaxNode`\n pub(crate) fn fn_syntax(db: &impl DescriptorDatabase, fn_id: FnId) -> FnDefNode {\n-    let syntax = db.resolve_syntax_ptr(fn_id.0);\n+    let ptr = db.id_maps().fn_ptr(fn_id);\n+    let syntax = db.resolve_syntax_ptr(ptr);\n     FnDef::cast(syntax.borrowed()).unwrap().owned()\n }\n "}, {"sha": "86eee5e93c2c8dc5af9e6ba06499bd5230f42fa0", "filename": "crates/ra_analysis/src/descriptors/function/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs?ref=4e48917c00d24e1e1785e1959a2f3495a902410b", "patch": "@@ -8,17 +8,18 @@ use ra_syntax::{\n     TextRange, TextUnit,\n };\n \n-use crate::{syntax_ptr::SyntaxPtr, FileId};\n+use crate::{\n+    syntax_ptr::SyntaxPtr, FileId,\n+    loc2id::IdDatabase,\n+};\n \n pub(crate) use self::scope::{resolve_local_name, FnScopes};\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct FnId(SyntaxPtr);\n+pub(crate) use crate::loc2id::FnId;\n \n impl FnId {\n-    pub(crate) fn new(file_id: FileId, fn_def: ast::FnDef) -> FnId {\n+    pub(crate) fn get(db: &impl IdDatabase, file_id: FileId, fn_def: ast::FnDef) -> FnId {\n         let ptr = SyntaxPtr::new(file_id, fn_def.syntax());\n-        FnId(ptr)\n+        db.id_maps().fn_id(ptr)\n     }\n }\n "}, {"sha": "d602c4e04ea2d909c45c54fd9c6242c74557343c", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=4e48917c00d24e1e1785e1959a2f3495a902410b", "patch": "@@ -13,12 +13,13 @@ use crate::{\n     descriptors::function::{resolve_local_name, FnId, FnScopes},\n     descriptors::module::{ModuleId, ModuleScope, ModuleTree, ModuleSource},\n     input::SourceRootId,\n+    loc2id::IdDatabase,\n     syntax_ptr::LocalSyntaxPtr,\n     Cancelable,\n };\n \n salsa::query_group! {\n-    pub(crate) trait DescriptorDatabase: SyntaxDatabase {\n+    pub(crate) trait DescriptorDatabase: SyntaxDatabase + IdDatabase {\n         fn module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n             type ModuleTreeQuery;\n             use fn module::imp::module_tree;"}, {"sha": "812fed32d93d55b7869be6dcab65aec062874352", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=4e48917c00d24e1e1785e1959a2f3495a902410b", "patch": "@@ -621,7 +621,7 @@ fn resolve_local_name(\n     name_ref: ast::NameRef,\n ) -> Option<(SmolStr, TextRange)> {\n     let fn_def = name_ref.syntax().ancestors().find_map(ast::FnDef::cast)?;\n-    let fn_id = FnId::new(file_id, fn_def);\n+    let fn_id = FnId::get(db, file_id, fn_def);\n     let scopes = db.fn_scopes(fn_id);\n     let scope_entry = crate::descriptors::function::resolve_local_name(name_ref, &scopes)?;\n     let syntax = db.resolve_syntax_ptr(scope_entry.ptr().into_global(file_id));"}, {"sha": "8eaa249971f9d620de53aac3de888fe3fad79a38", "filename": "crates/ra_analysis/src/loc2id.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e48917c00d24e1e1785e1959a2f3495a902410b/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Floc2id.rs?ref=4e48917c00d24e1e1785e1959a2f3495a902410b", "patch": "@@ -1,7 +1,16 @@\n-use std::hash::Hash;\n+use parking_lot::Mutex;\n+\n+use std::{\n+    hash::Hash,\n+    sync::Arc,\n+};\n \n use rustc_hash::FxHashMap;\n \n+use crate::{\n+    syntax_ptr::SyntaxPtr,\n+};\n+\n /// There are two principle ways to refer to things:\n ///   - by their locatinon (module in foo/bar/baz.rs at line 42)\n ///   - by their numeric id (module `ModuleId(42)`)\n@@ -53,12 +62,47 @@ where\n         id\n     }\n \n-    pub fn id2loc(&self, id: &ID) -> L {\n-        self.id2loc[id].clone()\n+    pub fn id2loc(&self, id: ID) -> L {\n+        self.id2loc[&id].clone()\n     }\n }\n \n pub(crate) trait NumericId: Clone + Eq + Hash {\n     fn from_u32(id: u32) -> Self;\n     fn to_u32(self) -> u32;\n }\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) struct FnId(u32);\n+\n+impl NumericId for FnId {\n+    fn from_u32(id: u32) -> FnId {\n+        FnId(id)\n+    }\n+    fn to_u32(self) -> u32 {\n+        self.0\n+    }\n+}\n+\n+pub(crate) trait IdDatabase: salsa::Database {\n+    fn id_maps(&self) -> &IdMaps;\n+}\n+\n+#[derive(Debug, Default, Clone)]\n+pub(crate) struct IdMaps {\n+    inner: Arc<IdMapsInner>,\n+}\n+\n+impl IdMaps {\n+    pub(crate) fn fn_id(&self, ptr: SyntaxPtr) -> FnId {\n+        self.inner.fns.lock().loc2id(&ptr)\n+    }\n+    pub(crate) fn fn_ptr(&self, fn_id: FnId) -> SyntaxPtr {\n+        self.inner.fns.lock().id2loc(fn_id)\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+struct IdMapsInner {\n+    fns: Mutex<Loc2IdMap<SyntaxPtr, FnId>>,\n+}"}]}