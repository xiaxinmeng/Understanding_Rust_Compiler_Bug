{"sha": "d735ede6ebfbdf6355d2857912b169bcecef3307", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzVlZGU2ZWJmYmRmNjM1NWQyODU3OTEyYjE2OWJjZWNlZjMzMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-22T00:10:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-22T00:10:57Z"}, "message": "Auto merge of #69302 - jonas-schievink:yield-needs-storage, r=Zoxc\n\nFix generator miscompilations\n\nFixes https://github.com/rust-lang/rust/issues/69039\n\nr? @Zoxc", "tree": {"sha": "6e7ae360bb7d74db0517fb5ee4e1dbacdb4f9cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e7ae360bb7d74db0517fb5ee4e1dbacdb4f9cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d735ede6ebfbdf6355d2857912b169bcecef3307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d735ede6ebfbdf6355d2857912b169bcecef3307", "html_url": "https://github.com/rust-lang/rust/commit/d735ede6ebfbdf6355d2857912b169bcecef3307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d735ede6ebfbdf6355d2857912b169bcecef3307/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d7e8187470180efa8ea9c837af095835192cede", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7e8187470180efa8ea9c837af095835192cede", "html_url": "https://github.com/rust-lang/rust/commit/1d7e8187470180efa8ea9c837af095835192cede"}, {"sha": "fc2702c96c0db560f55683e4cd33075c054ed062", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2702c96c0db560f55683e4cd33075c054ed062", "html_url": "https://github.com/rust-lang/rust/commit/fc2702c96c0db560f55683e4cd33075c054ed062"}], "stats": {"total": 131, "additions": 109, "deletions": 22}, "files": [{"sha": "409c981801b34aa329bd69ad28009b4b4dbfddb8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d735ede6ebfbdf6355d2857912b169bcecef3307", "patch": "@@ -519,12 +519,12 @@ macro_rules! make_mir_visitor {\n                         resume_arg,\n                         drop: _,\n                     } => {\n+                        self.visit_operand(value, source_location);\n                         self.visit_place(\n                             resume_arg,\n                             PlaceContext::MutatingUse(MutatingUseContext::Store),\n                             source_location,\n                         );\n-                        self.visit_operand(value, source_location);\n                     }\n \n                 }"}, {"sha": "659b66823c2a0d1bfa7c8b487dc3755761c06dd4", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=d735ede6ebfbdf6355d2857912b169bcecef3307", "patch": "@@ -118,18 +118,25 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         self.borrowed_locals.borrow().analysis().statement_effect(sets, stmt, loc);\n \n         // If a place is assigned to in a statement, it needs storage for that statement.\n-        match stmt.kind {\n-            StatementKind::StorageDead(l) => sets.kill(l),\n-            StatementKind::Assign(box (ref place, _))\n-            | StatementKind::SetDiscriminant { box ref place, .. } => {\n+        match &stmt.kind {\n+            StatementKind::StorageDead(l) => sets.kill(*l),\n+            StatementKind::Assign(box (place, _))\n+            | StatementKind::SetDiscriminant { box place, .. } => {\n                 sets.gen(place.local);\n             }\n-            StatementKind::InlineAsm(box InlineAsm { ref outputs, .. }) => {\n+            StatementKind::InlineAsm(box InlineAsm { outputs, .. }) => {\n                 for place in &**outputs {\n                     sets.gen(place.local);\n                 }\n             }\n-            _ => (),\n+\n+            // Nothing to do for these. Match exhaustively so this fails to compile when new\n+            // variants are added.\n+            StatementKind::AscribeUserType(..)\n+            | StatementKind::FakeRead(..)\n+            | StatementKind::Nop\n+            | StatementKind::Retag(..)\n+            | StatementKind::StorageLive(..) => {}\n         }\n     }\n \n@@ -145,23 +152,58 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         // If a place is borrowed in a terminator, it needs storage for that terminator.\n         self.borrowed_locals.borrow().analysis().terminator_effect(sets, terminator, loc);\n \n-        if let TerminatorKind::Call { destination: Some((place, _)), .. } = terminator.kind {\n-            sets.gen(place.local);\n+        match &terminator.kind {\n+            TerminatorKind::Call { destination: Some((Place { local, .. }, _)), .. }\n+            | TerminatorKind::Yield { resume_arg: Place { local, .. }, .. } => {\n+                sets.gen(*local);\n+            }\n+\n+            // Nothing to do for these. Match exhaustively so this fails to compile when new\n+            // variants are added.\n+            TerminatorKind::Call { destination: None, .. }\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Assert { .. }\n+            | TerminatorKind::Drop { .. }\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Unreachable => {}\n         }\n     }\n \n     fn terminator_effect(&self, sets: &mut GenKillSet<Local>, loc: Location) {\n-        // For call terminators the destination requires storage for the call\n-        // and after the call returns successfully, but not after a panic.\n-        // Since `propagate_call_unwind` doesn't exist, we have to kill the\n-        // destination here, and then gen it again in `propagate_call_return`.\n-        if let TerminatorKind::Call { destination: Some((ref place, _)), .. } =\n-            self.body[loc.block].terminator().kind\n-        {\n-            if let Some(local) = place.as_local() {\n-                sets.kill(local);\n+        match &self.body[loc.block].terminator().kind {\n+            // For call terminators the destination requires storage for the call\n+            // and after the call returns successfully, but not after a panic.\n+            // Since `propagate_call_unwind` doesn't exist, we have to kill the\n+            // destination here, and then gen it again in `propagate_call_return`.\n+            TerminatorKind::Call { destination: Some((Place { local, .. }, _)), .. } => {\n+                sets.kill(*local);\n             }\n+\n+            // Nothing to do for these. Match exhaustively so this fails to compile when new\n+            // variants are added.\n+            TerminatorKind::Call { destination: None, .. }\n+            | TerminatorKind::Yield { .. }\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Assert { .. }\n+            | TerminatorKind::Drop { .. }\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Unreachable => {}\n         }\n+\n         self.check_for_move(sets, loc);\n     }\n "}, {"sha": "57aa5de7f7a318de09ab76bf2534e5f572ea601f", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=d735ede6ebfbdf6355d2857912b169bcecef3307", "patch": "@@ -381,9 +381,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             }\n \n             TerminatorKind::Yield { ref value, resume_arg: ref place, .. } => {\n+                self.gather_operand(value);\n                 self.create_move_path(place);\n                 self.gather_init(place.as_ref(), InitKind::Deep);\n-                self.gather_operand(value);\n             }\n \n             TerminatorKind::Drop { ref location, target: _, unwind: _ } => {"}, {"sha": "3621ca632098a7cc5a733953f158e3a61f895b87", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=d735ede6ebfbdf6355d2857912b169bcecef3307", "patch": "@@ -186,18 +186,24 @@ fn self_arg() -> Local {\n     Local::new(1)\n }\n \n-/// Generator have not been resumed yet\n+/// Generator has not been resumed yet.\n const UNRESUMED: usize = GeneratorSubsts::UNRESUMED;\n-/// Generator has returned / is completed\n+/// Generator has returned / is completed.\n const RETURNED: usize = GeneratorSubsts::RETURNED;\n-/// Generator has been poisoned\n+/// Generator has panicked and is poisoned.\n const POISONED: usize = GeneratorSubsts::POISONED;\n \n+/// A `yield` point in the generator.\n struct SuspensionPoint<'tcx> {\n+    /// State discriminant used when suspending or resuming at this point.\n     state: usize,\n+    /// The block to jump to after resumption.\n     resume: BasicBlock,\n+    /// Where to move the resume argument after resumption.\n     resume_arg: Place<'tcx>,\n+    /// Which block to jump to if the generator is dropped in this state.\n     drop: Option<BasicBlock>,\n+    /// Set of locals that have live storage while at this suspension point.\n     storage_liveness: liveness::LiveVarSet,\n }\n \n@@ -325,6 +331,15 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n                 // Yield\n                 let state = 3 + self.suspension_points.len();\n \n+                // The resume arg target location might itself be remapped if its base local is\n+                // live across a yield.\n+                let resume_arg =\n+                    if let Some(&(ty, variant, idx)) = self.remap.get(&resume_arg.local) {\n+                        self.make_field(variant, idx, ty)\n+                    } else {\n+                        resume_arg\n+                    };\n+\n                 self.suspension_points.push(SuspensionPoint {\n                     state,\n                     resume,"}, {"sha": "60004f3b0aeee59529d1d6b6993844a8087ce8f4", "filename": "src/test/ui/generator/issue-69039.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Ftest%2Fui%2Fgenerator%2Fissue-69039.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d735ede6ebfbdf6355d2857912b169bcecef3307/src%2Ftest%2Fui%2Fgenerator%2Fissue-69039.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-69039.rs?ref=d735ede6ebfbdf6355d2857912b169bcecef3307", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+\n+fn my_scenario() -> impl Generator<String, Yield = &'static str, Return = String> {\n+    |_arg: String| {\n+        let my_name = yield \"What is your name?\";\n+        let my_mood = yield \"How are you feeling?\";\n+        format!(\"{} is {}\", my_name.trim(), my_mood.trim())\n+    }\n+}\n+\n+fn main() {\n+    let mut my_session = Box::pin(my_scenario());\n+\n+    assert_eq!(\n+        my_session.as_mut().resume(\"_arg\".to_string()),\n+        GeneratorState::Yielded(\"What is your name?\")\n+    );\n+    assert_eq!(\n+        my_session.as_mut().resume(\"Your Name\".to_string()),\n+        GeneratorState::Yielded(\"How are you feeling?\")\n+    );\n+    assert_eq!(\n+        my_session.as_mut().resume(\"Sensory Organs\".to_string()),\n+        GeneratorState::Complete(\"Your Name is Sensory Organs\".to_string())\n+    );\n+}"}]}