{"sha": "d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "node_id": "C_kwDOAAsO6NoAKGQzNWM4MmY3OWYzNDNmYTBkMGMwYzM1MmU5ZjQzYTc0YzJiNjUxM2U", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T22:59:42Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T23:02:11Z"}, "message": "Resolve clippy::useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Pointer<std::option::Option<machine::Tag>>`\n       --> src/helpers.rs:668:36\n        |\n    668 |                 this.get_ptr_alloc(ptr.offset(len, this)?.into(), size1, Align::ONE)?.unwrap(); // not a ZST, so we will get a result\n        |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `ptr.offset(len, this)?`\n        |\n        = note: `-D clippy::useless-conversion` implied by `-D clippy::all`\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Pointer<std::option::Option<machine::Tag>>`\n       --> src/helpers.rs:678:29\n        |\n    678 |         this.read_bytes_ptr(ptr.into(), len)\n        |                             ^^^^^^^^^^ help: consider removing `.into()`: `ptr`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Pointer<std::option::Option<machine::Tag>>`\n       --> src/helpers.rs:690:44\n        |\n    690 |             let alloc = this.get_ptr_alloc(ptr.into(), size2, align2)?.unwrap(); // not a ZST, so we will get a result\n        |                                            ^^^^^^^^^^ help: consider removing `.into()`: `ptr`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::OpTy<machine::Tag>`\n       --> src/shims/intrinsics.rs:778:42\n        |\n    778 |                         .read_immediate(&this.operand_index(index, i)?.into())?\n        |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `this.operand_index(index, i)?`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `u32`\n        --> src/shims/posix/fs.rs:1171:26\n         |\n    1171 |             builder.mode(mode.into());\n         |                          ^^^^^^^^^^^ help: consider removing `.into()`: `mode`\n         |\n         = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `std::ffi::OsString`\n      --> src/shims/env.rs:67:53\n       |\n    67 |                     ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n       |                                                     ^^^^^^^^^^^^^^^^^^^^ help: consider removing `OsString::from()`: `name`\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Scalar<machine::Tag>`\n       --> src/shims/tls.rs:102:44\n        |\n    102 |                 Ok(value.unwrap_or_else(|| Scalar::null_ptr(cx).into()))\n        |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `Scalar::null_ptr(cx)`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `u32`\n      --> src/thread.rs:73:26\n       |\n    73 |         Scalar::from_u32(u32::try_from(self.0).unwrap())\n       |                          ^^^^^^^^^^^^^^^^^^^^^\n       |\n       = help: consider removing `u32::try_from()`\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion", "tree": {"sha": "381983f27afab79ebef6d36b1c9069657884d071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/381983f27afab79ebef6d36b1c9069657884d071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmJsbnMACgkQ+boUO5X/\nbYIFJhAAmq3RY2aQt/KHumQxA+uNSWSYKDghGn/Rblg6xplAVIQPxvjsxkHi5hSD\nYyQLyCxirqSACF7BpKoPK9b9zMgyjTMVgQtYGRn7/xsv6HfrZyrvFdB2M7JP19Wa\n3jaE63p24W+Pe+hAJapXgsKZblkdjSsd2403ulol2CcRfUlk+ceZitK/tnfm13ze\n60ZaAspTEXuiC0q7dzAVhGv7GBAo9P8/gO8TUfjNh1yCG+ME7Ax5Hk+DSNzyOrRU\nPqlFIwMl+dq2+BHSd/QubCVWWV4TXxh6zJO8KqE0fAnG4MUPSO+87AsOmEaLOwF5\n5GwW3QYee9q9H2vQj2qWXVYC7qlefkVMe0CAZE9OqB/TG6HydjQ2Z2qGLOnNsqT+\nIPx0Lwu8czgtp165uwJfK83NQF9CeqYIzerUobI8J3Sy7TEVAIStuaO4BqfD5J3l\n8URWuzhasxRXpjDqQpdX6ey1EIkXdg1cJZtqHDLl8UnuwuuyfbxFb7G4s8vN2lph\nE+iC/eVKcB/Q1QtSwTtrJ88V7bKdEOCOUjsMvsxYSjTDFcnKR5evbCQEai5vPWBD\n3MrDSkA6NlbKiBDCTkIh0tEtAYgw6C3mgaWjnJ3hvc8GJ72XxJMeQUOsKjossBHu\n7fcFWIDynsszh619u/ua2hL7M9TgRpEO1s/Op9m4d3Wf0guG8pc=\n=Glpv\n-----END PGP SIGNATURE-----", "payload": "tree 381983f27afab79ebef6d36b1c9069657884d071\nparent 4b523fce18e91dff63722f5de70d48a6d5dd1b83\nauthor David Tolnay <dtolnay@gmail.com> 1651273182 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1651273331 -0700\n\nResolve clippy::useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Pointer<std::option::Option<machine::Tag>>`\n       --> src/helpers.rs:668:36\n        |\n    668 |                 this.get_ptr_alloc(ptr.offset(len, this)?.into(), size1, Align::ONE)?.unwrap(); // not a ZST, so we will get a result\n        |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `ptr.offset(len, this)?`\n        |\n        = note: `-D clippy::useless-conversion` implied by `-D clippy::all`\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Pointer<std::option::Option<machine::Tag>>`\n       --> src/helpers.rs:678:29\n        |\n    678 |         this.read_bytes_ptr(ptr.into(), len)\n        |                             ^^^^^^^^^^ help: consider removing `.into()`: `ptr`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Pointer<std::option::Option<machine::Tag>>`\n       --> src/helpers.rs:690:44\n        |\n    690 |             let alloc = this.get_ptr_alloc(ptr.into(), size2, align2)?.unwrap(); // not a ZST, so we will get a result\n        |                                            ^^^^^^^^^^ help: consider removing `.into()`: `ptr`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::OpTy<machine::Tag>`\n       --> src/shims/intrinsics.rs:778:42\n        |\n    778 |                         .read_immediate(&this.operand_index(index, i)?.into())?\n        |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `this.operand_index(index, i)?`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `u32`\n        --> src/shims/posix/fs.rs:1171:26\n         |\n    1171 |             builder.mode(mode.into());\n         |                          ^^^^^^^^^^^ help: consider removing `.into()`: `mode`\n         |\n         = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `std::ffi::OsString`\n      --> src/shims/env.rs:67:53\n       |\n    67 |                     ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n       |                                                     ^^^^^^^^^^^^^^^^^^^^ help: consider removing `OsString::from()`: `name`\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `rustc_const_eval::interpret::Scalar<machine::Tag>`\n       --> src/shims/tls.rs:102:44\n        |\n    102 |                 Ok(value.unwrap_or_else(|| Scalar::null_ptr(cx).into()))\n        |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `Scalar::null_ptr(cx)`\n        |\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n\n    error: useless conversion to the same type: `u32`\n      --> src/thread.rs:73:26\n       |\n    73 |         Scalar::from_u32(u32::try_from(self.0).unwrap())\n       |                          ^^^^^^^^^^^^^^^^^^^^^\n       |\n       = help: consider removing `u32::try_from()`\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "html_url": "https://github.com/rust-lang/rust/commit/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b523fce18e91dff63722f5de70d48a6d5dd1b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b523fce18e91dff63722f5de70d48a6d5dd1b83", "html_url": "https://github.com/rust-lang/rust/commit/4b523fce18e91dff63722f5de70d48a6d5dd1b83"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "107a2551995adae7f891d042976f3f866c4b3ce0", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "patch": "@@ -664,8 +664,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         loop {\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n-            let alloc =\n-                this.get_ptr_alloc(ptr.offset(len, this)?.into(), size1, Align::ONE)?.unwrap(); // not a ZST, so we will get a result\n+            let alloc = this.get_ptr_alloc(ptr.offset(len, this)?, size1, Align::ONE)?.unwrap(); // not a ZST, so we will get a result\n             let byte = alloc.read_scalar(alloc_range(Size::ZERO, size1))?.to_u8()?;\n             if byte == 0 {\n                 break;\n@@ -675,7 +674,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // Step 2: get the bytes.\n-        this.read_bytes_ptr(ptr.into(), len)\n+        this.read_bytes_ptr(ptr, len)\n     }\n \n     fn read_wide_str(&self, mut ptr: Pointer<Option<Tag>>) -> InterpResult<'tcx, Vec<u16>> {\n@@ -687,7 +686,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         loop {\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n-            let alloc = this.get_ptr_alloc(ptr.into(), size2, align2)?.unwrap(); // not a ZST, so we will get a result\n+            let alloc = this.get_ptr_alloc(ptr, size2, align2)?.unwrap(); // not a ZST, so we will get a result\n             let wchar = alloc.read_scalar(alloc_range(Size::ZERO, size2))?.to_u16()?;\n             if wchar == 0 {\n                 break;"}, {"sha": "0699dfba4b7b40676154934c0d1f487ef942c2a7", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "patch": "@@ -21,7 +21,6 @@\n     clippy::needless_lifetimes,\n     clippy::new_without_default,\n     clippy::single_match,\n-    clippy::useless_conversion,\n     clippy::useless_format\n )]\n "}, {"sha": "ae9b8c75145f78a2cfabf1f00dd0e322dadaf07e", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> EnvVars<'tcx> {\n                                 unsupported\n                             ),\n                     };\n-                    ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n+                    ecx.machine.env_vars.map.insert(name, var_ptr);\n                 }\n             }\n         }"}, {"sha": "b2c31f1c140b103c53d1b4cf8d054ca8f2a47487", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "patch": "@@ -775,7 +775,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 for i in 0..dest_len {\n                     let src_index: u64 = this\n-                        .read_immediate(&this.operand_index(index, i)?.into())?\n+                        .read_immediate(&this.operand_index(index, i)?)?\n                         .to_scalar()?\n                         .to_u32()?\n                         .into();"}, {"sha": "a63b2ad80c27855687d0b64b3d06db15f802d3ce", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "patch": "@@ -1168,7 +1168,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         #[cfg(unix)]\n         {\n             use std::os::unix::fs::DirBuilderExt;\n-            builder.mode(mode.into());\n+            builder.mode(mode);\n         }\n \n         let result = builder.create(path).map(|_| 0i32);"}, {"sha": "3de739a8d048bece43c6b2edffef50413eac422a", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "patch": "@@ -99,7 +99,7 @@ impl<'tcx> TlsData<'tcx> {\n             Some(TlsEntry { data, .. }) => {\n                 let value = data.get(&thread_id).copied();\n                 trace!(\"TLS key {} for thread {:?} loaded: {:?}\", key, thread_id, value);\n-                Ok(value.unwrap_or_else(|| Scalar::null_ptr(cx).into()))\n+                Ok(value.unwrap_or_else(|| Scalar::null_ptr(cx)))\n             }\n             None => throw_ub_format!(\"loading from a non-existing TLS key: {}\", key),\n         }"}, {"sha": "8edd6672a7478e635fc827b02aa39352df41c7bc", "filename": "src/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35c82f79f343fa0d0c0c352e9f43a74c2b6513e/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=d35c82f79f343fa0d0c0c352e9f43a74c2b6513e", "patch": "@@ -70,7 +70,7 @@ impl From<u32> for ThreadId {\n \n impl ThreadId {\n     pub fn to_u32_scalar(&self) -> Scalar<Tag> {\n-        Scalar::from_u32(u32::try_from(self.0).unwrap())\n+        Scalar::from_u32(self.0)\n     }\n }\n "}]}