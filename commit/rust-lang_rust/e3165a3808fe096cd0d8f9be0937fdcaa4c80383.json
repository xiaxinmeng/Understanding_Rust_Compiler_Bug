{"sha": "e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "node_id": "C_kwDOAAsO6NoAKGUzMTY1YTM4MDhmZTA5NmNkMGQ4ZjliZTA5MzdmZGNhYTRjODAzODM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-27T15:03:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-27T15:03:09Z"}, "message": "Rollup merge of #104944 - aDotInTheVoid:jsondoclint-unit-tests, r=jyn514\n\nSupport unit tests for jsondoclint\n\nr? ````@ghost````", "tree": {"sha": "6819ed1aacf60cb4a11dab80364aaf14a5fb2eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6819ed1aacf60cb4a11dab80364aaf14a5fb2eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjg3wtCRBK7hj4Ov3rIwAAjlQIAHq3CjZM4oT01YoQXXFlrSBd\n8EBvPjSx8scL52AZm104JICma5JeXxoOzX2KH4OgpaFVYkXWp9FVzNe17hajuzpc\nrLXd9AuR9vNVZHZfXRtP6N6+3cr4sn9p+Vkba/bRYF9gZ/OyXHlavuGnm1QgBQSC\nlUrxmibLtJd7I6vG8qSLRsUkLCLal/79m+VDCQf07j6Kx8wmnBM7Q0ZahRsbvGNo\ntEV3ifMnqXlOeUwarTTWNtCxwccPvVVop4TiW/q02Ae21Y7265yVWimzs6/9713E\nHTjdZEqTSYcnXPUx9wo22bM7COEtIZwBn77jR0dgrrJzOHAw0ETp+sA05TrS7Wc=\n=vqMC\n-----END PGP SIGNATURE-----\n", "payload": "tree 6819ed1aacf60cb4a11dab80364aaf14a5fb2eab\nparent 8d9064764157d7916a3f152ce55ef0b566bd7ab6\nparent 09818a8ccaec19d96ec4d364e668742cf7b10522\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669561389 +0100\ncommitter GitHub <noreply@github.com> 1669561389 +0100\n\nRollup merge of #104944 - aDotInTheVoid:jsondoclint-unit-tests, r=jyn514\n\nSupport unit tests for jsondoclint\n\nr? ````@ghost````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "html_url": "https://github.com/rust-lang/rust/commit/e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9064764157d7916a3f152ce55ef0b566bd7ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9064764157d7916a3f152ce55ef0b566bd7ab6", "html_url": "https://github.com/rust-lang/rust/commit/8d9064764157d7916a3f152ce55ef0b566bd7ab6"}, {"sha": "09818a8ccaec19d96ec4d364e668742cf7b10522", "url": "https://api.github.com/repos/rust-lang/rust/commits/09818a8ccaec19d96ec4d364e668742cf7b10522", "html_url": "https://github.com/rust-lang/rust/commit/09818a8ccaec19d96ec4d364e668742cf7b10522"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "cff5fd8c5b02cb46ea3656dfa548b87ae7b12dff", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "patch": "@@ -644,6 +644,7 @@ impl<'a> Builder<'a> {\n                 test::CrateLibrustc,\n                 test::CrateRustdoc,\n                 test::CrateRustdocJsonTypes,\n+                test::CrateJsonDocLint,\n                 test::Linkcheck,\n                 test::TierCheck,\n                 test::ReplacePlaceholderTest,"}, {"sha": "39cedfdac5f775d7630f90195d81d226c7f671ec", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "patch": "@@ -90,6 +90,42 @@ fn try_run_quiet(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     true\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct CrateJsonDocLint {\n+    host: TargetSelection,\n+}\n+\n+impl Step for CrateJsonDocLint {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/jsondoclint\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(CrateJsonDocLint { host: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let bootstrap_host = builder.config.build;\n+        let compiler = builder.compiler(0, bootstrap_host);\n+\n+        let cargo = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolBootstrap,\n+            bootstrap_host,\n+            \"test\",\n+            \"src/tools/jsondoclint\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        try_run(builder, &mut cargo.into());\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Linkcheck {\n     host: TargetSelection,"}, {"sha": "70e7440f73085e67ee8d91df7bcb9188007f0efc", "filename": "src/tools/jsondoclint/src/json_find.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find.rs?ref=e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "patch": "@@ -2,7 +2,7 @@ use std::fmt::Write;\n \n use serde_json::Value;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n pub enum SelectorPart {\n     Field(String),\n     Index(usize),\n@@ -72,3 +72,6 @@ fn find_selector_recursive(\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "2a5335307146993a4b893957e973ac0290dcf426", "filename": "src/tools/jsondoclint/src/json_find/tests.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fjson_find%2Ftests.rs?ref=e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "patch": "@@ -0,0 +1,27 @@\n+use super::*;\n+\n+#[test]\n+fn basic_find() {\n+    use SelectorPart::*;\n+\n+    let j = serde_json::json!({\n+        \"index\": {\n+            \"4\": {\n+                \"inner\": {\n+                    \"items\": [\"1\", \"2\", \"3\"]\n+                }\n+            }\n+        }\n+    });\n+\n+    let sel = find_selector(&j, &serde_json::json!(\"1\"));\n+    let exp: Vec<Vec<SelectorPart>> = vec![vec![\n+        Field(\"index\".to_owned()),\n+        Field(\"4\".to_owned()),\n+        Field(\"inner\".to_owned()),\n+        Field(\"items\".to_owned()),\n+        Index(0),\n+    ]];\n+\n+    assert_eq!(exp, sel);\n+}"}, {"sha": "fc54c421b4b22962417296c2a1a9951196bcc604", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3165a3808fe096cd0d8f9be0937fdcaa4c80383/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=e3165a3808fe096cd0d8f9be0937fdcaa4c80383", "patch": "@@ -9,13 +9,13 @@ pub(crate) mod item_kind;\n mod json_find;\n mod validator;\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n struct Error {\n     kind: ErrorKind,\n     id: Id,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n enum ErrorKind {\n     NotFound,\n     Custom(String),"}]}