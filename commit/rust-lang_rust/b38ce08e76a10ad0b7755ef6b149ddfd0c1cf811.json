{"sha": "b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOGNlMDhlNzZhMTBhZDBiNzc1NWVmNmIxNDlkZGZkMGMxY2Y4MTE=", "commit": {"author": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-06-11T19:32:38Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-06-14T07:41:47Z"}, "message": "Merge StaticConst and StaticStatic lints into StaticConst.", "tree": {"sha": "1cba894bba0ee2e1add672e9be2f2fcac0dfc55c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cba894bba0ee2e1add672e9be2f2fcac0dfc55c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl0DT7sACgkQaTCGhp1Q\nZjdM2RAAhelR7tlpnAhDR2NKCRfuxNhIgd1MmP4G+Z+Ei8f0F9AJCu2thaUo1eMa\n4oXOWQm0zg06hM4GfKnxvCEb4Zz1K/0h5wj/kO61twecndobopxrj4o9lBxaIwGe\nUKkDcmd0dfoPvp0a/ak4RLzONAwwkYKqdFMl42txqK5VXXXc71k5EMDzkbFe9FoL\n9/jBtp4OWjEUNKa6pbkGIS7cd0uQqUlVD/+2SMR0YIeheP3STZM0yPDX/4f3YS5D\n4p2SocWP9fYzb2aP01wH0wjYR3Sjr3Sy7ldt0qh6Y2Fubmnb3RsDVokm3JJJ16OI\nIMYofahc0PFn4fx2vYfWrQ7vA9mgnXunp+LaXkTUOK2Ggb739taQbsOfHujVBYIb\n3YEhxG+Qy/DMQhVRsF+IzqEczZbC8UEYMt91qFlm8yyhBTwCtIm4qvZv7kjXYORS\nbLDb20BDpyXqRXWi7DA180pvlnkGGpYhETVmwNE7JUoqfRLFltetruw8smD7A9/Y\n7NZUxY9hzKnUFr/XxOVOCV+g17SlXMuT7dh24a7nSiliayW2njyMmCqQoYHR+ngt\nUK444WLweF2wgEx+bMYniVI50LsG9UvoPe1aBkKf9jWSNTsRzIvIbXTqOu+Riuj9\n5+Bjzp7h4ihrX5ohzQeoYyym2Xr4AO6wlpda6LNexNh9/SMfRpw=\n=csCD\n-----END PGP SIGNATURE-----", "payload": "tree 1cba894bba0ee2e1add672e9be2f2fcac0dfc55c\nparent 87e9dee884988aa4385723ec08d69c548f7f50a2\nauthor krk <keremkat@gmail.com> 1560281558 +0200\ncommitter flip1995 <hello@philkrones.com> 1560498107 +0200\n\nMerge StaticConst and StaticStatic lints into StaticConst.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "html_url": "https://github.com/rust-lang/rust/commit/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/comments", "author": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e9dee884988aa4385723ec08d69c548f7f50a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e9dee884988aa4385723ec08d69c548f7f50a2", "html_url": "https://github.com/rust-lang/rust/commit/87e9dee884988aa4385723ec08d69c548f7f50a2"}], "stats": {"total": 409, "additions": 154, "deletions": 255}, "files": [{"sha": "b3eb2b96fc0df73ef1ea74eda448242b122529cb", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 53, "deletions": 12, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "patch": "@@ -1,11 +1,11 @@\n-use crate::redundant_static_lifetime::RedundantStaticLifetime;\n-use crate::utils::in_macro_or_desugar;\n+use crate::utils::{in_macro_or_desugar, snippet, span_lint_and_then};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n use syntax::ast::*;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for constants with an explicit `'static` lifetime.\n+    /// **What it does:** Checks for constants and statics with an explicit `'static` lifetime.\n     ///\n     /// **Why is this bad?** Adding `'static` to every reference can create very\n     /// complicated types.\n@@ -16,36 +16,77 @@ declare_clippy_lint! {\n     /// ```ignore\n     /// const FOO: &'static [(&'static str, &'static str, fn(&Bar) -> bool)] =\n     /// &[...]\n+    /// static FOO: &'static [(&'static str, &'static str, fn(&Bar) -> bool)] =\n+    /// &[...]\n     /// ```\n     /// This code can be rewritten as\n     /// ```ignore\n     ///  const FOO: &[(&str, &str, fn(&Bar) -> bool)] = &[...]\n+    ///  static FOO: &[(&str, &str, fn(&Bar) -> bool)] = &[...]\n     /// ```\n     pub CONST_STATIC_LIFETIME,\n     style,\n-    \"Using explicit `'static` lifetime for constants when elision rules would allow omitting them.\"\n+    \"Using explicit `'static` lifetime for constants or statics when elision rules would allow omitting them.\"\n }\n \n declare_lint_pass!(StaticConst => [CONST_STATIC_LIFETIME]);\n \n impl StaticConst {\n     // Recursively visit types\n-    fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>) {\n-        let mut rsl =\n-            RedundantStaticLifetime::new(CONST_STATIC_LIFETIME, \"Constants have by default a `'static` lifetime\");\n-        rsl.visit_type(ty, cx)\n+    pub fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>, reason: &str) {\n+        match ty.node {\n+            // Be careful of nested structures (arrays and tuples)\n+            TyKind::Array(ref ty, _) => {\n+                self.visit_type(&*ty, cx, reason);\n+            },\n+            TyKind::Tup(ref tup) => {\n+                for tup_ty in tup {\n+                    self.visit_type(&*tup_ty, cx, reason);\n+                }\n+            },\n+            // This is what we are looking for !\n+            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n+                // Match the 'static lifetime\n+                if let Some(lifetime) = *optional_lifetime {\n+                    match borrow_type.ty.node {\n+                        TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) | TyKind::Tup(..) => {\n+                            if lifetime.ident.name == syntax::symbol::kw::StaticLifetime {\n+                                let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n+                                let sugg = format!(\"&{}\", snip);\n+                                span_lint_and_then(cx, CONST_STATIC_LIFETIME, lifetime.ident.span, reason, |db| {\n+                                    db.span_suggestion(\n+                                        ty.span,\n+                                        \"consider removing `'static`\",\n+                                        sugg,\n+                                        Applicability::MachineApplicable, //snippet\n+                                    );\n+                                });\n+                            }\n+                        },\n+                        _ => {},\n+                    }\n+                }\n+                self.visit_type(&*borrow_type.ty, cx, reason);\n+            },\n+            TyKind::Slice(ref ty) => {\n+                self.visit_type(ty, cx, reason);\n+            },\n+            _ => {},\n+        }\n     }\n }\n \n impl EarlyLintPass for StaticConst {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n         if !in_macro_or_desugar(item.span) {\n-            // Match only constants...\n             if let ItemKind::Const(ref var_type, _) = item.node {\n-                self.visit_type(var_type, cx);\n+                self.visit_type(var_type, cx, \"Constants have by default a `'static` lifetime\");\n+                // Don't check associated consts because `'static` cannot be elided on those (issue #2438)\n+            }\n+\n+            if let ItemKind::Static(ref var_type, _, _) = item.node {\n+                self.visit_type(var_type, cx, \"Statics have by default a `'static` lifetime\");\n             }\n         }\n     }\n-\n-    // Don't check associated consts because `'static` cannot be elided on those (issue #2438)\n }"}, {"sha": "2bec5cb2d0159ea0cb767f4adf3fd74849b5552c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "patch": "@@ -141,7 +141,6 @@ macro_rules! declare_clippy_lint {\n mod consts;\n #[macro_use]\n mod utils;\n-mod redundant_static_lifetime;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n pub mod approx_const;\n@@ -257,7 +256,6 @@ pub mod returns;\n pub mod serde_api;\n pub mod shadow;\n pub mod slow_vector_initialization;\n-pub mod static_static_lifetime;\n pub mod strings;\n pub mod suspicious_trait_impl;\n pub mod swap;\n@@ -556,7 +554,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box const_static_lifetime::StaticConst);\n-    reg.register_early_lint_pass(box static_static_lifetime::StaticStatic);\n     reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n     reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n     reg.register_late_lint_pass(box types::UnitArg);\n@@ -847,7 +844,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         returns::UNUSED_UNIT,\n         serde_api::SERDE_API_MISUSE,\n         slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n-        static_static_lifetime::STATIC_STATIC_LIFETIME,\n         strings::STRING_LIT_AS_BYTES,\n         suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n         suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n@@ -966,7 +962,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         returns::UNUSED_UNIT,\n-        static_static_lifetime::STATIC_STATIC_LIFETIME,\n         strings::STRING_LIT_AS_BYTES,\n         types::FN_TO_NUMERIC_CAST,\n         types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,"}, {"sha": "efac8bfcc6fffafc73ee0ac555f0f3240b08f0db", "filename": "clippy_lints/src/redundant_static_lifetime.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/87e9dee884988aa4385723ec08d69c548f7f50a2/clippy_lints%2Fsrc%2Fredundant_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e9dee884988aa4385723ec08d69c548f7f50a2/clippy_lints%2Fsrc%2Fredundant_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetime.rs?ref=87e9dee884988aa4385723ec08d69c548f7f50a2", "patch": "@@ -1,57 +0,0 @@\n-use crate::utils::{snippet, span_lint_and_then};\n-use rustc::lint::{EarlyContext, Lint};\n-use rustc_errors::Applicability;\n-use syntax::ast::*;\n-\n-pub struct RedundantStaticLifetime {\n-    lint: &'static Lint,\n-    reason: &'static str,\n-}\n-\n-impl RedundantStaticLifetime {\n-    pub fn new(lint: &'static Lint, reason: &'static str) -> Self {\n-        Self { lint, reason }\n-    }\n-    // Recursively visit types\n-    pub fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>) {\n-        match ty.node {\n-            // Be careful of nested structures (arrays and tuples)\n-            TyKind::Array(ref ty, _) => {\n-                self.visit_type(&*ty, cx);\n-            },\n-            TyKind::Tup(ref tup) => {\n-                for tup_ty in tup {\n-                    self.visit_type(&*tup_ty, cx);\n-                }\n-            },\n-            // This is what we are looking for !\n-            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n-                // Match the 'static lifetime\n-                if let Some(lifetime) = *optional_lifetime {\n-                    match borrow_type.ty.node {\n-                        TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) | TyKind::Tup(..) => {\n-                            if lifetime.ident.name == syntax::symbol::kw::StaticLifetime {\n-                                let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n-                                let sugg = format!(\"&{}\", snip);\n-                                span_lint_and_then(cx, self.lint, lifetime.ident.span, self.reason, |db| {\n-                                    db.span_suggestion(\n-                                        ty.span,\n-                                        \"consider removing `'static`\",\n-                                        sugg,\n-                                        Applicability::MachineApplicable, //snippet\n-                                    );\n-                                });\n-                            }\n-                        },\n-                        _ => {},\n-                    }\n-                }\n-                self.visit_type(&*borrow_type.ty, cx);\n-            },\n-            TyKind::Slice(ref ty) => {\n-                self.visit_type(ty, cx);\n-            },\n-            _ => {},\n-        }\n-    }\n-}"}, {"sha": "518cb5e7a7ac2455724e2a069262201c6ad445a2", "filename": "clippy_lints/src/static_static_lifetime.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/87e9dee884988aa4385723ec08d69c548f7f50a2/clippy_lints%2Fsrc%2Fstatic_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e9dee884988aa4385723ec08d69c548f7f50a2/clippy_lints%2Fsrc%2Fstatic_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstatic_static_lifetime.rs?ref=87e9dee884988aa4385723ec08d69c548f7f50a2", "patch": "@@ -1,49 +0,0 @@\n-use crate::redundant_static_lifetime::RedundantStaticLifetime;\n-use crate::utils::in_macro_or_desugar;\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint_pass, declare_tool_lint};\n-use syntax::ast::*;\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for statics with an explicit `'static` lifetime.\n-    ///\n-    /// **Why is this bad?** Adding `'static` to every reference can create very\n-    /// complicated types.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// static FOO: &'static [(&'static str, &'static str, fn(&Bar) -> bool)] =\n-    /// &[...]\n-    /// ```\n-    /// This code can be rewritten as\n-    /// ```ignore\n-    ///  static FOO: &[(&str, &str, fn(&Bar) -> bool)] = &[...]\n-    /// ```\n-    pub STATIC_STATIC_LIFETIME,\n-    style,\n-    \"Using explicit `'static` lifetime for statics when elision rules would allow omitting them.\"\n-}\n-\n-declare_lint_pass!(StaticStatic => [STATIC_STATIC_LIFETIME]);\n-\n-impl StaticStatic {\n-    // Recursively visit types\n-    fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>) {\n-        let mut rsl =\n-            RedundantStaticLifetime::new(STATIC_STATIC_LIFETIME, \"Statics have by default a `'static` lifetime\");\n-        rsl.visit_type(ty, cx)\n-    }\n-}\n-\n-impl EarlyLintPass for StaticStatic {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !in_macro_or_desugar(item.span) {\n-            // Match only statics...\n-            if let ItemKind::Static(ref var_type, _, _) = item.node {\n-                self.visit_type(var_type, cx);\n-            }\n-        }\n-    }\n-}"}, {"sha": "fc9f0e066d43f61e1591eeb90c4fe8ac5f5ebc14", "filename": "tests/ui/const_static_lifetime.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/tests%2Fui%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/tests%2Fui%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.rs?ref=b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "patch": "@@ -23,6 +23,28 @@ const VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static\n \n const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n \n+static STATIC_VAR_ONE: &'static str = \"Test static #1\"; // ERROR Consider removing 'static.\n+\n+static STATIC_VAR_TWO: &str = \"Test static #2\"; // This line should not raise a warning.\n+\n+static STATIC_VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n+\n+static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+\n+static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+\n+static STATIC_VAR_SIX: &'static u8 = &5;\n+\n+static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+\n+static STATIC_VAR_HEIGHT: &'static Foo = &Foo {};\n+\n+static STATIC_VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n+\n+static STATIC_VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n+\n+static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n+\n fn main() {\n     let false_positive: &'static str = \"test\";\n     println!(\"{}\", VAR_ONE);"}, {"sha": "eb4d3200e8be3f02be145df456bc3c54473a9d21", "filename": "tests/ui/const_static_lifetime.stderr", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/tests%2Fui%2Fconst_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811/tests%2Fui%2Fconst_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.stderr?ref=b38ce08e76a10ad0b7755ef6b149ddfd0c1cf811", "patch": "@@ -78,5 +78,83 @@ error: Constants have by default a `'static` lifetime\n LL | const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n-error: aborting due to 13 previous errors\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:26:25\n+   |\n+LL | static STATIC_VAR_ONE: &'static str = \"Test static #1\"; // ERROR Consider removing 'static.\n+   |                        -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:30:29\n+   |\n+LL | static STATIC_VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n+   |                            -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:32:40\n+   |\n+LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+   |                                       -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:32:55\n+   |\n+LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+   |                                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:34:26\n+   |\n+LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+   |                         -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:34:38\n+   |\n+LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+   |                                     -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:36:25\n+   |\n+LL | static STATIC_VAR_SIX: &'static u8 = &5;\n+   |                        -^^^^^^^--- help: consider removing `'static`: `&u8`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:38:37\n+   |\n+LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+   |                                    -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:38:47\n+   |\n+LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+   |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:40:28\n+   |\n+LL | static STATIC_VAR_HEIGHT: &'static Foo = &Foo {};\n+   |                           -^^^^^^^---- help: consider removing `'static`: `&Foo`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:42:27\n+   |\n+LL | static STATIC_VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n+   |                          -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:44:27\n+   |\n+LL | static STATIC_VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n+   |                          -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/const_static_lifetime.rs:46:27\n+   |\n+LL | static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n+   |                          -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n+\n+error: aborting due to 26 previous errors\n "}, {"sha": "04fecbfaeb275c86f9d75f9c9aa3cc0b1ca41231", "filename": "tests/ui/static_static_lifetime.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/87e9dee884988aa4385723ec08d69c548f7f50a2/tests%2Fui%2Fstatic_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e9dee884988aa4385723ec08d69c548f7f50a2/tests%2Fui%2Fstatic_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic_static_lifetime.rs?ref=87e9dee884988aa4385723ec08d69c548f7f50a2", "patch": "@@ -1,49 +0,0 @@\n-#[derive(Debug)]\n-struct Foo {}\n-\n-static VAR_ONE: &'static str = \"Test static #1\"; // ERROR Consider removing 'static.\n-\n-static VAR_TWO: &str = \"Test static #2\"; // This line should not raise a warning.\n-\n-static VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n-\n-static VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-\n-static VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-\n-static VAR_SIX: &'static u8 = &5;\n-\n-static VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-\n-static VAR_HEIGHT: &'static Foo = &Foo {};\n-\n-static VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n-\n-static VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n-\n-static VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n-\n-fn main() {\n-    let false_positive: &'static str = \"test\";\n-    println!(\"{}\", VAR_ONE);\n-    println!(\"{}\", VAR_TWO);\n-    println!(\"{:?}\", VAR_THREE);\n-    println!(\"{:?}\", VAR_FOUR);\n-    println!(\"{:?}\", VAR_FIVE);\n-    println!(\"{:?}\", VAR_SIX);\n-    println!(\"{:?}\", VAR_SEVEN);\n-    println!(\"{:?}\", VAR_HEIGHT);\n-    println!(\"{}\", false_positive);\n-}\n-\n-// trait Bar {\n-//     static TRAIT_VAR: &'static str;\n-// }\n-\n-// impl Foo {\n-//     static IMPL_VAR: &'static str = \"var\";\n-// }\n-\n-// impl Bar for Foo {\n-//     static TRAIT_VAR: &'static str = \"foo\";\n-// }"}, {"sha": "c4111b1f13c714b58e7df70bb6438fd66a64065e", "filename": "tests/ui/static_static_lifetime.stderr", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/87e9dee884988aa4385723ec08d69c548f7f50a2/tests%2Fui%2Fstatic_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e9dee884988aa4385723ec08d69c548f7f50a2/tests%2Fui%2Fstatic_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic_static_lifetime.stderr?ref=87e9dee884988aa4385723ec08d69c548f7f50a2", "patch": "@@ -1,82 +0,0 @@\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:4:18\n-   |\n-LL | static VAR_ONE: &'static str = \"Test static #1\"; // ERROR Consider removing 'static.\n-   |                 -^^^^^^^---- help: consider removing `'static`: `&str`\n-   |\n-   = note: `-D clippy::static-static-lifetime` implied by `-D warnings`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:8:22\n-   |\n-LL | static VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n-   |                     -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:10:33\n-   |\n-LL | static VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:10:48\n-   |\n-LL | static VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                               -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:12:19\n-   |\n-LL | static VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                  -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:12:31\n-   |\n-LL | static VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                              -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:14:18\n-   |\n-LL | static VAR_SIX: &'static u8 = &5;\n-   |                 -^^^^^^^--- help: consider removing `'static`: `&u8`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:16:30\n-   |\n-LL | static VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                             -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:16:40\n-   |\n-LL | static VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                                       -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:18:21\n-   |\n-LL | static VAR_HEIGHT: &'static Foo = &Foo {};\n-   |                    -^^^^^^^---- help: consider removing `'static`: `&Foo`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:20:20\n-   |\n-LL | static VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n-   |                   -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:22:20\n-   |\n-LL | static VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n-   |                   -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/static_static_lifetime.rs:24:20\n-   |\n-LL | static VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n-   |                   -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n-\n-error: aborting due to 13 previous errors\n-"}]}