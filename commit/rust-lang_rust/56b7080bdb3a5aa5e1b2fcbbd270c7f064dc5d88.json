{"sha": "56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88", "node_id": "C_kwDOAAsO6NoAKDU2YjcwODBiZGIzYTVhYTVlMWIyZmNiYmQyNzBjN2YwNjRkYzVkODg", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-18T14:10:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-20T12:38:15Z"}, "message": "Remove build_sibling_block", "tree": {"sha": "df6a67fec5acea5d8f60c17382bf96d2b02999c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df6a67fec5acea5d8f60c17382bf96d2b02999c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88", "html_url": "https://github.com/rust-lang/rust/commit/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d30ceb430671496286a8c3d04f56ca5b2925e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d30ceb430671496286a8c3d04f56ca5b2925e5", "html_url": "https://github.com/rust-lang/rust/commit/40d30ceb430671496286a8c3d04f56ca5b2925e5"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "a576291cd51f0a4e4e7d7de4d5c44328558a449c", "filename": "src/builder.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=56b7080bdb3a5aa5e1b2fcbbd270c7f064dc5d88", "patch": "@@ -390,11 +390,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         bx\n     }\n \n-    fn build_sibling_block(&mut self, name: &str) -> Self {\n-        let block = self.append_sibling_block(name);\n-        Self::build(self.cx, block)\n-    }\n-\n     fn llbb(&self) -> Block<'gcc> {\n         self.block.expect(\"block\")\n     }\n@@ -880,28 +875,30 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let start = dest.project_index(&mut self, zero).llval;\n         let end = dest.project_index(&mut self, count).llval;\n \n-        let mut header_bx = self.build_sibling_block(\"repeat_loop_header\");\n-        let mut body_bx = self.build_sibling_block(\"repeat_loop_body\");\n-        let next_bx = self.build_sibling_block(\"repeat_loop_next\");\n+        let header_bb = self.append_sibling_block(\"repeat_loop_header\");\n+        let body_bb = self.append_sibling_block(\"repeat_loop_body\");\n+        let next_bb = self.append_sibling_block(\"repeat_loop_next\");\n \n         let ptr_type = start.get_type();\n         let current = self.llbb().get_function().new_local(None, ptr_type, \"loop_var\");\n         let current_val = current.to_rvalue();\n         self.assign(current, start);\n \n-        self.br(header_bx.llbb());\n+        self.br(header_bb);\n \n+        let mut header_bx = Builder::build(self.cx, header_bb);\n         let keep_going = header_bx.icmp(IntPredicate::IntNE, current_val, end);\n-        header_bx.cond_br(keep_going, body_bx.llbb(), next_bx.llbb());\n+        header_bx.cond_br(keep_going, body_bb, next_bb);\n \n+        let mut body_bx = Builder::build(self.cx, body_bb);\n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n         cg_elem.val.store(&mut body_bx, PlaceRef::new_sized_aligned(current_val, cg_elem.layout, align));\n \n         let next = body_bx.inbounds_gep(self.backend_type(cg_elem.layout), current.to_rvalue(), &[self.const_usize(1)]);\n         body_bx.llbb().add_assignment(None, current, next);\n-        body_bx.br(header_bx.llbb());\n+        body_bx.br(header_bb);\n \n-        next_bx\n+        Builder::build(self.cx, next_bb)\n     }\n \n     fn range_metadata(&mut self, _load: RValue<'gcc>, _range: WrappingRange) {"}]}