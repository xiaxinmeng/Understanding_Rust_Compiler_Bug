{"sha": "69dc98161a19580e95de1196f1523aa767fe1a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZGM5ODE2MWExOTU4MGU5NWRlMTE5NmYxNTIzYWE3NjdmZTFhNWQ=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2020-10-27T14:01:03Z"}, "committer": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2020-10-27T15:21:55Z"}, "message": "Cache foreign_modules query", "tree": {"sha": "84e291c9b529fb69e4bdfe33a439dd5f67af2b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e291c9b529fb69e4bdfe33a439dd5f67af2b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69dc98161a19580e95de1196f1523aa767fe1a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69dc98161a19580e95de1196f1523aa767fe1a5d", "html_url": "https://github.com/rust-lang/rust/commit/69dc98161a19580e95de1196f1523aa767fe1a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69dc98161a19580e95de1196f1523aa767fe1a5d/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6c670c4b4273b2c7c0af07a524d4240c926bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6c670c4b4273b2c7c0af07a524d4240c926bfc", "html_url": "https://github.com/rust-lang/rust/commit/9f6c670c4b4273b2c7c0af07a524d4240c926bfc"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "d4872aedd70fd90cd5327f47d067a5895054f513", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=69dc98161a19580e95de1196f1523aa767fe1a5d", "patch": "@@ -378,8 +378,8 @@ pub fn provide_both(providers: &mut Providers) {\n             .collect::<FxHashMap<_, _>>();\n \n         let mut ret = FxHashMap::default();\n-        for lib in tcx.foreign_modules(cnum).iter() {\n-            let module = def_id_to_native_lib.get(&lib.def_id).and_then(|s| s.wasm_import_module);\n+        for (def_id, lib) in tcx.foreign_modules(cnum).iter() {\n+            let module = def_id_to_native_lib.get(&def_id).and_then(|s| s.wasm_import_module);\n             let module = match module {\n                 Some(s) => s,\n                 None => continue,"}, {"sha": "540d9fd0ca5839577a83f6c4540a91e807ab6334", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=69dc98161a19580e95de1196f1523aa767fe1a5d", "patch": "@@ -861,7 +861,7 @@ pub fn provide_both(providers: &mut Providers) {\n     providers.dllimport_foreign_items = |tcx, krate| {\n         let module_map = tcx.foreign_modules(krate);\n         let module_map =\n-            module_map.iter().map(|lib| (lib.def_id, lib)).collect::<FxHashMap<_, _>>();\n+            module_map.iter().map(|(def_id, lib)| (def_id, lib)).collect::<FxHashMap<_, _>>();\n \n         let dllimports = tcx\n             .native_libraries(krate)"}, {"sha": "c031e0e2e19042cced4339e246132ca3dcaec0a2", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=69dc98161a19580e95de1196f1523aa767fe1a5d", "patch": "@@ -1414,12 +1414,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_foreign_modules(&self, tcx: TyCtxt<'tcx>) -> &'tcx [ForeignModule] {\n+    fn get_foreign_modules(&self, tcx: TyCtxt<'tcx>) -> Lrc<FxHashMap<DefId, ForeignModule>> {\n         if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not have any *target* foreign modules.\n-            &[]\n+            Lrc::new(FxHashMap::default())\n         } else {\n-            tcx.arena.alloc_from_iter(self.root.foreign_modules.decode((self, tcx.sess)))\n+            let modules: FxHashMap<DefId, ForeignModule> =\n+                self.root.foreign_modules.decode((self, tcx.sess)).map(|m| (m.def_id, m)).collect();\n+            Lrc::new(modules)\n         }\n     }\n "}, {"sha": "c2092e1842f361fa043a4103f310ce9166f368e9", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=69dc98161a19580e95de1196f1523aa767fe1a5d", "patch": "@@ -6,12 +6,14 @@ use crate::rmeta::{self, encoder};\n \n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n+use rustc_middle::middle::cstore::ForeignModule;\n use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n@@ -267,12 +269,10 @@ pub fn provide(providers: &mut Providers) {\n                         Some(id) => id,\n                         None => return false,\n                     };\n-                    tcx.foreign_modules(id.krate)\n-                        .iter()\n-                        .find(|m| m.def_id == fm_id)\n-                        .expect(\"failed to find foreign module\")\n-                        .foreign_items\n-                        .contains(&id)\n+                    let map = tcx.foreign_modules(id.krate);\n+                    let module =\n+                        tcx.prof.generic_activity(\"finding_foreign_module\").run(|| map.get(&fm_id));\n+                    module.expect(\"failed to find foreign module\").foreign_items.contains(&id)\n                 })\n                 .map(|l| l.kind)\n         },\n@@ -282,7 +282,9 @@ pub fn provide(providers: &mut Providers) {\n         },\n         foreign_modules: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n-            &tcx.arena.alloc(foreign_modules::collect(tcx))[..]\n+            let modules: FxHashMap<DefId, ForeignModule> =\n+                foreign_modules::collect(tcx).into_iter().map(|m| (m.def_id, m)).collect();\n+            Lrc::new(modules)\n         },\n         link_args: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "cd909b02bd91dd7ac6b98ac28f17ef3b0ca23ea0", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=69dc98161a19580e95de1196f1523aa767fe1a5d", "patch": "@@ -1502,7 +1502,7 @@ impl EncodeContext<'a, 'tcx> {\n     fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {\n         empty_proc_macro!(self);\n         let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);\n-        self.lazy(foreign_modules.iter().cloned())\n+        self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())\n     }\n \n     fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable) {"}, {"sha": "72360e219ecbd282cc8f36714eae18521bf9752c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=69dc98161a19580e95de1196f1523aa767fe1a5d", "patch": "@@ -1168,7 +1168,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query foreign_modules(_: CrateNum) -> &'tcx [ForeignModule] {\n+        query foreign_modules(_: CrateNum) -> Lrc<FxHashMap<DefId, ForeignModule>> {\n             desc { \"looking up the foreign modules of a linked crate\" }\n         }\n "}, {"sha": "0f4aa72d5c47b0f05835f17253ee08849fa8f644", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69dc98161a19580e95de1196f1523aa767fe1a5d/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=69dc98161a19580e95de1196f1523aa767fe1a5d", "patch": "@@ -102,7 +102,7 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n     // FIXME(visit_all_item_likes): Foreign items are not visited\n     // here, so we have to manually look at them for now.\n-    for foreign_module in tcx.foreign_modules(LOCAL_CRATE) {\n+    for (_, foreign_module) in tcx.foreign_modules(LOCAL_CRATE).iter() {\n         for &foreign_item in foreign_module.foreign_items.iter() {\n             match tcx.hir().get(tcx.hir().local_def_id_to_hir_id(foreign_item.expect_local())) {\n                 hir::Node::ForeignItem(item) => {"}]}