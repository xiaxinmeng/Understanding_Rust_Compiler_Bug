{"sha": "dd27462ea9c7c12e107272f699e940c76c4adb95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMjc0NjJlYTljN2MxMmUxMDcyNzJmNjk5ZTk0MGM3NmM0YWRiOTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-13T23:24:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-13T23:24:18Z"}, "message": "Rollup merge of #71109 - lcnr:generics_in_const_fn, r=eddyb\n\nallow const generics in const fn\n\nThis was explicitly forbidden before. As we were unable to think of a reason\nwhy this should still be the case, this check has been removed.\n\nr? @eddyb\ncc @varkor @Centril", "tree": {"sha": "e271d2067fdf1ba88460820d94592c2cce07cbb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e271d2067fdf1ba88460820d94592c2cce07cbb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd27462ea9c7c12e107272f699e940c76c4adb95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelPSiCRBK7hj4Ov3rIwAAdHIIALGeUiI4VGbqQUPEwdsxCwwQ\nV/itjZgfOtPrW9YDMw/5WiZxHz577Jk4EQU6Be1suJ436ZlVVR4rz1MFJfdKDPaZ\nr7IcBt2TftV1DXiv6OHXtNPyz1tiFgamYm0+mWhEPAA2lRvOs42ofVqCMeNkijop\nCkJ+9fjNgAI58PNxlKlaUNUge2wmfWeQuZb3tEXt63kK9RXKFGn9U058VltZnqkH\nB8F67gIdM+LIh9IwNGojypbOo92FAg9ntR+m3WHVDlx3eMGXG5FUIieRKZ320E+4\n6YTH6P742jeWH5Y9lkF5IBrPA1gXg8wFdmVVLoY0zHT4b3bbsZnxyhsX+I0ncHk=\n=RpGe\n-----END PGP SIGNATURE-----\n", "payload": "tree e271d2067fdf1ba88460820d94592c2cce07cbb4\nparent e261ef0622d3f56298d71d91dadbb054eca389e3\nparent 50eb39757e471ed50ab34862af776f044c88222d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586820258 +0200\ncommitter GitHub <noreply@github.com> 1586820258 +0200\n\nRollup merge of #71109 - lcnr:generics_in_const_fn, r=eddyb\n\nallow const generics in const fn\n\nThis was explicitly forbidden before. As we were unable to think of a reason\nwhy this should still be the case, this check has been removed.\n\nr? @eddyb\ncc @varkor @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd27462ea9c7c12e107272f699e940c76c4adb95", "html_url": "https://github.com/rust-lang/rust/commit/dd27462ea9c7c12e107272f699e940c76c4adb95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd27462ea9c7c12e107272f699e940c76c4adb95/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e261ef0622d3f56298d71d91dadbb054eca389e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e261ef0622d3f56298d71d91dadbb054eca389e3", "html_url": "https://github.com/rust-lang/rust/commit/e261ef0622d3f56298d71d91dadbb054eca389e3"}, {"sha": "50eb39757e471ed50ab34862af776f044c88222d", "url": "https://api.github.com/repos/rust-lang/rust/commits/50eb39757e471ed50ab34862af776f044c88222d", "html_url": "https://github.com/rust-lang/rust/commit/50eb39757e471ed50ab34862af776f044c88222d"}], "stats": {"total": 46, "additions": 5, "deletions": 41}, "files": [{"sha": "395fd7460850f1de623bfbe733735eaa5d31501d", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dd27462ea9c7c12e107272f699e940c76c4adb95/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd27462ea9c7c12e107272f699e940c76c4adb95/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=dd27462ea9c7c12e107272f699e940c76c4adb95", "patch": "@@ -561,28 +561,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    /// We currently do not permit const generics in `const fn`,\n-    /// as this is tantamount to allowing compile-time dependent typing.\n-    ///\n-    /// FIXME(const_generics): Is this really true / necessary? Discuss with @varkor.\n-    /// At any rate, the restriction feels too syntactic. Consider moving it to e.g. typeck.\n-    fn check_const_fn_const_generic(&self, span: Span, sig: &FnSig, generics: &Generics) {\n-        if let Const::Yes(const_span) = sig.header.constness {\n-            // Look for const generics and error if we find any.\n-            for param in &generics.params {\n-                if let GenericParamKind::Const { .. } = param.kind {\n-                    self.err_handler()\n-                        .struct_span_err(\n-                            span,\n-                            \"const parameters are not permitted in const functions\",\n-                        )\n-                        .span_label(const_span, \"`const` because of this\")\n-                        .emit();\n-                }\n-            }\n-        }\n-    }\n-\n     fn check_item_named(&self, ident: Ident, kind: &str) {\n         if ident.name != kw::Underscore {\n             return;\n@@ -966,9 +944,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(def, ref sig, ref generics, ref body) => {\n+            ItemKind::Fn(def, _, _, ref body) => {\n                 self.check_defaultness(item.span, def);\n-                self.check_const_fn_const_generic(item.span, sig, generics);\n \n                 if body.is_none() {\n                     let msg = \"free function without a body\";"}, {"sha": "3d8b77bcf7b47d4444e0d1c5069c451cbd4c9a69", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd27462ea9c7c12e107272f699e940c76c4adb95/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd27462ea9c7c12e107272f699e940c76c4adb95/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=dd27462ea9c7c12e107272f699e940c76c4adb95", "patch": "@@ -1,11 +1,11 @@\n+// run-pass\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n const fn const_u32_identity<const X: u32>() -> u32 {\n-    //~^ ERROR const parameters are not permitted in const functions\n     X\n }\n \n fn main() {\n-    println!(\"{:?}\", const_u32_identity::<18>());\n+    assert_eq!(const_u32_identity::<18>(), 18);\n }"}, {"sha": "64b9c18a8f5255f2c4a6a1c298e3be8e792e64d0", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd27462ea9c7c12e107272f699e940c76c4adb95/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd27462ea9c7c12e107272f699e940c76c4adb95/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=dd27462ea9c7c12e107272f699e940c76c4adb95", "patch": "@@ -1,23 +1,10 @@\n-error: const parameters are not permitted in const functions\n-  --> $DIR/const-fn-with-const-param.rs:4:1\n-   |\n-LL |   const fn const_u32_identity<const X: u32>() -> u32 {\n-   |   ^----\n-   |   |\n-   |  _`const` because of this\n-   | |\n-LL | |\n-LL | |     X\n-LL | | }\n-   | |_^\n-\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/const-fn-with-const-param.rs:1:12\n+  --> $DIR/const-fn-with-const-param.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error: aborting due to previous error; 1 warning emitted\n+warning: 1 warning emitted\n "}]}