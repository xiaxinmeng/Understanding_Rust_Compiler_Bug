{"sha": "d2504faf0ec556584c59acdf1b64c2fd27c1328f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNTA0ZmFmMGVjNTU2NTg0YzU5YWNkZjFiNjRjMmZkMjdjMTMyOGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-18T15:01:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-18T15:01:48Z"}, "message": "Merge pull request #1967 from koivunej/issue-1964\n\nFix let_unit_value with for loop iterating over units", "tree": {"sha": "53518a836adc7d03914e2f191f27f4c54c3de517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53518a836adc7d03914e2f191f27f4c54c3de517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2504faf0ec556584c59acdf1b64c2fd27c1328f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2504faf0ec556584c59acdf1b64c2fd27c1328f", "html_url": "https://github.com/rust-lang/rust/commit/d2504faf0ec556584c59acdf1b64c2fd27c1328f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2504faf0ec556584c59acdf1b64c2fd27c1328f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cdaeae1b877ca03b26ccb9b82754b826b03da5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdaeae1b877ca03b26ccb9b82754b826b03da5d", "html_url": "https://github.com/rust-lang/rust/commit/7cdaeae1b877ca03b26ccb9b82754b826b03da5d"}, {"sha": "171f7b4eb7fed11f9282eb0c5af5eda1e77f9bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/171f7b4eb7fed11f9282eb0c5af5eda1e77f9bc6", "html_url": "https://github.com/rust-lang/rust/commit/171f7b4eb7fed11f9282eb0c5af5eda1e77f9bc6"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "67319f0c35512cbe2665594f1a9d5466df39424f", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2504faf0ec556584c59acdf1b64c2fd27c1328f/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2504faf0ec556584c59acdf1b64c2fd27c1328f/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=d2504faf0ec556584c59acdf1b64c2fd27c1328f", "patch": "@@ -114,13 +114,36 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n \n /// Checks if a `let` decl is from a `for` loop desugaring.\n pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n+    // This will detect plain for-loops without an actual variable binding:\n+    //\n+    // ```\n+    // for x in some_vec {\n+    //   // do stuff\n+    // }\n+    // ```\n     if_let_chain! {[\n         let hir::DeclLocal(ref loc) = decl.node,\n         let Some(ref expr) = loc.init,\n         let hir::ExprMatch(_, _, hir::MatchSource::ForLoopDesugar) = expr.node,\n     ], {\n         return true;\n     }}\n+\n+    // This detects a variable binding in for loop to avoid `let_unit_value`\n+    // lint (see issue #1964).\n+    //\n+    // ```\n+    // for _ in vec![()] {\n+    //   // anything\n+    // }\n+    // ```\n+    if_let_chain! {[\n+        let hir::DeclLocal(ref loc) = decl.node,\n+        let hir::LocalSource::ForLoopDesugar = loc.source,\n+    ], {\n+        return true;\n+    }}\n+\n     false\n }\n "}, {"sha": "d07cf8ede2f403b2cd82a83c9c8a7d01d9896660", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d2504faf0ec556584c59acdf1b64c2fd27c1328f/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2504faf0ec556584c59acdf1b64c2fd27c1328f/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=d2504faf0ec556584c59acdf1b64c2fd27c1328f", "patch": "@@ -18,8 +18,32 @@ fn main() {\n         let _a = ();\n     }\n \n+    consume_units_with_for_loop(); // should be fine as well\n+\n     let_and_return!(()) // should be fine\n }\n \n+// Related to issue #1964\n+fn consume_units_with_for_loop() {\n+    // `for_let_unit` lint should not be triggered by consuming them using for loop.\n+    let v = vec![(), (), ()];\n+    let mut count = 0;\n+    for _ in v {\n+        count += 1;\n+    }\n+    assert_eq!(count, 3);\n+\n+    // Same for consuming from some other Iterator<Item = ()>.\n+    let (tx, rx) = ::std::sync::mpsc::channel();\n+    tx.send(()).unwrap();\n+    drop(tx);\n+\n+    count = 0;\n+    for _ in rx.iter() {\n+        count += 1;\n+    }\n+    assert_eq!(count, 1);\n+}\n+\n #[derive(Copy, Clone)]\n pub struct ContainsUnit(()); // should be fine"}]}