{"sha": "76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "node_id": "C_kwDOAAsO6NoAKDc2NDMwYzM5ZjBhNzg0NDhiY2FkNWE4Y2RhYmMwZDQ4YmRmM2NmMmY", "commit": {"author": {"name": "Andr\u00e9s Mart\u00ednez", "email": "andresmartinez@z1.digital", "date": "2022-12-14T18:39:16Z"}, "committer": {"name": "Andr\u00e9s Mart\u00ednez", "email": "andresmartinez@z1.digital", "date": "2022-12-14T18:39:16Z"}, "message": "Added PlayStation Vita support", "tree": {"sha": "468a11a7c3341abacc5c4a2d3feb407d82c65820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/468a11a7c3341abacc5c4a2d3feb407d82c65820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "html_url": "https://github.com/rust-lang/rust/commit/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/comments", "author": null, "committer": null, "parents": [{"sha": "2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a", "html_url": "https://github.com/rust-lang/rust/commit/2176e3a7a4a8dfbea92f3104244fbf8fad4faf9a"}], "stats": {"total": 173, "additions": 172, "deletions": 1}, "files": [{"sha": "ebd2cca25ea9a1be8117301a25795aa5006e6ddc", "filename": "compiler/rustc_target/src/spec/armv7_sony_vita_newlibeabihf.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_sony_vita_newlibeabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_sony_vita_newlibeabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_sony_vita_newlibeabihf.rs?ref=76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "patch": "@@ -0,0 +1,40 @@\n+use crate::abi::Endian;\n+use crate::spec::{cvs, Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n+\n+/// A base target for PlayStation Vita devices using the VITASDK toolchain (using newlib).\n+///\n+/// Requires the VITASDK toolchain on the host system.\n+\n+pub fn target() -> Target {\n+    let pre_link_args = TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-Wl,-q\"]);\n+\n+    Target {\n+        llvm_target: \"armv7a-vita-newlibeabihf\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n+\n+        options: TargetOptions {\n+            os: \"vita\".into(),\n+            endian: Endian::Little,\n+            c_int_width: \"32\".into(),\n+            dynamic_linking: false,\n+            env: \"newlib\".into(),\n+            vendor: \"sony\".into(),\n+            abi: \"eabihf\".into(),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n+            no_default_libraries: false,\n+            cpu: \"cortex-a9\".into(),\n+            executables: true,\n+            families: cvs![\"unix\"],\n+            linker: Some(\"arm-vita-eabi-gcc\".into()),\n+            relocation_model: RelocModel::Static,\n+            features: \"+v7,+neon\".into(),\n+            pre_link_args,\n+            exe_suffix: \".elf\".into(),\n+            panic_strategy: PanicStrategy::Abort,\n+            max_atomic_width: Some(32),\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "a6a7009a190c5ebd0a714e34389a3a7adcffd717", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "patch": "@@ -1241,6 +1241,8 @@ supported_targets! {\n \n     (\"aarch64-nintendo-switch-freestanding\", aarch64_nintendo_switch_freestanding),\n \n+    (\"armv7-sony-vita-newlibeabihf\", armv7_sony_vita_newlibeabihf),\n+\n     (\"armv7-unknown-linux-uclibceabi\", armv7_unknown_linux_uclibceabi),\n     (\"armv7-unknown-linux-uclibceabihf\", armv7_unknown_linux_uclibceabihf),\n "}, {"sha": "da5d9a09486ef3cce7d248c1714a28e599574a86", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "patch": "@@ -22,6 +22,7 @@\n     - [armv4t-none-eabi](platform-support/armv4t-none-eabi.md)\n     - [armv5te-none-eabi](platform-support/armv5te-none-eabi.md)\n     - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n+    - [armv7-sony-vita-newlibeabihf](platform-support/armv7-sony-vita-newlibeabihf.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-android and \\*-androideabi](platform-support/android.md)"}, {"sha": "8c710f8f6a2b7d6f2b5c5e2ed4f43031c7102717", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "patch": "@@ -235,6 +235,7 @@ target | std | host | notes\n `armv6-unknown-netbsd-eabihf` | ? |  |\n [`armv6k-nintendo-3ds`](platform-support/armv6k-nintendo-3ds.md) | ? |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n+[`armv7-sony-vita-newlibeabihf`](platform-support/armv7-sony-vita-newlibeabihf.md) | ? |  | ARM Cortex-A9 Sony PlayStation Vita (requires VITASDK toolchain)\n [`armv7-unknown-linux-uclibceabi`](platform-support/armv7-unknown-linux-uclibceabi.md) | \u2713 | \u2713 | ARMv7 Linux with uClibc, softfloat\n [`armv7-unknown-linux-uclibceabihf`](platform-support/armv7-unknown-linux-uclibceabihf.md) | \u2713 | ? | ARMv7 Linux with uClibc, hardfloat\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD"}, {"sha": "6619c90b849d829f172825008397cfebda86384f", "filename": "src/doc/rustc/src/platform-support/armv7-sony-vita-eabihf.md", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-sony-vita-eabihf.md", "raw_url": "https://github.com/rust-lang/rust/raw/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-sony-vita-eabihf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-sony-vita-eabihf.md?ref=76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "patch": "@@ -0,0 +1,127 @@\n+# armv7-sony-vita-eabihf\n+\n+**Tier: 3**\n+\n+This tier supports the ARM Cortex A9 processor running on a PlayStation Vita console. `armv7-vita-newlibeabihf` aims to have support for `std` crate using `newlib` as a bridge.\n+\n+## Designated Developers\n+\n+* [@amg98](https://github.com/amg98)\n+\n+## Requirements\n+\n+This target is cross compiled, and requires installing [VITASDK](https://vitasdk.org/) toolchain on your system.\n+\n+## Building\n+\n+You can build Rust with support for the target by adding it to the `target`\n+list in `config.toml`:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"armv7-sony-vita-newlibeabihf\"]\n+```\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled from `x86_64` on either Windows, MacOS or Linux systems. Other hosts are not supported for cross-compilation.\n+\n+## Testing\n+\n+Currently there is no support to run the rustc test suite for this target.\n+\n+## Building and Running Rust Programs\n+\n+To test your developed rust programs for PlayStation Vita, first you have to prepare a proper executable for the device using the resulting ELF file you get from compilation step. The needed steps can be automated using tools like `cargo-make`. Use the example below as a template for your project:\n+\n+```toml\n+[env]\n+TITLE = \"Rust Hello World\"\n+TITLEID = \"RUST00001\"\n+# At least a \"sce_sys\" folder should be place there for app metadata (title, icons, description...)\n+# You can find sample assets for that on $VITASDK/share/gcc-arm-vita-eabi/samples/hello_world/sce_sys/\n+STATIC_DIR = \"static\"   # Folder where static assets should be placed (sce_sys folder is at $STATIC_DIR/sce_sys)\n+CARGO_TARGET_DIR = { script = [\"echo ${CARGO_TARGET_DIR:=target}\"] }\n+RUST_TARGET_PATH = { script = [\"echo $(pwd)\"]}\n+RUST_TARGET = \"armv7-sony-vita-newlibeabihf\"\n+CARGO_OUT_DIR = \"${CARGO_TARGET_DIR}/${RUST_TARGET}/release\"\n+\n+[tasks.xbuild]\n+# This is the command where you get the ELF executable file (e.g. call to cargo build)\n+\n+[tasks.strip]\n+description = \"Strip the produced ELF executable.\"\n+dependencies = [\"xbuild\"]\n+command = \"arm-vita-eabi-strip\"\n+args = [\"-g\", '${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_FS_NAME}.elf']\n+\n+[tasks.velf]\n+description = \"Build an VELF executable from the obtained ELF file.\"\n+dependencies = [\"strip\"]\n+command = \"vita-elf-create\"\n+args = ['${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.elf', '${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.velf']\n+\n+[tasks.eboot-bin]\n+description = \"Build an `eboot.bin` file from the obtained VELF file.\"\n+dependencies = [\"velf\"]\n+command = \"vita-make-fself\"\n+args = [\"-s\", '${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.velf', '${CARGO_OUT_DIR}/eboot.bin']\n+\n+[tasks.param-sfo]\n+description = \"Build the `param.sfo` manifest using with given TITLE and TITLEID.\"\n+command = \"vita-mksfoex\"\n+args = [\"-s\", 'TITLE_ID=${TITLEID}', '${TITLE}', '${CARGO_OUT_DIR}/param.sfo']\n+\n+[tasks.manifest]\n+description = \"List all static resources into a manifest file.\"\n+script = [\n+  'mkdir -p \"${CARGO_OUT_DIR}\"',\n+  '''\n+  if [ -d \"${STATIC_DIR}\" ]; then\n+    find \"${STATIC_DIR}\" -type f > \"${CARGO_OUT_DIR}/MANIFEST\"\n+  else\n+    touch \"${CARGO_OUT_DIR}/MANIFEST\"\n+  fi\n+  '''\n+]\n+\n+[tasks.vpk]\n+description = \"Build a VPK distribution of the project executable and resources.\"\n+dependencies = [\"eboot-bin\", \"param-sfo\", \"manifest\"]\n+script_runner = \"@rust\"\n+script = [\n+    '''\n+    use std::io::BufRead;\n+    use std::fs::File;\n+\n+    fn main() {\n+\n+      let crate_name = env!(\"CARGO_MAKE_CRATE_NAME\");\n+      let static_dir = env!(\"STATIC_DIR\");\n+      let out_dir = std::path::PathBuf::from(env!(\"CARGO_OUT_DIR\"));\n+\n+      let mut cmd = ::std::process::Command::new(\"vita-pack-vpk\");\n+      cmd.arg(\"-s\").arg(out_dir.join(\"param.sfo\"));\n+      cmd.arg(\"-b\").arg(out_dir.join(\"eboot.bin\"));\n+\n+      // Add files from MANIFEST\n+      if let Ok(file) = File::open(out_dir.join(\"MANIFEST\")) {\n+          let mut reader = ::std::io::BufReader::new(file);\n+          let mut lines = reader.lines();\n+          while let Some(Ok(line)) = lines.next() {\n+              let p1 = ::std::path::PathBuf::from(line);            // path on FS\n+              let p2 = p1.strip_prefix(static_dir).unwrap();        // path in VPK\n+              cmd.arg(\"--add\").arg(format!(\"{}={}\", p1.display(), p2.display()));\n+          }\n+      }\n+\n+      cmd.arg(out_dir.join(format!(\"{}.vpk\", crate_name)))\n+        .output()\n+        .expect(\"command failed.\");\n+    }\n+    '''\n+]\n+```\n+\n+After running the above script, you should be able to get a *.vpk file in the same folder your *.elf executable resides. Now you can pick it and install it on your own PlayStation Vita using, for example, [VitaShell](https://github.com/TheOfficialFloW/VitaShell/releases) or you can use an emulator. For the time being, the most mature emulator for PlayStation Vita is [Vita3K](https://vita3k.org/), although I personally recommend testing your programs in real hardware, as the emulator is quite experimental."}, {"sha": "69d799783a94bfaea471bb9a3f6466ad133d3fa1", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=76430c39f0a78448bcad5a8cdabc0d48bdf3cf2f", "patch": "@@ -6,7 +6,7 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   |\n    |                   help: did you mean: `\"linux\"`\n    |\n-   = note: expected values for `target_os` are: aix, android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n+   = note: expected values for `target_os` are: aix, android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vita, vxworks, wasi, watchos, windows, xous\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value"}]}