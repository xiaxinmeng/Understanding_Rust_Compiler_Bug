{"sha": "a9c818ebb28149afb832c812e13148fbf14ec803", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YzgxOGViYjI4MTQ5YWZiODMyYzgxMmUxMzE0OGZiZjE0ZWM4MDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-02T10:08:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-02T10:08:13Z"}, "message": "Rollup merge of #71781 - estebank:box-pin-test, r=tmandry\n\nUncomment test code for failure to use `Box::pin`\n\nClose #69083.", "tree": {"sha": "5444839a38aba698b5c1d0dd62b3e03c429450cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5444839a38aba698b5c1d0dd62b3e03c429450cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9c818ebb28149afb832c812e13148fbf14ec803", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerUaOCRBK7hj4Ov3rIwAAdHIIADPx/nhttfjJsXjHe0Uc5UXM\nnxxazKiWM44s3cuq/7ALp/odAWkAe+MZAHacFR9wZdRYI0x/UAuVghRhltOBymIy\nSFqnsBkJLZxP5/5swOB7aebvdXbMQH1gcO7hSDJ1vEipTefAvzgxC3ypCk8UEINV\nUPHEd8uk4XqgK8oxXkmEo+AIrT4rbokvPX7zQtaogdkwz7a2yCwpd7ICR1uyEfCH\ngM6azkgmNV9VzOdccC2910Aq/VVp4Tb/Gf6Msgt7j7UDCGdNZx5Y2lnHXuI6KZtU\nvu6f57Q/vDg9rp7CjC5f/r8luxn+rEDQFK33R+zbjl0Lha9n9YJ1g3Sd4hDGQ0w=\n=tfIz\n-----END PGP SIGNATURE-----\n", "payload": "tree 5444839a38aba698b5c1d0dd62b3e03c429450cd\nparent 509896fb96627089b1ad57b57ae42fecadbb0415\nparent b3a8f212f88bbea143bb11a5fddbe60603ebb7ff\nauthor Ralf Jung <post@ralfj.de> 1588414093 +0200\ncommitter GitHub <noreply@github.com> 1588414093 +0200\n\nRollup merge of #71781 - estebank:box-pin-test, r=tmandry\n\nUncomment test code for failure to use `Box::pin`\n\nClose #69083.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c818ebb28149afb832c812e13148fbf14ec803", "html_url": "https://github.com/rust-lang/rust/commit/a9c818ebb28149afb832c812e13148fbf14ec803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9c818ebb28149afb832c812e13148fbf14ec803/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509896fb96627089b1ad57b57ae42fecadbb0415", "url": "https://api.github.com/repos/rust-lang/rust/commits/509896fb96627089b1ad57b57ae42fecadbb0415", "html_url": "https://github.com/rust-lang/rust/commit/509896fb96627089b1ad57b57ae42fecadbb0415"}, {"sha": "b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "html_url": "https://github.com/rust-lang/rust/commit/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff"}], "stats": {"total": 111, "additions": 95, "deletions": 16}, "files": [{"sha": "5dee0f5dae0b0d644641442b1d9ba28a1dbc96da", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a9c818ebb28149afb832c812e13148fbf14ec803/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c818ebb28149afb832c812e13148fbf14ec803/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=a9c818ebb28149afb832c812e13148fbf14ec803", "patch": "@@ -11,19 +11,26 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     x //~ ERROR mismatched types\n }\n \n-// FIXME: uncomment these once this commit is in Beta and we can rely on `rustc_on_unimplemented`\n-//        having filtering for `Self` being a trait.\n-//\n-// fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Box::new(x)\n-// }\n-//\n-// fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Pin::new(x)\n-// }\n-//\n-// fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Pin::new(Box::new(x))\n-// }\n+// This case is still subpar:\n+// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n+// Should suggest changing the code from `Pin::new` to `Box::pin`.\n+fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Box::new(x) //~ ERROR mismatched types\n+}\n+\n+fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(x) //~ ERROR mismatched types\n+    //~^ ERROR E0277\n+}\n+\n+fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(Box::new(x)) //~ ERROR E0277\n+}\n+\n+fn zap() -> BoxFuture<'static, i32> {\n+    async { //~ ERROR mismatched types\n+        42\n+    }\n+}\n \n fn main() {}"}, {"sha": "ff256eb30947a5a6b9b7784f1ebd1e2b2cf485a1", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a9c818ebb28149afb832c812e13148fbf14ec803/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9c818ebb28149afb832c812e13148fbf14ec803/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=a9c818ebb28149afb832c812e13148fbf14ec803", "patch": "@@ -15,6 +15,78 @@ LL |     x\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n+   |\n+LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |                                                         ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL |     Box::new(x)\n+   |     ^^^^^^^^^^^ expected struct `std::pin::Pin`, found struct `std::boxed::Box`\n+   |\n+   = note: expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+              found struct `std::boxed::Box<F>`\n+   = help: use `Box::pin`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:14\n+   |\n+LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |        - this type parameter\n+LL |     Pin::new(x)\n+   |              ^\n+   |              |\n+   |              expected struct `std::boxed::Box`, found type parameter `F`\n+   |              help: store this in the heap by calling `Box::new`: `Box::new(x)`\n+   |\n+   = note:      expected struct `std::boxed::Box<dyn std::future::Future<Output = i32> + std::marker::Send>`\n+           found type parameter `F`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:5\n+   |\n+LL |     Pin::new(x)\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: consider using `Box::pin`\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:27:5\n+   |\n+LL |     Pin::new(Box::new(x))\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: consider using `Box::pin`\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:31:5\n+   |\n+LL |   fn zap() -> BoxFuture<'static, i32> {\n+   |               ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL | /     async {\n+LL | |         42\n+LL | |     }\n+   | |_____^ expected struct `std::pin::Pin`, found opaque type\n+   | \n+  ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n+   |\n+LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                             ------------------------------- the found opaque type\n+   |\n+   = note:   expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+           found opaque type `impl std::future::Future`\n+help: you need to pin and box this expression\n+   |\n+LL |     Box::pin(async {\n+LL |         42\n+LL |     })\n+   |\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}