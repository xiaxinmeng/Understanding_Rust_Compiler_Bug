{"sha": "73fed0110823fad26900626bd043b4647e8b3fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZmVkMDExMDgyM2ZhZDI2OTAwNjI2YmQwNDNiNDY0N2U4YjNmYjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-24T03:00:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-24T23:18:05Z"}, "message": "Add task::worker. Spawns a task and returns a channel to it\n\nIt takes a lot of boilerplate to create a task and establish a way to talk to\nit. This function simplifies that, allowing you to write something like\n'worker(f).chan <| start'. Implementation is very unsafe and only works for a\nfew types of channels, but something like this is very useful.", "tree": {"sha": "506a6089e8780b44a1e0eb74e91553d6b36113dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506a6089e8780b44a1e0eb74e91553d6b36113dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73fed0110823fad26900626bd043b4647e8b3fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73fed0110823fad26900626bd043b4647e8b3fb7", "html_url": "https://github.com/rust-lang/rust/commit/73fed0110823fad26900626bd043b4647e8b3fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73fed0110823fad26900626bd043b4647e8b3fb7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82bedb28ed0c3d474edc254fe0ebb5e577b7ca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82bedb28ed0c3d474edc254fe0ebb5e577b7ca4", "html_url": "https://github.com/rust-lang/rust/commit/b82bedb28ed0c3d474edc254fe0ebb5e577b7ca4"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "dc238ffe7b391cbecaeb4175ae3838ae5452e793", "filename": "src/lib/task.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/73fed0110823fad26900626bd043b4647e8b3fb7/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fed0110823fad26900626bd043b4647e8b3fb7/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=73fed0110823fad26900626bd043b4647e8b3fb7", "patch": "@@ -52,6 +52,76 @@ fn clone_chan[T](chan[T] c) -> chan[T] {\n     ret unsafe::reinterpret_cast(cloned);\n }\n \n+// Spawn a task and immediately return a channel for communicating to it\n+fn worker[T](fn(port[T]) f) -> rec(task task, chan[T] chan) {\n+    // FIXME: This is frighteningly unsafe and only works for\n+    // a few cases\n+\n+    type opaque = int;\n+\n+    // FIXME: This terrible hackery is because worktask can't currently\n+    // have type params\n+    type wordsz1 = int;\n+    type wordsz2 = rec(int a, int b);\n+    type wordsz3 = rec(int a, int b, int c);\n+    type wordsz4 = rec(int a, int b, int c, int d);\n+    type opaquechan_1wordsz = chan[chan[wordsz1]];\n+    type opaquechan_2wordsz = chan[chan[wordsz2]];\n+    type opaquechan_3wordsz = chan[chan[wordsz3]];\n+    type opaquechan_4wordsz = chan[chan[wordsz4]];\n+\n+    fn worktask1(opaquechan_1wordsz setupch, opaque fptr) {\n+        let *fn(port[wordsz1]) f = unsafe::reinterpret_cast(fptr);\n+        auto p = port[wordsz1]();\n+        setupch <| chan(p);\n+        (*f)(p);\n+    }\n+\n+    fn worktask2(opaquechan_2wordsz setupch, opaque fptr) {\n+        let *fn(port[wordsz2]) f = unsafe::reinterpret_cast(fptr);\n+        auto p = port[wordsz2]();\n+        setupch <| chan(p);\n+        (*f)(p);\n+    }\n+\n+    fn worktask3(opaquechan_3wordsz setupch, opaque fptr) {\n+        let *fn(port[wordsz3]) f = unsafe::reinterpret_cast(fptr);\n+        auto p = port[wordsz3]();\n+        setupch <| chan(p);\n+        (*f)(p);\n+    }\n+\n+    fn worktask4(opaquechan_4wordsz setupch, opaque fptr) {\n+        let *fn(port[wordsz4]) f = unsafe::reinterpret_cast(fptr);\n+        auto p = port[wordsz4]();\n+        setupch <| chan(p);\n+        (*f)(p);\n+    }\n+\n+    auto p = port[chan[T]]();\n+    auto setupch = chan(p);\n+    auto fptr = unsafe::reinterpret_cast(ptr::addr_of(f));\n+\n+    auto Tsz = sys::size_of[T]();\n+    auto t = if Tsz == sys::size_of[wordsz1]() {\n+        auto setupchptr = unsafe::reinterpret_cast(setupch);\n+        spawn worktask1(setupchptr, fptr)\n+    } else if Tsz == sys::size_of[wordsz2]() {\n+        auto setupchptr = unsafe::reinterpret_cast(setupch);\n+        spawn worktask2(setupchptr, fptr)\n+    } else if Tsz == sys::size_of[wordsz3]() {\n+        auto setupchptr = unsafe::reinterpret_cast(setupch);\n+        spawn worktask3(setupchptr, fptr)\n+    } else if Tsz == sys::size_of[wordsz4]() {\n+        auto setupchptr = unsafe::reinterpret_cast(setupch);\n+        spawn worktask4(setupchptr, fptr)\n+    } else {\n+        fail #fmt(\"unhandled type size %u in task::worker\", Tsz)\n+    };\n+    auto ch; p |> ch;\n+    ret rec(task = t, chan = ch);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "cc7a299194cd2626ebd55d835725c2a1247eed80", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/73fed0110823fad26900626bd043b4647e8b3fb7/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fed0110823fad26900626bd043b4647e8b3fb7/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=73fed0110823fad26900626bd043b4647e8b3fb7", "patch": "@@ -32,3 +32,26 @@ fn test_join() {\n \n     assert task::join(failtask) == task::tr_failure;\n }\n+\n+#[test]\n+fn test_worker() {\n+    task::worker(fn(port[int] p) {\n+        auto x; p |> x;\n+        assert x == 10;\n+    }).chan <| 10;\n+\n+    task::worker(fn(port[rec(int x, int y)] p) {\n+        auto x; p |> x;\n+        assert x.y == 20;\n+    }).chan <| rec(x = 10, y = 20);\n+\n+    task::worker(fn(port[rec(int x, int y, int z)] p) {\n+        auto x; p |> x;\n+        assert x.z == 30;\n+    }).chan <| rec(x = 10, y = 20, z = 30);\n+\n+    task::worker(fn(port[rec(int a, int b, int c, int d)] p) {\n+        auto x; p |> x;\n+        assert x.d == 40;\n+    }).chan <| rec(a = 10, b = 20, c = 30, d = 40);\n+}"}]}