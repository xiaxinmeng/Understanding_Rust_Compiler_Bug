{"sha": "f4181deb0dd2cce2184df0057cf349628a70f2e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MTgxZGViMGRkMmNjZTIxODRkZjAwNTdjZjM0OTYyOGE3MGYyZTk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-10-31T19:01:46Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-01T18:57:08Z"}, "message": "Don't do autoderef for path resolution", "tree": {"sha": "1741819f7656c4a673e52c398e15c5764e375639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1741819f7656c4a673e52c398e15c5764e375639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4181deb0dd2cce2184df0057cf349628a70f2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4181deb0dd2cce2184df0057cf349628a70f2e9", "html_url": "https://github.com/rust-lang/rust/commit/f4181deb0dd2cce2184df0057cf349628a70f2e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4181deb0dd2cce2184df0057cf349628a70f2e9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1173c3dab5f77a1afd367d547790dd82c558fe0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1173c3dab5f77a1afd367d547790dd82c558fe0d", "html_url": "https://github.com/rust-lang/rust/commit/1173c3dab5f77a1afd367d547790dd82c558fe0d"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "332bb14b2c595353fd1a8fc9a11522638a44d764", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f4181deb0dd2cce2184df0057cf349628a70f2e9/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4181deb0dd2cce2184df0057cf349628a70f2e9/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=f4181deb0dd2cce2184df0057cf349628a70f2e9", "patch": "@@ -191,27 +191,48 @@ pub(crate) fn iterate_method_candidates<T>(\n     mode: LookupMode,\n     mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n ) -> Option<T> {\n-    // For method calls, rust first does any number of autoderef, and then one\n-    // autoref (i.e. when the method takes &self or &mut self). We just ignore\n-    // the autoref currently -- when we find a method matching the given name,\n-    // we assume it fits.\n+    let krate = resolver.krate()?;\n+    match mode {\n+        LookupMode::MethodCall => {\n+            // For method calls, rust first does any number of autoderef, and then one\n+            // autoref (i.e. when the method takes &self or &mut self). We just ignore\n+            // the autoref currently -- when we find a method matching the given name,\n+            // we assume it fits.\n \n-    // Also note that when we've got a receiver like &S, even if the method we\n-    // find in the end takes &self, we still do the autoderef step (just as\n-    // rustc does an autoderef and then autoref again).\n+            // Also note that when we've got a receiver like &S, even if the method we\n+            // find in the end takes &self, we still do the autoderef step (just as\n+            // rustc does an autoderef and then autoref again).\n \n-    let krate = resolver.krate()?;\n-    // TODO no autoderef in LookupMode::Path\n-    for derefed_ty in autoderef::autoderef(db, resolver, ty.clone()) {\n-        if let Some(result) =\n-            iterate_inherent_methods(&derefed_ty, db, name, mode, krate, &mut callback)\n-        {\n-            return Some(result);\n+            for derefed_ty in autoderef::autoderef(db, resolver, ty.clone()) {\n+                if let Some(result) =\n+                    iterate_inherent_methods(&derefed_ty, db, name, mode, krate, &mut callback)\n+                {\n+                    return Some(result);\n+                }\n+                if let Some(result) = iterate_trait_method_candidates(\n+                    &derefed_ty,\n+                    db,\n+                    resolver,\n+                    name,\n+                    mode,\n+                    &mut callback,\n+                ) {\n+                    return Some(result);\n+                }\n+            }\n         }\n-        if let Some(result) =\n-            iterate_trait_method_candidates(&derefed_ty, db, resolver, name, mode, &mut callback)\n-        {\n-            return Some(result);\n+        LookupMode::Path => {\n+            // No autoderef for path lookups\n+            if let Some(result) =\n+                iterate_inherent_methods(&ty, db, name, mode, krate, &mut callback)\n+            {\n+                return Some(result);\n+            }\n+            if let Some(result) =\n+                iterate_trait_method_candidates(&ty, db, resolver, name, mode, &mut callback)\n+            {\n+                return Some(result);\n+            }\n         }\n     }\n     None"}]}