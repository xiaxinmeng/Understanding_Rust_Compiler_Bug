{"sha": "01bfc5f5c0cf6b73c26d006802016c9b02066f94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmZjNWY1YzBjZjZiNzNjMjZkMDA2ODAyMDE2YzliMDIwNjZmOTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-27T19:13:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T19:13:34Z"}, "message": "Merge #9026\n\n9026: Complete modules in assoc item lists r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b1d67252f274301ae2a44f5e2e70311b77aad675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d67252f274301ae2a44f5e2e70311b77aad675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bfc5f5c0cf6b73c26d006802016c9b02066f94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgr+9eCRBK7hj4Ov3rIwAAkCoIAJo2GBiAmDyosV3sEqRdF/ek\n3zs01UGWMDwsoT7yi+CuXGTp6aa+ufY7qkG8Zuem81oG+Jk2KbgvHDevGue58H4k\nZMnwT5YIjfIZG3K1VN6PkxVnUCLj1E7XQr2cnaI+eiPJPFrcKFteXqZzqwnDFyTV\npYB7hxoIv2YjBHGpQBZcp/TGOxPUrK4QV3liaKaC8LyhjAUkxKCxGOaEQ/kkOXD0\nbyVYj8GH6KOmhfao9VCBssbUjKISu1ma+qC+WfcuNUHcUDyXXCsaUcerlrchOlrU\noSmsU+So3pav7QNsl6E4TRQPw+elbRIMBQ194tatWSd6QjUibupSwq0elf/Gf+s=\n=bL5g\n-----END PGP SIGNATURE-----\n", "payload": "tree b1d67252f274301ae2a44f5e2e70311b77aad675\nparent a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f\nparent ea251cbd4a22c7754bb5668b9f25fc0c7b47284c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622142814 +0000\ncommitter GitHub <noreply@github.com> 1622142814 +0000\n\nMerge #9026\n\n9026: Complete modules in assoc item lists r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bfc5f5c0cf6b73c26d006802016c9b02066f94", "html_url": "https://github.com/rust-lang/rust/commit/01bfc5f5c0cf6b73c26d006802016c9b02066f94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bfc5f5c0cf6b73c26d006802016c9b02066f94/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f", "html_url": "https://github.com/rust-lang/rust/commit/a2940c42c0ab30e80e1a63494ca17fb2d81bdd1f"}, {"sha": "ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c", "html_url": "https://github.com/rust-lang/rust/commit/ea251cbd4a22c7754bb5668b9f25fc0c7b47284c"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "ec57aee30ef689b22b6577be8302f0392bca3a12", "filename": "crates/ide_completion/src/completions/macro_in_item_position.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=01bfc5f5c0cf6b73c26d006802016c9b02066f94", "patch": "@@ -2,6 +2,7 @@\n \n use crate::{CompletionContext, Completions};\n \n+// Ideally this should be removed and moved into `(un)qualified_path` respectively\n pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n     // Show only macros in top level.\n     if !ctx.is_new_item {\n@@ -12,6 +13,10 @@ pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &Compl\n         if let hir::ScopeDef::MacroDef(mac) = res {\n             acc.add_macro(ctx, Some(name.to_string()), mac);\n         }\n+        // FIXME: This should be done in qualified_path/unqualified_path instead?\n+        if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+            acc.add_resolution(ctx, name.to_string(), &res);\n+        }\n     })\n }\n "}, {"sha": "7a0e1ead3ffbf5a1dd1b41e18e74d0dcc316fcd1", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=01bfc5f5c0cf6b73c26d006802016c9b02066f94", "patch": "@@ -7,7 +7,7 @@ use syntax::AstNode;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() {\n+    if ctx.is_path_disallowed() || ctx.expects_item() {\n         return;\n     }\n     let path = match &ctx.path_qual {\n@@ -20,13 +20,16 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n     let context_module = ctx.scope.module();\n-    if ctx.expects_item() || ctx.expects_assoc_item() {\n+    if ctx.expects_assoc_item() {\n         if let PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n                 if let ScopeDef::MacroDef(macro_def) = def {\n                     acc.add_macro(ctx, Some(name.to_string()), macro_def);\n                 }\n+                if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n+                    acc.add_resolution(ctx, name.to_string(), &def);\n+                }\n             }\n         }\n         return;\n@@ -614,24 +617,43 @@ fn main() { let _ = crate::$0 }\n     }\n \n     #[test]\n-    fn completes_qualified_macros_in_impl() {\n+    fn completes_in_assoc_item_list() {\n         check(\n             r#\"\n #[macro_export]\n macro_rules! foo { () => {} }\n+mod bar {}\n \n struct MyStruct {}\n-\n impl MyStruct {\n     crate::$0\n }\n \"#,\n             expect![[r##\"\n+                md bar\n                 ma foo! #[macro_export] macro_rules! foo\n             \"##]],\n         );\n     }\n \n+    #[test]\n+    #[ignore] // FIXME doesn't complete anything atm\n+    fn completes_in_item_list() {\n+        check(\n+            r#\"\n+struct MyStruct {}\n+macro_rules! foo {}\n+mod bar {}\n+\n+crate::$0\n+\"#,\n+            expect![[r#\"\n+                md bar\n+                ma foo! macro_rules! foo\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn test_super_super_completion() {\n         check("}, {"sha": "c901b358b2e7966090dcd7975dca1ed4e83691a8", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=01bfc5f5c0cf6b73c26d006802016c9b02066f94", "patch": "@@ -9,14 +9,17 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if !ctx.is_trivial_path {\n         return;\n     }\n-    if ctx.is_path_disallowed() {\n+    if ctx.is_path_disallowed() || ctx.expects_item() {\n         return;\n     }\n-    if ctx.expects_item() || ctx.expects_assoc_item() {\n+    if ctx.expects_assoc_item() {\n         ctx.scope.process_all_names(&mut |name, def| {\n             if let ScopeDef::MacroDef(macro_def) = def {\n                 acc.add_macro(ctx, Some(name.to_string()), macro_def);\n             }\n+            if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n+                acc.add_resolution(ctx, name.to_string(), &def);\n+            }\n         });\n         return;\n     }\n@@ -672,19 +675,39 @@ impl My$0\n     }\n \n     #[test]\n-    fn only_completes_macros_in_assoc_item_list() {\n+    fn completes_in_assoc_item_list() {\n         check(\n             r#\"\n-struct MyStruct {}\n macro_rules! foo {}\n+mod bar {}\n \n+struct MyStruct {}\n impl MyStruct {\n     $0\n }\n \"#,\n             expect![[r#\"\n+                md bar\n                 ma foo! macro_rules! foo\n             \"#]],\n         )\n     }\n+\n+    // FIXME: The completions here currently come from `macro_in_item_position`, but they shouldn't\n+    #[test]\n+    fn completes_in_item_list() {\n+        check(\n+            r#\"\n+struct MyStruct {}\n+macro_rules! foo {}\n+mod bar {}\n+\n+$0\n+\"#,\n+            expect![[r#\"\n+                md bar\n+                ma foo!(\u2026) macro_rules! foo\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "19e42ba432e19a40d1af4764a400a8ebda2cf292", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc5f5c0cf6b73c26d006802016c9b02066f94/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=01bfc5f5c0cf6b73c26d006802016c9b02066f94", "patch": "@@ -62,7 +62,6 @@ pub(crate) fn determine_location(tok: SyntaxToken) -> Option<ImmediateLocation>\n             ast::SourceFile(_it) => ImmediateLocation::ItemList,\n             ast::ItemList(_it) => ImmediateLocation::ItemList,\n             ast::RefExpr(_it) => ImmediateLocation::RefExpr,\n-            ast::RefPat(_it) => ImmediateLocation::RefExpr,\n             ast::RecordField(_it) => ImmediateLocation::RecordField,\n             ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n                 Some(IMPL) => ImmediateLocation::Impl,"}]}