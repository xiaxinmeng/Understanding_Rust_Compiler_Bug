{"sha": "b47896492ce19f911d5585055037e6e9e02ecd34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0Nzg5NjQ5MmNlMTlmOTExZDU1ODUwNTUwMzdlNmU5ZTAyZWNkMzQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-03T00:38:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-03T00:38:59Z"}, "message": "Rollup merge of #72704 - tblah:remote-testing-fixes, r=Mark-Simulacrum\n\nRemote testing fixes\n\nImprovements for remote testing\n\n- Create a `RUST_TEST_TMPDIR` directory on the remote testing host\n- Verbose mode for remote-test-server\n- Skip tests which don't support remote testing using `// ignore-remote`\n\nTo test:\n- Build `remote-test-server` for the target machine and copy it over\n- On the target:\n``` sh\nremote-test-server remote\n```\n- On the build machine\n``` sh\nexport TEST_DEVICE_ADDR=\"1.2.3.4:12345\"\n./x.py test\n```", "tree": {"sha": "f22e64a0c0fbf092b86f0138a07a300e92ea6c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22e64a0c0fbf092b86f0138a07a300e92ea6c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b47896492ce19f911d5585055037e6e9e02ecd34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1vEmCRBK7hj4Ov3rIwAAdHIIACu9gcfYFyae1CDZBv5t7vH/\nV/AmSp4T/vhQ9PEBKH3pYqqZKk7zlmx+5UQCx997rcPANA4VTkfuoHVZNbkWwOmA\n4p3odM0CFPRDagORAZdUb3SanSOvLhyEF5mepv7FQUILy9XXSBfQw6NlhgMpe1JI\nluui6fYo9kGMWrsJRMPO5ZaxTmxn0Vy6jfXrdp+ArCves7xfyu1ffvo1x3SeGUuC\nZd5fgOGVCjj+7+1KszmpBnUw9gm1blAyInsy9De603qlMOIFbtBpUJlExIIDX6FR\nwmy42fugU0voSz2VrHPJrttEmX8OFX08RaDscAxlmJseM060xcU1EfSFTgonPTo=\n=v4ak\n-----END PGP SIGNATURE-----\n", "payload": "tree f22e64a0c0fbf092b86f0138a07a300e92ea6c10\nparent fe10f1a49f5ca46e57261b95f46f519523f418fe\nparent 81df5ac241831ed544cecfc9ccbb7dfbe61a87fc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591144739 +0200\ncommitter GitHub <noreply@github.com> 1591144739 +0200\n\nRollup merge of #72704 - tblah:remote-testing-fixes, r=Mark-Simulacrum\n\nRemote testing fixes\n\nImprovements for remote testing\n\n- Create a `RUST_TEST_TMPDIR` directory on the remote testing host\n- Verbose mode for remote-test-server\n- Skip tests which don't support remote testing using `// ignore-remote`\n\nTo test:\n- Build `remote-test-server` for the target machine and copy it over\n- On the target:\n``` sh\nremote-test-server remote\n```\n- On the build machine\n``` sh\nexport TEST_DEVICE_ADDR=\"1.2.3.4:12345\"\n./x.py test\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b47896492ce19f911d5585055037e6e9e02ecd34", "html_url": "https://github.com/rust-lang/rust/commit/b47896492ce19f911d5585055037e6e9e02ecd34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b47896492ce19f911d5585055037e6e9e02ecd34/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe10f1a49f5ca46e57261b95f46f519523f418fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe10f1a49f5ca46e57261b95f46f519523f418fe", "html_url": "https://github.com/rust-lang/rust/commit/fe10f1a49f5ca46e57261b95f46f519523f418fe"}, {"sha": "81df5ac241831ed544cecfc9ccbb7dfbe61a87fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/81df5ac241831ed544cecfc9ccbb7dfbe61a87fc", "html_url": "https://github.com/rust-lang/rust/commit/81df5ac241831ed544cecfc9ccbb7dfbe61a87fc"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "e97dcab6ae560e7c9a3d79120914aecb3e7f2483", "filename": "src/test/ui-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs?ref=b47896492ce19f911d5585055037e6e9e02ecd34", "patch": "@@ -3,6 +3,7 @@\n \n // ignore-cross-compile\n // ignore-stage1\n+// ignore-remote\n \n #![feature(rustc_private)]\n "}, {"sha": "ff7bbafe7c212176a77b005269ea8124c8ff15b6", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=b47896492ce19f911d5585055037e6e9e02ecd34", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // Testing that a librustc_ast can parse modules with canonicalized base path\n // ignore-cross-compile\n+// ignore-remote\n \n #![feature(rustc_private)]\n "}, {"sha": "9d1940dd4d6c20c0cc5e413ced2df891fa6232e8", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b47896492ce19f911d5585055037e6e9e02ecd34", "patch": "@@ -853,6 +853,7 @@ impl Config {\n             name == util::get_pointer_width(&self.target) ||    // pointer width\n             name == self.stage_id.split('-').next().unwrap() || // stage\n             (self.target != self.host && name == \"cross-compile\") ||\n+            (self.remote_test_client.is_some() && name == \"remote\") ||\n             match self.compare_mode {\n                 Some(CompareMode::Nll) => name == \"compare-mode-nll\",\n                 Some(CompareMode::Polonius) => name == \"compare-mode-polonius\","}, {"sha": "efc29163455be29467a89c111a16cc3fbc5af31b", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=b47896492ce19f911d5585055037e6e9e02ecd34", "patch": "@@ -224,7 +224,7 @@ fn run(support_lib_count: usize, exe: String, all_args: Vec<String>) {\n     // by the client.\n     for (k, v) in env::vars() {\n         match &k[..] {\n-            \"PATH\" | \"LD_LIBRARY_PATH\" | \"PWD\" => continue,\n+            \"PATH\" | \"LD_LIBRARY_PATH\" | \"PWD\" | \"RUST_TEST_TMPDIR\" => continue,\n             _ => {}\n         }\n         t!(client.write_all(k.as_bytes()));"}, {"sha": "8c56910e2dfad701e4ec7d040ebf66b8dffcd767", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47896492ce19f911d5585055037e6e9e02ecd34/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=b47896492ce19f911d5585055037e6e9e02ecd34", "patch": "@@ -41,6 +41,7 @@ macro_rules! t {\n \n static TEST: AtomicUsize = AtomicUsize::new(0);\n \n+#[derive(Copy, Clone)]\n struct Config {\n     pub remote: bool,\n     pub verbose: bool,\n@@ -71,6 +72,12 @@ impl Config {\n     }\n }\n \n+fn print_verbose(s: &str, conf: Config) {\n+    if conf.verbose {\n+        println!(\"{}\", s);\n+    }\n+}\n+\n fn main() {\n     println!(\"starting test server\");\n \n@@ -83,16 +90,19 @@ fn main() {\n     };\n \n     let listener = t!(TcpListener::bind(bind_addr));\n-    let work: PathBuf = if cfg!(target_os = \"android\") {\n-        \"/data/tmp/work\".into()\n+    let (work, tmp): (PathBuf, PathBuf) = if cfg!(target_os = \"android\") {\n+        (\"/data/tmp/work\".into(), \"/data/tmp/work/tmp\".into())\n     } else {\n-        let mut temp_dir = env::temp_dir();\n-        temp_dir.push(\"work\");\n-        temp_dir\n+        let mut work_dir = env::temp_dir();\n+        work_dir.push(\"work\");\n+        let mut tmp_dir = work_dir.clone();\n+        tmp_dir.push(\"tmp\");\n+        (work_dir, tmp_dir)\n     };\n-    println!(\"listening!\");\n+    println!(\"listening on {}!\", bind_addr);\n \n     t!(fs::create_dir_all(&work));\n+    t!(fs::create_dir_all(&tmp));\n \n     let lock = Arc::new(Mutex::new(()));\n \n@@ -103,22 +113,25 @@ fn main() {\n             continue;\n         }\n         if &buf[..] == b\"ping\" {\n+            print_verbose(\"Received ping\", config);\n             t!(socket.write_all(b\"pong\"));\n         } else if &buf[..] == b\"push\" {\n-            handle_push(socket, &work);\n+            handle_push(socket, &work, config);\n         } else if &buf[..] == b\"run \" {\n             let lock = lock.clone();\n             let work = work.clone();\n-            thread::spawn(move || handle_run(socket, &work, &lock));\n+            let tmp = tmp.clone();\n+            thread::spawn(move || handle_run(socket, &work, &tmp, &lock, config));\n         } else {\n             panic!(\"unknown command {:?}\", buf);\n         }\n     }\n }\n \n-fn handle_push(socket: TcpStream, work: &Path) {\n+fn handle_push(socket: TcpStream, work: &Path, config: Config) {\n     let mut reader = BufReader::new(socket);\n-    recv(&work, &mut reader);\n+    let dst = recv(&work, &mut reader);\n+    print_verbose(&format!(\"push {:#?}\", dst), config);\n \n     let mut socket = reader.into_inner();\n     t!(socket.write_all(b\"ack \"));\n@@ -134,7 +147,7 @@ impl Drop for RemoveOnDrop<'_> {\n     }\n }\n \n-fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n+fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>, config: Config) {\n     let mut arg = Vec::new();\n     let mut reader = BufReader::new(socket);\n \n@@ -201,6 +214,7 @@ fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n     // binary is and then we'll download it all to the exe path we calculated\n     // earlier.\n     let exe = recv(&path, &mut reader);\n+    print_verbose(&format!(\"run {:#?}\", exe), config);\n \n     let mut cmd = Command::new(&exe);\n     cmd.args(args);\n@@ -226,6 +240,9 @@ fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n         cmd.env(\"LD_LIBRARY_PATH\", format!(\"{}:{}\", work.display(), path.display()));\n     }\n \n+    // Some tests assume RUST_TEST_TMPDIR exists\n+    cmd.env(\"RUST_TEST_TMPDIR\", tmp.to_owned());\n+\n     // Spawn the child and ferry over stdout/stderr to the socket in a framed\n     // fashion (poor man's style)\n     let mut child ="}]}