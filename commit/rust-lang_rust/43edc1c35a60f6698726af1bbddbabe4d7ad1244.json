{"sha": "43edc1c35a60f6698726af1bbddbabe4d7ad1244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZWRjMWMzNWE2MGY2Njk4NzI2YWYxYmJkZGJhYmU0ZDdhZDEyNDQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-24T18:56:02Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-24T18:56:02Z"}, "message": "Rollup merge of #27193 - aidanhs:aphs-advanced-linking-doc, r=steveklabnik\n\nContinuation of #25685.", "tree": {"sha": "f7dc7a109a2a7f993d587549bc2d8370e6bcd15a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7dc7a109a2a7f993d587549bc2d8370e6bcd15a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43edc1c35a60f6698726af1bbddbabe4d7ad1244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43edc1c35a60f6698726af1bbddbabe4d7ad1244", "html_url": "https://github.com/rust-lang/rust/commit/43edc1c35a60f6698726af1bbddbabe4d7ad1244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43edc1c35a60f6698726af1bbddbabe4d7ad1244/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e490ba9a402a2178547971af6b339cb5ce1597f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e490ba9a402a2178547971af6b339cb5ce1597f1", "html_url": "https://github.com/rust-lang/rust/commit/e490ba9a402a2178547971af6b339cb5ce1597f1"}, {"sha": "b6a0d9e17843a2b078e491e10f64a4005b3a7791", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a0d9e17843a2b078e491e10f64a4005b3a7791", "html_url": "https://github.com/rust-lang/rust/commit/b6a0d9e17843a2b078e491e10f64a4005b3a7791"}], "stats": {"total": 182, "additions": 156, "deletions": 26}, "files": [{"sha": "26fd2fd8d20d6d071ed534e5130a7365880506f6", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43edc1c35a60f6698726af1bbddbabe4d7ad1244/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/43edc1c35a60f6698726af1bbddbabe4d7ad1244/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=43edc1c35a60f6698726af1bbddbabe4d7ad1244", "patch": "@@ -1636,6 +1636,10 @@ The type of a function declared in an extern block is `extern \"abi\" fn(A1, ...,\n An) -> R`, where `A1...An` are the declared types of its arguments and `R` is\n the declared return type.\n \n+It is valid to add the `link` attribute on an empty extern block. You can use\n+this to satisfy the linking requirements of extern blocks elsewhere in your code\n+(including upstream crates) instead of adding the attribute to each extern block.\n+\n ## Visibility and Privacy\n \n These two terms are often used interchangeably, and what they are attempting to"}, {"sha": "f1e51591aea0eb30a4e77467f4d568cca3144094", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43edc1c35a60f6698726af1bbddbabe4d7ad1244/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/43edc1c35a60f6698726af1bbddbabe4d7ad1244/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=43edc1c35a60f6698726af1bbddbabe4d7ad1244", "patch": "@@ -63,7 +63,7 @@\n     * [No stdlib](no-stdlib.md)\n     * [Intrinsics](intrinsics.md)\n     * [Lang items](lang-items.md)\n-    * [Link args](link-args.md)\n+    * [Advanced linking](advanced-linking.md)\n     * [Benchmark Tests](benchmark-tests.md)\n     * [Box Syntax and Patterns](box-syntax-and-patterns.md)\n     * [Slice Patterns](slice-patterns.md)"}, {"sha": "6d37043354282cf6db4dd95b87e320bf5b086b0d", "filename": "src/doc/trpl/advanced-linking.md", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/43edc1c35a60f6698726af1bbddbabe4d7ad1244/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md", "raw_url": "https://github.com/rust-lang/rust/raw/43edc1c35a60f6698726af1bbddbabe4d7ad1244/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md?ref=43edc1c35a60f6698726af1bbddbabe4d7ad1244", "patch": "@@ -0,0 +1,151 @@\n+% Advanced Linking\n+\n+The common cases of linking with Rust have been covered earlier in this book,\n+but supporting the range of linking possibilities made available by other\n+languages is important for Rust to achieve seamless interaction with native\n+libraries.\n+\n+# Link args\n+\n+There is one other way to tell `rustc` how to customize linking, and that is via\n+the `link_args` attribute. This attribute is applied to `extern` blocks and\n+specifies raw flags which need to get passed to the linker when producing an\n+artifact. An example usage would be:\n+\n+``` no_run\n+#![feature(link_args)]\n+\n+#[link_args = \"-foo -bar -baz\"]\n+extern {}\n+# fn main() {}\n+```\n+\n+Note that this feature is currently hidden behind the `feature(link_args)` gate\n+because this is not a sanctioned way of performing linking. Right now `rustc`\n+shells out to the system linker (`gcc` on most systems, `link.exe` on MSVC),\n+so it makes sense to provide extra command line\n+arguments, but this will not always be the case. In the future `rustc` may use\n+LLVM directly to link native libraries, in which case `link_args` will have no\n+meaning. You can achieve the same effect as the `link-args` attribute with the\n+`-C link-args` argument to `rustc`.\n+\n+It is highly recommended to *not* use this attribute, and rather use the more\n+formal `#[link(...)]` attribute on `extern` blocks instead.\n+\n+# Static linking\n+\n+Static linking refers to the process of creating output that contain all\n+required libraries and so don't need libraries installed on every system where\n+you want to use your compiled project. Pure-Rust dependencies are statically\n+linked by default so you can use created binaries and libraries without\n+installing the Rust everywhere. By contrast, native libraries\n+(e.g. `libc` and `libm`) usually dynamically linked, but it is possible to\n+change this and statically link them as well.\n+\n+Linking is a very platform dependent topic \u2014 on some platforms, static linking\n+may not be possible at all! This section assumes some basic familiarity with\n+linking on your platform of choice.\n+\n+## Linux\n+\n+By default, all Rust programs on Linux will link to the system `libc` along with\n+a number of other libraries. Let's look at an example on a 64-bit Linux machine\n+with GCC and `glibc` (by far the most common `libc` on Linux):\n+\n+``` text\n+$ cat example.rs\n+fn main() {}\n+$ rustc example.rs\n+$ ldd example\n+        linux-vdso.so.1 =>  (0x00007ffd565fd000)\n+        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa81889c000)\n+        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa81867e000)\n+        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fa818475000)\n+        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fa81825f000)\n+        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa817e9a000)\n+        /lib64/ld-linux-x86-64.so.2 (0x00007fa818cf9000)\n+        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa817b93000)\n+```\n+\n+Dynamic linking on Linux can be undesirable if you wish to use new library\n+features on old systems or target systems which do not have the required\n+dependencies for your program to run.\n+\n+Static linking is supported via an alternative `libc`, `musl` - this must be\n+enabled at Rust compile-time with some prerequisites available. You can compile\n+your own version of Rust with `musl` enabled and install it into a custom\n+directory with the instructions below:\n+\n+```text\n+$ mkdir musldist\n+$ PREFIX=$(pwd)/musldist\n+$\n+$ # Build musl\n+$ wget http://www.musl-libc.org/releases/musl-1.1.10.tar.gz\n+[...]\n+$ tar xf musl-1.1.10.tar.gz\n+$ cd musl-1.1.10/\n+musl-1.1.10 $ ./configure --disable-shared --prefix=$PREFIX\n+[...]\n+musl-1.1.10 $ make\n+[...]\n+musl-1.1.10 $ make install\n+[...]\n+musl-1.1.10 $ cd ..\n+$ du -h musldist/lib/libc.a\n+2.2M    musldist/lib/libc.a\n+$\n+$ # Build libunwind.a\n+$ wget http://llvm.org/releases/3.6.1/llvm-3.6.1.src.tar.xz\n+$ tar xf llvm-3.6.1.src.tar.xz\n+$ cd llvm-3.6.1.src/projects/\n+llvm-3.6.1.src/projects $ svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk/ libcxxabi\n+llvm-3.6.1.src/projects $ svn co http://llvm.org/svn/llvm-project/libunwind/trunk/ libunwind\n+llvm-3.6.1.src/projects $ sed -i 's#^\\(include_directories\\).*$#\\0\\n\\1(../libcxxabi/include)#' libunwind/CMakeLists.txt\n+llvm-3.6.1.src/projects $ mkdir libunwind/build\n+llvm-3.6.1.src/projects $ cd libunwind/build\n+llvm-3.6.1.src/projects/libunwind/build $ cmake -DLLVM_PATH=../../.. -DLIBUNWIND_ENABLE_SHARED=0 ..\n+llvm-3.6.1.src/projects/libunwind/build $ make\n+llvm-3.6.1.src/projects/libunwind/build $ cp lib/libunwind.a $PREFIX/lib/\n+llvm-3.6.1.src/projects/libunwind/build $ cd cd ../../../../\n+$ du -h musldist/lib/libunwind.a\n+164K    musldist/lib/libunwind.a\n+$\n+$ # Build musl-enabled rust\n+$ git clone https://github.com/rust-lang/rust.git muslrust\n+$ cd muslrust\n+muslrust $ ./configure --target=x86_64-unknown-linux-musl --musl-root=$PREFIX --prefix=$PREFIX\n+muslrust $ make\n+muslrust $ make install\n+muslrust $ cd ..\n+$ du -h musldist/bin/rustc\n+12K     musldist/bin/rustc\n+```\n+\n+You now have a build of a `musl`-enabled Rust! Because we've installed it to a\n+custom prefix we need to make sure our system can the binaries and appropriate\n+libraries when we try and run it:\n+\n+```text\n+$ export PATH=$PREFIX/bin:$PATH\n+$ export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH\n+```\n+\n+Let's try it out!\n+\n+```text\n+$ echo 'fn main() { println!(\"hi!\"); panic!(\"failed\"); }' > example.rs\n+$ rustc --target=x86_64-unknown-linux-musl example.rs\n+$ ldd example\n+        not a dynamic executable\n+$ ./example\n+hi!\n+thread '<main>' panicked at 'failed', example.rs:1\n+```\n+\n+Success! This binary can be copied to almost any Linux machine with the same\n+machine architecture and run without issues.\n+\n+`cargo build` also permits the `--target` option so you should be able to build\n+your crates as normal. However, you may need to recompile your native libraries\n+against `musl` before they can be linked against."}, {"sha": "cdaef6cd9b5109c9e5a825df9ed55279a4aef3e5", "filename": "src/doc/trpl/link-args.md", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e490ba9a402a2178547971af6b339cb5ce1597f1/src%2Fdoc%2Ftrpl%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/e490ba9a402a2178547971af6b339cb5ce1597f1/src%2Fdoc%2Ftrpl%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flink-args.md?ref=e490ba9a402a2178547971af6b339cb5ce1597f1", "patch": "@@ -1,25 +0,0 @@\n-% Link args\n-\n-There is one other way to tell rustc how to customize linking, and that is via\n-the `link_args` attribute. This attribute is applied to `extern` blocks and\n-specifies raw flags which need to get passed to the linker when producing an\n-artifact. An example usage would be:\n-\n-``` no_run\n-#![feature(link_args)]\n-\n-#[link_args = \"-foo -bar -baz\"]\n-extern {}\n-# fn main() {}\n-```\n-\n-Note that this feature is currently hidden behind the `feature(link_args)` gate\n-because this is not a sanctioned way of performing linking. Right now rustc\n-shells out to the system linker, so it makes sense to provide extra command line\n-arguments, but this will not always be the case. In the future rustc may use\n-LLVM directly to link native libraries, in which case `link_args` will have no\n-meaning.\n-\n-It is highly recommended to *not* use this attribute, and rather use the more\n-formal `#[link(...)]` attribute on `extern` blocks instead.\n-"}]}