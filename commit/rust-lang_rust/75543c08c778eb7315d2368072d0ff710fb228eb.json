{"sha": "75543c08c778eb7315d2368072d0ff710fb228eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NTQzYzA4Yzc3OGViNzMxNWQyMzY4MDcyZDBmZjcxMGZiMjI4ZWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-16T23:59:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-31T23:42:22Z"}, "message": "simplify HR subtyping back to what we did before\n\nA lot of the refactors, however, seem helpful, so leave those in,\nparticularly since we may want to make this change in the future.", "tree": {"sha": "069ba2d7d04ca6b583286763527517657f534cfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/069ba2d7d04ca6b583286763527517657f534cfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75543c08c778eb7315d2368072d0ff710fb228eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75543c08c778eb7315d2368072d0ff710fb228eb", "html_url": "https://github.com/rust-lang/rust/commit/75543c08c778eb7315d2368072d0ff710fb228eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75543c08c778eb7315d2368072d0ff710fb228eb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b2db1cca591a14b9790ce3d11fba39696ae4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b2db1cca591a14b9790ce3d11fba39696ae4a7", "html_url": "https://github.com/rust-lang/rust/commit/52b2db1cca591a14b9790ce3d11fba39696ae4a7"}], "stats": {"total": 115, "additions": 15, "deletions": 100}, "files": [{"sha": "1ba722b6baee76e79594b9d21d47b412a83f254a", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -1647,6 +1647,5 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n-    E0525, // expected a closure that implements `..` but this closure only implements `..`\n-    E0526, // skolemization subtype\n+    E0525  // expected a closure that implements `..` but this closure only implements `..`\n }"}, {"sha": "2f67042ca1c25f8f0512db17ed3752691c6d8608", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -919,17 +919,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     \"\");\n                 err\n             }\n-            infer::SkolemizeSuccessor(span) => {\n-                let mut err =\n-                    struct_span_err!(self.tcx.sess, span, E0526,\n-                                     \"to satisfy higher-ranked bounds, \\\n-                                      a static lifetime is required\");\n-                self.tcx.note_and_explain_region(&mut err,\n-                    \"but the lifetime is only valid for \",\n-                    sub,\n-                    \"\");\n-                err\n-            }\n         }\n     }\n \n@@ -1817,11 +1806,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     \"...so that references are valid when the destructor \\\n                      runs\");\n             }\n-            infer::SkolemizeSuccessor(span) => {\n-                err.span_note(\n-                    span,\n-                    \"...so that higher-ranked bounds are satisfied\");\n-            }\n         }\n     }\n }"}, {"sha": "3459f48f5c432ecc58b4b9b97b1256f896f88a84", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -15,7 +15,6 @@ use super::{CombinedSnapshot,\n             InferCtxt,\n             LateBoundRegion,\n             HigherRankedType,\n-            SubregionOrigin,\n             SkolemizationMap};\n use super::combine::CombineFields;\n use super::region_inference::{TaintDirections};\n@@ -527,7 +526,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // be itself or other new variables.\n             let incoming_taints = self.tainted_regions(snapshot,\n                                                        skol,\n-                                                       TaintDirections::incoming());\n+                                                       TaintDirections::both());\n             for &tainted_region in &incoming_taints {\n                 // Each skolemized should only be relatable to itself\n                 // or new variables:\n@@ -568,71 +567,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         self.issue_32330_warnings(span, &warnings);\n \n-        for (_, &skol) in skol_map {\n-            // The outputs from a skolemized variable must all be\n-            // equatable with `'static`.\n-            let outgoing_taints = self.tainted_regions(snapshot,\n-                                                       skol,\n-                                                       TaintDirections::outgoing());\n-            for &tainted_region in &outgoing_taints {\n-                match tainted_region {\n-                    ty::ReVar(vid) if new_vars.contains(&vid) => {\n-                        // There is a path from a skolemized variable\n-                        // to some region variable that doesn't escape\n-                        // this snapshot:\n-                        //\n-                        //    [skol] -> [tainted_region]\n-                        //\n-                        // We can ignore this. The reasoning relies on\n-                        // the fact that the preivous loop\n-                        // completed. There are two possible cases\n-                        // here.\n-                        //\n-                        // - `tainted_region` eventually reaches a\n-                        //   skolemized variable, which *must* be `skol`\n-                        //   (because otherwise we would have already\n-                        //   returned `Err`). In that case,\n-                        //   `tainted_region` could be inferred to `skol`.\n-                        //\n-                        // - `tainted_region` never reaches a\n-                        //   skolemized variable. In that case, we can\n-                        //   safely choose `'static` as an upper bound\n-                        //   incoming edges. This is a conservative\n-                        //   choice -- the LUB might be one of the\n-                        //   incoming skolemized variables, which we\n-                        //   might know by ambient bounds. We can\n-                        //   consider a more clever choice of upper\n-                        //   bound later (modulo some theoretical\n-                        //   breakage).\n-                        //\n-                        // We used to force such `tainted_region` to be\n-                        // `'static`, but that leads to problems when\n-                        // combined with `plug_leaks`. If you have a case\n-                        // where `[skol] -> [tainted_region] -> [skol]`,\n-                        // then `plug_leaks` concludes it should replace\n-                        // `'static` with a late-bound region, which is\n-                        // clearly wrong. (Well, what actually happens is\n-                        // you get assertion failures because it WOULD\n-                        // have to replace 'static with a late-bound\n-                        // region.)\n-                    }\n-                    ty::ReSkolemized(..) => {\n-                        // the only skolemized region we find in the\n-                        // successors of X can be X; if there was another\n-                        // region Y, then X would have been in the preds\n-                        // of Y, and we would have aborted above\n-                        assert_eq!(skol, tainted_region);\n-                    }\n-                    _ => {\n-                        self.region_vars.make_subregion(\n-                            SubregionOrigin::SkolemizeSuccessor(span),\n-                            ty::ReStatic,\n-                            tainted_region);\n-                    }\n-                }\n-            }\n-        }\n-\n         Ok(())\n     }\n \n@@ -682,7 +616,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             skol_map\n             .iter()\n             .flat_map(|(&skol_br, &skol)| {\n-                self.tainted_regions(snapshot, skol, TaintDirections::incoming())\n+                self.tainted_regions(snapshot, skol, TaintDirections::both())\n                     .into_iter()\n                     .map(move |tainted_region| (tainted_region, skol_br))\n             })"}, {"sha": "a05660ffaaf831ad1074401b28cfe7f31ad3a409", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -340,11 +340,6 @@ pub enum SubregionOrigin<'tcx> {\n \n     // Region constraint arriving from destructor safety\n     SafeDestructor(Span),\n-\n-    // When doing a higher-ranked comparison, this region was a\n-    // successor from a skolemized region, which means that it must be\n-    // `'static` to be sound.\n-    SkolemizeSuccessor(Span),\n }\n \n /// Places that type/region parameters can appear.\n@@ -1798,7 +1793,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             AddrOf(a) => a,\n             AutoBorrow(a) => a,\n             SafeDestructor(a) => a,\n-            SkolemizeSuccessor(a) => a,\n         }\n     }\n }"}, {"sha": "871b0d4b1c023da205c3eb404c152ad87f7ddf57", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -422,7 +422,7 @@ pub fn expand_quote_expr<'cx>(cx: &'cx mut ExtCtxt,\n     base::MacEager::expr(expanded)\n }\n \n-pub fn expand_quote_item<'cx>(cx: &mut ExtCtxt,\n+pub fn expand_quote_item<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[TokenTree])\n                               -> Box<base::MacResult+'cx> {"}, {"sha": "09c23682cd73f79afb8f46a045c6ae42314eaf34", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -17,7 +17,7 @@ use syntax::parse::token;\n use syntax::parse::token::str_to_ident;\n use syntax::ptr::P;\n \n-pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n+pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[TokenTree])\n                               -> Box<base::MacResult+'cx> {\n     if !cx.ecfg.enable_concat_idents() {\n         feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,"}, {"sha": "95e469ebcfd72fbbe163237579aead8b3952bd86", "filename": "src/test/compile-fail/hr-subtype.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -52,6 +52,10 @@ macro_rules! check {\n             //[bound_inv_a_b_vs_bound_inv_a]~^^^ ERROR mismatched types\n             //[bound_a_b_ret_a_vs_bound_a_ret_a]~^^^^ ERROR mismatched types\n             //[free_inv_x_vs_free_inv_y]~^^^^^ ERROR mismatched types\n+            //[bound_a_b_vs_bound_a]~^^^^^^ ERROR mismatched types\n+            //[bound_co_a_b_vs_bound_co_a]~^^^^^^^ ERROR mismatched types\n+            //[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^ ERROR mismatched types\n+            //[bound_co_a_co_b_ret_contra_a]~^^^^^^^^^ ERROR mismatched types\n         }\n     }\n }\n@@ -87,6 +91,9 @@ check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n // - if we are covariant, then 'a and 'b can be set to the call-site\n //   intersection;\n // - if we are contravariant, then 'a can be inferred to 'static.\n+//\n+// FIXME(#32330) this is true, but we are not currently impl'ing this\n+// full semantics\n check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n                                 for<'a>    fn(&'a u32, &'a u32)) }\n check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n@@ -109,8 +116,4 @@ fn main() {\n //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n-//[bound_a_b_vs_bound_a]~^^^^^^ ERROR compilation successful\n-//[bound_co_a_b_vs_bound_co_a]~^^^^^^^ ERROR compilation successful\n-//[bound_contra_a_contra_b_ret_co_a]~^^^^^^^^ ERROR compilation successful\n-//[bound_co_a_co_b_ret_contra_a]~^^^^^^^^^ ERROR compilation successful\n }"}, {"sha": "b70ec59420db1f7cf0347ccd993194285521b1e7", "filename": "src/test/compile-fail/regions-close-over-type-parameter-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75543c08c778eb7315d2368072d0ff710fb228eb/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs?ref=75543c08c778eb7315d2368072d0ff710fb228eb", "patch": "@@ -19,7 +19,7 @@ trait SomeTrait { fn get(&self) -> isize; }\n fn make_object1<A:SomeTrait>(v: A) -> Box<SomeTrait+'static> {\n     box v as Box<SomeTrait+'static>\n         //~^ ERROR the parameter type `A` may not live long enough\n-        //~^^ ERROR the parameter type `A` may not live long enough\n+        //~| ERROR the parameter type `A` may not live long enough\n }\n \n fn make_object2<'a,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'a> {\n@@ -28,7 +28,8 @@ fn make_object2<'a,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'a> {\n \n fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'b> {\n     box v as Box<SomeTrait+'b>\n-        //~^ ERROR E0478\n+        //~^ ERROR the parameter type `A` may not live long enough\n+        //~| ERROR the parameter type `A` may not live long enough\n }\n \n fn main() { }"}]}