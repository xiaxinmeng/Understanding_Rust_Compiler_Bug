{"sha": "0615fddd80116d63fba7040bdd89ad59117037dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTVmZGRkODAxMTZkNjNmYmE3MDQwYmRkODlhZDU5MTE3MDM3ZGQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-13T19:27:32Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-13T19:27:32Z"}, "message": "Remove unnecessary enclosing modules for NumCast impls", "tree": {"sha": "fd1e7689224269109c368f544faee864a5f212d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd1e7689224269109c368f544faee864a5f212d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0615fddd80116d63fba7040bdd89ad59117037dd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0615fddd80116d63fba7040bdd89ad59117037dd", "html_url": "https://github.com/rust-lang/rust/commit/0615fddd80116d63fba7040bdd89ad59117037dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0615fddd80116d63fba7040bdd89ad59117037dd/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "html_url": "https://github.com/rust-lang/rust/commit/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "19a1e276d37540d90b9abd5735432dc112535c21", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0615fddd80116d63fba7040bdd89ad59117037dd/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0615fddd80116d63fba7040bdd89ad59117037dd/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=0615fddd80116d63fba7040bdd89ad59117037dd", "patch": "@@ -110,37 +110,29 @@ pub trait NumCast {\n \n macro_rules! impl_num_cast(\n     ($T:ty, $conv:ident) => (\n-        // FIXME #4375: This enclosing module is necessary because\n-        // of a bug with macros expanding into multiple items\n-        pub mod $conv {\n-            use num::NumCast;\n-\n-            #[cfg(notest)]\n-            impl NumCast for $T {\n-                #[doc = \"Cast `n` to a `$T`\"]\n-                #[inline(always)]\n-                fn from<N:NumCast>(n: N) -> $T {\n-                    // `$conv` could be generated using `concat_idents!`, but that\n-                    // macro seems to be broken at the moment\n-                    n.$conv()\n-                }\n-\n-                #[inline(always)] fn to_u8(&self)    -> u8    { *self as u8    }\n-                #[inline(always)] fn to_u16(&self)   -> u16   { *self as u16   }\n-                #[inline(always)] fn to_u32(&self)   -> u32   { *self as u32   }\n-                #[inline(always)] fn to_u64(&self)   -> u64   { *self as u64   }\n-                #[inline(always)] fn to_uint(&self)  -> uint  { *self as uint  }\n-\n-                #[inline(always)] fn to_i8(&self)    -> i8    { *self as i8    }\n-                #[inline(always)] fn to_i16(&self)   -> i16   { *self as i16   }\n-                #[inline(always)] fn to_i32(&self)   -> i32   { *self as i32   }\n-                #[inline(always)] fn to_i64(&self)   -> i64   { *self as i64   }\n-                #[inline(always)] fn to_int(&self)   -> int   { *self as int   }\n-\n-                #[inline(always)] fn to_f32(&self)   -> f32   { *self as f32   }\n-                #[inline(always)] fn to_f64(&self)   -> f64   { *self as f64   }\n-                #[inline(always)] fn to_float(&self) -> float { *self as float }\n+        impl NumCast for $T {\n+            #[inline(always)]\n+            fn from<N:NumCast>(n: N) -> $T {\n+                // `$conv` could be generated using `concat_idents!`, but that\n+                // macro seems to be broken at the moment\n+                n.$conv()\n             }\n+\n+            #[inline(always)] fn to_u8(&self)    -> u8    { *self as u8    }\n+            #[inline(always)] fn to_u16(&self)   -> u16   { *self as u16   }\n+            #[inline(always)] fn to_u32(&self)   -> u32   { *self as u32   }\n+            #[inline(always)] fn to_u64(&self)   -> u64   { *self as u64   }\n+            #[inline(always)] fn to_uint(&self)  -> uint  { *self as uint  }\n+\n+            #[inline(always)] fn to_i8(&self)    -> i8    { *self as i8    }\n+            #[inline(always)] fn to_i16(&self)   -> i16   { *self as i16   }\n+            #[inline(always)] fn to_i32(&self)   -> i32   { *self as i32   }\n+            #[inline(always)] fn to_i64(&self)   -> i64   { *self as i64   }\n+            #[inline(always)] fn to_int(&self)   -> int   { *self as int   }\n+\n+            #[inline(always)] fn to_f32(&self)   -> f32   { *self as f32   }\n+            #[inline(always)] fn to_f64(&self)   -> f64   { *self as f64   }\n+            #[inline(always)] fn to_float(&self) -> float { *self as float }\n         }\n     )\n )"}]}