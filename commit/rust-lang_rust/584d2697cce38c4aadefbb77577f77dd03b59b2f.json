{"sha": "584d2697cce38c4aadefbb77577f77dd03b59b2f", "node_id": "C_kwDOAAsO6NoAKDU4NGQyNjk3Y2NlMzhjNGFhZGVmYmI3NzU3N2Y3N2RkMDNiNTliMmY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-10T15:15:39Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-11T12:21:10Z"}, "message": "Add `toolchain` meta for tests", "tree": {"sha": "95ec962c8ffd8bc2571f92b42f8502348fd7314e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ec962c8ffd8bc2571f92b42f8502348fd7314e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/584d2697cce38c4aadefbb77577f77dd03b59b2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQ1ULYACgkQ4laYqTBY\nYXFfbhAAuIuse+S6yNRM+QOBLK7wYnhVlqXW1piCJ/oe+gAVDYL4yRYxEvXxF+Iw\nqZ+2+JYWFEAa79OTQkG2v9mIVlIL9mzzaAtZ8LMWHd9YiMKZV7xIRSCRgr9ATRtz\nIcnJ5zUklSNtdPnTL/wKXIip8aofXO5RdAGxaNY6i3O8Ki5DCxeccir0aQ29CpzA\nFVGQE0lq4j64jjolbOjott7VtCWfqPqrEI5xe/vf67DyHVlV8z+pPi0MQ2/Fz+Hv\nkb7krWu6ktg+UJOCDbafGcRLtZaUOYgOF0JWvPtYEz0oliHaMuEeZn8yLDR8EKRK\n0xo2fPIV6kIM9srXAGesKOeE5Qg2XiAuQe4d/+ZHFo9nkV7HglwRqwcr2LWskTIk\nKF/iu/gYWeJWOu3g4FzphxnyfiO0saNXNaC/oHrTZ3GWBNDyWqyDchkz3AwCFLbq\n9oZ+it90ND6bZoVNgZR2S9Zb9f2SY0NoPna/BH73P44iZDzXwJn1lt6EEDGRoii9\nFWTgcAn8Aw0rhK3Nevqgfed8QkeYtzkqX1EMmMe1whi6rDgqyywNpocy17FOMCpi\nZ/16g5J5G8SMrw7Zn2uFX6xBmzh/t8QsVPhciDrMTgiV4NzO10Ko7L14P2MXlLHj\n6/9OkVGbIsrkzJzCZ3H6DpjXEI6FYU7wLJzqSeHNMSyWKmz+AOc=\n=YUwW\n-----END PGP SIGNATURE-----", "payload": "tree 95ec962c8ffd8bc2571f92b42f8502348fd7314e\nparent 5d41affc775aea0ed264fdd9f438a23f6bcbe0af\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1681139739 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1681215670 +0900\n\nAdd `toolchain` meta for tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/584d2697cce38c4aadefbb77577f77dd03b59b2f", "html_url": "https://github.com/rust-lang/rust/commit/584d2697cce38c4aadefbb77577f77dd03b59b2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/584d2697cce38c4aadefbb77577f77dd03b59b2f/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "html_url": "https://github.com/rust-lang/rust/commit/5d41affc775aea0ed264fdd9f438a23f6bcbe0af"}], "stats": {"total": 112, "additions": 67, "deletions": 45}, "files": [{"sha": "f01f75b13874341dd378b708d3f4c30cb82ab52e", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=584d2697cce38c4aadefbb77577f77dd03b59b2f", "patch": "@@ -4,15 +4,16 @@ use std::{mem, str::FromStr, sync::Arc};\n use cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n use test_utils::{\n-    extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER, ESCAPED_CURSOR_MARKER,\n+    extract_range_or_offset, Fixture, FixtureWithProjectMeta, RangeOrOffset, CURSOR_MARKER,\n+    ESCAPED_CURSOR_MARKER,\n };\n use tt::token_id::{Leaf, Subtree, TokenTree};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n     input::{CrateName, CrateOrigin, LangCrateOrigin},\n     Change, CrateDisplayName, CrateGraph, CrateId, Dependency, Edition, Env, FileId, FilePosition,\n-    FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacros,\n+    FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacros, ReleaseChannel,\n     SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n@@ -102,7 +103,14 @@ impl ChangeFixture {\n         ra_fixture: &str,\n         mut proc_macro_defs: Vec<(String, ProcMacro)>,\n     ) -> ChangeFixture {\n-        let (mini_core, proc_macro_names, fixture) = Fixture::parse(ra_fixture);\n+        let FixtureWithProjectMeta { fixture, mini_core, proc_macro_names, toolchain } =\n+            FixtureWithProjectMeta::parse(ra_fixture);\n+        let toolchain = toolchain\n+            .map(|it| {\n+                ReleaseChannel::from_str(&it)\n+                    .unwrap_or_else(|| panic!(\"unknown release channel found: {it}\"))\n+            })\n+            .unwrap_or(ReleaseChannel::Stable);\n         let mut change = Change::new();\n \n         let mut files = Vec::new();\n@@ -166,7 +174,7 @@ impl ChangeFixture {\n                         .as_deref()\n                         .map(Arc::from)\n                         .ok_or_else(|| \"target_data_layout unset\".into()),\n-                    None,\n+                    Some(toolchain),\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -205,7 +213,7 @@ impl ChangeFixture {\n                 default_target_data_layout\n                     .map(|x| x.into())\n                     .ok_or_else(|| \"target_data_layout unset\".into()),\n-                None,\n+                Some(toolchain),\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {\n@@ -247,7 +255,7 @@ impl ChangeFixture {\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n                 target_layout.clone(),\n-                None,\n+                Some(toolchain),\n             );\n \n             for krate in all_crates {\n@@ -286,7 +294,7 @@ impl ChangeFixture {\n                 true,\n                 CrateOrigin::Local { repo: None, name: None },\n                 target_layout,\n-                None,\n+                Some(toolchain),\n             );\n             proc_macros.insert(proc_macros_crate, Ok(proc_macro));\n "}, {"sha": "b6b46c4508888c2094d6c5d7bb42cfa6d2700a56", "filename": "crates/ide/src/doc_links/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs?ref=584d2697cce38c4aadefbb77577f77dd03b59b2f", "patch": "@@ -116,7 +116,7 @@ fn external_docs_doc_url_std_crate() {\n //- /main.rs crate:std\n use self$0;\n \"#,\n-        expect![[r#\"https://doc.rust-lang.org/nightly/std/index.html\"#]],\n+        expect![\"https://doc.rust-lang.org/stable/std/index.html\"],\n     );\n }\n "}, {"sha": "73ab3d2e16fe267319a7ac152783846cc94bade1", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=584d2697cce38c4aadefbb77577f77dd03b59b2f", "patch": "@@ -4242,7 +4242,7 @@ fn foo() {\n /// [threads]: ../book/ch16-01-threads.html#using-move-closures-with-threads\n mod move_keyword {}\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             *move*\n \n             ```rust\n@@ -4251,11 +4251,11 @@ mod move_keyword {}\n \n             ---\n \n-            [closure](https://doc.rust-lang.org/nightly/book/ch13-01-closures.html)\n-            [closures](https://doc.rust-lang.org/nightly/book/ch13-01-closures.html)\n-            [threads](https://doc.rust-lang.org/nightly/book/ch16-01-threads.html#using-move-closures-with-threads)\n+            [closure](https://doc.rust-lang.org/stable/book/ch13-01-closures.html)\n+            [closures](https://doc.rust-lang.org/stable/book/ch13-01-closures.html)\n+            [threads](https://doc.rust-lang.org/stable/book/ch16-01-threads.html#using-move-closures-with-threads)\n             <https://doc.rust-lang.org/nightly/book/ch13-01-closures.html>\n-        \"##]],\n+        \"#]],\n     );\n }\n "}, {"sha": "df62dcd7ddc15c97fb775ff1669c96b7dbe35dec", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=584d2697cce38c4aadefbb77577f77dd03b59b2f", "patch": "@@ -13,7 +13,7 @@ use project_model::ProjectManifest;\n use rust_analyzer::{config::Config, lsp_ext, main_loop};\n use serde::Serialize;\n use serde_json::{json, to_string_pretty, Value};\n-use test_utils::Fixture;\n+use test_utils::FixtureWithProjectMeta;\n use vfs::AbsPathBuf;\n \n use crate::testdir::TestDir;\n@@ -84,10 +84,12 @@ impl<'a> Project<'a> {\n             profile::init_from(crate::PROFILE);\n         });\n \n-        let (mini_core, proc_macros, fixtures) = Fixture::parse(self.fixture);\n-        assert!(proc_macros.is_empty());\n+        let FixtureWithProjectMeta { fixture, mini_core, proc_macro_names, toolchain } =\n+            FixtureWithProjectMeta::parse(self.fixture);\n+        assert!(proc_macro_names.is_empty());\n         assert!(mini_core.is_none());\n-        for entry in fixtures {\n+        assert!(toolchain.is_none());\n+        for entry in fixture {\n             let path = tmp_dir.path().join(&entry.path['/'.len_utf8()..]);\n             fs::create_dir_all(path.parent().unwrap()).unwrap();\n             fs::write(path.as_path(), entry.text.as_bytes()).unwrap();"}, {"sha": "dffc7fccdab1801a3e050fe52a3603d156d69f82", "filename": "crates/test-utils/src/fixture.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Ftest-utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Ffixture.rs?ref=584d2697cce38c4aadefbb77577f77dd03b59b2f", "patch": "@@ -86,7 +86,14 @@ pub struct MiniCore {\n     valid_flags: Vec<String>,\n }\n \n-impl Fixture {\n+pub struct FixtureWithProjectMeta {\n+    pub fixture: Vec<Fixture>,\n+    pub mini_core: Option<MiniCore>,\n+    pub proc_macro_names: Vec<String>,\n+    pub toolchain: Option<String>,\n+}\n+\n+impl FixtureWithProjectMeta {\n     /// Parses text which looks like this:\n     ///\n     ///  ```not_rust\n@@ -96,37 +103,40 @@ impl Fixture {\n     ///  //- other meta\n     ///  ```\n     ///\n-    /// Fixture can also start with a proc_macros and minicore declaration(in that order):\n+    /// Fixture can also start with a proc_macros and minicore declaration (in that order):\n     ///\n     /// ```\n+    /// //- toolchain: nightly\n     /// //- proc_macros: identity\n     /// //- minicore: sized\n     /// ```\n     ///\n     /// That will include predefined proc macros and a subset of `libcore` into the fixture, see\n     /// `minicore.rs` for what's available.\n-    pub fn parse(ra_fixture: &str) -> (Option<MiniCore>, Vec<String>, Vec<Fixture>) {\n+    pub fn parse(ra_fixture: &str) -> Self {\n         let fixture = trim_indent(ra_fixture);\n         let mut fixture = fixture.as_str();\n+        let mut toolchain = None;\n         let mut mini_core = None;\n         let mut res: Vec<Fixture> = Vec::new();\n-        let mut test_proc_macros = vec![];\n-\n-        if fixture.starts_with(\"//- proc_macros:\") {\n-            let first_line = fixture.split_inclusive('\\n').next().unwrap();\n-            test_proc_macros = first_line\n-                .strip_prefix(\"//- proc_macros:\")\n-                .unwrap()\n-                .split(',')\n-                .map(|it| it.trim().to_string())\n-                .collect();\n-            fixture = &fixture[first_line.len()..];\n+        let mut proc_macro_names = vec![];\n+\n+        if let Some(meta) = fixture.strip_prefix(\"//- toolchain:\") {\n+            let (meta, remain) = meta.split_once('\\n').unwrap();\n+            toolchain = Some(meta.trim().to_string());\n+            fixture = remain;\n         }\n \n-        if fixture.starts_with(\"//- minicore:\") {\n-            let first_line = fixture.split_inclusive('\\n').next().unwrap();\n-            mini_core = Some(MiniCore::parse(first_line));\n-            fixture = &fixture[first_line.len()..];\n+        if let Some(meta) = fixture.strip_prefix(\"//- proc_macros:\") {\n+            let (meta, remain) = meta.split_once('\\n').unwrap();\n+            proc_macro_names = meta.split(',').map(|it| it.trim().to_string()).collect();\n+            fixture = remain;\n+        }\n+\n+        if let Some(meta) = fixture.strip_prefix(\"//- minicore:\") {\n+            let (meta, remain) = meta.split_once('\\n').unwrap();\n+            mini_core = Some(MiniCore::parse(meta));\n+            fixture = remain;\n         }\n \n         let default = if fixture.contains(\"//-\") { None } else { Some(\"//- /main.rs\") };\n@@ -142,7 +152,7 @@ impl Fixture {\n             }\n \n             if line.starts_with(\"//-\") {\n-                let meta = Fixture::parse_meta_line(line);\n+                let meta = Self::parse_meta_line(line);\n                 res.push(meta);\n             } else {\n                 if line.starts_with(\"// \")\n@@ -160,7 +170,7 @@ impl Fixture {\n             }\n         }\n \n-        (mini_core, test_proc_macros, res)\n+        Self { fixture: res, mini_core, proc_macro_names, toolchain }\n     }\n \n     //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n@@ -257,8 +267,7 @@ impl MiniCore {\n     fn parse(line: &str) -> MiniCore {\n         let mut res = MiniCore { activated_flags: Vec::new(), valid_flags: Vec::new() };\n \n-        let line = line.strip_prefix(\"//- minicore:\").unwrap().trim();\n-        for entry in line.split(\", \") {\n+        for entry in line.trim().split(\", \") {\n             if res.has_flag(entry) {\n                 panic!(\"duplicate minicore flag: {entry:?}\");\n             }\n@@ -372,7 +381,7 @@ impl MiniCore {\n #[test]\n #[should_panic]\n fn parse_fixture_checks_further_indented_metadata() {\n-    Fixture::parse(\n+    FixtureWithProjectMeta::parse(\n         r\"\n         //- /lib.rs\n           mod bar;\n@@ -386,15 +395,18 @@ fn parse_fixture_checks_further_indented_metadata() {\n \n #[test]\n fn parse_fixture_gets_full_meta() {\n-    let (mini_core, proc_macros, parsed) = Fixture::parse(\n-        r#\"\n+    let FixtureWithProjectMeta { fixture: parsed, mini_core, proc_macro_names, toolchain } =\n+        FixtureWithProjectMeta::parse(\n+            r#\"\n+//- toolchain: nightly\n //- proc_macros: identity\n //- minicore: coerce_unsized\n //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo\n mod m;\n \"#,\n-    );\n-    assert_eq!(proc_macros, vec![\"identity\".to_string()]);\n+        );\n+    assert_eq!(toolchain, Some(\"nightly\".to_string()));\n+    assert_eq!(proc_macro_names, vec![\"identity\".to_string()]);\n     assert_eq!(mini_core.unwrap().activated_flags, vec![\"coerce_unsized\".to_string()]);\n     assert_eq!(1, parsed.len());\n "}, {"sha": "5abadaad6295e2d20fd32483a1baf854a69f123a", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d2697cce38c4aadefbb77577f77dd03b59b2f/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=584d2697cce38c4aadefbb77577f77dd03b59b2f", "patch": "@@ -27,7 +27,7 @@ pub use rustc_hash::FxHashMap;\n \n pub use crate::{\n     assert_linear::AssertLinear,\n-    fixture::{Fixture, MiniCore},\n+    fixture::{Fixture, FixtureWithProjectMeta, MiniCore},\n };\n \n pub const CURSOR_MARKER: &str = \"$0\";"}]}