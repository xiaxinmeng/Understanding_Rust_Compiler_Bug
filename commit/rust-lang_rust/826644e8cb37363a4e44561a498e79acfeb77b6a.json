{"sha": "826644e8cb37363a4e44561a498e79acfeb77b6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNjY0NGU4Y2IzNzM2M2E0ZTQ0NTYxYTQ5OGU3OWFjZmViNzdiNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-03T02:21:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-03T02:21:39Z"}, "message": "auto merge of #5114 : osaut/rust/incoming, r=brson\n\nSeveral typos corrected in the comments of  src/libcore/iter.rs and 2013 added to the copyright header (as requested on CONTRIBUTING.md)", "tree": {"sha": "3d43af236c92df1ea470f183ffd55ed7e7084983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d43af236c92df1ea470f183ffd55ed7e7084983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/826644e8cb37363a4e44561a498e79acfeb77b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/826644e8cb37363a4e44561a498e79acfeb77b6a", "html_url": "https://github.com/rust-lang/rust/commit/826644e8cb37363a4e44561a498e79acfeb77b6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/826644e8cb37363a4e44561a498e79acfeb77b6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14b4899253150b47ce707c6c2ce845b3afcae54", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14b4899253150b47ce707c6c2ce845b3afcae54", "html_url": "https://github.com/rust-lang/rust/commit/a14b4899253150b47ce707c6c2ce845b3afcae54"}, {"sha": "88f8868158c71b4bf2a563f2f77152c8696d2c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f8868158c71b4bf2a563f2f77152c8696d2c87", "html_url": "https://github.com/rust-lang/rust/commit/88f8868158c71b4bf2a563f2f77152c8696d2c87"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "e90bbc2e6f769d036d53a9fcf55c59cc302496bf", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/826644e8cb37363a4e44561a498e79acfeb77b6a/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826644e8cb37363a4e44561a498e79acfeb77b6a/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=826644e8cb37363a4e44561a498e79acfeb77b6a", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -69,7 +69,7 @@ pub trait CopyableNonstrictIter<A:Copy> {\n     pure fn each_val(&const self, f: &fn(A) -> bool);\n }\n \n-// A trait for sequences that can be by imperatively pushing elements\n+// A trait for sequences that can be built by imperatively pushing elements\n // onto them.\n pub trait Buildable<A> {\n     /**\n@@ -198,7 +198,7 @@ pub pure fn position<A,IA:BaseIter<A>>(self: &IA, f: fn(&A) -> bool)\n }\n \n // note: 'rposition' would only make sense to provide with a bidirectional\n-// iter interface, such as would provide \"reach\" in addition to \"each\". as is,\n+// iter interface, such as would provide \"reach\" in addition to \"each\". As is,\n // it would have to be implemented with foldr, which is too inefficient.\n \n #[inline(always)]\n@@ -269,13 +269,13 @@ pub pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(A)))\n \n /**\n  * Builds a sequence by calling a provided function with an argument\n- * function that pushes an element to the back of a sequence.\n+ * function that pushes an element to the back of the sequence.\n  * This version takes an initial size for the sequence.\n  *\n  * # Arguments\n  *\n  * * size - An option, maybe containing initial size of the sequence\n- *          to reserve\n+ *          to reserve.\n  * * builder - A function that will construct the sequence. It receives\n  *             as an argument a function that will push an element\n  *             onto the sequence being constructed.\n@@ -290,7 +290,7 @@ pub pure fn build_sized_opt<A,B: Buildable<A>>(\n \n // Functions that combine iteration and building\n \n-/// Apply a function to each element of an iterable and return the results\n+/// Applies a function to each element of an iterable and returns the results.\n #[inline(always)]\n pub fn map<T,IT: BaseIter<T>,U,BU: Buildable<U>>(v: &IT, f: fn(&T) -> U)\n     -> BU {\n@@ -302,7 +302,7 @@ pub fn map<T,IT: BaseIter<T>,U,BU: Buildable<U>>(v: &IT, f: fn(&T) -> U)\n }\n \n /**\n- * Creates and initializes a generic sequence from a function\n+ * Creates and initializes a generic sequence from a function.\n  *\n  * Creates a generic sequence of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n@@ -317,7 +317,7 @@ pub pure fn from_fn<T,BT: Buildable<T>>(n_elts: uint,\n }\n \n /**\n- * Creates and initializes a generic sequence with some element\n+ * Creates and initializes a generic sequence with some elements.\n  *\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value `t`.\n@@ -331,7 +331,7 @@ pub pure fn from_elem<T:Copy,BT:Buildable<T>>(n_elts: uint,\n     }\n }\n \n-/// Appending two generic sequences\n+/// Appends two generic sequences.\n #[inline(always)]\n pub pure fn append<T:Copy,IT:BaseIter<T>,BT:Buildable<T>>(\n     lhs: &IT, rhs: &IT) -> BT {"}]}