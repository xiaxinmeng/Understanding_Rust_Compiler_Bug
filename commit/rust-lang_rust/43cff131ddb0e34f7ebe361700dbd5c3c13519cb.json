{"sha": "43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2ZmMTMxZGRiMGUzNGY3ZWJlMzYxNzAwZGJkNWMzYzEzNTE5Y2I=", "commit": {"author": {"name": "P.Y. Laligand", "email": "pylaligand@google.com", "date": "2017-09-15T19:38:08Z"}, "committer": {"name": "James Tucker", "email": "jftucker@gmail.com", "date": "2017-09-24T20:53:10Z"}, "message": "The Magenta kernel is now called Zircon.", "tree": {"sha": "994554d421255e6b4cce31ec78ecdbdd0fdc5737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/994554d421255e6b4cce31ec78ecdbdd0fdc5737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "html_url": "https://github.com/rust-lang/rust/commit/43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/comments", "author": {"login": "pylaligand", "id": 1115379, "node_id": "MDQ6VXNlcjExMTUzNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1115379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylaligand", "html_url": "https://github.com/pylaligand", "followers_url": "https://api.github.com/users/pylaligand/followers", "following_url": "https://api.github.com/users/pylaligand/following{/other_user}", "gists_url": "https://api.github.com/users/pylaligand/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylaligand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylaligand/subscriptions", "organizations_url": "https://api.github.com/users/pylaligand/orgs", "repos_url": "https://api.github.com/users/pylaligand/repos", "events_url": "https://api.github.com/users/pylaligand/events{/privacy}", "received_events_url": "https://api.github.com/users/pylaligand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raggi", "id": 348, "node_id": "MDQ6VXNlcjM0OA==", "avatar_url": "https://avatars.githubusercontent.com/u/348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raggi", "html_url": "https://github.com/raggi", "followers_url": "https://api.github.com/users/raggi/followers", "following_url": "https://api.github.com/users/raggi/following{/other_user}", "gists_url": "https://api.github.com/users/raggi/gists{/gist_id}", "starred_url": "https://api.github.com/users/raggi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raggi/subscriptions", "organizations_url": "https://api.github.com/users/raggi/orgs", "repos_url": "https://api.github.com/users/raggi/repos", "events_url": "https://api.github.com/users/raggi/events{/privacy}", "received_events_url": "https://api.github.com/users/raggi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "html_url": "https://github.com/rust-lang/rust/commit/1ed7d41d8849d930f0622eaf54049f66fff0ca2a"}], "stats": {"total": 293, "additions": 148, "deletions": 145}, "files": [{"sha": "86430b48127ba35599479c8848af4b8d507a0825", "filename": "src/ci/docker/dist-fuchsia/build-toolchain.sh", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh?ref=43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "patch": "@@ -16,7 +16,7 @@ source shared.sh\n \n # Download sources\n SRCS=(\n-  \"https://fuchsia.googlesource.com/magenta magenta d17073dc8de344ead3b65e8cc6a12280dec38c84\"\n+  \"https://fuchsia.googlesource.com/zircon zircon d17073dc8de344ead3b65e8cc6a12280dec38c84\"\n   \"https://llvm.googlesource.com/llvm llvm 3f58a16d8eec385e2b3ebdfbb84ff9d3bf27e025\"\n   \"https://llvm.googlesource.com/clang llvm/tools/clang 727ea63e6e82677f6e10e05e08bc7d6bdbae3111\"\n   \"https://llvm.googlesource.com/lld llvm/tools/lld a31286c1366e5e89b8872803fded13805a1a084b\"\n@@ -51,7 +51,7 @@ cd llvm\n mkdir build\n cd build\n hide_output cmake -GNinja \\\n-  -DFUCHSIA_SYSROOT=${PWD}/../../magenta/third_party/ulib/musl \\\n+  -DFUCHSIA_SYSROOT=${PWD}/../../zircon/third_party/ulib/musl \\\n   -DLLVM_ENABLE_LTO=OFF \\\n   -DCLANG_BOOTSTRAP_PASSTHROUGH=LLVM_ENABLE_LTO \\\n   -C ../tools/clang/cmake/caches/Fuchsia.cmake \\\n@@ -62,21 +62,21 @@ cd ../..\n \n # Build sysroot\n rm -rf llvm/runtimes/compiler-rt\n-./magenta/scripts/download-toolchain\n+./zircon/scripts/download-toolchain\n \n build_sysroot() {\n   local arch=\"$1\"\n \n   case \"${arch}\" in\n-    x86_64) tgt=\"magenta-pc-x86-64\" ;;\n-    aarch64) tgt=\"magenta-qemu-arm64\" ;;\n+    x86_64) tgt=\"zircon-pc-x86-64\" ;;\n+    aarch64) tgt=\"zircon-qemu-arm64\" ;;\n   esac\n \n-  hide_output make -C magenta -j$(getconf _NPROCESSORS_ONLN) $tgt\n+  hide_output make -C zircon -j$(getconf _NPROCESSORS_ONLN) $tgt\n   dst=/usr/local/${arch}-unknown-fuchsia\n   mkdir -p $dst\n-  cp -r magenta/build-${tgt}/sysroot/include $dst/\n-  cp -r magenta/build-${tgt}/sysroot/lib $dst/\n+  cp -r zircon/build-${tgt}/sysroot/include $dst/\n+  cp -r zircon/build-${tgt}/sysroot/lib $dst/\n \n   cd llvm\n   mkdir build-runtimes-${arch}\n@@ -112,7 +112,7 @@ build_sysroot() {\n build_sysroot \"x86_64\"\n build_sysroot \"aarch64\"\n \n-rm -rf magenta llvm\n+rm -rf zircon llvm\n \n for arch in x86_64 aarch64; do\n   for tool in clang clang++; do"}, {"sha": "b8061665aa16464c2acd550a2cc3313dc32d4470", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "patch": "@@ -68,8 +68,8 @@ fn main() {\n         if cfg!(feature = \"backtrace\") {\n             println!(\"cargo:rustc-link-lib=backtrace\");\n         }\n-        println!(\"cargo:rustc-link-lib=magenta\");\n-        println!(\"cargo:rustc-link-lib=mxio\");\n+        println!(\"cargo:rustc-link-lib=zircon\");\n+        println!(\"cargo:rustc-link-lib=fdio\");\n         println!(\"cargo:rustc-link-lib=launchpad\"); // for std::process\n     }\n }"}, {"sha": "2a331069bc2c29e3378901a664ee3d80c3892467", "filename": "src/libstd/sys/unix/process/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "patch": "@@ -19,4 +19,4 @@ mod process_inner;\n #[path = \"process_fuchsia.rs\"]\n mod process_inner;\n #[cfg(target_os = \"fuchsia\")]\n-mod magenta;\n+mod zircon;"}, {"sha": "1a7f544f8e95b7da2e2a8acdb9b9fcff9a6919c3", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "patch": "@@ -13,7 +13,7 @@ use libc;\n use mem;\n use ptr;\n \n-use sys::process::magenta::{Handle, mx_handle_t};\n+use sys::process::zircon::{Handle, zx_handle_t};\n use sys::process::process_common::*;\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -51,10 +51,10 @@ impl Command {\n     }\n \n     unsafe fn do_exec(&mut self, stdio: ChildPipes)\n-                      -> io::Result<mx_handle_t> {\n-        use sys::process::magenta::*;\n+                      -> io::Result<zx_handle_t> {\n+        use sys::process::zircon::*;\n \n-        let job_handle = mx_job_default();\n+        let job_handle = zx_job_default();\n         let envp = match *self.get_envp() {\n             Some(ref envp) => envp.as_ptr(),\n             None => ptr::null(),\n@@ -67,39 +67,39 @@ impl Command {\n         }\n \n         // Duplicate the job handle\n-        let mut job_copy: mx_handle_t = MX_HANDLE_INVALID;\n-        mx_cvt(mx_handle_duplicate(job_handle, MX_RIGHT_SAME_RIGHTS, &mut job_copy))?;\n+        let mut job_copy: zx_handle_t = zx_HANDLE_INVALID;\n+        zx_cvt(zx_handle_duplicate(job_handle, zx_RIGHT_SAME_RIGHTS, &mut job_copy))?;\n         // Create a launchpad\n         let mut launchpad: *mut launchpad_t = ptr::null_mut();\n-        mx_cvt(launchpad_create(job_copy, self.get_argv()[0], &mut launchpad))?;\n+        zx_cvt(launchpad_create(job_copy, self.get_argv()[0], &mut launchpad))?;\n         let launchpad_destructor = LaunchpadDestructor(launchpad);\n \n         // Set the process argv\n-        mx_cvt(launchpad_set_args(launchpad, self.get_argv().len() as i32 - 1,\n+        zx_cvt(launchpad_set_args(launchpad, self.get_argv().len() as i32 - 1,\n                                   self.get_argv().as_ptr()))?;\n         // Setup the environment vars\n-        mx_cvt(launchpad_set_environ(launchpad, envp))?;\n-        mx_cvt(launchpad_add_vdso_vmo(launchpad))?;\n+        zx_cvt(launchpad_set_environ(launchpad, envp))?;\n+        zx_cvt(launchpad_add_vdso_vmo(launchpad))?;\n         // Load the executable\n-        mx_cvt(launchpad_elf_load(launchpad, launchpad_vmo_from_file(self.get_argv()[0])))?;\n-        mx_cvt(launchpad_load_vdso(launchpad, MX_HANDLE_INVALID))?;\n-        mx_cvt(launchpad_clone(launchpad, LP_CLONE_MXIO_ROOT | LP_CLONE_MXIO_CWD))?;\n+        zx_cvt(launchpad_elf_load(launchpad, launchpad_vmo_from_file(self.get_argv()[0])))?;\n+        zx_cvt(launchpad_load_vdso(launchpad, zx_HANDLE_INVALID))?;\n+        zx_cvt(launchpad_clone(launchpad, LP_CLONE_FDIO_ROOT | LP_CLONE_FDIO_CWD))?;\n \n         // Clone stdin, stdout, and stderr\n         if let Some(fd) = stdio.stdin.fd() {\n-            mx_cvt(launchpad_transfer_fd(launchpad, fd, 0))?;\n+            zx_cvt(launchpad_transfer_fd(launchpad, fd, 0))?;\n         } else {\n-            mx_cvt(launchpad_clone_fd(launchpad, 0, 0))?;\n+            zx_cvt(launchpad_clone_fd(launchpad, 0, 0))?;\n         }\n         if let Some(fd) = stdio.stdout.fd() {\n-            mx_cvt(launchpad_transfer_fd(launchpad, fd, 1))?;\n+            zx_cvt(launchpad_transfer_fd(launchpad, fd, 1))?;\n         } else {\n-            mx_cvt(launchpad_clone_fd(launchpad, 1, 1))?;\n+            zx_cvt(launchpad_clone_fd(launchpad, 1, 1))?;\n         }\n         if let Some(fd) = stdio.stderr.fd() {\n-            mx_cvt(launchpad_transfer_fd(launchpad, fd, 2))?;\n+            zx_cvt(launchpad_transfer_fd(launchpad, fd, 2))?;\n         } else {\n-            mx_cvt(launchpad_clone_fd(launchpad, 2, 2))?;\n+            zx_cvt(launchpad_clone_fd(launchpad, 2, 2))?;\n         }\n \n         // We don't want FileDesc::drop to be called on any stdio. It would close their fds. The\n@@ -113,9 +113,9 @@ impl Command {\n         // `launchpad_go` destroys the launchpad, so we must not\n         mem::forget(launchpad_destructor);\n \n-        let mut process_handle: mx_handle_t = 0;\n+        let mut process_handle: zx_handle_t = 0;\n         let mut err_msg: *const libc::c_char = ptr::null();\n-        mx_cvt(launchpad_go(launchpad, &mut process_handle, &mut err_msg))?;\n+        zx_cvt(launchpad_go(launchpad, &mut process_handle, &mut err_msg))?;\n         // FIXME: See if we want to do something with that err_msg\n \n         Ok(process_handle)\n@@ -136,27 +136,27 @@ impl Process {\n     }\n \n     pub fn kill(&mut self) -> io::Result<()> {\n-        use sys::process::magenta::*;\n+        use sys::process::zircon::*;\n \n-        unsafe { mx_cvt(mx_task_kill(self.handle.raw()))?; }\n+        unsafe { zx_cvt(zx_task_kill(self.handle.raw()))?; }\n \n         Ok(())\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n         use default::Default;\n-        use sys::process::magenta::*;\n+        use sys::process::zircon::*;\n \n-        let mut proc_info: mx_info_process_t = Default::default();\n-        let mut actual: mx_size_t = 0;\n-        let mut avail: mx_size_t = 0;\n+        let mut proc_info: zx_info_process_t = Default::default();\n+        let mut actual: zx_size_t = 0;\n+        let mut avail: zx_size_t = 0;\n \n         unsafe {\n-            mx_cvt(mx_object_wait_one(self.handle.raw(), MX_TASK_TERMINATED,\n-                                      MX_TIME_INFINITE, ptr::null_mut()))?;\n-            mx_cvt(mx_object_get_info(self.handle.raw(), MX_INFO_PROCESS,\n+            zx_cvt(zx_object_wait_one(self.handle.raw(), zx_TASK_TERMINATED,\n+                                      zx_TIME_INFINITE, ptr::null_mut()))?;\n+            zx_cvt(zx_object_get_info(self.handle.raw(), zx_INFO_PROCESS,\n                                       &mut proc_info as *mut _ as *mut libc::c_void,\n-                                      mem::size_of::<mx_info_process_t>(), &mut actual,\n+                                      mem::size_of::<zx_info_process_t>(), &mut actual,\n                                       &mut avail))?;\n         }\n         if actual != 1 {\n@@ -168,14 +168,14 @@ impl Process {\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         use default::Default;\n-        use sys::process::magenta::*;\n+        use sys::process::zircon::*;\n \n-        let mut proc_info: mx_info_process_t = Default::default();\n-        let mut actual: mx_size_t = 0;\n-        let mut avail: mx_size_t = 0;\n+        let mut proc_info: zx_info_process_t = Default::default();\n+        let mut actual: zx_size_t = 0;\n+        let mut avail: zx_size_t = 0;\n \n         unsafe {\n-            let status = mx_object_wait_one(self.handle.raw(), MX_TASK_TERMINATED,\n+            let status = zx_object_wait_one(self.handle.raw(), zx_TASK_TERMINATED,\n                                             0, ptr::null_mut());\n             match status {\n                 0 => { }, // Success\n@@ -184,9 +184,9 @@ impl Process {\n                 },\n                 _ => { panic!(\"Failed to wait on process handle: {}\", status); },\n             }\n-            mx_cvt(mx_object_get_info(self.handle.raw(), MX_INFO_PROCESS,\n+            zx_cvt(zx_object_get_info(self.handle.raw(), zx_INFO_PROCESS,\n                                       &mut proc_info as *mut _ as *mut libc::c_void,\n-                                      mem::size_of::<mx_info_process_t>(), &mut actual,\n+                                      mem::size_of::<zx_info_process_t>(), &mut actual,\n                                       &mut avail))?;\n         }\n         if actual != 1 {"}, {"sha": "4dbcdb576633b42c2455e51bd49c1683644f5eb8", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "renamed", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "patch": "@@ -17,31 +17,31 @@ use u64;\n \n use libc::{c_int, c_void};\n \n-pub type mx_handle_t = i32;\n-pub type mx_vaddr_t = usize;\n-pub type mx_rights_t = u32;\n-pub type mx_status_t = i32;\n+pub type zx_handle_t = i32;\n+pub type zx_vaddr_t = usize;\n+pub type zx_rights_t = u32;\n+pub type zx_status_t = i32;\n \n-pub type mx_size_t = usize;\n+pub type zx_size_t = usize;\n \n-pub const MX_HANDLE_INVALID: mx_handle_t = 0;\n+pub const zx_HANDLE_INVALID: zx_handle_t = 0;\n \n-pub type mx_time_t = u64;\n-pub const MX_TIME_INFINITE : mx_time_t = u64::MAX;\n+pub type zx_time_t = u64;\n+pub const zx_TIME_INFINITE : zx_time_t = u64::MAX;\n \n-pub type mx_signals_t = u32;\n+pub type zx_signals_t = u32;\n \n-pub const MX_OBJECT_SIGNAL_3         : mx_signals_t = 1 << 3;\n+pub const zx_OBJECT_SIGNAL_3         : zx_signals_t = 1 << 3;\n \n-pub const MX_TASK_TERMINATED        : mx_signals_t = MX_OBJECT_SIGNAL_3;\n+pub const zx_TASK_TERMINATED        : zx_signals_t = zx_OBJECT_SIGNAL_3;\n \n-pub const MX_RIGHT_SAME_RIGHTS  : mx_rights_t = 1 << 31;\n+pub const zx_RIGHT_SAME_RIGHTS  : zx_rights_t = 1 << 31;\n \n-pub type mx_object_info_topic_t = u32;\n+pub type zx_object_info_topic_t = u32;\n \n-pub const MX_INFO_PROCESS         : mx_object_info_topic_t = 3;\n+pub const zx_INFO_PROCESS         : zx_object_info_topic_t = 3;\n \n-pub fn mx_cvt<T>(t: T) -> io::Result<T> where T: TryInto<mx_status_t>+Copy {\n+pub fn zx_cvt<T>(t: T) -> io::Result<T> where T: TryInto<zx_status_t>+Copy {\n     if let Ok(status) = TryInto::try_into(t) {\n         if status < 0 {\n             Err(io::Error::from_raw_os_error(status))\n@@ -53,33 +53,33 @@ pub fn mx_cvt<T>(t: T) -> io::Result<T> where T: TryInto<mx_status_t>+Copy {\n     }\n }\n \n-// Safe wrapper around mx_handle_t\n+// Safe wrapper around zx_handle_t\n pub struct Handle {\n-    raw: mx_handle_t,\n+    raw: zx_handle_t,\n }\n \n impl Handle {\n-    pub fn new(raw: mx_handle_t) -> Handle {\n+    pub fn new(raw: zx_handle_t) -> Handle {\n         Handle {\n             raw,\n         }\n     }\n \n-    pub fn raw(&self) -> mx_handle_t {\n+    pub fn raw(&self) -> zx_handle_t {\n         self.raw\n     }\n }\n \n impl Drop for Handle {\n     fn drop(&mut self) {\n-        unsafe { mx_cvt(mx_handle_close(self.raw)).expect(\"Failed to close mx_handle_t\"); }\n+        unsafe { zx_cvt(zx_handle_close(self.raw)).expect(\"Failed to close zx_handle_t\"); }\n     }\n }\n \n-// Common MX_INFO header\n+// Common zx_INFO header\n #[derive(Default)]\n #[repr(C)]\n-pub struct mx_info_header_t {\n+pub struct zx_info_header_t {\n     pub topic: u32,              // identifies the info struct\n     pub avail_topic_size: u16,   // \u201cnative\u201d size of the struct\n     pub topic_size: u16,         // size of the returned struct (<=topic_size)\n@@ -89,34 +89,34 @@ pub struct mx_info_header_t {\n \n #[derive(Default)]\n #[repr(C)]\n-pub struct mx_record_process_t {\n+pub struct zx_record_process_t {\n     pub return_code: c_int,\n }\n \n-// Returned for topic MX_INFO_PROCESS\n+// Returned for topic zx_INFO_PROCESS\n #[derive(Default)]\n #[repr(C)]\n-pub struct mx_info_process_t {\n-    pub hdr: mx_info_header_t,\n-    pub rec: mx_record_process_t,\n+pub struct zx_info_process_t {\n+    pub hdr: zx_info_header_t,\n+    pub rec: zx_record_process_t,\n }\n \n extern {\n-    pub fn mx_job_default() -> mx_handle_t;\n+    pub fn zx_job_default() -> zx_handle_t;\n \n-    pub fn mx_task_kill(handle: mx_handle_t) -> mx_status_t;\n+    pub fn zx_task_kill(handle: zx_handle_t) -> zx_status_t;\n \n-    pub fn mx_handle_close(handle: mx_handle_t) -> mx_status_t;\n+    pub fn zx_handle_close(handle: zx_handle_t) -> zx_status_t;\n \n-    pub fn mx_handle_duplicate(handle: mx_handle_t, rights: mx_rights_t,\n-                               out: *const mx_handle_t) -> mx_handle_t;\n+    pub fn zx_handle_duplicate(handle: zx_handle_t, rights: zx_rights_t,\n+                               out: *const zx_handle_t) -> zx_handle_t;\n \n-    pub fn mx_object_wait_one(handle: mx_handle_t, signals: mx_signals_t, timeout: mx_time_t,\n-                              pending: *mut mx_signals_t) -> mx_status_t;\n+    pub fn zx_object_wait_one(handle: zx_handle_t, signals: zx_signals_t, timeout: zx_time_t,\n+                              pending: *mut zx_signals_t) -> zx_status_t;\n \n-    pub fn mx_object_get_info(handle: mx_handle_t, topic: u32, buffer: *mut c_void,\n-                              buffer_size: mx_size_t, actual_size: *mut mx_size_t,\n-                              avail: *mut mx_size_t) -> mx_status_t;\n+    pub fn zx_object_get_info(handle: zx_handle_t, topic: u32, buffer: *mut c_void,\n+                              buffer_size: zx_size_t, actual_size: *mut zx_size_t,\n+                              avail: *mut zx_size_t) -> zx_status_t;\n }\n \n // From `enum special_handles` in system/ulib/launchpad/launchpad.c\n@@ -133,117 +133,117 @@ pub struct launchpad_t {\n     env: *const c_char,\n     env_len: usize,\n \n-    handles: *mut mx_handle_t,\n+    handles: *mut zx_handle_t,\n     handles_info: *mut u32,\n     handle_count: usize,\n     handle_alloc: usize,\n \n-    entry: mx_vaddr_t,\n-    base: mx_vaddr_t,\n-    vdso_base: mx_vaddr_t,\n+    entry: zx_vaddr_t,\n+    base: zx_vaddr_t,\n+    vdso_base: zx_vaddr_t,\n \n     stack_size: usize,\n \n-    special_handles: [mx_handle_t; HND_SPECIAL_COUNT],\n+    special_handles: [zx_handle_t; HND_SPECIAL_COUNT],\n     loader_message: bool,\n }\n \n extern {\n-    pub fn launchpad_create(job: mx_handle_t, name: *const c_char,\n-                            lp: *mut *mut launchpad_t) -> mx_status_t;\n+    pub fn launchpad_create(job: zx_handle_t, name: *const c_char,\n+                            lp: *mut *mut launchpad_t) -> zx_status_t;\n \n     pub fn launchpad_go(lp: *mut launchpad_t,\n-                        proc_handle: *mut mx_handle_t,\n-                        err_msg: *mut *const c_char) -> mx_status_t;\n+                        proc_handle: *mut zx_handle_t,\n+                        err_msg: *mut *const c_char) -> zx_status_t;\n \n     pub fn launchpad_destroy(lp: *mut launchpad_t);\n \n     pub fn launchpad_set_args(lp: *mut launchpad_t, argc: c_int,\n-                               argv: *const *const c_char) -> mx_status_t;\n+                               argv: *const *const c_char) -> zx_status_t;\n \n-    pub fn launchpad_set_environ(lp: *mut launchpad_t, envp: *const *const c_char) -> mx_status_t;\n+    pub fn launchpad_set_environ(lp: *mut launchpad_t, envp: *const *const c_char) -> zx_status_t;\n \n-    pub fn launchpad_clone(lp: *mut launchpad_t, what: u32) -> mx_status_t;\n+    pub fn launchpad_clone(lp: *mut launchpad_t, what: u32) -> zx_status_t;\n \n-    pub fn launchpad_clone_fd(lp: *mut launchpad_t, fd: c_int, target_fd: c_int) -> mx_status_t;\n+    pub fn launchpad_clone_fd(lp: *mut launchpad_t, fd: c_int, target_fd: c_int) -> zx_status_t;\n \n-    pub fn launchpad_transfer_fd(lp: *mut launchpad_t, fd: c_int, target_fd: c_int) -> mx_status_t;\n+    pub fn launchpad_transfer_fd(lp: *mut launchpad_t, fd: c_int, target_fd: c_int) -> zx_status_t;\n \n-    pub fn launchpad_elf_load(lp: *mut launchpad_t, vmo: mx_handle_t) -> mx_status_t;\n+    pub fn launchpad_elf_load(lp: *mut launchpad_t, vmo: zx_handle_t) -> zx_status_t;\n \n-    pub fn launchpad_add_vdso_vmo(lp: *mut launchpad_t) -> mx_status_t;\n+    pub fn launchpad_add_vdso_vmo(lp: *mut launchpad_t) -> zx_status_t;\n \n-    pub fn launchpad_load_vdso(lp: *mut launchpad_t, vmo: mx_handle_t) -> mx_status_t;\n+    pub fn launchpad_load_vdso(lp: *mut launchpad_t, vmo: zx_handle_t) -> zx_status_t;\n \n-    pub fn launchpad_vmo_from_file(filename: *const c_char) -> mx_handle_t;\n+    pub fn launchpad_vmo_from_file(filename: *const c_char) -> zx_handle_t;\n }\n \n // Launchpad clone constants\n \n-pub const LP_CLONE_MXIO_ROOT: u32 = 0x0001;\n-pub const LP_CLONE_MXIO_CWD: u32 = 0x0002;\n-// LP_CLONE_MXIO_STDIO = 0x0004\n-// LP_CLONE_MXIO_ALL = 0x00FF\n+pub const LP_CLONE_FDIO_ROOT: u32 = 0x0001;\n+pub const LP_CLONE_FDIO_CWD: u32 = 0x0002;\n+// LP_CLONE_FDIO_STDIO = 0x0004\n+// LP_CLONE_FDIO_ALL = 0x00FF\n // LP_CLONE_ENVIRON = 0x0100\n // LP_CLONE_DEFAULT_JOB = 0x0200\n // LP_CLONE_ALL = 0xFFFF\n \n // Errors\n \n-#[allow(unused)] pub const ERR_INTERNAL: mx_status_t = -1;\n+#[allow(unused)] pub const ERR_INTERNAL: zx_status_t = -1;\n \n // ERR_NOT_SUPPORTED: The operation is not implemented, supported,\n // or enabled.\n-#[allow(unused)] pub const ERR_NOT_SUPPORTED: mx_status_t = -2;\n+#[allow(unused)] pub const ERR_NOT_SUPPORTED: zx_status_t = -2;\n \n // ERR_NO_RESOURCES: The system was not able to allocate some resource\n // needed for the operation.\n-#[allow(unused)] pub const ERR_NO_RESOURCES: mx_status_t = -3;\n+#[allow(unused)] pub const ERR_NO_RESOURCES: zx_status_t = -3;\n \n // ERR_NO_MEMORY: The system was not able to allocate memory needed\n // for the operation.\n-#[allow(unused)] pub const ERR_NO_MEMORY: mx_status_t = -4;\n+#[allow(unused)] pub const ERR_NO_MEMORY: zx_status_t = -4;\n \n-// ERR_CALL_FAILED: The second phase of mx_channel_call(; did not complete\n+// ERR_CALL_FAILED: The second phase of zx_channel_call(; did not complete\n // successfully.\n-#[allow(unused)] pub const ERR_CALL_FAILED: mx_status_t = -5;\n+#[allow(unused)] pub const ERR_CALL_FAILED: zx_status_t = -5;\n \n // ERR_INTERRUPTED_RETRY: The system call was interrupted, but should be\n // retried.  This should not be seen outside of the VDSO.\n-#[allow(unused)] pub const ERR_INTERRUPTED_RETRY: mx_status_t = -6;\n+#[allow(unused)] pub const ERR_INTERRUPTED_RETRY: zx_status_t = -6;\n \n // ======= Parameter errors =======\n // ERR_INVALID_ARGS: an argument is invalid, ex. null pointer\n-#[allow(unused)] pub const ERR_INVALID_ARGS: mx_status_t = -10;\n+#[allow(unused)] pub const ERR_INVALID_ARGS: zx_status_t = -10;\n \n // ERR_BAD_HANDLE: A specified handle value does not refer to a handle.\n-#[allow(unused)] pub const ERR_BAD_HANDLE: mx_status_t = -11;\n+#[allow(unused)] pub const ERR_BAD_HANDLE: zx_status_t = -11;\n \n // ERR_WRONG_TYPE: The subject of the operation is the wrong type to\n // perform the operation.\n // Example: Attempting a message_read on a thread handle.\n-#[allow(unused)] pub const ERR_WRONG_TYPE: mx_status_t = -12;\n+#[allow(unused)] pub const ERR_WRONG_TYPE: zx_status_t = -12;\n \n // ERR_BAD_SYSCALL: The specified syscall number is invalid.\n-#[allow(unused)] pub const ERR_BAD_SYSCALL: mx_status_t = -13;\n+#[allow(unused)] pub const ERR_BAD_SYSCALL: zx_status_t = -13;\n \n // ERR_OUT_OF_RANGE: An argument is outside the valid range for this\n // operation.\n-#[allow(unused)] pub const ERR_OUT_OF_RANGE: mx_status_t = -14;\n+#[allow(unused)] pub const ERR_OUT_OF_RANGE: zx_status_t = -14;\n \n // ERR_BUFFER_TOO_SMALL: A caller provided buffer is too small for\n // this operation.\n-#[allow(unused)] pub const ERR_BUFFER_TOO_SMALL: mx_status_t = -15;\n+#[allow(unused)] pub const ERR_BUFFER_TOO_SMALL: zx_status_t = -15;\n \n // ======= Precondition or state errors =======\n // ERR_BAD_STATE: operation failed because the current state of the\n // object does not allow it, or a precondition of the operation is\n // not satisfied\n-#[allow(unused)] pub const ERR_BAD_STATE: mx_status_t = -20;\n+#[allow(unused)] pub const ERR_BAD_STATE: zx_status_t = -20;\n \n // ERR_TIMED_OUT: The time limit for the operation elapsed before\n // the operation completed.\n-#[allow(unused)] pub const ERR_TIMED_OUT: mx_status_t = -21;\n+#[allow(unused)] pub const ERR_TIMED_OUT: zx_status_t = -21;\n \n // ERR_SHOULD_WAIT: The operation cannot be performed currently but\n // potentially could succeed if the caller waits for a prerequisite\n@@ -253,67 +253,67 @@ pub const LP_CLONE_MXIO_CWD: u32 = 0x0002;\n // messages waiting but has an open remote will return ERR_SHOULD_WAIT.\n // Attempting to read from a message pipe that has no messages waiting\n // and has a closed remote end will return ERR_REMOTE_CLOSED.\n-#[allow(unused)] pub const ERR_SHOULD_WAIT: mx_status_t = -22;\n+#[allow(unused)] pub const ERR_SHOULD_WAIT: zx_status_t = -22;\n \n // ERR_CANCELED: The in-progress operation (e.g. a wait) has been\n // // canceled.\n-#[allow(unused)] pub const ERR_CANCELED: mx_status_t = -23;\n+#[allow(unused)] pub const ERR_CANCELED: zx_status_t = -23;\n \n // ERR_PEER_CLOSED: The operation failed because the remote end\n // of the subject of the operation was closed.\n-#[allow(unused)] pub const ERR_PEER_CLOSED: mx_status_t = -24;\n+#[allow(unused)] pub const ERR_PEER_CLOSED: zx_status_t = -24;\n \n // ERR_NOT_FOUND: The requested entity is not found.\n-#[allow(unused)] pub const ERR_NOT_FOUND: mx_status_t = -25;\n+#[allow(unused)] pub const ERR_NOT_FOUND: zx_status_t = -25;\n \n // ERR_ALREADY_EXISTS: An object with the specified identifier\n // already exists.\n // Example: Attempting to create a file when a file already exists\n // with that name.\n-#[allow(unused)] pub const ERR_ALREADY_EXISTS: mx_status_t = -26;\n+#[allow(unused)] pub const ERR_ALREADY_EXISTS: zx_status_t = -26;\n \n // ERR_ALREADY_BOUND: The operation failed because the named entity\n // is already owned or controlled by another entity. The operation\n // could succeed later if the current owner releases the entity.\n-#[allow(unused)] pub const ERR_ALREADY_BOUND: mx_status_t = -27;\n+#[allow(unused)] pub const ERR_ALREADY_BOUND: zx_status_t = -27;\n \n // ERR_UNAVAILABLE: The subject of the operation is currently unable\n // to perform the operation.\n // Note: This is used when there's no direct way for the caller to\n // observe when the subject will be able to perform the operation\n // and should thus retry.\n-#[allow(unused)] pub const ERR_UNAVAILABLE: mx_status_t = -28;\n+#[allow(unused)] pub const ERR_UNAVAILABLE: zx_status_t = -28;\n \n // ======= Permission check errors =======\n // ERR_ACCESS_DENIED: The caller did not have permission to perform\n // the specified operation.\n-#[allow(unused)] pub const ERR_ACCESS_DENIED: mx_status_t = -30;\n+#[allow(unused)] pub const ERR_ACCESS_DENIED: zx_status_t = -30;\n \n // ======= Input-output errors =======\n // ERR_IO: Otherwise unspecified error occurred during I/O.\n-#[allow(unused)] pub const ERR_IO: mx_status_t = -40;\n+#[allow(unused)] pub const ERR_IO: zx_status_t = -40;\n \n // ERR_REFUSED: The entity the I/O operation is being performed on\n // rejected the operation.\n // Example: an I2C device NAK'ing a transaction or a disk controller\n // rejecting an invalid command.\n-#[allow(unused)] pub const ERR_IO_REFUSED: mx_status_t = -41;\n+#[allow(unused)] pub const ERR_IO_REFUSED: zx_status_t = -41;\n \n // ERR_IO_DATA_INTEGRITY: The data in the operation failed an integrity\n // check and is possibly corrupted.\n // Example: CRC or Parity error.\n-#[allow(unused)] pub const ERR_IO_DATA_INTEGRITY: mx_status_t = -42;\n+#[allow(unused)] pub const ERR_IO_DATA_INTEGRITY: zx_status_t = -42;\n \n // ERR_IO_DATA_LOSS: The data in the operation is currently unavailable\n // and may be permanently lost.\n // Example: A disk block is irrecoverably damaged.\n-#[allow(unused)] pub const ERR_IO_DATA_LOSS: mx_status_t = -43;\n+#[allow(unused)] pub const ERR_IO_DATA_LOSS: zx_status_t = -43;\n \n // Filesystem specific errors\n-#[allow(unused)] pub const ERR_BAD_PATH: mx_status_t = -50;\n-#[allow(unused)] pub const ERR_NOT_DIR: mx_status_t = -51;\n-#[allow(unused)] pub const ERR_NOT_FILE: mx_status_t = -52;\n+#[allow(unused)] pub const ERR_BAD_PATH: zx_status_t = -50;\n+#[allow(unused)] pub const ERR_NOT_DIR: zx_status_t = -51;\n+#[allow(unused)] pub const ERR_NOT_FILE: zx_status_t = -52;\n // ERR_FILE_BIG: A file exceeds a filesystem-specific size limit.\n-#[allow(unused)] pub const ERR_FILE_BIG: mx_status_t = -53;\n+#[allow(unused)] pub const ERR_FILE_BIG: zx_status_t = -53;\n // ERR_NO_SPACE: Filesystem or device space is exhausted.\n-#[allow(unused)] pub const ERR_NO_SPACE: mx_status_t = -54;\n+#[allow(unused)] pub const ERR_NO_SPACE: zx_status_t = -54;", "previous_filename": "src/libstd/sys/unix/process/magenta.rs"}, {"sha": "fd066c9cdbeef417c32d659a3e87055e198cd8d6", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "patch": "@@ -344,15 +344,15 @@ mod imp {\n     use io;\n     use rand::Rng;\n \n-    #[link(name = \"magenta\")]\n+    #[link(name = \"zircon\")]\n     extern {\n-        fn mx_cprng_draw(buffer: *mut u8, len: usize, actual: *mut usize) -> i32;\n+        fn zx_cprng_draw(buffer: *mut u8, len: usize, actual: *mut usize) -> i32;\n     }\n \n     fn getrandom(buf: &mut [u8]) -> Result<usize, i32> {\n         unsafe {\n             let mut actual = 0;\n-            let status = mx_cprng_draw(buf.as_mut_ptr(), buf.len(), &mut actual);\n+            let status = zx_cprng_draw(buf.as_mut_ptr(), buf.len(), &mut actual);\n             if status == 0 {\n                 Ok(actual)\n             } else {\n@@ -387,7 +387,7 @@ mod imp {\n                 let ret = getrandom(buf);\n                 match ret {\n                     Err(err) => {\n-                        panic!(\"kernel mx_cprng_draw call failed! (returned {}, buf.len() {})\",\n+                        panic!(\"kernel zx_cprng_draw call failed! (returned {}, buf.len() {})\",\n                             err, buf.len())\n                     }\n                     Ok(actual) => {"}, {"sha": "d4613d29a36ea46442b296b78493d0691f02706e", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cff131ddb0e34f7ebe361700dbd5c3c13519cb/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=43cff131ddb0e34f7ebe361700dbd5c3c13519cb", "patch": "@@ -35,8 +35,11 @@ static EXCEPTIONS: &'static [&'static str] = &[\n     \"thread-id\", // Apache-2.0, mdbook\n     \"cssparser\", // MPL-2.0, rustdoc\n     \"smallvec\", // MPL-2.0, rustdoc\n+    // TODO: remove magenta references when \"everything\" has moved over to using the zircon name.\n     \"magenta-sys\", // BSD-3-Clause, rustdoc\n     \"magenta\", // BSD-3-Clause, rustdoc\n+    \"zircon-sys\", // BSD-3-Clause, rustdoc\n+    \"zircon\", // BSD-3-Clause, rustdoc\n     \"cssparser-macros\", // MPL-2.0, rustdoc\n     \"selectors\", // MPL-2.0, rustdoc\n ];"}]}