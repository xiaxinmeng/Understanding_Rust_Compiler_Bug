{"sha": "94fe5011e2a242a30b9f2a538bc64fbacd36f619", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZmU1MDExZTJhMjQyYTMwYjlmMmE1MzhiYzY0ZmJhY2QzNmY2MTk=", "commit": {"author": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2012-02-17T07:09:12Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-17T07:47:45Z"}, "message": "std: Add some env() and getenv() tests", "tree": {"sha": "62f714d73ad9f7aa5100233d934c93dc2d457590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f714d73ad9f7aa5100233d934c93dc2d457590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94fe5011e2a242a30b9f2a538bc64fbacd36f619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94fe5011e2a242a30b9f2a538bc64fbacd36f619", "html_url": "https://github.com/rust-lang/rust/commit/94fe5011e2a242a30b9f2a538bc64fbacd36f619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94fe5011e2a242a30b9f2a538bc64fbacd36f619/comments", "author": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec76d25152035878cb0b502e2b4dc1d637cff5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec76d25152035878cb0b502e2b4dc1d637cff5b", "html_url": "https://github.com/rust-lang/rust/commit/aec76d25152035878cb0b502e2b4dc1d637cff5b"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "15d52c76fbeaf78f0a841e4d6ad27e51c9c9464d", "filename": "src/libstd/generic_os.rs", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/94fe5011e2a242a30b9f2a538bc64fbacd36f619/src%2Flibstd%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fe5011e2a242a30b9f2a538bc64fbacd36f619/src%2Flibstd%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgeneric_os.rs?ref=94fe5011e2a242a30b9f2a538bc64fbacd36f619", "patch": "@@ -99,21 +99,31 @@ fn setenv(n: str, v: str) {\n #[cfg(test)]\n mod tests {\n \n+    fn make_rand_name() -> str {\n+        import rand;\n+        let rng: rand::rng = rand::mk_rng();\n+        let n = \"TEST\" + rng.gen_str(10u);\n+        assert option::is_none(getenv(n));\n+        n\n+    }\n+\n     #[test]\n     #[ignore(reason = \"fails periodically on mac\")]\n     fn test_setenv() {\n-        // NB: Each test of setenv needs to use different variable names or\n-        // the tests will not be threadsafe\n-        setenv(\"NAME1\", \"VALUE\");\n-        assert (getenv(\"NAME1\") == option::some(\"VALUE\"));\n+        let n = make_rand_name();\n+        setenv(n, \"VALUE\");\n+        assert getenv(n) == option::some(\"VALUE\");\n     }\n \n     #[test]\n     #[ignore(reason = \"fails periodically on mac\")]\n     fn test_setenv_overwrite() {\n-        setenv(\"NAME2\", \"1\");\n-        setenv(\"NAME2\", \"2\");\n-        assert (getenv(\"NAME2\") == option::some(\"2\"));\n+        let n = make_rand_name();\n+        setenv(n, \"1\");\n+        setenv(n, \"2\");\n+        assert getenv(n) == option::some(\"2\");\n+        setenv(n, \"\");\n+        assert getenv(n) == option::some(\"\");\n     }\n \n     // Windows GetEnvironmentVariable requires some extra work to make sure\n@@ -124,9 +134,10 @@ mod tests {\n         let s = \"\";\n         let i = 0;\n         while i < 100 { s += \"aaaaaaaaaa\"; i += 1; }\n-        setenv(\"test_getenv_big\", s);\n+        let n = make_rand_name();\n+        setenv(n, s);\n         log(debug, s);\n-        assert (getenv(\"test_getenv_big\") == option::some(s));\n+        assert getenv(n) == option::some(s);\n     }\n \n     #[test]\n@@ -143,6 +154,32 @@ mod tests {\n             assert path[1] == ':' as u8;\n         }\n     }\n+\n+    #[test]\n+    fn test_env_getenv() {\n+        let e = env();\n+        assert vec::len(e) > 0u;\n+        for (n, v) in e {\n+            log(debug, n);\n+            let v2 = getenv(n);\n+            // MingW seems to set some funky environment variables like\n+            // \"=C:=C:\\MinGW\\msys\\1.0\\bin\" and \"!::=::\\\" that are returned\n+            // from env() but not visible from getenv().\n+            assert option::is_none(v2) || v2 == option::some(v);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_env_setenv() {\n+        let n = make_rand_name();\n+\n+        let e = env();\n+        setenv(n, \"VALUE\");\n+        assert !vec::contains(e, (n, \"VALUE\"));\n+\n+        e = env();\n+        assert vec::contains(e, (n, \"VALUE\"));\n+    }\n }\n \n // Local Variables:"}]}