{"sha": "2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "node_id": "C_kwDOAAsO6NoAKDJjNGIwYjI5Y2Y1YmNmZTZmMmQyMWJlNWY1YWQyN2Q4MzJlYjg1ZjM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T18:11:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:04:42Z"}, "message": "Make user_provided_sigs a LocalDefIdMap.", "tree": {"sha": "08f9ca25c5015f1616f5abe11d0a5e5af8779099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f9ca25c5015f1616f5abe11d0a5e5af8779099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "html_url": "https://github.com/rust-lang/rust/commit/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "290f0781b4507b14060aa04db3f412914b1f117d", "url": "https://api.github.com/repos/rust-lang/rust/commits/290f0781b4507b14060aa04db3f412914b1f117d", "html_url": "https://github.com/rust-lang/rust/commit/290f0781b4507b14060aa04db3f412914b1f117d"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "62c6f9581373edd69ff70e5236cec85ee6c15fc6", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "patch": "@@ -42,8 +42,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             user_provided_sig = None;\n         } else {\n             let typeck_results = self.tcx().typeck(mir_def_id);\n-            user_provided_sig = typeck_results.user_provided_sigs.get(&mir_def_id.to_def_id()).map(\n-                |user_provided_poly_sig| {\n+            user_provided_sig =\n+                typeck_results.user_provided_sigs.get(&mir_def_id).map(|user_provided_poly_sig| {\n                     // Instantiate the canonicalized variables from\n                     // user-provided signature (e.g., the `_` in the code\n                     // above) with fresh variables.\n@@ -60,8 +60,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         LateBoundRegionConversionTime::FnCall,\n                         poly_sig,\n                     )\n-                },\n-            );\n+                });\n         }\n \n         debug!(?normalized_input_tys, ?body.local_decls);"}, {"sha": "7a881acee4217f77b405617d42e593817e374195", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "patch": "@@ -664,7 +664,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let result = self.normalize_associated_types_in(self.tcx.hir().span(hir_id), result);\n \n         let c_result = self.inh.infcx.canonicalize_response(result);\n-        self.typeck_results.borrow_mut().user_provided_sigs.insert(expr_def_id, c_result);\n+        self.typeck_results\n+            .borrow_mut()\n+            .user_provided_sigs\n+            .insert(expr_def_id.expect_local(), c_result);\n \n         result\n     }"}, {"sha": "2eca40d678a849c48633b738d34bf022907c88ce", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "patch": "@@ -514,7 +514,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         for (&def_id, c_sig) in fcx_typeck_results.user_provided_sigs.iter() {\n             if cfg!(debug_assertions) && c_sig.needs_infer() {\n                 span_bug!(\n-                    self.fcx.tcx.hir().span_if_local(def_id).unwrap(),\n+                    self.fcx.tcx.def_span(def_id),\n                     \"writeback: `{:?}` has inference variables\",\n                     c_sig\n                 );"}, {"sha": "1c714f594253aad47b83cbac6631f662568662a3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2c4b0b29cf5bcfe6f2d21be5f5ad27d832eb85f3", "patch": "@@ -41,7 +41,7 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::intravisit::Visitor;\n@@ -443,7 +443,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// Stores the canonicalized types provided by the user. See also\n     /// `AscribeUserType` statement in MIR.\n-    pub user_provided_sigs: DefIdMap<CanonicalPolyFnSig<'tcx>>,\n+    pub user_provided_sigs: LocalDefIdMap<CanonicalPolyFnSig<'tcx>>,\n \n     adjustments: ItemLocalMap<Vec<ty::adjustment::Adjustment<'tcx>>>,\n "}]}