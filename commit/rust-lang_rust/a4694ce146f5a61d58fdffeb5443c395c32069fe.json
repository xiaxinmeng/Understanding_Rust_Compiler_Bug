{"sha": "a4694ce146f5a61d58fdffeb5443c395c32069fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0Njk0Y2UxNDZmNWE2MWQ1OGZkZmZlYjU0NDNjMzk1YzMyMDY5ZmU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T11:21:44Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T14:15:27Z"}, "message": "Create a trans_impl module", "tree": {"sha": "94259d8e856a07781b259e14062c70a0c559e872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94259d8e856a07781b259e14062c70a0c559e872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4694ce146f5a61d58fdffeb5443c395c32069fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4694ce146f5a61d58fdffeb5443c395c32069fe", "html_url": "https://github.com/rust-lang/rust/commit/a4694ce146f5a61d58fdffeb5443c395c32069fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4694ce146f5a61d58fdffeb5443c395c32069fe/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a1710d21e47948451cf93a65c841f172259df52", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1710d21e47948451cf93a65c841f172259df52", "html_url": "https://github.com/rust-lang/rust/commit/3a1710d21e47948451cf93a65c841f172259df52"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "2f68a2f741f1ab07f9d5ed94a49384f708d73263", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a4694ce146f5a61d58fdffeb5443c395c32069fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4694ce146f5a61d58fdffeb5443c395c32069fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a4694ce146f5a61d58fdffeb5443c395c32069fe", "patch": "@@ -13,7 +13,6 @@\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-import core::{either, str, int, uint, option, vec};\n import std::{map, time};\n import std::map::hashmap;\n import std::map::{new_int_hash, new_str_hash};\n@@ -4712,20 +4711,6 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n     finish_fn(fcx, lltop);\n }\n \n-fn trans_impl(cx: @local_ctxt, name: ast::ident, methods: [@ast::method],\n-              id: ast::node_id, tps: [ast::ty_param]) {\n-    let sub_cx = extend_path(cx, name);\n-    for m in methods {\n-        alt cx.ccx.item_ids.find(m.id) {\n-          some(llfn) {\n-            trans_fn(extend_path(sub_cx, m.ident), m.span, m.decl, m.body,\n-                     llfn, impl_self(ty::node_id_to_monotype(cx.ccx.tcx, id)),\n-                     tps + m.tps, m.id);\n-          }\n-        }\n-    }\n-}\n-\n \n // FIXME: this should do some structural hash-consing to avoid\n // duplicate constants. I think. Maybe LLVM has a magical mode\n@@ -5026,7 +5011,7 @@ fn trans_item(cx: @local_ctxt, item: ast::item) {\n         trans_obj(sub_cx, item.span, ob, ctor_id, tps);\n       }\n       ast::item_impl(tps, _, _, ms) {\n-        trans_impl(cx, item.ident, ms, item.id, tps);\n+        trans_impl::trans_impl(cx, item.ident, ms, item.id, tps);\n       }\n       ast::item_res(decl, tps, body, dtor_id, ctor_id) {\n         trans_res_ctor(cx, item.span, decl, ctor_id, tps);"}, {"sha": "df3dd5f7eb44ffd6cac18c86092edf5048518ac0", "filename": "src/comp/middle/trans_impl.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4694ce146f5a61d58fdffeb5443c395c32069fe/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4694ce146f5a61d58fdffeb5443c395c32069fe/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_impl.rs?ref=a4694ce146f5a61d58fdffeb5443c395c32069fe", "patch": "@@ -0,0 +1,18 @@\n+import trans::*;\n+import trans_common::*;\n+import option::{some, none};\n+import syntax::ast;\n+\n+fn trans_impl(cx: @local_ctxt, name: ast::ident, methods: [@ast::method],\n+              id: ast::node_id, tps: [ast::ty_param]) {\n+    let sub_cx = extend_path(cx, name);\n+    for m in methods {\n+        alt cx.ccx.item_ids.find(m.id) {\n+          some(llfn) {\n+            trans_fn(extend_path(sub_cx, m.ident), m.span, m.decl, m.body,\n+                     llfn, impl_self(ty::node_id_to_monotype(cx.ccx.tcx, id)),\n+                     tps + m.tps, m.id);\n+          }\n+        }\n+    }\n+}"}, {"sha": "2738f3e4b82c1960ede212b214ecf6fef91f8e6b", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4694ce146f5a61d58fdffeb5443c395c32069fe/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a4694ce146f5a61d58fdffeb5443c395c32069fe/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=a4694ce146f5a61d58fdffeb5443c395c32069fe", "patch": "@@ -22,6 +22,7 @@ mod middle {\n     mod trans_uniq;\n     mod trans_closure;\n     mod trans_vec;\n+    mod trans_impl;\n     mod ty;\n     mod ast_map;\n     mod resolve;"}]}