{"sha": "bed8e93f40ab77f1dcb2009ff651ec623090769e", "node_id": "C_kwDOAAsO6NoAKGJlZDhlOTNmNDBhYjc3ZjFkY2IyMDA5ZmY2NTFlYzYyMzA5MDc2OWU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-08T15:25:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-08T15:25:38Z"}, "message": "remove Clean trait implementation for hir::ImplItem", "tree": {"sha": "f6189f67ed875aed591d437d286ba44d260a7771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6189f67ed875aed591d437d286ba44d260a7771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bed8e93f40ab77f1dcb2009ff651ec623090769e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bed8e93f40ab77f1dcb2009ff651ec623090769e", "html_url": "https://github.com/rust-lang/rust/commit/bed8e93f40ab77f1dcb2009ff651ec623090769e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bed8e93f40ab77f1dcb2009ff651ec623090769e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a238d1284e3efc67bf97687a0701d8b1449bfae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a238d1284e3efc67bf97687a0701d8b1449bfae3", "html_url": "https://github.com/rust-lang/rust/commit/a238d1284e3efc67bf97687a0701d8b1449bfae3"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "2b6310870f4f7b217a14505fc24b6611a41404da", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bed8e93f40ab77f1dcb2009ff651ec623090769e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed8e93f40ab77f1dcb2009ff651ec623090769e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=bed8e93f40ab77f1dcb2009ff651ec623090769e", "patch": "@@ -16,7 +16,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty,\n+    self, clean_fn_decl_from_did_and_sig, clean_impl_item, clean_middle_field, clean_middle_ty,\n     clean_trait_ref_with_bindings, clean_ty, clean_ty_generics, clean_variant_def,\n     clean_visibility, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n };\n@@ -416,7 +416,7 @@ pub(crate) fn build_impl(\n                         true\n                     }\n                 })\n-                .map(|item| item.clean(cx))\n+                .map(|item| clean_impl_item(item, cx))\n                 .collect::<Vec<_>>(),\n             impl_.generics.clean(cx),\n         ),"}, {"sha": "fbfafdd280ce455e534377bad51ff484873f1a45", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bed8e93f40ab77f1dcb2009ff651ec623090769e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed8e93f40ab77f1dcb2009ff651ec623090769e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bed8e93f40ab77f1dcb2009ff651ec623090769e", "patch": "@@ -1065,45 +1065,46 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n     })\n }\n \n-impl<'tcx> Clean<'tcx, Item> for hir::ImplItem<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let local_did = self.def_id.to_def_id();\n-        cx.with_param_env(local_did, |cx| {\n-            let inner = match self.kind {\n-                hir::ImplItemKind::Const(ty, expr) => {\n-                    let default = ConstantKind::Local { def_id: local_did, body: expr };\n-                    AssocConstItem(clean_ty(ty, cx), default)\n-                }\n-                hir::ImplItemKind::Fn(ref sig, body) => {\n-                    let m = clean_function(cx, sig, self.generics, body);\n-                    let defaultness = cx.tcx.impl_defaultness(self.def_id);\n-                    MethodItem(m, Some(defaultness))\n-                }\n-                hir::ImplItemKind::TyAlias(hir_ty) => {\n-                    let type_ = clean_ty(hir_ty, cx);\n-                    let generics = self.generics.clean(cx);\n-                    let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);\n-                    AssocTypeItem(\n-                        Box::new(Typedef { type_, generics, item_type: Some(item_type) }),\n-                        Vec::new(),\n-                    )\n-                }\n-            };\n+pub(crate) fn clean_impl_item<'tcx>(\n+    impl_: &hir::ImplItem<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Item {\n+    let local_did = impl_.def_id.to_def_id();\n+    cx.with_param_env(local_did, |cx| {\n+        let inner = match impl_.kind {\n+            hir::ImplItemKind::Const(ty, expr) => {\n+                let default = ConstantKind::Local { def_id: local_did, body: expr };\n+                AssocConstItem(clean_ty(ty, cx), default)\n+            }\n+            hir::ImplItemKind::Fn(ref sig, body) => {\n+                let m = clean_function(cx, sig, impl_.generics, body);\n+                let defaultness = cx.tcx.impl_defaultness(impl_.def_id);\n+                MethodItem(m, Some(defaultness))\n+            }\n+            hir::ImplItemKind::TyAlias(hir_ty) => {\n+                let type_ = clean_ty(hir_ty, cx);\n+                let generics = impl_.generics.clean(cx);\n+                let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);\n+                AssocTypeItem(\n+                    Box::new(Typedef { type_, generics, item_type: Some(item_type) }),\n+                    Vec::new(),\n+                )\n+            }\n+        };\n \n-            let mut what_rustc_thinks =\n-                Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n+        let mut what_rustc_thinks =\n+            Item::from_def_id_and_parts(local_did, Some(impl_.ident.name), inner, cx);\n \n-            let impl_ref = cx.tcx.impl_trait_ref(cx.tcx.local_parent(self.def_id));\n+        let impl_ref = cx.tcx.impl_trait_ref(cx.tcx.local_parent(impl_.def_id));\n \n-            // Trait impl items always inherit the impl's visibility --\n-            // we don't want to show `pub`.\n-            if impl_ref.is_some() {\n-                what_rustc_thinks.visibility = Inherited;\n-            }\n+        // Trait impl items always inherit the impl's visibility --\n+        // we don't want to show `pub`.\n+        if impl_ref.is_some() {\n+            what_rustc_thinks.visibility = Inherited;\n+        }\n \n-            what_rustc_thinks\n-        })\n-    }\n+        what_rustc_thinks\n+    })\n }\n \n impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n@@ -1995,8 +1996,11 @@ fn clean_impl<'tcx>(\n     let tcx = cx.tcx;\n     let mut ret = Vec::new();\n     let trait_ = impl_.of_trait.as_ref().map(|t| clean_trait_ref(t, cx));\n-    let items =\n-        impl_.items.iter().map(|ii| tcx.hir().impl_item(ii.id).clean(cx)).collect::<Vec<_>>();\n+    let items = impl_\n+        .items\n+        .iter()\n+        .map(|ii| clean_impl_item(tcx.hir().impl_item(ii.id), cx))\n+        .collect::<Vec<_>>();\n     let def_id = tcx.hir().local_def_id(hir_id);\n \n     // If this impl block is an implementation of the Deref trait, then we"}]}