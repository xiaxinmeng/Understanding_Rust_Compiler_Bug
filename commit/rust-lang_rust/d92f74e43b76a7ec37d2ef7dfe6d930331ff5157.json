{"sha": "d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "node_id": "C_kwDOAAsO6NoAKGQ5MmY3NGU0M2I3NmE3ZWMzN2QyZWY3ZGZlNmQ5MzAzMzFmZjUxNTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-09T00:09:53Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-10T16:08:14Z"}, "message": "Support safe transmute in new solver", "tree": {"sha": "026a365fac7dbb58f0f2ed0b4f0751837aaa0688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026a365fac7dbb58f0f2ed0b4f0751837aaa0688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "html_url": "https://github.com/rust-lang/rust/commit/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a198c7f62a6dea507ba950750bc928237ad7a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a198c7f62a6dea507ba950750bc928237ad7a00", "html_url": "https://github.com/rust-lang/rust/commit/2a198c7f62a6dea507ba950750bc928237ad7a00"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "08a62c900f972f00594c4a0c6952717c3e32e295", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "patch": "@@ -83,6 +83,9 @@ pub trait TypeVisitableExt<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n                 | TypeFlags::HAS_CT_PLACEHOLDER,\n         )\n     }\n+    fn has_non_region_placeholders(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_PLACEHOLDER | TypeFlags::HAS_CT_PLACEHOLDER)\n+    }\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }"}, {"sha": "a33e8ef4b4a3c22306a09c64a02912e06e29cbb6", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "patch": "@@ -225,6 +225,11 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<TyCtxt<'tcx>> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_transmute_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -373,6 +378,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_builtin_discriminant_kind_candidate(self, goal)\n         } else if lang_items.destruct_trait() == Some(trait_def_id) {\n             G::consider_builtin_destruct_candidate(self, goal)\n+        } else if lang_items.transmute_trait() == Some(trait_def_id) {\n+            G::consider_builtin_transmute_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "c29b5b04e000a5f10f266512fd035dec8054424a", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "patch": "@@ -639,4 +639,25 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         crate::traits::wf::unnormalized_obligations(self.infcx, param_env, arg)\n             .map(|obligations| obligations.into_iter().map(|obligation| obligation.into()))\n     }\n+\n+    pub(super) fn is_transmutable(\n+        &self,\n+        src_and_dst: rustc_transmute::Types<'tcx>,\n+        scope: Ty<'tcx>,\n+        assume: rustc_transmute::Assume,\n+    ) -> Result<Certainty, NoSolution> {\n+        // FIXME(transmutability): This really should be returning nested goals for `Answer::If*`\n+        match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n+            ObligationCause::dummy(),\n+            ty::Binder::dummy(src_and_dst),\n+            scope,\n+            assume,\n+        ) {\n+            rustc_transmute::Answer::Yes => Ok(Certainty::Yes),\n+            rustc_transmute::Answer::No(_)\n+            | rustc_transmute::Answer::IfTransmutable { .. }\n+            | rustc_transmute::Answer::IfAll(_)\n+            | rustc_transmute::Answer::IfAny(_) => Err(NoSolution),\n+        }\n+    }\n }"}, {"sha": "14cb43b89c3aa66144042100e60755407a03302c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "patch": "@@ -524,6 +524,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         bug!(\"`Destruct` does not have an associated type: {:?}\", goal);\n     }\n+\n+    fn consider_builtin_transmute_candidate(\n+        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`BikeshedIntrinsicFrom` does not have an associated type: {:?}\", goal)\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "c7375c9ffa64b16168e65a7b419af0080307bb39", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92f74e43b76a7ec37d2ef7dfe6d930331ff5157/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=d92f74e43b76a7ec37d2ef7dfe6d930331ff5157", "patch": "@@ -556,6 +556,35 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             Err(NoSolution)\n         }\n     }\n+\n+    fn consider_builtin_transmute_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        // `rustc_transmute` does not have support for type or const params\n+        if goal.has_non_region_placeholders() {\n+            return Err(NoSolution);\n+        }\n+\n+        // Erase regions because we compute layouts in `rustc_transmute`,\n+        // which will ICE for region vars.\n+        let substs = ecx.tcx().erase_regions(goal.predicate.trait_ref.substs);\n+\n+        let Some(assume) = rustc_transmute::Assume::from_const(\n+            ecx.tcx(),\n+            goal.param_env,\n+            substs.const_at(3),\n+        ) else {\n+            return Err(NoSolution);\n+        };\n+\n+        let certainty = ecx.is_transmutable(\n+            rustc_transmute::Types { dst: substs.type_at(0), src: substs.type_at(1) },\n+            substs.type_at(2),\n+            assume,\n+        )?;\n+        ecx.evaluate_added_goals_and_make_canonical_response(certainty)\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}]}