{"sha": "5deb907b4321d8328978d3322b0826b781814452", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZWI5MDdiNDMyMWQ4MzI4OTc4ZDMzMjJiMDgyNmI3ODE4MTQ0NTI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-04T22:14:46Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-04T22:14:46Z"}, "message": "Merge #1374\n\n1374: Implement `cargo lint` and fix some clippy errors r=alanhdu a=alanhdu\n\nThis creates a `cargo lint` command that runs clippy with certain lints disabled. I've also gone ahead and fixed some of the lint errors, although there are many more still to go.\r\n\r\ncc #848 \n\nCo-authored-by: Alan Du <alanhdu@gmail.com>", "tree": {"sha": "2baa3b75b1ef62c02617c37ba9b800c41a3dd102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2baa3b75b1ef62c02617c37ba9b800c41a3dd102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5deb907b4321d8328978d3322b0826b781814452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5deb907b4321d8328978d3322b0826b781814452", "html_url": "https://github.com/rust-lang/rust/commit/5deb907b4321d8328978d3322b0826b781814452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5deb907b4321d8328978d3322b0826b781814452/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8bd0e844247dc28d6ceb24b00f3cc3396bd5bf03", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd0e844247dc28d6ceb24b00f3cc3396bd5bf03", "html_url": "https://github.com/rust-lang/rust/commit/8bd0e844247dc28d6ceb24b00f3cc3396bd5bf03"}, {"sha": "aa30c4909ebb1e85f1591f465c9e2875aa4d394e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa30c4909ebb1e85f1591f465c9e2875aa4d394e", "html_url": "https://github.com/rust-lang/rust/commit/aa30c4909ebb1e85f1591f465c9e2875aa4d394e"}], "stats": {"total": 456, "additions": 227, "deletions": 229}, "files": [{"sha": "51ae33910b0afd1dd7666291c5fba48fda10aa59", "filename": ".cargo/config", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -12,6 +12,9 @@ install-code = \"run --package tools --bin tools -- install-code\"\n # Formats the full repository or installs the git hook to do it automatically.\n format       = \"run --package tools --bin tools -- format\"\n format-hook  = \"run --package tools --bin tools -- format-hook\"\n+# Run clippy\n+lint         = \"run --package tools --bin tools -- lint\"\n+\n # Runs the fuzzing test suite (currently only parser)\n fuzz-tests   = \"run --package tools --bin tools -- fuzz-tests\"\n "}, {"sha": "de0529b328ad50693edbf7bf92a489b67dfbc9e5", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -212,21 +212,17 @@ impl AstEditor<ast::FnDef> {\n     }\n \n     pub fn strip_attrs_and_docs(&mut self) {\n-        loop {\n-            if let Some(start) = self\n-                .ast()\n-                .syntax()\n-                .children_with_tokens()\n-                .find(|it| it.kind() == ATTR || it.kind() == COMMENT)\n-            {\n-                let end = match start.next_sibling_or_token() {\n-                    Some(el) if el.kind() == WHITESPACE => el,\n-                    Some(_) | None => start,\n-                };\n-                self.ast = self.replace_children(RangeInclusive::new(start, end), iter::empty());\n-            } else {\n-                break;\n-            }\n+        while let Some(start) = self\n+            .ast()\n+            .syntax()\n+            .children_with_tokens()\n+            .find(|it| it.kind() == ATTR || it.kind() == COMMENT)\n+        {\n+            let end = match start.next_sibling_or_token() {\n+                Some(el) if el.kind() == WHITESPACE => el,\n+                Some(_) | None => start,\n+            };\n+            self.ast = self.replace_children(RangeInclusive::new(start, end), iter::empty());\n         }\n     }\n }"}, {"sha": "9617beb5c555f3799c44786f4b83dc40b052e4dc", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -334,7 +334,7 @@ fn best_action_for_target<'b, 'a: 'b>(\n         .filter_map(ast::UseItem::use_tree)\n         .map(|u| walk_use_tree_for_best_action(&mut storage, None, u, target))\n         .fold(None, |best, a| {\n-            best.and_then(|best| Some(*ImportAction::better(&best, &a))).or(Some(a))\n+            best.and_then(|best| Some(*ImportAction::better(&best, &a))).or_else(|| Some(a))\n         });\n \n     match best_action {\n@@ -347,7 +347,7 @@ fn best_action_for_target<'b, 'a: 'b>(\n             let anchor = container\n                 .children()\n                 .find(|n| n.range().start() < anchor.range().start())\n-                .or(Some(anchor));\n+                .or_else(|| Some(anchor));\n \n             return ImportAction::add_new_use(anchor, false);\n         }"}, {"sha": "4eb24d27f7c48251c3c234da22cefcb722797150", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -59,7 +59,7 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n         })\n         .next()\n         .map(|it| it.range().start())\n-        .unwrap_or(node.range().start())\n+        .unwrap_or_else(|| node.range().start())\n }\n \n fn change_vis(mut ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Option<Assist> {"}, {"sha": "28467d3413bb132fd5f19a7e0bba75ac153dd57c", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -57,9 +57,9 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             if text.starts_with(\"\\r\\n\") {\n                 buf.push_str(\"\\r\\n\");\n                 buf.push_str(text.trim_start_matches(\"\\r\\n\"));\n-            } else if text.starts_with(\"\\n\") {\n+            } else if text.starts_with('\\n') {\n                 buf.push_str(\"\\n\");\n-                buf.push_str(text.trim_start_matches(\"\\n\"));\n+                buf.push_str(text.trim_start_matches('\\n'));\n             } else {\n                 buf.push_str(text);\n             }"}, {"sha": "a445dcb4d4cbe0d3a2f64d49ddd343c8587534e9", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -34,10 +34,10 @@ impl salsa::Database for BatchDatabase {\n }\n \n fn vfs_file_to_id(f: ra_vfs::VfsFile) -> FileId {\n-    FileId(f.0.into())\n+    FileId(f.0)\n }\n fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n-    SourceRootId(r.0.into())\n+    SourceRootId(r.0)\n }\n \n impl BatchDatabase {"}, {"sha": "8bb524ce30af02755e5e03b5127bc5f058095e0f", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -31,18 +31,16 @@ pub fn run(verbose: bool, path: &str, only: Option<&str>) -> Result<()> {\n \n             for decl in module.declarations(&db) {\n                 num_decls += 1;\n-                match decl {\n-                    ModuleDef::Function(f) => funcs.push(f),\n-                    _ => {}\n+                if let ModuleDef::Function(f) = decl {\n+                    funcs.push(f);\n                 }\n             }\n \n             for impl_block in module.impl_blocks(&db) {\n                 for item in impl_block.items(&db) {\n                     num_decls += 1;\n-                    match item {\n-                        ImplItem::Method(f) => funcs.push(f),\n-                        _ => {}\n+                    if let ImplItem::Method(f) = item {\n+                        funcs.push(f);\n                     }\n                 }\n             }"}, {"sha": "38ff1d6f63aac28ef222db4d8880dbe450702a97", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -36,7 +36,7 @@ impl AdtDef {\n \n impl Struct {\n     pub(crate) fn variant_data(&self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data((*self).into()).variant_data.clone()\n+        db.struct_data(*self).variant_data.clone()\n     }\n }\n "}, {"sha": "6ee6bd627d722a6fb3b3d386a37c2f3c28e97042", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -281,9 +281,8 @@ impl Module {\n \n         for impl_block in self.impl_blocks(db) {\n             for item in impl_block.items(db) {\n-                match item {\n-                    crate::ImplItem::Method(f) => f.diagnostics(db, sink),\n-                    _ => (),\n+                if let crate::ImplItem::Method(f) = item {\n+                    f.diagnostics(db, sink);\n                 }\n             }\n         }"}, {"sha": "a1b2641da1bee6c5117e5aec93f1aa8ca2e53867", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -31,11 +31,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     pub(crate) fn validate_body(&mut self, db: &impl HirDatabase) {\n         let body = self.func.body(db);\n         for e in body.exprs() {\n-            match e {\n-                (id, Expr::StructLit { path, fields, spread }) => {\n-                    self.validate_struct_literal(id, path, fields, spread, db)\n-                }\n-                _ => (),\n+            if let (id, Expr::StructLit { path, fields, spread }) = e {\n+                self.validate_struct_literal(id, path, fields, spread, db);\n             }\n         }\n     }\n@@ -44,7 +41,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         &mut self,\n         id: ExprId,\n         _path: &Option<Path>,\n-        fields: &Vec<StructLitField>,\n+        fields: &[StructLitField],\n         spread: &Option<ExprId>,\n         db: &impl HirDatabase,\n     ) {\n@@ -57,7 +54,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             _ => return,\n         };\n \n-        let lit_fields: FxHashSet<_> = fields.into_iter().map(|f| &f.name).collect();\n+        let lit_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n         let missed_fields: Vec<Name> = struct_def\n             .fields(db)\n             .iter()"}, {"sha": "a0d3b33fe67a87fc6f17df3c7a984a23824c831e", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -202,7 +202,6 @@ impl ModuleImplBlocks {\n         };\n \n         let (file_id, module_source) = m.module.definition_source(db);\n-        let file_id: HirFileId = file_id.into();\n         let node = match &module_source {\n             ModuleSource::SourceFile(node) => node.syntax(),\n             ModuleSource::Module(node) => {"}, {"sha": "684fbc0685fce3264ea3e399525a230286de69bb", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -95,7 +95,7 @@ impl LangItems {\n                 .nth(0);\n             if let Some(lang_item_name) = lang_item_name {\n                 let imp = ImplBlock::from_id(*module, impl_id);\n-                self.items.entry(lang_item_name).or_insert(LangItemTarget::ImplBlock(imp));\n+                self.items.entry(lang_item_name).or_insert_with(|| LangItemTarget::ImplBlock(imp));\n             }\n         }\n "}, {"sha": "8b798d6c9a9f4f29c0f50022de0e4bb7dbfaf57d", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -332,7 +332,8 @@ impl CrateDefMap {\n         let name = path.expand_macro_expr()?;\n         // search local first\n         // FIXME: Remove public_macros check when we have a correct local_macors implementation\n-        let local = self.public_macros.get(&name).or(self.local_macros.get(&name)).map(|it| *it);\n+        let local =\n+            self.public_macros.get(&name).or_else(|| self.local_macros.get(&name)).map(|it| *it);\n         if local.is_some() {\n             return local;\n         }\n@@ -405,7 +406,7 @@ impl CrateDefMap {\n         };\n \n         for (i, segment) in segments {\n-            let curr = match curr_per_ns.as_ref().left().map_or(None, |m| m.as_ref().take_types()) {\n+            let curr = match curr_per_ns.as_ref().left().and_then(|m| m.as_ref().take_types()) {\n                 Some(r) => r,\n                 None => {\n                     // we still have path segments left, but the path so far\n@@ -421,10 +422,8 @@ impl CrateDefMap {\n             curr_per_ns = match curr {\n                 ModuleDef::Module(module) => {\n                     if module.krate != self.krate {\n-                        let path = Path {\n-                            segments: path.segments[i..].iter().cloned().collect(),\n-                            kind: PathKind::Self_,\n-                        };\n+                        let path =\n+                            Path { segments: path.segments[i..].to_vec(), kind: PathKind::Self_ };\n                         log::debug!(\"resolving {:?} in other crate\", path);\n                         let defp_map = db.crate_def_map(module.krate);\n                         let (def, s) =\n@@ -468,7 +467,7 @@ impl CrateDefMap {\n                     );\n \n                     return ResolvePathResult::with(\n-                        Either::Left(PerNs::types((*s).into())),\n+                        Either::Left(PerNs::types(*s)),\n                         ReachedFixedPoint::Yes,\n                         Some(i),\n                     );\n@@ -479,8 +478,10 @@ impl CrateDefMap {\n     }\n \n     fn resolve_name_in_crate_root_or_extern_prelude(&self, name: &Name) -> ItemOrMacro {\n-        let from_crate_root =\n-            self[self.root].scope.get_item_or_macro(name).unwrap_or(Either::Left(PerNs::none()));\n+        let from_crate_root = self[self.root]\n+            .scope\n+            .get_item_or_macro(name)\n+            .unwrap_or_else(|| Either::Left(PerNs::none()));\n         let from_extern_prelude = self.resolve_name_in_extern_prelude(name);\n \n         or(from_crate_root, Either::Left(from_extern_prelude))\n@@ -505,8 +506,10 @@ impl CrateDefMap {\n         //  - current module / scope\n         //  - extern prelude\n         //  - std prelude\n-        let from_scope =\n-            self[module].scope.get_item_or_macro(name).unwrap_or(Either::Left(PerNs::none()));;\n+        let from_scope = self[module]\n+            .scope\n+            .get_item_or_macro(name)\n+            .unwrap_or_else(|| Either::Left(PerNs::none()));;\n         let from_extern_prelude =\n             self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it));\n         let from_prelude = self.resolve_in_prelude(db, name);\n@@ -525,7 +528,7 @@ impl CrateDefMap {\n             } else {\n                 db.crate_def_map(prelude.krate)[prelude.module_id].scope.get_item_or_macro(name)\n             };\n-            resolution.unwrap_or(Either::Left(PerNs::none()))\n+            resolution.unwrap_or_else(|| Either::Left(PerNs::none()))\n         } else {\n             Either::Left(PerNs::none())\n         }"}, {"sha": "3bfef799dac2136617b2ab97c24aa560301da776", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -556,7 +556,7 @@ where\n \n     fn define_def(&mut self, def: &raw::DefData) {\n         let module = Module { krate: self.def_collector.def_map.krate, module_id: self.module_id };\n-        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id.into());\n+        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n \n         macro_rules! def {\n             ($kind:ident, $ast_id:ident) => {"}, {"sha": "a0afe282c15e1e0461a1c4c8c922c4845f504161", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -69,7 +69,7 @@ impl RawItems {\n     ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n-            source_ast_id_map: db.ast_id_map(file_id.into()),\n+            source_ast_id_map: db.ast_id_map(file_id),\n             source_map: ImportSourceMap::default(),\n         };\n         if let Some(node) = db.parse_or_expand(file_id) {"}, {"sha": "67afd5027a9a3ddde389b3d6431dc6917ef1ed0e", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -116,7 +116,7 @@ impl Path {\n \n     /// `true` if this path is just a standalone `self`\n     pub fn is_self(&self) -> bool {\n-        self.kind == PathKind::Self_ && self.segments.len() == 0\n+        self.kind == PathKind::Self_ && self.segments.is_empty()\n     }\n \n     /// If this path is a single identifier, like `foo`, return its name.\n@@ -140,7 +140,7 @@ impl GenericArgs {\n             args.push(GenericArg::Type(type_ref));\n         }\n         // lifetimes and assoc type args ignored for now\n-        if args.len() > 0 {\n+        if !args.is_empty() {\n             Some(GenericArgs { args })\n         } else {\n             None"}, {"sha": "6a579962294ab67cd9242723da72970f9f1a7338", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -48,8 +48,8 @@ pub fn module_from_declaration(\n pub fn module_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Module> {\n     let file = db.parse(position.file_id).tree;\n     match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n-        Some(m) if !m.has_semi() => module_from_inline(db, position.file_id.into(), m),\n-        _ => module_from_file_id(db, position.file_id.into()),\n+        Some(m) if !m.has_semi() => module_from_inline(db, position.file_id, m),\n+        _ => module_from_file_id(db, position.file_id),\n     }\n }\n \n@@ -72,9 +72,9 @@ pub fn module_from_child_node(\n     child: &SyntaxNode,\n ) -> Option<Module> {\n     if let Some(m) = child.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi()) {\n-        module_from_inline(db, file_id.into(), m)\n+        module_from_inline(db, file_id, m)\n     } else {\n-        module_from_file_id(db, file_id.into())\n+        module_from_file_id(db, file_id)\n     }\n }\n \n@@ -99,14 +99,12 @@ pub fn struct_from_module(\n     struct_def: &ast::StructDef,\n ) -> Struct {\n     let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n     let ctx = LocationCtx::new(db, module, file_id);\n     Struct { id: ctx.to_def(struct_def) }\n }\n \n pub fn enum_from_module(db: &impl HirDatabase, module: Module, enum_def: &ast::EnumDef) -> Enum {\n     let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n     let ctx = LocationCtx::new(db, module, file_id);\n     Enum { id: ctx.to_def(enum_def) }\n }\n@@ -117,7 +115,6 @@ pub fn trait_from_module(\n     trait_def: &ast::TraitDef,\n ) -> Trait {\n     let (file_id, _) = module.definition_source(db);\n-    let file_id = file_id.into();\n     let ctx = LocationCtx::new(db, module, file_id);\n     Trait { id: ctx.to_def(trait_def) }\n }"}, {"sha": "967654e97e7336696fb2ec20af72aecff875bcfa", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -77,13 +77,10 @@ impl TraitItemsIndex {\n     pub(crate) fn trait_items_index(db: &impl DefDatabase, module: Module) -> TraitItemsIndex {\n         let mut index = TraitItemsIndex { traits_by_def: FxHashMap::default() };\n         for decl in module.declarations(db) {\n-            match decl {\n-                crate::ModuleDef::Trait(tr) => {\n-                    for item in tr.trait_data(db).items() {\n-                        index.traits_by_def.insert(*item, tr);\n-                    }\n+            if let crate::ModuleDef::Trait(tr) = decl {\n+                for item in tr.trait_data(db).items() {\n+                    index.traits_by_def.insert(*item, tr);\n                 }\n-                _ => {}\n             }\n         }\n         index"}, {"sha": "4a37e02684d434aa2dfa5e0d1761a41b3ea938d4", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -451,7 +451,7 @@ impl Ty {\n     /// Substitutes `Ty::Bound` vars (as opposed to type parameters).\n     pub fn subst_bound_vars(self, substs: &Substs) -> Ty {\n         self.fold(&mut |ty| match ty {\n-            Ty::Bound(idx) => substs.get(idx as usize).cloned().unwrap_or(Ty::Bound(idx)),\n+            Ty::Bound(idx) => substs.get(idx as usize).cloned().unwrap_or_else(|| Ty::Bound(idx)),\n             ty => ty,\n         })\n     }"}, {"sha": "905fe9f0e3dabaef96ddd73df43e3bc2b1fb425b", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -462,7 +462,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let mut resolved =\n             if remaining_index.is_none() { def.take_values()? } else { def.take_types()? };\n \n-        let remaining_index = remaining_index.unwrap_or(path.segments.len());\n+        let remaining_index = remaining_index.unwrap_or_else(|| path.segments.len());\n         let mut actual_def_ty: Option<Ty> = None;\n \n         let krate = resolver.krate()?;\n@@ -539,7 +539,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n             })?;\n \n-            resolved = Resolution::Def(item.into());\n+            resolved = Resolution::Def(item);\n         }\n \n         match resolved {\n@@ -762,7 +762,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     _ => &Ty::Unknown,\n                 };\n                 let subty = self.infer_pat(*pat, expectation, default_bm);\n-                Ty::apply_one(TypeCtor::Ref(*mutability), subty.into())\n+                Ty::apply_one(TypeCtor::Ref(*mutability), subty)\n             }\n             Pat::TupleStruct { path: ref p, args: ref subpats } => {\n                 self.infer_tuple_struct_pat(p.as_ref(), subpats, expected, default_bm)\n@@ -790,7 +790,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 let bound_ty = match mode {\n                     BindingMode::Ref(mutability) => {\n-                        Ty::apply_one(TypeCtor::Ref(mutability), inner_ty.clone().into())\n+                        Ty::apply_one(TypeCtor::Ref(mutability), inner_ty.clone())\n                     }\n                     BindingMode::Move => inner_ty.clone(),\n                 };\n@@ -848,28 +848,23 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n-        match callable_ty {\n-            Ty::Apply(a_ty) => match a_ty.ctor {\n-                TypeCtor::FnDef(def) => {\n-                    // add obligation for trait implementation, if this is a trait method\n-                    // FIXME also register obligations from where clauses from the trait or impl and method\n-                    match def {\n-                        CallableDef::Function(f) => {\n-                            if let Some(trait_) = f.parent_trait(self.db) {\n-                                // construct a TraitDef\n-                                let substs = a_ty.parameters.prefix(\n-                                    trait_.generic_params(self.db).count_params_including_parent(),\n-                                );\n-                                self.obligations\n-                                    .push(Obligation::Trait(TraitRef { trait_, substs }));\n-                            }\n+        if let Ty::Apply(a_ty) = callable_ty {\n+            if let TypeCtor::FnDef(def) = a_ty.ctor {\n+                // add obligation for trait implementation, if this is a trait method\n+                // FIXME also register obligations from where clauses from the trait or impl and method\n+                match def {\n+                    CallableDef::Function(f) => {\n+                        if let Some(trait_) = f.parent_trait(self.db) {\n+                            // construct a TraitDef\n+                            let substs = a_ty.parameters.prefix(\n+                                trait_.generic_params(self.db).count_params_including_parent(),\n+                            );\n+                            self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n                         }\n-                        CallableDef::Struct(_) | CallableDef::EnumVariant(_) => {}\n                     }\n+                    CallableDef::Struct(_) | CallableDef::EnumVariant(_) => {}\n                 }\n-                _ => {}\n-            },\n-            _ => {}\n+            }\n         }\n     }\n \n@@ -1049,7 +1044,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::StructLit { path, fields, spread } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_ref());\n                 let substs = ty.substs().unwrap_or_else(Substs::empty);\n-                for (field_idx, field) in fields.into_iter().enumerate() {\n+                for (field_idx, field) in fields.iter().enumerate() {\n                     let field_ty = def_id\n                         .and_then(|it| match it.field(self.db, &field.name) {\n                             Some(field) => Some(field),"}, {"sha": "646e58aa915db6e0753e21acfa06d6cf651ffd51", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -192,23 +192,20 @@ fn iterate_trait_method_candidates<T>(\n         // iteration\n         let mut known_implemented = false;\n         for item in data.items() {\n-            match item {\n-                &TraitItem::Function(m) => {\n-                    let sig = m.signature(db);\n-                    if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n-                        if !known_implemented {\n-                            let trait_ref = canonical_trait_ref(db, t, ty.clone());\n-                            if db.implements(krate, trait_ref).is_none() {\n-                                continue 'traits;\n-                            }\n-                        }\n-                        known_implemented = true;\n-                        if let Some(result) = callback(&ty.value, m) {\n-                            return Some(result);\n+            if let TraitItem::Function(m) = *item {\n+                let sig = m.signature(db);\n+                if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n+                    if !known_implemented {\n+                        let trait_ref = canonical_trait_ref(db, t, ty.clone());\n+                        if db.implements(krate, trait_ref).is_none() {\n+                            continue 'traits;\n                         }\n                     }\n+                    known_implemented = true;\n+                    if let Some(result) = callback(&ty.value, m) {\n+                        return Some(result);\n+                    }\n                 }\n-                _ => {}\n             }\n         }\n     }\n@@ -230,16 +227,13 @@ fn iterate_inherent_methods<T>(\n \n     for impl_block in impls.lookup_impl_blocks(&ty.value) {\n         for item in impl_block.items(db) {\n-            match item {\n-                ImplItem::Method(f) => {\n-                    let sig = f.signature(db);\n-                    if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n-                        if let Some(result) = callback(&ty.value, f) {\n-                            return Some(result);\n-                        }\n+            if let ImplItem::Method(f) = item {\n+                let sig = f.signature(db);\n+                if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n+                    if let Some(result) = callback(&ty.value, f) {\n+                        return Some(result);\n                     }\n                 }\n-                _ => {}\n             }\n         }\n     }"}, {"sha": "1e4806db0e58e1af1c43d48ce5d4087ea02ae6df", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -211,13 +211,10 @@ fn convert_where_clauses(\n             // anyway), otherwise Chalk can easily get into slow situations\n             return vec![pred.clone().subst(substs).to_chalk(db)];\n         }\n-        match pred {\n-            GenericPredicate::Implemented(trait_ref) => {\n-                if blacklisted_trait(db, trait_ref.trait_) {\n-                    continue;\n-                }\n+        if let GenericPredicate::Implemented(trait_ref) = pred {\n+            if blacklisted_trait(db, trait_ref.trait_) {\n+                continue;\n             }\n-            _ => {}\n         }\n         result.push(pred.clone().subst(substs).to_chalk(db));\n     }"}, {"sha": "bd08e183db924ca9951d7d1e4f26f162dbcf68d4", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -21,8 +21,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let function = match calling_node {\n         FnCallNode::CallExpr(expr) => {\n             //FIXME: apply subst\n-            let (callable_def, _subst) =\n-                analyzer.type_of(db, expr.expr()?.into())?.as_callable()?;\n+            let (callable_def, _subst) = analyzer.type_of(db, expr.expr()?)?.as_callable()?;\n             match callable_def {\n                 hir::CallableDef::Function(it) => it,\n                 //FIXME: handle other callables\n@@ -64,7 +63,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n \n             // If we are in a method account for `self`\n             if has_self {\n-                param = param + 1;\n+                param += 1;\n             }\n \n             call_info.active_parameter = Some(param);"}, {"sha": "0822a0e7ec18bbd5256d807af1f0af1d9e8ef0c7", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -16,8 +16,8 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n \n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n     for receiver in receiver.autoderef(ctx.db) {\n-        match receiver {\n-            Ty::Apply(a_ty) => match a_ty.ctor {\n+        if let Ty::Apply(a_ty) = receiver {\n+            match a_ty.ctor {\n                 TypeCtor::Adt(AdtDef::Struct(s)) => {\n                     for field in s.fields(ctx.db) {\n                         acc.add_field(ctx, field, &a_ty.parameters);\n@@ -30,8 +30,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n                     }\n                 }\n                 _ => {}\n-            },\n-            _ => {}\n+            }\n         };\n     }\n }"}, {"sha": "6655a05a7c80b69f86a376248fafff71f0b73414", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -10,7 +10,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     let names = ctx.analyzer.all_names(ctx.db);\n     for (name, res) in names.into_iter() {\n         let r = res.as_ref();\n-        let def = match r.take_types().or(r.take_values()) {\n+        let def = match r.take_types().or_else(|| r.take_values()) {\n             Some(hir::Resolution::Def(def)) => def,\n             _ => continue,\n         };"}, {"sha": "0f8cfaae80c2f12da71bdf9b40e68d27d048a30e", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -49,7 +49,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n }\n \n-fn build_import_label(name: &str, path: &Vec<SmolStr>) -> String {\n+fn build_import_label(name: &str, path: &[SmolStr]) -> String {\n     let mut buf = String::with_capacity(64);\n     buf.push_str(name);\n     buf.push_str(\" (\");\n@@ -58,7 +58,7 @@ fn build_import_label(name: &str, path: &Vec<SmolStr>) -> String {\n     buf\n }\n \n-fn fmt_import_path(path: &Vec<SmolStr>, buf: &mut String) {\n+fn fmt_import_path(path: &[SmolStr], buf: &mut String) {\n     let mut segments = path.iter();\n     if let Some(s) = segments.next() {\n         buf.push_str(&s);"}, {"sha": "35b3d77df3184d05d549e290782a6d7d236879cb", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -109,7 +109,7 @@ fn check_unnecessary_braces_in_use_statement(\n \n         acc.push(Diagnostic {\n             range,\n-            message: format!(\"Unnecessary braces in use statement\"),\n+            message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n             fix: Some(SourceChange::source_file_edit(\n                 \"Remove unnecessary braces\",\n@@ -155,7 +155,7 @@ fn check_struct_shorthand_initialization(\n \n                 acc.push(Diagnostic {\n                     range: named_field.syntax().range(),\n-                    message: format!(\"Shorthand struct initialization\"),\n+                    message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n                     fix: Some(SourceChange::source_file_edit(\n                         \"use struct shorthand initialization\","}, {"sha": "a713b762cf5183b8e454990a411193086212348e", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -95,7 +95,7 @@ fn extend_single_word_in_comment_or_string(\n     }\n \n     let start_idx = before.rfind(non_word_char)? as u32;\n-    let end_idx = after.find(non_word_char).unwrap_or(after.len()) as u32;\n+    let end_idx = after.find(non_word_char).unwrap_or_else(|| after.len()) as u32;\n \n     let from: TextUnit = (start_idx + 1).into();\n     let to: TextUnit = (cursor_position + end_idx).into();"}, {"sha": "4400ff2323e5455699f85fd0ad1fd23873f73659", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -205,7 +205,7 @@ mod tests {\n             \"The amount of fold kinds is different than the expected amount\"\n         );\n         for ((fold, range), fold_kind) in\n-            folds.into_iter().zip(ranges.into_iter()).zip(fold_kinds.into_iter())\n+            folds.iter().zip(ranges.into_iter()).zip(fold_kinds.iter())\n         {\n             assert_eq!(fold.range.start(), range.start());\n             assert_eq!(fold.range.end(), range.end());"}, {"sha": "f56965ef5add7162cb1773072940fb02820ba542", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -18,6 +18,12 @@ pub struct HoverResult {\n     exact: bool,\n }\n \n+impl Default for HoverResult {\n+    fn default() -> Self {\n+        HoverResult::new()\n+    }\n+}\n+\n impl HoverResult {\n     pub fn new() -> HoverResult {\n         HoverResult {"}, {"sha": "087dfafed826b61dfde4a3db39695c06f1ed2336", "filename": "crates/ra_ide_api/src/line_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -41,7 +41,7 @@ impl LineIndex {\n                 newlines.push(curr_row);\n \n                 // Save any utf-16 characters seen in the previous line\n-                if utf16_chars.len() > 0 {\n+                if !utf16_chars.is_empty() {\n                     utf16_lines.insert(line, utf16_chars);\n                     utf16_chars = Vec::new();\n                 }\n@@ -61,7 +61,7 @@ impl LineIndex {\n         }\n \n         // Save any utf-16 characters seen in the last line\n-        if utf16_chars.len() > 0 {\n+        if !utf16_chars.is_empty() {\n             utf16_lines.insert(line, utf16_chars);\n         }\n "}, {"sha": "a03467011d8d9cd76f636a832371fb8ca8ef49e7", "filename": "crates/ra_ide_api/src/line_index_utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -133,9 +133,9 @@ impl<'a> Edits<'a> {\n     }\n \n     fn next_steps(&mut self, step: &Step) -> NextSteps {\n-        let step_pos = match step {\n-            &Step::Newline(n) => n,\n-            &Step::Utf16Char(r) => r.end(),\n+        let step_pos = match *step {\n+            Step::Newline(n) => n,\n+            Step::Utf16Char(r) => r.end(),\n         };\n         let res = match &mut self.current {\n             Some(edit) => {\n@@ -181,9 +181,9 @@ impl<'a> Edits<'a> {\n         if self.acc_diff == 0 {\n             x.clone()\n         } else {\n-            match x {\n-                &Step::Newline(n) => Step::Newline(self.translate(n)),\n-                &Step::Utf16Char(r) => Step::Utf16Char(self.translate_range(r)),\n+            match *x {\n+                Step::Newline(n) => Step::Newline(self.translate(n)),\n+                Step::Utf16Char(r) => Step::Utf16Char(self.translate_range(r)),\n             }\n         }\n     }"}, {"sha": "3e35d835239ad385278c1da74f4d6d5299175437", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -110,7 +110,7 @@ pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<\n     let mut edit = TextEditBuilder::default();\n     edit.replace(\n         TextRange::from_to(position.offset - current_indent_len, position.offset),\n-        target_indent.into(),\n+        target_indent,\n     );\n \n     let res = SourceChange::source_file_edit_from(\"reindent dot\", position.file_id, edit.finish())"}, {"sha": "082ac8609c436948a0a789a0ecdaa1cb448c4e04", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -64,7 +64,7 @@ impl CargoTargetSpec {\n             None => return Ok(None),\n         };\n         let file_id = world.analysis().crate_root(crate_id)?;\n-        let path = world.vfs.read().file2path(ra_vfs::VfsFile(file_id.0.into()));\n+        let path = world.vfs.read().file2path(ra_vfs::VfsFile(file_id.0));\n         let res = world.workspaces.iter().find_map(|ws| match ws {\n             project_model::ProjectWorkspace::Cargo { cargo, .. } => {\n                 let tgt = cargo.target_by_root(&path)?;"}, {"sha": "a0df32dde618cdbb5221f254961790dd56df3d8d", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -49,7 +49,7 @@ fn main_inner() -> Result<()> {\n         let opts = params\n             .initialization_options\n             .and_then(|v| InitializationOptions::deserialize(v).ok())\n-            .unwrap_or(InitializationOptions::default());\n+            .unwrap_or_default();\n \n         ra_lsp_server::main_loop(workspace_roots, opts, r, s)\n     })?;"}, {"sha": "090fb9b1b00990caa06edbe4678278a0413179c1", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -384,7 +384,7 @@ fn on_notification(\n             if let Some(file_id) =\n                 state.vfs.write().add_file_overlay(&path, params.text_document.text)\n             {\n-                subs.add_sub(FileId(file_id.0.into()));\n+                subs.add_sub(FileId(file_id.0));\n             }\n             return Ok(());\n         }\n@@ -406,7 +406,7 @@ fn on_notification(\n             let uri = params.text_document.uri;\n             let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) = state.vfs.write().remove_file_overlay(path.as_path()) {\n-                subs.remove_sub(FileId(file_id.0.into()));\n+                subs.remove_sub(FileId(file_id.0));\n             }\n             let params = req::PublishDiagnosticsParams { uri, diagnostics: Vec::new() };\n             let not = RawNotification::new::<req::PublishDiagnostics>(&params);"}, {"sha": "cd8df4fdba9d652b3d7846b0406bf01288261c15", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -60,14 +60,14 @@ impl WorldState {\n         for r in vfs_roots {\n             let vfs_root_path = vfs.root2path(r);\n             let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n-            change.add_root(SourceRootId(r.0.into()), is_local);\n+            change.add_root(SourceRootId(r.0), is_local);\n         }\n \n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();\n         let mut load = |path: &std::path::Path| {\n             let vfs_file = vfs.load(path);\n-            vfs_file.map(|f| FileId(f.0.into()))\n+            vfs_file.map(|f| FileId(f.0))\n         };\n         for ws in workspaces.iter() {\n             crate_graph.extend(ws.to_crate_graph(&mut load));\n@@ -105,29 +105,24 @@ impl WorldState {\n                     if is_local {\n                         self.roots_to_scan -= 1;\n                         for (file, path, text) in files {\n-                            change.add_file(\n-                                SourceRootId(root.0.into()),\n-                                FileId(file.0.into()),\n-                                path,\n-                                text,\n-                            );\n+                            change.add_file(SourceRootId(root.0), FileId(file.0), path, text);\n                         }\n                     } else {\n                         let files = files\n                             .into_iter()\n-                            .map(|(vfsfile, path, text)| (FileId(vfsfile.0.into()), path, text))\n+                            .map(|(vfsfile, path, text)| (FileId(vfsfile.0), path, text))\n                             .collect();\n-                        libs.push((SourceRootId(root.0.into()), files));\n+                        libs.push((SourceRootId(root.0), files));\n                     }\n                 }\n                 VfsChange::AddFile { root, file, path, text } => {\n-                    change.add_file(SourceRootId(root.0.into()), FileId(file.0.into()), path, text);\n+                    change.add_file(SourceRootId(root.0), FileId(file.0), path, text);\n                 }\n                 VfsChange::RemoveFile { root, file, path } => {\n-                    change.remove_file(SourceRootId(root.0.into()), FileId(file.0.into()), path)\n+                    change.remove_file(SourceRootId(root.0), FileId(file.0), path)\n                 }\n                 VfsChange::ChangeFile { file, text } => {\n-                    change.change_file(FileId(file.0.into()), text);\n+                    change.change_file(FileId(file.0), text);\n                 }\n             }\n         }\n@@ -178,18 +173,18 @@ impl WorldSnapshot {\n                 message: \"Rust file outside current workspace is not supported yet.\".to_string(),\n             })\n         })?;\n-        Ok(FileId(file.0.into()))\n+        Ok(FileId(file.0))\n     }\n \n     pub fn file_id_to_uri(&self, id: FileId) -> Result<Url> {\n-        let path = self.vfs.read().file2path(VfsFile(id.0.into()));\n+        let path = self.vfs.read().file2path(VfsFile(id.0));\n         let url = Url::from_file_path(&path)\n             .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n         Ok(url)\n     }\n \n     pub fn path_to_uri(&self, root: SourceRootId, path: &RelativePathBuf) -> Result<Url> {\n-        let base = self.vfs.read().root2path(VfsRoot(root.0.into()));\n+        let base = self.vfs.read().root2path(VfsRoot(root.0));\n         let path = path.to_path(base);\n         let url = Url::from_file_path(&path)\n             .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n@@ -212,7 +207,7 @@ impl WorldSnapshot {\n     }\n \n     pub fn workspace_root_for(&self, file_id: FileId) -> Option<&Path> {\n-        let path = self.vfs.read().file2path(VfsFile(file_id.0.into()));\n+        let path = self.vfs.read().file2path(VfsFile(file_id.0));\n         self.workspaces.iter().find_map(|ws| ws.workspace_root_for(&path))\n     }\n }"}, {"sha": "75912afdd45bf98a63210706fa6ac441d3cd6715", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -94,14 +94,9 @@ impl Server {\n         let worker = Worker::<RawMessage, RawMessage>::spawn(\n             \"test server\",\n             128,\n-            move |mut msg_receiver, mut msg_sender| {\n-                main_loop(\n-                    roots,\n-                    InitializationOptions::default(),\n-                    &mut msg_receiver,\n-                    &mut msg_sender,\n-                )\n-                .unwrap()\n+            move |msg_receiver, msg_sender| {\n+                main_loop(roots, InitializationOptions::default(), &msg_receiver, &msg_sender)\n+                    .unwrap()\n             },\n         );\n         let res = Server { req_id: Cell::new(1), dir, messages: Default::default(), worker };\n@@ -141,15 +136,14 @@ impl Server {\n         R::Params: Serialize,\n     {\n         let actual = self.send_request::<R>(params);\n-        match find_mismatch(&expected_resp, &actual) {\n-            Some((expected_part, actual_part)) => panic!(\n+        if let Some((expected_part, actual_part)) = find_mismatch(&expected_resp, &actual) {\n+            panic!(\n                 \"JSON mismatch\\nExpected:\\n{}\\nWas:\\n{}\\nExpected part:\\n{}\\nActual part:\\n{}\\n\",\n                 to_string_pretty(&expected_resp).unwrap(),\n                 to_string_pretty(&actual).unwrap(),\n                 to_string_pretty(expected_part).unwrap(),\n                 to_string_pretty(actual_part).unwrap(),\n-            ),\n-            None => {}\n+            );\n         }\n     }\n "}, {"sha": "55a6ecf587ca2ab542ec32d9db8f71db6b7233ca", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -105,17 +105,15 @@ impl Bindings {\n     }\n \n     fn get(&self, name: &SmolStr, nesting: &[usize]) -> Result<&tt::TokenTree, ExpandError> {\n-        let mut b = self\n-            .inner\n-            .get(name)\n-            .ok_or(ExpandError::BindingError(format!(\"could not find binding `{}`\", name)))?;\n+        let mut b = self.inner.get(name).ok_or_else(|| {\n+            ExpandError::BindingError(format!(\"could not find binding `{}`\", name))\n+        })?;\n         for &idx in nesting.iter() {\n             b = match b {\n                 Binding::Simple(_) => break,\n-                Binding::Nested(bs) => bs.get(idx).ok_or(ExpandError::BindingError(format!(\n-                    \"could not find nested binding `{}`\",\n-                    name\n-                )))?,\n+                Binding::Nested(bs) => bs.get(idx).ok_or_else(|| {\n+                    ExpandError::BindingError(format!(\"could not find nested binding `{}`\", name))\n+                })?,\n                 Binding::Empty => {\n                     return Err(ExpandError::BindingError(format!(\n                         \"could not find empty binding `{}`\",\n@@ -206,48 +204,48 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                         \"path\" => {\n                             let path =\n                                 input.eat_path().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(path.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(path));\n                         }\n                         \"expr\" => {\n                             let expr =\n                                 input.eat_expr().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(expr.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(expr));\n                         }\n                         \"ty\" => {\n                             let ty = input.eat_ty().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(ty.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(ty));\n                         }\n                         \"pat\" => {\n                             let pat = input.eat_pat().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(pat.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(pat));\n                         }\n                         \"stmt\" => {\n                             let pat = input.eat_stmt().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(pat.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(pat));\n                         }\n                         \"block\" => {\n                             let block =\n                                 input.eat_block().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(block.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(block));\n                         }\n                         \"meta\" => {\n                             let meta =\n                                 input.eat_meta().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(meta.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(meta));\n                         }\n                         \"tt\" => {\n                             let token = input.eat().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(token.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(token));\n                         }\n                         \"item\" => {\n                             let item =\n                                 input.eat_item().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(item.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(item));\n                         }\n                         \"lifetime\" => {\n                             let lifetime =\n                                 input.eat_lifetime().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(lifetime.into()));\n+                            res.inner.insert(text.clone(), Binding::Simple(lifetime));\n                         }\n                         \"literal\" => {\n                             let literal =\n@@ -262,7 +260,7 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                             // `vis` is optional\n                             if let Some(vis) = input.try_eat_vis() {\n                                 let vis = vis.clone();\n-                                res.inner.insert(text.clone(), Binding::Simple(vis.into()));\n+                                res.inner.insert(text.clone(), Binding::Simple(vis));\n                             } else {\n                                 res.push_optional(&text);\n                             }\n@@ -452,7 +450,7 @@ fn expand_tt(\n \n                 let idx = ctx.nesting.pop().unwrap();\n                 ctx.nesting.push(idx + 1);\n-                token_trees.push(reduce_single_token(t).into());\n+                token_trees.push(reduce_single_token(t));\n \n                 if let Some(ref sep) = repeat.separator {\n                     match sep {"}, {"sha": "dca16b5376e8dc9ab629d50b05a276ea76a4379c", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -125,8 +125,8 @@ fn parse_repeat(p: &mut TtCursor, transcriber: bool) -> Result<crate::Repeat, Pa\n         }\n     }\n \n-    let sep = p.eat_seperator().ok_or(ParseError::Expected(String::from(\"separator\")))?;\n-    let rep = p.eat_punct().ok_or(ParseError::Expected(String::from(\"repeat\")))?;\n+    let sep = p.eat_seperator().ok_or_else(|| ParseError::Expected(String::from(\"separator\")))?;\n+    let rep = p.eat_punct().ok_or_else(|| ParseError::Expected(String::from(\"repeat\")))?;\n \n     mk_repeat(rep.char, subtree, Some(sep))\n }"}, {"sha": "9d3d2ad5bc5494d3c11b213e6fe13d326eb5defb", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -155,9 +155,10 @@ fn convert_doc_comment<'a>(token: &ra_syntax::SyntaxToken<'a>) -> Option<Vec<tt:\n     if let ast::CommentPlacement::Inner = doc {\n         token_trees.push(mk_punct('!'));\n     }\n-    token_trees.push(tt::TokenTree::from(tt::Subtree::from(\n-        tt::Subtree { delimiter: tt::Delimiter::Bracket, token_trees: meta_tkns }.into(),\n-    )));\n+    token_trees.push(tt::TokenTree::from(tt::Subtree {\n+        delimiter: tt::Delimiter::Bracket,\n+        token_trees: meta_tkns,\n+    }));\n \n     return Some(token_trees);\n \n@@ -292,7 +293,7 @@ fn delim_to_str(d: tt::Delimiter, closing: bool) -> SmolStr {\n     };\n \n     let idx = closing as usize;\n-    let text = if texts.len() > 0 { &texts[idx..texts.len() - (1 - idx)] } else { \"\" };\n+    let text = if !texts.is_empty() { &texts[idx..texts.len() - (1 - idx)] } else { \"\" };\n     text.into()\n }\n "}, {"sha": "5997636d6221f87b876d10f6d885e0678937f5bc", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -87,10 +87,8 @@ pub(crate) fn pattern(p: &mut Parser) {\n }\n \n pub(crate) fn stmt(p: &mut Parser, with_semi: bool) {\n-    let with_semi = match with_semi {\n-        true => expressions::StmtWithSemi::Yes,\n-        false => expressions::StmtWithSemi::No,\n-    };\n+    let with_semi =\n+        if with_semi { expressions::StmtWithSemi::Yes } else { expressions::StmtWithSemi::No };\n \n     expressions::stmt(p, with_semi)\n }"}, {"sha": "99e32c4e82321300ce769349e7a8df619014495d", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -454,6 +454,7 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n //     x.1i32;\n //     x.0x01;\n // }\n+#[allow(clippy::if_same_then_else)]\n fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]));\n     let m = lhs.precede(p);"}, {"sha": "5a165778881491fad19c40c6f5ffdfc3a7dc35d9", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -137,7 +137,7 @@ impl CargoWorkspace {\n         for meta_pkg in meta.packages {\n             let is_member = ws_members.contains(&meta_pkg.id);\n             let pkg = packages.alloc(PackageData {\n-                name: meta_pkg.name.into(),\n+                name: meta_pkg.name,\n                 manifest: meta_pkg.manifest_path.clone(),\n                 targets: Vec::new(),\n                 is_member,\n@@ -149,7 +149,7 @@ impl CargoWorkspace {\n             for meta_tgt in meta_pkg.targets {\n                 let tgt = targets.alloc(TargetData {\n                     pkg,\n-                    name: meta_tgt.name.into(),\n+                    name: meta_tgt.name,\n                     root: meta_tgt.src_path.clone(),\n                     kind: TargetKind::new(meta_tgt.kind.as_slice()),\n                 });\n@@ -160,8 +160,7 @@ impl CargoWorkspace {\n         for node in resolve.nodes {\n             let source = pkg_by_id[&node.id];\n             for dep_node in node.deps {\n-                let dep =\n-                    PackageDependency { name: dep_node.name.into(), pkg: pkg_by_id[&dep_node.pkg] };\n+                let dep = PackageDependency { name: dep_node.name, pkg: pkg_by_id[&dep_node.pkg] };\n                 packages[source].dependencies.push(dep);\n             }\n         }"}, {"sha": "4ae7f685c7184617837739f60d7960898f717714", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -70,7 +70,7 @@ impl ProjectRoot {\n             })\n         };\n \n-        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\n+        let hidden = dir_path.components().any(|c| c.as_str().starts_with('.'));\n \n         !is_ignored && !hidden\n     }"}, {"sha": "930b2d9fadf56ac4b122a76855b88e2af6c44ef5", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -78,7 +78,7 @@ impl ast::Attr {\n         if attr.kind() == IDENT {\n             let key = attr.as_token()?.text().clone();\n             let val_node = tt_node.children_with_tokens().find(|t| t.kind() == STRING)?;\n-            let val = val_node.as_token()?.text().trim_start_matches(\"\\\"\").trim_end_matches(\"\\\"\");\n+            let val = val_node.as_token()?.text().trim_start_matches('\"').trim_end_matches('\"');\n             Some((key, SmolStr::new(val)))\n         } else {\n             None"}, {"sha": "91dbcfae87f829f9eed6ab0bcc54fe709b864ff4", "filename": "crates/ra_syntax/src/validation/unescape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -255,7 +255,7 @@ where\n         let first_non_space = str\n             .bytes()\n             .position(|b| b != b' ' && b != b'\\t' && b != b'\\n' && b != b'\\r')\n-            .unwrap_or(str.len());\n+            .unwrap_or_else(|| str.len());\n         *chars = str[first_non_space..].chars()\n     }\n }"}, {"sha": "2dc0e71af2693201c6558a2637ca96dd7b4740d4", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -42,8 +42,8 @@ pub fn arb_text_edit(text: &str) -> BoxedStrategy<TextEdit> {\n         .prop_flat_map(|cuts| {\n             let strategies: Vec<_> = cuts\n                 .chunks(2)\n-                .map(|chunk| match chunk {\n-                    &[from, to] => {\n+                .map(|chunk| match *chunk {\n+                    [from, to] => {\n                         let range = TextRange::from_to(from, to);\n                         Just(AtomTextEdit::delete(range))\n                             .boxed()\n@@ -54,7 +54,7 @@ pub fn arb_text_edit(text: &str) -> BoxedStrategy<TextEdit> {\n                             )\n                             .boxed()\n                     }\n-                    &[x] => arb_text().prop_map(move |text| AtomTextEdit::insert(x, text)).boxed(),\n+                    [x] => arb_text().prop_map(move |text| AtomTextEdit::insert(x, text)).boxed(),\n                     _ => unreachable!(),\n                 })\n                 .collect();"}, {"sha": "5659aeae8bf0b5bf921d572f902afa3b809f474b", "filename": "crates/ra_tt/src/buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Fbuffer.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -179,6 +179,6 @@ impl<'a> Cursor<'a> {\n     /// Check whether it is a top level\n     pub fn is_root(&self) -> bool {\n         let entry_id = self.ptr.0;\n-        return entry_id.0 == 0;\n+        entry_id.0 == 0\n     }\n }"}, {"sha": "8bb3b3937f237eba6c24598b66c77b42a6a9cc2b", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -318,7 +318,7 @@ pub fn project_dir() -> PathBuf {\n /// so this should always be correct.\n pub fn read_text(path: &Path) -> String {\n     fs::read_to_string(path)\n-        .expect(&format!(\"File at {:?} should be valid\", path))\n+        .unwrap_or_else(|_| panic!(\"File at {:?} should be valid\", path))\n         .replace(\"\\r\\n\", \"\\n\")\n }\n "}, {"sha": "d8d0d9bf23a9872ecf7bc20534b7d43bc9be0278", "filename": "crates/thread_worker/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Fthread_worker%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Fthread_worker%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fthread_worker%2Fsrc%2Flib.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -19,13 +19,10 @@ impl Drop for ScopedThread {\n         log::info!(\".. {} terminated with {}\", name, if res.is_ok() { \"ok\" } else { \"err\" });\n \n         // escalate panic, but avoid aborting the process\n-        match res {\n-            Err(e) => {\n-                if !thread::panicking() {\n-                    panic!(e)\n-                }\n+        if let Err(e) = res {\n+            if !thread::panicking() {\n+                panic!(e)\n             }\n-            _ => (),\n         }\n     }\n }"}, {"sha": "2446fdf287a8144c6b433f1f774de5aec4f7a289", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -133,6 +133,40 @@ pub fn install_format_hook() -> Result<()> {\n     Ok(())\n }\n \n+pub fn run_clippy() -> Result<()> {\n+    match Command::new(\"rustup\")\n+        .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"clippy\", \"--version\"])\n+        .stderr(Stdio::null())\n+        .stdout(Stdio::null())\n+        .status()\n+    {\n+        Ok(status) if status.success() => (),\n+        _ => install_clippy()?,\n+    };\n+\n+    let allowed_lints = [\n+        \"clippy::collapsible_if\",\n+        \"clippy::map_clone\", // FIXME: remove when Iterator::copied stabilizes (1.36.0)\n+        \"clippy::needless_pass_by_value\",\n+        \"clippy::nonminimal_bool\",\n+        \"clippy::redundant_pattern_matching\",\n+    ];\n+    run(\n+        &format!(\n+            \"rustup run {} -- cargo clippy --all-features --all-targets -- -A {}\",\n+            TOOLCHAIN,\n+            allowed_lints.join(\" -A \")\n+        ),\n+        \".\",\n+    )?;\n+    Ok(())\n+}\n+\n+pub fn install_clippy() -> Result<()> {\n+    run(&format!(\"rustup install {}\", TOOLCHAIN), \".\")?;\n+    run(&format!(\"rustup component add clippy --toolchain {}\", TOOLCHAIN), \".\")\n+}\n+\n pub fn run_fuzzer() -> Result<()> {\n     match Command::new(\"cargo\")\n         .args(&[\"fuzz\", \"--help\"])"}, {"sha": "8027ff833e2f8b642f37be18dcd6cf78002f0b08", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deb907b4321d8328978d3322b0826b781814452/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deb907b4321d8328978d3322b0826b781814452/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=5deb907b4321d8328978d3322b0826b781814452", "patch": "@@ -3,7 +3,7 @@ use core::str;\n use failure::bail;\n use tools::{\n     generate, gen_tests, install_format_hook, run, run_with_output, run_rustfmt,\n-    Overwrite, Result, run_fuzzer,\n+    Overwrite, Result, run_fuzzer, run_clippy,\n };\n use std::{path::{PathBuf}, env};\n \n@@ -16,6 +16,7 @@ fn main() -> Result<()> {\n         .subcommand(SubCommand::with_name(\"format\"))\n         .subcommand(SubCommand::with_name(\"format-hook\"))\n         .subcommand(SubCommand::with_name(\"fuzz-tests\"))\n+        .subcommand(SubCommand::with_name(\"lint\"))\n         .get_matches();\n     match matches.subcommand_name().expect(\"Subcommand must be specified\") {\n         \"install-code\" => {\n@@ -28,6 +29,7 @@ fn main() -> Result<()> {\n         \"gen-syntax\" => generate(Overwrite)?,\n         \"format\" => run_rustfmt(Overwrite)?,\n         \"format-hook\" => install_format_hook()?,\n+        \"lint\" => run_clippy()?,\n         \"fuzz-tests\" => run_fuzzer()?,\n         _ => unreachable!(),\n     }\n@@ -82,7 +84,7 @@ fn fix_path_for_mac() -> Result<()> {\n \n         [ROOT_DIR, &home_dir]\n             .iter()\n-            .map(|dir| String::from(dir.clone()) + COMMON_APP_PATH)\n+            .map(|dir| String::from(*dir) + COMMON_APP_PATH)\n             .map(PathBuf::from)\n             .filter(|path| path.exists())\n             .collect()"}]}