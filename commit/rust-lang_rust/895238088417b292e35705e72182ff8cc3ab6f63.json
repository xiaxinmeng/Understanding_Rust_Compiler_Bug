{"sha": "895238088417b292e35705e72182ff8cc3ab6f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NTIzODA4ODQxN2IyOTJlMzU3MDVlNzIxODJmZjhjYzNhYjZmNjM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-01T19:01:21Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-01T19:01:21Z"}, "message": "Change SourceAnalyzer method resoltion API", "tree": {"sha": "f560ab731b9da35902d3da720e19731b51ab62df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f560ab731b9da35902d3da720e19731b51ab62df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/895238088417b292e35705e72182ff8cc3ab6f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/895238088417b292e35705e72182ff8cc3ab6f63", "html_url": "https://github.com/rust-lang/rust/commit/895238088417b292e35705e72182ff8cc3ab6f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/895238088417b292e35705e72182ff8cc3ab6f63/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29092ade31d7ff37532649dfbe1dc811edf3651", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29092ade31d7ff37532649dfbe1dc811edf3651", "html_url": "https://github.com/rust-lang/rust/commit/b29092ade31d7ff37532649dfbe1dc811edf3651"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "40f5562b406a82dd111dbd0790519d71bb9bb4f2", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=895238088417b292e35705e72182ff8cc3ab6f63", "patch": "@@ -76,8 +76,7 @@ pub use crate::{\n     resolve::ScopeDef,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n-        display::HirDisplay, method_resolution::LookupMode, ApplicationTy, CallableDef, Substs,\n-        TraitRef, Ty, TypeCtor, TypeWalk,\n+        display::HirDisplay, ApplicationTy, CallableDef, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n     },\n };\n "}, {"sha": "a4ca59bba1b4c1eb912d3924d469d64d7395f40d", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=895238088417b292e35705e72182ff8cc3ab6f63", "patch": "@@ -327,7 +327,30 @@ impl SourceAnalyzer {\n         db: &impl HirDatabase,\n         ty: Ty,\n         name: Option<&Name>,\n-        mode: method_resolution::LookupMode,\n+        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n+    ) -> Option<T> {\n+        // There should be no inference vars in types passed here\n+        // FIXME check that?\n+        // FIXME replace Unknown by bound vars here\n+        let canonical = crate::ty::Canonical { value: ty, num_vars: 0 };\n+        method_resolution::iterate_method_candidates(\n+            &canonical,\n+            db,\n+            &self.resolver,\n+            name,\n+            method_resolution::LookupMode::MethodCall,\n+            |ty, it| match it {\n+                AssocItem::Function(f) => callback(ty, f),\n+                _ => None,\n+            },\n+        )\n+    }\n+\n+    pub fn iterate_path_candidates<T>(\n+        &self,\n+        db: &impl HirDatabase,\n+        ty: Ty,\n+        name: Option<&Name>,\n         callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n         // There should be no inference vars in types passed here\n@@ -339,7 +362,7 @@ impl SourceAnalyzer {\n             db,\n             &self.resolver,\n             name,\n-            mode,\n+            method_resolution::LookupMode::Path,\n             callback,\n         )\n     }"}, {"sha": "b4df6ee2ad04ef47f04fa2741689c9834bcea745", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=895238088417b292e35705e72182ff8cc3ab6f63", "patch": "@@ -58,21 +58,13 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n \n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n     let mut seen_methods = FxHashSet::default();\n-    ctx.analyzer.iterate_method_candidates(\n-        ctx.db,\n-        receiver,\n-        None,\n-        hir::LookupMode::MethodCall,\n-        |_ty, item| {\n-            if let hir::AssocItem::Function(func) = item {\n-                let data = func.data(ctx.db);\n-                if data.has_self_param() && seen_methods.insert(data.name().clone()) {\n-                    acc.add_function(ctx, func);\n-                }\n-            }\n-            None::<()>\n-        },\n-    );\n+    ctx.analyzer.iterate_method_candidates(ctx.db, receiver, None, |_ty, func| {\n+        let data = func.data(ctx.db);\n+        if data.has_self_param() && seen_methods.insert(data.name().clone()) {\n+            acc.add_function(ctx, func);\n+        }\n+        None::<()>\n+    });\n }\n \n #[cfg(test)]"}, {"sha": "9ac9768afb203e35c762fa63a3a01976d37195b9", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895238088417b292e35705e72182ff8cc3ab6f63/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=895238088417b292e35705e72182ff8cc3ab6f63", "patch": "@@ -50,25 +50,19 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };\n-            ctx.analyzer.iterate_method_candidates(\n-                ctx.db,\n-                ty.clone(),\n-                None,\n-                hir::LookupMode::Path,\n-                |_ty, item| {\n-                    match item {\n-                        hir::AssocItem::Function(func) => {\n-                            let data = func.data(ctx.db);\n-                            if !data.has_self_param() {\n-                                acc.add_function(ctx, func);\n-                            }\n+            ctx.analyzer.iterate_path_candidates(ctx.db, ty.clone(), None, |_ty, item| {\n+                match item {\n+                    hir::AssocItem::Function(func) => {\n+                        let data = func.data(ctx.db);\n+                        if !data.has_self_param() {\n+                            acc.add_function(ctx, func);\n                         }\n-                        hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n-                        hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                     }\n-                    None::<()>\n-                },\n-            );\n+                    hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n+                    hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n+                }\n+                None::<()>\n+            });\n             // Iterate assoc types separately\n             // FIXME: complete T::AssocType\n             let krate = ctx.module.map(|m| m.krate());"}]}