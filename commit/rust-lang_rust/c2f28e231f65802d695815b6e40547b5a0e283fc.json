{"sha": "c2f28e231f65802d695815b6e40547b5a0e283fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZjI4ZTIzMWY2NTgwMmQ2OTU4MTViNmU0MDU0N2I1YTBlMjgzZmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-29T15:57:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-29T15:57:34Z"}, "message": "stdlib: Remove the now-obsolete vec::alloc_len in favor of vec::capacity", "tree": {"sha": "60e7d3683914a150d31c476b4b8ec6568ffd4c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60e7d3683914a150d31c476b4b8ec6568ffd4c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2f28e231f65802d695815b6e40547b5a0e283fc", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f28e231f65802d695815b6e40547b5a0e283fc", "html_url": "https://github.com/rust-lang/rust/commit/c2f28e231f65802d695815b6e40547b5a0e283fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2f28e231f65802d695815b6e40547b5a0e283fc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8774493dd33c0028ac7e543a88657d00c34e5eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8774493dd33c0028ac7e543a88657d00c34e5eeb", "html_url": "https://github.com/rust-lang/rust/commit/8774493dd33c0028ac7e543a88657d00c34e5eeb"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "5b18610c61b5029856988f8ce21f49b6d8e002c9", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2f28e231f65802d695815b6e40547b5a0e283fc/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f28e231f65802d695815b6e40547b5a0e283fc/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=c2f28e231f65802d695815b6e40547b5a0e283fc", "patch": "@@ -11,7 +11,6 @@ export reserve;\n export reserve_at_least;\n export capacity;\n export len;\n-export alloc_len;\n export from_fn;\n export from_elem;\n export to_mut;\n@@ -142,6 +141,7 @@ fn reserve_at_least<T>(&v: [const T], n: uint) {\n #[doc = \"\n Returns the number of elements the vector can hold without reallocating\n \"]\n+#[inline(always)]\n fn capacity<T>(&&v: [const T]) -> uint unsafe {\n     let repr: **unsafe::vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n     (**repr).alloc / sys::size_of::<T>()\n@@ -154,13 +154,6 @@ pure fn len<T>(&&v: [const T]) -> uint unsafe {\n     (**repr).fill / sys::size_of::<T>()\n }\n \n-#[doc = \"Returns the number of bytes allocated for this vector\"]\n-#[inline(always)]\n-pure fn alloc_len<T>(&&v: [const T]) -> uint unsafe {\n-    let repr: **unsafe::vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n-    (**repr).alloc\n-}\n-\n #[doc = \"\n Creates and initializes an immutable vector.\n "}, {"sha": "dceec1ca010da918f703f507c4ae25a9852f69e5", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2f28e231f65802d695815b6e40547b5a0e283fc/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f28e231f65802d695815b6e40547b5a0e283fc/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=c2f28e231f65802d695815b6e40547b5a0e283fc", "patch": "@@ -25,7 +25,7 @@ impl arena for arena {\n     fn alloc_grow(n_bytes: uint, align: uint) -> *() {\n         // Allocate a new chunk.\n         let mut head = list::head(self.chunks);\n-        let chunk_size = vec::alloc_len(head.data);\n+        let chunk_size = vec::capacity(head.data);\n         let new_min_chunk_size = uint::max(n_bytes, chunk_size);\n         head = chunk(uint::next_power_of_two(new_min_chunk_size + 1u));\n         self.chunks = list::cons(head, @self.chunks);\n@@ -41,7 +41,7 @@ impl arena for arena {\n         let mut start = head.fill;\n         start = (start + alignm1) & !alignm1;\n         let end = start + n_bytes;\n-        if end > vec::alloc_len(head.data) {\n+        if end > vec::capacity(head.data) {\n             ret self.alloc_grow(n_bytes, align);\n         }\n "}]}