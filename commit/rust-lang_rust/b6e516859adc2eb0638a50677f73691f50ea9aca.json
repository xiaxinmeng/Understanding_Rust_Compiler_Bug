{"sha": "b6e516859adc2eb0638a50677f73691f50ea9aca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZTUxNjg1OWFkYzJlYjA2MzhhNTA2NzdmNzM2OTFmNTBlYTlhY2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T01:49:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:02:00Z"}, "message": "libstd: Remove all support code related to `@mut`", "tree": {"sha": "516a83ddc9ecadc3ad16b5caaaf7cd33b7080f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516a83ddc9ecadc3ad16b5caaaf7cd33b7080f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e516859adc2eb0638a50677f73691f50ea9aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e516859adc2eb0638a50677f73691f50ea9aca", "html_url": "https://github.com/rust-lang/rust/commit/b6e516859adc2eb0638a50677f73691f50ea9aca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e516859adc2eb0638a50677f73691f50ea9aca/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e095889e4edaa37ad78faa6394d0ac1d3650d64d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e095889e4edaa37ad78faa6394d0ac1d3650d64d", "html_url": "https://github.com/rust-lang/rust/commit/e095889e4edaa37ad78faa6394d0ac1d3650d64d"}], "stats": {"total": 100, "additions": 0, "deletions": 100}, "files": [{"sha": "e7ccb91fb752b0ec376ac404cb879a95d1c8481c", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -426,18 +426,6 @@ impl<D:Decoder,T:Decodable<D> + 'static> Decodable<D> for @T {\n     }\n }\n \n-impl<S:Encoder,T:Encodable<S>> Encodable<S> for @mut T {\n-    fn encode(&self, s: &mut S) {\n-        (**self).encode(s)\n-    }\n-}\n-\n-impl<D:Decoder,T:Decodable<D> + 'static> Decodable<D> for @mut T {\n-    fn decode(d: &mut D) -> @mut T {\n-        @mut Decodable::decode(d)\n-    }\n-}\n-\n impl<'a, S:Encoder,T:Encodable<S>> Encodable<S> for &'a [T] {\n     fn encode(&self, s: &mut S) {\n         s.emit_seq(self.len(), |s| {"}, {"sha": "b26ceb799a7b683df8f8001d7f99afcf873630f8", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -58,12 +58,6 @@ impl<T> Clone for @T {\n     fn clone(&self) -> @T { *self }\n }\n \n-impl<T> Clone for @mut T {\n-    /// Return a shallow copy of the managed box.\n-    #[inline]\n-    fn clone(&self) -> @mut T { *self }\n-}\n-\n impl<'a, T> Clone for &'a T {\n     /// Return a shallow copy of the borrowed pointer.\n     #[inline]\n@@ -168,14 +162,6 @@ impl<T: Freeze + DeepClone + 'static> DeepClone for @T {\n     fn deep_clone(&self) -> @T { @(**self).deep_clone() }\n }\n \n-// FIXME: #6525: should also be implemented for `T: Send + DeepClone`\n-impl<T: Freeze + DeepClone + 'static> DeepClone for @mut T {\n-    /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n-    /// a deep clone of a potentially cyclical type.\n-    #[inline]\n-    fn deep_clone(&self) -> @mut T { @mut (**self).deep_clone() }\n-}\n-\n macro_rules! deep_clone_impl(\n     ($t:ty) => {\n         impl DeepClone for $t {\n@@ -239,23 +225,6 @@ fn test_managed_clone() {\n     assert_eq!(a, b);\n }\n \n-#[test]\n-fn test_managed_mut_deep_clone() {\n-    let x = @mut 5i;\n-    let y: @mut int = x.deep_clone();\n-    *x = 20;\n-    assert_eq!(*y, 5);\n-}\n-\n-#[test]\n-fn test_managed_mut_clone() {\n-    let a = @mut 5i;\n-    let b: @mut int = a.clone();\n-    assert_eq!(a, b);\n-    *b = 10;\n-    assert_eq!(a, b);\n-}\n-\n #[test]\n fn test_borrowed_clone() {\n     let x = 5i;"}, {"sha": "60f38e3b3defaed163c333ba9053487c2aad7fa7", "filename": "src/libstd/default.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdefault.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -16,10 +16,6 @@ pub trait Default {\n     fn default() -> Self;\n }\n \n-impl<T: Default + 'static> Default for @mut T {\n-    fn default() -> @mut T { @mut Default::default() }\n-}\n-\n impl<T: Default + 'static> Default for @T {\n     fn default() -> @T { @Default::default() }\n }"}, {"sha": "c5705665896f1022258a562f6de57064c507e25f", "filename": "src/libstd/managed.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -31,13 +31,6 @@ pub fn ptr_eq<T>(a: @T, b: @T) -> bool {\n     a_ptr == b_ptr\n }\n \n-/// Determine if two mutable shared boxes point to the same object\n-#[inline]\n-pub fn mut_ptr_eq<T>(a: @mut T, b: @mut T) -> bool {\n-    let (a_ptr, b_ptr): (*T, *T) = (to_unsafe_ptr(&*a), to_unsafe_ptr(&*b));\n-    a_ptr == b_ptr\n-}\n-\n #[cfg(not(test))]\n impl<T:Eq> Eq for @T {\n     #[inline]\n@@ -46,14 +39,6 @@ impl<T:Eq> Eq for @T {\n     fn ne(&self, other: &@T) -> bool { *(*self) != *(*other) }\n }\n \n-#[cfg(not(test))]\n-impl<T:Eq> Eq for @mut T {\n-    #[inline]\n-    fn eq(&self, other: &@mut T) -> bool { *(*self) == *(*other) }\n-    #[inline]\n-    fn ne(&self, other: &@mut T) -> bool { *(*self) != *(*other) }\n-}\n-\n #[cfg(not(test))]\n impl<T:Ord> Ord for @T {\n     #[inline]\n@@ -66,41 +51,18 @@ impl<T:Ord> Ord for @T {\n     fn gt(&self, other: &@T) -> bool { *(*self) > *(*other) }\n }\n \n-#[cfg(not(test))]\n-impl<T:Ord> Ord for @mut T {\n-    #[inline]\n-    fn lt(&self, other: &@mut T) -> bool { *(*self) < *(*other) }\n-    #[inline]\n-    fn le(&self, other: &@mut T) -> bool { *(*self) <= *(*other) }\n-    #[inline]\n-    fn ge(&self, other: &@mut T) -> bool { *(*self) >= *(*other) }\n-    #[inline]\n-    fn gt(&self, other: &@mut T) -> bool { *(*self) > *(*other) }\n-}\n-\n #[cfg(not(test))]\n impl<T: TotalOrd> TotalOrd for @T {\n     #[inline]\n     fn cmp(&self, other: &@T) -> Ordering { (**self).cmp(*other) }\n }\n \n-#[cfg(not(test))]\n-impl<T: TotalOrd> TotalOrd for @mut T {\n-    #[inline]\n-    fn cmp(&self, other: &@mut T) -> Ordering { (**self).cmp(*other) }\n-}\n-\n #[cfg(not(test))]\n impl<T: TotalEq> TotalEq for @T {\n     #[inline]\n     fn equals(&self, other: &@T) -> bool { (**self).equals(*other) }\n }\n \n-#[cfg(not(test))]\n-impl<T: TotalEq> TotalEq for @mut T {\n-    #[inline]\n-    fn equals(&self, other: &@mut T) -> bool { (**self).equals(*other) }\n-}\n #[test]\n fn test() {\n     let x = @3;"}, {"sha": "d66d13657fc6477861184f708e0e40a5885970c9", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1079,11 +1079,6 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Div<T,T>+Mul<T,T>>(radix: uint, pow: uin\n     total\n }\n \n-impl<T: Zero + 'static> Zero for @mut T {\n-    fn zero() -> @mut T { @mut Zero::zero() }\n-    fn is_zero(&self) -> bool { (**self).is_zero() }\n-}\n-\n impl<T: Zero + 'static> Zero for @T {\n     fn zero() -> @T { @Zero::zero() }\n     fn is_zero(&self) -> bool { (**self).is_zero() }"}, {"sha": "e60abed42f2545076fe657977936918978595c1f", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -655,13 +655,10 @@ fn test_repr() {\n     exact_test(&(~\"he\\u10f3llo\"), \"~\\\"he\\\\u10f3llo\\\"\");\n \n     exact_test(&(@10), \"@10\");\n-    exact_test(&(@mut 10), \"@mut 10\");\n-    exact_test(&((@mut 10, 2)), \"(@mut 10, 2)\");\n     exact_test(&(~10), \"~10\");\n     exact_test(&(&10), \"&10\");\n     let mut x = 10;\n     exact_test(&(&mut x), \"&mut 10\");\n-    exact_test(&(@mut [1, 2]), \"@mut [1, 2]\");\n \n     exact_test(&(0 as *()), \"(0x0 as *())\");\n     exact_test(&(0 as *mut ()), \"(0x0 as *mut ())\");"}, {"sha": "bd1c49c6c241fd8c558cfb4d652464634b4eb5f4", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -319,13 +319,6 @@ impl<A:IterBytes> IterBytes for @A {\n     }\n }\n \n-impl<A:IterBytes> IterBytes for @mut A {\n-    #[inline]\n-    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n-        (**self).iter_bytes(lsb0, f)\n-    }\n-}\n-\n impl<A:IterBytes> IterBytes for Rc<A> {\n     #[inline]\n     fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {"}]}