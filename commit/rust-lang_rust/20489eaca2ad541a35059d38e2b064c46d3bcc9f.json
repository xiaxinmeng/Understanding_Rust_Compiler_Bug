{"sha": "20489eaca2ad541a35059d38e2b064c46d3bcc9f", "node_id": "C_kwDOAAsO6NoAKDIwNDg5ZWFjYTJhZDU0MWEzNTA1OWQzOGUyYjA2NGM0NmQzYmNjOWY", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-10-03T19:06:49Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-10-03T19:06:49Z"}, "message": "Update comments", "tree": {"sha": "e403c90b1a42c6ee4b72e3f67d7f6dba410bcb7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e403c90b1a42c6ee4b72e3f67d7f6dba410bcb7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20489eaca2ad541a35059d38e2b064c46d3bcc9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20489eaca2ad541a35059d38e2b064c46d3bcc9f", "html_url": "https://github.com/rust-lang/rust/commit/20489eaca2ad541a35059d38e2b064c46d3bcc9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20489eaca2ad541a35059d38e2b064c46d3bcc9f/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529c35331bb3817e90b5099c33d97aa55ad2713d", "url": "https://api.github.com/repos/rust-lang/rust/commits/529c35331bb3817e90b5099c33d97aa55ad2713d", "html_url": "https://github.com/rust-lang/rust/commit/529c35331bb3817e90b5099c33d97aa55ad2713d"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "f8c616a19e9372ae1bba049015ac87233af4f91f", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/20489eaca2ad541a35059d38e2b064c46d3bcc9f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20489eaca2ad541a35059d38e2b064c46d3bcc9f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=20489eaca2ad541a35059d38e2b064c46d3bcc9f", "patch": "@@ -713,6 +713,8 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n                 ty::Adt(adt, _) if adt.is_enum() => adt,\n                 _ => return StatementEquality::NotEqual,\n             };\n+            // We need to make sure that the switch value that targets the bb with\n+            // SetDiscriminant is the same as the variant discriminant.\n             let variant_discr = adt.discriminant_for_variant(self.tcx, *variant_index).val;\n             if variant_discr != switch_value {\n                 trace!(\n@@ -750,20 +752,28 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n             (\n                 StatementKind::Assign(box (_, rhs)),\n                 StatementKind::SetDiscriminant { place, variant_index },\n-            )\n-            // we need to make sure that the switch value that targets the bb with SetDiscriminant (y), is the same as the variant index\n-            if y_target_and_value.value.is_some() => {\n+            ) if y_target_and_value.value.is_some() => {\n                 // choose basic block of x, as that has the assign\n-                helper(rhs, place, variant_index, y_target_and_value.value.unwrap(), x_target_and_value.target)\n+                helper(\n+                    rhs,\n+                    place,\n+                    variant_index,\n+                    y_target_and_value.value.unwrap(),\n+                    x_target_and_value.target,\n+                )\n             }\n             (\n                 StatementKind::SetDiscriminant { place, variant_index },\n                 StatementKind::Assign(box (_, rhs)),\n-            )\n-            // we need to make sure that the switch value that targets the bb with SetDiscriminant (x), is the same as the variant index\n-            if x_target_and_value.value.is_some() => {\n+            ) if x_target_and_value.value.is_some() => {\n                 // choose basic block of y, as that has the assign\n-                helper(rhs, place, variant_index, x_target_and_value.value.unwrap(), y_target_and_value.target)\n+                helper(\n+                    rhs,\n+                    place,\n+                    variant_index,\n+                    x_target_and_value.value.unwrap(),\n+                    y_target_and_value.target,\n+                )\n             }\n             _ => {\n                 trace!(\"NO: statements `{:?}` and `{:?}` not considered equal\", x, y);"}]}