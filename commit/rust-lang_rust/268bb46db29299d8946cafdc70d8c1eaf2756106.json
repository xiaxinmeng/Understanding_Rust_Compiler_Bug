{"sha": "268bb46db29299d8946cafdc70d8c1eaf2756106", "node_id": "C_kwDOAAsO6NoAKDI2OGJiNDZkYjI5Mjk5ZDg5NDZjYWZkYzcwZDhjMWVhZjI3NTYxMDY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-09-29T17:47:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-09-29T17:47:41Z"}, "message": "CTFE: extra assertions for Aggregate rvalues; remove unnecessarily eager special case", "tree": {"sha": "ca26562935cb0775c14deebf760fbc8dc79342b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca26562935cb0775c14deebf760fbc8dc79342b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/268bb46db29299d8946cafdc70d8c1eaf2756106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/268bb46db29299d8946cafdc70d8c1eaf2756106", "html_url": "https://github.com/rust-lang/rust/commit/268bb46db29299d8946cafdc70d8c1eaf2756106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/268bb46db29299d8946cafdc70d8c1eaf2756106/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35f74c24a3c205eeb85717e4a0cd8535b7ac8f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35f74c24a3c205eeb85717e4a0cd8535b7ac8f0e", "html_url": "https://github.com/rust-lang/rust/commit/35f74c24a3c205eeb85717e4a0cd8535b7ac8f0e"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "e6037d561dedcb5228ed84e93e524df136f17551", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/268bb46db29299d8946cafdc70d8c1eaf2756106/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268bb46db29299d8946cafdc70d8c1eaf2756106/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=268bb46db29299d8946cafdc70d8c1eaf2756106", "patch": "@@ -197,12 +197,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Aggregate(ref kind, ref operands) => {\n+                // active_field_index is for union initialization.\n                 let (dest, active_field_index) = match **kind {\n                     mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n                         self.write_discriminant(variant_index, &dest)?;\n                         if adt_def.is_enum() {\n-                            (self.place_downcast(&dest, variant_index)?, active_field_index)\n+                            assert!(active_field_index.is_none());\n+                            (self.place_downcast(&dest, variant_index)?, None)\n                         } else {\n+                            if active_field_index.is_some() {\n+                                assert_eq!(operands.len(), 1);\n+                            }\n                             (dest, active_field_index)\n                         }\n                     }\n@@ -211,12 +216,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 for (i, operand) in operands.iter().enumerate() {\n                     let op = self.eval_operand(operand, None)?;\n-                    // Ignore zero-sized fields.\n-                    if !op.layout.is_zst() {\n-                        let field_index = active_field_index.unwrap_or(i);\n-                        let field_dest = self.place_field(&dest, field_index)?;\n-                        self.copy_op(&op, &field_dest)?;\n-                    }\n+                    let field_index = active_field_index.unwrap_or(i);\n+                    let field_dest = self.place_field(&dest, field_index)?;\n+                    self.copy_op(&op, &field_dest)?;\n                 }\n             }\n "}]}