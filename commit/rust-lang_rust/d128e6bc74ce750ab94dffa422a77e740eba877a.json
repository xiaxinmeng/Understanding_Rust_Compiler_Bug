{"sha": "d128e6bc74ce750ab94dffa422a77e740eba877a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjhlNmJjNzRjZTc1MGFiOTRkZmZhNDIyYTc3ZTc0MGViYTg3N2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-03T04:02:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-03T04:02:41Z"}, "message": "Auto merge of #35856 - phimuemue:master, r=brson\n\nIntroduce max_by/min_by on iterators\n\nSee https://github.com/rust-lang/rfcs/issues/1722 for reference.\n\nIt seems that there is `min`, `max` (simple computation of min/max), `min_by_key`, `max_by_key` (min/max by comparing mapped values) but no `min_by` and `max_by` (min/max according to comparison function). However, e.g. on vectors or slices there is `sort`, `sort_by_key` and `sort_by`.", "tree": {"sha": "9bd8b6c9766fff2b15e716c7641249085f449ad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd8b6c9766fff2b15e716c7641249085f449ad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d128e6bc74ce750ab94dffa422a77e740eba877a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d128e6bc74ce750ab94dffa422a77e740eba877a", "html_url": "https://github.com/rust-lang/rust/commit/d128e6bc74ce750ab94dffa422a77e740eba877a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d128e6bc74ce750ab94dffa422a77e740eba877a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100b309fd1b951fa074556f9e3a50354d1ed7923", "url": "https://api.github.com/repos/rust-lang/rust/commits/100b309fd1b951fa074556f9e3a50354d1ed7923", "html_url": "https://github.com/rust-lang/rust/commit/100b309fd1b951fa074556f9e3a50354d1ed7923"}, {"sha": "5928be1d9bcd96ce4dd7b328fe527683a4e1621f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5928be1d9bcd96ce4dd7b328fe527683a4e1621f", "html_url": "https://github.com/rust-lang/rust/commit/5928be1d9bcd96ce4dd7b328fe527683a4e1621f"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "6b616f8018156bf8e5e217d46de70b4223d109e8", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d128e6bc74ce750ab94dffa422a77e740eba877a/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d128e6bc74ce750ab94dffa422a77e740eba877a/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=d128e6bc74ce750ab94dffa422a77e740eba877a", "patch": "@@ -1657,6 +1657,32 @@ pub trait Iterator {\n             .map(|(_, x)| x)\n     }\n \n+    /// Returns the element that gives the maximum value with respect to the\n+    /// specified comparison function.\n+    ///\n+    /// Returns the rightmost element if the comparison determines two elements\n+    /// to be equally maximum.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_max_by)]\n+    /// let a = [-3_i32, 0, 1, 5, -10];\n+    /// assert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_max_by\", issue=\"36105\")]\n+    fn max_by<F>(self, mut compare: F) -> Option<Self::Item>\n+        where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n+    {\n+        select_fold1(self,\n+                     |_| (),\n+                     // switch to y even if it is only equal, to preserve\n+                     // stability.\n+                     |_, x, _, y| Ordering::Greater != compare(x, y))\n+            .map(|(_, x)| x)\n+    }\n+\n     /// Returns the element that gives the minimum value from the\n     /// specified function.\n     ///\n@@ -1681,6 +1707,33 @@ pub trait Iterator {\n             .map(|(_, x)| x)\n     }\n \n+    /// Returns the element that gives the minimum value with respect to the\n+    /// specified comparison function.\n+    ///\n+    /// Returns the latest element if the comparison determines two elements\n+    /// to be equally minimum.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_min_by)]\n+    /// let a = [-3_i32, 0, 1, 5, -10];\n+    /// assert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_min_by\", issue=\"36105\")]\n+    fn min_by<F>(self, mut compare: F) -> Option<Self::Item>\n+        where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n+    {\n+        select_fold1(self,\n+                     |_| (),\n+                     // switch to y even if it is strictly smaller, to\n+                     // preserve stability.\n+                     |_, x, _, y| Ordering::Greater == compare(x, y))\n+            .map(|(_, x)| x)\n+    }\n+\n+\n     /// Reverses an iterator's direction.\n     ///\n     /// Usually, iterators iterate from left to right. After using `rev()`,"}, {"sha": "27eb25537f31bde549db5cc266b55b4bacc2027c", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d128e6bc74ce750ab94dffa422a77e740eba877a/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d128e6bc74ce750ab94dffa422a77e740eba877a/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=d128e6bc74ce750ab94dffa422a77e740eba877a", "patch": "@@ -664,12 +664,24 @@ fn test_max_by_key() {\n     assert_eq!(*xs.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n }\n \n+#[test]\n+fn test_max_by() {\n+    let xs: &[isize] = &[-3, 0, 1, 5, -10];\n+    assert_eq!(*xs.iter().max_by(|x, y| x.abs().cmp(&y.abs())).unwrap(), -10);\n+}\n+\n #[test]\n fn test_min_by_key() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n }\n \n+#[test]\n+fn test_min_by() {\n+    let xs: &[isize] = &[-3, 0, 1, 5, -10];\n+    assert_eq!(*xs.iter().min_by(|x, y| x.abs().cmp(&y.abs())).unwrap(), 0);\n+}\n+\n #[test]\n fn test_by_ref() {\n     let mut xs = 0..10;"}, {"sha": "590bf478aa723a2ffe92ebf3820f19f291ab6dbe", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d128e6bc74ce750ab94dffa422a77e740eba877a/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d128e6bc74ce750ab94dffa422a77e740eba877a/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=d128e6bc74ce750ab94dffa422a77e740eba877a", "patch": "@@ -32,6 +32,8 @@\n #![feature(try_from)]\n #![feature(unicode)]\n #![feature(unique)]\n+#![feature(iter_max_by)]\n+#![feature(iter_min_by)]\n \n extern crate core;\n extern crate test;"}]}