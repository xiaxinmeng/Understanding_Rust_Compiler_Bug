{"sha": "0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNThhYTlkYzBlMjRmMGZhNmE2ZWU3ZWIwYzM1MDQxZGVkZGRiMGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-15T14:48:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-15T14:48:21Z"}, "message": "Merge #7209\n\n7209: Support yield keyword r=Veykril a=sasurau4\n\nPart of #4309 \r\nThe inference of yield will be implemented at another PR.\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>", "tree": {"sha": "863b6e41430b4d9f5c9dcebd443f4acdbe7e0193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863b6e41430b4d9f5c9dcebd443f4acdbe7e0193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAas1CRBK7hj4Ov3rIwAAdHIIAFcdPSg75qsKSQWD08+A3N6q\naULicQDY08HCUutZMYnpdJW+FxdtwzlLgEHtg+gePWoXh6HPOLG69zinYVoWsckJ\nPg17zEN/YVQeb9G8Da1rpbGf/8CtJc/Efpxq7SkTmr0/PIV1mtUFZfAko2W1JYy2\n5OrmGhJJITXtpeMo1XXdMEFkHOJ7vfsviGYzLyeP2+fxIz4W/NjBlcyvCoUsC1mk\nSDdV8KnxDpaDbxLhWP/BylPNAWhK2musoYlHm7v4qMMKUkmq3MmWfbJ3moO04PJw\ngLRiT+CozKAmECpdvS0ZLzxoXXcquN5TSalisZL4tiwSpmBS3nhB267Eut5HQRQ=\n=3/yT\n-----END PGP SIGNATURE-----\n", "payload": "tree 863b6e41430b4d9f5c9dcebd443f4acdbe7e0193\nparent d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc\nparent 138514bea244253f2c0007976921f4475c9d2cd5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610722101 +0000\ncommitter GitHub <noreply@github.com> 1610722101 +0000\n\nMerge #7209\n\n7209: Support yield keyword r=Veykril a=sasurau4\n\nPart of #4309 \r\nThe inference of yield will be implemented at another PR.\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "html_url": "https://github.com/rust-lang/rust/commit/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "html_url": "https://github.com/rust-lang/rust/commit/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc"}, {"sha": "138514bea244253f2c0007976921f4475c9d2cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/138514bea244253f2c0007976921f4475c9d2cd5", "html_url": "https://github.com/rust-lang/rust/commit/138514bea244253f2c0007976921f4475c9d2cd5"}], "stats": {"total": 204, "additions": 152, "deletions": 52}, "files": [{"sha": "9498d8bf3e57a5fd4e15d6b2778e507c88466953", "filename": "Cargo.lock", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -26,9 +26,9 @@ dependencies = [\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.38\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"afddf7f520a80dbf76e6f50a35bca42a2331ef227a28b3b6dc5c2e2338d114b1\"\n+checksum = \"ee67c11feeac938fae061b232e38e0b6d94f97a9df10e6271319325ac4c56a86\"\n \n [[package]]\n name = \"anymap\"\n@@ -118,9 +118,9 @@ checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n [[package]]\n name = \"byteorder\"\n-version = \"1.4.2\"\n+version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ae44d1a3d5a19df61dd0c8beb138458ac2a53a7ac09eba97d55592540004306b\"\n+checksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n \n [[package]]\n name = \"cargo-platform\"\n@@ -269,9 +269,9 @@ dependencies = [\n \n [[package]]\n name = \"const_fn\"\n-version = \"0.4.5\"\n+version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"28b9d6de7f49e22cf97ad17fc4036ece69300032f45f78f30b4a4482cdc3f4a6\"\n+checksum = \"cd51eab21ab4fd6a3bf889e2d0958c0a6e3a61ad04260325e919e652a2a62826\"\n \n [[package]]\n name = \"crc32fast\"\n@@ -791,9 +791,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.82\"\n+version = \"0.2.81\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"89203f3fba0a3795506acaad8ebce3c80c0af93f994d5a1d7a0b1eeb23271929\"\n+checksum = \"1482821306169ec4d07f6aca392a4681f66c75c9918aa49641a2595db64053cb\"\n \n [[package]]\n name = \"libloading\"\n@@ -825,9 +825,9 @@ dependencies = [\n \n [[package]]\n name = \"log\"\n-version = \"0.4.13\"\n+version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fcf3805d4480bb5b86070dcfeb9e2cb2ebc148adb753c5cca5f884d1d65a42b2\"\n+checksum = \"4fabed175da42fed1fa0746b0ea71f412aa9d35e76e95e59b192c64b9dc2bf8b\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n ]\n@@ -1151,9 +1151,9 @@ checksum = \"28b9b4df73455c861d7cbf8be42f01d3b373ed7f02e378d55fa84eafc6f638b1\"\n \n [[package]]\n name = \"pin-project-lite\"\n-version = \"0.2.4\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"439697af366c49a6d0a010c56a0d97685bc140ce0d377b13a2ea2aa42d64a827\"\n+checksum = \"6b063f57ec186e6140e2b8b6921e5f1bd89c7356dda5b33acc5401203ca6131c\"\n \n [[package]]\n name = \"proc-macro2\"\n@@ -1291,9 +1291,9 @@ checksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n \n [[package]]\n name = \"regex\"\n-version = \"1.4.3\"\n+version = \"1.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d9251239e129e16308e70d853559389de218ac275b515068abc96829d05b948a\"\n+checksum = \"38cf2c13ed4745de91a5eb834e11c00bcc3709e773173b2ce4c56c9fbde04b9c\"\n dependencies = [\n  \"regex-syntax\",\n ]\n@@ -1310,9 +1310,9 @@ dependencies = [\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.22\"\n+version = \"0.6.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n+checksum = \"3b181ba2dcf07aaccad5448e8ead58db5b742cf85dfe035e2227f137a539a189\"\n \n [[package]]\n name = \"rowan\"\n@@ -1541,9 +1541,9 @@ checksum = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"1.6.1\"\n+version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e\"\n+checksum = \"1a55ca5f3b68e41c979bf8c46a6f1da892ca4db8f94023ce0bd32407573b1ac0\"\n \n [[package]]\n name = \"smol_str\"\n@@ -1577,9 +1577,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.58\"\n+version = \"1.0.57\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cc60a3d73ea6594cd712d830cc1f0390fd71542d8c8cd24e70cc54cdfd5e05d5\"\n+checksum = \"4211ce9909eb971f111059df92c45640aad50a619cf55cd76476be803c4c68e6\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -1662,9 +1662,9 @@ checksum = \"db3c46be180f1af9673ebb27bc1235396f61ef6965b3fe0dbb2e624deb604f0e\"\n \n [[package]]\n name = \"thread_local\"\n-version = \"1.1.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bb9bc092d0d51e76b2b19d9d85534ffc9ec2db959a2523cdae0697e2972cd447\"\n+checksum = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n dependencies = [\n  \"lazy_static\",\n ]\n@@ -1817,9 +1817,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.6.0\"\n+version = \"1.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f96cc1b6938f7c548fbcc630bac5c896ae77a130909829ab18b8eab78c51b7ee\"\n+checksum = \"7758fccf6038d5c368a17c7224abc85d6508d5ae266d5a3de25faac3cc168509\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "0e63a60e8ad3d72c3b6c92a7eed39d1dbf9ea1cb", "filename": "crates/assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -79,29 +79,30 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n                 None => return Ok(false),\n             };\n \n-            Ok(!matches!((&initializer_expr, usage_parent),\n+            Ok(!matches!(\n+                (&initializer_expr, usage_parent),\n                 (ast::Expr::CallExpr(_), _)\n-                | (ast::Expr::IndexExpr(_), _)\n-                | (ast::Expr::MethodCallExpr(_), _)\n-                | (ast::Expr::FieldExpr(_), _)\n-                | (ast::Expr::TryExpr(_), _)\n-                | (ast::Expr::RefExpr(_), _)\n-                | (ast::Expr::Literal(_), _)\n-                | (ast::Expr::TupleExpr(_), _)\n-                | (ast::Expr::ArrayExpr(_), _)\n-                | (ast::Expr::ParenExpr(_), _)\n-                | (ast::Expr::PathExpr(_), _)\n-                | (ast::Expr::BlockExpr(_), _)\n-                | (ast::Expr::EffectExpr(_), _)\n-                | (_, ast::Expr::CallExpr(_))\n-                | (_, ast::Expr::TupleExpr(_))\n-                | (_, ast::Expr::ArrayExpr(_))\n-                | (_, ast::Expr::ParenExpr(_))\n-                | (_, ast::Expr::ForExpr(_))\n-                | (_, ast::Expr::WhileExpr(_))\n-                | (_, ast::Expr::BreakExpr(_))\n-                | (_, ast::Expr::ReturnExpr(_))\n-                | (_, ast::Expr::MatchExpr(_))\n+                    | (ast::Expr::IndexExpr(_), _)\n+                    | (ast::Expr::MethodCallExpr(_), _)\n+                    | (ast::Expr::FieldExpr(_), _)\n+                    | (ast::Expr::TryExpr(_), _)\n+                    | (ast::Expr::RefExpr(_), _)\n+                    | (ast::Expr::Literal(_), _)\n+                    | (ast::Expr::TupleExpr(_), _)\n+                    | (ast::Expr::ArrayExpr(_), _)\n+                    | (ast::Expr::ParenExpr(_), _)\n+                    | (ast::Expr::PathExpr(_), _)\n+                    | (ast::Expr::BlockExpr(_), _)\n+                    | (ast::Expr::EffectExpr(_), _)\n+                    | (_, ast::Expr::CallExpr(_))\n+                    | (_, ast::Expr::TupleExpr(_))\n+                    | (_, ast::Expr::ArrayExpr(_))\n+                    | (_, ast::Expr::ParenExpr(_))\n+                    | (_, ast::Expr::ForExpr(_))\n+                    | (_, ast::Expr::WhileExpr(_))\n+                    | (_, ast::Expr::BreakExpr(_))\n+                    | (_, ast::Expr::ReturnExpr(_))\n+                    | (_, ast::Expr::MatchExpr(_))\n             ))\n         })\n         .collect::<Result<Vec<_>, _>>()?;"}, {"sha": "4ce5e5b72c319b9db9d1f35c8a49f501ebfeec5c", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -386,6 +386,10 @@ impl ExprCollector<'_> {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n+            ast::Expr::YieldExpr(e) => {\n+                let expr = e.expr().map(|e| self.collect_expr(e));\n+                self.alloc_expr(Expr::Yield { expr }, syntax_ptr)\n+            }\n             ast::Expr::RecordExpr(e) => {\n                 let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();"}, {"sha": "a293df9f1c949beede6c6d9a586362e4f5b9c311", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -99,6 +99,9 @@ pub enum Expr {\n     Return {\n         expr: Option<ExprId>,\n     },\n+    Yield {\n+        expr: Option<ExprId>,\n+    },\n     RecordLit {\n         path: Option<Path>,\n         fields: Vec<RecordLitField>,\n@@ -294,7 +297,7 @@ impl Expr {\n                 }\n             }\n             Expr::Continue { .. } => {}\n-            Expr::Break { expr, .. } | Expr::Return { expr } => {\n+            Expr::Break { expr, .. } | Expr::Return { expr } | Expr::Yield { expr } => {\n                 if let Some(expr) = expr {\n                     f(*expr);\n                 }"}, {"sha": "9bf3b51b0056e0e2ba4540570fab7fba69bf0299", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -367,6 +367,13 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 Ty::simple(TypeCtor::Never)\n             }\n+            Expr::Yield { expr } => {\n+                // FIXME: track yield type for coercion\n+                if let Some(expr) = expr {\n+                    self.infer_expr(*expr, &Expectation::none());\n+                }\n+                Ty::simple(TypeCtor::Never)\n+            }\n             Expr::RecordLit { path, fields, spread } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_ref());\n                 if let Some(variant) = def_id {"}, {"sha": "093a9890d3641ebacaed62f0d40fcafed26ed17d", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -50,6 +50,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T![match],\n         T![unsafe],\n         T![return],\n+        T![yield],\n         T![break],\n         T![continue],\n         T![async],\n@@ -142,6 +143,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             block_expr_unchecked(p)\n         }\n         T![return] => return_expr(p),\n+        T![yield] => yield_expr(p),\n         T![continue] => continue_expr(p),\n         T![break] => break_expr(p, r),\n         _ => {\n@@ -508,6 +510,20 @@ fn return_expr(p: &mut Parser) -> CompletedMarker {\n     }\n     m.complete(p, RETURN_EXPR)\n }\n+// test yield_expr\n+// fn foo() {\n+//     yield;\n+//     yield 1;\n+// }\n+fn yield_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(T![yield]));\n+    let m = p.start();\n+    p.bump(T![yield]);\n+    if p.at_ts(EXPR_FIRST) {\n+        expr(p);\n+    }\n+    m.complete(p, YIELD_EXPR)\n+}\n \n // test continue_expr\n // fn foo() {"}, {"sha": "7d53cc4cdc3a1a6c10a959881cab20035a1354a2", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -101,6 +101,7 @@ pub enum SyntaxKind {\n     USE_KW,\n     WHERE_KW,\n     WHILE_KW,\n+    YIELD_KW,\n     AUTO_KW,\n     DEFAULT_KW,\n     EXISTENTIAL_KW,\n@@ -186,6 +187,7 @@ pub enum SyntaxKind {\n     LABEL,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n+    YIELD_EXPR,\n     MATCH_EXPR,\n     MATCH_ARM_LIST,\n     MATCH_ARM,\n@@ -263,7 +265,8 @@ impl SyntaxKind {\n             | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n             | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | STATIC_KW | STRUCT_KW | SUPER_KW\n             | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW | WHERE_KW | WHILE_KW\n-            | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW | MACRO_RULES_KW => true,\n+            | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW\n+            | MACRO_RULES_KW => true,\n             _ => false,\n         }\n     }\n@@ -326,6 +329,7 @@ impl SyntaxKind {\n             \"use\" => USE_KW,\n             \"where\" => WHERE_KW,\n             \"while\" => WHILE_KW,\n+            \"yield\" => YIELD_KW,\n             _ => return None,\n         };\n         Some(kw)\n@@ -366,4 +370,4 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }"}, {"sha": "9c96d3d07354aa681864bbcafb41f34460f4f17e", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -931,6 +931,15 @@ impl WhileExpr {\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct YieldExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for YieldExpr {}\n+impl YieldExpr {\n+    pub fn yield_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![yield]) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Label {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1334,6 +1343,7 @@ pub enum Expr {\n     TryExpr(TryExpr),\n     TupleExpr(TupleExpr),\n     WhileExpr(WhileExpr),\n+    YieldExpr(YieldExpr),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Item {\n@@ -2386,6 +2396,17 @@ impl AstNode for WhileExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for YieldExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == YIELD_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Label {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LABEL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3028,14 +3049,18 @@ impl From<TupleExpr> for Expr {\n impl From<WhileExpr> for Expr {\n     fn from(node: WhileExpr) -> Expr { Expr::WhileExpr(node) }\n }\n+impl From<YieldExpr> for Expr {\n+    fn from(node: YieldExpr) -> Expr { Expr::YieldExpr(node) }\n+}\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n             | CAST_EXPR | CLOSURE_EXPR | CONTINUE_EXPR | EFFECT_EXPR | FIELD_EXPR | FOR_EXPR\n             | IF_EXPR | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n             | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n-            | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR => true,\n+            | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR\n+            | YIELD_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3071,6 +3096,7 @@ impl AstNode for Expr {\n             TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n             TUPLE_EXPR => Expr::TupleExpr(TupleExpr { syntax }),\n             WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n+            YIELD_EXPR => Expr::YieldExpr(YieldExpr { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3107,6 +3133,7 @@ impl AstNode for Expr {\n             Expr::TryExpr(it) => &it.syntax,\n             Expr::TupleExpr(it) => &it.syntax,\n             Expr::WhileExpr(it) => &it.syntax,\n+            Expr::YieldExpr(it) => &it.syntax,\n         }\n     }\n }\n@@ -3983,6 +4010,11 @@ impl std::fmt::Display for WhileExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for YieldExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Label {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "05fc90743e9a8afaadddf6e59a0ea017991ae290", "filename": "crates/syntax/test_data/parser/inline/ok/0159_yield_expr.rast", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_yield_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_yield_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_yield_expr.rast?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -0,0 +1,28 @@\n+SOURCE_FILE@0..37\n+  FN@0..36\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..6\n+      IDENT@3..6 \"foo\"\n+    PARAM_LIST@6..8\n+      L_PAREN@6..7 \"(\"\n+      R_PAREN@7..8 \")\"\n+    WHITESPACE@8..9 \" \"\n+    BLOCK_EXPR@9..36\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..21\n+        YIELD_EXPR@15..20\n+          YIELD_KW@15..20 \"yield\"\n+        SEMICOLON@20..21 \";\"\n+      WHITESPACE@21..26 \"\\n    \"\n+      EXPR_STMT@26..34\n+        YIELD_EXPR@26..33\n+          YIELD_KW@26..31 \"yield\"\n+          WHITESPACE@31..32 \" \"\n+          LITERAL@32..33\n+            INT_NUMBER@32..33 \"1\"\n+        SEMICOLON@33..34 \";\"\n+      WHITESPACE@34..35 \"\\n\"\n+      R_CURLY@35..36 \"}\"\n+  WHITESPACE@36..37 \"\\n\""}, {"sha": "596e221f741aec00bfa73b9028739ac4d335bfa1", "filename": "crates/syntax/test_data/parser/inline/ok/0159_yield_expr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_yield_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_yield_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0159_yield_expr.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    yield;\n+    yield 1;\n+}"}, {"sha": "61a944c136f41249ea627d40ac16c14fa747987c", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -15,7 +15,7 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.6\"\n+ungrammar = \"1.7\"\n walkdir = \"2.3.1\"\n write-json = \"0.1.0\"\n xshell = \"0.1\""}, {"sha": "046d68f526ff549d165591cb09ecbc1a2546bba3", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=0c58aa9dc0e24f0fa6a6ee7eb0c35041dedddb0a", "patch": "@@ -68,7 +68,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"dyn\", \"else\",\n         \"enum\", \"extern\", \"false\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\",\n         \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"static\", \"struct\", \"super\",\n-        \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\",\n+        \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n     literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n@@ -149,6 +149,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"LABEL\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\",\n+        \"YIELD_EXPR\",\n         \"MATCH_EXPR\",\n         \"MATCH_ARM_LIST\",\n         \"MATCH_ARM\","}]}