{"sha": "30058df867fbe5c43f90707d6fb644fba6201c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMDU4ZGY4NjdmYmU1YzQzZjkwNzA3ZDZmYjY0NGZiYTYyMDFjMmE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-27T17:53:00Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-01T22:10:58Z"}, "message": "Update existing tests for or-patterns", "tree": {"sha": "00c9815ad4b466ecfb5fc1814b0b19d9fb01d55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c9815ad4b466ecfb5fc1814b0b19d9fb01d55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30058df867fbe5c43f90707d6fb644fba6201c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30058df867fbe5c43f90707d6fb644fba6201c2a", "html_url": "https://github.com/rust-lang/rust/commit/30058df867fbe5c43f90707d6fb644fba6201c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30058df867fbe5c43f90707d6fb644fba6201c2a/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a20969c489d7f415f8073aacef1d480de6459ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a20969c489d7f415f8073aacef1d480de6459ce8", "html_url": "https://github.com/rust-lang/rust/commit/a20969c489d7f415f8073aacef1d480de6459ce8"}], "stats": {"total": 702, "additions": 332, "deletions": 370}, "files": [{"sha": "667d21fc14ee4034295e5e7b2a7ccd6bc13afa05", "filename": "src/test/mir-opt/const_prop/discriminant.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -10,18 +10,18 @@ fn main() {\n //      ...\n //      _3 = std::option::Option::<bool>::Some(const true,);\n //      _4 = discriminant(_3);\n-//      switchInt(move _4) -> [1isize: bb3, otherwise: bb2];\n+//      switchInt(move _4) -> [1isize: bb2, otherwise: bb1];\n //  }\n //  bb1: {\n-//      _2 = const 42i32;\n+//      _2 = const 10i32;\n //      goto -> bb4;\n //  }\n //  bb2: {\n-//      _2 = const 10i32;\n-//      goto -> bb4;\n+//      switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3];\n //  }\n //  bb3: {\n-//      switchInt(((_3 as Some).0: bool)) -> [false: bb2, otherwise: bb1];\n+//      _2 = const 42i32;\n+//      goto -> bb4;\n //  }\n //  bb4: {\n //      _1 = Add(move _2, const 0i32);\n@@ -33,18 +33,18 @@ fn main() {\n //      ...\n //      _3 = const Scalar(0x01) : std::option::Option<bool>;\n //      _4 = const 1isize;\n-//      switchInt(const 1isize) -> [1isize: bb3, otherwise: bb2];\n+//      switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1];\n //  }\n //  bb1: {\n-//      _2 = const 42i32;\n+//      _2 = const 10i32;\n //      goto -> bb4;\n //  }\n //  bb2: {\n-//      _2 = const 10i32;\n-//      goto -> bb4;\n+//      switchInt(const true) -> [false: bb1, otherwise: bb3];\n //  }\n //  bb3: {\n-//      switchInt(const true) -> [false: bb2, otherwise: bb1];\n+//      _2 = const 42i32;\n+//      goto -> bb4;\n //  }\n //  bb4: {\n //      _1 = Add(move _2, const 0i32);"}, {"sha": "8e619ffdf8b96c14c174750fbe758f174fb7e990", "filename": "src/test/mir-opt/issue-62289.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -32,47 +32,47 @@ fn main() {\n //     bb2: {\n //         StorageDead(_4);\n //         _5 = discriminant(_3);\n-//         switchInt(move _5) -> [0isize: bb10, 1isize: bb5, otherwise: bb4];\n+//         switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5];\n //     }\n //     bb3 (cleanup): {\n //         drop(_2) -> bb1;\n //     }\n //     bb4: {\n-//         unreachable;\n+//         StorageLive(_10);\n+//         _10 = ((_3 as Ok).0: u32);\n+//         (*_2) = _10;\n+//         StorageDead(_10);\n+//         _1 = move _2;\n+//         drop(_2) -> [return: bb12, unwind: bb11];\n //     }\n //     bb5: {\n+//         unreachable;\n+//     }\n+//     bb6: {\n //         StorageLive(_6);\n //         _6 = ((_3 as Err).0: std::option::NoneError);\n //         StorageLive(_8);\n //         StorageLive(_9);\n //         _9 = _6;\n-//         _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb7, unwind: bb3];\n+//         _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3];\n //     }\n-//     bb6: {\n+//     bb7: {\n //         return;\n //     }\n-//     bb7: {\n+//     bb8: {\n //         StorageDead(_9);\n-//         _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb8, unwind: bb3];\n+//         _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3];\n //     }\n-//     bb8: {\n+//     bb9: {\n //         StorageDead(_8);\n //         StorageDead(_6);\n-//         drop(_2) -> bb9;\n+//         drop(_2) -> bb10;\n //     }\n-//     bb9: {\n+//     bb10: {\n //         StorageDead(_2);\n //         StorageDead(_1);\n //         StorageDead(_3);\n-//         goto -> bb6;\n-//     }\n-//     bb10: {\n-//         StorageLive(_10);\n-//         _10 = ((_3 as Ok).0: u32);\n-//         (*_2) = _10;\n-//         StorageDead(_10);\n-//         _1 = move _2;\n-//         drop(_2) -> [return: bb12, unwind: bb11];\n+//         goto -> bb7;\n //     }\n //     bb11 (cleanup): {\n //         drop(_1) -> bb1;\n@@ -85,7 +85,7 @@ fn main() {\n //     bb13: {\n //         StorageDead(_1);\n //         StorageDead(_3);\n-//         goto -> bb6;\n+//         goto -> bb7;\n //     }\n // }\n // END rustc.test.ElaborateDrops.before.mir"}, {"sha": "7afc3bbd6fae86c035f57a1de1eafb39848717df", "filename": "src/test/mir-opt/match-arm-scopes.rs", "status": "modified", "additions": 54, "deletions": 56, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -28,10 +28,7 @@ const CASES: &[(bool, bool, bool, i32)] = &[\n \n fn main() {\n     for &(cond, items_1, items_2, result) in CASES {\n-        assert_eq!(\n-            complicated_match(cond, (items_1, items_2, String::new())),\n-            result,\n-        );\n+        assert_eq!(complicated_match(cond, (items_1, items_2, String::new())), result,);\n     }\n }\n \n@@ -64,31 +61,38 @@ fn main() {\n // }\n // bb0: {\n //     FakeRead(ForMatchedPlace, _2);\n-//     switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb5];\n+//     switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3];\n // }\n // bb1 (cleanup): {\n //     resume;\n // }\n-// bb2: {\n-//     falseEdges -> [real: bb8, imaginary: bb3];\n+// bb2: {                               // pre-binding for arm 1 first pattern\n+//     falseEdges -> [real: bb9, imaginary: bb4];\n // }\n // bb3: {\n-//     falseEdges -> [real: bb17, imaginary: bb4];\n+//     switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5];\n // }\n-// bb4: {\n-//     falseEdges -> [real: bb25, imaginary: bb26];\n+// bb4: {                               // pre-binding for arm 1 second pattern\n+//     falseEdges -> [real: bb18, imaginary: bb6];\n // }\n // bb5: {\n-//     switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb6];\n+//     switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6];\n // }\n-// bb6: {\n-//     switchInt((_2.0: bool)) -> [false: bb26, otherwise: bb4];\n+// bb6: {                               // pre-binding for arm 2 first pattern\n+//     falseEdges -> [real: bb26, imaginary: bb7];\n // }\n-// bb7: {                               // arm 1\n+// bb7: {                               // bindings for arm 2 - second pattern\n+//     StorageLive(_15);\n+//     _15 = (_2.1: bool);\n+//     StorageLive(_16);\n+//     _16 = move (_2.2: std::string::String);\n+//     goto -> bb25;\n+// }\n+// bb8: {                               // arm 1\n //     _0 = const 1i32;\n-//     drop(_7) -> [return: bb23, unwind: bb13];\n+//     drop(_7) -> [return: bb24, unwind: bb14];\n // }\n-// bb8: {                               // guard - first time\n+// bb9: {                               // guard - first time\n //     StorageLive(_6);\n //     _6 = &(_2.1: bool);\n //     StorageLive(_8);\n@@ -99,34 +103,34 @@ fn main() {\n //     StorageLive(_10);\n //     _10 = _1;\n //     FakeRead(ForMatchedPlace, _10);\n-//     switchInt(_10) -> [false: bb10, otherwise: bb9];\n+//     switchInt(_10) -> [false: bb11, otherwise: bb10];\n // }\n-// bb9: {\n-//     falseEdges -> [real: bb11, imaginary: bb10];\n+// bb10: {\n+//     falseEdges -> [real: bb12, imaginary: bb11];\n // }\n-// bb10: {                              // `else` block - first time\n+// bb11: {                              // `else` block - first time\n //     _9 = (*_6);\n //     StorageDead(_10);\n-//     switchInt(move _9) -> [false: bb16, otherwise: bb15];\n+//     switchInt(move _9) -> [false: bb17, otherwise: bb16];\n // }\n-// bb11: {                              // `return 3` - first time\n+// bb12: {                              // `return 3` - first time\n //     _0 = const 3i32;\n //     StorageDead(_10);\n //     StorageDead(_9);\n //     StorageDead(_8);\n //     StorageDead(_6);\n-//     goto -> bb14;\n+//     goto -> bb15;\n // }\n-// bb12: {\n+// bb13: {\n //     return;\n // }\n-// bb13 (cleanup): {\n+// bb14 (cleanup): {\n //     drop(_2) -> bb1;\n // }\n-// bb14: {\n-//     drop(_2) -> [return: bb12, unwind: bb1];\n-// }\n // bb15: {\n+//     drop(_2) -> [return: bb13, unwind: bb1];\n+// }\n+// bb16: {\n //     StorageDead(_9);\n //     FakeRead(ForMatchGuard, _3);\n //     FakeRead(ForMatchGuard, _4);\n@@ -136,15 +140,15 @@ fn main() {\n //     _5 = (_2.1: bool);\n //     StorageLive(_7);\n //     _7 = move (_2.2: std::string::String);\n-//     goto -> bb7;\n+//     goto -> bb8;\n // }\n-// bb16: {                              // guard otherwise case - first time\n+// bb17: {                              // guard otherwise case - first time\n //     StorageDead(_9);\n //     StorageDead(_8);\n //     StorageDead(_6);\n-//     falseEdges -> [real: bb5, imaginary: bb3];\n+//     falseEdges -> [real: bb3, imaginary: bb4];\n // }\n-// bb17: {                              // guard - second time\n+// bb18: {                              // guard - second time\n //     StorageLive(_6);\n //     _6 = &(_2.0: bool);\n //     StorageLive(_8);\n@@ -155,25 +159,25 @@ fn main() {\n //     StorageLive(_13);\n //     _13 = _1;\n //     FakeRead(ForMatchedPlace, _13);\n-//     switchInt(_13) -> [false: bb19, otherwise: bb18];\n+//     switchInt(_13) -> [false: bb20, otherwise: bb19];\n // }\n-// bb18: {\n-//     falseEdges -> [real: bb20, imaginary: bb19];\n+// bb19: {\n+//     falseEdges -> [real: bb21, imaginary: bb20];\n // }\n-// bb19: {                              // `else` block - second time\n+// bb20: {                              // `else` block - second time\n //     _12 = (*_6);\n //     StorageDead(_13);\n-//     switchInt(move _12) -> [false: bb22, otherwise: bb21];\n+//     switchInt(move _12) -> [false: bb23, otherwise: bb22];\n // }\n-// bb20: {\n+// bb21: {\n //     _0 = const 3i32;\n //     StorageDead(_13);\n //     StorageDead(_12);\n //     StorageDead(_8);\n //     StorageDead(_6);\n-//     goto -> bb14;\n+//     goto -> bb15;\n // }\n-// bb21: {                              // bindings for arm 1\n+// bb22: {                              // bindings for arm 1\n //     StorageDead(_12);\n //     FakeRead(ForMatchGuard, _3);\n //     FakeRead(ForMatchGuard, _4);\n@@ -183,46 +187,40 @@ fn main() {\n //     _5 = (_2.0: bool);\n //     StorageLive(_7);\n //     _7 = move (_2.2: std::string::String);\n-//     goto -> bb7;\n+//     goto -> bb8;\n // }\n-// bb22: {                              // Guard otherwise case - second time\n+// bb23: {                              // Guard otherwise case - second time\n //     StorageDead(_12);\n //     StorageDead(_8);\n //     StorageDead(_6);\n-//     falseEdges -> [real: bb6, imaginary: bb4];\n+//     falseEdges -> [real: bb5, imaginary: bb6];\n // }\n-// bb23: {                              // rest of arm 1\n+// bb24: {                              // rest of arm 1\n //     StorageDead(_7);\n //     StorageDead(_5);\n //     StorageDead(_8);\n //     StorageDead(_6);\n //     goto -> bb28;\n // }\n-// bb24: {                              // arm 2\n+// bb25: {                              // arm 2\n //     _0 = const 2i32;\n-//     drop(_16) -> [return: bb27, unwind: bb13];\n+//     drop(_16) -> [return: bb27, unwind: bb14];\n // }\n-// bb25: {                              // bindings for arm 2 - first pattern\n+// bb26: {                              // bindings for arm 2 - first pattern\n //     StorageLive(_15);\n //     _15 = (_2.1: bool);\n //     StorageLive(_16);\n //     _16 = move (_2.2: std::string::String);\n-//     goto -> bb24;\n-// }\n-// bb26: {                              // bindings for arm 2 - second pattern\n-//     StorageLive(_15);\n-//     _15 = (_2.1: bool);\n-//     StorageLive(_16);\n-//     _16 = move (_2.2: std::string::String);\n-//     goto -> bb24;\n+//     goto -> bb25;\n // }\n+\n // bb27: {                              // rest of arm 2\n //     StorageDead(_16);\n //     StorageDead(_15);\n //     goto -> bb28;\n // }\n // bb28: {\n-//     drop(_2) -> [return: bb12, unwind: bb1];\n+//     drop(_2) -> [return: bb13, unwind: bb1];\n // }\n // END rustc.complicated_match.SimplifyCfg-initial.after.mir\n // START rustc.complicated_match.ElaborateDrops.after.mir"}, {"sha": "237828d9020dbd25efef8d5317e7238e4a3577b5", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -4,7 +4,7 @@ fn guard() -> bool {\n     false\n }\n \n-fn guard2(_:i32) -> bool {\n+fn guard2(_: i32) -> bool {\n     true\n }\n \n@@ -45,20 +45,20 @@ fn main() {\n //      _2 = std::option::Option::<i32>::Some(const 42i32,);\n //      FakeRead(ForMatchedPlace, _2);\n //      _3 = discriminant(_2);\n-//      switchInt(move _3) -> [0isize: bb4, 1isize: bb2, otherwise: bb5];\n+//      switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5];\n //  }\n //  bb1 (cleanup): {\n //      resume;\n //  }\n-//  bb2: {\n-//      falseEdges -> [real: bb6, imaginary: bb3]; //pre_binding1\n+//  bb2: {  // pre_binding3 and arm3\n+//      _1 = (const 3i32, const 3i32);\n+//      goto -> bb11;\n //  }\n //  bb3: {\n-//      falseEdges -> [real: bb10, imaginary: bb4]; //pre_binding2\n+//      falseEdges -> [real: bb6, imaginary: bb4]; //pre_binding1\n //  }\n-//  bb4: { //pre_binding3 and arm3\n-//      _1 = (const 3i32, const 3i32);\n-//      goto -> bb11;\n+//  bb4: {\n+//      falseEdges -> [real: bb10, imaginary: bb2]; //pre_binding2\n //  }\n //  bb5: {\n //      unreachable;\n@@ -91,7 +91,7 @@ fn main() {\n //  bb9: { // to pre_binding2\n //      StorageDead(_7);\n //      StorageDead(_6);\n-//      goto -> bb3;\n+//      goto -> bb4;\n //  }\n //  bb10: { // arm2\n //      StorageLive(_9);\n@@ -103,7 +103,7 @@ fn main() {\n //      StorageDead(_9);\n //      goto -> bb11;\n //  }\n-//  bb11: { // arm3\n+//  bb11: {\n //      StorageDead(_2);\n //      StorageDead(_1);\n //      _0 = ();\n@@ -117,31 +117,41 @@ fn main() {\n //      _2 = std::option::Option::<i32>::Some(const 42i32,);\n //      FakeRead(ForMatchedPlace, _2);\n //      _3 = discriminant(_2);\n-//      switchInt(move _3) -> [0isize: bb3, 1isize: bb2, otherwise: bb4];\n+//      switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5];\n //  }\n //  bb1 (cleanup): {\n //      resume;\n //  }\n-//  bb2: {\n-//      falseEdges -> [real: bb5, imaginary: bb3];\n+//  bb2: { // pre_binding2\n+//      falseEdges -> [real: bb10, imaginary: bb4];\n //  }\n-//  bb3: {\n-//      falseEdges -> [real: bb9, imaginary: bb10];\n+//  bb3: { // pre_binding1\n+//      falseEdges -> [real: bb6, imaginary: bb2];\n //  }\n-//  bb4: { // to arm3 (can skip 2 since this is `Some`)\n+//  bb4: { // binding3 and arm3\n+//      StorageLive(_9);\n+//      _9 = ((_2 as Some).0: i32);\n+//      StorageLive(_10);\n+//      _10 = _9;\n+//      _1 = (const 2i32, move _10);\n+//      StorageDead(_10);\n+//      StorageDead(_9);\n+//      goto -> bb11;\n+//  }\n+//  bb5: {\n //      unreachable;\n //  }\n-//  bb5: { // binding1 and guard\n+//  bb6: {\n //      StorageLive(_6);\n //      _6 = &((_2 as Some).0: i32);\n //      _4 = &shallow _2;\n //      StorageLive(_7);\n-//      _7 = const guard() -> [return: bb6, unwind: bb1];\n+//      _7 = const guard() -> [return: bb7, unwind: bb1];\n //  }\n-//  bb6: { // end of guard\n-//      switchInt(move _7) -> [false: bb8, otherwise: bb7];\n+//  bb7: { // end of guard\n+//      switchInt(move _7) -> [false: bb9, otherwise: bb8];\n //  }\n-//  bb7: {\n+//  bb8: {\n //      StorageDead(_7);\n //      FakeRead(ForMatchGuard, _4);\n //      FakeRead(ForGuardBinding, _6);\n@@ -155,25 +165,15 @@ fn main() {\n //      StorageDead(_6);\n //      goto -> bb11;\n //  }\n-//  bb8: { // to pre_binding3 (can skip 2 since this is `Some`)\n+//  bb9: { // to pre_binding3 (can skip 2 since this is `Some`)\n //      StorageDead(_7);\n //      StorageDead(_6);\n-//      falseEdges -> [real: bb10, imaginary: bb3];\n+//      falseEdges -> [real: bb4, imaginary: bb2];\n //  }\n-//  bb9: { // arm2\n+//  bb10: { // arm2\n //      _1 = (const 3i32, const 3i32);\n //      goto -> bb11;\n //  }\n-//  bb10: { // binding3 and arm3\n-//      StorageLive(_9);\n-//      _9 = ((_2 as Some).0: i32);\n-//      StorageLive(_10);\n-//      _10 = _9;\n-//      _1 = (const 2i32, move _10);\n-//      StorageDead(_10);\n-//      StorageDead(_9);\n-//      goto -> bb11;\n-//  }\n //  bb11: {\n //      StorageDead(_2);\n //      StorageDead(_1);\n@@ -188,31 +188,38 @@ fn main() {\n //      _2 = std::option::Option::<i32>::Some(const 1i32,);\n //      FakeRead(ForMatchedPlace, _2);\n //      _4 = discriminant(_2);\n-//      switchInt(move _4) -> [1isize: bb2, otherwise: bb3];\n+//      switchInt(move _4) -> [1isize: bb3, otherwise: bb2];\n //  }\n //  bb1 (cleanup): {\n //      resume;\n //  }\n //  bb2: {\n-//      falseEdges -> [real: bb5, imaginary: bb3];\n+//      falseEdges -> [real: bb10, imaginary: bb5];\n //  }\n //  bb3: {\n-//      falseEdges -> [real: bb9, imaginary: bb4];\n+//      falseEdges -> [real: bb6, imaginary: bb2];\n //  }\n //  bb4: {\n-//      falseEdges -> [real: bb10, imaginary: bb14];\n+//      StorageLive(_14);\n+//      _14 = _2;\n+//      _1 = const 4i32;\n+//      StorageDead(_14);\n+//      goto -> bb15;\n //  }\n //  bb5: {\n+//      falseEdges -> [real: bb11, imaginary: bb4];\n+//  }\n+//  bb6: { //end of guard1\n //      StorageLive(_7);\n //      _7 = &((_2 as Some).0: i32);\n //      _5 = &shallow _2;\n //      StorageLive(_8);\n-//      _8 = const guard() -> [return: bb6, unwind: bb1];\n-//  }\n-//  bb6: { //end of guard1\n-//      switchInt(move _8) -> [false: bb8, otherwise: bb7];\n+//      _8 = const guard() -> [return: bb7, unwind: bb1];\n //  }\n //  bb7: {\n+//      switchInt(move _8) -> [false: bb9, otherwise: bb8];\n+//  }\n+//  bb8: {\n //      StorageDead(_8);\n //      FakeRead(ForMatchGuard, _5);\n //      FakeRead(ForGuardBinding, _7);\n@@ -223,32 +230,32 @@ fn main() {\n //      StorageDead(_7);\n //      goto -> bb15;\n //  }\n-//  bb8: {\n+//  bb9: {\n //      StorageDead(_8);\n //      StorageDead(_7);\n-//      falseEdges -> [real: bb3, imaginary: bb3];\n+//      falseEdges -> [real: bb2, imaginary: bb2];\n //  }\n-//  bb9: { // binding2 & arm2\n+//  bb10: {  // binding2 & arm2\n //      StorageLive(_9);\n //      _9 = _2;\n //      _1 = const 2i32;\n //      StorageDead(_9);\n //      goto -> bb15;\n //  }\n-//  bb10: { // binding3: Some(y) if guard2(y)\n+//  bb11: { // binding3: Some(y) if guard2(y)\n //      StorageLive(_11);\n //      _11 = &((_2 as Some).0: i32);\n //      _5 = &shallow _2;\n //      StorageLive(_12);\n //      StorageLive(_13);\n //      _13 = (*_11);\n-//      _12 = const guard2(move _13) -> [return: bb11, unwind: bb1];\n+//      _12 = const guard2(move _13) -> [return: bb12, unwind: bb1];\n //  }\n-//  bb11: { // end of guard2\n+//  bb12: { // end of guard2\n //      StorageDead(_13);\n-//      switchInt(move _12) -> [false: bb13, otherwise: bb12];\n+//      switchInt(move _12) -> [false: bb14, otherwise: bb13];\n //  }\n-//  bb12: { // binding4 & arm4\n+//  bb13: { // binding4 & arm4\n //      StorageDead(_12);\n //      FakeRead(ForMatchGuard, _5);\n //      FakeRead(ForGuardBinding, _11);\n@@ -259,17 +266,10 @@ fn main() {\n //      StorageDead(_11);\n //      goto -> bb15;\n //  }\n-//  bb13: {\n+//  bb14: {\n //      StorageDead(_12);\n //      StorageDead(_11);\n-//      falseEdges -> [real: bb14, imaginary: bb14];\n-//  }\n-//  bb14: {\n-//      StorageLive(_14);\n-//      _14 = _2;\n-//      _1 = const 4i32;\n-//      StorageDead(_14);\n-//      goto -> bb15;\n+//      falseEdges -> [real: bb4, imaginary: bb4];\n //  }\n //  bb15: {\n //      StorageDead(_2);"}, {"sha": "5ee3e1447d832d2ee62c08345fb4537a0fe20d75", "filename": "src/test/mir-opt/match_test.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -20,35 +20,35 @@ fn main() {\n // START rustc.main.SimplifyCfg-initial.after.mir\n //    bb0: {\n //        ...\n-//        switchInt(move _6) -> [false: bb6, otherwise: bb5];\n+//        switchInt(move _6) -> [false: bb4, otherwise: bb1];\n //    }\n //    bb1: {\n-//        falseEdges -> [real: bb9, imaginary: bb2];\n+//        _7 = Lt(_1, const 10i32);\n+//        switchInt(move _7) -> [false: bb4, otherwise: bb2];\n //    }\n //    bb2: {\n-//        falseEdges -> [real: bb12, imaginary: bb3];\n+//        falseEdges -> [real: bb9, imaginary: bb6];\n //    }\n //    bb3: {\n-//        falseEdges -> [real: bb13, imaginary: bb4];\n-//    }\n-//    bb4: {\n //        _3 = const 3i32;\n //        goto -> bb14;\n //    }\n+//    bb4: {\n+//        _4 = Le(const 10i32, _1);\n+//        switchInt(move _4) -> [false: bb7, otherwise: bb5];\n+//    }\n //    bb5: {\n-//        _7 = Lt(_1, const 10i32);\n-//        switchInt(move _7) -> [false: bb6, otherwise: bb1];\n+//        _5 = Le(_1, const 20i32);\n+//        switchInt(move _5) -> [false: bb7, otherwise: bb6];\n //    }\n //    bb6: {\n-//        _4 = Le(const 10i32, _1);\n-//        switchInt(move _4) -> [false: bb8, otherwise: bb7];\n+//        falseEdges -> [real: bb12, imaginary: bb8];\n //    }\n //    bb7: {\n-//        _5 = Le(_1, const 20i32);\n-//        switchInt(move _5) -> [false: bb8, otherwise: bb2];\n+//        switchInt(_1) -> [-1i32: bb8, otherwise: bb3];\n //    }\n //    bb8: {\n-//        switchInt(_1) -> [-1i32: bb3, otherwise: bb4];\n+//        falseEdges -> [real: bb13, imaginary: bb3];\n //    }\n //    bb9: {\n //        _8 = &shallow _1;\n@@ -64,7 +64,7 @@ fn main() {\n //    }\n //    bb11: {\n //        StorageDead(_9);\n-//        falseEdges -> [real: bb4, imaginary: bb2];\n+//        falseEdges -> [real: bb3, imaginary: bb6];\n //    }\n //    bb12: {\n //        _3 = const 1i32;"}, {"sha": "294fe247c38be3de5d909f32a8c4f88a0c609252", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -19,17 +19,17 @@ fn main() {\n // bb0: {\n //     FakeRead(ForMatchedPlace, _1);\n //     _3 = discriminant(_1);\n-//     switchInt(move _3) -> [1isize: bb3, otherwise: bb2];\n+//     switchInt(move _3) -> [1isize: bb2, otherwise: bb1];\n // }\n // bb1: {\n-//     goto -> bb4;\n-// }\n-// bb2: {\n //     _0 = const 1i32;\n //     goto -> bb7;\n // }\n+// bb2: {\n+//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb1];\n+// }\n // bb3: {\n-//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb1, otherwise: bb2];\n+//     goto -> bb4;\n // }\n // bb4: {\n //     _4 = &shallow _1;\n@@ -51,7 +51,7 @@ fn main() {\n // }\n // bb6: {\n //     StorageDead(_8);\n-//     goto -> bb2;\n+//     goto -> bb1;\n // }\n // bb7: {\n //     return;\n@@ -65,17 +65,17 @@ fn main() {\n // bb0: {\n //     nop;\n //     _3 = discriminant(_1);\n-//     switchInt(move _3) -> [1isize: bb3, otherwise: bb2];\n+//     switchInt(move _3) -> [1isize: bb2, otherwise: bb1];\n // }\n // bb1: {\n-//     goto -> bb4;\n-// }\n-// bb2: {\n //     _0 = const 1i32;\n //     goto -> bb7;\n // }\n+// bb2: {\n+//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb1];\n+// }\n // bb3: {\n-//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb1, otherwise: bb2];\n+//     goto -> bb4;\n // }\n // bb4: {\n //     nop;\n@@ -97,7 +97,7 @@ fn main() {\n // }\n // bb6: {\n //     StorageDead(_8);\n-//     goto -> bb2;\n+//     goto -> bb1;\n // }\n // bb7: {\n //     return;"}, {"sha": "abac66d95c5484b466d8635a887f5ebf13e99b0e", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -47,22 +47,22 @@ fn main() {\n //     }\n //     bb0: {\n //         _5 = discriminant(_1);\n-//         switchInt(move _5) -> [0isize: bb3, otherwise: bb1];\n+//         switchInt(move _5) -> [0isize: bb1, otherwise: bb2];\n //     }\n //     bb1: {\n+//         _10 = ((_1 as Ok).0: u32);\n+//         ((_0 as Ok).0: u32) = move _10;\n+//         discriminant(_0) = 0;\n+//         goto -> bb3;\n+//     }\n+//     bb2: {\n //         _6 = ((_1 as Err).0: i32);\n //         ((_0 as Err).0: i32) = move _6;\n //         discriminant(_0) = 1;\n-//         goto -> bb2;\n-//     }\n-//     bb2: {\n-//         return;\n+//         goto -> bb3;\n //     }\n //     bb3: {\n-//         _10 = ((_1 as Ok).0: u32);\n-//         ((_0 as Ok).0: u32) = move _10;\n-//         discriminant(_0) = 0;\n-//         goto -> bb2;\n+//         return;\n //     }\n // }\n // END rustc.try_identity.SimplifyArmIdentity.before.mir\n@@ -106,22 +106,22 @@ fn main() {\n //     }\n //     bb0: {\n //         _5 = discriminant(_1);\n-//         switchInt(move _5) -> [0isize: bb3, otherwise: bb1];\n+//         switchInt(move _5) -> [0isize: bb1, otherwise: bb2];\n //     }\n //     bb1: {\n //         _0 = move _1;\n //         nop;\n //         nop;\n-//         goto -> bb2;\n+//         goto -> bb3;\n //     }\n //     bb2: {\n-//         return;\n-//     }\n-//     bb3: {\n //         _0 = move _1;\n //         nop;\n //         nop;\n-//         goto -> bb2;\n+//         goto -> bb3;\n+//     }\n+//     bb3: {\n+//         return;\n //     }\n // }\n // END rustc.try_identity.SimplifyArmIdentity.after.mir\n@@ -165,16 +165,16 @@ fn main() {\n //     }\n //     bb0: {\n //         _5 = discriminant(_1);\n-//         goto -> bb2;\n+//         goto -> bb1;\n //     }\n //     bb1: {\n-//         return;\n-//     }\n-//     bb2: {\n //         _0 = move _1;\n //         nop;\n //         nop;\n-//         goto -> bb1;\n+//         goto -> bb2;\n+//     }\n+//     bb2: {\n+//         return;\n //     }\n // }\n // END rustc.try_identity.SimplifyBranchSame.after.mir"}, {"sha": "e49d47673912a29c8f678d936ecfb5f85f78ae26", "filename": "src/test/ui/consts/const_let_refutable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -1,7 +1,7 @@\n fn main() {}\n \n-const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n-    a + b //~ ERROR can only call other `const fn` within a `const fn`\n-    //~^ ERROR use of possibly-uninitialized variable: `a`\n-    //~| ERROR use of possibly-uninitialized variable: `b`\n+const fn slice(&[a, b]: &[i32]) -> i32 {\n+    //~^ ERROR refutable pattern in function argument\n+    //~| ERROR loops and conditional expressions are not stable in const fn\n+    a + b\n }"}, {"sha": "719e14005ffa424d303c699e7bc871f0ec161a1a", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -1,31 +1,19 @@\n error[E0005]: refutable pattern in function argument: `&[]`, `&[_]` and `&[_, _, _, ..]` not covered\n   --> $DIR/const_let_refutable.rs:3:16\n    |\n-LL | const fn slice([a, b]: &[i32]) -> i32 {\n-   |                ^^^^^^ patterns `&[]`, `&[_]` and `&[_, _, _, ..]` not covered\n+LL | const fn slice(&[a, b]: &[i32]) -> i32 {\n+   |                ^^^^^^^ patterns `&[]`, `&[_]` and `&[_, _, _, ..]` not covered\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `const <&i32 as std::ops::Add>::add` is not stable as `const fn`\n-  --> $DIR/const_let_refutable.rs:4:5\n+error[E0723]: loops and conditional expressions are not stable in const fn\n+  --> $DIR/const_let_refutable.rs:3:17\n    |\n-LL |     a + b\n-   |     ^^^^^\n+LL | const fn slice(&[a, b]: &[i32]) -> i32 {\n+   |                 ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0381]: use of possibly-uninitialized variable: `a`\n-  --> $DIR/const_let_refutable.rs:4:5\n-   |\n-LL |     a + b\n-   |     ^ use of possibly-uninitialized `a`\n-\n-error[E0381]: use of possibly-uninitialized variable: `b`\n-  --> $DIR/const_let_refutable.rs:4:9\n-   |\n-LL |     a + b\n-   |         ^ use of possibly-uninitialized `b`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0005, E0381, E0723.\n+Some errors have detailed explanations: E0005, E0723.\n For more information about an error, try `rustc --explain E0005`."}, {"sha": "01b99134a445f37ad72ceb92f3b0a3d0eab28814", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -10,7 +10,6 @@ fn transmute<T, U>(t: T) -> U {\n     let Helper::U(u) = Helper::T(t, []);\n     //~^ ERROR refutable pattern in local binding: `T(_, _)` not covered\n     u\n-    //~^ ERROR use of possibly-uninitialized variable: `u`\n }\n \n fn main() {"}, {"sha": "a4ffceea4c97fc1a6c358a0e4a2e64741d18d895", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -19,13 +19,6 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n LL |     if let Helper::U(u) = Helper::T(t, []) { /* */ }\n    |\n \n-error[E0381]: use of possibly-uninitialized variable: `u`\n-  --> $DIR/empty-never-array.rs:12:5\n-   |\n-LL |     u\n-   |     ^ use of possibly-uninitialized `u`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0005, E0381.\n-For more information about an error, try `rustc --explain E0005`.\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "3ce659ccd14da3ec29b531edb83eac3fb776910e", "filename": "src/test/ui/issues/issue-12567.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -8,7 +8,7 @@ LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n    |                 -- data moved here\n LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n-   |                        --- ...and here\n+   |            --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n@@ -22,7 +22,7 @@ LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n    |                 -- data moved here\n LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n-   |            --- ...and here\n+   |                        --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n "}, {"sha": "392fb1b24ddc4b30533439d83a8ab6475c332313", "filename": "src/test/ui/issues/issue-15381.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -4,6 +4,5 @@ fn main() {\n     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n         //~^ ERROR refutable pattern in `for` loop binding: `&[]`, `&[_]`, `&[_, _]` and 1 more not\n         println!(\"y={}\", y);\n-        //~^ ERROR borrow of possibly-uninitialized variable: `y`\n     }\n }"}, {"sha": "35f46ab57279cb5c035838001ac9f8bb1d7b11b8", "filename": "src/test/ui/issues/issue-15381.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -4,13 +4,6 @@ error[E0005]: refutable pattern in `for` loop binding: `&[]`, `&[_]`, `&[_, _]`\n LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n    |         ^^^^^^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 1 more not covered\n \n-error[E0381]: borrow of possibly-uninitialized variable: `y`\n-  --> $DIR/issue-15381.rs:6:26\n-   |\n-LL |         println!(\"y={}\", y);\n-   |                          ^ use of possibly-uninitialized `y`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0005, E0381.\n-For more information about an error, try `rustc --explain E0005`.\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "3ee57978bb009fd01680d859f6edae99d2e356c7", "filename": "src/test/ui/or-patterns/consistent-bindings.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -2,6 +2,8 @@\n \n // edition:2018\n \n+// check-pass\n+\n #![feature(or_patterns)]\n \n fn main() {\n@@ -11,35 +13,29 @@ fn main() {\n     let Ok(ref mut a) | Err(ref mut a) = Ok(0);\n \n     // Two levels:\n-    enum Tri<S, T, U> { V1(S), V2(T), V3(U) }\n+    enum Tri<S, T, U> {\n+        V1(S),\n+        V2(T),\n+        V3(U),\n+    }\n     use Tri::*;\n \n-    let Ok((V1(a) | V2(a) | V3(a), b)) | Err(Ok((a, b)) | Err((a, b)))\n-        : Result<_, Result<_, _>>\n-        = Ok((V1(1), 1));\n+    let Ok((V1(a) | V2(a) | V3(a), b)) | Err(Ok((a, b)) | Err((a, b))): Result<_, Result<_, _>> =\n+        Ok((V1(1), 1));\n \n-    let Ok((V1(a) | V2(a) | V3(a), ref b)) | Err(Ok((a, ref b)) | Err((a, ref b)))\n-        : Result<_, Result<_, _>>\n-        = Ok((V1(1), 1));\n+    let Ok((V1(a) | V2(a) | V3(a), ref b)) | Err(Ok((a, ref b)) | Err((a, ref b))): Result<\n+        _,\n+        Result<_, _>,\n+    > = Ok((V1(1), 1));\n \n     // Three levels:\n     let (\n-            a,\n-            Err((ref mut b, ref c, d)) |\n-            Ok((\n-                Ok(\n-                    V1((ref c, d)) |\n-                    V2((d, ref c)) |\n-                    V3((ref c, Ok((_, d)) | Err((d, _))))\n-                ) |\n-                Err((ref c, d)),\n-                ref mut b\n-            ))\n-        ) =\n-        (1, Ok((Ok(V3((1, Ok((1, 1))))), 1)));\n-\n-    // FIXME(or_patterns; Centril | dlrobertson): remove this line below and\n-    // change this test to check-pass once MIR can handle or-patterns with bindings.\n-    let () = 0;\n-    //~^ ERROR mismatched types\n+        a,\n+        Err((ref mut b, ref c, d))\n+        | Ok((\n+            Ok(V1((ref c, d)) | V2((d, ref c)) | V3((ref c, Ok((_, d)) | Err((d, _)))))\n+            | Err((ref c, d)),\n+            ref mut b,\n+        )),\n+    ): (_, Result<_, _>) = (1, Ok((Ok(V3((1, Ok::<_, (i32, i32)>((1, 1))))), 1)));\n }"}, {"sha": "bb8e90af5f2027ab9ae78ac2ca01e21e858f0b32", "filename": "src/test/ui/or-patterns/consistent-bindings.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a20969c489d7f415f8073aacef1d480de6459ce8/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a20969c489d7f415f8073aacef1d480de6459ce8/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr?ref=a20969c489d7f415f8073aacef1d480de6459ce8", "patch": "@@ -1,9 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/consistent-bindings.rs:43:9\n-   |\n-LL |     let () = 0;\n-   |         ^^ expected integer, found `()`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c8bc4a2a8d51b189e922f3543b8616e5aa7d3302", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -1,13 +1,8 @@\n #![feature(or_patterns)]\n #![deny(unreachable_patterns)]\n \n-// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+// We wrap patterns in a tuple because top-level or-patterns were special-cased.\n fn main() {\n-    // Get the fatal error out of the way\n-    match (0u8,) {\n-        (0 | _,) => {} //~^ ERROR or-patterns are not fully implemented yet\n-    }\n-\n     match (0u8, 0u8) {\n         //~^ ERROR non-exhaustive patterns: `(2u8..=std::u8::MAX, _)`\n         (0 | 1, 2 | 3) => {}"}, {"sha": "3ba26de10d3d5a8ab1c5fde816d93d4e51ce37d3", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -1,33 +1,27 @@\n error[E0004]: non-exhaustive patterns: `(2u8..=std::u8::MAX, _)` not covered\n-  --> $DIR/exhaustiveness-non-exhaustive.rs:13:11\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:6:11\n    |\n LL |     match (0u8, 0u8) {\n    |           ^^^^^^^^^^ pattern `(2u8..=std::u8::MAX, _)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((4u8..=std::u8::MAX))` not covered\n-  --> $DIR/exhaustiveness-non-exhaustive.rs:17:11\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:10:11\n    |\n LL |     match ((0u8,),) {\n    |           ^^^^^^^^^ pattern `((4u8..=std::u8::MAX))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(Some(2u8..=std::u8::MAX))` not covered\n-  --> $DIR/exhaustiveness-non-exhaustive.rs:21:11\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:14:11\n    |\n LL |     match (Some(0u8),) {\n    |           ^^^^^^^^^^^^ pattern `(Some(2u8..=std::u8::MAX))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: or-patterns are not fully implemented yet\n-  --> $DIR/exhaustiveness-non-exhaustive.rs:9:10\n-   |\n-LL |         (0 | _,) => {}\n-   |          ^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "8dcf8792f6f961eb0db3868921ce63c3162bac32", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -1,13 +1,10 @@\n #![feature(or_patterns)]\n #![deny(unreachable_patterns)]\n \n-// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n-fn main() {\n-    // Get the fatal error out of the way\n-    match (0,) {\n-        (0 | _,) => {} //~^ ERROR or-patterns are not fully implemented yet\n-    }\n+// check-pass\n \n+// We wrap patterns in a tuple because top-level or-patterns were special-cased.\n+fn main() {\n     match (0,) {\n         (1 | 2,) => {}\n         _ => {}"}, {"sha": "dc5a4186ac7004d4be975e8f0075bd68994250db", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a20969c489d7f415f8073aacef1d480de6459ce8/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a20969c489d7f415f8073aacef1d480de6459ce8/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr?ref=a20969c489d7f415f8073aacef1d480de6459ce8", "patch": "@@ -1,8 +0,0 @@\n-error: or-patterns are not fully implemented yet\n-  --> $DIR/exhaustiveness-pass.rs:9:10\n-   |\n-LL |         (0 | _,) => {}\n-   |          ^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "44bae282d8857070c65d45faf7fafd03669b8c9c", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -1,13 +1,8 @@\n #![feature(or_patterns)]\n #![deny(unreachable_patterns)]\n \n-// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+// We wrap patterns in a tuple because top-level or-patterns were special-cased.\n fn main() {\n-    // Get the fatal error out of the way\n-    match (0u8,) {\n-        (0 | _,) => {} //~^ ERROR or-patterns are not fully implemented yet\n-    }\n-\n     match (0u8,) {\n         (1 | 2,) => {}\n         (1,) => {} //~ ERROR unreachable pattern"}, {"sha": "bef6f8270bc54ef028a8172b5f2a40c089bd05cf", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -1,110 +1,104 @@\n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:15:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:8:9\n    |\n LL |         (1,) => {}\n    |         ^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:3:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:2:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:20:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:13:9\n    |\n LL |         (2,) => {}\n    |         ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:26:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:19:9\n    |\n LL |         (1 | 2,) => {}\n    |         ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:31:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:24:9\n    |\n LL |         (1, 3) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:32:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:25:9\n    |\n LL |         (1, 4) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:33:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:26:9\n    |\n LL |         (2, 4) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:34:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:27:9\n    |\n LL |         (2 | 1, 4) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:36:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:29:9\n    |\n LL |         (1, 4 | 5) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:41:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:34:9\n    |\n LL |         (Some(1),) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:42:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:35:9\n    |\n LL |         (None,) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:47:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:40:9\n    |\n-LL |         ((1..=4,),) => {},\n+LL |         ((1..=4,),) => {}\n    |         ^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:53:12\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:45:14\n    |\n-LL |          | 1,) => {}\n-   |            ^\n+LL |         (1 | 1,) => {}\n+   |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:60:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:52:15\n    |\n LL |             | 0] => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:58:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:50:15\n    |\n LL |             | 0\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:68:10\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:60:10\n    |\n LL |         [1\n    |          ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:74:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:66:14\n    |\n LL |         Some(0\n    |              ^\n \n-error: or-patterns are not fully implemented yet\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:9:10\n-   |\n-LL |         (0 | _,) => {}\n-   |          ^^^^^\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "2ef5537db60ad84776675f15b930770ea429f155", "filename": "src/test/ui/or-patterns/feature-gate-const-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -30,6 +30,8 @@ fn main() {\n         let x = Ok(3);\n         let Ok(y) | Err(y) = x;\n         //~^ ERROR or-pattern is not allowed in a `const`\n+        //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n         2\n     }];\n }"}, {"sha": "9284e2d442dfac76396a567abaab2703028ed3fb", "filename": "src/test/ui/or-patterns/feature-gate-const-fn.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -52,6 +52,19 @@ LL |         let Ok(y) | Err(y) = x;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/feature-gate-const-fn.rs:31:25\n+   |\n+LL |         let Ok(y) | Err(y) = x;\n+   |                         ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/feature-gate-const-fn.rs:31:16\n+   |\n+LL |         let Ok(y) | Err(y) = x;\n+   |                ^\n+\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0019, E0658.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "44893036383587118d8826f0507a2693560e2d3d", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -6,7 +6,6 @@ fn foo(res: Result<u32, &R>) -> u32 {\n     let Ok(x) = res;\n     //~^ ERROR refutable pattern\n     x\n-    //~^ ERROR use of possibly-uninitialized variable: `x`\n }\n \n fn main() {"}, {"sha": "aa23aed4b425a581658218fa2335948f50612c97", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -11,13 +11,6 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n LL |     if let Ok(x) = res { /* */ }\n    |\n \n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/recursive-types-are-not-uninhabited.rs:8:5\n-   |\n-LL |     x\n-   |     ^ use of possibly-uninitialized `x`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0005, E0381.\n-For more information about an error, try `rustc --explain E0005`.\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "612fae208cc9d8e18fa80a56720ee7f48cc6833c", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -65,13 +65,18 @@ LL |     match &(e.clone(), e.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &(Either::One(_t), Either::Two(_u))\n-   |         -----------------------------------\n-   |         |             |                |\n-   |         |             |                ...and here\n-   |         |             data moved here\n-   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |                       --               -- ...and here\n+   |                       |\n+   |                       data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the `&`\n+   |\n+LL |         (Either::One(_t), Either::Two(_u))\n+LL |\n+LL |\n+LL |         | &(Either::Two(_t), Either::One(_u)) => (),\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:70:11\n@@ -170,13 +175,18 @@ LL |     match &mut (em.clone(), em.clone()) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u))\n-   |         ---------------------------------------\n-   |         |                 |                |\n-   |         |                 |                ...and here\n-   |         |                 data moved here\n-   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |                           --               -- ...and here\n+   |                           |\n+   |                           data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider removing the `&mut`\n+   |\n+LL |         (Either::One(_t), Either::Two(_u))\n+LL |\n+LL |\n+LL |         | &mut (Either::Two(_t), Either::One(_u)) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:122:11"}, {"sha": "5550e097cf55461d2f78159b426e009fcb918f06", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30058df867fbe5c43f90707d6fb644fba6201c2a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=30058df867fbe5c43f90707d6fb644fba6201c2a", "patch": "@@ -263,11 +263,18 @@ LL |     match r {\n    |           ^\n LL |\n LL |         &Either::One(_t)\n-   |         ----------------\n-   |         |            |\n-   |         |            data moved here\n-   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `Either::One(_t)`\n+   |                      --\n+   |                      |\n+   |                      data moved here\n+   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the `&`\n+   |\n+LL |         Either::One(_t)\n+LL |\n+LL |\n+LL |         | &Either::Two(_t) => (),\n+   |\n \n error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:188:11\n@@ -502,11 +509,18 @@ LL |     match &e {\n    |           ^^\n LL |\n LL |         &Either::One(_t)\n-   |         ----------------\n-   |         |            |\n-   |         |            data moved here\n-   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&`: `Either::One(_t)`\n+   |                      --\n+   |                      |\n+   |                      data moved here\n+   |                      move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the `&`\n+   |\n+LL |         Either::One(_t)\n+LL |\n+LL |\n+LL |         | &Either::Two(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:308:11\n@@ -571,11 +585,18 @@ LL |     match &mut em {\n    |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t)\n-   |         --------------------\n-   |         |                |\n-   |         |                data moved here\n-   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |                          --\n+   |                          |\n+   |                          data moved here\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider removing the `&mut`\n+   |\n+LL |         Either::One(_t)\n+LL |\n+LL |\n+LL |         | &mut Either::Two(_t) => (),\n+   |\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:343:11"}]}