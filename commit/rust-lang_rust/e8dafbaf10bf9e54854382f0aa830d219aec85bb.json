{"sha": "e8dafbaf10bf9e54854382f0aa830d219aec85bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZGFmYmFmMTBiZjllNTQ4NTQzODJmMGFhODMwZDIxOWFlYzg1YmI=", "commit": {"author": {"name": "Bastian Gruber", "email": "gruberbastian@me.com", "date": "2018-11-21T12:06:22Z"}, "committer": {"name": "Bastian Gruber", "email": "gruberbastian@me.com", "date": "2018-11-21T12:06:22Z"}, "message": "Adjust doc comments", "tree": {"sha": "63870adabdef1b222efdc5d6bad695d9cd427805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63870adabdef1b222efdc5d6bad695d9cd427805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8dafbaf10bf9e54854382f0aa830d219aec85bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dafbaf10bf9e54854382f0aa830d219aec85bb", "html_url": "https://github.com/rust-lang/rust/commit/e8dafbaf10bf9e54854382f0aa830d219aec85bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8dafbaf10bf9e54854382f0aa830d219aec85bb/comments", "author": null, "committer": null, "parents": [{"sha": "5c747eb32654401b9b6fe053c3f51399a6454f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c747eb32654401b9b6fe053c3f51399a6454f8c", "html_url": "https://github.com/rust-lang/rust/commit/5c747eb32654401b9b6fe053c3f51399a6454f8c"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "2d0a2501f7e99575605ca6c6a0151f2279c91138", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e8dafbaf10bf9e54854382f0aa830d219aec85bb/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dafbaf10bf9e54854382f0aa830d219aec85bb/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=e8dafbaf10bf9e54854382f0aa830d219aec85bb", "patch": "@@ -1399,7 +1399,7 @@ impl<'a> From<&'a Path> for Box<Path> {\n impl From<Box<Path>> for PathBuf {\n     /// Converts a `Box<Path>` into a `PathBuf`\n     ///\n-    /// This conversion does not allocate memory\n+    /// This conversion does not allocate or copy memory.\n     fn from(boxed: Box<Path>) -> PathBuf {\n         boxed.into_path_buf()\n     }\n@@ -1409,7 +1409,8 @@ impl From<Box<Path>> for PathBuf {\n impl From<PathBuf> for Box<Path> {\n     /// Converts a `PathBuf` into a `Box<Path>`\n     ///\n-    /// This conversion does not allocate memory\n+    /// This conversion currently should not allocate memory, \n+    // but this behavior is not guaranteed on all platforms or in all future versions.\n     fn from(p: PathBuf) -> Box<Path> {\n         p.into_boxed_path()\n     }\n@@ -1434,7 +1435,7 @@ impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {\n impl From<OsString> for PathBuf {\n     /// Converts a `OsString` into a `PathBuf`\n     ///\n-    /// This conversion does not allocate memory\n+    /// This conversion does not allocate or copy memory.\n     fn from(s: OsString) -> PathBuf {\n         PathBuf { inner: s }\n     }\n@@ -1444,7 +1445,7 @@ impl From<OsString> for PathBuf {\n impl From<PathBuf> for OsString {\n     /// Converts a `PathBuf` into a `OsString`\n     ///\n-    /// This conversion does not allocate memory\n+    /// This conversion does not allocate or copy memory.\n     fn from(path_buf : PathBuf) -> OsString {\n         path_buf.inner\n     }\n@@ -1454,7 +1455,7 @@ impl From<PathBuf> for OsString {\n impl From<String> for PathBuf {\n     /// Converts a `String` into a `PathBuf`\n     ///\n-    /// This conversion does not allocate memory\n+    /// This conversion does not allocate or copy memory.\n     fn from(s: String) -> PathBuf {\n         PathBuf::from(OsString::from(s))\n     }\n@@ -1551,11 +1552,7 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n-    /// Converts a `PathBuf` into a `Arc<Path>`\n-    ///\n-    /// This conversion happens in place\n-    ///\n-    /// This conversion does not allocate memory\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1565,12 +1562,7 @@ impl From<PathBuf> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Arc<Path> {\n-    /// Converts a `PathBuf` into a `Arc<Path>`\n-    ///\n-    /// This conversion happens in place\n-    ///\n-    /// This conversion does not allocate memory\n-    ///\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.as_os_str());\n@@ -1580,11 +1572,7 @@ impl<'a> From<&'a Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n-    /// Converts a `PathBuf` into a `Rc<Path>`\n-    ///\n-    /// This conversion happens in place\n-    ///\n-    /// This conversion does not allocate memory\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1594,6 +1582,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Rc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());"}]}