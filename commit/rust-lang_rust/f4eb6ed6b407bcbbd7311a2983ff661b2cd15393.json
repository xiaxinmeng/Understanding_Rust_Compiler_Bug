{"sha": "f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZWI2ZWQ2YjQwN2JjYmJkNzMxMWEyOTgzZmY2NjFiMmNkMTUzOTM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-11T20:34:57Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-12T18:48:26Z"}, "message": "Ensure HAS_FREE_LOCAL_NAMES is set for ReFree", "tree": {"sha": "a9b9bcedcda568fda2401435ff29678c80465373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9b9bcedcda568fda2401435ff29678c80465373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "html_url": "https://github.com/rust-lang/rust/commit/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "html_url": "https://github.com/rust-lang/rust/commit/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "7df235b3cc1d43e00c9377f4d44b0d27097fb0a6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "patch": "@@ -554,24 +554,26 @@ bitflags! {\n         /// Does this have [ConstKind::Placeholder]?\n         const HAS_CT_PLACEHOLDER        = 1 << 8;\n \n+        /// `true` if there are \"names\" of regions and so forth\n+        /// that are local to a particular fn/inferctxt\n+        const HAS_FREE_LOCAL_REGIONS    = 1 << 9;\n+\n         /// `true` if there are \"names\" of types and regions and so forth\n         /// that are local to a particular fn\n         const HAS_FREE_LOCAL_NAMES      = TypeFlags::HAS_TY_PARAM.bits\n-                                        | TypeFlags::HAS_RE_PARAM.bits\n                                         | TypeFlags::HAS_CT_PARAM.bits\n                                         | TypeFlags::HAS_TY_INFER.bits\n-                                        | TypeFlags::HAS_RE_INFER.bits\n                                         | TypeFlags::HAS_CT_INFER.bits\n                                         | TypeFlags::HAS_TY_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_RE_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits;\n+                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n         /// Does this have [Projection] or [UnnormalizedProjection]?\n-        const HAS_TY_PROJECTION         = 1 << 9;\n+        const HAS_TY_PROJECTION         = 1 << 10;\n         /// Does this have [Opaque]?\n-        const HAS_TY_OPAQUE             = 1 << 10;\n+        const HAS_TY_OPAQUE             = 1 << 11;\n         /// Does this have [ConstKind::Unevaluated]?\n-        const HAS_CT_PROJECTION         = 1 << 11;\n+        const HAS_CT_PROJECTION         = 1 << 12;\n \n         /// Could this type be normalized further?\n         const HAS_PROJECTION            = TypeFlags::HAS_TY_PROJECTION.bits\n@@ -580,21 +582,21 @@ bitflags! {\n \n         /// Present if the type belongs in a local type context.\n         /// Set for placeholders and inference variables that are not \"Fresh\".\n-        const KEEP_IN_LOCAL_TCX         = 1 << 12;\n+        const KEEP_IN_LOCAL_TCX         = 1 << 13;\n \n         /// Is an error type reachable?\n-        const HAS_TY_ERR                = 1 << 13;\n+        const HAS_TY_ERR                = 1 << 14;\n \n         /// Does this have any region that \"appears free\" in the type?\n         /// Basically anything but [ReLateBound] and [ReErased].\n-        const HAS_FREE_REGIONS          = 1 << 14;\n+        const HAS_FREE_REGIONS          = 1 << 15;\n \n         /// Does this have any [ReLateBound] regions? Used to check\n         /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND         = 1 << 15;\n+        const HAS_RE_LATE_BOUND         = 1 << 16;\n \n         /// Does this have any [ReErased] regions?\n-        const HAS_RE_ERASED             = 1 << 16;\n+        const HAS_RE_ERASED             = 1 << 17;\n \n         /// Flags representing the nominal content of a type,\n         /// computed by FlagsComputation. If you add a new nominal\n@@ -608,6 +610,7 @@ bitflags! {\n                                         | TypeFlags::HAS_TY_PLACEHOLDER.bits\n                                         | TypeFlags::HAS_RE_PLACEHOLDER.bits\n                                         | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                        | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits\n                                         | TypeFlags::HAS_TY_PROJECTION.bits\n                                         | TypeFlags::HAS_TY_OPAQUE.bits\n                                         | TypeFlags::HAS_CT_PROJECTION.bits"}, {"sha": "649381db7cacecfe1f1308bb6db685ee41b87789", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4eb6ed6b407bcbbd7311a2983ff661b2cd15393/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f4eb6ed6b407bcbbd7311a2983ff661b2cd15393", "patch": "@@ -1743,42 +1743,42 @@ impl RegionKind {\n         }\n     }\n \n-    pub fn keep_in_local_tcx(&self) -> bool {\n-        if let ty::ReVar(..) = self { true } else { false }\n-    }\n-\n     pub fn type_flags(&self) -> TypeFlags {\n         let mut flags = TypeFlags::empty();\n \n-        if self.keep_in_local_tcx() {\n-            flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n-        }\n-\n         match *self {\n             ty::ReVar(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_INFER;\n+                flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n             }\n             ty::RePlaceholder(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PLACEHOLDER;\n             }\n-            ty::ReLateBound(..) => {\n-                flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n-            }\n             ty::ReEarlyBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PARAM;\n             }\n-            ty::ReEmpty(_) | ty::ReStatic | ty::ReFree { .. } | ty::ReScope { .. } => {\n+            ty::ReFree { .. } | ty::ReScope { .. } => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n             }\n-            ty::ReErased => {\n-                flags = flags | TypeFlags::HAS_RE_ERASED;\n+            ty::ReEmpty(_) | ty::ReStatic => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }\n             ty::ReClosureBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }\n+            ty::ReLateBound(..) => {\n+                flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n+            }\n+            ty::ReErased => {\n+                flags = flags | TypeFlags::HAS_RE_ERASED;\n+            }\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}]}