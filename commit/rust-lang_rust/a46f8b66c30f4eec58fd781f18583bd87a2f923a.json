{"sha": "a46f8b66c30f4eec58fd781f18583bd87a2f923a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NmY4YjY2YzMwZjRlZWM1OGZkNzgxZjE4NTgzYmQ4N2EyZjkyM2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-07T14:13:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-07T14:13:19Z"}, "message": "prefer float assoc consts over std module", "tree": {"sha": "57161a1495fe78cf7e0eded48854f6a5a18a55bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57161a1495fe78cf7e0eded48854f6a5a18a55bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a46f8b66c30f4eec58fd781f18583bd87a2f923a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a46f8b66c30f4eec58fd781f18583bd87a2f923a", "html_url": "https://github.com/rust-lang/rust/commit/a46f8b66c30f4eec58fd781f18583bd87a2f923a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a46f8b66c30f4eec58fd781f18583bd87a2f923a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d25589f0bdcbde0b270c6d251f3fe850e7759233", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25589f0bdcbde0b270c6d251f3fe850e7759233", "html_url": "https://github.com/rust-lang/rust/commit/d25589f0bdcbde0b270c6d251f3fe850e7759233"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "5acaf6a2a97cddcc1b918533d9b344fcdc8bd2dc", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a46f8b66c30f4eec58fd781f18583bd87a2f923a/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46f8b66c30f4eec58fd781f18583bd87a2f923a/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=a46f8b66c30f4eec58fd781f18583bd87a2f923a", "patch": "@@ -34,37 +34,37 @@ fn main() {\n     assert_eq(-5.0f32 as u32, 0);\n     assert_eq(5.0f32 as i32, 5);\n     assert_eq(-5.0f32 as i32, -5);\n-    assert_eq(std::f32::MAX as i32, i32::MAX);\n-    assert_eq(std::f32::INFINITY as i32, i32::MAX);\n-    assert_eq(std::f32::MAX as u32, u32::MAX);\n-    assert_eq(std::f32::INFINITY as u32, u32::MAX);\n-    assert_eq(std::f32::MIN as i32, i32::MIN);\n-    assert_eq(std::f32::NEG_INFINITY as i32, i32::MIN);\n-    assert_eq(std::f32::MIN as u32, 0);\n-    assert_eq(std::f32::NEG_INFINITY as u32, 0);\n-    assert_eq(std::f32::NAN as i32, 0);\n-    assert_eq(std::f32::NAN as u32, 0);\n+    assert_eq(f32::MAX as i32, i32::MAX);\n+    assert_eq(f32::INFINITY as i32, i32::MAX);\n+    assert_eq(f32::MAX as u32, u32::MAX);\n+    assert_eq(f32::INFINITY as u32, u32::MAX);\n+    assert_eq(f32::MIN as i32, i32::MIN);\n+    assert_eq(f32::NEG_INFINITY as i32, i32::MIN);\n+    assert_eq(f32::MIN as u32, 0);\n+    assert_eq(f32::NEG_INFINITY as u32, 0);\n+    assert_eq(f32::NAN as i32, 0);\n+    assert_eq(f32::NAN as u32, 0);\n     assert_eq((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n     assert_eq((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n     assert_eq(127i8 as f32, 127.0f32);\n     assert_eq(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n-    assert_eq(u128::MAX as f32, std::f32::INFINITY); // saturation\n+    assert_eq(u128::MAX as f32, f32::INFINITY); // saturation\n \n     // f64 <-> int casts\n     assert_eq(5.0f64 as u64, 5);\n     assert_eq(-5.0f64 as u64, 0);\n     assert_eq(5.0f64 as i64, 5);\n     assert_eq(-5.0f64 as i64, -5);\n-    assert_eq(std::f64::MAX as i64, i64::MAX);\n-    assert_eq(std::f64::INFINITY as i64, i64::MAX);\n-    assert_eq(std::f64::MAX as u64, u64::MAX);\n-    assert_eq(std::f64::INFINITY as u64, u64::MAX);\n-    assert_eq(std::f64::MIN as i64, i64::MIN);\n-    assert_eq(std::f64::NEG_INFINITY as i64, i64::MIN);\n-    assert_eq(std::f64::MIN as u64, 0);\n-    assert_eq(std::f64::NEG_INFINITY as u64, 0);\n-    assert_eq(std::f64::NAN as i64, 0);\n-    assert_eq(std::f64::NAN as u64, 0);\n+    assert_eq(f64::MAX as i64, i64::MAX);\n+    assert_eq(f64::INFINITY as i64, i64::MAX);\n+    assert_eq(f64::MAX as u64, u64::MAX);\n+    assert_eq(f64::INFINITY as u64, u64::MAX);\n+    assert_eq(f64::MIN as i64, i64::MIN);\n+    assert_eq(f64::NEG_INFINITY as i64, i64::MIN);\n+    assert_eq(f64::MIN as u64, 0);\n+    assert_eq(f64::NEG_INFINITY as u64, 0);\n+    assert_eq(f64::NAN as i64, 0);\n+    assert_eq(f64::NAN as u64, 0);\n     assert_eq((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n     assert_eq((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n     assert_eq(u128::MAX as f64 as u128, u128::MAX);\n@@ -74,38 +74,38 @@ fn main() {\n     // f32 <-> f64 casts\n     assert_eq(5.0f64 as f32, 5.0f32);\n     assert_eq(5.0f32 as f64, 5.0f64);\n-    assert_eq(std::f64::MAX as f32, std::f32::INFINITY);\n-    assert_eq(std::f64::MIN as f32, std::f32::NEG_INFINITY);\n-    assert_eq(std::f32::INFINITY as f64, std::f64::INFINITY);\n-    assert_eq(std::f32::NEG_INFINITY as f64, std::f64::NEG_INFINITY);\n+    assert_eq(f64::MAX as f32, f32::INFINITY);\n+    assert_eq(f64::MIN as f32, f32::NEG_INFINITY);\n+    assert_eq(f32::INFINITY as f64, f64::INFINITY);\n+    assert_eq(f32::NEG_INFINITY as f64, f64::NEG_INFINITY);\n \n     // f32 min/max\n     assert_eq((1.0 as f32).max(-1.0), 1.0);\n     assert_eq((1.0 as f32).min(-1.0), -1.0);\n-    assert_eq(std::f32::NAN.min(9.0), 9.0);\n-    assert_eq(std::f32::NAN.max(-9.0), -9.0);\n-    assert_eq((9.0 as f32).min(std::f32::NAN), 9.0);\n-    assert_eq((-9.0 as f32).max(std::f32::NAN), -9.0);\n+    assert_eq(f32::NAN.min(9.0), 9.0);\n+    assert_eq(f32::NAN.max(-9.0), -9.0);\n+    assert_eq((9.0 as f32).min(f32::NAN), 9.0);\n+    assert_eq((-9.0 as f32).max(f32::NAN), -9.0);\n \n     // f64 min/max\n     assert_eq((1.0 as f64).max(-1.0), 1.0);\n     assert_eq((1.0 as f64).min(-1.0), -1.0);\n-    assert_eq(std::f64::NAN.min(9.0), 9.0);\n-    assert_eq(std::f64::NAN.max(-9.0), -9.0);\n-    assert_eq((9.0 as f64).min(std::f64::NAN), 9.0);\n-    assert_eq((-9.0 as f64).max(std::f64::NAN), -9.0);\n+    assert_eq(f64::NAN.min(9.0), 9.0);\n+    assert_eq(f64::NAN.max(-9.0), -9.0);\n+    assert_eq((9.0 as f64).min(f64::NAN), 9.0);\n+    assert_eq((-9.0 as f64).max(f64::NAN), -9.0);\n \n     // f32 copysign\n     assert_eq(3.5_f32.copysign(0.42), 3.5_f32);\n     assert_eq(3.5_f32.copysign(-0.42), -3.5_f32);\n     assert_eq((-3.5_f32).copysign(0.42), 3.5_f32);\n     assert_eq((-3.5_f32).copysign(-0.42), -3.5_f32);\n-    assert!(std::f32::NAN.copysign(1.0).is_nan());\n+    assert!(f32::NAN.copysign(1.0).is_nan());\n \n     // f64 copysign\n     assert_eq(3.5_f64.copysign(0.42), 3.5_f64);\n     assert_eq(3.5_f64.copysign(-0.42), -3.5_f64);\n     assert_eq((-3.5_f64).copysign(0.42), 3.5_f64);\n     assert_eq((-3.5_f64).copysign(-0.42), -3.5_f64);\n-    assert!(std::f64::NAN.copysign(1.0).is_nan());\n+    assert!(f64::NAN.copysign(1.0).is_nan());\n }"}]}