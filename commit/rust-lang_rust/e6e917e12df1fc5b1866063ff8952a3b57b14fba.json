{"sha": "e6e917e12df1fc5b1866063ff8952a3b57b14fba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZTkxN2UxMmRmMWZjNWIxODY2MDYzZmY4OTUyYTNiNTdiMTRmYmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-19T06:54:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T06:54:34Z"}, "message": "Rollup merge of #75652 - jyn514:true-false-2, r=GuillaumeGomez\n\nResolve true and false as booleans\n\nSuccessor to https://github.com/rust-lang/rust/pull/75101.\n\nr? @Manishearth\ncc @rust-lang/rustdoc", "tree": {"sha": "abf57ab96b5da7fc6392e743109d0481606bab3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf57ab96b5da7fc6392e743109d0481606bab3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e917e12df1fc5b1866063ff8952a3b57b14fba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPMyqCRBK7hj4Ov3rIwAAdHIIAA16tlonAeFV6fN/Z/LpmMPs\nPCu8EvCDxLYh4Yn768IAnIyFFoWLaXaD4++DDdLTkMzhCMFj5GcSWNYNZRRP9e3Z\nsp/9mHJjelLtqh28auTa4HMuJO00jCfx++6CdHXCdK6yZ2isnj5h84gXHYiNLZJk\n8LzDjjzEaapZEc1Lqf5eazUIzBMiEFXxiSy/ESg/i+srkCG16sX9oEGn2W7EpAVk\niozZ53JAQTczXtOt8aZKxV0/w4F4vPMT9Xd3KJJ3jSsvv8bvencr06pUY92U0K6w\nZoO2qrJoQ4kHt2H/9zEljR8He27zxhDeNNyFhVmCEIHF3JVLnoQuBsVztrRcNlo=\n=pM7J\n-----END PGP SIGNATURE-----\n", "payload": "tree abf57ab96b5da7fc6392e743109d0481606bab3d\nparent 9cf390357b3d74f6991cec0aa08a476e77cdb67e\nparent 4f9cd749261cf95f48a9473a2b44a5cfcd27e10f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597820074 +0900\ncommitter GitHub <noreply@github.com> 1597820074 +0900\n\nRollup merge of #75652 - jyn514:true-false-2, r=GuillaumeGomez\n\nResolve true and false as booleans\n\nSuccessor to https://github.com/rust-lang/rust/pull/75101.\n\nr? @Manishearth\ncc @rust-lang/rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e917e12df1fc5b1866063ff8952a3b57b14fba", "html_url": "https://github.com/rust-lang/rust/commit/e6e917e12df1fc5b1866063ff8952a3b57b14fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e917e12df1fc5b1866063ff8952a3b57b14fba/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf390357b3d74f6991cec0aa08a476e77cdb67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf390357b3d74f6991cec0aa08a476e77cdb67e", "html_url": "https://github.com/rust-lang/rust/commit/9cf390357b3d74f6991cec0aa08a476e77cdb67e"}, {"sha": "4f9cd749261cf95f48a9473a2b44a5cfcd27e10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9cd749261cf95f48a9473a2b44a5cfcd27e10f", "html_url": "https://github.com/rust-lang/rust/commit/4f9cd749261cf95f48a9473a2b44a5cfcd27e10f"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "edfe8c05c6db987b796ec4a86c077f067c4e23cf", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e6e917e12df1fc5b1866063ff8952a3b57b14fba/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e917e12df1fc5b1866063ff8952a3b57b14fba/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e6e917e12df1fc5b1866063ff8952a3b57b14fba", "patch": "@@ -222,11 +222,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             disambiguator,\n                             None | Some(Disambiguator::Namespace(Namespace::TypeNS))\n                         ) {\n-                            if let Some(prim) = is_primitive(path_str, ns) {\n+                            if let Some((path, prim)) = is_primitive(path_str, ns) {\n                                 if extra_fragment.is_some() {\n                                     return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                                 }\n-                                return Ok((prim, Some(path_str.to_owned())));\n+                                return Ok((prim, Some(path.to_owned())));\n                             }\n                         }\n                         return Ok((res, extra_fragment.clone()));\n@@ -239,11 +239,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 if value != (ns == ValueNS) {\n                     return Err(ErrorKind::ResolutionFailure);\n                 }\n-            } else if let Some(prim) = is_primitive(path_str, ns) {\n+            } else if let Some((path, prim)) = is_primitive(path_str, ns) {\n                 if extra_fragment.is_some() {\n                     return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                 }\n-                return Ok((prim, Some(path_str.to_owned())));\n+                return Ok((prim, Some(path.to_owned())));\n             } else {\n                 // If resolution failed, it may still be a method\n                 // because methods are not handled by the resolver\n@@ -269,7 +269,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 })\n                 .ok_or(ErrorKind::ResolutionFailure)?;\n \n-            if let Some(prim) = is_primitive(&path, TypeNS) {\n+            if let Some((path, prim)) = is_primitive(&path, TypeNS) {\n                 let did = primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)?;\n                 return cx\n                     .tcx\n@@ -1220,11 +1220,22 @@ const PRIMITIVES: &[(&str, Res)] = &[\n     (\"f64\", Res::PrimTy(hir::PrimTy::Float(rustc_ast::FloatTy::F64))),\n     (\"str\", Res::PrimTy(hir::PrimTy::Str)),\n     (\"bool\", Res::PrimTy(hir::PrimTy::Bool)),\n+    (\"true\", Res::PrimTy(hir::PrimTy::Bool)),\n+    (\"false\", Res::PrimTy(hir::PrimTy::Bool)),\n     (\"char\", Res::PrimTy(hir::PrimTy::Char)),\n ];\n \n-fn is_primitive(path_str: &str, ns: Namespace) -> Option<Res> {\n-    if ns == TypeNS { PRIMITIVES.iter().find(|x| x.0 == path_str).map(|x| x.1) } else { None }\n+fn is_primitive(path_str: &str, ns: Namespace) -> Option<(&'static str, Res)> {\n+    if ns == TypeNS {\n+        PRIMITIVES\n+            .iter()\n+            .filter(|x| x.0 == path_str)\n+            .copied()\n+            .map(|x| if x.0 == \"true\" || x.0 == \"false\" { (\"bool\", x.1) } else { x })\n+            .next()\n+    } else {\n+        None\n+    }\n }\n \n fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<DefId> {"}, {"sha": "7b21e9341474032b84064337a3d4280ea20b5752", "filename": "src/test/rustdoc/intra-doc-link-true-false.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e917e12df1fc5b1866063ff8952a3b57b14fba/src%2Ftest%2Frustdoc%2Fintra-doc-link-true-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e917e12df1fc5b1866063ff8952a3b57b14fba/src%2Ftest%2Frustdoc%2Fintra-doc-link-true-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-true-false.rs?ref=e6e917e12df1fc5b1866063ff8952a3b57b14fba", "patch": "@@ -0,0 +1,10 @@\n+#![deny(broken_intra_doc_links)]\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+// @has foo/index.html\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'true'\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'false'\n+\n+//! A `bool` is either [`true`] or [`false`]."}]}