{"sha": "fac8fa56726f7a5b2d4880a4719c5f99beec8328", "node_id": "C_kwDOAAsO6NoAKGZhYzhmYTU2NzI2ZjdhNWIyZDQ4ODBhNDcxOWM1Zjk5YmVlYzgzMjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T01:17:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T01:17:36Z"}, "message": "Auto merge of #98487 - cjgillot:variance-nohir, r=wesleywiser\n\nDo not fetch HIR to compute variances.\n\nEverything can be done using higher-level queries.  This simplifies the code, and should allow better incremental caching.", "tree": {"sha": "15d1a569a9da569e0ff072cacbbd65c4b6eb40a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d1a569a9da569e0ff072cacbbd65c4b6eb40a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac8fa56726f7a5b2d4880a4719c5f99beec8328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac8fa56726f7a5b2d4880a4719c5f99beec8328", "html_url": "https://github.com/rust-lang/rust/commit/fac8fa56726f7a5b2d4880a4719c5f99beec8328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac8fa56726f7a5b2d4880a4719c5f99beec8328/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8824d131619e58a38bde8bcf56401629b91a204a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8824d131619e58a38bde8bcf56401629b91a204a", "html_url": "https://github.com/rust-lang/rust/commit/8824d131619e58a38bde8bcf56401629b91a204a"}, {"sha": "3df10a2a90acef84d46e8681095abaef51758929", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df10a2a90acef84d46e8681095abaef51758929", "html_url": "https://github.com/rust-lang/rust/commit/3df10a2a90acef84d46e8681095abaef51758929"}], "stats": {"total": 178, "additions": 48, "deletions": 130}, "files": [{"sha": "12209d6725c902f30e3e47accce21ee55b029efe", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=fac8fa56726f7a5b2d4880a4719c5f99beec8328", "patch": "@@ -63,6 +63,15 @@ impl ModuleItems {\n         self.foreign_items.iter().copied()\n     }\n \n+    pub fn definitions(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+        self.items\n+            .iter()\n+            .map(|id| id.def_id)\n+            .chain(self.trait_items.iter().map(|id| id.def_id))\n+            .chain(self.impl_items.iter().map(|id| id.def_id))\n+            .chain(self.foreign_items.iter().map(|id| id.def_id))\n+    }\n+\n     pub fn par_items(&self, f: impl Fn(ItemId) + Send + Sync) {\n         par_for_each_in(&self.items[..], |&id| f(id))\n     }"}, {"sha": "d79450e1ae707c30a171f85ee0277df03aca63bc", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 14, "deletions": 62, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=fac8fa56726f7a5b2d4880a4719c5f99beec8328", "patch": "@@ -64,74 +64,28 @@ pub fn add_constraints_from_crate<'a, 'tcx>(\n \n     let crate_items = tcx.hir_crate_items(());\n \n-    for id in crate_items.items() {\n-        constraint_cx.check_item(id);\n-    }\n-\n-    for id in crate_items.trait_items() {\n-        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n-            constraint_cx.check_node_helper(id.hir_id());\n-        }\n-    }\n-\n-    for id in crate_items.impl_items() {\n-        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n-            constraint_cx.check_node_helper(id.hir_id());\n-        }\n-    }\n-\n-    for id in crate_items.foreign_items() {\n-        if let DefKind::Fn = tcx.def_kind(id.def_id) {\n-            constraint_cx.check_node_helper(id.hir_id());\n-        }\n-    }\n-\n-    constraint_cx\n-}\n-\n-impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n-    fn check_item(&mut self, id: hir::ItemId) {\n-        let def_kind = self.tcx().def_kind(id.def_id);\n+    for def_id in crate_items.definitions() {\n+        let def_kind = tcx.def_kind(def_id);\n         match def_kind {\n-            DefKind::Struct | DefKind::Union => {\n-                let item = self.tcx().hir().item(id);\n-\n-                if let hir::ItemKind::Struct(ref struct_def, _)\n-                | hir::ItemKind::Union(ref struct_def, _) = item.kind\n-                {\n-                    self.check_node_helper(item.hir_id());\n+            DefKind::Struct | DefKind::Union | DefKind::Enum => {\n+                constraint_cx.build_constraints_for_item(def_id);\n \n-                    if let hir::VariantData::Tuple(..) = *struct_def {\n-                        self.check_node_helper(struct_def.ctor_hir_id().unwrap());\n+                let adt = tcx.adt_def(def_id);\n+                for variant in adt.variants() {\n+                    if let Some(ctor) = variant.ctor_def_id {\n+                        constraint_cx.build_constraints_for_item(ctor.expect_local());\n                     }\n                 }\n             }\n-            DefKind::Enum => {\n-                let item = self.tcx().hir().item(id);\n-\n-                if let hir::ItemKind::Enum(ref enum_def, _) = item.kind {\n-                    self.check_node_helper(item.hir_id());\n-\n-                    for variant in enum_def.variants {\n-                        if let hir::VariantData::Tuple(..) = variant.data {\n-                            self.check_node_helper(variant.data.ctor_hir_id().unwrap());\n-                        }\n-                    }\n-                }\n-            }\n-            DefKind::Fn => {\n-                self.check_node_helper(id.hir_id());\n-            }\n+            DefKind::Fn | DefKind::AssocFn => constraint_cx.build_constraints_for_item(def_id),\n             _ => {}\n         }\n     }\n \n-    fn check_node_helper(&mut self, id: hir::HirId) {\n-        let tcx = self.terms_cx.tcx;\n-        let def_id = tcx.hir().local_def_id(id);\n-        self.build_constraints_for_item(def_id);\n-    }\n+    constraint_cx\n+}\n \n+impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.terms_cx.tcx\n     }\n@@ -145,8 +99,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             return;\n         }\n \n-        let id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let inferred_start = self.terms_cx.inferred_starts[&id];\n+        let inferred_start = self.terms_cx.inferred_starts[&def_id];\n         let current_item = &CurrentItem { inferred_start };\n         match tcx.type_of(def_id).kind() {\n             ty::Adt(def, _) => {\n@@ -372,8 +325,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         }\n \n         let (local, remote) = if let Some(def_id) = def_id.as_local() {\n-            let id = self.tcx().hir().local_def_id_to_hir_id(def_id);\n-            (Some(self.terms_cx.inferred_starts[&id]), None)\n+            (Some(self.terms_cx.inferred_starts[&def_id]), None)\n         } else {\n             (None, Some(self.tcx().variances_of(def_id)))\n         };"}, {"sha": "97aca621aa21745e78cfc319bd6acf089c5e9fd4", "filename": "compiler/rustc_typeck/src/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fsolve.rs?ref=fac8fa56726f7a5b2d4880a4719c5f99beec8328", "patch": "@@ -96,8 +96,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n         self.terms_cx\n             .inferred_starts\n             .iter()\n-            .map(|(&id, &InferredIndex(start))| {\n-                let def_id = tcx.hir().local_def_id(id);\n+            .map(|(&def_id, &InferredIndex(start))| {\n                 let generics = tcx.generics_of(def_id);\n                 let count = generics.count();\n "}, {"sha": "1f763011e061433e34869534cd81ca265d1e0aa1", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 24, "deletions": 66, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac8fa56726f7a5b2d4880a4719c5f99beec8328/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=fac8fa56726f7a5b2d4880a4719c5f99beec8328", "patch": "@@ -10,9 +10,8 @@\n // a variable.\n \n use rustc_arena::DroplessArena;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::HirIdMap;\n+use rustc_hir::def_id::{LocalDefId, LocalDefIdMap};\n use rustc_middle::ty::{self, TyCtxt};\n use std::fmt;\n \n@@ -52,11 +51,11 @@ pub struct TermsContext<'a, 'tcx> {\n     // For marker types, UnsafeCell, and other lang items where\n     // variance is hardcoded, records the item-id and the hardcoded\n     // variance.\n-    pub lang_items: Vec<(hir::HirId, Vec<ty::Variance>)>,\n+    pub lang_items: Vec<(LocalDefId, Vec<ty::Variance>)>,\n \n     // Maps from the node id of an item to the first inferred index\n     // used for its type & region parameters.\n-    pub inferred_starts: HirIdMap<InferredIndex>,\n+    pub inferred_starts: LocalDefIdMap<InferredIndex>,\n \n     // Maps from an InferredIndex to the term for that variable.\n     pub inferred_terms: Vec<VarianceTermPtr<'a>>,\n@@ -81,51 +80,48 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n     // - https://rustc-dev-guide.rust-lang.org/variance.html\n     let crate_items = tcx.hir_crate_items(());\n \n-    for id in crate_items.items() {\n-        terms_cx.check_item(id);\n-    }\n+    for def_id in crate_items.definitions() {\n+        debug!(\"add_inferreds for item {:?}\", def_id);\n \n-    for id in crate_items.trait_items() {\n-        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n-            terms_cx.add_inferreds_for_item(id.hir_id());\n-        }\n-    }\n+        let def_kind = tcx.def_kind(def_id);\n \n-    for id in crate_items.impl_items() {\n-        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n-            terms_cx.add_inferreds_for_item(id.hir_id());\n-        }\n-    }\n+        match def_kind {\n+            DefKind::Struct | DefKind::Union | DefKind::Enum => {\n+                terms_cx.add_inferreds_for_item(def_id);\n \n-    for id in crate_items.foreign_items() {\n-        if let DefKind::Fn = tcx.def_kind(id.def_id) {\n-            terms_cx.add_inferreds_for_item(id.hir_id());\n+                let adt = tcx.adt_def(def_id);\n+                for variant in adt.variants() {\n+                    if let Some(ctor) = variant.ctor_def_id {\n+                        terms_cx.add_inferreds_for_item(ctor.expect_local());\n+                    }\n+                }\n+            }\n+            DefKind::Fn | DefKind::AssocFn => terms_cx.add_inferreds_for_item(def_id),\n+            _ => {}\n         }\n     }\n \n     terms_cx\n }\n \n-fn lang_items(tcx: TyCtxt<'_>) -> Vec<(hir::HirId, Vec<ty::Variance>)> {\n+fn lang_items(tcx: TyCtxt<'_>) -> Vec<(LocalDefId, Vec<ty::Variance>)> {\n     let lang_items = tcx.lang_items();\n     let all = [\n         (lang_items.phantom_data(), vec![ty::Covariant]),\n         (lang_items.unsafe_cell_type(), vec![ty::Invariant]),\n     ];\n \n     all.into_iter() // iterating over (Option<DefId>, Variance)\n-        .filter(|&(ref d, _)| d.is_some())\n-        .map(|(d, v)| (d.unwrap(), v)) // (DefId, Variance)\n         .filter_map(|(d, v)| {\n-            d.as_local().map(|d| tcx.hir().local_def_id_to_hir_id(d)).map(|n| (n, v))\n-        }) // (HirId, Variance)\n+            let def_id = d?.as_local()?; // LocalDefId\n+            Some((def_id, v))\n+        })\n         .collect()\n }\n \n impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n-    fn add_inferreds_for_item(&mut self, id: hir::HirId) {\n+    fn add_inferreds_for_item(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id(id);\n         let count = tcx.generics_of(def_id).count();\n \n         if count == 0 {\n@@ -134,7 +130,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n \n         // Record the start of this item's inferreds.\n         let start = self.inferred_terms.len();\n-        let newly_added = self.inferred_starts.insert(id, InferredIndex(start)).is_none();\n+        let newly_added = self.inferred_starts.insert(def_id, InferredIndex(start)).is_none();\n         assert!(newly_added);\n \n         // N.B., in the code below for writing the results back into the\n@@ -146,42 +142,4 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n             (start..(start + count)).map(|i| &*arena.alloc(InferredTerm(InferredIndex(i)))),\n         );\n     }\n-\n-    fn check_item(&mut self, id: hir::ItemId) {\n-        debug!(\"add_inferreds for item {}\", self.tcx.hir().node_to_string(id.hir_id()));\n-\n-        let def_kind = self.tcx.def_kind(id.def_id);\n-        match def_kind {\n-            DefKind::Struct | DefKind::Union => {\n-                let item = self.tcx.hir().item(id);\n-\n-                if let hir::ItemKind::Struct(ref struct_def, _)\n-                | hir::ItemKind::Union(ref struct_def, _) = item.kind\n-                {\n-                    self.add_inferreds_for_item(item.hir_id());\n-\n-                    if let hir::VariantData::Tuple(..) = *struct_def {\n-                        self.add_inferreds_for_item(struct_def.ctor_hir_id().unwrap());\n-                    }\n-                }\n-            }\n-            DefKind::Enum => {\n-                let item = self.tcx.hir().item(id);\n-\n-                if let hir::ItemKind::Enum(ref enum_def, _) = item.kind {\n-                    self.add_inferreds_for_item(item.hir_id());\n-\n-                    for variant in enum_def.variants {\n-                        if let hir::VariantData::Tuple(..) = variant.data {\n-                            self.add_inferreds_for_item(variant.data.ctor_hir_id().unwrap());\n-                        }\n-                    }\n-                }\n-            }\n-            DefKind::Fn => {\n-                self.add_inferreds_for_item(id.hir_id());\n-            }\n-            _ => {}\n-        }\n-    }\n }"}]}