{"sha": "c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OGNjN2FjMWYxZTg5Y2QyZTEyZDI5Mzc0ZTFjNWU2MTEwZDkyMTc=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-08-06T03:08:52Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-08-10T21:40:26Z"}, "message": "Add is_trait_item, refactor or_fun_call and unwrap_or_else_default", "tree": {"sha": "79e1682ad046a6ac67c4c2cdc24bb7939e51e910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e1682ad046a6ac67c4c2cdc24bb7939e51e910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "html_url": "https://github.com/rust-lang/rust/commit/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ef04728c90aa6105b20c681e3c12f231ba4f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ef04728c90aa6105b20c681e3c12f231ba4f12", "html_url": "https://github.com/rust-lang/rust/commit/11ef04728c90aa6105b20c681e3c12f231ba4f12"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "bf74cad039e109b9389eb421f57fa5dd3d3aaeed", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "patch": "@@ -313,12 +313,12 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `_.unwrap_or_else(Default::default)` on Option and\n-    /// Result values.\n+    /// Checks for usages of `_.unwrap_or_else(Default::default)` on `Option` and\n+    /// `Result` values.\n     ///\n     /// ### Why is this bad?\n-    /// Readability, these can be written as `option.unwrap_or_default` or\n-    /// `result.unwrap_or_default`.\n+    /// Readability, these can be written as `_.unwrap_or_default`, which is\n+    /// simpler and more concise.\n     ///\n     /// ### Examples\n     /// ```rust"}, {"sha": "c1d22e5d72c138d3a9c216eb571686d3a672e4f0", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "patch": "@@ -1,7 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::is_lazyness_candidate;\n+use clippy_utils::is_trait_item;\n use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n-use clippy_utils::ty::{implements_trait, qpath_target_trait};\n+use clippy_utils::ty::implements_trait;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use clippy_utils::{contains_return, last_path_segment, paths};\n use if_chain::if_chain;\n@@ -35,9 +36,7 @@ pub(super) fn check<'tcx>(\n         or_has_args: bool,\n         span: Span,\n     ) -> bool {\n-        let is_default_default = |qpath, default_trait_id| {\n-            qpath_target_trait(cx, qpath, fun.hir_id).map_or(false, |target_trait| target_trait == default_trait_id)\n-        };\n+        let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n         let implements_default = |arg, default_trait_id| {\n             let arg_ty = cx.typeck_results().expr_ty(arg);\n@@ -52,7 +51,7 @@ pub(super) fn check<'tcx>(\n             let path = last_path_segment(qpath).ident.name;\n             // needs to target Default::default in particular or be *::new and have a Default impl\n             // available\n-            if (matches!(path, kw::Default) && is_default_default(qpath, default_trait_id))\n+            if (matches!(path, kw::Default) && is_default_default())\n                 || (matches!(path, sym::new) && implements_default(arg, default_trait_id));\n \n             then {"}, {"sha": "677aa80e1b76ec4eb7a0d1d051af7e047060069b", "filename": "clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "patch": "@@ -2,9 +2,7 @@\n \n use super::UNWRAP_OR_ELSE_DEFAULT;\n use clippy_utils::{\n-    diagnostics::span_lint_and_sugg,\n-    source::snippet_with_applicability,\n-    ty::{is_type_diagnostic_item, qpath_target_trait},\n+    diagnostics::span_lint_and_sugg, is_trait_item, source::snippet_with_applicability, ty::is_type_diagnostic_item,\n };\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -26,10 +24,7 @@ pub(super) fn check<'tcx>(\n \n     if_chain! {\n         if is_option || is_result;\n-        if let hir::ExprKind::Path(ref qpath) = u_arg.kind;\n-        if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n-        if let Some(target_trait) = qpath_target_trait(cx, qpath, u_arg.hir_id);\n-        if target_trait == default_trait_id;\n+        if is_trait_item(cx, u_arg, sym::Default);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n "}, {"sha": "da9560f8ccfdf0a552d8803a0e4e5cd910b272dd", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "patch": "@@ -326,6 +326,25 @@ pub fn is_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol)\n         .map_or(false, |did| is_diag_trait_item(cx, did, diag_item))\n }\n \n+/// Checks if the given expression is a path referring an item on the trait\n+/// that is marked with the given diagnostic item.\n+///\n+/// For checking method call expressions instead of path expressions, use\n+/// [`is_trait_method`].\n+///\n+/// For example, to find if an expression like `u64::default` refers to an item\n+/// of the trait `Default`, which is marked `#[rustc_diagnostic_item = \"Default\"]`,\n+/// a `diag_item` of `sym::Default` should be used.\n+pub fn is_trait_item(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol) -> bool {\n+    if let hir::ExprKind::Path(ref qpath) = expr.kind {\n+        cx.qpath_res(qpath, expr.hir_id)\n+            .opt_def_id()\n+            .map_or(false, |def_id| is_diag_trait_item(cx, def_id, diag_item))\n+    } else {\n+        false\n+    }\n+}\n+\n pub fn last_path_segment<'tcx>(path: &QPath<'tcx>) -> &'tcx PathSegment<'tcx> {\n     match *path {\n         QPath::Resolved(_, path) => path.segments.last().expect(\"A path must have at least one segment\"),"}, {"sha": "536d0f006e304ed94bdc25a78566dac1c769adc3", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=c78cc7ac1f1e89cd2e12d29374e1c5e6110d9217", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::module_name_repetitions)]\n \n-use hir::{HirId, QPath};\n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n@@ -137,21 +136,6 @@ pub fn implements_trait<'tcx>(\n     })\n }\n \n-/// Gets the trait that a path targets. For example `<SomeTy as Trait>::a` would return the\n-/// [`DefId`] for `Trait`.\n-///\n-/// `cx` must be in a body.\n-pub fn qpath_target_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, expr_id: HirId) -> Option<DefId> {\n-    let method_res = cx.typeck_results().qpath_res(qpath, expr_id);\n-    let method_id = match method_res {\n-        hir::def::Res::Def(_kind, id) => Some(id),\n-        _ => None,\n-    };\n-    let method_id = method_id?;\n-\n-    cx.tcx.trait_of_item(method_id)\n-}\n-\n /// Checks whether this type implements `Drop`.\n pub fn has_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.ty_adt_def() {"}]}