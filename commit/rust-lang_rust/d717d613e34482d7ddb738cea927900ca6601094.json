{"sha": "d717d613e34482d7ddb738cea927900ca6601094", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MTdkNjEzZTM0NDgyZDdkZGI3MzhjZWE5Mjc5MDBjYTY2MDEwOTQ=", "commit": {"author": {"name": "Matthew McPherrin", "email": "matt@mcpherrin.ca", "date": "2014-03-16T22:35:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-18T20:51:17Z"}, "message": "Docsprint: Document ops module, primarily Deref.", "tree": {"sha": "cd2a37a3fc1f0797f7f9a5217d374862995007dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd2a37a3fc1f0797f7f9a5217d374862995007dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d717d613e34482d7ddb738cea927900ca6601094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d717d613e34482d7ddb738cea927900ca6601094", "html_url": "https://github.com/rust-lang/rust/commit/d717d613e34482d7ddb738cea927900ca6601094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d717d613e34482d7ddb738cea927900ca6601094/comments", "author": {"login": "mcpherrinm", "id": 47425, "node_id": "MDQ6VXNlcjQ3NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/47425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcpherrinm", "html_url": "https://github.com/mcpherrinm", "followers_url": "https://api.github.com/users/mcpherrinm/followers", "following_url": "https://api.github.com/users/mcpherrinm/following{/other_user}", "gists_url": "https://api.github.com/users/mcpherrinm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcpherrinm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcpherrinm/subscriptions", "organizations_url": "https://api.github.com/users/mcpherrinm/orgs", "repos_url": "https://api.github.com/users/mcpherrinm/repos", "events_url": "https://api.github.com/users/mcpherrinm/events{/privacy}", "received_events_url": "https://api.github.com/users/mcpherrinm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783a00e7962bcf348aedaa0446c12b03ba1f0397", "url": "https://api.github.com/repos/rust-lang/rust/commits/783a00e7962bcf348aedaa0446c12b03ba1f0397", "html_url": "https://github.com/rust-lang/rust/commit/783a00e7962bcf348aedaa0446c12b03ba1f0397"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "49bd95f621def1b01147f670ddc34d6207cc932f", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 77, "deletions": 3, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d717d613e34482d7ddb738cea927900ca6601094/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d717d613e34482d7ddb738cea927900ca6601094/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=d717d613e34482d7ddb738cea927900ca6601094", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// So we don't have to document the actual methods on the traits.\n-#[allow(missing_doc)];\n-\n /*!\n  *\n  * Traits representing built-in operators, useful for overloading\n@@ -83,6 +80,7 @@\n  */\n #[lang=\"drop\"]\n pub trait Drop {\n+    /// The `drop` method, called when the value goes out of scope.\n     fn drop(&mut self);\n }\n \n@@ -112,6 +110,7 @@ pub trait Drop {\n  */\n #[lang=\"add\"]\n pub trait Add<RHS,Result> {\n+    /// The method for the `+` operator\n     fn add(&self, rhs: &RHS) -> Result;\n }\n \n@@ -141,6 +140,7 @@ pub trait Add<RHS,Result> {\n  */\n #[lang=\"sub\"]\n pub trait Sub<RHS,Result> {\n+    /// The method for the `-` operator\n     fn sub(&self, rhs: &RHS) -> Result;\n }\n \n@@ -170,6 +170,7 @@ pub trait Sub<RHS,Result> {\n  */\n #[lang=\"mul\"]\n pub trait Mul<RHS,Result> {\n+    /// The method for the `*` operator\n     fn mul(&self, rhs: &RHS) -> Result;\n }\n \n@@ -199,6 +200,7 @@ pub trait Mul<RHS,Result> {\n  */\n #[lang=\"div\"]\n pub trait Div<RHS,Result> {\n+    /// The method for the `/` operator\n     fn div(&self, rhs: &RHS) -> Result;\n }\n \n@@ -228,6 +230,7 @@ pub trait Div<RHS,Result> {\n  */\n #[lang=\"rem\"]\n pub trait Rem<RHS,Result> {\n+    /// The method for the `%` operator\n     fn rem(&self, rhs: &RHS) -> Result;\n }\n \n@@ -257,6 +260,7 @@ pub trait Rem<RHS,Result> {\n  */\n #[lang=\"neg\"]\n pub trait Neg<Result> {\n+    /// The method for the unary `-` operator\n     fn neg(&self) -> Result;\n }\n \n@@ -286,6 +290,7 @@ pub trait Neg<Result> {\n  */\n #[lang=\"not\"]\n pub trait Not<Result> {\n+    /// The method for the unary `!` operator\n     fn not(&self) -> Result;\n }\n \n@@ -315,6 +320,7 @@ pub trait Not<Result> {\n  */\n #[lang=\"bitand\"]\n pub trait BitAnd<RHS,Result> {\n+    /// The method for the `&` operator\n     fn bitand(&self, rhs: &RHS) -> Result;\n }\n \n@@ -344,6 +350,7 @@ pub trait BitAnd<RHS,Result> {\n  */\n #[lang=\"bitor\"]\n pub trait BitOr<RHS,Result> {\n+    /// The method for the `|` operator\n     fn bitor(&self, rhs: &RHS) -> Result;\n }\n \n@@ -373,6 +380,7 @@ pub trait BitOr<RHS,Result> {\n  */\n #[lang=\"bitxor\"]\n pub trait BitXor<RHS,Result> {\n+    /// The method for the `^` operator\n     fn bitxor(&self, rhs: &RHS) -> Result;\n }\n \n@@ -402,6 +410,7 @@ pub trait BitXor<RHS,Result> {\n  */\n #[lang=\"shl\"]\n pub trait Shl<RHS,Result> {\n+    /// The method for the `<<` operator\n     fn shl(&self, rhs: &RHS) -> Result;\n }\n \n@@ -431,6 +440,7 @@ pub trait Shl<RHS,Result> {\n  */\n #[lang=\"shr\"]\n pub trait Shr<RHS,Result> {\n+    /// The method for the `>>` operator\n     fn shr(&self, rhs: &RHS) -> Result;\n }\n \n@@ -461,6 +471,7 @@ pub trait Shr<RHS,Result> {\n  */\n #[lang=\"index\"]\n pub trait Index<Index,Result> {\n+    /// The method for the indexing (`Foo[Bar]`) operation\n     fn index(&self, index: &Index) -> Result;\n }\n \n@@ -469,9 +480,37 @@ pub trait Deref<Result> {\n     fn deref<'a>(&'a self) -> &'a Result;\n }\n \n+/**\n+ *\n+ * The `Deref` trait is used to specify the functionality of dereferencing\n+ * operations like `*v`.\n+ *\n+ * # Example\n+ *\n+ * A struct with a single field which is accessible via dereferencing the\n+ * struct.\n+ *\n+ * ```\n+ * struct DerefExample<T> {\n+ *     value: T\n+ * }\n+ *\n+ * impl<T> Deref<T> for DerefExample<T> {\n+ *     fn deref<'a>(&'a self) -> &'a T {\n+ *         &self.value\n+ *     }\n+ * }\n+ *\n+ * fn main() {\n+ *     let x = DerefExample { value: 'a' };\n+ *     assert_eq!('a', *x);\n+ * }\n+ * ```\n+ */\n #[cfg(not(stage0))]\n #[lang=\"deref\"]\n pub trait Deref<Result> {\n+    /// The method called to dereference a value\n     fn deref<'a>(&'a self) -> &'a Result;\n }\n \n@@ -480,9 +519,44 @@ pub trait DerefMut<Result>: Deref<Result> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut Result;\n }\n \n+/**\n+ *\n+ * The `DerefMut` trait is used to specify the functionality of dereferencing\n+ * mutably like `*v = 1;`\n+ *\n+ * # Example\n+ *\n+ * A struct with a single field which is modifiable via dereferencing the\n+ * struct.\n+ *\n+ * ```\n+ * struct DerefMutExample<T> {\n+ *     value: T\n+ * }\n+ *\n+ * impl<T> Deref<T> for DerefMutExample<T> {\n+ *     fn deref<'a>(&'a self) -> &'a T {\n+ *         &self.value\n+ *     }\n+ * }\n+ *\n+ * impl<T> DerefMut<T> for DerefMutExample<T> {\n+ *     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n+ *         &mut self.value\n+ *     }\n+ * }\n+ *\n+ * fn main() {\n+ *     let mut x = DerefMutExample { value: 'a' };\n+ *     *x = 'b';\n+ *     assert_eq!('b', *x);\n+ * }\n+ * ```\n+ */\n #[cfg(not(stage0))]\n #[lang=\"deref_mut\"]\n pub trait DerefMut<Result>: Deref<Result> {\n+    /// The method called to mutably dereference a value\n     fn deref_mut<'a>(&'a mut self) -> &'a mut Result;\n }\n "}]}