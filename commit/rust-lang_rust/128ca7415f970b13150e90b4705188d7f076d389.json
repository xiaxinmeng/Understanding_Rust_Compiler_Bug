{"sha": "128ca7415f970b13150e90b4705188d7f076d389", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOGNhNzQxNWY5NzBiMTMxNTBlOTBiNDcwNTE4OGQ3ZjA3NmQzODk=", "commit": {"author": {"name": "Gabriel Smith", "email": "gsmith@d3engineering.com", "date": "2019-11-18T19:22:49Z"}, "committer": {"name": "Gabriel Smith", "email": "gsmith@d3engineering.com", "date": "2019-11-18T22:01:48Z"}, "message": "rustc: hir: Add method to check validity of a Res/Def in a namespace", "tree": {"sha": "ca5b4779e07e65c10d295ef41117ec60b914607c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5b4779e07e65c10d295ef41117ec60b914607c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128ca7415f970b13150e90b4705188d7f076d389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128ca7415f970b13150e90b4705188d7f076d389", "html_url": "https://github.com/rust-lang/rust/commit/128ca7415f970b13150e90b4705188d7f076d389", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128ca7415f970b13150e90b4705188d7f076d389/comments", "author": null, "committer": null, "parents": [{"sha": "041a612dad70dbcc69189773ee396fcb55bda4f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/041a612dad70dbcc69189773ee396fcb55bda4f5", "html_url": "https://github.com/rust-lang/rust/commit/041a612dad70dbcc69189773ee396fcb55bda4f5"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "231b054f9748d19d1641dd80f82dd571da18f4a6", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/128ca7415f970b13150e90b4705188d7f076d389/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128ca7415f970b13150e90b4705188d7f076d389/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=128ca7415f970b13150e90b4705188d7f076d389", "patch": "@@ -127,6 +127,34 @@ impl DefKind {\n             _ => \"a\",\n         }\n     }\n+\n+    pub fn matches_ns(&self, ns: Namespace) -> bool {\n+        match self {\n+            DefKind::Mod\n+            | DefKind::Struct\n+            | DefKind::Union\n+            | DefKind::Enum\n+            | DefKind::Variant\n+            | DefKind::Trait\n+            | DefKind::OpaqueTy\n+            | DefKind::TyAlias\n+            | DefKind::ForeignTy\n+            | DefKind::TraitAlias\n+            | DefKind::AssocTy\n+            | DefKind::AssocOpaqueTy\n+            | DefKind::TyParam => ns == Namespace::TypeNS,\n+\n+            DefKind::Fn\n+            | DefKind::Const\n+            | DefKind::ConstParam\n+            | DefKind::Static\n+            | DefKind::Ctor(..)\n+            | DefKind::Method\n+            | DefKind::AssocConst => ns == Namespace::ValueNS,\n+\n+            DefKind::Macro(..) => ns == Namespace::MacroNS,\n+        }\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n@@ -427,4 +455,14 @@ impl<Id> Res<Id> {\n             _ => None,\n         }\n     }\n+\n+    pub fn matches_ns(&self, ns: Namespace) -> bool {\n+        match self {\n+            Res::Def(kind, ..) => kind.matches_ns(ns),\n+            Res::PrimTy(..) | Res::SelfTy(..) | Res::ToolMod => ns == Namespace::TypeNS,\n+            Res::SelfCtor(..) | Res::Local(..) => ns == Namespace::ValueNS,\n+            Res::NonMacroAttr(..) => ns == Namespace::MacroNS,\n+            Res::Err => true,\n+        }\n+    }\n }"}]}