{"sha": "2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b", "node_id": "C_kwDOAAsO6NoAKDJmMDJjZjg3NjhiZmYzZTMyYTJiZmFhNDIyOTRjYjVkZDZhYmQ1OGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-28T05:06:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-28T05:06:42Z"}, "message": "Rollup merge of #103523 - GuillaumeGomez:inline-doc-comment-impl-block, r=notriddle\n\nFix unwanted merge of inline doc comments for impl blocks\n\nFixes https://github.com/rust-lang/rust/issues/102909.\n\nWe need this merge mechanism for inlined items but it's completely unwanted for impl blocks (at least the doc comments are, not the other attributes) since we want to keep what `cfg()` is put on the `pub use` or other attributes.\n\nr? ``@notriddle``", "tree": {"sha": "1ce2d9c9851aa62de95b963e0866a33e017d24c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce2d9c9851aa62de95b963e0866a33e017d24c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjW2NiCRBK7hj4Ov3rIwAAc04IALG4QO8NBU2KVRzuApHxLMu+\nKMms2/Y4T4uspnboZPC8/t+kN44xWTcZ+GV6MMfDFHdt2oknuX0BvAssE/gUXH5E\nQk9BVTGykaLcpciG0ciaChstDHHpMHDmIG+FclcC7WI+ShAOjeNqel5FAakhR+41\nrtMwF0iL7CqEtGG6COlCclk99PSoe2dZ3TxcP7Fyc9m4Axe3QyQdeFgvLPL3ZWBl\nsasFNM29qk3VtXACxT3YpTfyXv7CQzk3K4+9E34OU8T0LF3BblzJxMcsT40tFFJ+\n8IhsR3Woaf6jmfGD7qm2VYjwBLp90eW1uepccEn8DHYrmX1dlwS0Ui+xfEqpwrE=\n=PwY8\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ce2d9c9851aa62de95b963e0866a33e017d24c7\nparent 270e0c53574b938af0492b4321984d9a09ef5b47\nparent a4279a1d1f9fd8bde6dfc46ac9d53d72fd32a41d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666933602 +0200\ncommitter GitHub <noreply@github.com> 1666933602 +0200\n\nRollup merge of #103523 - GuillaumeGomez:inline-doc-comment-impl-block, r=notriddle\n\nFix unwanted merge of inline doc comments for impl blocks\n\nFixes https://github.com/rust-lang/rust/issues/102909.\n\nWe need this merge mechanism for inlined items but it's completely unwanted for impl blocks (at least the doc comments are, not the other attributes) since we want to keep what `cfg()` is put on the `pub use` or other attributes.\n\nr? ``@notriddle``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b", "html_url": "https://github.com/rust-lang/rust/commit/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270e0c53574b938af0492b4321984d9a09ef5b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/270e0c53574b938af0492b4321984d9a09ef5b47", "html_url": "https://github.com/rust-lang/rust/commit/270e0c53574b938af0492b4321984d9a09ef5b47"}, {"sha": "a4279a1d1f9fd8bde6dfc46ac9d53d72fd32a41d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4279a1d1f9fd8bde6dfc46ac9d53d72fd32a41d", "html_url": "https://github.com/rust-lang/rust/commit/a4279a1d1f9fd8bde6dfc46ac9d53d72fd32a41d"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "88592494493be71842957ba1c6d647f7cdb71680", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b", "patch": "@@ -55,12 +55,39 @@ pub(crate) fn try_inline(\n     let mut ret = Vec::new();\n \n     debug!(\"attrs={:?}\", attrs);\n-    let attrs_clone = attrs;\n+\n+    let attrs_without_docs = attrs.map(|attrs| {\n+        attrs.into_iter().filter(|a| a.doc_str().is_none()).cloned().collect::<Vec<_>>()\n+    });\n+    // We need this ugly code because:\n+    //\n+    // ```\n+    // attrs_without_docs.map(|a| a.as_slice())\n+    // ```\n+    //\n+    // will fail because it returns a temporary slice and:\n+    //\n+    // ```\n+    // attrs_without_docs.map(|s| {\n+    //     vec = s.as_slice();\n+    //     vec\n+    // })\n+    // ```\n+    //\n+    // will fail because we're moving an uninitialized variable into a closure.\n+    let vec;\n+    let attrs_without_docs = match attrs_without_docs {\n+        Some(s) => {\n+            vec = s;\n+            Some(vec.as_slice())\n+        }\n+        None => None,\n+    };\n \n     let kind = match res {\n         Res::Def(DefKind::Trait, did) => {\n             record_extern_fqn(cx, did, ItemType::Trait);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::TraitItem(Box::new(build_external_trait(cx, did)))\n         }\n         Res::Def(DefKind::Fn, did) => {\n@@ -69,27 +96,27 @@ pub(crate) fn try_inline(\n         }\n         Res::Def(DefKind::Struct, did) => {\n             record_extern_fqn(cx, did, ItemType::Struct);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::StructItem(build_struct(cx, did))\n         }\n         Res::Def(DefKind::Union, did) => {\n             record_extern_fqn(cx, did, ItemType::Union);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::UnionItem(build_union(cx, did))\n         }\n         Res::Def(DefKind::TyAlias, did) => {\n             record_extern_fqn(cx, did, ItemType::Typedef);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::TypedefItem(build_type_alias(cx, did))\n         }\n         Res::Def(DefKind::Enum, did) => {\n             record_extern_fqn(cx, did, ItemType::Enum);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::EnumItem(build_enum(cx, did))\n         }\n         Res::Def(DefKind::ForeignTy, did) => {\n             record_extern_fqn(cx, did, ItemType::ForeignType);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::ForeignTypeItem\n         }\n         // Never inline enum variants but leave them shown as re-exports.\n@@ -123,7 +150,7 @@ pub(crate) fn try_inline(\n         _ => return None,\n     };\n \n-    let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n+    let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs);\n     cx.inlined.insert(did.into());\n     let mut item = clean::Item::from_def_id_and_attrs_and_parts(\n         did,"}, {"sha": "3400717eba1e616a2c23a49cd7c5122f4bcfc09d", "filename": "src/test/rustdoc/auxiliary/reexport-doc-aux.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-doc-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-doc-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-doc-aux.rs?ref=2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b", "patch": "@@ -0,0 +1,5 @@\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn foo() {}\n+}"}, {"sha": "df2c889b4d57492ab64d2b3577c92b94c4d8460a", "filename": "src/test/rustdoc/reexport-doc.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b/src%2Ftest%2Frustdoc%2Freexport-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b/src%2Ftest%2Frustdoc%2Freexport-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexport-doc.rs?ref=2f02cf8768bff3e32a2bfaa42294cb5dd6abd58b", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:reexport-doc-aux.rs\n+\n+extern crate reexport_doc_aux as dep;\n+\n+// @has 'reexport_doc/struct.Foo.html'\n+// @count - '//p' 'These are the docs for Foo.' 1\n+/// These are the docs for Foo.\n+pub use dep::Foo;"}]}