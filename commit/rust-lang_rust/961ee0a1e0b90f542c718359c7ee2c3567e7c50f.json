{"sha": "961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MWVlMGExZTBiOTBmNTQyYzcxODM1OWM3ZWUyYzM1NjdlN2M1MGY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-21T20:08:07Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-03T20:37:00Z"}, "message": "Allow impls for traits as a concrete type", "tree": {"sha": "8188c5759dad5f54f2ed6012baf38c5c98d85ce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8188c5759dad5f54f2ed6012baf38c5c98d85ce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "html_url": "https://github.com/rust-lang/rust/commit/961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2790505c19b158a5494139dba084b6af82810b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/2790505c19b158a5494139dba084b6af82810b96", "html_url": "https://github.com/rust-lang/rust/commit/2790505c19b158a5494139dba084b6af82810b96"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "03f1c33cce1208fe6930c6e5d0859b7673133b54", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "patch": "@@ -627,7 +627,10 @@ impl NameBindings {\n                      sp: Span) {\n         // Merges the module with the existing type def or creates a new one.\n         let modifiers = if is_public { PUBLIC } else { DefModifiers::empty() } | IMPORTABLE;\n-        let module_ = Rc::new(Module::new(parent_link, def_id, kind, external,\n+        let module_ = Rc::new(Module::new(parent_link,\n+                                          def_id,\n+                                          kind,\n+                                          external,\n                                           is_public));\n         let type_def = self.type_def.borrow().clone();\n         match type_def {\n@@ -1372,6 +1375,8 @@ impl<'a> Resolver<'a> {\n                 // Create the module and add all methods.\n                 match ty.node {\n                     TyPath(ref path, _, _) if path.segments.len() == 1 => {\n+                        // FIXME(18446) we should distinguish between the name of\n+                        // a trait and the name of an impl of that trait.\n                         let mod_name = path.segments.last().unwrap().identifier.name;\n \n                         let parent_opt = parent.module().children.borrow()\n@@ -1380,8 +1385,8 @@ impl<'a> Resolver<'a> {\n                             // It already exists\n                             Some(ref child) if child.get_module_if_available()\n                                                 .is_some() &&\n-                                           child.get_module().kind.get() ==\n-                                                ImplModuleKind => {\n+                                           (child.get_module().kind.get() == ImplModuleKind ||\n+                                            child.get_module().kind.get() == TraitModuleKind) => {\n                                 ModuleReducedGraphParent(child.get_module())\n                             }\n                             Some(ref child) if child.get_module_if_available()"}, {"sha": "9ac47a234720956cab3a32389e18bb8c1f2e7d31", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "patch": "@@ -514,7 +514,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // and `Rc<Baz>`. (Note that it is not a *coherence violation*\n         // to have impls for both `Bar` and `Baz`, despite this\n         // ambiguity).  In this case, we report an error, listing all\n-        // the applicable impls.  The use can explicitly \"up-coerce\"\n+        // the applicable impls.  The user can explicitly \"up-coerce\"\n         // to the type they want.\n         //\n         // Note that this coercion step only considers actual impls\n@@ -1931,7 +1931,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn all_impls(&self, trait_def_id: ast::DefId) -> Vec<ast::DefId> {\n         /*!\n-         * Returns se tof all impls for a given trait.\n+         * Returns set of all impls for a given trait.\n          */\n \n         ty::populate_implementations_for_trait_if_necessary(self.tcx(),"}, {"sha": "ac18f53de046599cc8ac9651e4c5a6e6ef3812ca", "filename": "src/librustc/middle/typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Fmod.rs?ref=961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "patch": "@@ -207,8 +207,8 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n         let impl_items = self.create_impl_from_item(item);\n \n         for associated_trait in associated_traits.iter() {\n-            let trait_ref = ty::node_id_to_trait_ref(\n-                self.crate_context.tcx, associated_trait.ref_id);\n+            let trait_ref = ty::node_id_to_trait_ref(self.crate_context.tcx,\n+                                                     associated_trait.ref_id);\n             debug!(\"(checking implementation) adding impl for trait '{}', item '{}'\",\n                    trait_ref.repr(self.crate_context.tcx),\n                    token::get_ident(item.ident));"}, {"sha": "3c4ad3473610cfd0509a956a6bba4b053ee7fa90", "filename": "src/librustc/middle/typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961ee0a1e0b90f542c718359c7ee2c3567e7c50f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence%2Forphan.rs?ref=961ee0a1e0b90f542c718359c7ee2c3567e7c50f", "patch": "@@ -41,7 +41,8 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 let self_ty = ty::lookup_item_type(self.tcx, def_id).ty;\n                 match ty::get(self_ty).sty {\n                     ty::ty_enum(def_id, _) |\n-                    ty::ty_struct(def_id, _) => {\n+                    ty::ty_struct(def_id, _) |\n+                    ty::ty_trait(box ty::TyTrait{ def_id, ..}) => {\n                         if def_id.krate != ast::LOCAL_CRATE {\n                             span_err!(self.tcx.sess, item.span, E0116,\n                                       \"cannot associate methods with a type outside the \\"}]}