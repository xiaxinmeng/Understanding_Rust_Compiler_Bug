{"sha": "b3f77bf92703543793a8073c8319e461e024cb69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjc3YmY5MjcwMzU0Mzc5M2E4MDczYzgzMTllNDYxZTAyNGNiNjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-27T21:36:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-27T22:25:32Z"}, "message": "rt: Change the way the kernel exits to avoid pthread leaks\n\nThis makes the kernel join every scheduler thread before exiting in order to\nensure that all threads are completely terminated before the process exits. On\nmy machine, for 32-bit targets, this was causing regular valgrind errors.", "tree": {"sha": "f32f999cc958d5c5a9d496025be4d5c31ca1b5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f32f999cc958d5c5a9d496025be4d5c31ca1b5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f77bf92703543793a8073c8319e461e024cb69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f77bf92703543793a8073c8319e461e024cb69", "html_url": "https://github.com/rust-lang/rust/commit/b3f77bf92703543793a8073c8319e461e024cb69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f77bf92703543793a8073c8319e461e024cb69/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c027446ec0d985be98dcbdce2b80308b88b12a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c027446ec0d985be98dcbdce2b80308b88b12a", "html_url": "https://github.com/rust-lang/rust/commit/e4c027446ec0d985be98dcbdce2b80308b88b12a"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "c953cabbe8643d9751a22cffcba23eab2b9da388", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=b3f77bf92703543793a8073c8319e461e024cb69", "patch": "@@ -20,7 +20,6 @@ rust_kernel::rust_kernel(rust_srv *srv) :\n     live_tasks(0),\n     max_task_id(0),\n     rval(0),\n-    live_schedulers(0),\n     max_sched_id(0),\n     env(srv->env)\n {\n@@ -75,7 +74,6 @@ rust_kernel::create_scheduler(size_t num_threads) {\n         bool is_new = sched_table\n             .insert(std::pair<rust_sched_id, rust_scheduler*>(id, sched)).second;\n         A(this, is_new, \"Reusing a sched id?\");\n-        live_schedulers++;\n     }\n     sched->start_task_threads();\n     return id;\n@@ -97,26 +95,38 @@ void\n rust_kernel::release_scheduler_id(rust_sched_id id) {\n     I(this, !sched_lock.lock_held_by_current_thread());\n     scoped_lock with(sched_lock);\n-    sched_map::iterator iter = sched_table.find(id);\n-    I(this, iter != sched_table.end());\n-    rust_scheduler *sched = iter->second;\n-    sched_table.erase(iter);\n-    delete sched;\n-    live_schedulers--;\n-    if (live_schedulers == 0) {\n-        // We're all done. Tell the main thread to continue\n-        sched_lock.signal();\n-    }\n-}\n-\n+    // This list will most likely only ever have a single element in it, but\n+    // it's an actual list because we could potentially get here multiple\n+    // times before the main thread ever calls wait_for_schedulers()\n+    join_list.push_back(id);\n+    sched_lock.signal();\n+}\n+\n+/*\n+Called on the main thread to wait for the kernel to exit. This function is\n+also used to join on every terminating scheduler thread, so that we can be\n+sure they have completely exited before the process exits.  If we don't join\n+them then we can see valgrind errors due to un-freed pthread memory.\n+ */\n int\n rust_kernel::wait_for_schedulers()\n {\n     I(this, !sched_lock.lock_held_by_current_thread());\n     scoped_lock with(sched_lock);\n-    // Schedulers could possibly have already exited\n-    if (live_schedulers != 0) {\n-        sched_lock.wait();\n+    while (!sched_table.empty()) {\n+        while (!join_list.empty()) {\n+            rust_sched_id id = join_list.back();\n+            join_list.pop_back();\n+            sched_map::iterator iter = sched_table.find(id);\n+            I(this, iter != sched_table.end());\n+            rust_scheduler *sched = iter->second;\n+            sched_table.erase(iter);\n+            sched->join_task_threads();\n+            delete sched;\n+        }\n+        if (!sched_table.empty()) {\n+            sched_lock.wait();\n+        }\n     }\n     return rval;\n }"}, {"sha": "b1882e7c100e5f21aefee754d15d7b2ecf469de5", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=b3f77bf92703543793a8073c8319e461e024cb69", "patch": "@@ -3,6 +3,7 @@\n #define RUST_KERNEL_H\n \n #include <map>\n+#include <vector>\n #include \"memory_region.h\"\n #include \"rust_log.h\"\n \n@@ -36,14 +37,15 @@ class rust_kernel {\n     lock_and_signal rval_lock;\n     int rval;\n \n-    // Protects live_schedulers, max_sched_id and sched_table\n+    // Protects max_sched_id and sched_table, join_list\n     lock_and_signal sched_lock;\n-    // Tracks the number of schedulers currently running.\n-    // When this hits 0 we will signal the sched_lock and the\n-    // kernel will terminate.\n-    uintptr_t live_schedulers;\n+    // The next scheduler id\n     rust_sched_id max_sched_id;\n+    // A map from scheduler ids to schedulers. When this is empty\n+    // the kernel terminates\n     sched_map sched_table;\n+    // A list of scheduler ids that are ready to exit\n+    std::vector<rust_sched_id> join_list;\n \n public:\n "}, {"sha": "c2906bc51a09e3bd4a0a88e505bbb157a63854bf", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=b3f77bf92703543793a8073c8319e461e024cb69", "patch": "@@ -59,17 +59,21 @@ rust_scheduler::destroy_task_threads() {\n void\n rust_scheduler::start_task_threads()\n {\n-    // Copy num_threads because it's possible for the last thread\n-    // to terminate and have the kernel delete us before we\n-    // hit the last check against num_threads, in which case\n-    // we would be accessing invalid memory.\n-    uintptr_t num_threads = this->num_threads;\n     for(size_t i = 0; i < num_threads; ++i) {\n         rust_task_thread *thread = threads[i];\n         thread->start();\n     }\n }\n \n+void\n+rust_scheduler::join_task_threads()\n+{\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        rust_task_thread *thread = threads[i];\n+        thread->join();\n+    }\n+}\n+\n void\n rust_scheduler::kill_all_tasks() {\n     for(size_t i = 0; i < num_threads; ++i) {"}, {"sha": "936e2e992c41fae6777dd86534612c8c05636b2a", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=b3f77bf92703543793a8073c8319e461e024cb69", "patch": "@@ -37,6 +37,7 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     ~rust_scheduler();\n \n     void start_task_threads();\n+    void join_task_threads();\n     void kill_all_tasks();\n     rust_task_id create_task(rust_task *spawner,\n \t\t\t     const char *name,"}, {"sha": "e64e7ab4ed82483f49ae36f91c733992b9fe4e15", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b3f77bf92703543793a8073c8319e461e024cb69/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=b3f77bf92703543793a8073c8319e461e024cb69", "patch": "@@ -320,7 +320,6 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n \n void rust_task_thread::run() {\n     this->start_main_loop();\n-    detach();\n     sched->release_task_thread();\n }\n "}]}