{"sha": "8a79d08fa57e1c257d647c9848e35defcb379c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNzlkMDhmYTU3ZTFjMjU3ZDY0N2M5ODQ4ZTM1ZGVmY2IzNzljMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T11:59:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T11:59:57Z"}, "message": "Auto merge of #68566 - pietroalbini:rollup-22hbo3e, r=pietroalbini\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #67928 (Update RELEASES.md for 1.41.0)\n - #68370 (Ensure that we error when calling \"const extern fn\" with wrong convention)\n - #68531 ([self-profiler] Two small cleanups)\n - #68562 (Fix spelling errors)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2f2a43554c17b491a8b27f443cc232b52ded379f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f2a43554c17b491a8b27f443cc232b52ded379f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a79d08fa57e1c257d647c9848e35defcb379c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a79d08fa57e1c257d647c9848e35defcb379c07", "html_url": "https://github.com/rust-lang/rust/commit/8a79d08fa57e1c257d647c9848e35defcb379c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a79d08fa57e1c257d647c9848e35defcb379c07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "html_url": "https://github.com/rust-lang/rust/commit/1d5f6d41e140a3d6a9c6584d555bc09f10222d24"}, {"sha": "5f9284c95f8431cb9239e9efba956cfc9259aec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9284c95f8431cb9239e9efba956cfc9259aec9", "html_url": "https://github.com/rust-lang/rust/commit/5f9284c95f8431cb9239e9efba956cfc9259aec9"}], "stats": {"total": 189, "additions": 170, "deletions": 19}, "files": [{"sha": "02edb0cf83c985361888559f5782ebf0a792ef1c", "filename": "RELEASES.md", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -1,3 +1,118 @@\n+Version 1.41.0 (2020-01-30)\n+===========================\n+\n+Language\n+--------\n+\n+- [You can now pass type parameters to foreign items when implementing\n+  traits.][65879] E.g. You can now write `impl<T> From<Foo> for Vec<T> {}`.\n+- [You can now arbitrarily nest receiver types in the `self` position.][64325] E.g. you can\n+  now write `fn foo(self: Box<Box<Self>>) {}`. Previously only `Self`, `&Self`,\n+  `&mut Self`, `Arc<Self>`, `Rc<Self>`, and `Box<Self>` were allowed.\n+- [You can now use any valid identifier in a `format_args` macro.][66847]\n+  Previously identifiers starting with an underscore were not allowed.\n+- [Visibility modifiers (e.g. `pub`) are now syntactically allowed on trait items and\n+  enum variants.][66183] These are still rejected semantically, but\n+  can be seen and parsed by procedural macros and conditional compilation.\n+\n+Compiler\n+--------\n+\n+- [Rustc will now warn if you have unused loop `'label`s.][66325]\n+- [Removed support for the `i686-unknown-dragonfly` target.][67255]\n+- [Added tier 3 support\\* for the `riscv64gc-unknown-linux-gnu` target.][66661]\n+- [You can now pass an arguments file passing the `@path` syntax\n+  to rustc.][66172] Note that the format differs somewhat from what is\n+  found in other tooling; please see [the documentation][argfile-docs] for\n+  more information.\n+- [You can now provide `--extern` flag without a path, indicating that it is\n+  available from the search path or specified with an `-L` flag.][64882]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n+[argfile-docs]: https://doc.rust-lang.org/nightly/rustc/command-line-arguments.html#path-load-command-line-flags-from-a-path\n+\n+Libraries\n+---------\n+\n+- [The `core::panic` module is now stable.][66771] It was already stable\n+  through `std`.\n+- [`NonZero*` numerics now implement `From<NonZero*>` if it's a smaller integer\n+  width.][66277] E.g. `NonZeroU16` now implements `From<NonZeroU8>`.\n+- [`MaybeUninit<T>` now implements `fmt::Debug`.][65013]\n+\n+Stabilized APIs\n+---------------\n+\n+- [`Result::map_or`]\n+- [`Result::map_or_else`]\n+- [`std::rc::Weak::weak_count`]\n+- [`std::rc::Weak::strong_count`]\n+- [`std::sync::Weak::weak_count`]\n+- [`std::sync::Weak::strong_count`]\n+\n+Cargo\n+-----\n+\n+- [Cargo will now document all the private items for binary crates\n+  by default.][cargo/7593]\n+- [`cargo-install` will now reinstall the package if it detects that it is out\n+  of date.][cargo/7560]\n+- [Cargo.lock now uses a more git friendly format that should help to reduce\n+  merge conflicts.][cargo/7579]\n+- [You can now override specific dependencies's build settings][cargo/7591] E.g.\n+  `[profile.dev.overrides.image] opt-level = 2` sets the `image` crate's\n+  optimisation level to `2` for debug builds. You can also use\n+  `[profile.<profile>.build_overrides]` to override build scripts and\n+  their dependencies.\n+\n+Misc\n+----\n+\n+- [You can now specify `edition` in documentation code blocks to compile the block\n+  for that edition.][66238] E.g. `edition2018` tells rustdoc that the code sample\n+  should be compiled the 2018 edition of Rust.\n+- [You can now provide custom themes to rustdoc with `--theme`, and check the\n+  current theme with `--check-theme`.][54733]\n+- [You can use `#[cfg(doc)]` to compile an item when building documentation.][61351]\n+\n+Compatibility Notes\n+-------------------\n+\n+- [As previously announced 1.41.0 will be the last tier 1 release for 32-bit\n+  Apple targets.][apple-32bit-drop] This means that the source code is still\n+  available to build, but the targets are no longer being tested and release\n+  binaries for those platforms will no longer be distributed by the Rust project.\n+  Please refer to the linked blog post for more information.\n+\n+[54733]: https://github.com/rust-lang/rust/pull/54733/\n+[61351]: https://github.com/rust-lang/rust/pull/61351/\n+[67255]: https://github.com/rust-lang/rust/pull/67255/\n+[66661]: https://github.com/rust-lang/rust/pull/66661/\n+[66771]: https://github.com/rust-lang/rust/pull/66771/\n+[66847]: https://github.com/rust-lang/rust/pull/66847/\n+[66238]: https://github.com/rust-lang/rust/pull/66238/\n+[66277]: https://github.com/rust-lang/rust/pull/66277/\n+[66325]: https://github.com/rust-lang/rust/pull/66325/\n+[66172]: https://github.com/rust-lang/rust/pull/66172/\n+[66183]: https://github.com/rust-lang/rust/pull/66183/\n+[65879]: https://github.com/rust-lang/rust/pull/65879/\n+[65013]: https://github.com/rust-lang/rust/pull/65013/\n+[64882]: https://github.com/rust-lang/rust/pull/64882/\n+[64325]: https://github.com/rust-lang/rust/pull/64325/\n+[cargo/7560]: https://github.com/rust-lang/cargo/pull/7560/\n+[cargo/7579]: https://github.com/rust-lang/cargo/pull/7579/\n+[cargo/7591]: https://github.com/rust-lang/cargo/pull/7591/\n+[cargo/7593]: https://github.com/rust-lang/cargo/pull/7593/\n+[`Result::map_or_else`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else\n+[`Result::map_or`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or\n+[`std::rc::Weak::weak_count`]: https://doc.rust-lang.org/std/rc/struct.Weak.html#method.weak_count\n+[`std::rc::Weak::strong_count`]: https://doc.rust-lang.org/std/rc/struct.Weak.html#method.strong_count\n+[`std::sync::Weak::weak_count`]: https://doc.rust-lang.org/std/sync/struct.Weak.html#method.weak_count\n+[`std::sync::Weak::strong_count`]: https://doc.rust-lang.org/std/sync/struct.Weak.html#method.strong_count\n+[apple-32bit-drop]: https://blog.rust-lang.org/2020/01/03/reducing-support-for-32-bit-apple-targets.html\n+\n Version 1.40.0 (2019-12-19)\n ===========================\n "}, {"sha": "4c3c4ddac78ee40c115889de8d50ded11ff9cbdb", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let mut prev_rest_span = None;\n \n         let mut iter = pats.iter();\n-        // Lower all the patterns until the first occurence of a sub-slice pattern.\n+        // Lower all the patterns until the first occurrence of a sub-slice pattern.\n         for pat in iter.by_ref() {\n             match pat.kind {\n                 // Found a sub-slice pattern `..`. Record, lower it to `_`, and stop here."}, {"sha": "aaac7fb4460cd51fb717f5267ccbb8158902fdc2", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -23,6 +23,7 @@\n #![feature(integer_atomics)]\n #![feature(test)]\n #![feature(associated_type_bounds)]\n+#![feature(thread_id_value)]\n #![cfg_attr(unix, feature(libc))]\n #![allow(rustc::default_hash_types)]\n "}, {"sha": "90f74328a1d515b4b3d520daeda114b7290b7642", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -88,7 +88,6 @@ use std::fs;\n use std::path::Path;\n use std::process;\n use std::sync::Arc;\n-use std::thread::ThreadId;\n use std::time::{Duration, Instant};\n use std::u32;\n \n@@ -129,17 +128,13 @@ bitflags::bitflags! {\n                         Self::QUERY_PROVIDERS.bits |\n                         Self::QUERY_BLOCKED.bits |\n                         Self::INCR_CACHE_LOADS.bits;\n-\n-        // empty() and none() aren't const-fns unfortunately\n-        const NONE = 0;\n-        const ALL  = !Self::NONE.bits;\n     }\n }\n \n // keep this in sync with the `-Z self-profile-events` help message in librustc_session/options.rs\n const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n-    (\"none\", EventFilter::NONE),\n-    (\"all\", EventFilter::ALL),\n+    (\"none\", EventFilter::empty()),\n+    (\"all\", EventFilter::all()),\n     (\"default\", EventFilter::DEFAULT),\n     (\"generic-activity\", EventFilter::GENERIC_ACTIVITIES),\n     (\"query-provider\", EventFilter::QUERY_PROVIDERS),\n@@ -149,10 +144,6 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"query-keys\", EventFilter::QUERY_KEYS),\n ];\n \n-fn thread_id_to_u32(tid: ThreadId) -> u32 {\n-    unsafe { std::mem::transmute::<ThreadId, u64>(tid) as u32 }\n-}\n-\n /// Something that uniquely identifies a query invocation.\n pub struct QueryInvocationId(pub u32);\n \n@@ -185,7 +176,7 @@ impl SelfProfilerRef {\n         // If there is no SelfProfiler then the filter mask is set to NONE,\n         // ensuring that nothing ever tries to actually access it.\n         let event_filter_mask =\n-            profiler.as_ref().map(|p| p.event_filter_mask).unwrap_or(EventFilter::NONE);\n+            profiler.as_ref().map(|p| p.event_filter_mask).unwrap_or(EventFilter::empty());\n \n         SelfProfilerRef {\n             profiler,\n@@ -318,7 +309,7 @@ impl SelfProfilerRef {\n     ) {\n         drop(self.exec(event_filter, |profiler| {\n             let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = thread_id_to_u32(std::thread::current().id());\n+            let thread_id = std::thread::current().id().as_u64() as u32;\n \n             profiler.profiler.record_instant_event(\n                 event_kind(profiler),\n@@ -477,7 +468,7 @@ impl<'a> TimingGuard<'a> {\n         event_kind: StringId,\n         event_id: EventId,\n     ) -> TimingGuard<'a> {\n-        let thread_id = thread_id_to_u32(std::thread::current().id());\n+        let thread_id = std::thread::current().id().as_u64() as u32;\n         let raw_profiler = &profiler.profiler;\n         let timing_guard =\n             raw_profiler.start_recording_interval_event(event_kind, event_id, thread_id);"}, {"sha": "1ab8f05db126632f6679699fba86fd43827596ae", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -477,7 +477,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// If one of the types is an uncalled function and calling it would yield the other type,\n-    /// suggest calling the function. Returns wether a suggestion was given.\n+    /// suggest calling the function. Returns whether a suggestion was given.\n     fn add_type_neq_err_label(\n         &self,\n         err: &mut rustc_errors::DiagnosticBuilder<'_>,"}, {"sha": "56fc84b4a3fcac372b714f3d4d16d85ec357f9d7", "filename": "src/libstd/sys/sgx/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -19,7 +19,7 @@ pub fn errno() -> i32 {\n \n pub fn error_string(errno: i32) -> String {\n     if errno == RESULT_SUCCESS {\n-        \"operation succesful\".into()\n+        \"operation successful\".into()\n     } else if ((Error::UserRangeStart as _)..=(Error::UserRangeEnd as _)).contains(&errno) {\n         format!(\"user-specified error {:08x}\", errno)\n     } else {"}, {"sha": "d8e63b0bfb24ecff8db55724dbc8e285777d202c", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -0,0 +1,16 @@\n+// Checks that we report ABI mismatches for \"const extern fn\"\n+// compile-flags: -Z unleash-the-miri-inside-of-you\n+\n+#![feature(const_extern_fn)]\n+\n+const extern \"C\" fn c_fn() {}\n+\n+const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n+    my_fn(); //~ ERROR any use of this value will cause an error\n+    //~^ WARN skipping const checks\n+}\n+\n+const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+//~^ WARN skipping const checks\n+\n+fn main() {}"}, {"sha": "da00c49963eec2778231a36c93a9491e2f403df4", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -0,0 +1,28 @@\n+warning: skipping const checks\n+  --> $DIR/abi-mismatch.rs:9:5\n+   |\n+LL |     my_fn();\n+   |     ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/abi-mismatch.rs:13:39\n+   |\n+LL | const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: any use of this value will cause an error\n+  --> $DIR/abi-mismatch.rs:9:5\n+   |\n+LL |     my_fn();\n+   |     ^^^^^^^\n+   |     |\n+   |     tried to call a function with ABI C using caller ABI Rust\n+   |     inside call to `call_rust_fn` at $DIR/abi-mismatch.rs:13:17\n+...\n+LL | const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+   | --------------------------------------------------------------------------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "a3023ee906de83496c756d1d7dfe4191fb3c3f84", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -10,7 +10,7 @@\n // However, we did not account for the expected type being different than the tuple pattern type.\n // This caused an issue when the tuple pattern type (`P<T>`) was generic.\n // Specifically, we tried deriving the 0th field's type using the `substs` of the expected type.\n-// When attempting to substitute `T`, there was no such substitution, so \"out of range\" occured.\n+// When attempting to substitute `T`, there was no such substitution, so \"out of range\" occurred.\n \n struct U {} // 0 type parameters offered\n struct P<T>(T); // 1 type parameter wanted"}, {"sha": "be66c9ab2db6775f07509813059da27350b14206", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a79d08fa57e1c257d647c9848e35defcb379c07/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8a79d08fa57e1c257d647c9848e35defcb379c07", "patch": "@@ -2949,7 +2949,7 @@ impl<'test> TestCx<'test> {\n             };\n             if run_output_errors > 0 {\n                 self.fatal_proc_rec(\n-                    &format!(\"{} errors occured comparing run output.\", run_output_errors),\n+                    &format!(\"{} errors occurred comparing run output.\", run_output_errors),\n                     &proc_res,\n                 );\n             }"}]}